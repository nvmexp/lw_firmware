/*
 * LWIDIA_COPYRIGHT_BEGIN
 *
 * Copyright 2021 by LWPU Corporation.  All rights reserved.  All
 * information contained herein is proprietary and confidential to LWPU
 * Corporation.  Any use, reproduction, or disclosure without the written
 * permission of LWPU Corporation is prohibited.
 *
 * LWIDIA_COPYRIGHT_END
 */
#ifndef RMT_GSP_CC_SPDMDEFINES_H
#define RMT_GSP_CC_SPDMDEFINES_H
#include "../rmt_spdmdefines.h"

#ifndef LW_ALIGN_UP
#define LW_ALIGN_UP(v, gran)   (((v) + ((gran) - 1)) & ~((gran)-1))
#endif

#pragma pack(1)

#define SPDM_SESSION_ID_ILWALID (0)
#define SPDM_SESSION_ID_TEST    (0xFFFF)

#define SPDM_REQUEST_KEY_EXCHANGE_OPAQUE_DATA_SIZE  (sizeof(SPDM_SELWRED_MESSAGE_GENERAL_OPAQUE_DATA_TABLE_HEADER) + \
                                                     sizeof(SPDM_OPAQUE_ELEMENT_TABLE_HEADER) +                      \
                                                     sizeof(SPDM_SELWRED_MESSAGE_OPAQUE_ELEMENT_SUPPORTED_VERSION) + \
                                                     sizeof(SPDM_VERSION_NUMBER))

#define SPDM_RESPONSE_KEY_EXCHANGE_OPAQUE_DATA_SIZE  (sizeof(SPDM_SELWRED_MESSAGE_GENERAL_OPAQUE_DATA_TABLE_HEADER) + \
                                                      sizeof(SPDM_OPAQUE_ELEMENT_TABLE_HEADER) +                      \
                                                      sizeof(SPDM_SELWRED_MESSAGE_OPAQUE_ELEMENT_VERSION_SELECTION))

#define SPDM_OPAQUE_DATA_SIZE_ALIGNED_NUM  (4)

// SPDM library needs opaque data size to be aligned with DWORD
#define SPDM_REQUEST_KEY_EXCHANGE_OPAQUE_DATA_SIZE_ALIGNED_IN_BYTE (LW_ALIGN_UP(SPDM_REQUEST_KEY_EXCHANGE_OPAQUE_DATA_SIZE, SPDM_OPAQUE_DATA_SIZE_ALIGNED_NUM))
#define SPDM_RESPONSE_KEY_EXCHANGE_OPAQUE_DATA_SIZE_ALIGNED_IN_BYTE (LW_ALIGN_UP(SPDM_RESPONSE_KEY_EXCHANGE_OPAQUE_DATA_SIZE, SPDM_OPAQUE_DATA_SIZE_ALIGNED_NUM))

#define SPDM_ECDSA_384_SIGNATURE_SIZE_IN_BYTES           (96)
#define SPDM_SHA_384_HASH_SIZE_IN_BYTE                   (48)

//
// TODO: GSP will use ECDSA-384 for sign algorithm.
// X, Y point size both are 48 bytes. Need to validate MSB-order and value.
#define SPDM_KEY_EXCHANGE_RANDOM_DATA_SIZE_IN_BYTE        (32)
#define SPDM_KEY_EXCHANGE_EXCHANGE_DATA_SIZE_IN_BYTE      SPDM_ECDSA_384_SIGNATURE_SIZE_IN_BYTES

//Because GH100 select SHA384 as hash algorithm for KEY_EXCHANGE
#define SPDM_KEY_EXCHANGE_MEASUREMENT_SUMMARY_SHA384_SIZE_IN_BYTE  SPDM_SHA_384_HASH_SIZE_IN_BYTE

//Because GH100 select ECDSA-384 as sign algorithm, the signature will contaion X, Y points
#define SPDM_KEY_EXCHANGE_SIGNATURE_SIZE_IN_BYTE        SPDM_ECDSA_384_SIGNATURE_SIZE_IN_BYTES

#define SPDM_KEY_EXCHANGE_RANDOM_DATA(i)   (i % 0xFF)

#define SPDM_FINISH_REQUEST_SIGNATURE_SIZE_IN_BYTE              SPDM_ECDSA_384_SIGNATURE_SIZE_IN_BYTES
#define SPDM_FINISH_REQUEST_ATTR_SIGNATURE_INCLUDED            (0x1)
#define SPDM_FINISH_REQUEST_VERIFY_DATA_SIZE_IN_BYTE            SPDM_SHA_384_HASH_SIZE_IN_BYTE
#define SPDM_FINISH_RESPONSE_VERIFY_DATA_SIZE_IN_BYTE           SPDM_SHA_384_HASH_SIZE_IN_BYTE

// DHE public information generated by the Requester. If the DHE group selected in the
// most recent ALGORITHMS response is finite-field-based (FFDHE), the ExchangeData
// represents the computed public value. If the selected DHE group is elliptic lwrve-based
// (ECDHE), the ExchangeData represents the X and Y values in network byte order.
// Specifically, X is [0: C - 1] and Y is [C : D â€“ 1]. In both cases the size of D (and C for ECDHE)
// is derived from the selected DHE group.
//
typedef union
{
   SPDM_MESSAGE_HEADER Header;

    struct
    {
        LwU8  SpdmVersionId;
        LwU8  RequestResponseCode;
        LwU8  HashType;
        LwU8  SlotNumber;
        LwU16 ReqSessionID;
        LwU16 Reserved1;
        LwU8  RandomData[SPDM_KEY_EXCHANGE_RANDOM_DATA_SIZE_IN_BYTE];
        LwU8  ExchangeData[SPDM_KEY_EXCHANGE_EXCHANGE_DATA_SIZE_IN_BYTE];
        LwU16 OpaqueDataLength;
        LwU8  OpaqueData[SPDM_REQUEST_KEY_EXCHANGE_OPAQUE_DATA_SIZE_ALIGNED_IN_BYTE];
    } KeyExchange;
} SPDM_MESSAGE_KEY_EXCHANGE, *PSPDM_MESSAGE_KEY_EXCHANGE;

typedef union
{
    SPDM_MESSAGE_HEADER Header;

    struct
    {
        LwU8  SpdmVersionId;
        LwU8  RequestResponseCode;
        LwU8  HeartbeatPeriod;
        LwU8  Reserved1;
        LwU16 RspSessionID;
        LwU8  MutAuthRequested;
        LwU8  SlotIDParam;
        LwU8  RandomData[SPDM_KEY_EXCHANGE_RANDOM_DATA_SIZE_IN_BYTE];
        LwU8  ExchangeData[SPDM_KEY_EXCHANGE_EXCHANGE_DATA_SIZE_IN_BYTE];
        LwU8  MeasurementSummaryHash[SPDM_KEY_EXCHANGE_MEASUREMENT_SUMMARY_SHA384_SIZE_IN_BYTE];
        LwU16 OpaqueDataLength;
        LwU8  OpaqueData[SPDM_RESPONSE_KEY_EXCHANGE_OPAQUE_DATA_SIZE_ALIGNED_IN_BYTE];
        LwU8  Signature[SPDM_KEY_EXCHANGE_SIGNATURE_SIZE_IN_BYTE];
        //LwU8  ResponderVerifyData[];  // TODO: We don't support this field ??
    } KeyExchange;
} SPDM_MESSAGE_KEY_EXCHANGE_RESPONSE, *PSPDM_MESSAGE_KEY_EXCHANGE_RESPONSE;

typedef union
{
    SPDM_MESSAGE_HEADER Header;

    struct
    {
        LwU8  SpdmVersionId;
        LwU8  RequestResponseCode;
        LwU8  SignatureIncluded;
        LwU8  SlotNumber;
        //LwU8  Signature[]; // TODO: No signature neededin GH100-CC ?
        LwU8  RequesterVerifyData[SPDM_FINISH_REQUEST_VERIFY_DATA_SIZE_IN_BYTE];
    } Finish;
} SPDM_MESSAGE_FINISH, *PSPDM_MESSAGE_FINISH;

typedef union {
    SPDM_MESSAGE_HEADER Header;

    struct
    {
        LwU8  SpdmVersionId;
        LwU8  RequestResponseCode;
        LwU8  Reserved1;
        LwU8  Reserved2;
       // LwU8  RequesterVerifyData[SPDM_FINISH_RESPONSE_VERIFY_DATA_SIZE_IN_BYTE];
    } Finish;
} SPDM_MESSAGE_FINISH_RESPONSE, *PSPDM_MESSAGE_FINISH_RESPONSE;

#define SPDM_MEASUREMENT_NONCE_SIZE_IN_BYTE           (32)
#define SPDM_GET_MEASUREMENTS_ATTR_GENERATE_SIG       0:0
#define SPDM_GET_MEASUREMENTS_ATTR_GENERATE_SIG_YES   1
#define SPDM_GET_MEASUREMENTS_ATTR_GENERATE_SIG_NO    0

#define SPDM_GET_MEASUREMENTS_OP_QUERY_BLOCKS_NUMBERS  (0)
#define SPDM_GET_MEASUREMENTS_OP_REQUEST_ALL_BLOCKS    (0xFF)

#define SPDM_MEASUREMENT_HASH_SIZE_IN_BYTE             (48)

#define EXPECTED_SPDM_MEASUREMENT_OPAQUE_LENGTH        (0)

//
// !! Warning !!
// In case we include drivers/resman/src/libraries/libspdm/include/industry_standard/spdm.h,
// Some structure define will be overwrite, and cause test failed.
// So we declare same structures here.
//

//
// SPDM MEASUREMENTS block common header
//
typedef struct _SPDM_MEASUREMENT_BLOCK_COMMON_HEADER
{
    LwU8  index;
    LwU8  measurementSpecification;
    LwU16 measurementSize;
} SPDM_MEASUREMENT_BLOCK_COMMON_HEADER, *PSPDM_MEASUREMENT_BLOCK_COMMON_HEADER;

#define SPDM_MEASUREMENT_BLOCK_HEADER_SPECIFICATION_DMTF BIT0

//
// SPDM MEASUREMENTS block DMTF header
//
typedef struct _SPDM_MEASUREMENT_BLOCK_DMTF_HEADER
{
    LwU8   dmtfSpecMeasurementValueType;
    LwU16  dmtfSpecMeasurementValueSize;
}  SPDM_MEASUREMENT_BLOCK_DMTF_HEADER,  *PSPDM_MEASUREMENT_BLOCK_DMTF_HEADER;

typedef struct _SPDM_MEASUREMENT_BLOCK_DMTF
{
    SPDM_MEASUREMENT_BLOCK_COMMON_HEADER measurementBlockCommonHeader;
    SPDM_MEASUREMENT_BLOCK_DMTF_HEADER   measurementBlockDmtfHeader;
    //uint8                                 hash_value[hash_size];
} SPDM_MEASUREMENT_BLOCK_DMTF, *PSPDM_MEASUREMENT_BLOCK_DMTF;

// TODO: bug 200780747, need to aligned CC_MSR_NUM defines in cc_rts.h
#define EXPECTED_SPDM_MEASUREMENT_BLOCK_NUM                (16)
#define EXPECTED_SPDM_MEASUREMENT_RECORD_SIZE_IN_BYTE   \
        ((sizeof(SPDM_MEASUREMENT_BLOCK_DMTF) + SPDM_MEASUREMENT_HASH_SIZE_IN_BYTE) * EXPECTED_SPDM_MEASUREMENT_BLOCK_NUM)

#define MEASUREMENTS_RECORD_LENGTH_SIZE_IN_BYTE            (3)

typedef union
{
   SPDM_MESSAGE_HEADER Header;

    struct
    {
        LwU8  SpdmVersionId;
        LwU8  RequestResponseCode;
        LwU8  Attributes;
        LwU8  MeasurementOperation;
        LwU8  Nonce[SPDM_MEASUREMENT_NONCE_SIZE_IN_BYTE];
        LwU8  SlotNumber; // BIT[0:3]=slot_id, BIT[4:7]=reserved
    } Measurements;
} SPDM_MESSAGE_GET_MEASUREMENTS, *PSPDM_MESSAGE_GET_MEASUREMENTS;

typedef union
{
    SPDM_MESSAGE_HEADER Header;

    struct
    {
        LwU8  SpdmVersionId;
        LwU8  RequestResponseCode;
        LwU8  Param1;
        LwU8  SlotNumber; // BIT[0:3]=slot_id, BIT[4:7]=reserved
        LwU8  NumberOfBlocks;
        LwU8  MeasurementRecordLength[MEASUREMENTS_RECORD_LENGTH_SIZE_IN_BYTE];
        LwU8  MeasurementRecord[EXPECTED_SPDM_MEASUREMENT_RECORD_SIZE_IN_BYTE];
        LwU8  Nonce[SPDM_MEASUREMENT_NONCE_SIZE_IN_BYTE];
        LwU16 OpaqueLength;
        // LwU8  OpaqueData[]; TODO: We don't have opaque data in GET_MEASUREMENTS response message
        LwU8  Signature[SPDM_ECDSA_384_SIGNATURE_SIZE_IN_BYTES];
    } Measurements;
} SPDM_MESSAGE_MEASUREMENTS_RESPONSE, *PSPDM_MESSAGE_MEASUREMENTS_RESPONSE;

#pragma pack()
#endif

