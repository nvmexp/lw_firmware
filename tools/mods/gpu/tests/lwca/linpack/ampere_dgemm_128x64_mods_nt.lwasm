.headerflags	@"EF_LWDA_TEXMODE_UNIFIED EF_LWDA_64BIT_ADDRESS EF_LWDA_SM80 EF_LWDA_PTX_SM(EF_LWDA_SM80) "

	.section       .text.ampere_dgemm_128x64_mods_nt,"ax",@progbits
	.sectionflags	@"SHF_BARRIERS=1"
	.align 128
	.global        ampere_dgemm_128x64_mods_nt
	.type          ampere_dgemm_128x64_mods_nt,@function
	.size          ampere_dgemm_128x64_mods_nt,(ampere_dgemm_128x64_mods_nt_END - ampere_dgemm_128x64_mods_nt)
	.other         ampere_dgemm_128x64_mods_nt,@"STO_LWDA_ENTRY STV_DEFAULT"
ampere_dgemm_128x64_mods_nt:
.text.ampere_dgemm_128x64_mods_nt:
      MOV  R167, RZ ?W2;                                     // MOV ctaRow_HI, RZ
      MOV R0, c[0][0x1d4] ?W2;                               // MOV mode, Mode
      S2R R1, SR_CTAid.Z &wr=4 ?W2;                          // S2R batchIdx, SR_CTAid.Z
      S2R R2, SR_VirtId &wr=4 ?W2;                           // S2R smId, SR_VirtId
      S2R         R168, SR_Tid.X &wr=4 ?W2;                  // S2R tid, SR_Tid.X
      ISETP.NE    P0, RZ, c[0][0x1f8] ?W2;                   // ISETP.NE P0, RZ, AbByRef
      S2R         R166, SR_CTAid.X &wr=4 ?W2;                // S2R ctaRow, SR_CTAid.X
      S2R         R165, SR_CTAid.Y &wr=4 ?W2;                // S2R ctaCol, SR_CTAid.Y
      LOP.AND P3, RZ, R0, 4 ?W2;                             // LOP.AND P3, RZ, mode, 4
      IMAD.LO.U32 R3, R1, c[0][0x1d0], RZ &req=4 ?W5;        // IMAD.LO.U32 temp0, batchIdx, ChunkK, RZ
      IADD    R3, -R3, c[0][0x1c4] ?W2;                      // IADD temp0, -temp0, CountK
      MOV     R162, c[0][0x1c4] ?W2;                         // MOV counterK, CountK
      ISETP.LT.AND  P4, PT, R3, c[0][0x1d0], P3 ?W2;         // ISETP.LT.AND P4, PT, temp0, ChunkK, P3
(P3)  MOV        R162, c[0][0x1d0] ?W11;                     // @P3 MOV counterK, ChunkK
(P4)  MOV        R162, R3 ?W4;                               // @P4 MOV counterK, temp0
      LOP.AND  R3, R0, 0xf00 ?W2;                            // LOP.AND log2GroupCols, mode, 0xf00
      LOP.AND  P5, RZ, R0, 0x1000 ?W2;                       // LOP.AND P5, RZ, mode, 0x1000
      SHR.U32  R3, R3, 8 ?W4;                                // SHR.U32 log2GroupCols, log2GroupCols, 8
      BMSK     R4, R3, 1 ?W2;                                // BMSK groupCols, log2GroupCols, 1
      BMSK     R5, RZ, R3 ?W2;                               // BMSK mask, RZ, log2GroupCols
      PSETP.AND P4, !PT, !PT ?W2;                            // PSETP.AND P4, !PT, !PT
ampere_dgemm_128x64_mods_nt_prolog_cta_swizzle_loop:
      LOP.OR   R6, R165, R5 &req=4 ?W2;                      // LOP.OR testCol, ctaCol, mask
      ISETP.EQ P3, R5, 3 ?W2;                                // ISETP.EQ P3, mask, 3
      ISETP.LT P2, R6, c[0x0][0x010] ?W2;                    // ISETP.LT P2, testCol, GridDimY
      LOP.AND  R7,  R165.reuse,  R5.reuse ?W2;               // LOP.AND colMod, ctaCol.reuse, mask.reuse
      LOP.AND  R10,  R165,        R4 ?W2;                    // LOP.AND colBit, ctaCol, groupCols
      ISETP.EQ.AND P3, PT, R6, c[0x0][0x010], P3 ?W2;        // ISETP.EQ.AND P3, PT, testCol, GridDimY, P3
      LOP.AND  R8, R165.reuse, ~R5 ?W1;                      // LOP.AND colBase, ctaCol.reuse, ~mask
      IMAD.U32 R9, R7, c[0x0][0x00c], R166 &req=4 ?W1;       // IMAD.U32 linear, colMod, GridDimX, ctaRow
(P5)  ISETP.EQ.XOR P4, PT, R10, R4, P4 ?W2;                  // @P5 ISETP.EQ.XOR P4, PT, colBit, groupCols, P4
      SHR.U32 R4, R4, 1 ?W2;                                 // SHR.U32 groupCols, groupCols, 1
(P2)  BRA ampere_dgemm_128x64_mods_nt_prolog_cta_swizzle_group_col_pow2 ?W5; // @P2 BRA ampere_dgemm_128x64_mods_nt_prolog_cta_swizzle_group_col_pow2
(!P3) SHR.U32  R5, R5, 1 ?W2;                                // @!P3 SHR.U32 mask, mask, 1
(!P3) IADD     R3, R3, -1 ?W2;                               // @!P3 IADD log2GroupCols, log2GroupCols, -1
(!P3) BRA ampere_dgemm_128x64_mods_nt_prolog_cta_swizzle_loop ?W5; // @!P3 BRA ampere_dgemm_128x64_mods_nt_prolog_cta_swizzle_loop
      IMUL.WIDE.U32 R12, R9, 0x55555556 ?W1;                 // IMUL.WIDE.U32 swizRow64, linear, 0x55555556
      IADD  R165, R8, R9 ?W5;                                // IADD ctaCol, colBase, linear
      IMAD.U32 R165, R13, -3, R165 ?W1;                      // IMAD.U32 ctaCol, swizRow, -3, ctaCol
(!P4) MOV R166, R13 ?W2;                                     // @!P4 MOV ctaRow, swizRow
(P4)  IADD.X R166, ~R13, c[0x0][0x00c], !PT ?W2;             // @P4 IADD.X ctaRow, ~swizRow, GridDimX, !PT
      BRA ampere_dgemm_128x64_mods_nt_prolog_cta_swizzle_done ?W5; // BRA ampere_dgemm_128x64_mods_nt_prolog_cta_swizzle_done
ampere_dgemm_128x64_mods_nt_prolog_cta_swizzle_group_col_pow2:
      SHR.U32 R166, R9, R3 ?W2;                              // SHR.U32 ctaRow, linear, log2GroupCols
      LOP3.LUT  R165, R8, R9, R5, 0xf8 ?W2;                  // LOP3.LUT ctaCol, colBase, linear, mask, B_AND_C__OR_A ?WiT
(P4)  IADD.X R166, ~R166, c[0x0][0x00c], !PT ?W4;            // @P4 IADD.X ctaRow, ~ctaRow, GridDimX, !PT
ampere_dgemm_128x64_mods_nt_prolog_cta_swizzle_done:
      SHR.U32 R2, R2, 20 ?W2;                                // SHR.U32 smId, smId, 20
      LOP.AND P3, RZ, R0, 0x10000 ?W2;                       // LOP.AND P3, RZ, mode, 0x10000
      IMAD.LO.U32 R6, R1, c[0x0][0x010], R165 ?W5;           // IMAD.LO.U32 ctaIdx, batchIdx, GridDimY, ctaCol
      IMAD.WIDE.U32 R6, R6, c[0x0][0x00c], R166 ?W5;         // IMAD.WIDE.U32 ctaIdx, ctaIdx, GridDimX, ctaRow
      LOP.AND R2, R2, 0x1ff ?W2;                             // LOP.AND smId, smId, 0x1ff
      LEA.LO   R4, P2, R6.reuse, c[0][0x1c8], 1 ?W4;         // LEA.LO syncPointer, predCarry, ctaIdx.reuse, Sync, 1
      LEA.HI.X R5, R6, c[0][0x1cc], R7, 1, P2 ?W8;           // LEA.HI.X syncPointer_HI, ctaIdx, Sync_HI, ctaIdx_HI, 1, predCarry
(P3)  STG.E.EN.U16.WEAK [R4], R2 &rd=3 ?W2;                  // @P3 STG.E.EN.U16.WEAK [syncPointer], smId
      MOV      R164, 12288 ?W2;                              // MOV sharedPageFlip, 12288
      MOV           R158, c[0][0x1e0] ?W2;                   // MOV readPtr, BetaRef
      MOV           R159, c[0][0x1e4] ?W8;                   // MOV readPtr_HI, BetaRef_HI
(P0)  LDG.E.EN.LTC128B.64.CONSTANT    R160, [R158] &req=3 &rd=3 &wr=2 ?W2; // @P0 LDG.E.EN.LTC128B.64.CONSTANT beta, [readPtr]
      ISETP.GE      P1, R162, 8 ?W2;                         // ISETP.GE P1, counterK, 8
(!P0) MOV  R160, c[0][0x1f0] ?W1;                            // @!P0 MOV beta, BetaVal
(!P0) MOV  R161, c[0][0x1f4] ?W1EG;                          // @!P0 MOV beta_HI, BetaVal_HI
      SHL R169, R168, 2 &req=4 ?W2;                          // SHL sharedZeroOffset, tid, 2
      MOV  R9, RZ ?W2;                                       // MOV absRowCol_HI, RZ
      SHR.U32 R5, R168, 5 &req=4 ?W2;                        // SHR.U32 maskedWid, tid, 5
      LOP.AND R10, R168, 31 ?W2;                             // LOP.AND thread, tid, 31
      LOP.AND R5, R5, 0x3 ?W2;                               // LOP.AND maskedWid, maskedWid, 0x3
      MOV        R158, c[0][0x160] &req=3 ?W2;               // MOV readPtrA, BaseA
      MOV        R159, c[0][0x164] ?W2;                      // MOV readPtrA_HI, BaseA_HI
      LOP.AND P2, R2, R0, 7 ?W13EG;                          // LOP.AND predCarry, temp0, mode, 7
(!P2) BRA.U ampere_dgemm_128x64_mods_nt_END_BATCH_PTR_CALCA_PROLOG ?W5; // @!predCarry BRA.U ampere_dgemm_128x64_mods_nt_END_BATCH_PTR_CALCA_PROLOG
      ISETP.EQ  P2, R2, 2 ?W13EG;                            // ISETP.EQ predCarry, temp0, 2
(!P2) BRA.U ampere_dgemm_128x64_mods_nt_BATCHED_CONTIG_PTR_CALCA_PROLOG ?W5; // @!predCarry BRA.U ampere_dgemm_128x64_mods_nt_BATCHED_CONTIG_PTR_CALCA_PROLOG
      LEA.LO   R6, P2, R1.reuse, R158, 3 &req=4 ?W4;         // LEA.LO readPtrMul, predCarry, batchIdx.reuse, readPtrA, 3
      LEA.HI.X R7, R1, R159, RZ, 3, P2 ?W8;                  // LEA.HI.X readPtrMul_HI, batchIdx, readPtrA_HI, RZ, 3, predCarry
      LDG.E.EN.LTC128B.64.CONSTANT R158, [R6 + 0x00] &rd=3 &wr=2 ?W2; // LDG.E.EN.LTC128B.64.CONSTANT readPtrA, [readPtrMul + 0x00]
      BRA.U ampere_dgemm_128x64_mods_nt_END_BATCH_PTR_CALCA_PROLOG ?W5; // BRA.U ampere_dgemm_128x64_mods_nt_END_BATCH_PTR_CALCA_PROLOG
ampere_dgemm_128x64_mods_nt_BATCHED_CONTIG_PTR_CALCA_PROLOG:
      IMAD.WIDE.U32 R6,    R1, c[0][0x198],    RZ &req=4 ?W4; // IMAD.WIDE.U32 readPtrMul, batchIdx, MatrixStrideA, RZ
      IMAD.LO.U32   R7, R1, c[0][0x19c], R7 ?W2;             // IMAD.LO.U32 readPtrMul_HI, batchIdx, MatrixStrideA_HI, readPtrMul_HI
      LEA.LO   R158, P2, R6.reuse, R158, 3 ?W4;              // LEA.LO readPtrA, predCarry, readPtrMul.reuse, readPtrA, 3
      LEA.HI.X R159, R6, R159, R7, 3, P2 ?W2;                // LEA.HI.X readPtrA_HI, readPtrMul, readPtrA_HI, readPtrMul_HI, 3, predCarry
ampere_dgemm_128x64_mods_nt_END_BATCH_PTR_CALCA_PROLOG:
      ISCADD     R156, R5, 0x0, 10 ?W4;                      // ISCADD sharedWriteA, maskedWid, 0x0, 10
      ISCADD     R156, R10, R156, 3 ?W2;                     // ISCADD sharedWriteA, thread, sharedWriteA, 3
      ISCADD     R8, R166, R10, 7 ?W5;                       // ISCADD absRowCol, ctaRow, thread, 7
      IMAD.WIDE.U32 R6, R5, c[0][0x1b0], R8 &req=3 ?W5;      // IMAD.WIDE.U32 readPtrMul, maskedWid, StrideA, absRowCol
      LEA.LO   R158, P2, R6.reuse, R158, 3 &req=2 ?W4;       // LEA.LO readPtrA, predCarry, readPtrMul.reuse, readPtrA, 3
      LEA.HI.X R159, R6, R159, R7, 3, P2 ?W4;                // LEA.HI.X readPtrA_HI, readPtrMul, readPtrA_HI, readPtrMul_HI, 3, predCarry
      IADD R8, R8, -c[0][0x1bc] ?W4;                         // IADD absRowCol, absRowCol, -CountM
      ISETP.LT P3, R8, 0 ?W2;                                // ISETP.LT P3, absRowCol, 0
      ISETP.LT P4, R8, -32 ?W2;                              // ISETP.LT P4, absRowCol, -32
      ISETP.LT P5, R8, -64 ?W2;                              // ISETP.LT P5, absRowCol, -64
      ISETP.LT P6, R8, -96 ?W13EG;                           // ISETP.LT P6, absRowCol, -96
      P2R.B0 R163, PR, RZ, 0x78 ?W2;                         // P2R.B0 raggedMnPreds0, PR, RZ, 0x78
      MOV  R9, RZ ?W2;                                       // MOV absRowCol_HI, RZ
      SHR.U32 R5, R168, 5 &req=4 ?W2;                        // SHR.U32 maskedWid, tid, 5
      LOP.AND R10, R168, 31 ?W2;                             // LOP.AND thread, tid, 31
      LOP.AND R5, R5, 0x3 ?W2;                               // LOP.AND maskedWid, maskedWid, 0x3
      MOV        R154, c[0][0x168] &req=3 ?W2;               // MOV readPtrB, BaseB
      MOV        R155, c[0][0x16c] ?W2;                      // MOV readPtrB_HI, BaseB_HI
      LOP.AND P2, R2, R0, 7 ?W13EG;                          // LOP.AND predCarry, temp0, mode, 7
(!P2) BRA.U ampere_dgemm_128x64_mods_nt_END_BATCH_PTR_CALCB_PROLOG ?W5; // @!predCarry BRA.U ampere_dgemm_128x64_mods_nt_END_BATCH_PTR_CALCB_PROLOG
      ISETP.EQ  P2, R2, 2 ?W13EG;                            // ISETP.EQ predCarry, temp0, 2
(!P2) BRA.U ampere_dgemm_128x64_mods_nt_BATCHED_CONTIG_PTR_CALCB_PROLOG ?W5; // @!predCarry BRA.U ampere_dgemm_128x64_mods_nt_BATCHED_CONTIG_PTR_CALCB_PROLOG
      LEA.LO   R6, P2, R1.reuse, R154, 3 &req=4 ?W4;         // LEA.LO readPtrMul, predCarry, batchIdx.reuse, readPtrB, 3
      LEA.HI.X R7, R1, R155, RZ, 3, P2 ?W8;                  // LEA.HI.X readPtrMul_HI, batchIdx, readPtrB_HI, RZ, 3, predCarry
      LDG.E.EN.LTC128B.64.CONSTANT R154, [R6 + 0x00] &rd=3 &wr=2 ?W2; // LDG.E.EN.LTC128B.64.CONSTANT readPtrB, [readPtrMul + 0x00]
      BRA.U ampere_dgemm_128x64_mods_nt_END_BATCH_PTR_CALCB_PROLOG ?W5; // BRA.U ampere_dgemm_128x64_mods_nt_END_BATCH_PTR_CALCB_PROLOG
ampere_dgemm_128x64_mods_nt_BATCHED_CONTIG_PTR_CALCB_PROLOG:
      IMAD.WIDE.U32 R6,    R1, c[0][0x1a0],    RZ &req=4 ?W4; // IMAD.WIDE.U32 readPtrMul, batchIdx, MatrixStrideB, RZ
      IMAD.LO.U32   R7, R1, c[0][0x1a4], R7 ?W2;             // IMAD.LO.U32 readPtrMul_HI, batchIdx, MatrixStrideB_HI, readPtrMul_HI
      LEA.LO   R154, P2, R6.reuse, R154, 3 ?W4;              // LEA.LO readPtrB, predCarry, readPtrMul.reuse, readPtrB, 3
      LEA.HI.X R155, R6, R155, R7, 3, P2 ?W2;                // LEA.HI.X readPtrB_HI, readPtrMul, readPtrB_HI, readPtrMul_HI, 3, predCarry
ampere_dgemm_128x64_mods_nt_END_BATCH_PTR_CALCB_PROLOG:
      ISCADD     R157, R5, 0x2000, 9 ?W4;                    // ISCADD sharedWriteB, maskedWid, 0x2000, 9
      ISCADD     R157, R10, R157, 3 ?W2;                     // ISCADD sharedWriteB, thread, sharedWriteB, 3
      ISCADD     R8, R165, R10, 6 ?W5;                       // ISCADD absRowCol, ctaCol, thread, 6
      IMAD.WIDE.U32 R6, R5, c[0][0x1b4], R8 &req=3 ?W5;      // IMAD.WIDE.U32 readPtrMul, maskedWid, StrideB, absRowCol
      LEA.LO   R154, P2, R6.reuse, R154, 3 &req=2 ?W4;       // LEA.LO readPtrB, predCarry, readPtrMul.reuse, readPtrB, 3
      LEA.HI.X R155, R6, R155, R7, 3, P2 ?W4;                // LEA.HI.X readPtrB_HI, readPtrMul, readPtrB_HI, readPtrMul_HI, 3, predCarry
      IADD R8, R8, -c[0][0x1c0] ?W4;                         // IADD absRowCol, absRowCol, -CountN
      ISETP.LT P3, R8, 0 ?W2;                                // ISETP.LT P3, absRowCol, 0
      ISETP.LT P4, R8, -32 ?W13EG;                           // ISETP.LT P4, absRowCol, -32
      P2R.B1 R163, PR, R163, 0x18 ?W2;                       // P2R.B1 raggedMnPreds0, PR, raggedMnPreds0, 0x18
      STS.32  [R169 + 0x3000], RZ &rd=1 ?W2;                 // STS.32 [sharedZeroOffset + 0x3000], RZ
      BAR.SYNC.DEFER_BLOCKING 0 ?W6;                         // BAR.SYNC.DEFER_BLOCKING 0
(!P1) R2P PR, RZ.B0, 0x78 ?W2;                               // @!P1 R2P PR, RZ.B0, 0x78
(P1)  R2P PR, R163.B0, 0x78 ?W13EG;                          // @P1 R2P PR, raggedMnPreds0.B0, 0x78
(P3)  LDG.E.EN.LTC128B.64.CONSTANT  R128, [R158 + 0x0] &wr=2 ?W2 ?BARRIER_EXEMPT; // @P3 LDG.E.EN.LTC128B.64.CONSTANT fetchRegA0, [readPtrA + 0x0]
(!P3) MOV R128, RZ ?W2;                                      // @!P3 MOV fetchRegA0_0, RZ
(!P3) MOV R129, RZ ?W2;                                      // @!P3 MOV fetchRegA0_1, RZ
(P4)  LDG.E.EN.LTC128B.64.CONSTANT  R130, [R158 + 0x100] &wr=2 ?W2 ?BARRIER_EXEMPT; // @P4 LDG.E.EN.LTC128B.64.CONSTANT fetchRegA1, [readPtrA + 0x100]
(!P4) MOV R130, RZ ?W2;                                      // @!P4 MOV fetchRegA1_0, RZ
(!P4) MOV R131, RZ ?W2;                                      // @!P4 MOV fetchRegA1_1, RZ
(P5)  LDG.E.EN.LTC128B.64.CONSTANT  R132, [R158 + 0x200] &wr=2 ?W2 ?BARRIER_EXEMPT; // @P5 LDG.E.EN.LTC128B.64.CONSTANT fetchRegA2, [readPtrA + 0x200]
(!P5) MOV R132, RZ ?W2;                                      // @!P5 MOV fetchRegA2_0, RZ
(!P5) MOV R133, RZ ?W2;                                      // @!P5 MOV fetchRegA2_1, RZ
(P6)  LDG.E.EN.LTC128B.64.CONSTANT  R134, [R158 + 0x300] &rd=3 &wr=2 ?W2 ?BARRIER_EXEMPT; // @P6 LDG.E.EN.LTC128B.64.CONSTANT fetchRegA3, [readPtrA + 0x300]
(!P6) MOV R134, RZ ?W2;                                      // @!P6 MOV fetchRegA3_0, RZ
(!P6) MOV R135, RZ ?W2;                                      // @!P6 MOV fetchRegA3_1, RZ
(P1)  IADD   R158, P2, R158,   c[0][0x188] &req=3 ?W4;       // @P1 IADD readPtrA, predCarry, readPtrA, IncSlowA
(P1)  IADD.X R159,         R159, c[0][0x18c], P2 ?W8;        // @P1 IADD.X readPtrA_HI, readPtrA_HI, IncSlowA_HI, predCarry
(P3)  LDG.E.EN.LTC128B.64.CONSTANT  R136, [R158 + 0x0] &wr=2 ?W2 ?BARRIER_EXEMPT; // @P3 LDG.E.EN.LTC128B.64.CONSTANT fetchRegA4, [readPtrA + 0x0]
(!P3) MOV R136, RZ ?W2;                                      // @!P3 MOV fetchRegA4_0, RZ
(!P3) MOV R137, RZ ?W2;                                      // @!P3 MOV fetchRegA4_1, RZ
(P4)  LDG.E.EN.LTC128B.64.CONSTANT  R138, [R158 + 0x100] &wr=2 ?W2 ?BARRIER_EXEMPT; // @P4 LDG.E.EN.LTC128B.64.CONSTANT fetchRegA5, [readPtrA + 0x100]
(!P4) MOV R138, RZ ?W2;                                      // @!P4 MOV fetchRegA5_0, RZ
(!P4) MOV R139, RZ ?W2;                                      // @!P4 MOV fetchRegA5_1, RZ
(P5)  LDG.E.EN.LTC128B.64.CONSTANT  R140, [R158 + 0x200] &wr=2 ?W2 ?BARRIER_EXEMPT; // @P5 LDG.E.EN.LTC128B.64.CONSTANT fetchRegA6, [readPtrA + 0x200]
(!P5) MOV R140, RZ ?W2;                                      // @!P5 MOV fetchRegA6_0, RZ
(!P5) MOV R141, RZ ?W2;                                      // @!P5 MOV fetchRegA6_1, RZ
(P6)  LDG.E.EN.LTC128B.64.CONSTANT  R142, [R158 + 0x300] &rd=3 &wr=2 ?W2 ?BARRIER_EXEMPT; // @P6 LDG.E.EN.LTC128B.64.CONSTANT fetchRegA7, [readPtrA + 0x300]
(!P6) MOV R142, RZ ?W2;                                      // @!P6 MOV fetchRegA7_0, RZ
(!P6) MOV R143, RZ ?W2;                                      // @!P6 MOV fetchRegA7_1, RZ
(P1)  IADD   R158, P2, R158,   c[0][0x188] &req=3 ?W4;       // @P1 IADD readPtrA, predCarry, readPtrA, IncSlowA
(P1)  IADD.X R159,         R159, c[0][0x18c], P2 ?W8;        // @P1 IADD.X readPtrA_HI, readPtrA_HI, IncSlowA_HI, predCarry
(P1)  R2P PR, R163.B1, 0x78 ?W13EG;                          // @P1 R2P PR, raggedMnPreds0.B1, 0x78
(P3)  LDG.E.EN.LTC128B.64.CONSTANT  R144, [R154 + 0x0] &wr=2 ?W2 ?BARRIER_EXEMPT; // @P3 LDG.E.EN.LTC128B.64.CONSTANT fetchRegB0, [readPtrB + 0x0]
(!P3) MOV R144, RZ ?W2;                                      // @!P3 MOV fetchRegB0_0, RZ
(!P3) MOV R145, RZ ?W2;                                      // @!P3 MOV fetchRegB0_1, RZ
(P4)  LDG.E.EN.LTC128B.64.CONSTANT  R146, [R154 + 0x100] &rd=3 &wr=2 ?W2 ?BARRIER_EXEMPT; // @P4 LDG.E.EN.LTC128B.64.CONSTANT fetchRegB1, [readPtrB + 0x100]
(!P4) MOV R146, RZ ?W2;                                      // @!P4 MOV fetchRegB1_0, RZ
(!P4) MOV R147, RZ ?W2;                                      // @!P4 MOV fetchRegB1_1, RZ
(P1)  IADD   R154, P2, R154,   c[0][0x190] &req=3 ?W4;       // @P1 IADD readPtrB, predCarry, readPtrB, IncSlowB
(P1)  IADD.X R155,         R155, c[0][0x194], P2 ?W8;        // @P1 IADD.X readPtrB_HI, readPtrB_HI, IncSlowB_HI, predCarry
(P3)  LDG.E.EN.LTC128B.64.CONSTANT  R148, [R154 + 0x0] &wr=2 ?W2 ?BARRIER_EXEMPT; // @P3 LDG.E.EN.LTC128B.64.CONSTANT fetchRegB2, [readPtrB + 0x0]
(!P3) MOV R148, RZ ?W2;                                      // @!P3 MOV fetchRegB2_0, RZ
(!P3) MOV R149, RZ ?W2;                                      // @!P3 MOV fetchRegB2_1, RZ
(P4)  LDG.E.EN.LTC128B.64.CONSTANT  R150, [R154 + 0x100] &rd=3 &wr=2 ?W2 ?BARRIER_EXEMPT; // @P4 LDG.E.EN.LTC128B.64.CONSTANT fetchRegB3, [readPtrB + 0x100]
(!P4) MOV R150, RZ ?W2;                                      // @!P4 MOV fetchRegB3_0, RZ
(!P4) MOV R151, RZ ?W2;                                      // @!P4 MOV fetchRegB3_1, RZ
(P1)  IADD   R154, P2, R154,   c[0][0x190] &req=3 ?W4;       // @P1 IADD readPtrB, predCarry, readPtrB, IncSlowB
(P1)  IADD.X R155,         R155, c[0][0x194], P2 ?W8;        // @P1 IADD.X readPtrB_HI, readPtrB_HI, IncSlowB_HI, predCarry
      SHR         R1, R168.reuse, 6 ?W2;                     // SHR awTid, tid.reuse, 6
      SHR         R0, R168.reuse, 1 ?W2;                     // SHR aiTid, tid.reuse, 1
      SHL         R1, R1, 5 ?W2;                             // SHL awTid, awTid, 5
      LOP.AND     R152, R0, 0x7 ?W4;                         // LOP.AND sharedA, aiTid, 0x7
      LOP.OR      R152, R152, R1 ?W4;                        // LOP.OR sharedA, sharedA, awTid
      SHL         R152, R152, 4 ?W2;                         // SHL sharedA, sharedA, 4
      SHR         R3, R168.reuse, 5 ?W2;                     // SHR bwTid, tid.reuse, 5
      SHR         R2, R168.reuse, 3 ?W2;                     // SHR bmTid, tid.reuse, 3
      LOP.AND     R153, R168.reuse, 1 ?W2;                   // LOP.AND sharedB, tid.reuse, 1
      LOP.AND     R3, R3, 1 ?W2;                             // LOP.AND bwTid, bwTid, 1
      LOP.AND     R2, R2, 2 ?W4;                             // LOP.AND bmTid, bmTid, 2
      SHL         R3, R3, 4 ?W4;                             // SHL bwTid, bwTid, 4
      LOP3.OR     R153, R153, R2, R3 ?W4;                    // LOP3.OR sharedB, sharedB, bmTid, bwTid
      ISCADD      R153, R153, 0x2000, 4 ?W2;                 // ISCADD sharedB, sharedB, 0x2000, 4
// Virtual ?REQ_BAR found on next instruction, stop putting ?BARRIER_EXEMPT on decoupled instructions
      LDS.128   R0, [0x3000] &wr=0 ?W2;                      // LDS.128 R0, [0x3000]
      LDS.128   R4, [0x3000] &wr=0 ?W2;                      // LDS.128 R4, [0x3000]
      LDS.128   R8, [0x3000] &wr=0 ?W2;                      // LDS.128 R8, [0x3000]
      LDS.128   R12, [0x3000] &wr=0 ?W2;                     // LDS.128 R12, [0x3000]
      LDS.128   R16, [0x3000] &wr=0 ?W2;                     // LDS.128 R16, [0x3000]
      LDS.128   R20, [0x3000] &wr=0 ?W2;                     // LDS.128 R20, [0x3000]
      LDS.128   R24, [0x3000] &wr=0 ?W2;                     // LDS.128 R24, [0x3000]
      LDS.128   R28, [0x3000] &wr=0 ?W2;                     // LDS.128 R28, [0x3000]
      LDS.128   R32, [0x3000] &wr=0 ?W2;                     // LDS.128 R32, [0x3000]
      LDS.128   R36, [0x3000] &wr=0 ?W2;                     // LDS.128 R36, [0x3000]
      LDS.128   R40, [0x3000] &wr=0 ?W2;                     // LDS.128 R40, [0x3000]
      LDS.128   R44, [0x3000] &wr=0 ?W2;                     // LDS.128 R44, [0x3000]
      LDS.128   R48, [0x3000] &wr=0 ?W2;                     // LDS.128 R48, [0x3000]
      LDS.128   R52, [0x3000] &wr=0 ?W2;                     // LDS.128 R52, [0x3000]
      LDS.128   R56, [0x3000] &wr=0 ?W2;                     // LDS.128 R56, [0x3000]
      LDS.128   R60, [0x3000] &wr=0 ?W2;                     // LDS.128 R60, [0x3000]
      LDS.128   R64, [0x3000] &wr=0 ?W2;                     // LDS.128 R64, [0x3000]
      LDS.128   R68, [0x3000] &wr=0 ?W2;                     // LDS.128 R68, [0x3000]
      LDS.128   R72, [0x3000] &wr=0 ?W2;                     // LDS.128 R72, [0x3000]
      LDS.128   R76, [0x3000] &wr=0 ?W2;                     // LDS.128 R76, [0x3000]
      LDS.128   R80, [0x3000] &wr=0 ?W2;                     // LDS.128 R80, [0x3000]
      LDS.128   R84, [0x3000] &wr=0 ?W2;                     // LDS.128 R84, [0x3000]
      LDS.128   R88, [0x3000] &wr=0 ?W2;                     // LDS.128 R88, [0x3000]
      LDS.128   R92, [0x3000] &wr=0 ?W2;                     // LDS.128 R92, [0x3000]
      LDS.128   R96, [0x3000] &wr=0 ?W2;                     // LDS.128 R96, [0x3000]
      LDS.128   R100, [0x3000] &wr=0 ?W2;                    // LDS.128 R100, [0x3000]
      LDS.128   R104, [0x3000] &wr=0 ?W2;                    // LDS.128 R104, [0x3000]
      LDS.128   R108, [0x3000] &wr=0 ?W2;                    // LDS.128 R108, [0x3000]
      LDS.128   R112, [0x3000] &wr=0 ?W2;                    // LDS.128 R112, [0x3000]
      LDS.128   R116, [0x3000] &wr=0 ?W2;                    // LDS.128 R116, [0x3000]
      LDS.128   R120, [0x3000] &wr=0 ?W2;                    // LDS.128 R120, [0x3000]
      LDS.128   R124, [0x3000] &wr=0 ?W2;                    // LDS.128 R124, [0x3000]
(!P1) BRA.U ampere_dgemm_128x64_mods_nt_K_RESIDUE ?W5;       // @!P1 BRA.U ampere_dgemm_128x64_mods_nt_K_RESIDUE
ampere_dgemm_128x64_mods_nt_PRELOOP:
      STS.64    [R156 + 0x0], R128 &req=2 ?W2;               // STS.64 [sharedWriteA + 0x0], fetchRegA0
      STS.64    [R156 + 0x100], R130 ?W2;                    // STS.64 [sharedWriteA + 0x100], fetchRegA1
      STS.64    [R156 + 0x200], R132 ?W2;                    // STS.64 [sharedWriteA + 0x200], fetchRegA2
      STS.64    [R156 + 0x300], R134 ?W2;                    // STS.64 [sharedWriteA + 0x300], fetchRegA3
      STS.64    [R156 + 0x1000], R136 ?W2;                   // STS.64 [sharedWriteA + 0x1000], fetchRegA4
      STS.64    [R156 + 0x1100], R138 ?W2;                   // STS.64 [sharedWriteA + 0x1100], fetchRegA5
      STS.64    [R156 + 0x1200], R140 ?W2;                   // STS.64 [sharedWriteA + 0x1200], fetchRegA6
      STS.64    [R156 + 0x1300], R142 ?W2;                   // STS.64 [sharedWriteA + 0x1300], fetchRegA7
      STS.64    [R157 + 0x0], R144 ?W2;                      // STS.64 [sharedWriteB + 0x0], fetchRegB0
      STS.64    [R157 + 0x100], R146 ?W2;                    // STS.64 [sharedWriteB + 0x100], fetchRegB1
      STS.64    [R157 + 0x800], R148 ?W2;                    // STS.64 [sharedWriteB + 0x800], fetchRegB2
      STS.64    [R157 + 0x900], R150 &rd=1 ?W2;              // STS.64 [sharedWriteB + 0x900], fetchRegB3
      BAR.SYNC.DEFER_BLOCKING  0 ?W6;                        // BAR.SYNC.DEFER_BLOCKING 0
      IADD      R156, R156, R164 &req=1 ?W2;                 // IADD sharedWriteA, sharedWriteA, sharedPageFlip
      IADD      R157, R157, R164 ?W2;                        // IADD sharedWriteB, sharedWriteB, sharedPageFlip
// Virtual ?REQ_BAR found on next instruction, stop putting ?BARRIER_EXEMPT on decoupled instructions
      LDS.128 R168, [R152 + 0x0] &wr=0 ?W2;                  // LDS.128 A_r0_k0, [sharedA + 0x0]
      LDS.128 R200, [R153 + 0x0] &wr=0 ?W2;                  // LDS.128 B_c0_k0, [sharedB + 0x0]
      LDS.128 R172, [R152 + 0x80] &wr=0 ?W2;                 // LDS.128 A_r2_k0, [sharedA + 0x80]
      LDS.128 R204, [R153 + 0x40] &wr=0 ?W2;                 // LDS.128 B_c2_k0, [sharedB + 0x40]
      LDS.128 R176, [R152 + 0x100] &wr=0 ?W2;                // LDS.128 A_r4_k0, [sharedA + 0x100]
      LDS.128 R208, [R153 + 0x80] &wr=0 ?W2;                 // LDS.128 B_c4_k0, [sharedB + 0x80]
      LDS.128 R180, [R152 + 0x180] &wr=0 ?W2;                // LDS.128 A_r6_k0, [sharedA + 0x180]
      LDS.128 R212, [R153 + 0xc0] &rd=1 &wr=0 ?W2;           // LDS.128 B_c6_k0, [sharedB + 0xc0]
ampere_dgemm_128x64_mods_nt_LOOP:
      DFMA R0, R168, R200.reuse, R0 &req={0,4} ?W2;          // DFMA C_r0_c0, A_r0_k0, B_c0_k0.reuse, C_r0_c0
      ISETP.GE  P1, R162, 16 ?W2;                            // ISETP.GE P1, counterK, 16
      DFMA R16, R170, R200.reuse, R16 ?W4;                   // DFMA C_r1_c0, A_r1_k0, B_c0_k0.reuse, C_r1_c0
      DFMA R32, R172, R200.reuse, R32 ?W2;                   // DFMA C_r2_c0, A_r2_k0, B_c0_k0.reuse, C_r2_c0
      IADD32I   R162, R162, -8 ?W2;                          // IADD32I counterK, counterK, -8
      DFMA R48, R174, R200.reuse, R48 ?W4;                   // DFMA C_r3_c0, A_r3_k0, B_c0_k0.reuse, C_r3_c0
      DFMA R64, R176, R200.reuse, R64 ?W2;                   // DFMA C_r4_c0, A_r4_k0, B_c0_k0.reuse, C_r4_c0
      LDS.128 R184, [R152 + 0x400] &wr=0 ?W2;                // LDS.128 A_r0_k1, [sharedA + 0x400]
      DFMA R80, R178, R200.reuse, R80 ?W4;                   // DFMA C_r5_c0, A_r5_k0, B_c0_k0.reuse, C_r5_c0
      DFMA R96, R180, R200.reuse, R96 ?W2;                   // DFMA C_r6_c0, A_r6_k0, B_c0_k0.reuse, C_r6_c0
(!P1) R2P PR, RZ.B0, 0x78 ?W2;                               // @!P1 R2P PR, RZ.B0, 0x78
      DFMA R112, R182.reuse, R200, R112 ?W4;                 // DFMA C_r7_c0, A_r7_k0.reuse, B_c0_k0, C_r7_c0
      DFMA R114, R182, R202.reuse, R114 ?W2;                 // DFMA C_r7_c1, A_r7_k0, B_c1_k0.reuse, C_r7_c1
(P1)  R2P PR, R163.B0, 0x78 ?W2;                             // @P1 R2P PR, raggedMnPreds0.B0, 0x78
      DFMA R98, R180, R202.reuse, R98 ?W4;                   // DFMA C_r6_c1, A_r6_k0, B_c1_k0.reuse, C_r6_c1
      DFMA R82, R178, R202.reuse, R82 ?W2;                   // DFMA C_r5_c1, A_r5_k0, B_c1_k0.reuse, C_r5_c1
      LDS.128 R216, [R153 + 0x200] &wr=0 ?W2;                // LDS.128 B_c0_k1, [sharedB + 0x200]
      DFMA R66, R176, R202.reuse, R66 ?W4;                   // DFMA C_r4_c1, A_r4_k0, B_c1_k0.reuse, C_r4_c1
      DFMA R50, R174, R202.reuse, R50 ?W2;                   // DFMA C_r3_c1, A_r3_k0, B_c1_k0.reuse, C_r3_c1
      LDS.128 R188, [R152 + 0x480] &wr=0 ?W2;                // LDS.128 A_r2_k1, [sharedA + 0x480]
      DFMA R34, R172, R202.reuse, R34 ?W4;                   // DFMA C_r2_c1, A_r2_k0, B_c1_k0.reuse, C_r2_c1
      DFMA R18, R170, R202.reuse, R18 ?W2;                   // DFMA C_r1_c1, A_r1_k0, B_c1_k0.reuse, C_r1_c1
      LDS.128 R220, [R153 + 0x240] &wr=0 ?W2;                // LDS.128 B_c2_k1, [sharedB + 0x240]
      DFMA R2, R168.reuse, R202, R2 ?W4;                     // DFMA C_r0_c1, A_r0_k0.reuse, B_c1_k0, C_r0_c1
      DFMA R4, R168, R204.reuse, R4 ?W2;                     // DFMA C_r0_c2, A_r0_k0, B_c2_k0.reuse, C_r0_c2
      LDS.128 R192, [R152 + 0x500] &wr=0 ?W2;                // LDS.128 A_r4_k1, [sharedA + 0x500]
      DFMA R20, R170, R204.reuse, R20 ?W4;                   // DFMA C_r1_c2, A_r1_k0, B_c2_k0.reuse, C_r1_c2
      DFMA R36, R172, R204.reuse, R36 ?W2;                   // DFMA C_r2_c2, A_r2_k0, B_c2_k0.reuse, C_r2_c2
      LDS.128 R224, [R153 + 0x280] &wr=0 ?W2;                // LDS.128 B_c4_k1, [sharedB + 0x280]
      DFMA R52, R174, R204.reuse, R52 ?W4;                   // DFMA C_r3_c2, A_r3_k0, B_c2_k0.reuse, C_r3_c2
      DFMA R68, R176, R204.reuse, R68 ?W2;                   // DFMA C_r4_c2, A_r4_k0, B_c2_k0.reuse, C_r4_c2
      LDS.128 R196, [R152 + 0x580] &wr=0 ?W2;                // LDS.128 A_r6_k1, [sharedA + 0x580]
      DFMA R84, R178, R204.reuse, R84 ?W4;                   // DFMA C_r5_c2, A_r5_k0, B_c2_k0.reuse, C_r5_c2
      DFMA R100, R180, R204.reuse, R100 ?W2;                 // DFMA C_r6_c2, A_r6_k0, B_c2_k0.reuse, C_r6_c2
      LDS.128 R228, [R153 + 0x2c0] &rd=1 &wr=0 ?W2;          // LDS.128 B_c6_k1, [sharedB + 0x2c0]
      DFMA R116, R182.reuse, R204, R116 ?W4;                 // DFMA C_r7_c2, A_r7_k0.reuse, B_c2_k0, C_r7_c2
      DFMA R118, R182, R206.reuse, R118 ?W4;                 // DFMA C_r7_c3, A_r7_k0, B_c3_k0.reuse, C_r7_c3
      DFMA R102, R180, R206.reuse, R102 ?W4;                 // DFMA C_r6_c3, A_r6_k0, B_c3_k0.reuse, C_r6_c3
      DFMA R86, R178, R206.reuse, R86 ?W4;                   // DFMA C_r5_c3, A_r5_k0, B_c3_k0.reuse, C_r5_c3
      DFMA R70, R176, R206.reuse, R70 ?W4;                   // DFMA C_r4_c3, A_r4_k0, B_c3_k0.reuse, C_r4_c3
      DFMA R54, R174, R206.reuse, R54 ?W4;                   // DFMA C_r3_c3, A_r3_k0, B_c3_k0.reuse, C_r3_c3
      DFMA R38, R172, R206.reuse, R38 ?W4;                   // DFMA C_r2_c3, A_r2_k0, B_c3_k0.reuse, C_r2_c3
      DFMA R22, R170, R206.reuse, R22 ?W4;                   // DFMA C_r1_c3, A_r1_k0, B_c3_k0.reuse, C_r1_c3
      DFMA R6, R168.reuse, R206, R6 ?W4;                     // DFMA C_r0_c3, A_r0_k0.reuse, B_c3_k0, C_r0_c3
      DFMA R8, R168, R208.reuse, R8 ?W2;                     // DFMA C_r0_c4, A_r0_k0, B_c4_k0.reuse, C_r0_c4
(P3)  LDG.E.EN.LTC128B.64.CONSTANT  R128, [R158 + 0x0] &wr=2 ?W2; // @P3 LDG.E.EN.LTC128B.64.CONSTANT fetchRegA0, [readPtrA + 0x0]
      DFMA R24, R170, R208.reuse, R24 ?W4;                   // DFMA C_r1_c4, A_r1_k0, B_c4_k0.reuse, C_r1_c4
      DFMA R40, R172, R208.reuse, R40 ?W2;                   // DFMA C_r2_c4, A_r2_k0, B_c4_k0.reuse, C_r2_c4
(P4)  LDG.E.EN.LTC128B.64.CONSTANT  R130, [R158 + 0x100] &wr=2 ?W2; // @P4 LDG.E.EN.LTC128B.64.CONSTANT fetchRegA1, [readPtrA + 0x100]
      DFMA R56, R174, R208.reuse, R56 ?W4;                   // DFMA C_r3_c4, A_r3_k0, B_c4_k0.reuse, C_r3_c4
      DFMA R72, R176, R208.reuse, R72 ?W2;                   // DFMA C_r4_c4, A_r4_k0, B_c4_k0.reuse, C_r4_c4
(P5)  LDG.E.EN.LTC128B.64.CONSTANT  R132, [R158 + 0x200] &wr=2 ?W2; // @P5 LDG.E.EN.LTC128B.64.CONSTANT fetchRegA2, [readPtrA + 0x200]
      DFMA R88, R178, R208.reuse, R88 ?W4;                   // DFMA C_r5_c4, A_r5_k0, B_c4_k0.reuse, C_r5_c4
      DFMA R104, R180, R208.reuse, R104 ?W2;                 // DFMA C_r6_c4, A_r6_k0, B_c4_k0.reuse, C_r6_c4
(P6)  LDG.E.EN.LTC128B.64.CONSTANT  R134, [R158 + 0x300] &rd=3 &wr=2 ?W2; // @P6 LDG.E.EN.LTC128B.64.CONSTANT fetchRegA3, [readPtrA + 0x300]
      DFMA R120, R182.reuse, R208, R120 ?W4;                 // DFMA C_r7_c4, A_r7_k0.reuse, B_c4_k0, C_r7_c4
      DFMA R122, R182, R210.reuse, R122 ?W2;                 // DFMA C_r7_c5, A_r7_k0, B_c5_k0.reuse, C_r7_c5
(P1)  IADD   R158, P2, R158,   c[0][0x188] &req=3 ?W2;       // @P1 IADD readPtrA, predCarry, readPtrA, IncSlowA
      DFMA R106, R180, R210.reuse, R106 ?W4;                 // DFMA C_r6_c5, A_r6_k0, B_c5_k0.reuse, C_r6_c5
      DFMA R90, R178, R210.reuse, R90 ?W2;                   // DFMA C_r5_c5, A_r5_k0, B_c5_k0.reuse, C_r5_c5
(P1)  IADD.X R159,         R159, c[0][0x18c], P2 ?W2;        // @P1 IADD.X readPtrA_HI, readPtrA_HI, IncSlowA_HI, predCarry
      DFMA R74, R176, R210.reuse, R74 ?W4;                   // DFMA C_r4_c5, A_r4_k0, B_c5_k0.reuse, C_r4_c5
      DFMA R58, R174, R210.reuse, R58 ?W2;                   // DFMA C_r3_c5, A_r3_k0, B_c5_k0.reuse, C_r3_c5
(P3)  LDG.E.EN.LTC128B.64.CONSTANT  R136, [R158 + 0x0] &wr=2 ?W2; // @P3 LDG.E.EN.LTC128B.64.CONSTANT fetchRegA4, [readPtrA + 0x0]
      DFMA R42, R172, R210.reuse, R42 ?W4;                   // DFMA C_r2_c5, A_r2_k0, B_c5_k0.reuse, C_r2_c5
      DFMA R26, R170, R210.reuse, R26 ?W2;                   // DFMA C_r1_c5, A_r1_k0, B_c5_k0.reuse, C_r1_c5
(P4)  LDG.E.EN.LTC128B.64.CONSTANT  R138, [R158 + 0x100] &wr=2 ?W2; // @P4 LDG.E.EN.LTC128B.64.CONSTANT fetchRegA5, [readPtrA + 0x100]
      DFMA R10, R168.reuse, R210, R10 ?W4;                   // DFMA C_r0_c5, A_r0_k0.reuse, B_c5_k0, C_r0_c5
      DFMA R12, R168, R212.reuse, R12 ?W2;                   // DFMA C_r0_c6, A_r0_k0, B_c6_k0.reuse, C_r0_c6
(P5)  LDG.E.EN.LTC128B.64.CONSTANT  R140, [R158 + 0x200] &wr=2 ?W2; // @P5 LDG.E.EN.LTC128B.64.CONSTANT fetchRegA6, [readPtrA + 0x200]
      DFMA R28, R170, R212.reuse, R28 ?W4;                   // DFMA C_r1_c6, A_r1_k0, B_c6_k0.reuse, C_r1_c6
      DFMA R44, R172, R212.reuse, R44 ?W2;                   // DFMA C_r2_c6, A_r2_k0, B_c6_k0.reuse, C_r2_c6
(P6)  LDG.E.EN.LTC128B.64.CONSTANT  R142, [R158 + 0x300] &rd=3 &wr=2 ?W2; // @P6 LDG.E.EN.LTC128B.64.CONSTANT fetchRegA7, [readPtrA + 0x300]
      DFMA R60, R174, R212.reuse, R60 ?W4;                   // DFMA C_r3_c6, A_r3_k0, B_c6_k0.reuse, C_r3_c6
      DFMA R76, R176, R212.reuse, R76 ?W4;                   // DFMA C_r4_c6, A_r4_k0, B_c6_k0.reuse, C_r4_c6
      DFMA R92, R178, R212.reuse, R92 ?W4;                   // DFMA C_r5_c6, A_r5_k0, B_c6_k0.reuse, C_r5_c6
      DFMA R108, R180, R212.reuse, R108 ?W4;                 // DFMA C_r6_c6, A_r6_k0, B_c6_k0.reuse, C_r6_c6
      DFMA R124, R182.reuse, R212, R124 ?W4;                 // DFMA C_r7_c6, A_r7_k0.reuse, B_c6_k0, C_r7_c6
      DFMA R126, R182, R214.reuse, R126 ?W4;                 // DFMA C_r7_c7, A_r7_k0, B_c7_k0.reuse, C_r7_c7
      DFMA R110, R180, R214.reuse, R110 ?W4;                 // DFMA C_r6_c7, A_r6_k0, B_c7_k0.reuse, C_r6_c7
      DFMA R94, R178, R214.reuse, R94 ?W4;                   // DFMA C_r5_c7, A_r5_k0, B_c7_k0.reuse, C_r5_c7
      DFMA R78, R176, R214.reuse, R78 ?W4;                   // DFMA C_r4_c7, A_r4_k0, B_c7_k0.reuse, C_r4_c7
      DFMA R62, R174, R214.reuse, R62 ?W4;                   // DFMA C_r3_c7, A_r3_k0, B_c7_k0.reuse, C_r3_c7
      DFMA R46, R172, R214.reuse, R46 ?W4;                   // DFMA C_r2_c7, A_r2_k0, B_c7_k0.reuse, C_r2_c7
      DFMA R30, R170, R214.reuse, R30 ?W4;                   // DFMA C_r1_c7, A_r1_k0, B_c7_k0.reuse, C_r1_c7
      DFMA R14, R168, R214, R14 &wr=4 ?W4EG;                 // DFMA C_r0_c7, A_r0_k0, B_c7_k0, C_r0_c7
      DFMA R0, R184, R216.reuse, R0 &req={0,4} ?W2;          // DFMA C_r0_c0, A_r0_k1, B_c0_k1.reuse, C_r0_c0
(P1)  IADD   R158, P2, R158,   c[0][0x188] &req=3 ?W2;       // @P1 IADD readPtrA, predCarry, readPtrA, IncSlowA
      DFMA R16, R186, R216.reuse, R16 ?W4;                   // DFMA C_r1_c0, A_r1_k1, B_c0_k1.reuse, C_r1_c0
      DFMA R32, R188, R216.reuse, R32 ?W2;                   // DFMA C_r2_c0, A_r2_k1, B_c0_k1.reuse, C_r2_c0
(P1)  IADD.X R159,         R159, c[0][0x18c], P2 ?W2;        // @P1 IADD.X readPtrA_HI, readPtrA_HI, IncSlowA_HI, predCarry
      DFMA R48, R190, R216.reuse, R48 ?W4;                   // DFMA C_r3_c0, A_r3_k1, B_c0_k1.reuse, C_r3_c0
      DFMA R64, R192, R216.reuse, R64 ?W2;                   // DFMA C_r4_c0, A_r4_k1, B_c0_k1.reuse, C_r4_c0
(P1)  R2P PR, R163.B1, 0x78 ?W2;                             // @P1 R2P PR, raggedMnPreds0.B1, 0x78
      DFMA R80, R194, R216.reuse, R80 ?W4;                   // DFMA C_r5_c0, A_r5_k1, B_c0_k1.reuse, C_r5_c0
      DFMA R96, R196, R216.reuse, R96 ?W2;                   // DFMA C_r6_c0, A_r6_k1, B_c0_k1.reuse, C_r6_c0
      LDS.128 R168, [R152 + 0x800] &wr=0 ?W2;                // LDS.128 A_r0_k0, [sharedA + 0x800]
      DFMA R112, R198.reuse, R216, R112 ?W4;                 // DFMA C_r7_c0, A_r7_k1.reuse, B_c0_k1, C_r7_c0
      DFMA R114, R198, R218.reuse, R114 ?W2;                 // DFMA C_r7_c1, A_r7_k1, B_c1_k1.reuse, C_r7_c1
      LDS.128 R200, [R153 + 0x400] &wr=0 ?W2;                // LDS.128 B_c0_k0, [sharedB + 0x400]
      DFMA R98, R196, R218.reuse, R98 ?W4;                   // DFMA C_r6_c1, A_r6_k1, B_c1_k1.reuse, C_r6_c1
      DFMA R82, R194, R218.reuse, R82 ?W2;                   // DFMA C_r5_c1, A_r5_k1, B_c1_k1.reuse, C_r5_c1
      LDS.128 R172, [R152 + 0x880] &wr=0 ?W2;                // LDS.128 A_r2_k0, [sharedA + 0x880]
      DFMA R66, R192, R218.reuse, R66 ?W4;                   // DFMA C_r4_c1, A_r4_k1, B_c1_k1.reuse, C_r4_c1
      DFMA R50, R190, R218.reuse, R50 ?W2;                   // DFMA C_r3_c1, A_r3_k1, B_c1_k1.reuse, C_r3_c1
      LDS.128 R204, [R153 + 0x440] &wr=0 ?W2;                // LDS.128 B_c2_k0, [sharedB + 0x440]
      DFMA R34, R188, R218.reuse, R34 ?W4;                   // DFMA C_r2_c1, A_r2_k1, B_c1_k1.reuse, C_r2_c1
      DFMA R18, R186, R218.reuse, R18 ?W2;                   // DFMA C_r1_c1, A_r1_k1, B_c1_k1.reuse, C_r1_c1
      LDS.128 R176, [R152 + 0x900] &wr=0 ?W2;                // LDS.128 A_r4_k0, [sharedA + 0x900]
      DFMA R2, R184.reuse, R218, R2 ?W4;                     // DFMA C_r0_c1, A_r0_k1.reuse, B_c1_k1, C_r0_c1
      DFMA R4, R184, R220.reuse, R4 ?W2;                     // DFMA C_r0_c2, A_r0_k1, B_c2_k1.reuse, C_r0_c2
      LDS.128 R208, [R153 + 0x480] &wr=0 ?W2;                // LDS.128 B_c4_k0, [sharedB + 0x480]
      DFMA R20, R186, R220.reuse, R20 ?W4;                   // DFMA C_r1_c2, A_r1_k1, B_c2_k1.reuse, C_r1_c2
      DFMA R36, R188, R220.reuse, R36 ?W2;                   // DFMA C_r2_c2, A_r2_k1, B_c2_k1.reuse, C_r2_c2
      LDS.128 R180, [R152 + 0x980] &wr=0 ?W2;                // LDS.128 A_r6_k0, [sharedA + 0x980]
      DFMA R52, R190, R220.reuse, R52 ?W4;                   // DFMA C_r3_c2, A_r3_k1, B_c2_k1.reuse, C_r3_c2
      DFMA R68, R192, R220.reuse, R68 ?W2;                   // DFMA C_r4_c2, A_r4_k1, B_c2_k1.reuse, C_r4_c2
      LDS.128 R212, [R153 + 0x4c0] &rd=1 &wr=0 ?W2;          // LDS.128 B_c6_k0, [sharedB + 0x4c0]
      DFMA R84, R194, R220.reuse, R84 ?W4;                   // DFMA C_r5_c2, A_r5_k1, B_c2_k1.reuse, C_r5_c2
      DFMA R100, R196, R220.reuse, R100 ?W4;                 // DFMA C_r6_c2, A_r6_k1, B_c2_k1.reuse, C_r6_c2
      DFMA R116, R198.reuse, R220, R116 ?W4;                 // DFMA C_r7_c2, A_r7_k1.reuse, B_c2_k1, C_r7_c2
      DFMA R118, R198, R222.reuse, R118 ?W4;                 // DFMA C_r7_c3, A_r7_k1, B_c3_k1.reuse, C_r7_c3
      DFMA R102, R196, R222.reuse, R102 ?W4;                 // DFMA C_r6_c3, A_r6_k1, B_c3_k1.reuse, C_r6_c3
      DFMA R86, R194, R222.reuse, R86 ?W4;                   // DFMA C_r5_c3, A_r5_k1, B_c3_k1.reuse, C_r5_c3
      DFMA R70, R192, R222.reuse, R70 ?W4;                   // DFMA C_r4_c3, A_r4_k1, B_c3_k1.reuse, C_r4_c3
      DFMA R54, R190, R222.reuse, R54 ?W4;                   // DFMA C_r3_c3, A_r3_k1, B_c3_k1.reuse, C_r3_c3
      DFMA R38, R188, R222.reuse, R38 ?W4;                   // DFMA C_r2_c3, A_r2_k1, B_c3_k1.reuse, C_r2_c3
      DFMA R22, R186, R222.reuse, R22 ?W4;                   // DFMA C_r1_c3, A_r1_k1, B_c3_k1.reuse, C_r1_c3
      DFMA R6, R184.reuse, R222, R6 ?W4;                     // DFMA C_r0_c3, A_r0_k1.reuse, B_c3_k1, C_r0_c3
      DFMA R8, R184, R224.reuse, R8 ?W2;                     // DFMA C_r0_c4, A_r0_k1, B_c4_k1.reuse, C_r0_c4
(P3)  LDG.E.EN.LTC128B.64.CONSTANT  R144, [R154 + 0x0] &wr=2 ?W2; // @P3 LDG.E.EN.LTC128B.64.CONSTANT fetchRegB0, [readPtrB + 0x0]
      DFMA R24, R186, R224.reuse, R24 ?W4;                   // DFMA C_r1_c4, A_r1_k1, B_c4_k1.reuse, C_r1_c4
      DFMA R40, R188, R224.reuse, R40 ?W2;                   // DFMA C_r2_c4, A_r2_k1, B_c4_k1.reuse, C_r2_c4
(P4)  LDG.E.EN.LTC128B.64.CONSTANT  R146, [R154 + 0x100] &rd=3 &wr=2 ?W2; // @P4 LDG.E.EN.LTC128B.64.CONSTANT fetchRegB1, [readPtrB + 0x100]
      DFMA R56, R190, R224.reuse, R56 ?W4;                   // DFMA C_r3_c4, A_r3_k1, B_c4_k1.reuse, C_r3_c4
      DFMA R72, R192, R224.reuse, R72 ?W2;                   // DFMA C_r4_c4, A_r4_k1, B_c4_k1.reuse, C_r4_c4
(P1)  IADD   R154, P2, R154,   c[0][0x190] &req=3 ?W2;       // @P1 IADD readPtrB, predCarry, readPtrB, IncSlowB
      DFMA R88, R194, R224.reuse, R88 ?W4;                   // DFMA C_r5_c4, A_r5_k1, B_c4_k1.reuse, C_r5_c4
      DFMA R104, R196, R224.reuse, R104 ?W2;                 // DFMA C_r6_c4, A_r6_k1, B_c4_k1.reuse, C_r6_c4
(P1)  IADD.X R155,         R155, c[0][0x194], P2 ?W2;        // @P1 IADD.X readPtrB_HI, readPtrB_HI, IncSlowB_HI, predCarry
      DFMA R120, R198.reuse, R224, R120 ?W4;                 // DFMA C_r7_c4, A_r7_k1.reuse, B_c4_k1, C_r7_c4
      DFMA R122, R198, R226.reuse, R122 ?W2;                 // DFMA C_r7_c5, A_r7_k1, B_c5_k1.reuse, C_r7_c5
(P3)  LDG.E.EN.LTC128B.64.CONSTANT  R148, [R154 + 0x0] &wr=2 ?W2; // @P3 LDG.E.EN.LTC128B.64.CONSTANT fetchRegB2, [readPtrB + 0x0]
      DFMA R106, R196, R226.reuse, R106 ?W4;                 // DFMA C_r6_c5, A_r6_k1, B_c5_k1.reuse, C_r6_c5
      DFMA R90, R194, R226.reuse, R90 ?W2;                   // DFMA C_r5_c5, A_r5_k1, B_c5_k1.reuse, C_r5_c5
(P4)  LDG.E.EN.LTC128B.64.CONSTANT  R150, [R154 + 0x100] &rd=3 &wr=2 ?W2; // @P4 LDG.E.EN.LTC128B.64.CONSTANT fetchRegB3, [readPtrB + 0x100]
      DFMA R74, R192, R226.reuse, R74 ?W4;                   // DFMA C_r4_c5, A_r4_k1, B_c5_k1.reuse, C_r4_c5
      DFMA R58, R190, R226.reuse, R58 ?W4;                   // DFMA C_r3_c5, A_r3_k1, B_c5_k1.reuse, C_r3_c5
      DFMA R42, R188, R226.reuse, R42 ?W4;                   // DFMA C_r2_c5, A_r2_k1, B_c5_k1.reuse, C_r2_c5
      DFMA R26, R186, R226.reuse, R26 ?W4;                   // DFMA C_r1_c5, A_r1_k1, B_c5_k1.reuse, C_r1_c5
      DFMA R10, R184.reuse, R226, R10 ?W4;                   // DFMA C_r0_c5, A_r0_k1.reuse, B_c5_k1, C_r0_c5
      DFMA R12, R184, R228.reuse, R12 ?W4;                   // DFMA C_r0_c6, A_r0_k1, B_c6_k1.reuse, C_r0_c6
      DFMA R28, R186, R228.reuse, R28 ?W4;                   // DFMA C_r1_c6, A_r1_k1, B_c6_k1.reuse, C_r1_c6
      DFMA R44, R188, R228.reuse, R44 ?W4;                   // DFMA C_r2_c6, A_r2_k1, B_c6_k1.reuse, C_r2_c6
      DFMA R60, R190, R228.reuse, R60 ?W4;                   // DFMA C_r3_c6, A_r3_k1, B_c6_k1.reuse, C_r3_c6
      DFMA R76, R192, R228.reuse, R76 ?W4;                   // DFMA C_r4_c6, A_r4_k1, B_c6_k1.reuse, C_r4_c6
      DFMA R92, R194, R228.reuse, R92 ?W4;                   // DFMA C_r5_c6, A_r5_k1, B_c6_k1.reuse, C_r5_c6
      DFMA R108, R196, R228.reuse, R108 ?W4;                 // DFMA C_r6_c6, A_r6_k1, B_c6_k1.reuse, C_r6_c6
      DFMA R124, R198.reuse, R228, R124 ?W4;                 // DFMA C_r7_c6, A_r7_k1.reuse, B_c6_k1, C_r7_c6
      DFMA R126, R198, R230.reuse, R126 ?W4;                 // DFMA C_r7_c7, A_r7_k1, B_c7_k1.reuse, C_r7_c7
      DFMA R110, R196, R230.reuse, R110 ?W4;                 // DFMA C_r6_c7, A_r6_k1, B_c7_k1.reuse, C_r6_c7
      DFMA R94, R194, R230.reuse, R94 ?W4;                   // DFMA C_r5_c7, A_r5_k1, B_c7_k1.reuse, C_r5_c7
      DFMA R78, R192, R230.reuse, R78 ?W4;                   // DFMA C_r4_c7, A_r4_k1, B_c7_k1.reuse, C_r4_c7
      DFMA R62, R190, R230.reuse, R62 ?W4;                   // DFMA C_r3_c7, A_r3_k1, B_c7_k1.reuse, C_r3_c7
      DFMA R46, R188, R230.reuse, R46 ?W4;                   // DFMA C_r2_c7, A_r2_k1, B_c7_k1.reuse, C_r2_c7
      DFMA R30, R186, R230.reuse, R30 ?W4;                   // DFMA C_r1_c7, A_r1_k1, B_c7_k1.reuse, C_r1_c7
      DFMA R14, R184, R230, R14 &wr=4 ?W4EG;                 // DFMA C_r0_c7, A_r0_k1, B_c7_k1, C_r0_c7
      DFMA R0, R168, R200.reuse, R0 &req={0,4} ?W2;          // DFMA C_r0_c0, A_r0_k0, B_c0_k0.reuse, C_r0_c0
(P1)  IADD   R154, P2, R154,   c[0][0x190] &req=3 ?W2;       // @P1 IADD readPtrB, predCarry, readPtrB, IncSlowB
      DFMA R16, R170, R200.reuse, R16 ?W4;                   // DFMA C_r1_c0, A_r1_k0, B_c0_k0.reuse, C_r1_c0
      DFMA R32, R172, R200.reuse, R32 ?W2;                   // DFMA C_r2_c0, A_r2_k0, B_c0_k0.reuse, C_r2_c0
(P1)  IADD.X R155,         R155, c[0][0x194], P2 ?W2;        // @P1 IADD.X readPtrB_HI, readPtrB_HI, IncSlowB_HI, predCarry
      DFMA R48, R174, R200.reuse, R48 ?W4;                   // DFMA C_r3_c0, A_r3_k0, B_c0_k0.reuse, C_r3_c0
      DFMA R64, R176, R200.reuse, R64 ?W2;                   // DFMA C_r4_c0, A_r4_k0, B_c0_k0.reuse, C_r4_c0
      LDS.128 R184, [R152 + 0xc00] &wr=0 ?W2;                // LDS.128 A_r0_k1, [sharedA + 0xc00]
      DFMA R80, R178, R200.reuse, R80 ?W4;                   // DFMA C_r5_c0, A_r5_k0, B_c0_k0.reuse, C_r5_c0
      DFMA R96, R180, R200.reuse, R96 ?W2;                   // DFMA C_r6_c0, A_r6_k0, B_c0_k0.reuse, C_r6_c0
      LDS.128 R216, [R153 + 0x600] &wr=0 ?W2;                // LDS.128 B_c0_k1, [sharedB + 0x600]
      DFMA R112, R182.reuse, R200, R112 ?W4;                 // DFMA C_r7_c0, A_r7_k0.reuse, B_c0_k0, C_r7_c0
      DFMA R114, R182, R202.reuse, R114 ?W2;                 // DFMA C_r7_c1, A_r7_k0, B_c1_k0.reuse, C_r7_c1
      LDS.128 R188, [R152 + 0xc80] &wr=0 ?W2;                // LDS.128 A_r2_k1, [sharedA + 0xc80]
      DFMA R98, R180, R202.reuse, R98 ?W4;                   // DFMA C_r6_c1, A_r6_k0, B_c1_k0.reuse, C_r6_c1
      DFMA R82, R178, R202.reuse, R82 ?W2;                   // DFMA C_r5_c1, A_r5_k0, B_c1_k0.reuse, C_r5_c1
      LDS.128 R220, [R153 + 0x640] &wr=0 ?W2;                // LDS.128 B_c2_k1, [sharedB + 0x640]
      DFMA R66, R176, R202.reuse, R66 ?W4;                   // DFMA C_r4_c1, A_r4_k0, B_c1_k0.reuse, C_r4_c1
      DFMA R50, R174, R202.reuse, R50 ?W2;                   // DFMA C_r3_c1, A_r3_k0, B_c1_k0.reuse, C_r3_c1
      LDS.128 R192, [R152 + 0xd00] &wr=0 ?W2;                // LDS.128 A_r4_k1, [sharedA + 0xd00]
      DFMA R34, R172, R202.reuse, R34 ?W4;                   // DFMA C_r2_c1, A_r2_k0, B_c1_k0.reuse, C_r2_c1
      DFMA R18, R170, R202.reuse, R18 ?W2;                   // DFMA C_r1_c1, A_r1_k0, B_c1_k0.reuse, C_r1_c1
      LDS.128 R224, [R153 + 0x680] &wr=0 ?W2;                // LDS.128 B_c4_k1, [sharedB + 0x680]
      DFMA R2, R168.reuse, R202, R2 ?W4;                     // DFMA C_r0_c1, A_r0_k0.reuse, B_c1_k0, C_r0_c1
      DFMA R4, R168, R204.reuse, R4 ?W2;                     // DFMA C_r0_c2, A_r0_k0, B_c2_k0.reuse, C_r0_c2
      LDS.128 R196, [R152 + 0xd80] &wr=0 ?W2;                // LDS.128 A_r6_k1, [sharedA + 0xd80]
      DFMA R20, R170, R204.reuse, R20 ?W4;                   // DFMA C_r1_c2, A_r1_k0, B_c2_k0.reuse, C_r1_c2
      DFMA R36, R172, R204.reuse, R36 ?W2;                   // DFMA C_r2_c2, A_r2_k0, B_c2_k0.reuse, C_r2_c2
      LDS.128 R228, [R153 + 0x6c0] &rd=1 &wr=0 ?W2;          // LDS.128 B_c6_k1, [sharedB + 0x6c0]
      DFMA R52, R174, R204.reuse, R52 ?W4;                   // DFMA C_r3_c2, A_r3_k0, B_c2_k0.reuse, C_r3_c2
      DFMA R68, R176, R204.reuse, R68 ?W4;                   // DFMA C_r4_c2, A_r4_k0, B_c2_k0.reuse, C_r4_c2
      DFMA R84, R178, R204.reuse, R84 ?W4;                   // DFMA C_r5_c2, A_r5_k0, B_c2_k0.reuse, C_r5_c2
      DFMA R100, R180, R204.reuse, R100 ?W4;                 // DFMA C_r6_c2, A_r6_k0, B_c2_k0.reuse, C_r6_c2
      DFMA R116, R182.reuse, R204, R116 ?W4;                 // DFMA C_r7_c2, A_r7_k0.reuse, B_c2_k0, C_r7_c2
      DFMA R118, R182, R206.reuse, R118 ?W4;                 // DFMA C_r7_c3, A_r7_k0, B_c3_k0.reuse, C_r7_c3
      DFMA R102, R180, R206.reuse, R102 ?W4;                 // DFMA C_r6_c3, A_r6_k0, B_c3_k0.reuse, C_r6_c3
      DFMA R86, R178, R206.reuse, R86 ?W4;                   // DFMA C_r5_c3, A_r5_k0, B_c3_k0.reuse, C_r5_c3
      DFMA R70, R176, R206.reuse, R70 ?W4;                   // DFMA C_r4_c3, A_r4_k0, B_c3_k0.reuse, C_r4_c3
      DFMA R54, R174, R206.reuse, R54 ?W4;                   // DFMA C_r3_c3, A_r3_k0, B_c3_k0.reuse, C_r3_c3
      DFMA R38, R172, R206.reuse, R38 ?W4;                   // DFMA C_r2_c3, A_r2_k0, B_c3_k0.reuse, C_r2_c3
      DFMA R22, R170, R206.reuse, R22 ?W4;                   // DFMA C_r1_c3, A_r1_k0, B_c3_k0.reuse, C_r1_c3
      DFMA R6, R168.reuse, R206, R6 ?W4;                     // DFMA C_r0_c3, A_r0_k0.reuse, B_c3_k0, C_r0_c3
      DFMA R8, R168, R208.reuse, R8 ?W4;                     // DFMA C_r0_c4, A_r0_k0, B_c4_k0.reuse, C_r0_c4
      DFMA R24, R170, R208.reuse, R24 ?W4;                   // DFMA C_r1_c4, A_r1_k0, B_c4_k0.reuse, C_r1_c4
      DFMA R40, R172, R208.reuse, R40 ?W4;                   // DFMA C_r2_c4, A_r2_k0, B_c4_k0.reuse, C_r2_c4
      DFMA R56, R174, R208.reuse, R56 ?W4;                   // DFMA C_r3_c4, A_r3_k0, B_c4_k0.reuse, C_r3_c4
      DFMA R72, R176, R208.reuse, R72 ?W4;                   // DFMA C_r4_c4, A_r4_k0, B_c4_k0.reuse, C_r4_c4
      DFMA R88, R178, R208.reuse, R88 ?W4;                   // DFMA C_r5_c4, A_r5_k0, B_c4_k0.reuse, C_r5_c4
      DFMA R104, R180, R208.reuse, R104 ?W4;                 // DFMA C_r6_c4, A_r6_k0, B_c4_k0.reuse, C_r6_c4
      DFMA R120, R182.reuse, R208, R120 ?W4;                 // DFMA C_r7_c4, A_r7_k0.reuse, B_c4_k0, C_r7_c4
      DFMA R122, R182, R210.reuse, R122 ?W4;                 // DFMA C_r7_c5, A_r7_k0, B_c5_k0.reuse, C_r7_c5
      DFMA R106, R180, R210.reuse, R106 ?W4;                 // DFMA C_r6_c5, A_r6_k0, B_c5_k0.reuse, C_r6_c5
      DFMA R90, R178, R210.reuse, R90 ?W4;                   // DFMA C_r5_c5, A_r5_k0, B_c5_k0.reuse, C_r5_c5
      DFMA R74, R176, R210.reuse, R74 ?W4;                   // DFMA C_r4_c5, A_r4_k0, B_c5_k0.reuse, C_r4_c5
      DFMA R58, R174, R210.reuse, R58 ?W4;                   // DFMA C_r3_c5, A_r3_k0, B_c5_k0.reuse, C_r3_c5
      DFMA R42, R172, R210.reuse, R42 ?W4;                   // DFMA C_r2_c5, A_r2_k0, B_c5_k0.reuse, C_r2_c5
      DFMA R26, R170, R210.reuse, R26 ?W4;                   // DFMA C_r1_c5, A_r1_k0, B_c5_k0.reuse, C_r1_c5
      DFMA R10, R168.reuse, R210, R10 ?W4;                   // DFMA C_r0_c5, A_r0_k0.reuse, B_c5_k0, C_r0_c5
      DFMA R12, R168, R212.reuse, R12 ?W4;                   // DFMA C_r0_c6, A_r0_k0, B_c6_k0.reuse, C_r0_c6
      DFMA R28, R170, R212.reuse, R28 ?W4;                   // DFMA C_r1_c6, A_r1_k0, B_c6_k0.reuse, C_r1_c6
      DFMA R44, R172, R212.reuse, R44 ?W4;                   // DFMA C_r2_c6, A_r2_k0, B_c6_k0.reuse, C_r2_c6
      DFMA R60, R174, R212.reuse, R60 ?W4;                   // DFMA C_r3_c6, A_r3_k0, B_c6_k0.reuse, C_r3_c6
      DFMA R76, R176, R212.reuse, R76 ?W4;                   // DFMA C_r4_c6, A_r4_k0, B_c6_k0.reuse, C_r4_c6
      DFMA R92, R178, R212.reuse, R92 ?W4;                   // DFMA C_r5_c6, A_r5_k0, B_c6_k0.reuse, C_r5_c6
      DFMA R108, R180, R212.reuse, R108 ?W4;                 // DFMA C_r6_c6, A_r6_k0, B_c6_k0.reuse, C_r6_c6
      DFMA R124, R182.reuse, R212, R124 ?W4;                 // DFMA C_r7_c6, A_r7_k0.reuse, B_c6_k0, C_r7_c6
      DFMA R126, R182, R214.reuse, R126 ?W4;                 // DFMA C_r7_c7, A_r7_k0, B_c7_k0.reuse, C_r7_c7
      DFMA R110, R180, R214.reuse, R110 ?W4;                 // DFMA C_r6_c7, A_r6_k0, B_c7_k0.reuse, C_r6_c7
      DFMA R94, R178, R214.reuse, R94 ?W4;                   // DFMA C_r5_c7, A_r5_k0, B_c7_k0.reuse, C_r5_c7
      DFMA R78, R176, R214.reuse, R78 ?W4;                   // DFMA C_r4_c7, A_r4_k0, B_c7_k0.reuse, C_r4_c7
      DFMA R62, R174, R214.reuse, R62 ?W4;                   // DFMA C_r3_c7, A_r3_k0, B_c7_k0.reuse, C_r3_c7
      DFMA R46, R172, R214.reuse, R46 ?W4;                   // DFMA C_r2_c7, A_r2_k0, B_c7_k0.reuse, C_r2_c7
      DFMA R30, R170, R214.reuse, R30 ?W4;                   // DFMA C_r1_c7, A_r1_k0, B_c7_k0.reuse, C_r1_c7
      DFMA R14, R168, R214, R14 &wr=4 ?W4EG;                 // DFMA C_r0_c7, A_r0_k0, B_c7_k0, C_r0_c7
      DFMA R0, R184, R216.reuse, R0 &req={0,4} ?W2;          // DFMA C_r0_c0, A_r0_k1, B_c0_k1.reuse, C_r0_c0
      LDS.128 R168, [R152 + 0x1000] &wr=0 ?W2;               // LDS.128 A_r0_k0, [sharedA + 0x1000]
      DFMA R16, R186, R216.reuse, R16 ?W4;                   // DFMA C_r1_c0, A_r1_k1, B_c0_k1.reuse, C_r1_c0
      DFMA R32, R188, R216.reuse, R32 ?W2;                   // DFMA C_r2_c0, A_r2_k1, B_c0_k1.reuse, C_r2_c0
      LDS.128 R200, [R153 + 0x800] &wr=0 ?W2;                // LDS.128 B_c0_k0, [sharedB + 0x800]
      DFMA R48, R190, R216.reuse, R48 ?W4;                   // DFMA C_r3_c0, A_r3_k1, B_c0_k1.reuse, C_r3_c0
      DFMA R64, R192, R216.reuse, R64 ?W2;                   // DFMA C_r4_c0, A_r4_k1, B_c0_k1.reuse, C_r4_c0
      LDS.128 R172, [R152 + 0x1080] &wr=0 ?W2;               // LDS.128 A_r2_k0, [sharedA + 0x1080]
      DFMA R80, R194, R216.reuse, R80 ?W4;                   // DFMA C_r5_c0, A_r5_k1, B_c0_k1.reuse, C_r5_c0
      DFMA R96, R196, R216.reuse, R96 ?W2;                   // DFMA C_r6_c0, A_r6_k1, B_c0_k1.reuse, C_r6_c0
      LDS.128 R204, [R153 + 0x840] &wr=0 ?W2;                // LDS.128 B_c2_k0, [sharedB + 0x840]
      DFMA R112, R198.reuse, R216, R112 ?W4;                 // DFMA C_r7_c0, A_r7_k1.reuse, B_c0_k1, C_r7_c0
      DFMA R114, R198, R218.reuse, R114 ?W2;                 // DFMA C_r7_c1, A_r7_k1, B_c1_k1.reuse, C_r7_c1
      LDS.128 R176, [R152 + 0x1100] &wr=0 ?W2;               // LDS.128 A_r4_k0, [sharedA + 0x1100]
      DFMA R98, R196, R218.reuse, R98 ?W4;                   // DFMA C_r6_c1, A_r6_k1, B_c1_k1.reuse, C_r6_c1
      DFMA R82, R194, R218.reuse, R82 ?W2;                   // DFMA C_r5_c1, A_r5_k1, B_c1_k1.reuse, C_r5_c1
      LDS.128 R208, [R153 + 0x880] &wr=0 ?W2;                // LDS.128 B_c4_k0, [sharedB + 0x880]
      DFMA R66, R192, R218.reuse, R66 ?W4;                   // DFMA C_r4_c1, A_r4_k1, B_c1_k1.reuse, C_r4_c1
      DFMA R50, R190, R218.reuse, R50 ?W2;                   // DFMA C_r3_c1, A_r3_k1, B_c1_k1.reuse, C_r3_c1
      LDS.128 R180, [R152 + 0x1180] &wr=0 ?W2;               // LDS.128 A_r6_k0, [sharedA + 0x1180]
      DFMA R34, R188, R218.reuse, R34 ?W4;                   // DFMA C_r2_c1, A_r2_k1, B_c1_k1.reuse, C_r2_c1
      DFMA R18, R186, R218.reuse, R18 ?W2;                   // DFMA C_r1_c1, A_r1_k1, B_c1_k1.reuse, C_r1_c1
      LDS.128 R212, [R153 + 0x8c0] &rd=1 &wr=0 ?W2;          // LDS.128 B_c6_k0, [sharedB + 0x8c0]
      DFMA R2, R184.reuse, R218, R2 ?W4;                     // DFMA C_r0_c1, A_r0_k1.reuse, B_c1_k1, C_r0_c1
      DFMA R4, R184, R220.reuse, R4 ?W4;                     // DFMA C_r0_c2, A_r0_k1, B_c2_k1.reuse, C_r0_c2
      DFMA R20, R186, R220.reuse, R20 ?W4;                   // DFMA C_r1_c2, A_r1_k1, B_c2_k1.reuse, C_r1_c2
      DFMA R36, R188, R220.reuse, R36 ?W4;                   // DFMA C_r2_c2, A_r2_k1, B_c2_k1.reuse, C_r2_c2
      DFMA R52, R190, R220.reuse, R52 ?W4;                   // DFMA C_r3_c2, A_r3_k1, B_c2_k1.reuse, C_r3_c2
      DFMA R68, R192, R220.reuse, R68 ?W4;                   // DFMA C_r4_c2, A_r4_k1, B_c2_k1.reuse, C_r4_c2
      DFMA R84, R194, R220.reuse, R84 ?W4;                   // DFMA C_r5_c2, A_r5_k1, B_c2_k1.reuse, C_r5_c2
      DFMA R100, R196, R220.reuse, R100 ?W4;                 // DFMA C_r6_c2, A_r6_k1, B_c2_k1.reuse, C_r6_c2
      DFMA R116, R198.reuse, R220, R116 ?W4;                 // DFMA C_r7_c2, A_r7_k1.reuse, B_c2_k1, C_r7_c2
      DFMA R118, R198, R222.reuse, R118 ?W4;                 // DFMA C_r7_c3, A_r7_k1, B_c3_k1.reuse, C_r7_c3
      DFMA R102, R196, R222.reuse, R102 ?W4;                 // DFMA C_r6_c3, A_r6_k1, B_c3_k1.reuse, C_r6_c3
      DFMA R86, R194, R222.reuse, R86 ?W4;                   // DFMA C_r5_c3, A_r5_k1, B_c3_k1.reuse, C_r5_c3
      DFMA R70, R192, R222.reuse, R70 ?W4;                   // DFMA C_r4_c3, A_r4_k1, B_c3_k1.reuse, C_r4_c3
      DFMA R54, R190, R222.reuse, R54 ?W4;                   // DFMA C_r3_c3, A_r3_k1, B_c3_k1.reuse, C_r3_c3
      DFMA R38, R188, R222.reuse, R38 ?W4;                   // DFMA C_r2_c3, A_r2_k1, B_c3_k1.reuse, C_r2_c3
      DFMA R22, R186, R222.reuse, R22 ?W4;                   // DFMA C_r1_c3, A_r1_k1, B_c3_k1.reuse, C_r1_c3
      DFMA R6, R184.reuse, R222, R6 ?W4;                     // DFMA C_r0_c3, A_r0_k1.reuse, B_c3_k1, C_r0_c3
      DFMA R8, R184, R224.reuse, R8 ?W4;                     // DFMA C_r0_c4, A_r0_k1, B_c4_k1.reuse, C_r0_c4
      DFMA R24, R186, R224.reuse, R24 ?W4;                   // DFMA C_r1_c4, A_r1_k1, B_c4_k1.reuse, C_r1_c4
      DFMA R40, R188, R224.reuse, R40 ?W4;                   // DFMA C_r2_c4, A_r2_k1, B_c4_k1.reuse, C_r2_c4
      DFMA R56, R190, R224.reuse, R56 ?W4;                   // DFMA C_r3_c4, A_r3_k1, B_c4_k1.reuse, C_r3_c4
      DFMA R72, R192, R224.reuse, R72 ?W4;                   // DFMA C_r4_c4, A_r4_k1, B_c4_k1.reuse, C_r4_c4
      DFMA R88, R194, R224.reuse, R88 ?W4;                   // DFMA C_r5_c4, A_r5_k1, B_c4_k1.reuse, C_r5_c4
      DFMA R104, R196, R224.reuse, R104 ?W4;                 // DFMA C_r6_c4, A_r6_k1, B_c4_k1.reuse, C_r6_c4
      DFMA R120, R198.reuse, R224, R120 ?W4;                 // DFMA C_r7_c4, A_r7_k1.reuse, B_c4_k1, C_r7_c4
      DFMA R122, R198, R226.reuse, R122 ?W4;                 // DFMA C_r7_c5, A_r7_k1, B_c5_k1.reuse, C_r7_c5
      DFMA R106, R196, R226.reuse, R106 ?W4;                 // DFMA C_r6_c5, A_r6_k1, B_c5_k1.reuse, C_r6_c5
      DFMA R90, R194, R226.reuse, R90 ?W4;                   // DFMA C_r5_c5, A_r5_k1, B_c5_k1.reuse, C_r5_c5
      DFMA R74, R192, R226.reuse, R74 ?W4;                   // DFMA C_r4_c5, A_r4_k1, B_c5_k1.reuse, C_r4_c5
      DFMA R58, R190, R226.reuse, R58 ?W4;                   // DFMA C_r3_c5, A_r3_k1, B_c5_k1.reuse, C_r3_c5
      DFMA R42, R188, R226.reuse, R42 ?W4;                   // DFMA C_r2_c5, A_r2_k1, B_c5_k1.reuse, C_r2_c5
      DFMA R26, R186, R226.reuse, R26 ?W4;                   // DFMA C_r1_c5, A_r1_k1, B_c5_k1.reuse, C_r1_c5
      DFMA R10, R184.reuse, R226, R10 ?W4;                   // DFMA C_r0_c5, A_r0_k1.reuse, B_c5_k1, C_r0_c5
      DFMA R12, R184, R228.reuse, R12 ?W4;                   // DFMA C_r0_c6, A_r0_k1, B_c6_k1.reuse, C_r0_c6
      DFMA R28, R186, R228.reuse, R28 ?W4;                   // DFMA C_r1_c6, A_r1_k1, B_c6_k1.reuse, C_r1_c6
      DFMA R44, R188, R228.reuse, R44 ?W4;                   // DFMA C_r2_c6, A_r2_k1, B_c6_k1.reuse, C_r2_c6
      DFMA R60, R190, R228.reuse, R60 ?W4;                   // DFMA C_r3_c6, A_r3_k1, B_c6_k1.reuse, C_r3_c6
      DFMA R76, R192, R228.reuse, R76 ?W4;                   // DFMA C_r4_c6, A_r4_k1, B_c6_k1.reuse, C_r4_c6
      DFMA R92, R194, R228.reuse, R92 ?W4;                   // DFMA C_r5_c6, A_r5_k1, B_c6_k1.reuse, C_r5_c6
      DFMA R108, R196, R228.reuse, R108 ?W4;                 // DFMA C_r6_c6, A_r6_k1, B_c6_k1.reuse, C_r6_c6
      DFMA R124, R198.reuse, R228, R124 ?W4;                 // DFMA C_r7_c6, A_r7_k1.reuse, B_c6_k1, C_r7_c6
      DFMA R126, R198, R230.reuse, R126 ?W4;                 // DFMA C_r7_c7, A_r7_k1, B_c7_k1.reuse, C_r7_c7
      DFMA R110, R196, R230.reuse, R110 ?W4;                 // DFMA C_r6_c7, A_r6_k1, B_c7_k1.reuse, C_r6_c7
      DFMA R94, R194, R230.reuse, R94 ?W4;                   // DFMA C_r5_c7, A_r5_k1, B_c7_k1.reuse, C_r5_c7
      DFMA R78, R192, R230.reuse, R78 ?W4;                   // DFMA C_r4_c7, A_r4_k1, B_c7_k1.reuse, C_r4_c7
      DFMA R62, R190, R230.reuse, R62 ?W4;                   // DFMA C_r3_c7, A_r3_k1, B_c7_k1.reuse, C_r3_c7
      DFMA R46, R188, R230.reuse, R46 ?W4;                   // DFMA C_r2_c7, A_r2_k1, B_c7_k1.reuse, C_r2_c7
      DFMA R30, R186, R230.reuse, R30 ?W4;                   // DFMA C_r1_c7, A_r1_k1, B_c7_k1.reuse, C_r1_c7
      DFMA R14, R184, R230, R14 &wr=4 ?W4EG;                 // DFMA C_r0_c7, A_r0_k1, B_c7_k1, C_r0_c7
      DFMA R0, R168, R200.reuse, R0 &req={0,4} ?W2;          // DFMA C_r0_c0, A_r0_k0, B_c0_k0.reuse, C_r0_c0
      LDS.128 R184, [R152 + 0x1400] &wr=0 ?W2;               // LDS.128 A_r0_k1, [sharedA + 0x1400]
      DFMA R16, R170, R200.reuse, R16 ?W4;                   // DFMA C_r1_c0, A_r1_k0, B_c0_k0.reuse, C_r1_c0
      DFMA R32, R172, R200.reuse, R32 ?W2;                   // DFMA C_r2_c0, A_r2_k0, B_c0_k0.reuse, C_r2_c0
      LDS.128 R216, [R153 + 0xa00] &wr=0 ?W2;                // LDS.128 B_c0_k1, [sharedB + 0xa00]
      DFMA R48, R174, R200.reuse, R48 ?W4;                   // DFMA C_r3_c0, A_r3_k0, B_c0_k0.reuse, C_r3_c0
      DFMA R64, R176, R200.reuse, R64 ?W2;                   // DFMA C_r4_c0, A_r4_k0, B_c0_k0.reuse, C_r4_c0
      LDS.128 R188, [R152 + 0x1480] &wr=0 ?W2;               // LDS.128 A_r2_k1, [sharedA + 0x1480]
      DFMA R80, R178, R200.reuse, R80 ?W4;                   // DFMA C_r5_c0, A_r5_k0, B_c0_k0.reuse, C_r5_c0
      DFMA R96, R180, R200.reuse, R96 ?W2;                   // DFMA C_r6_c0, A_r6_k0, B_c0_k0.reuse, C_r6_c0
      LDS.128 R220, [R153 + 0xa40] &wr=0 ?W2;                // LDS.128 B_c2_k1, [sharedB + 0xa40]
      DFMA R112, R182.reuse, R200, R112 ?W4;                 // DFMA C_r7_c0, A_r7_k0.reuse, B_c0_k0, C_r7_c0
      DFMA R114, R182, R202.reuse, R114 ?W2;                 // DFMA C_r7_c1, A_r7_k0, B_c1_k0.reuse, C_r7_c1
      LDS.128 R192, [R152 + 0x1500] &wr=0 ?W2;               // LDS.128 A_r4_k1, [sharedA + 0x1500]
      DFMA R98, R180, R202.reuse, R98 ?W4;                   // DFMA C_r6_c1, A_r6_k0, B_c1_k0.reuse, C_r6_c1
      DFMA R82, R178, R202.reuse, R82 ?W2;                   // DFMA C_r5_c1, A_r5_k0, B_c1_k0.reuse, C_r5_c1
      LDS.128 R224, [R153 + 0xa80] &wr=0 ?W2;                // LDS.128 B_c4_k1, [sharedB + 0xa80]
      DFMA R66, R176, R202.reuse, R66 ?W4;                   // DFMA C_r4_c1, A_r4_k0, B_c1_k0.reuse, C_r4_c1
      DFMA R50, R174, R202.reuse, R50 ?W2;                   // DFMA C_r3_c1, A_r3_k0, B_c1_k0.reuse, C_r3_c1
      LDS.128 R196, [R152 + 0x1580] &wr=0 ?W2;               // LDS.128 A_r6_k1, [sharedA + 0x1580]
      DFMA R34, R172, R202.reuse, R34 ?W4;                   // DFMA C_r2_c1, A_r2_k0, B_c1_k0.reuse, C_r2_c1
      DFMA R18, R170, R202.reuse, R18 ?W2;                   // DFMA C_r1_c1, A_r1_k0, B_c1_k0.reuse, C_r1_c1
      LDS.128 R228, [R153 + 0xac0] &rd=1 &wr=0 ?W2;          // LDS.128 B_c6_k1, [sharedB + 0xac0]
      DFMA R2, R168.reuse, R202, R2 ?W4;                     // DFMA C_r0_c1, A_r0_k0.reuse, B_c1_k0, C_r0_c1
      DFMA R4, R168, R204.reuse, R4 ?W4;                     // DFMA C_r0_c2, A_r0_k0, B_c2_k0.reuse, C_r0_c2
      DFMA R20, R170, R204.reuse, R20 ?W4;                   // DFMA C_r1_c2, A_r1_k0, B_c2_k0.reuse, C_r1_c2
      DFMA R36, R172, R204.reuse, R36 ?W4;                   // DFMA C_r2_c2, A_r2_k0, B_c2_k0.reuse, C_r2_c2
      DFMA R52, R174, R204.reuse, R52 ?W4;                   // DFMA C_r3_c2, A_r3_k0, B_c2_k0.reuse, C_r3_c2
      DFMA R68, R176, R204.reuse, R68 ?W4;                   // DFMA C_r4_c2, A_r4_k0, B_c2_k0.reuse, C_r4_c2
      DFMA R84, R178, R204.reuse, R84 ?W4;                   // DFMA C_r5_c2, A_r5_k0, B_c2_k0.reuse, C_r5_c2
      DFMA R100, R180, R204.reuse, R100 ?W4;                 // DFMA C_r6_c2, A_r6_k0, B_c2_k0.reuse, C_r6_c2
      DFMA R116, R182.reuse, R204, R116 ?W4;                 // DFMA C_r7_c2, A_r7_k0.reuse, B_c2_k0, C_r7_c2
      DFMA R118, R182, R206.reuse, R118 ?W4;                 // DFMA C_r7_c3, A_r7_k0, B_c3_k0.reuse, C_r7_c3
      DFMA R102, R180, R206.reuse, R102 ?W4;                 // DFMA C_r6_c3, A_r6_k0, B_c3_k0.reuse, C_r6_c3
      DFMA R86, R178, R206.reuse, R86 ?W4;                   // DFMA C_r5_c3, A_r5_k0, B_c3_k0.reuse, C_r5_c3
      DFMA R70, R176, R206.reuse, R70 ?W4;                   // DFMA C_r4_c3, A_r4_k0, B_c3_k0.reuse, C_r4_c3
      DFMA R54, R174, R206.reuse, R54 ?W4;                   // DFMA C_r3_c3, A_r3_k0, B_c3_k0.reuse, C_r3_c3
      DFMA R38, R172, R206.reuse, R38 ?W4;                   // DFMA C_r2_c3, A_r2_k0, B_c3_k0.reuse, C_r2_c3
      DFMA R22, R170, R206.reuse, R22 ?W4;                   // DFMA C_r1_c3, A_r1_k0, B_c3_k0.reuse, C_r1_c3
      DFMA R6, R168.reuse, R206, R6 ?W4;                     // DFMA C_r0_c3, A_r0_k0.reuse, B_c3_k0, C_r0_c3
      DFMA R8, R168, R208.reuse, R8 ?W4;                     // DFMA C_r0_c4, A_r0_k0, B_c4_k0.reuse, C_r0_c4
      DFMA R24, R170, R208.reuse, R24 ?W4;                   // DFMA C_r1_c4, A_r1_k0, B_c4_k0.reuse, C_r1_c4
      DFMA R40, R172, R208.reuse, R40 ?W4;                   // DFMA C_r2_c4, A_r2_k0, B_c4_k0.reuse, C_r2_c4
      DFMA R56, R174, R208.reuse, R56 ?W4;                   // DFMA C_r3_c4, A_r3_k0, B_c4_k0.reuse, C_r3_c4
      DFMA R72, R176, R208.reuse, R72 ?W4;                   // DFMA C_r4_c4, A_r4_k0, B_c4_k0.reuse, C_r4_c4
      DFMA R88, R178, R208.reuse, R88 ?W4;                   // DFMA C_r5_c4, A_r5_k0, B_c4_k0.reuse, C_r5_c4
      DFMA R104, R180, R208.reuse, R104 ?W4;                 // DFMA C_r6_c4, A_r6_k0, B_c4_k0.reuse, C_r6_c4
      DFMA R120, R182.reuse, R208, R120 ?W4;                 // DFMA C_r7_c4, A_r7_k0.reuse, B_c4_k0, C_r7_c4
      DFMA R122, R182, R210.reuse, R122 ?W4;                 // DFMA C_r7_c5, A_r7_k0, B_c5_k0.reuse, C_r7_c5
      DFMA R106, R180, R210.reuse, R106 ?W4;                 // DFMA C_r6_c5, A_r6_k0, B_c5_k0.reuse, C_r6_c5
      DFMA R90, R178, R210.reuse, R90 ?W4;                   // DFMA C_r5_c5, A_r5_k0, B_c5_k0.reuse, C_r5_c5
      DFMA R74, R176, R210.reuse, R74 ?W4;                   // DFMA C_r4_c5, A_r4_k0, B_c5_k0.reuse, C_r4_c5
      DFMA R58, R174, R210.reuse, R58 ?W4;                   // DFMA C_r3_c5, A_r3_k0, B_c5_k0.reuse, C_r3_c5
      DFMA R42, R172, R210.reuse, R42 ?W4;                   // DFMA C_r2_c5, A_r2_k0, B_c5_k0.reuse, C_r2_c5
      DFMA R26, R170, R210.reuse, R26 ?W4;                   // DFMA C_r1_c5, A_r1_k0, B_c5_k0.reuse, C_r1_c5
      DFMA R10, R168.reuse, R210, R10 ?W4;                   // DFMA C_r0_c5, A_r0_k0.reuse, B_c5_k0, C_r0_c5
      DFMA R12, R168, R212.reuse, R12 ?W4;                   // DFMA C_r0_c6, A_r0_k0, B_c6_k0.reuse, C_r0_c6
      DFMA R28, R170, R212.reuse, R28 ?W4;                   // DFMA C_r1_c6, A_r1_k0, B_c6_k0.reuse, C_r1_c6
      DFMA R44, R172, R212.reuse, R44 ?W4;                   // DFMA C_r2_c6, A_r2_k0, B_c6_k0.reuse, C_r2_c6
      DFMA R60, R174, R212.reuse, R60 ?W4;                   // DFMA C_r3_c6, A_r3_k0, B_c6_k0.reuse, C_r3_c6
      DFMA R76, R176, R212.reuse, R76 ?W4;                   // DFMA C_r4_c6, A_r4_k0, B_c6_k0.reuse, C_r4_c6
      DFMA R92, R178, R212.reuse, R92 ?W4;                   // DFMA C_r5_c6, A_r5_k0, B_c6_k0.reuse, C_r5_c6
      DFMA R108, R180, R212.reuse, R108 ?W4;                 // DFMA C_r6_c6, A_r6_k0, B_c6_k0.reuse, C_r6_c6
      DFMA R124, R182.reuse, R212, R124 ?W4;                 // DFMA C_r7_c6, A_r7_k0.reuse, B_c6_k0, C_r7_c6
      DFMA R126, R182, R214.reuse, R126 ?W4;                 // DFMA C_r7_c7, A_r7_k0, B_c7_k0.reuse, C_r7_c7
      DFMA R110, R180, R214.reuse, R110 ?W4;                 // DFMA C_r6_c7, A_r6_k0, B_c7_k0.reuse, C_r6_c7
      DFMA R94, R178, R214.reuse, R94 ?W4;                   // DFMA C_r5_c7, A_r5_k0, B_c7_k0.reuse, C_r5_c7
      DFMA R78, R176, R214.reuse, R78 ?W4;                   // DFMA C_r4_c7, A_r4_k0, B_c7_k0.reuse, C_r4_c7
      DFMA R62, R174, R214.reuse, R62 ?W4;                   // DFMA C_r3_c7, A_r3_k0, B_c7_k0.reuse, C_r3_c7
      DFMA R46, R172, R214.reuse, R46 ?W4;                   // DFMA C_r2_c7, A_r2_k0, B_c7_k0.reuse, C_r2_c7
      DFMA R30, R170, R214.reuse, R30 ?W4;                   // DFMA C_r1_c7, A_r1_k0, B_c7_k0.reuse, C_r1_c7
      DFMA R14, R168, R214, R14 &wr=4 ?W4EG;                 // DFMA C_r0_c7, A_r0_k0, B_c7_k0, C_r0_c7
      DFMA R0, R184, R216.reuse, R0 &req={0,4} ?W2;          // DFMA C_r0_c0, A_r0_k1, B_c0_k1.reuse, C_r0_c0
      LDS.128 R168, [R152 + 0x1800] &wr=0 ?W2;               // LDS.128 A_r0_k0, [sharedA + 0x1800]
      DFMA R16, R186, R216.reuse, R16 ?W4;                   // DFMA C_r1_c0, A_r1_k1, B_c0_k1.reuse, C_r1_c0
      DFMA R32, R188, R216.reuse, R32 ?W2;                   // DFMA C_r2_c0, A_r2_k1, B_c0_k1.reuse, C_r2_c0
      LDS.128 R200, [R153 + 0xc00] &wr=0 ?W2;                // LDS.128 B_c0_k0, [sharedB + 0xc00]
      DFMA R48, R190, R216.reuse, R48 ?W4;                   // DFMA C_r3_c0, A_r3_k1, B_c0_k1.reuse, C_r3_c0
      DFMA R64, R192, R216.reuse, R64 ?W2;                   // DFMA C_r4_c0, A_r4_k1, B_c0_k1.reuse, C_r4_c0
      LDS.128 R172, [R152 + 0x1880] &wr=0 ?W2;               // LDS.128 A_r2_k0, [sharedA + 0x1880]
      DFMA R80, R194, R216.reuse, R80 ?W4;                   // DFMA C_r5_c0, A_r5_k1, B_c0_k1.reuse, C_r5_c0
      DFMA R96, R196, R216.reuse, R96 ?W2;                   // DFMA C_r6_c0, A_r6_k1, B_c0_k1.reuse, C_r6_c0
      LDS.128 R204, [R153 + 0xc40] &wr=0 ?W2;                // LDS.128 B_c2_k0, [sharedB + 0xc40]
      DFMA R112, R198.reuse, R216, R112 ?W4;                 // DFMA C_r7_c0, A_r7_k1.reuse, B_c0_k1, C_r7_c0
      DFMA R114, R198, R218.reuse, R114 ?W2;                 // DFMA C_r7_c1, A_r7_k1, B_c1_k1.reuse, C_r7_c1
      LDS.128 R176, [R152 + 0x1900] &wr=0 ?W2;               // LDS.128 A_r4_k0, [sharedA + 0x1900]
      DFMA R98, R196, R218.reuse, R98 ?W4;                   // DFMA C_r6_c1, A_r6_k1, B_c1_k1.reuse, C_r6_c1
      DFMA R82, R194, R218.reuse, R82 ?W2;                   // DFMA C_r5_c1, A_r5_k1, B_c1_k1.reuse, C_r5_c1
      LDS.128 R208, [R153 + 0xc80] &wr=0 ?W2;                // LDS.128 B_c4_k0, [sharedB + 0xc80]
      DFMA R66, R192, R218.reuse, R66 ?W4;                   // DFMA C_r4_c1, A_r4_k1, B_c1_k1.reuse, C_r4_c1
      DFMA R50, R190, R218.reuse, R50 ?W2;                   // DFMA C_r3_c1, A_r3_k1, B_c1_k1.reuse, C_r3_c1
      LDS.128 R180, [R152 + 0x1980] &wr=0 ?W2;               // LDS.128 A_r6_k0, [sharedA + 0x1980]
      DFMA R34, R188, R218.reuse, R34 ?W4;                   // DFMA C_r2_c1, A_r2_k1, B_c1_k1.reuse, C_r2_c1
      DFMA R18, R186, R218.reuse, R18 ?W2;                   // DFMA C_r1_c1, A_r1_k1, B_c1_k1.reuse, C_r1_c1
      LDS.128 R212, [R153 + 0xcc0] &rd=1 &wr=0 ?W2;          // LDS.128 B_c6_k0, [sharedB + 0xcc0]
      DFMA R2, R184.reuse, R218, R2 ?W4;                     // DFMA C_r0_c1, A_r0_k1.reuse, B_c1_k1, C_r0_c1
      DFMA R4, R184, R220.reuse, R4 ?W4;                     // DFMA C_r0_c2, A_r0_k1, B_c2_k1.reuse, C_r0_c2
      DFMA R20, R186, R220.reuse, R20 ?W4;                   // DFMA C_r1_c2, A_r1_k1, B_c2_k1.reuse, C_r1_c2
      DFMA R36, R188, R220.reuse, R36 ?W4;                   // DFMA C_r2_c2, A_r2_k1, B_c2_k1.reuse, C_r2_c2
      DFMA R52, R190, R220.reuse, R52 ?W4;                   // DFMA C_r3_c2, A_r3_k1, B_c2_k1.reuse, C_r3_c2
      DFMA R68, R192, R220.reuse, R68 ?W4;                   // DFMA C_r4_c2, A_r4_k1, B_c2_k1.reuse, C_r4_c2
      DFMA R84, R194, R220.reuse, R84 ?W4;                   // DFMA C_r5_c2, A_r5_k1, B_c2_k1.reuse, C_r5_c2
      DFMA R100, R196, R220.reuse, R100 ?W4;                 // DFMA C_r6_c2, A_r6_k1, B_c2_k1.reuse, C_r6_c2
      DFMA R116, R198.reuse, R220, R116 ?W4;                 // DFMA C_r7_c2, A_r7_k1.reuse, B_c2_k1, C_r7_c2
      DFMA R118, R198, R222.reuse, R118 ?W4;                 // DFMA C_r7_c3, A_r7_k1, B_c3_k1.reuse, C_r7_c3
      DFMA R102, R196, R222.reuse, R102 ?W4;                 // DFMA C_r6_c3, A_r6_k1, B_c3_k1.reuse, C_r6_c3
      DFMA R86, R194, R222.reuse, R86 ?W4;                   // DFMA C_r5_c3, A_r5_k1, B_c3_k1.reuse, C_r5_c3
      DFMA R70, R192, R222.reuse, R70 ?W4;                   // DFMA C_r4_c3, A_r4_k1, B_c3_k1.reuse, C_r4_c3
      DFMA R54, R190, R222.reuse, R54 ?W4;                   // DFMA C_r3_c3, A_r3_k1, B_c3_k1.reuse, C_r3_c3
      DFMA R38, R188, R222.reuse, R38 ?W4;                   // DFMA C_r2_c3, A_r2_k1, B_c3_k1.reuse, C_r2_c3
      DFMA R22, R186, R222.reuse, R22 ?W4;                   // DFMA C_r1_c3, A_r1_k1, B_c3_k1.reuse, C_r1_c3
      DFMA R6, R184.reuse, R222, R6 ?W4;                     // DFMA C_r0_c3, A_r0_k1.reuse, B_c3_k1, C_r0_c3
      DFMA R8, R184, R224.reuse, R8 ?W2;                     // DFMA C_r0_c4, A_r0_k1, B_c4_k1.reuse, C_r0_c4
(P1)  STS.64    [R156 + 0x0], R128 &req=2 ?W2;               // @P1 STS.64 [sharedWriteA + 0x0], fetchRegA0
      DFMA R24, R186, R224.reuse, R24 ?W4;                   // DFMA C_r1_c4, A_r1_k1, B_c4_k1.reuse, C_r1_c4
      DFMA R40, R188, R224.reuse, R40 ?W2;                   // DFMA C_r2_c4, A_r2_k1, B_c4_k1.reuse, C_r2_c4
(P1)  STS.64    [R156 + 0x100], R130 ?W2;                    // @P1 STS.64 [sharedWriteA + 0x100], fetchRegA1
      DFMA R56, R190, R224.reuse, R56 ?W4;                   // DFMA C_r3_c4, A_r3_k1, B_c4_k1.reuse, C_r3_c4
      DFMA R72, R192, R224.reuse, R72 ?W2;                   // DFMA C_r4_c4, A_r4_k1, B_c4_k1.reuse, C_r4_c4
(P1)  STS.64    [R156 + 0x200], R132 ?W2;                    // @P1 STS.64 [sharedWriteA + 0x200], fetchRegA2
      DFMA R88, R194, R224.reuse, R88 ?W4;                   // DFMA C_r5_c4, A_r5_k1, B_c4_k1.reuse, C_r5_c4
      DFMA R104, R196, R224.reuse, R104 ?W2;                 // DFMA C_r6_c4, A_r6_k1, B_c4_k1.reuse, C_r6_c4
(P1)  STS.64    [R156 + 0x300], R134 ?W2;                    // @P1 STS.64 [sharedWriteA + 0x300], fetchRegA3
      DFMA R120, R198.reuse, R224, R120 ?W4;                 // DFMA C_r7_c4, A_r7_k1.reuse, B_c4_k1, C_r7_c4
      DFMA R122, R198, R226.reuse, R122 ?W2;                 // DFMA C_r7_c5, A_r7_k1, B_c5_k1.reuse, C_r7_c5
(P1)  STS.64    [R156 + 0x1000], R136 ?W2;                   // @P1 STS.64 [sharedWriteA + 0x1000], fetchRegA4
      DFMA R106, R196, R226.reuse, R106 ?W4;                 // DFMA C_r6_c5, A_r6_k1, B_c5_k1.reuse, C_r6_c5
      DFMA R90, R194, R226.reuse, R90 ?W2;                   // DFMA C_r5_c5, A_r5_k1, B_c5_k1.reuse, C_r5_c5
(P1)  STS.64    [R156 + 0x1100], R138 ?W2;                   // @P1 STS.64 [sharedWriteA + 0x1100], fetchRegA5
      DFMA R74, R192, R226.reuse, R74 ?W4;                   // DFMA C_r4_c5, A_r4_k1, B_c5_k1.reuse, C_r4_c5
      DFMA R58, R190, R226.reuse, R58 ?W2;                   // DFMA C_r3_c5, A_r3_k1, B_c5_k1.reuse, C_r3_c5
(P1)  STS.64    [R156 + 0x1200], R140 ?W2;                   // @P1 STS.64 [sharedWriteA + 0x1200], fetchRegA6
      DFMA R42, R188, R226.reuse, R42 ?W4;                   // DFMA C_r2_c5, A_r2_k1, B_c5_k1.reuse, C_r2_c5
      DFMA R26, R186, R226.reuse, R26 ?W2;                   // DFMA C_r1_c5, A_r1_k1, B_c5_k1.reuse, C_r1_c5
(P1)  STS.64    [R156 + 0x1300], R142 ?W2;                   // @P1 STS.64 [sharedWriteA + 0x1300], fetchRegA7
      DFMA R10, R184.reuse, R226, R10 ?W4;                   // DFMA C_r0_c5, A_r0_k1.reuse, B_c5_k1, C_r0_c5
      DFMA R12, R184, R228.reuse, R12 ?W2;                   // DFMA C_r0_c6, A_r0_k1, B_c6_k1.reuse, C_r0_c6
(P1)  STS.64    [R157 + 0x0], R144 ?W2;                      // @P1 STS.64 [sharedWriteB + 0x0], fetchRegB0
      DFMA R28, R186, R228.reuse, R28 ?W4;                   // DFMA C_r1_c6, A_r1_k1, B_c6_k1.reuse, C_r1_c6
      DFMA R44, R188, R228.reuse, R44 ?W2;                   // DFMA C_r2_c6, A_r2_k1, B_c6_k1.reuse, C_r2_c6
(P1)  STS.64    [R157 + 0x100], R146 ?W2;                    // @P1 STS.64 [sharedWriteB + 0x100], fetchRegB1
      DFMA R60, R190, R228.reuse, R60 ?W4;                   // DFMA C_r3_c6, A_r3_k1, B_c6_k1.reuse, C_r3_c6
      DFMA R76, R192, R228.reuse, R76 ?W2;                   // DFMA C_r4_c6, A_r4_k1, B_c6_k1.reuse, C_r4_c6
(P1)  STS.64    [R157 + 0x800], R148 ?W2;                    // @P1 STS.64 [sharedWriteB + 0x800], fetchRegB2
      DFMA R92, R194, R228.reuse, R92 ?W4;                   // DFMA C_r5_c6, A_r5_k1, B_c6_k1.reuse, C_r5_c6
      DFMA R108, R196, R228.reuse, R108 ?W2;                 // DFMA C_r6_c6, A_r6_k1, B_c6_k1.reuse, C_r6_c6
(P1)  STS.64    [R157 + 0x900], R150 &rd=1 ?W2;              // @P1 STS.64 [sharedWriteB + 0x900], fetchRegB3
      DFMA R124, R198.reuse, R228, R124 ?W4;                 // DFMA C_r7_c6, A_r7_k1.reuse, B_c6_k1, C_r7_c6
      DFMA R126, R198, R230.reuse, R126 ?W4;                 // DFMA C_r7_c7, A_r7_k1, B_c7_k1.reuse, C_r7_c7
      DFMA R110, R196, R230.reuse, R110 ?W4;                 // DFMA C_r6_c7, A_r6_k1, B_c7_k1.reuse, C_r6_c7
      DFMA R94, R194, R230.reuse, R94 ?W4;                   // DFMA C_r5_c7, A_r5_k1, B_c7_k1.reuse, C_r5_c7
      DFMA R78, R192, R230.reuse, R78 ?W4;                   // DFMA C_r4_c7, A_r4_k1, B_c7_k1.reuse, C_r4_c7
      DFMA R62, R190, R230.reuse, R62 ?W4;                   // DFMA C_r3_c7, A_r3_k1, B_c7_k1.reuse, C_r3_c7
      DFMA R46, R188, R230.reuse, R46 ?W4;                   // DFMA C_r2_c7, A_r2_k1, B_c7_k1.reuse, C_r2_c7
      DFMA R30, R186, R230.reuse, R30 ?W4;                   // DFMA C_r1_c7, A_r1_k1, B_c7_k1.reuse, C_r1_c7
      DFMA R14, R184, R230, R14 &wr=4 ?W4EG;                 // DFMA C_r0_c7, A_r0_k1, B_c7_k1, C_r0_c7
      DFMA R0, R168, R200.reuse, R0 &req={0,4} ?W2;          // DFMA C_r0_c0, A_r0_k0, B_c0_k0.reuse, C_r0_c0
      LDS.128 R184, [R152 + 0x1c00] &wr=0 ?W2;               // LDS.128 A_r0_k1, [sharedA + 0x1c00]
      DFMA R16, R170, R200.reuse, R16 ?W4;                   // DFMA C_r1_c0, A_r1_k0, B_c0_k0.reuse, C_r1_c0
      DFMA R32, R172, R200.reuse, R32 ?W2;                   // DFMA C_r2_c0, A_r2_k0, B_c0_k0.reuse, C_r2_c0
      LDS.128 R216, [R153 + 0xe00] &wr=0 ?W2;                // LDS.128 B_c0_k1, [sharedB + 0xe00]
      DFMA R48, R174, R200.reuse, R48 ?W4;                   // DFMA C_r3_c0, A_r3_k0, B_c0_k0.reuse, C_r3_c0
      DFMA R64, R176, R200.reuse, R64 ?W2;                   // DFMA C_r4_c0, A_r4_k0, B_c0_k0.reuse, C_r4_c0
      LDS.128 R188, [R152 + 0x1c80] &wr=0 ?W2;               // LDS.128 A_r2_k1, [sharedA + 0x1c80]
      DFMA R80, R178, R200.reuse, R80 ?W4;                   // DFMA C_r5_c0, A_r5_k0, B_c0_k0.reuse, C_r5_c0
      DFMA R96, R180, R200.reuse, R96 ?W2;                   // DFMA C_r6_c0, A_r6_k0, B_c0_k0.reuse, C_r6_c0
      LDS.128 R220, [R153 + 0xe40] &wr=0 ?W2;                // LDS.128 B_c2_k1, [sharedB + 0xe40]
      DFMA R112, R182.reuse, R200, R112 ?W4;                 // DFMA C_r7_c0, A_r7_k0.reuse, B_c0_k0, C_r7_c0
      DFMA R114, R182, R202.reuse, R114 ?W2;                 // DFMA C_r7_c1, A_r7_k0, B_c1_k0.reuse, C_r7_c1
      LDS.128 R192, [R152 + 0x1d00] &wr=0 ?W2;               // LDS.128 A_r4_k1, [sharedA + 0x1d00]
      DFMA R98, R180, R202.reuse, R98 ?W4;                   // DFMA C_r6_c1, A_r6_k0, B_c1_k0.reuse, C_r6_c1
      DFMA R82, R178, R202.reuse, R82 ?W2;                   // DFMA C_r5_c1, A_r5_k0, B_c1_k0.reuse, C_r5_c1
      LDS.128 R224, [R153 + 0xe80] &wr=0 ?W2;                // LDS.128 B_c4_k1, [sharedB + 0xe80]
      DFMA R66, R176, R202.reuse, R66 ?W4;                   // DFMA C_r4_c1, A_r4_k0, B_c1_k0.reuse, C_r4_c1
      DFMA R50, R174, R202.reuse, R50 ?W2;                   // DFMA C_r3_c1, A_r3_k0, B_c1_k0.reuse, C_r3_c1
      LDS.128 R196, [R152 + 0x1d80] &wr=0 ?W2;               // LDS.128 A_r6_k1, [sharedA + 0x1d80]
      DFMA R34, R172, R202.reuse, R34 ?W4;                   // DFMA C_r2_c1, A_r2_k0, B_c1_k0.reuse, C_r2_c1
      DFMA R18, R170, R202.reuse, R18 ?W2;                   // DFMA C_r1_c1, A_r1_k0, B_c1_k0.reuse, C_r1_c1
      LDS.128 R228, [R153 + 0xec0] &rd=1 &wr=0 ?W2;          // LDS.128 B_c6_k1, [sharedB + 0xec0]
      DFMA R2, R168.reuse, R202, R2 ?W4;                     // DFMA C_r0_c1, A_r0_k0.reuse, B_c1_k0, C_r0_c1
      DFMA R4, R168, R204.reuse, R4 ?W2;                     // DFMA C_r0_c2, A_r0_k0, B_c2_k0.reuse, C_r0_c2
(P1)  BAR.SYNC.DEFER_BLOCKING  0 ?W6;                        // @P1 BAR.SYNC.DEFER_BLOCKING 0
      DFMA R20, R170, R204.reuse, R20 ?W4;                   // DFMA C_r1_c2, A_r1_k0, B_c2_k0.reuse, C_r1_c2
      DFMA R36, R172, R204.reuse, R36 ?W4;                   // DFMA C_r2_c2, A_r2_k0, B_c2_k0.reuse, C_r2_c2
      DFMA R52, R174, R204.reuse, R52 ?W4;                   // DFMA C_r3_c2, A_r3_k0, B_c2_k0.reuse, C_r3_c2
      DFMA R68, R176, R204.reuse, R68 ?W4;                   // DFMA C_r4_c2, A_r4_k0, B_c2_k0.reuse, C_r4_c2
      DFMA R84, R178, R204.reuse, R84 ?W4;                   // DFMA C_r5_c2, A_r5_k0, B_c2_k0.reuse, C_r5_c2
      DFMA R100, R180, R204.reuse, R100 ?W4;                 // DFMA C_r6_c2, A_r6_k0, B_c2_k0.reuse, C_r6_c2
      DFMA R116, R182.reuse, R204, R116 ?W4;                 // DFMA C_r7_c2, A_r7_k0.reuse, B_c2_k0, C_r7_c2
      DFMA R118, R182, R206.reuse, R118 ?W4;                 // DFMA C_r7_c3, A_r7_k0, B_c3_k0.reuse, C_r7_c3
      DFMA R102, R180, R206.reuse, R102 ?W4;                 // DFMA C_r6_c3, A_r6_k0, B_c3_k0.reuse, C_r6_c3
      DFMA R86, R178, R206.reuse, R86 ?W4;                   // DFMA C_r5_c3, A_r5_k0, B_c3_k0.reuse, C_r5_c3
      DFMA R70, R176, R206.reuse, R70 ?W4;                   // DFMA C_r4_c3, A_r4_k0, B_c3_k0.reuse, C_r4_c3
      DFMA R54, R174, R206.reuse, R54 ?W4;                   // DFMA C_r3_c3, A_r3_k0, B_c3_k0.reuse, C_r3_c3
      DFMA R38, R172, R206.reuse, R38 ?W4;                   // DFMA C_r2_c3, A_r2_k0, B_c3_k0.reuse, C_r2_c3
      DFMA R22, R170, R206.reuse, R22 ?W4;                   // DFMA C_r1_c3, A_r1_k0, B_c3_k0.reuse, C_r1_c3
      DFMA R6, R168.reuse, R206, R6 ?W4;                     // DFMA C_r0_c3, A_r0_k0.reuse, B_c3_k0, C_r0_c3
      DFMA R8, R168, R208.reuse, R8 ?W4;                     // DFMA C_r0_c4, A_r0_k0, B_c4_k0.reuse, C_r0_c4
      DFMA R24, R170, R208.reuse, R24 ?W4;                   // DFMA C_r1_c4, A_r1_k0, B_c4_k0.reuse, C_r1_c4
      DFMA R40, R172, R208.reuse, R40 ?W4;                   // DFMA C_r2_c4, A_r2_k0, B_c4_k0.reuse, C_r2_c4
      DFMA R56, R174, R208.reuse, R56 ?W4;                   // DFMA C_r3_c4, A_r3_k0, B_c4_k0.reuse, C_r3_c4
      DFMA R72, R176, R208.reuse, R72 ?W4;                   // DFMA C_r4_c4, A_r4_k0, B_c4_k0.reuse, C_r4_c4
      DFMA R88, R178, R208.reuse, R88 ?W4;                   // DFMA C_r5_c4, A_r5_k0, B_c4_k0.reuse, C_r5_c4
      DFMA R104, R180, R208.reuse, R104 ?W4;                 // DFMA C_r6_c4, A_r6_k0, B_c4_k0.reuse, C_r6_c4
      DFMA R120, R182.reuse, R208, R120 ?W4;                 // DFMA C_r7_c4, A_r7_k0.reuse, B_c4_k0, C_r7_c4
      DFMA R122, R182, R210.reuse, R122 ?W4;                 // DFMA C_r7_c5, A_r7_k0, B_c5_k0.reuse, C_r7_c5
      DFMA R106, R180, R210.reuse, R106 ?W4;                 // DFMA C_r6_c5, A_r6_k0, B_c5_k0.reuse, C_r6_c5
      DFMA R90, R178, R210.reuse, R90 ?W4;                   // DFMA C_r5_c5, A_r5_k0, B_c5_k0.reuse, C_r5_c5
      DFMA R74, R176, R210.reuse, R74 ?W4;                   // DFMA C_r4_c5, A_r4_k0, B_c5_k0.reuse, C_r4_c5
      DFMA R58, R174, R210.reuse, R58 ?W4;                   // DFMA C_r3_c5, A_r3_k0, B_c5_k0.reuse, C_r3_c5
      DFMA R42, R172, R210.reuse, R42 ?W4;                   // DFMA C_r2_c5, A_r2_k0, B_c5_k0.reuse, C_r2_c5
      DFMA R26, R170, R210.reuse, R26 ?W4;                   // DFMA C_r1_c5, A_r1_k0, B_c5_k0.reuse, C_r1_c5
      DFMA R10, R168.reuse, R210, R10 ?W4;                   // DFMA C_r0_c5, A_r0_k0.reuse, B_c5_k0, C_r0_c5
      DFMA R12, R168, R212.reuse, R12 ?W4;                   // DFMA C_r0_c6, A_r0_k0, B_c6_k0.reuse, C_r0_c6
      DFMA R28, R170, R212.reuse, R28 ?W4;                   // DFMA C_r1_c6, A_r1_k0, B_c6_k0.reuse, C_r1_c6
      DFMA R44, R172, R212.reuse, R44 ?W4;                   // DFMA C_r2_c6, A_r2_k0, B_c6_k0.reuse, C_r2_c6
      DFMA R60, R174, R212.reuse, R60 ?W4;                   // DFMA C_r3_c6, A_r3_k0, B_c6_k0.reuse, C_r3_c6
      DFMA R76, R176, R212.reuse, R76 ?W4;                   // DFMA C_r4_c6, A_r4_k0, B_c6_k0.reuse, C_r4_c6
      DFMA R92, R178, R212.reuse, R92 ?W4;                   // DFMA C_r5_c6, A_r5_k0, B_c6_k0.reuse, C_r5_c6
      DFMA R108, R180, R212.reuse, R108 ?W4;                 // DFMA C_r6_c6, A_r6_k0, B_c6_k0.reuse, C_r6_c6
      DFMA R124, R182.reuse, R212, R124 ?W4;                 // DFMA C_r7_c6, A_r7_k0.reuse, B_c6_k0, C_r7_c6
      DFMA R126, R182, R214.reuse, R126 ?W4;                 // DFMA C_r7_c7, A_r7_k0, B_c7_k0.reuse, C_r7_c7
      DFMA R110, R180, R214.reuse, R110 ?W4;                 // DFMA C_r6_c7, A_r6_k0, B_c7_k0.reuse, C_r6_c7
      DFMA R94, R178, R214.reuse, R94 ?W4;                   // DFMA C_r5_c7, A_r5_k0, B_c7_k0.reuse, C_r5_c7
      DFMA R78, R176, R214.reuse, R78 ?W4;                   // DFMA C_r4_c7, A_r4_k0, B_c7_k0.reuse, C_r4_c7
      DFMA R62, R174, R214.reuse, R62 ?W4;                   // DFMA C_r3_c7, A_r3_k0, B_c7_k0.reuse, C_r3_c7
      DFMA R46, R172, R214.reuse, R46 ?W4;                   // DFMA C_r2_c7, A_r2_k0, B_c7_k0.reuse, C_r2_c7
      DFMA R30, R170, R214.reuse, R30 ?W4;                   // DFMA C_r1_c7, A_r1_k0, B_c7_k0.reuse, C_r1_c7
      DFMA R14, R168, R214, R14 &wr=4 ?W4EG;                 // DFMA C_r0_c7, A_r0_k0, B_c7_k0, C_r0_c7
      DFMA R0, R184, R216.reuse, R0 &req={0,4} ?W2;          // DFMA C_r0_c0, A_r0_k1, B_c0_k1.reuse, C_r0_c0
      IADD   R152, R152, R164 &req=1 ?W2;                    // IADD sharedA, sharedA, sharedPageFlip
      DFMA R16, R186, R216.reuse, R16 ?W4;                   // DFMA C_r1_c0, A_r1_k1, B_c0_k1.reuse, C_r1_c0
      DFMA R32, R188, R216.reuse, R32 ?W2;                   // DFMA C_r2_c0, A_r2_k1, B_c0_k1.reuse, C_r2_c0
      IADD   R153, R153, R164 &req=1 ?W2;                    // IADD sharedB, sharedB, sharedPageFlip
      DFMA R48, R190, R216.reuse, R48 ?W4;                   // DFMA C_r3_c0, A_r3_k1, B_c0_k1.reuse, C_r3_c0
      DFMA R64, R192, R216.reuse, R64 ?W2;                   // DFMA C_r4_c0, A_r4_k1, B_c0_k1.reuse, C_r4_c0
// Virtual ?REQ_BAR found on next instruction, stop putting ?BARRIER_EXEMPT on decoupled instructions
(P1)  LDS.128 R168, [R152 + 0x0] &wr=0 ?W2;                  // @P1 LDS.128 A_r0_k0, [sharedA + 0x0]
      DFMA R80, R194, R216.reuse, R80 ?W4;                   // DFMA C_r5_c0, A_r5_k1, B_c0_k1.reuse, C_r5_c0
      DFMA R96, R196, R216.reuse, R96 ?W2;                   // DFMA C_r6_c0, A_r6_k1, B_c0_k1.reuse, C_r6_c0
(P1)  LDS.128 R200, [R153 + 0x0] &wr=0 ?W2;                  // @P1 LDS.128 B_c0_k0, [sharedB + 0x0]
      DFMA R112, R198.reuse, R216, R112 ?W4;                 // DFMA C_r7_c0, A_r7_k1.reuse, B_c0_k1, C_r7_c0
      DFMA R114, R198, R218.reuse, R114 ?W2;                 // DFMA C_r7_c1, A_r7_k1, B_c1_k1.reuse, C_r7_c1
(P1)  LDS.128 R172, [R152 + 0x80] &wr=0 ?W2;                 // @P1 LDS.128 A_r2_k0, [sharedA + 0x80]
      DFMA R98, R196, R218.reuse, R98 ?W4;                   // DFMA C_r6_c1, A_r6_k1, B_c1_k1.reuse, C_r6_c1
      DFMA R82, R194, R218.reuse, R82 ?W2;                   // DFMA C_r5_c1, A_r5_k1, B_c1_k1.reuse, C_r5_c1
(P1)  LDS.128 R204, [R153 + 0x40] &wr=0 ?W2;                 // @P1 LDS.128 B_c2_k0, [sharedB + 0x40]
      DFMA R66, R192, R218.reuse, R66 ?W4;                   // DFMA C_r4_c1, A_r4_k1, B_c1_k1.reuse, C_r4_c1
      DFMA R50, R190, R218.reuse, R50 ?W2;                   // DFMA C_r3_c1, A_r3_k1, B_c1_k1.reuse, C_r3_c1
(P1)  LDS.128 R176, [R152 + 0x100] &wr=0 ?W2;                // @P1 LDS.128 A_r4_k0, [sharedA + 0x100]
      DFMA R34, R188, R218.reuse, R34 ?W4;                   // DFMA C_r2_c1, A_r2_k1, B_c1_k1.reuse, C_r2_c1
      DFMA R18, R186, R218.reuse, R18 ?W2;                   // DFMA C_r1_c1, A_r1_k1, B_c1_k1.reuse, C_r1_c1
(P1)  LDS.128 R208, [R153 + 0x80] &wr=0 ?W2;                 // @P1 LDS.128 B_c4_k0, [sharedB + 0x80]
      DFMA R2, R184.reuse, R218, R2 ?W4;                     // DFMA C_r0_c1, A_r0_k1.reuse, B_c1_k1, C_r0_c1
      DFMA R4, R184, R220.reuse, R4 ?W2;                     // DFMA C_r0_c2, A_r0_k1, B_c2_k1.reuse, C_r0_c2
(P1)  LDS.128 R180, [R152 + 0x180] &wr=0 ?W2;                // @P1 LDS.128 A_r6_k0, [sharedA + 0x180]
      DFMA R20, R186, R220.reuse, R20 ?W4;                   // DFMA C_r1_c2, A_r1_k1, B_c2_k1.reuse, C_r1_c2
      DFMA R36, R188, R220.reuse, R36 ?W2;                   // DFMA C_r2_c2, A_r2_k1, B_c2_k1.reuse, C_r2_c2
(P1)  LDS.128 R212, [R153 + 0xc0] &rd=1 &wr=0 ?W2;           // @P1 LDS.128 B_c6_k0, [sharedB + 0xc0]
      DFMA R52, R190, R220.reuse, R52 ?W4;                   // DFMA C_r3_c2, A_r3_k1, B_c2_k1.reuse, C_r3_c2
      DFMA R68, R192, R220.reuse, R68 ?W2;                   // DFMA C_r4_c2, A_r4_k1, B_c2_k1.reuse, C_r4_c2
(P1)  IADD   R156, R156, -R164 &req=1 ?W2;                   // @P1 IADD sharedWriteA, sharedWriteA, -sharedPageFlip
      DFMA R84, R194, R220.reuse, R84 ?W4;                   // DFMA C_r5_c2, A_r5_k1, B_c2_k1.reuse, C_r5_c2
      DFMA R100, R196, R220.reuse, R100 ?W2;                 // DFMA C_r6_c2, A_r6_k1, B_c2_k1.reuse, C_r6_c2
(P1)  IADD   R157, R157, -R164 &req=1 ?W2;                   // @P1 IADD sharedWriteB, sharedWriteB, -sharedPageFlip
      DFMA R116, R198.reuse, R220, R116 ?W4;                 // DFMA C_r7_c2, A_r7_k1.reuse, B_c2_k1, C_r7_c2
      DFMA R118, R198, R222.reuse, R118 ?W2;                 // DFMA C_r7_c3, A_r7_k1, B_c3_k1.reuse, C_r7_c3
(P1)  IADD   R164, RZ, -R164 ?W2;                            // @P1 IADD sharedPageFlip, RZ, -sharedPageFlip
      DFMA R102, R196, R222.reuse, R102 ?W4;                 // DFMA C_r6_c3, A_r6_k1, B_c3_k1.reuse, C_r6_c3
      DFMA R86, R194, R222.reuse, R86 ?W4;                   // DFMA C_r5_c3, A_r5_k1, B_c3_k1.reuse, C_r5_c3
      DFMA R70, R192, R222.reuse, R70 ?W4;                   // DFMA C_r4_c3, A_r4_k1, B_c3_k1.reuse, C_r4_c3
      DFMA R54, R190, R222.reuse, R54 ?W4;                   // DFMA C_r3_c3, A_r3_k1, B_c3_k1.reuse, C_r3_c3
      DFMA R38, R188, R222.reuse, R38 ?W4;                   // DFMA C_r2_c3, A_r2_k1, B_c3_k1.reuse, C_r2_c3
      DFMA R22, R186, R222.reuse, R22 ?W4;                   // DFMA C_r1_c3, A_r1_k1, B_c3_k1.reuse, C_r1_c3
      DFMA R6, R184.reuse, R222, R6 ?W4;                     // DFMA C_r0_c3, A_r0_k1.reuse, B_c3_k1, C_r0_c3
      DFMA R8, R184, R224.reuse, R8 ?W4;                     // DFMA C_r0_c4, A_r0_k1, B_c4_k1.reuse, C_r0_c4
      DFMA R24, R186, R224.reuse, R24 ?W4;                   // DFMA C_r1_c4, A_r1_k1, B_c4_k1.reuse, C_r1_c4
      DFMA R40, R188, R224.reuse, R40 ?W4;                   // DFMA C_r2_c4, A_r2_k1, B_c4_k1.reuse, C_r2_c4
      DFMA R56, R190, R224.reuse, R56 ?W4;                   // DFMA C_r3_c4, A_r3_k1, B_c4_k1.reuse, C_r3_c4
      DFMA R72, R192, R224.reuse, R72 ?W4;                   // DFMA C_r4_c4, A_r4_k1, B_c4_k1.reuse, C_r4_c4
      DFMA R88, R194, R224.reuse, R88 ?W4;                   // DFMA C_r5_c4, A_r5_k1, B_c4_k1.reuse, C_r5_c4
      DFMA R104, R196, R224.reuse, R104 ?W4;                 // DFMA C_r6_c4, A_r6_k1, B_c4_k1.reuse, C_r6_c4
      DFMA R120, R198.reuse, R224, R120 ?W4;                 // DFMA C_r7_c4, A_r7_k1.reuse, B_c4_k1, C_r7_c4
      DFMA R122, R198, R226.reuse, R122 ?W4;                 // DFMA C_r7_c5, A_r7_k1, B_c5_k1.reuse, C_r7_c5
      DFMA R106, R196, R226.reuse, R106 ?W4;                 // DFMA C_r6_c5, A_r6_k1, B_c5_k1.reuse, C_r6_c5
      DFMA R90, R194, R226.reuse, R90 ?W4;                   // DFMA C_r5_c5, A_r5_k1, B_c5_k1.reuse, C_r5_c5
      DFMA R74, R192, R226.reuse, R74 ?W4;                   // DFMA C_r4_c5, A_r4_k1, B_c5_k1.reuse, C_r4_c5
      DFMA R58, R190, R226.reuse, R58 ?W4;                   // DFMA C_r3_c5, A_r3_k1, B_c5_k1.reuse, C_r3_c5
      DFMA R42, R188, R226.reuse, R42 ?W4;                   // DFMA C_r2_c5, A_r2_k1, B_c5_k1.reuse, C_r2_c5
      DFMA R26, R186, R226.reuse, R26 ?W4;                   // DFMA C_r1_c5, A_r1_k1, B_c5_k1.reuse, C_r1_c5
      DFMA R10, R184.reuse, R226, R10 ?W4;                   // DFMA C_r0_c5, A_r0_k1.reuse, B_c5_k1, C_r0_c5
      DFMA R12, R184, R228.reuse, R12 ?W4;                   // DFMA C_r0_c6, A_r0_k1, B_c6_k1.reuse, C_r0_c6
      DFMA R28, R186, R228.reuse, R28 ?W4;                   // DFMA C_r1_c6, A_r1_k1, B_c6_k1.reuse, C_r1_c6
      DFMA R44, R188, R228.reuse, R44 ?W4;                   // DFMA C_r2_c6, A_r2_k1, B_c6_k1.reuse, C_r2_c6
      DFMA R60, R190, R228.reuse, R60 ?W4;                   // DFMA C_r3_c6, A_r3_k1, B_c6_k1.reuse, C_r3_c6
      DFMA R76, R192, R228.reuse, R76 ?W4;                   // DFMA C_r4_c6, A_r4_k1, B_c6_k1.reuse, C_r4_c6
      DFMA R92, R194, R228.reuse, R92 ?W4;                   // DFMA C_r5_c6, A_r5_k1, B_c6_k1.reuse, C_r5_c6
      DFMA R108, R196, R228.reuse, R108 ?W4;                 // DFMA C_r6_c6, A_r6_k1, B_c6_k1.reuse, C_r6_c6
      DFMA R124, R198.reuse, R228, R124 ?W4;                 // DFMA C_r7_c6, A_r7_k1.reuse, B_c6_k1, C_r7_c6
      DFMA R126, R198, R230.reuse, R126 ?W4;                 // DFMA C_r7_c7, A_r7_k1, B_c7_k1.reuse, C_r7_c7
      DFMA R110, R196, R230.reuse, R110 ?W4;                 // DFMA C_r6_c7, A_r6_k1, B_c7_k1.reuse, C_r6_c7
      DFMA R94, R194, R230.reuse, R94 ?W4;                   // DFMA C_r5_c7, A_r5_k1, B_c7_k1.reuse, C_r5_c7
      DFMA R78, R192, R230.reuse, R78 ?W4;                   // DFMA C_r4_c7, A_r4_k1, B_c7_k1.reuse, C_r4_c7
      DFMA R62, R190, R230.reuse, R62 ?W4;                   // DFMA C_r3_c7, A_r3_k1, B_c7_k1.reuse, C_r3_c7
      DFMA R46, R188, R230.reuse, R46 ?W4;                   // DFMA C_r2_c7, A_r2_k1, B_c7_k1.reuse, C_r2_c7
      DFMA R30, R186, R230.reuse, R30 ?W4;                   // DFMA C_r1_c7, A_r1_k1, B_c7_k1.reuse, C_r1_c7
      DFMA R14, R184, R230, R14 &wr=4 ?W1EG;                 // DFMA C_r0_c7, A_r0_k1, B_c7_k1, C_r0_c7
(P1)  BRA.U ampere_dgemm_128x64_mods_nt_LOOP ?W5;            // @P1 BRA.U ampere_dgemm_128x64_mods_nt_LOOP
ampere_dgemm_128x64_mods_nt_END_OF_LOOP:
      LOP.AND P0, RZ, R162, 0x7 ?W13EG;                      // LOP.AND P0, RZ, counterK, 0x7
(!P0) BRA.U  ampere_dgemm_128x64_mods_nt_EPILOG ?W5;         // @!P0 BRA.U ampere_dgemm_128x64_mods_nt_EPILOG
ampere_dgemm_128x64_mods_nt_K_RESIDUE:
      NOP &req={0, 3, 4} ?W2;                                // NOP &req={SB_LDS_WR, SB_LDG_RD, SB_R_WR}
      S2R  R184, SR_Tid.X &wr=4 ?W2;                         // S2R wid, SR_Tid.X
      LOP.AND R188, R184, 0x60 &req=4 ?W4;                   // LOP.AND diff, wid, 0x60
      SHR.U32 R188, R188, 5 ?W4;                             // SHR.U32 diff, diff, 5
      IADD    R188, R188, -R162 ?W4;                         // IADD diff, diff, -counterK
      ISETP.LT    P0, R188, 0 ?W2;                           // ISETP.LT P0, diff, 0
      ISETP.LT    P1, R188, -4 ?W13EG;                       // ISETP.LT P1, diff, -4
(!P0) R2P PR, RZ.B0, 0x78 ?W2;                               // @!P0 R2P PR, RZ.B0, 0x78
(P0)  R2P PR, R163.B0, 0x78 ?W13EG;                          // @P0 R2P PR, raggedMnPreds0.B0, 0x78
(P3)  LDG.E.EN.LTC128B.64.CONSTANT  R128, [R158 + 0x0] &wr=2 ?W2; // @P3 LDG.E.EN.LTC128B.64.CONSTANT fetchRegA0, [readPtrA + 0x0]
(!P3) MOV R128, RZ ?W2;                                      // @!P3 MOV fetchRegA0_0, RZ
(!P3) MOV R129, RZ ?W2;                                      // @!P3 MOV fetchRegA0_1, RZ
(P4)  LDG.E.EN.LTC128B.64.CONSTANT  R130, [R158 + 0x100] &wr=2 ?W2; // @P4 LDG.E.EN.LTC128B.64.CONSTANT fetchRegA1, [readPtrA + 0x100]
(!P4) MOV R130, RZ ?W2;                                      // @!P4 MOV fetchRegA1_0, RZ
(!P4) MOV R131, RZ ?W2;                                      // @!P4 MOV fetchRegA1_1, RZ
(P5)  LDG.E.EN.LTC128B.64.CONSTANT  R132, [R158 + 0x200] &wr=2 ?W2; // @P5 LDG.E.EN.LTC128B.64.CONSTANT fetchRegA2, [readPtrA + 0x200]
(!P5) MOV R132, RZ ?W2;                                      // @!P5 MOV fetchRegA2_0, RZ
(!P5) MOV R133, RZ ?W2;                                      // @!P5 MOV fetchRegA2_1, RZ
(P6)  LDG.E.EN.LTC128B.64.CONSTANT  R134, [R158 + 0x300] &rd=3 &wr=2 ?W2; // @P6 LDG.E.EN.LTC128B.64.CONSTANT fetchRegA3, [readPtrA + 0x300]
(!P6) MOV R134, RZ ?W2;                                      // @!P6 MOV fetchRegA3_0, RZ
(!P6) MOV R135, RZ ?W2;                                      // @!P6 MOV fetchRegA3_1, RZ
(P0)  IADD   R158, P2, R158,   c[0][0x188] &req=3 ?W4;       // @P0 IADD readPtrA, predCarry, readPtrA, IncSlowA
(P0)  IADD.X R159,         R159, c[0][0x18c], P2 ?W8;        // @P0 IADD.X readPtrA_HI, readPtrA_HI, IncSlowA_HI, predCarry
(!P1) R2P PR, RZ.B0, 0x78 ?W2;                               // @!P1 R2P PR, RZ.B0, 0x78
(P1)  R2P PR, R163.B0, 0x78 ?W13EG;                          // @P1 R2P PR, raggedMnPreds0.B0, 0x78
(P3)  LDG.E.EN.LTC128B.64.CONSTANT  R136, [R158 + 0x0] &wr=2 ?W2; // @P3 LDG.E.EN.LTC128B.64.CONSTANT fetchRegA4, [readPtrA + 0x0]
(!P3) MOV R136, RZ ?W2;                                      // @!P3 MOV fetchRegA4_0, RZ
(!P3) MOV R137, RZ ?W2;                                      // @!P3 MOV fetchRegA4_1, RZ
(P4)  LDG.E.EN.LTC128B.64.CONSTANT  R138, [R158 + 0x100] &wr=2 ?W2; // @P4 LDG.E.EN.LTC128B.64.CONSTANT fetchRegA5, [readPtrA + 0x100]
(!P4) MOV R138, RZ ?W2;                                      // @!P4 MOV fetchRegA5_0, RZ
(!P4) MOV R139, RZ ?W2;                                      // @!P4 MOV fetchRegA5_1, RZ
(P5)  LDG.E.EN.LTC128B.64.CONSTANT  R140, [R158 + 0x200] &wr=2 ?W2; // @P5 LDG.E.EN.LTC128B.64.CONSTANT fetchRegA6, [readPtrA + 0x200]
(!P5) MOV R140, RZ ?W2;                                      // @!P5 MOV fetchRegA6_0, RZ
(!P5) MOV R141, RZ ?W2;                                      // @!P5 MOV fetchRegA6_1, RZ
(P6)  LDG.E.EN.LTC128B.64.CONSTANT  R142, [R158 + 0x300] &rd=3 &wr=2 ?W2; // @P6 LDG.E.EN.LTC128B.64.CONSTANT fetchRegA7, [readPtrA + 0x300]
(!P6) MOV R142, RZ ?W2;                                      // @!P6 MOV fetchRegA7_0, RZ
(!P6) MOV R143, RZ ?W2;                                      // @!P6 MOV fetchRegA7_1, RZ
      LOP.AND R188, R184, 0x60 &req=4 ?W4;                   // LOP.AND diff, wid, 0x60
      SHR.U32 R188, R188, 5 ?W4;                             // SHR.U32 diff, diff, 5
      IADD    R188, R188, -R162 ?W4;                         // IADD diff, diff, -counterK
      ISETP.LT    P0, R188, 0 ?W2;                           // ISETP.LT P0, diff, 0
      ISETP.LT    P1, R188, -4 &req=3 ?W13EG;                // ISETP.LT P1, diff, -4
(!P0) R2P PR, RZ.B0, 0x78 ?W2;                               // @!P0 R2P PR, RZ.B0, 0x78
(P0)  R2P PR, R163.B1, 0x78 ?W13EG;                          // @P0 R2P PR, raggedMnPreds0.B1, 0x78
(P3)  LDG.E.EN.LTC128B.64.CONSTANT  R144, [R154 + 0x0] &wr=2 ?W2; // @P3 LDG.E.EN.LTC128B.64.CONSTANT fetchRegB0, [readPtrB + 0x0]
(!P3) MOV R144, RZ ?W2;                                      // @!P3 MOV fetchRegB0_0, RZ
(!P3) MOV R145, RZ ?W2;                                      // @!P3 MOV fetchRegB0_1, RZ
(P4)  LDG.E.EN.LTC128B.64.CONSTANT  R146, [R154 + 0x100] &rd=3 &wr=2 ?W2; // @P4 LDG.E.EN.LTC128B.64.CONSTANT fetchRegB1, [readPtrB + 0x100]
(!P4) MOV R146, RZ ?W2;                                      // @!P4 MOV fetchRegB1_0, RZ
(!P4) MOV R147, RZ ?W2;                                      // @!P4 MOV fetchRegB1_1, RZ
(P0)  IADD   R154, P2, R154,   c[0][0x190] &req=3 ?W4;       // @P0 IADD readPtrB, predCarry, readPtrB, IncSlowB
(P0)  IADD.X R155,         R155, c[0][0x194], P2 ?W8;        // @P0 IADD.X readPtrB_HI, readPtrB_HI, IncSlowB_HI, predCarry
(!P1) R2P PR, RZ.B0, 0x78 ?W2;                               // @!P1 R2P PR, RZ.B0, 0x78
(P1)  R2P PR, R163.B1, 0x78 ?W13EG;                          // @P1 R2P PR, raggedMnPreds0.B1, 0x78
(P3)  LDG.E.EN.LTC128B.64.CONSTANT  R148, [R154 + 0x0] &wr=2 ?W2; // @P3 LDG.E.EN.LTC128B.64.CONSTANT fetchRegB2, [readPtrB + 0x0]
(!P3) MOV R148, RZ ?W2;                                      // @!P3 MOV fetchRegB2_0, RZ
(!P3) MOV R149, RZ ?W2;                                      // @!P3 MOV fetchRegB2_1, RZ
(P4)  LDG.E.EN.LTC128B.64.CONSTANT  R150, [R154 + 0x100] &rd=3 &wr=2 ?W2; // @P4 LDG.E.EN.LTC128B.64.CONSTANT fetchRegB3, [readPtrB + 0x100]
(!P4) MOV R150, RZ ?W2;                                      // @!P4 MOV fetchRegB3_0, RZ
(!P4) MOV R151, RZ ?W2;                                      // @!P4 MOV fetchRegB3_1, RZ
      LOP32I.AND  R162, R162, 0xfffffff8 ?W2;                // LOP32I.AND counterK, counterK, 0xfffffff8
      BRA.U ampere_dgemm_128x64_mods_nt_PRELOOP ?W5;         // BRA.U ampere_dgemm_128x64_mods_nt_PRELOOP
ampere_dgemm_128x64_mods_nt_EPILOG:
      ISETP.NE    P0, RZ, c[0][0x1f8] &req={0,1,2,3,4,5} ?W2; // ISETP.NE P0, RZ, AbByRef
      MOV         R146, c[0][0x1d8] ?W2;                     // MOV alphaPtr, AlphaRef
      MOV         R147, c[0][0x1dc] ?W2;                     // MOV alphaPtr_HI, AlphaRef_HI
      MOV         R140, c[0][0x1d4] ?W2;                     // MOV mode, Mode
      S2R         R132, SR_Tid.X &wr=4 ?W2;                  // S2R tid, SR_Tid.X
      S2R         R133, SR_CTAid.X &wr=4 ?W2;                // S2R ctaRow, SR_CTAid.X
      S2R         R134, SR_CTAid.Y &wr=4 ?W2;                // S2R ctaCol, SR_CTAid.Y
      S2R         R135, SR_CTAid.Z &wr=4 ?W2;                // S2R batchIdx, SR_CTAid.Z
(P0)  LDG.E.EN.LTC128B.64.CONSTANT R144, [R146] &rd=3 &wr=0 ?W2; // @P0 LDG.E.EN.LTC128B.64.CONSTANT alpha, [alphaPtr]
      DSETP.NE  P1, R160, RZ &wr=4 ?W2;                      // DSETP.NE P1, beta, RZ
(!P0) MOV       R144,    c[0][0x1e8] ?W2;                    // @!P0 MOV alpha, AlphaVal
(!P0) MOV       R145, c[0][0x1ec] ?W2;                       // @!P0 MOV alpha_HI, AlphaVal_HI
      BAR.SYNC.DEFER_BLOCKING 0 &req=3 ?W6;                  // BAR.SYNC.DEFER_BLOCKING 0
      MOV  R147, RZ ?W2;                                     // MOV row_HI, RZ
      LOP.AND  R150, R140, 0xf00 ?W2;                        // LOP.AND log2GroupCols, mode, 0xf00
      LOP.AND  P5, RZ, R140, 0x1000 ?W2;                     // LOP.AND P5, RZ, mode, 0x1000
      SHR.U32  R150, R150, 8 ?W4;                            // SHR.U32 log2GroupCols, log2GroupCols, 8
      BMSK     R151, R150, 1 ?W2;                            // BMSK groupCols, log2GroupCols, 1
      BMSK     R152, RZ, R150 ?W2;                           // BMSK mask, RZ, log2GroupCols
      PSETP.AND P4, !PT, !PT ?W2;                            // PSETP.AND P4, !PT, !PT
ampere_dgemm_128x64_mods_nt_epilog_cta_swizzle_loop:
      LOP.OR   R153, R134, R152 &req=4 ?W2;                  // LOP.OR testCol, ctaCol, mask
      ISETP.EQ P3, R152, 3 ?W2;                              // ISETP.EQ P3, mask, 3
      ISETP.LT P2, R153, c[0x0][0x010] ?W2;                  // ISETP.LT P2, testCol, GridDimY
      LOP.AND  R154,  R134.reuse,  R152.reuse ?W2;           // LOP.AND colMod, ctaCol.reuse, mask.reuse
      LOP.AND  R157,  R134,        R151 ?W2;                 // LOP.AND colBit, ctaCol, groupCols
      ISETP.EQ.AND P3, PT, R153, c[0x0][0x010], P3 ?W2;      // ISETP.EQ.AND P3, PT, testCol, GridDimY, P3
      LOP.AND  R155, R134.reuse, ~R152 ?W1;                  // LOP.AND colBase, ctaCol.reuse, ~mask
      IMAD.U32 R156, R154, c[0x0][0x00c], R133 &req=4 ?W1;   // IMAD.U32 linear, colMod, GridDimX, ctaRow
(P5)  ISETP.EQ.XOR P4, PT, R157, R151, P4 ?W2;               // @P5 ISETP.EQ.XOR P4, PT, colBit, groupCols, P4
      SHR.U32 R151, R151, 1 ?W2;                             // SHR.U32 groupCols, groupCols, 1
(P2)  BRA ampere_dgemm_128x64_mods_nt_epilog_cta_swizzle_group_col_pow2 ?W5EG ?BARRIER_EXEMPT; // @P2 BRA ampere_dgemm_128x64_mods_nt_epilog_cta_swizzle_group_col_pow2
(!P3) SHR.U32  R152, R152, 1 ?W2;                            // @!P3 SHR.U32 mask, mask, 1
(!P3) IADD     R150, R150, -1 ?W2;                           // @!P3 IADD log2GroupCols, log2GroupCols, -1
(!P3) BRA ampere_dgemm_128x64_mods_nt_epilog_cta_swizzle_loop ?W5EG ?BARRIER_EXEMPT; // @!P3 BRA ampere_dgemm_128x64_mods_nt_epilog_cta_swizzle_loop
      IMUL.WIDE.U32 R158, R156, 0x55555556 ?W1;              // IMUL.WIDE.U32 swizRow64, linear, 0x55555556
      IADD  R134, R155, R156 ?W5;                            // IADD ctaCol, colBase, linear
      IMAD.U32 R134, R159, -3, R134 ?W1;                     // IMAD.U32 ctaCol, swizRow, -3, ctaCol
(!P4) MOV R133, R159 ?W2;                                    // @!P4 MOV ctaRow, swizRow
(P4)  IADD.X R133, ~R159, c[0x0][0x00c], !PT ?W2;            // @P4 IADD.X ctaRow, ~swizRow, GridDimX, !PT
      BRA ampere_dgemm_128x64_mods_nt_epilog_cta_swizzle_done ?W5EG ?BARRIER_EXEMPT; // BRA ampere_dgemm_128x64_mods_nt_epilog_cta_swizzle_done
ampere_dgemm_128x64_mods_nt_epilog_cta_swizzle_group_col_pow2:
      SHR.U32 R133, R156, R150 ?W2;                          // SHR.U32 ctaRow, linear, log2GroupCols
      LOP3.LUT  R134, R155, R156, R152, 0xf8 ?W2;            // LOP3.LUT ctaCol, colBase, linear, mask, B_AND_C__OR_A ?WiT
(P4)  IADD.X R133, ~R133, c[0x0][0x00c], !PT ?W4;            // @P4 IADD.X ctaRow, ~ctaRow, GridDimX, !PT
ampere_dgemm_128x64_mods_nt_epilog_cta_swizzle_done:
      SHL         R154, R132.reuse, 6 &req=4 ?W2;            // SHL scratch3, tid.reuse, 6
      SHL         R153, R132.reuse, 9 ?W2;                   // SHL scratch2, tid.reuse, 9
      SHL         R152, R132.reuse, 3 ?W2;                   // SHL scratch1, tid.reuse, 3
      LOP.AND     R130, R154, 0x1c00 ?W4;                    // LOP.AND stsWritePtr, scratch3, 0x1c00
      LOP3.LUT    R130, R130, 0x200, R153, 0xf8 ?W4;         // LOP3.LUT stsWritePtr, stsWritePtr, 0x200, scratch2, 0xf8
      LOP3.LUT    R130, R130, 0x70, R152, 0xf8 ?W2;          // LOP3.LUT stsWritePtr, stsWritePtr, 0x70, scratch1, 0xf8
      SHL        R131, R132.reuse, 3 ?W4;                    // SHL ldsReadPtr, tid.reuse, 3
      LOP.AND    R131, R131, 0x300 ?W4;                      // LOP.AND ldsReadPtr, ldsReadPtr, 0x300
      LOP3.LUT   R131, R131, 0x1f, R132, 0xf8 ?W4;           // LOP3.LUT ldsReadPtr, ldsReadPtr, 0x1f, tid, 0xf8
      SHL        R131, R131, 3 ?W2;                          // SHL ldsReadPtr, ldsReadPtr, 3
      LOP.AND  R150, R132, 0x1f ?W1;                         // LOP.AND intraWarpRow, tid, 0x1f
      MOV32I   R151, 0 ?W1;                                  // MOV32I intraWarpCol, 0
      SHR.U32 R153, R132.reuse, 5 ?W4;                       // SHR.U32 warpCol, tid.reuse, 5
      LOP.AND R153, R153, 0x1 ?W2;                           // LOP.AND warpCol, warpCol, 0x1
      LEA  R149, R134, R151, 6 ?W2;                          // LEA col, ctaCol, intraWarpCol, 6
      SHR  R152, R132.reuse, 6 ?W2;                          // SHR warpRow, tid.reuse, 6
      MOV  R142, c[0][0x1b8] ?W2;                            // MOV strideC, StrideC
      LEA  R146, R133,  R150, 7 ?W2;                         // LEA row, ctaRow, intraWarpRow, 7
      LEA  R149, R153, R149,          5 ?W2;                 // LEA col, warpCol, col, 5
      LEA  R146, R152, R146,          6 ?W5;                 // LEA row, warpRow, row, 6
      LOP.AND P2, RZ, R140, 8 ?W2;                           // LOP.AND P2, RZ, mode, 8
      IMAD.WIDE.U32 R150, R149, c[0][0x1b8], R146 ?W5;       // IMAD.WIDE.U32 readPtrMul, col, StrideC, row
      LOP.AND P6, R154, R140, 3 ?W13EG;                      // LOP.AND P6, scratch1, mode, 3
(!P6) BRA.U   ampere_dgemm_128x64_mods_nt_END_BATCH_PTR_CALC1_EPILOG ?W5EG ?BARRIER_EXEMPT; // @!P6 BRA.U ampere_dgemm_128x64_mods_nt_END_BATCH_PTR_CALC1_EPILOG
      ISETP.EQ P3,    R154, 2 ?W13EG;                        // ISETP.EQ P3, scratch1, 2
(P3)  LEA.LO   R138, P4, R135.reuse, c[0][0x170], 3 &req=4 ?W4; // @P3 LEA.LO writePtr, P4, batchIdx.reuse, BaseC, 3
(P3)  LEA.HI.X R139, R135, c[0][0x174], RZ, 3, P4 ?W8;       // @P3 LEA.HI.X writePtr_HI, batchIdx, BaseC_HI, RZ, 3, P4
(P3)  LDG.E.EN.LTC128B.64.CONSTANT R152, [R138 + 0x00] &wr=2 ?W2 ?BARRIER_EXEMPT; // @P3 LDG.E.EN.LTC128B.64.CONSTANT batchPtrMul, [writePtr + 0x00]
(P3)  LEA.LO   R138, P4, R150.reuse, R152, 3 &req=2 ?W4;     // @P3 LEA.LO writePtr, P4, readPtrMul.reuse, batchPtrMul, 3
(P3)  LEA.HI.X R139, R150, R153, R151, 3, P4 ?W2;            // @P3 LEA.HI.X writePtr_HI, readPtrMul, batchPtrMul_HI, readPtrMul_HI, 3, P4
(!P3) LEA.LO   R138, P4, R150.reuse, c[0][0x170], 3 ?W4;     // @!P3 LEA.LO writePtr, P4, readPtrMul.reuse, BaseC, 3
(!P3) LEA.HI.X R139, R150, c[0][0x174], R151, 3, P4 ?W2;     // @!P3 LEA.HI.X writePtr_HI, readPtrMul, BaseC_HI, readPtrMul_HI, 3, P4
(!P3) IMAD.WIDE.U32 R152,    R135, c[0][0x1a8],    RZ &req=4 ?W4; // @!P3 IMAD.WIDE.U32 batchPtrMul, batchIdx, MatrixStrideC, RZ
(!P3) IMAD.LO.U32   R153, R135, c[0][0x1ac], R153 ?W2;       // @!P3 IMAD.LO.U32 batchPtrMul_HI, batchIdx, MatrixStrideC_HI, batchPtrMul_HI
(!P3) LEA.LO   R138, P4, R152.reuse, R138, 3 ?W4;            // @!P3 LEA.LO writePtr, P4, batchPtrMul.reuse, writePtr, 3
(!P3) LEA.HI.X R139, R152, R139, R151, 3, P4 ?W2;            // @!P3 LEA.HI.X writePtr_HI, batchPtrMul, writePtr_HI, readPtrMul_HI, 3, P4
      BRA.U ampere_dgemm_128x64_mods_nt_END_BATCH_PTR_SYNC1_EPILOG ?W5EG ?BARRIER_EXEMPT; // BRA.U ampere_dgemm_128x64_mods_nt_END_BATCH_PTR_SYNC1_EPILOG
ampere_dgemm_128x64_mods_nt_END_BATCH_PTR_CALC1_EPILOG:
      LEA.LO   R138, P4, R150.reuse, c[0][0x170], 3 ?W4;     // LEA.LO writePtr, P4, readPtrMul.reuse, BaseC, 3
      LEA.HI.X R139, R150, c[0][0x174], R151, 3, P4 ?W8;     // LEA.HI.X writePtr_HI, readPtrMul, BaseC_HI, readPtrMul_HI, 3, P4
ampere_dgemm_128x64_mods_nt_END_BATCH_PTR_SYNC1_EPILOG:
      LOP.AND P3, RZ, R140, 32 ?W13EG;                       // LOP.AND P3, RZ, mode, 32
(P3)  IMAD.WIDE.U32 R152,    R135, c[0][0x1a8],    RZ &req=4 ?W4; // @P3 IMAD.WIDE.U32 batchPtrMul, batchIdx, MatrixStrideC, RZ
(P3)  IMAD.LO.U32   R153, R135, c[0][0x1ac], R153 ?W2;       // @P3 IMAD.LO.U32 batchPtrMul_HI, batchIdx, MatrixStrideC_HI, batchPtrMul_HI
(P3)  LEA.LO   R138, P4, R152.reuse, R138, 3 ?W4;            // @P3 LEA.LO writePtr, P4, batchPtrMul.reuse, writePtr, 3
(P3)  LEA.HI.X R139, R152, R139, R151, 3, P4 ?W2;            // @P3 LEA.HI.X writePtr_HI, batchPtrMul, writePtr_HI, readPtrMul_HI, 3, P4
      ISETP.NE.AND  P5, PT, R135, RZ, P2 ?W2;                // ISETP.NE.AND P5, PT, batchIdx, RZ, P2
      MOV  R136,    c[0][0x170] ?W2;                         // MOV readPtr, BaseC
      MOV  R137, c[0][0x174] ?W2;                            // MOV readPtr_HI, BaseC_HI
      ISETP.EQ      P4, R136, c[0][0x200] ?W13EG;            // ISETP.EQ P4, readPtr, BaseD
      ISETP.EQ.AND  P4, PT, R137, c[0][0x204], P4 ?W13EG;    // ISETP.EQ.AND P4, PT, readPtr_HI, BaseD_HI, P4
      PSETP.OR      P4, P4, P5 ?W13EG;                       // PSETP.OR P4, P4, P5
(!P4) BRA.U ampere_dgemm_128x64_mods_nt_BASED_NEQ_BASEC_CALC_EPILOG ?W5EG ?BARRIER_EXEMPT; // @!P4 BRA.U ampere_dgemm_128x64_mods_nt_BASED_NEQ_BASEC_CALC_EPILOG
      MOV       R136, R138 &req=3 ?W2;                       // MOV readPtr, writePtr
      MOV       R137, R139 ?W2;                              // MOV readPtr_HI, writePtr_HI
      BRA.U ampere_dgemm_128x64_mods_nt_END_BASEC_CALC_EPILOG ?W5EG ?BARRIER_EXEMPT; // BRA.U ampere_dgemm_128x64_mods_nt_END_BASEC_CALC_EPILOG
ampere_dgemm_128x64_mods_nt_BASED_NEQ_BASEC_CALC_EPILOG:
      LOP.AND P6, R154, R140, 3 ?W13EG;                      // LOP.AND P6, scratch1, mode, 3
(!P6) BRA.U   ampere_dgemm_128x64_mods_nt_END_BATCH_PTR_CALC0_EPILOG ?W5EG ?BARRIER_EXEMPT; // @!P6 BRA.U ampere_dgemm_128x64_mods_nt_END_BATCH_PTR_CALC0_EPILOG
      ISETP.EQ P3,    R154, 2 ?W13EG;                        // ISETP.EQ P3, scratch1, 2
(P3)  LEA.LO   R136, P4, R135.reuse, c[0][0x200], 3 &req=4 ?W4; // @P3 LEA.LO readPtr, P4, batchIdx.reuse, BaseD, 3
(P3)  LEA.HI.X R137, R135, c[0][0x204], RZ, 3, P4 ?W8;       // @P3 LEA.HI.X readPtr_HI, batchIdx, BaseD_HI, RZ, 3, P4
(P3)  LDG.E.EN.LTC128B.64.CONSTANT R152, [R136 + 0x00] &wr=2 ?W2 ?BARRIER_EXEMPT; // @P3 LDG.E.EN.LTC128B.64.CONSTANT batchPtrMul, [readPtr + 0x00]
(P3)  LEA.LO   R136, P4, R150.reuse, R152, 3 &req=2 ?W4;     // @P3 LEA.LO readPtr, P4, readPtrMul.reuse, batchPtrMul, 3
(P3)  LEA.HI.X R137, R150, R153, R151, 3, P4 ?W2;            // @P3 LEA.HI.X readPtr_HI, readPtrMul, batchPtrMul_HI, readPtrMul_HI, 3, P4
(!P3) LEA.LO   R136, P4, R150.reuse, c[0][0x200], 3 ?W4;     // @!P3 LEA.LO readPtr, P4, readPtrMul.reuse, BaseD, 3
(!P3) LEA.HI.X R137, R150, c[0][0x204], R151, 3, P4 ?W2;     // @!P3 LEA.HI.X readPtr_HI, readPtrMul, BaseD_HI, readPtrMul_HI, 3, P4
(!P3) IMAD.WIDE.U32 R152,    R135, c[0][0x1a8],    RZ &req=4 ?W4; // @!P3 IMAD.WIDE.U32 batchPtrMul, batchIdx, MatrixStrideC, RZ
(!P3) IMAD.LO.U32   R153, R135, c[0][0x1ac], R153 ?W2;       // @!P3 IMAD.LO.U32 batchPtrMul_HI, batchIdx, MatrixStrideC_HI, batchPtrMul_HI
(!P3) LEA.LO   R136, P4, R152.reuse, R136, 3 ?W4;            // @!P3 LEA.LO readPtr, P4, batchPtrMul.reuse, readPtr, 3
(!P3) LEA.HI.X R137, R152, R137, R151, 3, P4 ?W2;            // @!P3 LEA.HI.X readPtr_HI, batchPtrMul, readPtr_HI, readPtrMul_HI, 3, P4
      BRA.U ampere_dgemm_128x64_mods_nt_END_BATCH_PTR_SYNC0_EPILOG ?W5EG ?BARRIER_EXEMPT; // BRA.U ampere_dgemm_128x64_mods_nt_END_BATCH_PTR_SYNC0_EPILOG
ampere_dgemm_128x64_mods_nt_END_BATCH_PTR_CALC0_EPILOG:
      LEA.LO   R136, P4, R150.reuse, c[0][0x200], 3 ?W4;     // LEA.LO readPtr, P4, readPtrMul.reuse, BaseD, 3
      LEA.HI.X R137, R150, c[0][0x204], R151, 3, P4 ?W8;     // LEA.HI.X readPtr_HI, readPtrMul, BaseD_HI, readPtrMul_HI, 3, P4
ampere_dgemm_128x64_mods_nt_END_BATCH_PTR_SYNC0_EPILOG:
      LOP.AND P3, RZ, R140, 32 ?W13EG;                       // LOP.AND P3, RZ, mode, 32
(P3)  IMAD.WIDE.U32 R152,    R135, c[0][0x1a8],    RZ &req=4 ?W4; // @P3 IMAD.WIDE.U32 batchPtrMul, batchIdx, MatrixStrideC, RZ
(P3)  IMAD.LO.U32   R153, R135, c[0][0x1ac], R153 ?W2;       // @P3 IMAD.LO.U32 batchPtrMul_HI, batchIdx, MatrixStrideC_HI, batchPtrMul_HI
(P3)  LEA.LO   R136, P4, R152.reuse, R136, 3 ?W4;            // @P3 LEA.LO readPtr, P4, batchPtrMul.reuse, readPtr, 3
(P3)  LEA.HI.X R137, R152, R137, R151, 3, P4 ?W2;            // @P3 LEA.HI.X readPtr_HI, batchPtrMul, readPtr_HI, readPtrMul_HI, 3, P4
ampere_dgemm_128x64_mods_nt_END_BASEC_CALC_EPILOG:
(P5)  MOV32I        R160, 0x00000000 &req=2 ?W2;             // @P5 MOV32I beta, 0x00000000
(P5)  MOV32I        R161, 0x3ff00000 ?W2;                    // @P5 MOV32I beta_HI, 0x3ff00000
(P5)  PSETP.AND P1, PT, PT ?W2;                              // @P5 PSETP.AND P1, PT, PT
      IMAD.WIDE.U32 R150, R142, 5, RZ ?W5;                   // IMAD.WIDE.U32 backStride, strideC, 5, RZ
      IADD  R143, R146, -c[0][0x1bc] ?W2;                    // IADD cRowMinusM, row, -CountM
      IADD  R148, R149, -c[0][0x1c0] ?W11;                   // IADD cColMinusN, col, -CountN
(!P2) BRA  ampere_dgemm_128x64_mods_nt_EPILOG_SPIN_WAIT_END ?W5EG ?BARRIER_EXEMPT; // @!P2 BRA ampere_dgemm_128x64_mods_nt_EPILOG_SPIN_WAIT_END
      IMAD.LO.U32  R189, R134, c[0x0][0x00c], R133 ?W5;      // IMAD.LO.U32 spinLockOffset, ctaCol, GridDimX, ctaRow
      LEA.LO   R170, P2, R189.reuse, c[0][0x1c8], 2 &req=3 ?W4; // LEA.LO spinLockPtr, predCarry, spinLockOffset.reuse, Sync, 2
      LEA.HI.X R171, R189, c[0][0x1cc], RZ, 2, P2 ?W2;       // LEA.HI.X spinLockPtr_HI, spinLockOffset, Sync_HI, RZ, 2, predCarry
      MOV R188, RZ ?W4;                                      // MOV spinLock, RZ
ampere_dgemm_128x64_mods_nt_EPILOG_SPIN_WAIT:
      ISETP.NE    P2, R188, R135 &req=2 ?W13EG;              // ISETP.NE P2, spinLock, batchIdx
(P2)  LDG.E.EL.LTC128B.32.STRONG.GPU R188, [R170] &wr=2 ?W2 ?BARRIER_EXEMPT; // @P2 LDG.E.EL.LTC128B.32.STRONG.GPU spinLock, [spinLockPtr]
(P2)  BRA.U ampere_dgemm_128x64_mods_nt_EPILOG_SPIN_WAIT ?W5EG ?BARRIER_EXEMPT; // @P2 BRA.U ampere_dgemm_128x64_mods_nt_EPILOG_SPIN_WAIT
ampere_dgemm_128x64_mods_nt_EPILOG_SPIN_WAIT_END:
      ISETP.LT.AND  P3, PT, R143.reuse, 0, PT ?W2;           // ISETP.LT.AND P3, PT, cRowMinusM.reuse, 0, PT
      ISETP.LT.AND  P4, PT, R143.reuse, -32, PT ?W2;         // ISETP.LT.AND P4, PT, cRowMinusM.reuse, -32, PT
      ISETP.LT.AND  P5, PT, R143.reuse, 0, PT ?W2;           // ISETP.LT.AND P5, PT, cRowMinusM.reuse, 0, PT
      ISETP.LT.AND  P6, PT, R143.reuse, -32, PT ?W2;         // ISETP.LT.AND P6, PT, cRowMinusM.reuse, -32, PT
      ISETP.LT.AND  P3, PT, R148.reuse, 0, P3 ?W2;           // ISETP.LT.AND P3, PT, cColMinusN.reuse, 0, P3
      ISETP.LT.AND  P4, PT, R148.reuse, 0, P4 ?W2;           // ISETP.LT.AND P4, PT, cColMinusN.reuse, 0, P4
      ISETP.LT.AND  P5, PT, R148.reuse, -2, P5 ?W2;          // ISETP.LT.AND P5, PT, cColMinusN.reuse, -2, P5
      ISETP.LT.AND  P6, PT, R148      , -2, P6 ?W4;          // ISETP.LT.AND P6, PT, cColMinusN , -2, P6
      P2R.B0 R141, PR, RZ, 0x78 ?W4;                         // P2R.B0 readPreds, PR, RZ, 0x78
      ISETP.LT.AND  P3, PT, R143.reuse, 0, PT ?W2;           // ISETP.LT.AND P3, PT, cRowMinusM.reuse, 0, PT
      ISETP.LT.AND  P4, PT, R143.reuse, -32, PT ?W2;         // ISETP.LT.AND P4, PT, cRowMinusM.reuse, -32, PT
      ISETP.LT.AND  P5, PT, R143.reuse, 0, PT ?W2;           // ISETP.LT.AND P5, PT, cRowMinusM.reuse, 0, PT
      ISETP.LT.AND  P6, PT, R143.reuse, -32, PT ?W2;         // ISETP.LT.AND P6, PT, cRowMinusM.reuse, -32, PT
      ISETP.LT.AND  P3, PT, R148.reuse, -4, P3 ?W2;          // ISETP.LT.AND P3, PT, cColMinusN.reuse, -4, P3
      ISETP.LT.AND  P4, PT, R148.reuse, -4, P4 ?W2;          // ISETP.LT.AND P4, PT, cColMinusN.reuse, -4, P4
      ISETP.LT.AND  P5, PT, R148.reuse, -6, P5 ?W2;          // ISETP.LT.AND P5, PT, cColMinusN.reuse, -6, P5
      ISETP.LT.AND  P6, PT, R148      , -6, P6 ?W4;          // ISETP.LT.AND P6, PT, cColMinusN , -6, P6
      P2R.B1 R141, PR, R141, 0x78 ?W4;                       // P2R.B1 readPreds, PR, readPreds, 0x78
(!P1) R2P PR, RZ.B0, 0x78 ?W2;                               // @!P1 R2P PR, RZ.B0, 0x78
(P1)  R2P PR, R141.B0, 0x78 ?W13EG;                          // @P1 R2P PR, readPreds.B0, 0x78
(P3)  LDG.E.EN.LTC128B.64.STRONG.GPU  R152, [R136 + 0x0000] &wr=2 ?W2 ?BARRIER_EXEMPT; // @P3 LDG.E.EN.LTC128B.64.STRONG.GPU fetchRegC0, [readPtr + 0x0000]
(!P3) MOV R152, RZ ?W2;                                      // @!P3 MOV fetchRegC0, RZ
(P4)  LDG.E.EN.LTC128B.64.STRONG.GPU  R154, [R136 + 0x0100] &rd=3 &wr=2 ?W2 ?BARRIER_EXEMPT; // @P4 LDG.E.EN.LTC128B.64.STRONG.GPU fetchRegC1, [readPtr + 0x0100]
(!P4) MOV R154, RZ ?W2;                                      // @!P4 MOV fetchRegC1, RZ
      LEA.LO   R136, P2, R142.reuse, R136, 4 &req=3 ?W4;     // LEA.LO readPtr, predCarry, strideC.reuse, readPtr, 4
      LEA.HI.X R137, R142, R137, RZ, 4, P2 ?W8;              // LEA.HI.X readPtr_HI, strideC, readPtr_HI, strideC_HI, 4, predCarry
(P5)  LDG.E.EN.LTC128B.64.STRONG.GPU  R156, [R136 + 0x0000] &wr=2 ?W2 ?BARRIER_EXEMPT; // @P5 LDG.E.EN.LTC128B.64.STRONG.GPU fetchRegC2, [readPtr + 0x0000]
(!P5) MOV R156, RZ ?W2;                                      // @!P5 MOV fetchRegC2, RZ
(P6)  LDG.E.EN.LTC128B.64.STRONG.GPU  R158, [R136 + 0x0100] &rd=3 &wr=2 ?W2 ?BARRIER_EXEMPT; // @P6 LDG.E.EN.LTC128B.64.STRONG.GPU fetchRegC3, [readPtr + 0x0100]
(!P6) MOV R158, RZ ?W2;                                      // @!P6 MOV fetchRegC3, RZ
      LEA.LO   R136, P2, R142.reuse, R136, 4 &req=3 ?W4;     // LEA.LO readPtr, predCarry, strideC.reuse, readPtr, 4
      LEA.HI.X R137, R142, R137, RZ, 4, P2 ?W8;              // LEA.HI.X readPtr_HI, strideC, readPtr_HI, strideC_HI, 4, predCarry
(P1)  R2P PR, R141.B1, 0x78 ?W13EG;                          // @P1 R2P PR, readPreds.B1, 0x78
(P3)  LDG.E.EN.LTC128B.64.STRONG.GPU  R162, [R136 + 0x0000] &wr=2 ?W2 ?BARRIER_EXEMPT; // @P3 LDG.E.EN.LTC128B.64.STRONG.GPU fetchRegC4, [readPtr + 0x0000]
(!P3) MOV R162, RZ ?W2;                                      // @!P3 MOV fetchRegC4, RZ
(P4)  LDG.E.EN.LTC128B.64.STRONG.GPU  R164, [R136 + 0x0100] &rd=3 &wr=2 ?W2 ?BARRIER_EXEMPT; // @P4 LDG.E.EN.LTC128B.64.STRONG.GPU fetchRegC5, [readPtr + 0x0100]
(!P4) MOV R164, RZ ?W2;                                      // @!P4 MOV fetchRegC5, RZ
      LEA.LO   R136, P2, R142.reuse, R136, 4 &req=3 ?W4;     // LEA.LO readPtr, predCarry, strideC.reuse, readPtr, 4
      LEA.HI.X R137, R142, R137, RZ, 4, P2 ?W8;              // LEA.HI.X readPtr_HI, strideC, readPtr_HI, strideC_HI, 4, predCarry
(P5)  LDG.E.EN.LTC128B.64.STRONG.GPU  R166, [R136 + 0x0000] &wr=2 ?W2 ?BARRIER_EXEMPT; // @P5 LDG.E.EN.LTC128B.64.STRONG.GPU fetchRegC6, [readPtr + 0x0000]
(!P5) MOV R166, RZ ?W2;                                      // @!P5 MOV fetchRegC6, RZ
(P6)  LDG.E.EN.LTC128B.64.STRONG.GPU  R168, [R136 + 0x0100] &rd=3 &wr=2 ?W2 ?BARRIER_EXEMPT; // @P6 LDG.E.EN.LTC128B.64.STRONG.GPU fetchRegC7, [readPtr + 0x0100]
(!P6) MOV R168, RZ ?W2;                                      // @!P6 MOV fetchRegC7, RZ
      LEA.LO   R136, P2, -R150.reuse, R136, 3 &req=3 ?W4;    // LEA.LO readPtr, predCarry, -backStride.reuse, readPtr, 3
      LEA.HI.X R137, ~R150, R137, R151, 3, P2 ?W2;           // LEA.HI.X readPtr_HI, ~backStride, readPtr_HI, backStride_HI, 3, predCarry
      PSETP.AND  P0, P1, P1 &req=4 ?W1;                      // PSETP.AND P0, P1, P1
      DMUL  R172, R144.reuse, R0 &req=0 ?W4;                 // DMUL storeReg0, alpha.reuse, C_r0_c0
      DMUL  R174, R144.reuse, R16 ?W4;                       // DMUL storeReg1, alpha.reuse, C_r1_c0
      DMUL  R176, R144.reuse, R32 ?W4;                       // DMUL storeReg2, alpha.reuse, C_r2_c0
      DMUL  R178, R144.reuse, R48 ?W4;                       // DMUL storeReg3, alpha.reuse, C_r3_c0
      DMUL  R180, R144.reuse, R64 ?W4;                       // DMUL storeReg4, alpha.reuse, C_r4_c0
      DMUL  R182, R144.reuse, R80 ?W4;                       // DMUL storeReg5, alpha.reuse, C_r5_c0
      DMUL  R184, R144.reuse, R96 ?W4;                       // DMUL storeReg6, alpha.reuse, C_r6_c0
      DMUL  R186, R144, R112 &wr=4 ?W4;                      // DMUL storeReg7, alpha, C_r7_c0
      IADD  R148,   R148,    1 ?W2;                          // IADD cColMinusN, cColMinusN, 1
      LEPC R128 &req=3 ?W2;                                  // LEPC pc
// Virtual ?REQ_BAR found on next instruction, stop putting ?BARRIER_EXEMPT on decoupled instructions
      CALL.REL  ampere_dgemm_128x64_mods_nt_STORE_COL ?W5;   // CALL.REL ampere_dgemm_128x64_mods_nt_STORE_COL
      LEA.LO   R138, P2, -R150.reuse, R138, 3 &req=3 ?W4;    // LEA.LO writePtr, predCarry, -backStride.reuse, writePtr, 3
      LEA.HI.X R139, ~R150, R139, R151, 3, P2 ?W2;           // LEA.HI.X writePtr_HI, ~backStride, writePtr_HI, backStride_HI, 3, predCarry
      LEA.LO   R136, P2, R142.reuse, R136, 3 &req=3 ?W4;     // LEA.LO readPtr, predCarry, strideC.reuse, readPtr, 3
      LEA.HI.X R137, R142, R137, RZ, 3, P2 ?W2;              // LEA.HI.X readPtr_HI, strideC, readPtr_HI, strideC_HI, 3, predCarry
      DMUL  R172, R144.reuse, R2 ?W4;                        // DMUL storeReg0, alpha.reuse, C_r0_c1
      DMUL  R174, R144.reuse, R18 ?W4;                       // DMUL storeReg1, alpha.reuse, C_r1_c1
      DMUL  R176, R144.reuse, R34 ?W4;                       // DMUL storeReg2, alpha.reuse, C_r2_c1
      DMUL  R178, R144.reuse, R50 ?W4;                       // DMUL storeReg3, alpha.reuse, C_r3_c1
      DMUL  R180, R144.reuse, R66 ?W4;                       // DMUL storeReg4, alpha.reuse, C_r4_c1
      DMUL  R182, R144.reuse, R82 ?W4;                       // DMUL storeReg5, alpha.reuse, C_r5_c1
      DMUL  R184, R144.reuse, R98 ?W4;                       // DMUL storeReg6, alpha.reuse, C_r6_c1
      DMUL  R186, R144, R114 &wr=4 ?W4;                      // DMUL storeReg7, alpha, C_r7_c1
      IADD  R148,   R148,    7 ?W2;                          // IADD cColMinusN, cColMinusN, 7
      LEPC R128 &req=3 ?W2;                                  // LEPC pc
      CALL.REL  ampere_dgemm_128x64_mods_nt_STORE_COL ?W5;   // CALL.REL ampere_dgemm_128x64_mods_nt_STORE_COL
      LEA.LO   R138, P2, R142.reuse, R138, 3 &req=3 ?W4;     // LEA.LO writePtr, predCarry, strideC.reuse, writePtr, 3
      LEA.HI.X R139, R142, R139, RZ, 3, P2 ?W2;              // LEA.HI.X writePtr_HI, strideC, writePtr_HI, strideC_HI, 3, predCarry
      LEA.LO   R136, P2, -R150.reuse, R136, 3 &req=3 ?W4;    // LEA.LO readPtr, predCarry, -backStride.reuse, readPtr, 3
      LEA.HI.X R137, ~R150, R137, R151, 3, P2 ?W2;           // LEA.HI.X readPtr_HI, ~backStride, readPtr_HI, backStride_HI, 3, predCarry
      DMUL  R172, R144.reuse, R4 ?W4;                        // DMUL storeReg0, alpha.reuse, C_r0_c2
      DMUL  R174, R144.reuse, R20 ?W4;                       // DMUL storeReg1, alpha.reuse, C_r1_c2
      DMUL  R176, R144.reuse, R36 ?W4;                       // DMUL storeReg2, alpha.reuse, C_r2_c2
      DMUL  R178, R144.reuse, R52 ?W4;                       // DMUL storeReg3, alpha.reuse, C_r3_c2
      DMUL  R180, R144.reuse, R68 ?W4;                       // DMUL storeReg4, alpha.reuse, C_r4_c2
      DMUL  R182, R144.reuse, R84 ?W4;                       // DMUL storeReg5, alpha.reuse, C_r5_c2
      DMUL  R184, R144.reuse, R100 ?W4;                      // DMUL storeReg6, alpha.reuse, C_r6_c2
      DMUL  R186, R144, R116 &wr=4 ?W4;                      // DMUL storeReg7, alpha, C_r7_c2
      IADD  R148,   R148,    1 ?W2;                          // IADD cColMinusN, cColMinusN, 1
      LEPC R128 &req=3 ?W2;                                  // LEPC pc
      CALL.REL  ampere_dgemm_128x64_mods_nt_STORE_COL ?W5;   // CALL.REL ampere_dgemm_128x64_mods_nt_STORE_COL
      LEA.LO   R138, P2, -R150.reuse, R138, 3 &req=3 ?W4;    // LEA.LO writePtr, predCarry, -backStride.reuse, writePtr, 3
      LEA.HI.X R139, ~R150, R139, R151, 3, P2 ?W2;           // LEA.HI.X writePtr_HI, ~backStride, writePtr_HI, backStride_HI, 3, predCarry
      LEA.LO   R136, P2, R142.reuse, R136, 3 &req=3 ?W4;     // LEA.LO readPtr, predCarry, strideC.reuse, readPtr, 3
      LEA.HI.X R137, R142, R137, RZ, 3, P2 ?W2;              // LEA.HI.X readPtr_HI, strideC, readPtr_HI, strideC_HI, 3, predCarry
      DMUL  R172, R144.reuse, R6 ?W4;                        // DMUL storeReg0, alpha.reuse, C_r0_c3
      DMUL  R174, R144.reuse, R22 ?W4;                       // DMUL storeReg1, alpha.reuse, C_r1_c3
      DMUL  R176, R144.reuse, R38 ?W4;                       // DMUL storeReg2, alpha.reuse, C_r2_c3
      DMUL  R178, R144.reuse, R54 ?W4;                       // DMUL storeReg3, alpha.reuse, C_r3_c3
      DMUL  R180, R144.reuse, R70 ?W4;                       // DMUL storeReg4, alpha.reuse, C_r4_c3
      DMUL  R182, R144.reuse, R86 ?W4;                       // DMUL storeReg5, alpha.reuse, C_r5_c3
      DMUL  R184, R144.reuse, R102 ?W4;                      // DMUL storeReg6, alpha.reuse, C_r6_c3
      DMUL  R186, R144, R118 &wr=4 ?W4;                      // DMUL storeReg7, alpha, C_r7_c3
      IADD  R148,   R148,    7 ?W2;                          // IADD cColMinusN, cColMinusN, 7
      LEPC R128 &req=3 ?W2;                                  // LEPC pc
      CALL.REL  ampere_dgemm_128x64_mods_nt_STORE_COL ?W5;   // CALL.REL ampere_dgemm_128x64_mods_nt_STORE_COL
      LEA.LO   R138, P2, R142.reuse, R138, 3 &req=3 ?W4;     // LEA.LO writePtr, predCarry, strideC.reuse, writePtr, 3
      LEA.HI.X R139, R142, R139, RZ, 3, P2 ?W2;              // LEA.HI.X writePtr_HI, strideC, writePtr_HI, strideC_HI, 3, predCarry
      LEA.LO   R136, P2, -R150.reuse, R136, 3 &req=3 ?W4;    // LEA.LO readPtr, predCarry, -backStride.reuse, readPtr, 3
      LEA.HI.X R137, ~R150, R137, R151, 3, P2 ?W2;           // LEA.HI.X readPtr_HI, ~backStride, readPtr_HI, backStride_HI, 3, predCarry
      DMUL  R172, R144.reuse, R8 ?W4;                        // DMUL storeReg0, alpha.reuse, C_r0_c4
      DMUL  R174, R144.reuse, R24 ?W4;                       // DMUL storeReg1, alpha.reuse, C_r1_c4
      DMUL  R176, R144.reuse, R40 ?W4;                       // DMUL storeReg2, alpha.reuse, C_r2_c4
      DMUL  R178, R144.reuse, R56 ?W4;                       // DMUL storeReg3, alpha.reuse, C_r3_c4
      DMUL  R180, R144.reuse, R72 ?W4;                       // DMUL storeReg4, alpha.reuse, C_r4_c4
      DMUL  R182, R144.reuse, R88 ?W4;                       // DMUL storeReg5, alpha.reuse, C_r5_c4
      DMUL  R184, R144.reuse, R104 ?W4;                      // DMUL storeReg6, alpha.reuse, C_r6_c4
      DMUL  R186, R144, R120 &wr=4 ?W4;                      // DMUL storeReg7, alpha, C_r7_c4
      IADD  R148,   R148,    1 ?W2;                          // IADD cColMinusN, cColMinusN, 1
      LEPC R128 &req=3 ?W2;                                  // LEPC pc
      CALL.REL  ampere_dgemm_128x64_mods_nt_STORE_COL ?W5;   // CALL.REL ampere_dgemm_128x64_mods_nt_STORE_COL
      LEA.LO   R138, P2, -R150.reuse, R138, 3 &req=3 ?W4;    // LEA.LO writePtr, predCarry, -backStride.reuse, writePtr, 3
      LEA.HI.X R139, ~R150, R139, R151, 3, P2 ?W2;           // LEA.HI.X writePtr_HI, ~backStride, writePtr_HI, backStride_HI, 3, predCarry
      LEA.LO   R136, P2, R142.reuse, R136, 3 &req=3 ?W4;     // LEA.LO readPtr, predCarry, strideC.reuse, readPtr, 3
      LEA.HI.X R137, R142, R137, RZ, 3, P2 ?W2;              // LEA.HI.X readPtr_HI, strideC, readPtr_HI, strideC_HI, 3, predCarry
      DMUL  R172, R144.reuse, R10 ?W4;                       // DMUL storeReg0, alpha.reuse, C_r0_c5
      DMUL  R174, R144.reuse, R26 ?W4;                       // DMUL storeReg1, alpha.reuse, C_r1_c5
      DMUL  R176, R144.reuse, R42 ?W4;                       // DMUL storeReg2, alpha.reuse, C_r2_c5
      DMUL  R178, R144.reuse, R58 ?W4;                       // DMUL storeReg3, alpha.reuse, C_r3_c5
      DMUL  R180, R144.reuse, R74 ?W4;                       // DMUL storeReg4, alpha.reuse, C_r4_c5
      DMUL  R182, R144.reuse, R90 ?W4;                       // DMUL storeReg5, alpha.reuse, C_r5_c5
      DMUL  R184, R144.reuse, R106 ?W4;                      // DMUL storeReg6, alpha.reuse, C_r6_c5
      DMUL  R186, R144, R122 &wr=4 ?W4;                      // DMUL storeReg7, alpha, C_r7_c5
      IADD  R148,   R148,    7 ?W2;                          // IADD cColMinusN, cColMinusN, 7
      LEPC R128 &req=3 ?W2;                                  // LEPC pc
      CALL.REL  ampere_dgemm_128x64_mods_nt_STORE_COL ?W5;   // CALL.REL ampere_dgemm_128x64_mods_nt_STORE_COL
      LEA.LO   R138, P2, R142.reuse, R138, 3 &req=3 ?W4;     // LEA.LO writePtr, predCarry, strideC.reuse, writePtr, 3
      LEA.HI.X R139, R142, R139, RZ, 3, P2 ?W2;              // LEA.HI.X writePtr_HI, strideC, writePtr_HI, strideC_HI, 3, predCarry
      LEA.LO   R136, P2, -R150.reuse, R136, 3 &req=3 ?W4;    // LEA.LO readPtr, predCarry, -backStride.reuse, readPtr, 3
      LEA.HI.X R137, ~R150, R137, R151, 3, P2 ?W2;           // LEA.HI.X readPtr_HI, ~backStride, readPtr_HI, backStride_HI, 3, predCarry
      DMUL  R172, R144.reuse, R12 ?W4;                       // DMUL storeReg0, alpha.reuse, C_r0_c6
      DMUL  R174, R144.reuse, R28 ?W4;                       // DMUL storeReg1, alpha.reuse, C_r1_c6
      DMUL  R176, R144.reuse, R44 ?W4;                       // DMUL storeReg2, alpha.reuse, C_r2_c6
      DMUL  R178, R144.reuse, R60 ?W4;                       // DMUL storeReg3, alpha.reuse, C_r3_c6
      DMUL  R180, R144.reuse, R76 ?W4;                       // DMUL storeReg4, alpha.reuse, C_r4_c6
      DMUL  R182, R144.reuse, R92 ?W4;                       // DMUL storeReg5, alpha.reuse, C_r5_c6
      DMUL  R184, R144.reuse, R108 ?W4;                      // DMUL storeReg6, alpha.reuse, C_r6_c6
      DMUL  R186, R144, R124 &wr=4 ?W4;                      // DMUL storeReg7, alpha, C_r7_c6
      IADD  R148,   R148,    1 ?W2;                          // IADD cColMinusN, cColMinusN, 1
      LEPC R128 &req=3 ?W2;                                  // LEPC pc
      CALL.REL  ampere_dgemm_128x64_mods_nt_STORE_COL ?W5;   // CALL.REL ampere_dgemm_128x64_mods_nt_STORE_COL
      LEA.LO   R138, P2, -R150.reuse, R138, 3 &req=3 ?W4;    // LEA.LO writePtr, predCarry, -backStride.reuse, writePtr, 3
      LEA.HI.X R139, ~R150, R139, R151, 3, P2 ?W2;           // LEA.HI.X writePtr_HI, ~backStride, writePtr_HI, backStride_HI, 3, predCarry
      PSETP.AND P0, PT, !PT ?W1;                             // PSETP.AND P0, PT, !PT
      DMUL  R172, R144.reuse, R14 ?W4;                       // DMUL storeReg0, alpha.reuse, C_r0_c7
      DMUL  R174, R144.reuse, R30 ?W4;                       // DMUL storeReg1, alpha.reuse, C_r1_c7
      DMUL  R176, R144.reuse, R46 ?W4;                       // DMUL storeReg2, alpha.reuse, C_r2_c7
      DMUL  R178, R144.reuse, R62 ?W4;                       // DMUL storeReg3, alpha.reuse, C_r3_c7
      DMUL  R180, R144.reuse, R78 ?W4;                       // DMUL storeReg4, alpha.reuse, C_r4_c7
      DMUL  R182, R144.reuse, R94 ?W4;                       // DMUL storeReg5, alpha.reuse, C_r5_c7
      DMUL  R184, R144.reuse, R110 ?W4;                      // DMUL storeReg6, alpha.reuse, C_r6_c7
      DMUL  R186, R144, R126 &wr=4 ?W4;                      // DMUL storeReg7, alpha, C_r7_c7
      LEPC R128 &req=3 ?W2;                                  // LEPC pc
      CALL.REL  ampere_dgemm_128x64_mods_nt_STORE_COL ?W5;   // CALL.REL ampere_dgemm_128x64_mods_nt_STORE_COL
      LOP.AND P1, RZ, R140, 8 ?W4;                           // LOP.AND P1, RZ, mode, 8
      ISETP.EQ.AND P5, PT, R132, 0, P1 &req=4 ?W9;           // ISETP.EQ.AND P5, PT, tid, 0, P1
(P1)  IADD32I  R135, R135, 1 &req=4 ?W2;                     // @P1 IADD32I batchIdx, batchIdx, 1
(P1)  BAR.SYNC 0 ?W6;                                        // @P1 BAR.SYNC 0
(P5)  MEMBAR.GPU ?W6;                                        // @P5 MEMBAR.GPU
// Virtual ?REQ_BAR found on next instruction, stop putting ?BARRIER_EXEMPT on decoupled instructions
(P5)  STG.E.EF.32.STRONG.GPU [R170], R135 ?W2;               // @P5 STG.E.EF.32.STRONG.GPU [spinLockPtr], batchIdx
      EXIT ?W5;                                              // EXIT
ampere_dgemm_128x64_mods_nt_STORE_COL:
      STS.128   [R130 + 0x0000], R172 &req=4 ?W2;            // STS.128 [stsWritePtr + 0x0000], storeReg0
      STS.128   [R130 + 0x0080], R176 ?W2;                   // STS.128 [stsWritePtr + 0x0080], storeReg2
      STS.128   [R130 + 0x0100], R180 ?W2;                   // STS.128 [stsWritePtr + 0x0100], storeReg4
      STS.128   [R130 + 0x0180], R184 ?W2;                   // STS.128 [stsWritePtr + 0x0180], storeReg6
      BAR.SYNC.DEFER_BLOCKING 0 ?W6;                         // BAR.SYNC.DEFER_BLOCKING 0
      MOV R188, R141 ?W2;                                    // MOV writePreds, readPreds
      ISETP.LT.AND  P3, PT, R143.reuse, 0, PT ?W2;           // ISETP.LT.AND P3, PT, cRowMinusM.reuse, 0, PT
      ISETP.LT.AND  P4, PT, R143.reuse, -32, PT ?W2;         // ISETP.LT.AND P4, PT, cRowMinusM.reuse, -32, PT
      ISETP.LT.AND  P5, PT, R143.reuse, 0, PT ?W2;           // ISETP.LT.AND P5, PT, cRowMinusM.reuse, 0, PT
      ISETP.LT.AND  P6, PT, R143.reuse, -32, PT ?W2;         // ISETP.LT.AND P6, PT, cRowMinusM.reuse, -32, PT
      ISETP.LT.AND  P3, PT, R148.reuse, 0, P3 ?W2;           // ISETP.LT.AND P3, PT, cColMinusN.reuse, 0, P3
      ISETP.LT.AND  P4, PT, R148.reuse, 0, P4 ?W2;           // ISETP.LT.AND P4, PT, cColMinusN.reuse, 0, P4
      ISETP.LT.AND  P5, PT, R148.reuse, -2, P5 ?W2;          // ISETP.LT.AND P5, PT, cColMinusN.reuse, -2, P5
      ISETP.LT.AND  P6, PT, R148      , -2, P6 ?W4;          // ISETP.LT.AND P6, PT, cColMinusN , -2, P6
      P2R.B0 R141, PR, RZ, 0x78 ?W4;                         // P2R.B0 readPreds, PR, RZ, 0x78
      ISETP.LT.AND  P3, PT, R143.reuse, 0, PT ?W2;           // ISETP.LT.AND P3, PT, cRowMinusM.reuse, 0, PT
      ISETP.LT.AND  P4, PT, R143.reuse, -32, PT ?W2;         // ISETP.LT.AND P4, PT, cRowMinusM.reuse, -32, PT
      ISETP.LT.AND  P5, PT, R143.reuse, 0, PT ?W2;           // ISETP.LT.AND P5, PT, cRowMinusM.reuse, 0, PT
      ISETP.LT.AND  P6, PT, R143.reuse, -32, PT ?W2;         // ISETP.LT.AND P6, PT, cRowMinusM.reuse, -32, PT
      ISETP.LT.AND  P3, PT, R148.reuse, -4, P3 ?W2;          // ISETP.LT.AND P3, PT, cColMinusN.reuse, -4, P3
      ISETP.LT.AND  P4, PT, R148.reuse, -4, P4 ?W2;          // ISETP.LT.AND P4, PT, cColMinusN.reuse, -4, P4
      ISETP.LT.AND  P5, PT, R148.reuse, -6, P5 ?W2;          // ISETP.LT.AND P5, PT, cColMinusN.reuse, -6, P5
      ISETP.LT.AND  P6, PT, R148      , -6, P6 ?W4;          // ISETP.LT.AND P6, PT, cColMinusN , -6, P6
      P2R.B1 R141, PR, R141, 0x78 ?W4;                       // P2R.B1 readPreds, PR, readPreds, 0x78
// Virtual ?REQ_BAR found on next instruction, stop putting ?BARRIER_EXEMPT on decoupled instructions
      LDS.64   R172, [R131 + 0x0000] &wr=0 ?W1;              // LDS.64 storeReg0, [ldsReadPtr + 0x0000]
      LDS.64   R174, [R131 + 0x0100] &wr=0 ?W1;              // LDS.64 storeReg1, [ldsReadPtr + 0x0100]
      LDS.64   R176, [R131 + 0x0200] &wr=0 ?W1;              // LDS.64 storeReg2, [ldsReadPtr + 0x0200]
      LDS.64   R178, [R131 + 0x0300] &wr=0 ?W1;              // LDS.64 storeReg3, [ldsReadPtr + 0x0300]
      LDS.64   R180, [R131 + 0x0400] &wr=0 ?W1;              // LDS.64 storeReg4, [ldsReadPtr + 0x0400]
      LDS.64   R182, [R131 + 0x0500] &wr=0 ?W1;              // LDS.64 storeReg5, [ldsReadPtr + 0x0500]
      LDS.64   R184, [R131 + 0x0600] &wr=0 ?W1;              // LDS.64 storeReg6, [ldsReadPtr + 0x0600]
      LDS.64   R186, [R131 + 0x0700] &wr=0 ?W1;              // LDS.64 storeReg7, [ldsReadPtr + 0x0700]
      BAR.SYNC.DEFER_BLOCKING 0 ?W6;                         // BAR.SYNC.DEFER_BLOCKING 0
      LOP.AND P2, RZ, R140, 32 ?W13EG;                       // LOP.AND P2, RZ, mode, 32
      ISETP.GT.AND P2, PT, R135, 0, P2 ?W13EG;               // ISETP.GT.AND P2, PT, batchIdx, 0, P2
(P2)  BRA.U ampere_dgemm_128x64_mods_nt_END_BIAS ?W5EG ?BARRIER_EXEMPT; // @P2 BRA.U ampere_dgemm_128x64_mods_nt_END_BIAS
ampere_dgemm_128x64_mods_nt_END_BIAS:
(!P1) BRA  ampere_dgemm_128x64_mods_nt_STORE_COL_WRITE ?W5EG ?BARRIER_EXEMPT; // @!P1 BRA ampere_dgemm_128x64_mods_nt_STORE_COL_WRITE
(P2)  BRA.U   ampere_dgemm_128x64_mods_nt_STORE_COL_WRITE ?W5EG ?BARRIER_EXEMPT; // @P2 BRA.U ampere_dgemm_128x64_mods_nt_STORE_COL_WRITE
(!P0) R2P PR, RZ.B0, 0x78 ?W2;                               // @!P0 R2P PR, RZ.B0, 0x78
(P0)  R2P PR, R141.B0, 0x78 ?W13EG;                          // @P0 R2P PR, readPreds.B0, 0x78
      DFMA    R172, R160.reuse, R152, R172 &req={2,0} &rd=4 ?W2; // DFMA storeReg0, beta.reuse, fetchRegC0, storeReg0
(P3)  LDG.E.EN.LTC128B.64.STRONG.GPU    R152, [R136 + 0x0000] &req=4   &wr=2 ?W2 ?BARRIER_EXEMPT; // @P3 LDG.E.EN.LTC128B.64.STRONG.GPU fetchRegC0, [readPtr + 0x0000]
      DFMA    R174, R160.reuse, R154, R174 &rd=4 ?W2;        // DFMA storeReg1, beta.reuse, fetchRegC1, storeReg1
(P4)  LDG.E.EN.LTC128B.64.STRONG.GPU    R154, [R136 + 0x0100] &req=4 &rd=3  &wr=2 ?W2 ?BARRIER_EXEMPT; // @P4 LDG.E.EN.LTC128B.64.STRONG.GPU fetchRegC1, [readPtr + 0x0100]
      LEA.LO   R136, P2, R142.reuse, R136, 4 &req=3 ?W4;     // LEA.LO readPtr, predCarry, strideC.reuse, readPtr, 4
      LEA.HI.X R137, R142, R137, RZ, 4, P2 ?W6;              // LEA.HI.X readPtr_HI, strideC, readPtr_HI, strideC_HI, 4, predCarry
      DFMA    R176, R160.reuse, R156, R176 &rd=4 ?W2;        // DFMA storeReg2, beta.reuse, fetchRegC2, storeReg2
(P5)  LDG.E.EN.LTC128B.64.STRONG.GPU    R156, [R136 + 0x0000] &req=4   &wr=2 ?W2 ?BARRIER_EXEMPT; // @P5 LDG.E.EN.LTC128B.64.STRONG.GPU fetchRegC2, [readPtr + 0x0000]
      DFMA    R178, R160.reuse, R158, R178 &rd=4 ?W2;        // DFMA storeReg3, beta.reuse, fetchRegC3, storeReg3
(P6)  LDG.E.EN.LTC128B.64.STRONG.GPU    R158, [R136 + 0x0100] &req=4 &rd=3  &wr=2 ?W2 ?BARRIER_EXEMPT; // @P6 LDG.E.EN.LTC128B.64.STRONG.GPU fetchRegC3, [readPtr + 0x0100]
      LEA.LO   R136, P2, R142.reuse, R136, 4 &req=3 ?W4;     // LEA.LO readPtr, predCarry, strideC.reuse, readPtr, 4
      LEA.HI.X R137, R142, R137, RZ, 4, P2 ?W6;              // LEA.HI.X readPtr_HI, strideC, readPtr_HI, strideC_HI, 4, predCarry
(P0)  R2P PR, R141.B1, 0x78 ?W13EG;                          // @P0 R2P PR, readPreds.B1, 0x78
      DFMA    R180, R160.reuse, R162, R180 &rd=4 ?W2;        // DFMA storeReg4, beta.reuse, fetchRegC4, storeReg4
(P3)  LDG.E.EN.LTC128B.64.STRONG.GPU    R162, [R136 + 0x0000] &req=4   &wr=2 ?W2 ?BARRIER_EXEMPT; // @P3 LDG.E.EN.LTC128B.64.STRONG.GPU fetchRegC4, [readPtr + 0x0000]
      DFMA    R182, R160.reuse, R164, R182 &rd=4 ?W2;        // DFMA storeReg5, beta.reuse, fetchRegC5, storeReg5
(P4)  LDG.E.EN.LTC128B.64.STRONG.GPU    R164, [R136 + 0x0100] &req=4 &rd=3  &wr=2 ?W2 ?BARRIER_EXEMPT; // @P4 LDG.E.EN.LTC128B.64.STRONG.GPU fetchRegC5, [readPtr + 0x0100]
      LEA.LO   R136, P2, R142.reuse, R136, 4 &req=3 ?W4;     // LEA.LO readPtr, predCarry, strideC.reuse, readPtr, 4
      LEA.HI.X R137, R142, R137, RZ, 4, P2 ?W6;              // LEA.HI.X readPtr_HI, strideC, readPtr_HI, strideC_HI, 4, predCarry
      DFMA    R184, R160.reuse, R166, R184 &rd=4 ?W2;        // DFMA storeReg6, beta.reuse, fetchRegC6, storeReg6
(P5)  LDG.E.EN.LTC128B.64.STRONG.GPU    R166, [R136 + 0x0000] &req=4   &wr=2 ?W2 ?BARRIER_EXEMPT; // @P5 LDG.E.EN.LTC128B.64.STRONG.GPU fetchRegC6, [readPtr + 0x0000]
      DFMA    R186, R160      , R168, R186 &wr=4 ?W2;        // DFMA storeReg7, beta , fetchRegC7, storeReg7
(P6)  LDG.E.EN.LTC128B.64.STRONG.GPU    R168, [R136 + 0x0100] &req=4 &rd=3  &wr=2 ?W2 ?BARRIER_EXEMPT; // @P6 LDG.E.EN.LTC128B.64.STRONG.GPU fetchRegC7, [readPtr + 0x0100]
ampere_dgemm_128x64_mods_nt_STORE_COL_WRITE:
      LOP.AND P2, RZ, R140, 32 ?W13EG;                       // LOP.AND P2, RZ, mode, 32
(P2)  BRA.U   ampere_dgemm_128x64_mods_nt_END_RELU_EPILOG ?W5EG ?BARRIER_EXEMPT; // @P2 BRA.U ampere_dgemm_128x64_mods_nt_END_RELU_EPILOG
ampere_dgemm_128x64_mods_nt_END_RELU_EPILOG:
      R2P PR, R188.B0, 0x78 ?W13EG;                          // R2P PR, writePreds.B0, 0x78
(P3)  STG.E.EF.64.WEAK [R138 + 0x0000], R172 &req={0,4} ?W2 ?BARRIER_EXEMPT; // @P3 STG.E.EF.64.WEAK [writePtr + 0x0000], storeReg0
(P4)  STG.E.EF.64.WEAK [R138 + 0x0100], R174 &rd=3 ?W2 ?BARRIER_EXEMPT; // @P4 STG.E.EF.64.WEAK [writePtr + 0x0100], storeReg1
      LEA.LO   R138, P2, R142.reuse, R138, 4 &req=3 ?W4;     // LEA.LO writePtr, predCarry, strideC.reuse, writePtr, 4
      LEA.HI.X R139, R142, R139, RZ, 4, P2 ?W8;              // LEA.HI.X writePtr_HI, strideC, writePtr_HI, strideC_HI, 4, predCarry
(P5)  STG.E.EF.64.WEAK [R138 + 0x0000], R176 ?W2 ?BARRIER_EXEMPT; // @P5 STG.E.EF.64.WEAK [writePtr + 0x0000], storeReg2
(P6)  STG.E.EF.64.WEAK [R138 + 0x0100], R178 &rd=3 ?W2 ?BARRIER_EXEMPT; // @P6 STG.E.EF.64.WEAK [writePtr + 0x0100], storeReg3
      LEA.LO   R138, P2, R142.reuse, R138, 4 &req=3 ?W4;     // LEA.LO writePtr, predCarry, strideC.reuse, writePtr, 4
      LEA.HI.X R139, R142, R139, RZ, 4, P2 ?W8;              // LEA.HI.X writePtr_HI, strideC, writePtr_HI, strideC_HI, 4, predCarry
      R2P PR, R188.B1, 0x78 ?W13EG;                          // R2P PR, writePreds.B1, 0x78
(P3)  STG.E.EF.64.WEAK [R138 + 0x0000], R180 ?W2 ?BARRIER_EXEMPT; // @P3 STG.E.EF.64.WEAK [writePtr + 0x0000], storeReg4
(P4)  STG.E.EF.64.WEAK [R138 + 0x0100], R182 &rd=3 ?W2 ?BARRIER_EXEMPT; // @P4 STG.E.EF.64.WEAK [writePtr + 0x0100], storeReg5
      LEA.LO   R138, P2, R142.reuse, R138, 4 &req=3 ?W4;     // LEA.LO writePtr, predCarry, strideC.reuse, writePtr, 4
      LEA.HI.X R139, R142, R139, RZ, 4, P2 ?W8;              // LEA.HI.X writePtr_HI, strideC, writePtr_HI, strideC_HI, 4, predCarry
(P5)  STG.E.EF.64.WEAK [R138 + 0x0000], R184 ?W2 ?BARRIER_EXEMPT; // @P5 STG.E.EF.64.WEAK [writePtr + 0x0000], storeReg6
(P6)  STG.E.EF.64.WEAK [R138 + 0x0100], R186 &rd=3 ?W2 ?BARRIER_EXEMPT; // @P6 STG.E.EF.64.WEAK [writePtr + 0x0100], storeReg7
// Virtual ?REQ_BAR found on next instruction, stop putting ?BARRIER_EXEMPT on decoupled instructions
      RET.ABS  R128 + 32 ?W5;                                // RET.ABS pc + 32
ampere_dgemm_128x64_mods_nt_END:
	.sectioninfo	@"SHI_REGISTERS=234"
//--------------------- .lw.info.ampere_dgemm_128x64_mods_nt

	.section	.lw.info.ampere_dgemm_128x64_mods_nt,"",@SHT_LWDA_INFO
	// ---- lwinfo : EIATTR_PARAM_CBANK
	.align 4
ampere_dgemm_128x64_mods_nt_1:
	.byte  0x04, 0xa
	.short  (ampere_dgemm_128x64_mods_nt_3 - ampere_dgemm_128x64_mods_nt_2)
	.align 4
ampere_dgemm_128x64_mods_nt_2:
	.word	index@(.lw.constant0.ampere_dgemm_128x64_mods_nt)
	.short  0x0160
	.short  0xa8

	// ---- lwinfo : EIATTR_CBANK_PARAM_SIZE
	.align 4
ampere_dgemm_128x64_mods_nt_3:
	.byte	0x03, 0x19
	.short  0xa8

	// ---- lwinfo : EIATTR_KPARAM_INFO
	.align 4
ampere_dgemm_128x64_mods_nt_4:
	.byte  0x04, 0x17
	.short (ampere_dgemm_128x64_mods_nt_6 - ampere_dgemm_128x64_mods_nt_5)
ampere_dgemm_128x64_mods_nt_5:
	.word	0x00000000
	.short  0x0
	.short  0x0
	.byte  0x00, 0xf0, 0xa1, 0x02

ampere_dgemm_128x64_mods_nt_6:
//--------------------- .lw.shared.ampere_dgemm_128x64_mods_nt

	.section	.lw.shared.ampere_dgemm_128x64_mods_nt,"aw",@nobits
	.align 4
	.zero 24572
	.word shmem_reloc_ampere_dgemm_128x64_mods_nt
//--------------------- .lw.callgraph             --------------------------
	.section	.lw.callgraph,"",@"SHT_CALLGRAPH"
	.sectionentsize	8
	.align 4
	.byte	0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff
	.align 4
	.byte	0x00, 0x00, 0x00, 0x00, 0xfe, 0xff, 0xff, 0xff
	.byte	0x00, 0x00, 0x00, 0x00, 0xfd, 0xff, 0xff, 0xff

// ------------------- lwinfo        --------
	.section	.lw.info,"",@SHT_LWDA_INFO

	// ---- lwinfo : EIATTR_MIN_STACK_SIZE
	.align 4
.ampere_dgemm_128x64_mods_nt_L1:
	.byte  0x04, 0x12
	.short  (.ampere_dgemm_128x64_mods_nt_L3 - .ampere_dgemm_128x64_mods_nt_L2)
	.align 4
.ampere_dgemm_128x64_mods_nt_L2:
	.word	index@(ampere_dgemm_128x64_mods_nt)
	.word  0x0

	// ---- lwinfo : EIATTR_FRAME_SIZE
	.align 4
.ampere_dgemm_128x64_mods_nt_L3:
	.byte  0x04, 0x11
	.short  (.ampere_dgemm_128x64_mods_nt_L5 - .ampere_dgemm_128x64_mods_nt_L4)
	.align 4
.ampere_dgemm_128x64_mods_nt_L4:
	.word	index@(ampere_dgemm_128x64_mods_nt)
	.word  0x0

.ampere_dgemm_128x64_mods_nt_L5:

//--------------------- .lw.constant0.ampere_dgemm_128x64_mods_nt
	.section	.lw.constant0.ampere_dgemm_128x64_mods_nt,"a",@progbits
	.align 4
.ampere_dgemm_128x64_mods_nt_L6:
	.zero     520

// ------------------- Symbol --------

// const ShaderParams ampere_dgemm_128x64_mods_nt_params = {
//     /* version             */ 1,
//     /* name                */ "ampere_dgemm_128x64_mods_nt",
//     /* kernel              */ (void*)ampere_dgemm_128x64_mods_nt,
//     /* chipFamily          */ GEMM_CHIP_AMPERE,
//     /* gemmType            */ DGEMM,
//     /* typeA               */ R_64F,
//     /* typeAm              */ R_64F,
//     /* packCountA             1, */
//     /* typeB               */ R_64F,
//     /* packCountB             1, */
//     /* typeC               */ R_64F,
//     /* packCountC             1, */
//     /* typeEpilog          */ R_64F,
//     /* packCountEpilog        1, */
//     /* shapeC              */ RECT,
//     /* layoutA             */ N,
//     /* layoutB             */ T,
//     /* log2ElementsPerLdgA */ 0,
//     /* log2ElementsPerLdgB */ 0,
//     /* reLuAndBias         */ 0,
//     /* isReleaseKernel     */ 1,
//     /* numRegisters        */ 232,
//     /* usedRegisters          229, */
//     /* sharedMemSize       */ 24576,  /* 24.000 KB */
//     /* elementRowsPerCta   */ 128,
//     /* elementRowsPerWarp     64, */
//     /* elementColsperCta   */ 64,
//     /* elementColsPerWarp     32, */
//     /* threadsPerCta       */ 128,
//     /* raggedMn            */ true,
//     /* warpStrideK         */ 4,
//     /* shiftFastA          */ 3,
//     /* multiplierSlowA     */ 32,
//     /* offsetSlowA         */ 0,
//     /* shiftFastB          */ 3,
//     /* multiplierSlowB     */ 32,
//     /* offsetSlowB         */ 0,
//     /* shiftFastAm         */ 0,
//     /* multiplierSlowAm    */ 0,
//     /* offsetSlowAm        */ 0,
//     /* kBlock              */ 8,
//     /* lwDnnEdges          */ LWDNN_NONE,
//     /* lwDnnLayout         */ NCHW,
//     /* lwDnnStridedB       */ false,
//     /* lwDnnSplitK         */ false,
//     /* lwDnnDgrad          */ false,
//     /* lwDnnWgrad          */ false,
//     /* sliceRows           */ 1,
//     /* sliceCols           */ 1,
//     /* abiVersion          */ ABI_AMPERE_G
// };
// raggedMnNumPreds 6, R2P's in loop 3
