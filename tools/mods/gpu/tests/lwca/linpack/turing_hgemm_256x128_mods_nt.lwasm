.headerflags	@"EF_LWDA_TEXMODE_UNIFIED EF_LWDA_64BIT_ADDRESS EF_LWDA_SM75 EF_LWDA_PTX_SM(EF_LWDA_SM75) "

	.section       .text.turing_hgemm_256x128_mods_nt,"ax",@progbits
	.sectionflags	@"SHF_BARRIERS=1"
	.align 128
	.global        turing_hgemm_256x128_mods_nt
	.type          turing_hgemm_256x128_mods_nt,@function
	.size          turing_hgemm_256x128_mods_nt,(turing_hgemm_256x128_mods_nt_END - turing_hgemm_256x128_mods_nt)
	.other         turing_hgemm_256x128_mods_nt,@"STO_LWDA_ENTRY STV_DEFAULT"
turing_hgemm_256x128_mods_nt:
.text.turing_hgemm_256x128_mods_nt:
      MOV  R89, RZ ?W2;                                      // MOV ctaRow_HI, RZ
      MOV R0, c[0][0x1d4] ?W2;                               // MOV mode, Mode
      S2R R1, SR_CTAid.Z &wr=4 ?W2;                          // S2R batchIdx, SR_CTAid.Z
      S2R R2, SR_VirtId &wr=4 ?W2;                           // S2R smId, SR_VirtId
      S2R         R91, SR_Tid.X &wr=4 ?W2;                   // S2R tid, SR_Tid.X
      ISETP.NE    P0, RZ, c[0][0x1ec] ?W2;                   // ISETP.NE P0, RZ, AbByRef
      S2R         R88, SR_CTAid.X &wr=4 ?W2;                 // S2R ctaRow, SR_CTAid.X
      S2R         R90, SR_CTAid.Y &wr=4 ?W2;                 // S2R ctaCol, SR_CTAid.Y
      LOP.AND P3, RZ, R0, 4 ?W2;                             // LOP.AND P3, RZ, mode, 4
      IMAD.LO.U32 R3, R1, c[0][0x1d0], RZ &req=4 ?W5;        // IMAD.LO.U32 temp0, batchIdx, ChunkK, RZ
      IADD    R3, -R3, c[0][0x1c4] ?W2;                      // IADD temp0, -temp0, CountK
      MOV     R85, c[0][0x1c4] ?W2;                          // MOV counterK, CountK
      ISETP.LT.AND  P4, PT, R3, c[0][0x1d0], P3 ?W2;         // ISETP.LT.AND P4, PT, temp0, ChunkK, P3
(P3)  MOV        R85, c[0][0x1d0] ?W10;                      // @P3 MOV counterK, ChunkK
(P4)  MOV        R85, R3 ?W4;                                // @P4 MOV counterK, temp0
      LOP.AND  R3, R0, 0xf00 ?W2;                            // LOP.AND log2GroupCols, mode, 0xf00
      LOP.AND  P5, RZ, R0, 0x1000 ?W2;                       // LOP.AND P5, RZ, mode, 0x1000
      SHR.U32  R3, R3, 8 ?W4;                                // SHR.U32 log2GroupCols, log2GroupCols, 8
      BMSK     R4, R3, 1 ?W2;                                // BMSK groupCols, log2GroupCols, 1
      BMSK     R5, RZ, R3 ?W2;                               // BMSK mask, RZ, log2GroupCols
      PSETP.AND P4, !PT, !PT ?W2;                            // PSETP.AND P4, !PT, !PT
turing_hgemm_256x128_mods_nt_prolog_cta_swizzle_loop:
      LOP.OR   R6, R90, R5 &req=4 ?W2;                       // LOP.OR testCol, ctaCol, mask
      ISETP.EQ P3, R5, 3 ?W2;                                // ISETP.EQ P3, mask, 3
      ISETP.LT P2, R6, c[0x0][0x010] ?W2;                    // ISETP.LT P2, testCol, GridDimY
      LOP.AND  R7,  R90.reuse,  R5.reuse ?W2;                // LOP.AND colMod, ctaCol.reuse, mask.reuse
      LOP.AND  R10,  R90,        R4 ?W2;                     // LOP.AND colBit, ctaCol, groupCols
      ISETP.EQ.AND P3, PT, R6, c[0x0][0x010], P3 ?W2;        // ISETP.EQ.AND P3, PT, testCol, GridDimY, P3
      LOP.AND  R8, R90.reuse, ~R5 ?W1;                       // LOP.AND colBase, ctaCol.reuse, ~mask
      IMAD.U32 R9, R7, c[0x0][0x00c], R88 &req=4 ?W1;        // IMAD.U32 linear, colMod, GridDimX, ctaRow
(P5)  ISETP.EQ.XOR P4, PT, R10, R4, P4 ?W2;                  // @P5 ISETP.EQ.XOR P4, PT, colBit, groupCols, P4
      SHR.U32 R4, R4, 1 ?W2;                                 // SHR.U32 groupCols, groupCols, 1
(P2)  BRA turing_hgemm_256x128_mods_nt_prolog_cta_swizzle_group_col_pow2 ?W4; // @P2 BRA turing_hgemm_256x128_mods_nt_prolog_cta_swizzle_group_col_pow2
(!P3) SHR.U32  R5, R5, 1 ?W2;                                // @!P3 SHR.U32 mask, mask, 1
(!P3) IADD     R3, R3, -1 ?W2;                               // @!P3 IADD log2GroupCols, log2GroupCols, -1
(!P3) BRA turing_hgemm_256x128_mods_nt_prolog_cta_swizzle_loop ?W4; // @!P3 BRA turing_hgemm_256x128_mods_nt_prolog_cta_swizzle_loop
      IMUL.WIDE.U32 R12, R9, 0x55555556 ?W1;                 // IMUL.WIDE.U32 swizRow64, linear, 0x55555556
      IADD  R90, R8, R9 ?W5;                                 // IADD ctaCol, colBase, linear
      IMAD.U32 R90, R13, -3, R90 ?W1;                        // IMAD.U32 ctaCol, swizRow, -3, ctaCol
(!P4) MOV R88, R13 ?W2;                                      // @!P4 MOV ctaRow, swizRow
(P4)  IADD.X R88, ~R13, c[0x0][0x00c], !PT ?W2;              // @P4 IADD.X ctaRow, ~swizRow, GridDimX, !PT
      BRA turing_hgemm_256x128_mods_nt_prolog_cta_swizzle_done ?W4; // BRA turing_hgemm_256x128_mods_nt_prolog_cta_swizzle_done
turing_hgemm_256x128_mods_nt_prolog_cta_swizzle_group_col_pow2:
      SHR.U32 R88, R9, R3 ?W2;                               // SHR.U32 ctaRow, linear, log2GroupCols
      LOP3.LUT  R90, R8, R9, R5, 0xf8 ?W2;                   // LOP3.LUT ctaCol, colBase, linear, mask, B_AND_C__OR_A ?WiT
(P4)  IADD.X R88, ~R88, c[0x0][0x00c], !PT ?W4;              // @P4 IADD.X ctaRow, ~ctaRow, GridDimX, !PT
turing_hgemm_256x128_mods_nt_prolog_cta_swizzle_done:
      SHR.U32 R2, R2, 20 ?W2;                                // SHR.U32 smId, smId, 20
      LOP.AND P3, RZ, R0, 0x10000 ?W2;                       // LOP.AND P3, RZ, mode, 0x10000
      IMAD.LO.U32 R6, R1, c[0x0][0x010], R90 ?W5;            // IMAD.LO.U32 ctaIdx, batchIdx, GridDimY, ctaCol
      IMAD.WIDE.U32 R6, R6, c[0x0][0x00c], R88 ?W5;          // IMAD.WIDE.U32 ctaIdx, ctaIdx, GridDimX, ctaRow
      LOP.AND R2, R2, 0x1ff ?W2;                             // LOP.AND smId, smId, 0x1ff
      LEA.LO   R4, P2, R6.reuse, c[0][0x1c8], 1 ?W4;         // LEA.LO syncPointer, predCarry, ctaIdx.reuse, Sync, 1
      LEA.HI.X R5, R6, c[0][0x1cc], R7, 1, P2 ?W8;           // LEA.HI.X syncPointer_HI, ctaIdx, Sync_HI, ctaIdx_HI, 1, predCarry
(P3)  STG.E.EN.U16.WEAK [R4], R2 &rd=3 ?W2;                  // @P3 STG.E.EN.U16.WEAK [syncPointer], smId
      MOV      R87, 6144 ?W2;                                // MOV sharedPageFlip, 6144
      MOV           R82, c[0][0x1e0] ?W2;                    // MOV readPtr, BetaRef
      MOV           R83, c[0][0x1e4] ?W8;                    // MOV readPtr_HI, BetaRef_HI
(P0)  LDG.E.EN.LTC128B.U16.CONSTANT.GPU    R84, [R82] &req=3 &rd=3 &wr=2 ?W2; // @P0 LDG.E.EN.LTC128B.U16.CONSTANT.GPU beta, [readPtr]
      ISETP.GE      P1, R85, 8 ?W2;                          // ISETP.GE P1, counterK, 8
(!P0) LDC.U16 R84, c[0][0x1ea] &wr=2 ?W1EG;                  // @!P0 LDC.U16 beta, BetaVal
      SHL R92, R91, 2 &req=4 ?W2;                            // SHL sharedZeroOffset, tid, 2
      MOV  R9, RZ ?W2;                                       // MOV absRowCol_HI, RZ
      SHR.U32 R5, R91, 5 &req=4 ?W2;                         // SHR.U32 maskedWid, tid, 5
      LOP.AND R10, R91, 31 ?W2;                              // LOP.AND thread, tid, 31
      LOP.AND R5, R5, 0x7 ?W2;                               // LOP.AND maskedWid, maskedWid, 0x7
      MOV        R82, c[0][0x160] &req=3 ?W2;                // MOV readPtrA, BaseA
      MOV        R83, c[0][0x164] ?W2;                       // MOV readPtrA_HI, BaseA_HI
      LOP.AND P2, R2, R0, 7 ?W12EG;                          // LOP.AND predCarry, temp0, mode, 7
(!P2) BRA.U turing_hgemm_256x128_mods_nt_END_BATCH_PTR_CALCA_PROLOG ?W4; // @!predCarry BRA.U turing_hgemm_256x128_mods_nt_END_BATCH_PTR_CALCA_PROLOG
      ISETP.EQ  P2, R2, 2 ?W12EG;                            // ISETP.EQ predCarry, temp0, 2
(!P2) BRA.U turing_hgemm_256x128_mods_nt_BATCHED_CONTIG_PTR_CALCA_PROLOG ?W4; // @!predCarry BRA.U turing_hgemm_256x128_mods_nt_BATCHED_CONTIG_PTR_CALCA_PROLOG
      LEA.LO   R6, P2, R1.reuse, R82, 3 &req=4 ?W4;          // LEA.LO readPtrMul, predCarry, batchIdx.reuse, readPtrA, 3
      LEA.HI.X R7, R1, R83, RZ, 3, P2 ?W8;                   // LEA.HI.X readPtrMul_HI, batchIdx, readPtrA_HI, RZ, 3, predCarry
      LDG.E.EN.LTC128B.64.CONSTANT.GPU R82, [R6 + 0x00] &rd=3 &wr=2 ?W2; // LDG.E.EN.LTC128B.64.CONSTANT.GPU readPtrA, [readPtrMul + 0x00]
      BRA.U turing_hgemm_256x128_mods_nt_END_BATCH_PTR_CALCA_PROLOG ?W4; // BRA.U turing_hgemm_256x128_mods_nt_END_BATCH_PTR_CALCA_PROLOG
turing_hgemm_256x128_mods_nt_BATCHED_CONTIG_PTR_CALCA_PROLOG:
      IMAD.WIDE.U32 R6,    R1, c[0][0x198],    RZ &req=4 ?W4; // IMAD.WIDE.U32 readPtrMul, batchIdx, MatrixStrideA, RZ
      IMAD.LO.U32   R7, R1, c[0][0x19c], R7 ?W2;             // IMAD.LO.U32 readPtrMul_HI, batchIdx, MatrixStrideA_HI, readPtrMul_HI
      LEA.LO   R82, P2, R6.reuse, R82, 1 ?W4;                // LEA.LO readPtrA, predCarry, readPtrMul.reuse, readPtrA, 1
      LEA.HI.X R83, R6, R83, R7, 1, P2 ?W2;                  // LEA.HI.X readPtrA_HI, readPtrMul, readPtrA_HI, readPtrMul_HI, 1, predCarry
turing_hgemm_256x128_mods_nt_END_BATCH_PTR_CALCA_PROLOG:
      ISCADD     R80, R5, 0x0, 9 ?W4;                        // ISCADD sharedWriteA, maskedWid, 0x0, 9
      ISCADD     R80, R10, R80, 1 ?W2;                       // ISCADD sharedWriteA, thread, sharedWriteA, 1
      ISCADD     R8, R88, R10, 8 ?W5;                        // ISCADD absRowCol, ctaRow, thread, 8
      IMAD.WIDE.U32 R6, R5, c[0][0x1b0], R8 &req=3 ?W5;      // IMAD.WIDE.U32 readPtrMul, maskedWid, StrideA, absRowCol
      LEA.LO   R82, P2, R6.reuse, R82, 1 &req=2 ?W4;         // LEA.LO readPtrA, predCarry, readPtrMul.reuse, readPtrA, 1
      LEA.HI.X R83, R6, R83, R7, 1, P2 ?W4;                  // LEA.HI.X readPtrA_HI, readPtrMul, readPtrA_HI, readPtrMul_HI, 1, predCarry
      IADD R8, R8, -c[0][0x1bc] ?W4;                         // IADD absRowCol, absRowCol, -CountM
      ISETP.LT P3, R8, 0 ?W2;                                // ISETP.LT P3, absRowCol, 0
      ISETP.LT P4, R8, -32 ?W2;                              // ISETP.LT P4, absRowCol, -32
      ISETP.LT P5, R8, -64 ?W2;                              // ISETP.LT P5, absRowCol, -64
      ISETP.LT P6, R8, -96 ?W12EG;                           // ISETP.LT P6, absRowCol, -96
      P2R.B0 R86, PR, RZ, 0x78 ?W2;                          // P2R.B0 raggedMnPreds0, PR, RZ, 0x78
      ISETP.LT P3, R8, -128 ?W2;                             // ISETP.LT P3, absRowCol, -128
      ISETP.LT P4, R8, -160 ?W2;                             // ISETP.LT P4, absRowCol, -160
      ISETP.LT P5, R8, -192 ?W2;                             // ISETP.LT P5, absRowCol, -192
      ISETP.LT P6, R8, -224 ?W12EG;                          // ISETP.LT P6, absRowCol, -224
      P2R.B1 R86, PR, R86, 0x78 ?W2;                         // P2R.B1 raggedMnPreds0, PR, raggedMnPreds0, 0x78
      MOV  R9, RZ ?W2;                                       // MOV absRowCol_HI, RZ
      SHR.U32 R5, R91, 5 &req=4 ?W2;                         // SHR.U32 maskedWid, tid, 5
      LOP.AND R10, R91, 31 ?W2;                              // LOP.AND thread, tid, 31
      LOP.AND R5, R5, 0x7 ?W2;                               // LOP.AND maskedWid, maskedWid, 0x7
      MOV        R78, c[0][0x168] &req=3 ?W2;                // MOV readPtrB, BaseB
      MOV        R79, c[0][0x16c] ?W2;                       // MOV readPtrB_HI, BaseB_HI
      LOP.AND P2, R2, R0, 7 ?W12EG;                          // LOP.AND predCarry, temp0, mode, 7
(!P2) BRA.U turing_hgemm_256x128_mods_nt_END_BATCH_PTR_CALCB_PROLOG ?W4; // @!predCarry BRA.U turing_hgemm_256x128_mods_nt_END_BATCH_PTR_CALCB_PROLOG
      ISETP.EQ  P2, R2, 2 ?W12EG;                            // ISETP.EQ predCarry, temp0, 2
(!P2) BRA.U turing_hgemm_256x128_mods_nt_BATCHED_CONTIG_PTR_CALCB_PROLOG ?W4; // @!predCarry BRA.U turing_hgemm_256x128_mods_nt_BATCHED_CONTIG_PTR_CALCB_PROLOG
      LEA.LO   R6, P2, R1.reuse, R78, 3 &req=4 ?W4;          // LEA.LO readPtrMul, predCarry, batchIdx.reuse, readPtrB, 3
      LEA.HI.X R7, R1, R79, RZ, 3, P2 ?W8;                   // LEA.HI.X readPtrMul_HI, batchIdx, readPtrB_HI, RZ, 3, predCarry
      LDG.E.EN.LTC128B.64.CONSTANT.GPU R78, [R6 + 0x00] &rd=3 &wr=2 ?W2; // LDG.E.EN.LTC128B.64.CONSTANT.GPU readPtrB, [readPtrMul + 0x00]
      BRA.U turing_hgemm_256x128_mods_nt_END_BATCH_PTR_CALCB_PROLOG ?W4; // BRA.U turing_hgemm_256x128_mods_nt_END_BATCH_PTR_CALCB_PROLOG
turing_hgemm_256x128_mods_nt_BATCHED_CONTIG_PTR_CALCB_PROLOG:
      IMAD.WIDE.U32 R6,    R1, c[0][0x1a0],    RZ &req=4 ?W4; // IMAD.WIDE.U32 readPtrMul, batchIdx, MatrixStrideB, RZ
      IMAD.LO.U32   R7, R1, c[0][0x1a4], R7 ?W2;             // IMAD.LO.U32 readPtrMul_HI, batchIdx, MatrixStrideB_HI, readPtrMul_HI
      LEA.LO   R78, P2, R6.reuse, R78, 1 ?W4;                // LEA.LO readPtrB, predCarry, readPtrMul.reuse, readPtrB, 1
      LEA.HI.X R79, R6, R79, R7, 1, P2 ?W2;                  // LEA.HI.X readPtrB_HI, readPtrMul, readPtrB_HI, readPtrMul_HI, 1, predCarry
turing_hgemm_256x128_mods_nt_END_BATCH_PTR_CALCB_PROLOG:
      ISCADD     R81, R5, 0x1000, 8 ?W4;                     // ISCADD sharedWriteB, maskedWid, 0x1000, 8
      ISCADD     R81, R10, R81, 1 ?W2;                       // ISCADD sharedWriteB, thread, sharedWriteB, 1
      ISCADD     R8, R90, R10, 7 ?W5;                        // ISCADD absRowCol, ctaCol, thread, 7
      IMAD.WIDE.U32 R6, R5, c[0][0x1b4], R8 &req=3 ?W5;      // IMAD.WIDE.U32 readPtrMul, maskedWid, StrideB, absRowCol
      LEA.LO   R78, P2, R6.reuse, R78, 1 &req=2 ?W4;         // LEA.LO readPtrB, predCarry, readPtrMul.reuse, readPtrB, 1
      LEA.HI.X R79, R6, R79, R7, 1, P2 ?W4;                  // LEA.HI.X readPtrB_HI, readPtrMul, readPtrB_HI, readPtrMul_HI, 1, predCarry
      IADD R8, R8, -c[0][0x1c0] ?W4;                         // IADD absRowCol, absRowCol, -CountN
      ISETP.LT P3, R8, 0 ?W2;                                // ISETP.LT P3, absRowCol, 0
      ISETP.LT P4, R8, -32 ?W2;                              // ISETP.LT P4, absRowCol, -32
      ISETP.LT P5, R8, -64 ?W2;                              // ISETP.LT P5, absRowCol, -64
      ISETP.LT P6, R8, -96 ?W12EG;                           // ISETP.LT P6, absRowCol, -96
      P2R.B2 R86, PR, R86, 0x78 ?W2;                         // P2R.B2 raggedMnPreds0, PR, raggedMnPreds0, 0x78
      STS.32  [R92 + 0x1800], RZ &rd=1 ?W2;                  // STS.32 [sharedZeroOffset + 0x1800], RZ
      BAR.SYNC.DEFER_BLOCKING 0 ?W5;                         // BAR.SYNC.DEFER_BLOCKING 0
(!P1) R2P PR, RZ.B0, 0x78 ?W2;                               // @!P1 R2P PR, RZ.B0, 0x78
(P1)  R2P PR, R86.B0, 0x78 ?W12EG;                           // @P1 R2P PR, raggedMnPreds0.B0, 0x78
(P3)  LDG.E.EN.LTC128B.U16.CONSTANT.GPU  R64, [R82 + 0x0] &wr=2 ?W2 ?BARRIER_EXEMPT; // @P3 LDG.E.EN.LTC128B.U16.CONSTANT.GPU fetchRegA0, [readPtrA + 0x0]
(!P3) MOV R64, RZ ?W2;                                       // @!P3 MOV fetchRegA0_0, RZ
(P4)  LDG.E.EN.LTC128B.U16.CONSTANT.GPU  R65, [R82 + 0x40] &wr=2 ?W2 ?BARRIER_EXEMPT; // @P4 LDG.E.EN.LTC128B.U16.CONSTANT.GPU fetchRegA1, [readPtrA + 0x40]
(!P4) MOV R65, RZ ?W2;                                       // @!P4 MOV fetchRegA1_0, RZ
(P5)  LDG.E.EN.LTC128B.U16.CONSTANT.GPU  R66, [R82 + 0x80] &wr=2 ?W2 ?BARRIER_EXEMPT; // @P5 LDG.E.EN.LTC128B.U16.CONSTANT.GPU fetchRegA2, [readPtrA + 0x80]
(!P5) MOV R66, RZ ?W2;                                       // @!P5 MOV fetchRegA2_0, RZ
(P6)  LDG.E.EN.LTC128B.U16.CONSTANT.GPU  R67, [R82 + 0xc0] &wr=2 ?W2 ?BARRIER_EXEMPT; // @P6 LDG.E.EN.LTC128B.U16.CONSTANT.GPU fetchRegA3, [readPtrA + 0xc0]
(!P6) MOV R67, RZ ?W2;                                       // @!P6 MOV fetchRegA3_0, RZ
(P1)  R2P PR, R86.B1, 0x78 ?W12EG;                           // @P1 R2P PR, raggedMnPreds0.B1, 0x78
(P3)  LDG.E.EN.LTC128B.U16.CONSTANT.GPU  R68, [R82 + 0x100] &wr=2 ?W2 ?BARRIER_EXEMPT; // @P3 LDG.E.EN.LTC128B.U16.CONSTANT.GPU fetchRegA4, [readPtrA + 0x100]
(!P3) MOV R68, RZ ?W2;                                       // @!P3 MOV fetchRegA4_0, RZ
(P4)  LDG.E.EN.LTC128B.U16.CONSTANT.GPU  R69, [R82 + 0x140] &wr=2 ?W2 ?BARRIER_EXEMPT; // @P4 LDG.E.EN.LTC128B.U16.CONSTANT.GPU fetchRegA5, [readPtrA + 0x140]
(!P4) MOV R69, RZ ?W2;                                       // @!P4 MOV fetchRegA5_0, RZ
(P5)  LDG.E.EN.LTC128B.U16.CONSTANT.GPU  R70, [R82 + 0x180] &wr=2 ?W2 ?BARRIER_EXEMPT; // @P5 LDG.E.EN.LTC128B.U16.CONSTANT.GPU fetchRegA6, [readPtrA + 0x180]
(!P5) MOV R70, RZ ?W2;                                       // @!P5 MOV fetchRegA6_0, RZ
(P6)  LDG.E.EN.LTC128B.U16.CONSTANT.GPU  R71, [R82 + 0x1c0] &rd=3 &wr=2 ?W2 ?BARRIER_EXEMPT; // @P6 LDG.E.EN.LTC128B.U16.CONSTANT.GPU fetchRegA7, [readPtrA + 0x1c0]
(!P6) MOV R71, RZ ?W2;                                       // @!P6 MOV fetchRegA7_0, RZ
(P1)  IADD   R82, P2, R82,   c[0][0x188] &req=3 ?W4;         // @P1 IADD readPtrA, predCarry, readPtrA, IncSlowA
(P1)  IADD.X R83,         R83, c[0][0x18c], P2 ?W8;          // @P1 IADD.X readPtrA_HI, readPtrA_HI, IncSlowA_HI, predCarry
(P1)  R2P PR, R86.B2, 0x78 ?W12EG;                           // @P1 R2P PR, raggedMnPreds0.B2, 0x78
(P3)  LDG.E.EN.LTC128B.U16.CONSTANT.GPU  R72, [R78 + 0x0] &wr=2 ?W2 ?BARRIER_EXEMPT; // @P3 LDG.E.EN.LTC128B.U16.CONSTANT.GPU fetchRegB0, [readPtrB + 0x0]
(!P3) MOV R72, RZ ?W2;                                       // @!P3 MOV fetchRegB0_0, RZ
(P4)  LDG.E.EN.LTC128B.U16.CONSTANT.GPU  R73, [R78 + 0x40] &wr=2 ?W2 ?BARRIER_EXEMPT; // @P4 LDG.E.EN.LTC128B.U16.CONSTANT.GPU fetchRegB1, [readPtrB + 0x40]
(!P4) MOV R73, RZ ?W2;                                       // @!P4 MOV fetchRegB1_0, RZ
(P5)  LDG.E.EN.LTC128B.U16.CONSTANT.GPU  R74, [R78 + 0x80] &wr=2 ?W2 ?BARRIER_EXEMPT; // @P5 LDG.E.EN.LTC128B.U16.CONSTANT.GPU fetchRegB2, [readPtrB + 0x80]
(!P5) MOV R74, RZ ?W2;                                       // @!P5 MOV fetchRegB2_0, RZ
(P6)  LDG.E.EN.LTC128B.U16.CONSTANT.GPU  R75, [R78 + 0xc0] &rd=3 &wr=2 ?W2 ?BARRIER_EXEMPT; // @P6 LDG.E.EN.LTC128B.U16.CONSTANT.GPU fetchRegB3, [readPtrB + 0xc0]
(!P6) MOV R75, RZ ?W2;                                       // @!P6 MOV fetchRegB3_0, RZ
(P1)  IADD   R78, P2, R78,   c[0][0x190] &req=3 ?W4;         // @P1 IADD readPtrB, predCarry, readPtrB, IncSlowB
(P1)  IADD.X R79,         R79, c[0][0x194], P2 ?W8;          // @P1 IADD.X readPtrB_HI, readPtrB_HI, IncSlowB_HI, predCarry
      SHR         R1, R91.reuse, 7 ?W2;                      // SHR awTid, tid.reuse, 7
      SHR         R0, R91.reuse, 1 ?W2;                      // SHR aiTid, tid.reuse, 1
      SHL         R1, R1, 4 ?W2;                             // SHL awTid, awTid, 4
      LOP.AND     R76, R0, 0x7 ?W4;                          // LOP.AND sharedA, aiTid, 0x7
      LOP.OR      R76, R76, R1 ?W4;                          // LOP.OR sharedA, sharedA, awTid
      SHL         R76, R76, 4 ?W2;                           // SHL sharedA, sharedA, 4
      SHR         R3, R91.reuse, 5 ?W2;                      // SHR bwTid, tid.reuse, 5
      SHR         R2, R91.reuse, 3 ?W2;                      // SHR bmTid, tid.reuse, 3
      LOP.AND     R77, R91.reuse, 1 ?W2;                     // LOP.AND sharedB, tid.reuse, 1
      LOP.AND     R3, R3, 3 ?W2;                             // LOP.AND bwTid, bwTid, 3
      LOP.AND     R2, R2, 2 ?W4;                             // LOP.AND bmTid, bmTid, 2
      SHL         R3, R3, 2 ?W4;                             // SHL bwTid, bwTid, 2
      LOP3.OR     R77, R77, R2, R3 ?W4;                      // LOP3.OR sharedB, sharedB, bmTid, bwTid
      ISCADD      R77, R77, 0x1000, 4 ?W2;                   // ISCADD sharedB, sharedB, 0x1000, 4
// Virtual ?REQ_BAR found on next instruction, stop putting ?BARRIER_EXEMPT on decoupled instructions
      LDS.U.128   R0, [0x1800] &wr=0 ?W2;                    // LDS.U.128 R0, [0x1800]
      LDS.U.128   R4, [0x1800] &wr=0 ?W2;                    // LDS.U.128 R4, [0x1800]
      LDS.U.128   R8, [0x1800] &wr=0 ?W2;                    // LDS.U.128 R8, [0x1800]
      LDS.U.128   R12, [0x1800] &wr=0 ?W2;                   // LDS.U.128 R12, [0x1800]
      LDS.U.128   R16, [0x1800] &wr=0 ?W2;                   // LDS.U.128 R16, [0x1800]
      LDS.U.128   R20, [0x1800] &wr=0 ?W2;                   // LDS.U.128 R20, [0x1800]
      LDS.U.128   R24, [0x1800] &wr=0 ?W2;                   // LDS.U.128 R24, [0x1800]
      LDS.U.128   R28, [0x1800] &wr=0 ?W2;                   // LDS.U.128 R28, [0x1800]
      LDS.U.128   R32, [0x1800] &wr=0 ?W2;                   // LDS.U.128 R32, [0x1800]
      LDS.U.128   R36, [0x1800] &wr=0 ?W2;                   // LDS.U.128 R36, [0x1800]
      LDS.U.128   R40, [0x1800] &wr=0 ?W2;                   // LDS.U.128 R40, [0x1800]
      LDS.U.128   R44, [0x1800] &wr=0 ?W2;                   // LDS.U.128 R44, [0x1800]
      LDS.U.128   R48, [0x1800] &wr=0 ?W2;                   // LDS.U.128 R48, [0x1800]
      LDS.U.128   R52, [0x1800] &wr=0 ?W2;                   // LDS.U.128 R52, [0x1800]
      LDS.U.128   R56, [0x1800] &wr=0 ?W2;                   // LDS.U.128 R56, [0x1800]
      LDS.U.128   R60, [0x1800] &wr=0 ?W2;                   // LDS.U.128 R60, [0x1800]
(!P1) BRA.U turing_hgemm_256x128_mods_nt_K_RESIDUE ?W4;      // @!P1 BRA.U turing_hgemm_256x128_mods_nt_K_RESIDUE
turing_hgemm_256x128_mods_nt_PRELOOP:
      STS.U16    [R80 + 0x0], R64 &req=2 ?W2;                // STS.U16 [sharedWriteA + 0x0], fetchRegA0
      STS.U16    [R80 + 0x40], R65 ?W2;                      // STS.U16 [sharedWriteA + 0x40], fetchRegA1
      STS.U16    [R80 + 0x80], R66 ?W2;                      // STS.U16 [sharedWriteA + 0x80], fetchRegA2
      STS.U16    [R80 + 0xc0], R67 ?W2;                      // STS.U16 [sharedWriteA + 0xc0], fetchRegA3
      STS.U16    [R80 + 0x100], R68 ?W2;                     // STS.U16 [sharedWriteA + 0x100], fetchRegA4
      STS.U16    [R80 + 0x140], R69 ?W2;                     // STS.U16 [sharedWriteA + 0x140], fetchRegA5
      STS.U16    [R80 + 0x180], R70 ?W2;                     // STS.U16 [sharedWriteA + 0x180], fetchRegA6
      STS.U16    [R80 + 0x1c0], R71 ?W2;                     // STS.U16 [sharedWriteA + 0x1c0], fetchRegA7
      STS.U16    [R81 + 0x0], R72 ?W2;                       // STS.U16 [sharedWriteB + 0x0], fetchRegB0
      STS.U16    [R81 + 0x40], R73 ?W2;                      // STS.U16 [sharedWriteB + 0x40], fetchRegB1
      STS.U16    [R81 + 0x80], R74 ?W2;                      // STS.U16 [sharedWriteB + 0x80], fetchRegB2
      STS.U16    [R81 + 0xc0], R75 &rd=1 ?W2;                // STS.U16 [sharedWriteB + 0xc0], fetchRegB3
      BAR.SYNC.DEFER_BLOCKING  0 ?W5;                        // BAR.SYNC.DEFER_BLOCKING 0
      IADD      R80, R80, R87 &req=1 ?W2;                    // IADD sharedWriteA, sharedWriteA, sharedPageFlip
      IADD      R81, R81, R87 ?W2;                           // IADD sharedWriteB, sharedWriteB, sharedPageFlip
// Virtual ?REQ_BAR found on next instruction, stop putting ?BARRIER_EXEMPT on decoupled instructions
      LDS.U.128 R88, [R76 + 0x0] &wr=0 ?W2;                  // LDS.U.128 A_r0_k0, [sharedA + 0x0]
      LDS.U.128 R104, [R77 + 0x0] &wr=0 ?W2;                 // LDS.U.128 B_c0_k0, [sharedB + 0x0]
      LDS.U.128 R92, [R76 + 0x80] &rd=1 &wr=0 ?W2;           // LDS.U.128 A_r8_k0, [sharedA + 0x80]
turing_hgemm_256x128_mods_nt_LOOP:
      HFMA2 R1, R88.reuse, R104.reuse.H0_H0, R1 &req={0,4} ?W1; // HFMA2 C_r0_c0, A_r0_k0.reuse, B_c0_k0.reuse.H0_H0, C_r0_c0
      ISETP.GE  P1, R85, 16 ?W1;                             // ISETP.GE P1, counterK, 16
      HFMA2 R0, R88.reuse, R105.reuse.H0_H0, R0 ?W2;         // HFMA2 C_r0_c2, A_r0_k0.reuse, B_c2_k0.reuse.H0_H0, C_r0_c2
      HFMA2 R3, R88.reuse, R104.reuse.H1_H1, R3 ?W1;         // HFMA2 C_r0_c1, A_r0_k0.reuse, B_c0_k0.reuse.H1_H1, C_r0_c1
      IADD32I   R85, R85, -8 ?W1;                            // IADD32I counterK, counterK, -8
      HFMA2 R2, R88, R105.reuse.H1_H1, R2 ?W2;               // HFMA2 C_r0_c3, A_r0_k0, B_c2_k0.reuse.H1_H1, C_r0_c3
      HFMA2 R9, R89.reuse, R104.reuse.H0_H0, R9 ?W1;         // HFMA2 C_r2_c0, A_r2_k0.reuse, B_c0_k0.reuse.H0_H0, C_r2_c0
      LDS.U.128 R96, [R76 + 0x200] &wr=0 ?W1;                // LDS.U.128 A_r0_k1, [sharedA + 0x200]
      HFMA2 R8, R89.reuse, R105.reuse.H0_H0, R8 ?W2;         // HFMA2 C_r2_c2, A_r2_k0.reuse, B_c2_k0.reuse.H0_H0, C_r2_c2
      HFMA2 R11, R89.reuse, R104.reuse.H1_H1, R11 ?W1;       // HFMA2 C_r2_c1, A_r2_k0.reuse, B_c0_k0.reuse.H1_H1, C_r2_c1
      LDS.U.128 R108, [R77 + 0x100] &wr=0 ?W1;               // LDS.U.128 B_c0_k1, [sharedB + 0x100]
      HFMA2 R10, R89, R105.reuse.H1_H1, R10 ?W2;             // HFMA2 C_r2_c3, A_r2_k0, B_c2_k0.reuse.H1_H1, C_r2_c3
      HFMA2 R17, R90.reuse, R104.reuse.H0_H0, R17 ?W1;       // HFMA2 C_r4_c0, A_r4_k0.reuse, B_c0_k0.reuse.H0_H0, C_r4_c0
(!P1) R2P PR, RZ.B0, 0x78 ?W1;                               // @!P1 R2P PR, RZ.B0, 0x78
      HFMA2 R16, R90.reuse, R105.reuse.H0_H0, R16 ?W2;       // HFMA2 C_r4_c2, A_r4_k0.reuse, B_c2_k0.reuse.H0_H0, C_r4_c2
      HFMA2 R19, R90.reuse, R104.reuse.H1_H1, R19 ?W1;       // HFMA2 C_r4_c1, A_r4_k0.reuse, B_c0_k0.reuse.H1_H1, C_r4_c1
(P1)  R2P PR, R86.B0, 0x78 ?W1;                              // @P1 R2P PR, raggedMnPreds0.B0, 0x78
      HFMA2 R18, R90, R105.reuse.H1_H1, R18 ?W2;             // HFMA2 C_r4_c3, A_r4_k0, B_c2_k0.reuse.H1_H1, C_r4_c3
      HFMA2 R25, R91.reuse, R104.reuse.H0_H0, R25 ?W1;       // HFMA2 C_r6_c0, A_r6_k0.reuse, B_c0_k0.reuse.H0_H0, C_r6_c0
      LDS.U.128 R100, [R76 + 0x280] &rd=1 &wr=0 ?W1;         // LDS.U.128 A_r8_k1, [sharedA + 0x280]
      HFMA2 R24, R91.reuse, R105.reuse.H0_H0, R24 ?W2;       // HFMA2 C_r6_c2, A_r6_k0.reuse, B_c2_k0.reuse.H0_H0, C_r6_c2
      HFMA2 R27, R91.reuse, R104.reuse.H1_H1, R27 ?W2;       // HFMA2 C_r6_c1, A_r6_k0.reuse, B_c0_k0.reuse.H1_H1, C_r6_c1
      HFMA2 R26, R91, R105.reuse.H1_H1, R26 ?W2;             // HFMA2 C_r6_c3, A_r6_k0, B_c2_k0.reuse.H1_H1, C_r6_c3
      HFMA2 R33, R92.reuse, R104.reuse.H0_H0, R33 ?W2;       // HFMA2 C_r8_c0, A_r8_k0.reuse, B_c0_k0.reuse.H0_H0, C_r8_c0
      HFMA2 R32, R92.reuse, R105.reuse.H0_H0, R32 ?W2;       // HFMA2 C_r8_c2, A_r8_k0.reuse, B_c2_k0.reuse.H0_H0, C_r8_c2
      HFMA2 R35, R92.reuse, R104.reuse.H1_H1, R35 ?W2;       // HFMA2 C_r8_c1, A_r8_k0.reuse, B_c0_k0.reuse.H1_H1, C_r8_c1
      HFMA2 R34, R92, R105.reuse.H1_H1, R34 ?W2;             // HFMA2 C_r8_c3, A_r8_k0, B_c2_k0.reuse.H1_H1, C_r8_c3
      HFMA2 R41, R93.reuse, R104.reuse.H0_H0, R41 ?W2;       // HFMA2 C_r10_c0, A_r10_k0.reuse, B_c0_k0.reuse.H0_H0, C_r10_c0
      HFMA2 R40, R93.reuse, R105.reuse.H0_H0, R40 ?W2;       // HFMA2 C_r10_c2, A_r10_k0.reuse, B_c2_k0.reuse.H0_H0, C_r10_c2
      HFMA2 R43, R93.reuse, R104.reuse.H1_H1, R43 ?W2;       // HFMA2 C_r10_c1, A_r10_k0.reuse, B_c0_k0.reuse.H1_H1, C_r10_c1
      HFMA2 R42, R93, R105.reuse.H1_H1, R42 ?W2;             // HFMA2 C_r10_c3, A_r10_k0, B_c2_k0.reuse.H1_H1, C_r10_c3
      HFMA2 R49, R94.reuse, R104.reuse.H0_H0, R49 ?W2;       // HFMA2 C_r12_c0, A_r12_k0.reuse, B_c0_k0.reuse.H0_H0, C_r12_c0
      HFMA2 R48, R94.reuse, R105.reuse.H0_H0, R48 ?W2;       // HFMA2 C_r12_c2, A_r12_k0.reuse, B_c2_k0.reuse.H0_H0, C_r12_c2
      HFMA2 R51, R94.reuse, R104.reuse.H1_H1, R51 ?W2;       // HFMA2 C_r12_c1, A_r12_k0.reuse, B_c0_k0.reuse.H1_H1, C_r12_c1
      HFMA2 R50, R94.reuse, R105.reuse.H1_H1, R50 ?W2;       // HFMA2 C_r12_c3, A_r12_k0.reuse, B_c2_k0.reuse.H1_H1, C_r12_c3
      HFMA2 R57, R95.reuse, R104.reuse.H0_H0, R57 ?W2;       // HFMA2 C_r14_c0, A_r14_k0.reuse, B_c0_k0.reuse.H0_H0, C_r14_c0
      HFMA2 R56, R95.reuse, R105.reuse.H0_H0, R56 ?W2;       // HFMA2 C_r14_c2, A_r14_k0.reuse, B_c2_k0.reuse.H0_H0, C_r14_c2
      HFMA2 R59, R95.reuse, R104.H1_H1, R59 ?W2;             // HFMA2 C_r14_c1, A_r14_k0.reuse, B_c0_k0.H1_H1, C_r14_c1
      HFMA2 R58, R95.reuse, R105.H1_H1, R58 ?W2;             // HFMA2 C_r14_c3, A_r14_k0.reuse, B_c2_k0.H1_H1, C_r14_c3
      HFMA2 R61, R95.reuse, R106.reuse.H0_H0, R61 ?W1;       // HFMA2 C_r14_c4, A_r14_k0.reuse, B_c4_k0.reuse.H0_H0, C_r14_c4
(P3)  LDG.E.EN.LTC128B.U16.CONSTANT.GPU  R64, [R82 + 0x0] &wr=2 ?W1; // @P3 LDG.E.EN.LTC128B.U16.CONSTANT.GPU fetchRegA0, [readPtrA + 0x0]
      HFMA2 R60, R95.reuse, R107.reuse.H0_H0, R60 ?W2;       // HFMA2 C_r14_c6, A_r14_k0.reuse, B_c6_k0.reuse.H0_H0, C_r14_c6
      HFMA2 R63, R95.reuse, R106.reuse.H1_H1, R63 ?W1;       // HFMA2 C_r14_c5, A_r14_k0.reuse, B_c4_k0.reuse.H1_H1, C_r14_c5
(P4)  LDG.E.EN.LTC128B.U16.CONSTANT.GPU  R65, [R82 + 0x40] &wr=2 ?W1; // @P4 LDG.E.EN.LTC128B.U16.CONSTANT.GPU fetchRegA1, [readPtrA + 0x40]
      HFMA2 R62, R95, R107.reuse.H1_H1, R62 ?W2;             // HFMA2 C_r14_c7, A_r14_k0, B_c6_k0.reuse.H1_H1, C_r14_c7
      HFMA2 R53, R94.reuse, R106.reuse.H0_H0, R53 ?W1;       // HFMA2 C_r12_c4, A_r12_k0.reuse, B_c4_k0.reuse.H0_H0, C_r12_c4
(P5)  LDG.E.EN.LTC128B.U16.CONSTANT.GPU  R66, [R82 + 0x80] &wr=2 ?W1; // @P5 LDG.E.EN.LTC128B.U16.CONSTANT.GPU fetchRegA2, [readPtrA + 0x80]
      HFMA2 R52, R94.reuse, R107.reuse.H0_H0, R52 ?W2;       // HFMA2 C_r12_c6, A_r12_k0.reuse, B_c6_k0.reuse.H0_H0, C_r12_c6
      HFMA2 R55, R94.reuse, R106.reuse.H1_H1, R55 ?W1;       // HFMA2 C_r12_c5, A_r12_k0.reuse, B_c4_k0.reuse.H1_H1, C_r12_c5
(P6)  LDG.E.EN.LTC128B.U16.CONSTANT.GPU  R67, [R82 + 0xc0] &wr=2 ?W1; // @P6 LDG.E.EN.LTC128B.U16.CONSTANT.GPU fetchRegA3, [readPtrA + 0xc0]
      HFMA2 R54, R94, R107.reuse.H1_H1, R54 ?W2;             // HFMA2 C_r12_c7, A_r12_k0, B_c6_k0.reuse.H1_H1, C_r12_c7
      HFMA2 R45, R93.reuse, R106.reuse.H0_H0, R45 ?W1;       // HFMA2 C_r10_c4, A_r10_k0.reuse, B_c4_k0.reuse.H0_H0, C_r10_c4
(P1)  R2P PR, R86.B1, 0x78 ?W1;                              // @P1 R2P PR, raggedMnPreds0.B1, 0x78
      HFMA2 R44, R93.reuse, R107.reuse.H0_H0, R44 ?W2;       // HFMA2 C_r10_c6, A_r10_k0.reuse, B_c6_k0.reuse.H0_H0, C_r10_c6
      HFMA2 R47, R93.reuse, R106.reuse.H1_H1, R47 ?W9;       // HFMA2 C_r10_c5, A_r10_k0.reuse, B_c4_k0.reuse.H1_H1, C_r10_c5
(P3)  LDG.E.EN.LTC128B.U16.CONSTANT.GPU  R68, [R82 + 0x100] &wr=2 ?W1; // @P3 LDG.E.EN.LTC128B.U16.CONSTANT.GPU fetchRegA4, [readPtrA + 0x100]
      HFMA2 R46, R93, R107.reuse.H1_H1, R46 ?W2;             // HFMA2 C_r10_c7, A_r10_k0, B_c6_k0.reuse.H1_H1, C_r10_c7
      HFMA2 R37, R92.reuse, R106.reuse.H0_H0, R37 ?W1;       // HFMA2 C_r8_c4, A_r8_k0.reuse, B_c4_k0.reuse.H0_H0, C_r8_c4
(P4)  LDG.E.EN.LTC128B.U16.CONSTANT.GPU  R69, [R82 + 0x140] &wr=2 ?W1; // @P4 LDG.E.EN.LTC128B.U16.CONSTANT.GPU fetchRegA5, [readPtrA + 0x140]
      HFMA2 R36, R92.reuse, R107.reuse.H0_H0, R36 ?W2;       // HFMA2 C_r8_c6, A_r8_k0.reuse, B_c6_k0.reuse.H0_H0, C_r8_c6
      HFMA2 R39, R92.reuse, R106.reuse.H1_H1, R39 ?W1;       // HFMA2 C_r8_c5, A_r8_k0.reuse, B_c4_k0.reuse.H1_H1, C_r8_c5
(P5)  LDG.E.EN.LTC128B.U16.CONSTANT.GPU  R70, [R82 + 0x180] &wr=2 ?W1; // @P5 LDG.E.EN.LTC128B.U16.CONSTANT.GPU fetchRegA6, [readPtrA + 0x180]
      HFMA2 R38, R92, R107.reuse.H1_H1, R38 ?W2;             // HFMA2 C_r8_c7, A_r8_k0, B_c6_k0.reuse.H1_H1, C_r8_c7
      HFMA2 R29, R91.reuse, R106.reuse.H0_H0, R29 ?W1;       // HFMA2 C_r6_c4, A_r6_k0.reuse, B_c4_k0.reuse.H0_H0, C_r6_c4
(P6)  LDG.E.EN.LTC128B.U16.CONSTANT.GPU  R71, [R82 + 0x1c0] &rd=3 &wr=2 ?W1; // @P6 LDG.E.EN.LTC128B.U16.CONSTANT.GPU fetchRegA7, [readPtrA + 0x1c0]
      HFMA2 R28, R91.reuse, R107.reuse.H0_H0, R28 ?W2;       // HFMA2 C_r6_c6, A_r6_k0.reuse, B_c6_k0.reuse.H0_H0, C_r6_c6
      HFMA2 R31, R91.reuse, R106.reuse.H1_H1, R31 ?W2;       // HFMA2 C_r6_c5, A_r6_k0.reuse, B_c4_k0.reuse.H1_H1, C_r6_c5
      HFMA2 R30, R91, R107.reuse.H1_H1, R30 ?W2;             // HFMA2 C_r6_c7, A_r6_k0, B_c6_k0.reuse.H1_H1, C_r6_c7
      HFMA2 R21, R90.reuse, R106.reuse.H0_H0, R21 ?W2;       // HFMA2 C_r4_c4, A_r4_k0.reuse, B_c4_k0.reuse.H0_H0, C_r4_c4
      HFMA2 R20, R90.reuse, R107.reuse.H0_H0, R20 ?W2;       // HFMA2 C_r4_c6, A_r4_k0.reuse, B_c6_k0.reuse.H0_H0, C_r4_c6
      HFMA2 R23, R90.reuse, R106.reuse.H1_H1, R23 ?W2;       // HFMA2 C_r4_c5, A_r4_k0.reuse, B_c4_k0.reuse.H1_H1, C_r4_c5
      HFMA2 R22, R90, R107.reuse.H1_H1, R22 ?W2;             // HFMA2 C_r4_c7, A_r4_k0, B_c6_k0.reuse.H1_H1, C_r4_c7
      HFMA2 R13, R89.reuse, R106.reuse.H0_H0, R13 ?W2;       // HFMA2 C_r2_c4, A_r2_k0.reuse, B_c4_k0.reuse.H0_H0, C_r2_c4
      HFMA2 R12, R89.reuse, R107.reuse.H0_H0, R12 ?W2;       // HFMA2 C_r2_c6, A_r2_k0.reuse, B_c6_k0.reuse.H0_H0, C_r2_c6
      HFMA2 R15, R89.reuse, R106.reuse.H1_H1, R15 ?W2;       // HFMA2 C_r2_c5, A_r2_k0.reuse, B_c4_k0.reuse.H1_H1, C_r2_c5
      HFMA2 R14, R89, R107.reuse.H1_H1, R14 ?W2;             // HFMA2 C_r2_c7, A_r2_k0, B_c6_k0.reuse.H1_H1, C_r2_c7
      HFMA2 R5, R88.reuse, R106.reuse.H0_H0, R5 ?W2;         // HFMA2 C_r0_c4, A_r0_k0.reuse, B_c4_k0.reuse.H0_H0, C_r0_c4
      HFMA2 R4, R88.reuse, R107.reuse.H0_H0, R4 ?W2;         // HFMA2 C_r0_c6, A_r0_k0.reuse, B_c6_k0.reuse.H0_H0, C_r0_c6
      HFMA2 R7, R88.reuse, R106.H1_H1, R7 ?W2;               // HFMA2 C_r0_c5, A_r0_k0.reuse, B_c4_k0.H1_H1, C_r0_c5
      HFMA2 R6, R88, R107.H1_H1, R6 &wr=4 ?W2EG;             // HFMA2 C_r0_c7, A_r0_k0, B_c6_k0.H1_H1, C_r0_c7
      HFMA2 R1, R96.reuse, R108.reuse.H0_H0, R1 &req={0,4} ?W1; // HFMA2 C_r0_c0, A_r0_k1.reuse, B_c0_k1.reuse.H0_H0, C_r0_c0
(P1)  IADD   R82, P2, R82,   c[0][0x188] &req=3 ?W1;         // @P1 IADD readPtrA, predCarry, readPtrA, IncSlowA
      HFMA2 R0, R96.reuse, R109.reuse.H0_H0, R0 ?W2;         // HFMA2 C_r0_c2, A_r0_k1.reuse, B_c2_k1.reuse.H0_H0, C_r0_c2
      HFMA2 R3, R96.reuse, R108.reuse.H1_H1, R3 ?W1;         // HFMA2 C_r0_c1, A_r0_k1.reuse, B_c0_k1.reuse.H1_H1, C_r0_c1
(P1)  IADD.X R83,         R83, c[0][0x18c], P2 ?W1;          // @P1 IADD.X readPtrA_HI, readPtrA_HI, IncSlowA_HI, predCarry
      HFMA2 R2, R96, R109.reuse.H1_H1, R2 ?W2;               // HFMA2 C_r0_c3, A_r0_k1, B_c2_k1.reuse.H1_H1, C_r0_c3
      HFMA2 R9, R97.reuse, R108.reuse.H0_H0, R9 ?W1;         // HFMA2 C_r2_c0, A_r2_k1.reuse, B_c0_k1.reuse.H0_H0, C_r2_c0
(P1)  R2P PR, R86.B2, 0x78 ?W1;                              // @P1 R2P PR, raggedMnPreds0.B2, 0x78
      HFMA2 R8, R97.reuse, R109.reuse.H0_H0, R8 ?W2;         // HFMA2 C_r2_c2, A_r2_k1.reuse, B_c2_k1.reuse.H0_H0, C_r2_c2
      HFMA2 R11, R97.reuse, R108.reuse.H1_H1, R11 ?W1;       // HFMA2 C_r2_c1, A_r2_k1.reuse, B_c0_k1.reuse.H1_H1, C_r2_c1
      LDS.U.128 R88, [R76 + 0x400] &wr=0 ?W1;                // LDS.U.128 A_r0_k0, [sharedA + 0x400]
      HFMA2 R10, R97, R109.reuse.H1_H1, R10 ?W2;             // HFMA2 C_r2_c3, A_r2_k1, B_c2_k1.reuse.H1_H1, C_r2_c3
      HFMA2 R17, R98.reuse, R108.reuse.H0_H0, R17 ?W1;       // HFMA2 C_r4_c0, A_r4_k1.reuse, B_c0_k1.reuse.H0_H0, C_r4_c0
      LDS.U.128 R104, [R77 + 0x200] &wr=0 ?W1;               // LDS.U.128 B_c0_k0, [sharedB + 0x200]
      HFMA2 R16, R98.reuse, R109.reuse.H0_H0, R16 ?W2;       // HFMA2 C_r4_c2, A_r4_k1.reuse, B_c2_k1.reuse.H0_H0, C_r4_c2
      HFMA2 R19, R98.reuse, R108.reuse.H1_H1, R19 ?W1;       // HFMA2 C_r4_c1, A_r4_k1.reuse, B_c0_k1.reuse.H1_H1, C_r4_c1
      LDS.U.128 R92, [R76 + 0x480] &rd=1 &wr=0 ?W1;          // LDS.U.128 A_r8_k0, [sharedA + 0x480]
      HFMA2 R18, R98, R109.reuse.H1_H1, R18 ?W2;             // HFMA2 C_r4_c3, A_r4_k1, B_c2_k1.reuse.H1_H1, C_r4_c3
      HFMA2 R25, R99.reuse, R108.reuse.H0_H0, R25 ?W2;       // HFMA2 C_r6_c0, A_r6_k1.reuse, B_c0_k1.reuse.H0_H0, C_r6_c0
      HFMA2 R24, R99.reuse, R109.reuse.H0_H0, R24 ?W2;       // HFMA2 C_r6_c2, A_r6_k1.reuse, B_c2_k1.reuse.H0_H0, C_r6_c2
      HFMA2 R27, R99.reuse, R108.reuse.H1_H1, R27 ?W2;       // HFMA2 C_r6_c1, A_r6_k1.reuse, B_c0_k1.reuse.H1_H1, C_r6_c1
      HFMA2 R26, R99, R109.reuse.H1_H1, R26 ?W2;             // HFMA2 C_r6_c3, A_r6_k1, B_c2_k1.reuse.H1_H1, C_r6_c3
      HFMA2 R33, R100.reuse, R108.reuse.H0_H0, R33 ?W2;      // HFMA2 C_r8_c0, A_r8_k1.reuse, B_c0_k1.reuse.H0_H0, C_r8_c0
      HFMA2 R32, R100.reuse, R109.reuse.H0_H0, R32 ?W2;      // HFMA2 C_r8_c2, A_r8_k1.reuse, B_c2_k1.reuse.H0_H0, C_r8_c2
      HFMA2 R35, R100.reuse, R108.reuse.H1_H1, R35 ?W2;      // HFMA2 C_r8_c1, A_r8_k1.reuse, B_c0_k1.reuse.H1_H1, C_r8_c1
      HFMA2 R34, R100, R109.reuse.H1_H1, R34 ?W2;            // HFMA2 C_r8_c3, A_r8_k1, B_c2_k1.reuse.H1_H1, C_r8_c3
      HFMA2 R41, R101.reuse, R108.reuse.H0_H0, R41 ?W2;      // HFMA2 C_r10_c0, A_r10_k1.reuse, B_c0_k1.reuse.H0_H0, C_r10_c0
      HFMA2 R40, R101.reuse, R109.reuse.H0_H0, R40 ?W2;      // HFMA2 C_r10_c2, A_r10_k1.reuse, B_c2_k1.reuse.H0_H0, C_r10_c2
      HFMA2 R43, R101.reuse, R108.reuse.H1_H1, R43 ?W2;      // HFMA2 C_r10_c1, A_r10_k1.reuse, B_c0_k1.reuse.H1_H1, C_r10_c1
      HFMA2 R42, R101, R109.reuse.H1_H1, R42 ?W2;            // HFMA2 C_r10_c3, A_r10_k1, B_c2_k1.reuse.H1_H1, C_r10_c3
      HFMA2 R49, R102.reuse, R108.reuse.H0_H0, R49 ?W2;      // HFMA2 C_r12_c0, A_r12_k1.reuse, B_c0_k1.reuse.H0_H0, C_r12_c0
      HFMA2 R48, R102.reuse, R109.reuse.H0_H0, R48 ?W2;      // HFMA2 C_r12_c2, A_r12_k1.reuse, B_c2_k1.reuse.H0_H0, C_r12_c2
      HFMA2 R51, R102.reuse, R108.reuse.H1_H1, R51 ?W2;      // HFMA2 C_r12_c1, A_r12_k1.reuse, B_c0_k1.reuse.H1_H1, C_r12_c1
      HFMA2 R50, R102.reuse, R109.reuse.H1_H1, R50 ?W2;      // HFMA2 C_r12_c3, A_r12_k1.reuse, B_c2_k1.reuse.H1_H1, C_r12_c3
      HFMA2 R57, R103.reuse, R108.reuse.H0_H0, R57 ?W2;      // HFMA2 C_r14_c0, A_r14_k1.reuse, B_c0_k1.reuse.H0_H0, C_r14_c0
      HFMA2 R56, R103.reuse, R109.reuse.H0_H0, R56 ?W2;      // HFMA2 C_r14_c2, A_r14_k1.reuse, B_c2_k1.reuse.H0_H0, C_r14_c2
      HFMA2 R59, R103.reuse, R108.H1_H1, R59 ?W2;            // HFMA2 C_r14_c1, A_r14_k1.reuse, B_c0_k1.H1_H1, C_r14_c1
      HFMA2 R58, R103.reuse, R109.H1_H1, R58 ?W2;            // HFMA2 C_r14_c3, A_r14_k1.reuse, B_c2_k1.H1_H1, C_r14_c3
      HFMA2 R61, R103.reuse, R110.reuse.H0_H0, R61 ?W1;      // HFMA2 C_r14_c4, A_r14_k1.reuse, B_c4_k1.reuse.H0_H0, C_r14_c4
(P3)  LDG.E.EN.LTC128B.U16.CONSTANT.GPU  R72, [R78 + 0x0] &wr=2 ?W1; // @P3 LDG.E.EN.LTC128B.U16.CONSTANT.GPU fetchRegB0, [readPtrB + 0x0]
      HFMA2 R60, R103.reuse, R111.reuse.H0_H0, R60 ?W2;      // HFMA2 C_r14_c6, A_r14_k1.reuse, B_c6_k1.reuse.H0_H0, C_r14_c6
      HFMA2 R63, R103.reuse, R110.reuse.H1_H1, R63 ?W1;      // HFMA2 C_r14_c5, A_r14_k1.reuse, B_c4_k1.reuse.H1_H1, C_r14_c5
(P4)  LDG.E.EN.LTC128B.U16.CONSTANT.GPU  R73, [R78 + 0x40] &wr=2 ?W1; // @P4 LDG.E.EN.LTC128B.U16.CONSTANT.GPU fetchRegB1, [readPtrB + 0x40]
      HFMA2 R62, R103, R111.reuse.H1_H1, R62 ?W2;            // HFMA2 C_r14_c7, A_r14_k1, B_c6_k1.reuse.H1_H1, C_r14_c7
      HFMA2 R53, R102.reuse, R110.reuse.H0_H0, R53 ?W1;      // HFMA2 C_r12_c4, A_r12_k1.reuse, B_c4_k1.reuse.H0_H0, C_r12_c4
(P5)  LDG.E.EN.LTC128B.U16.CONSTANT.GPU  R74, [R78 + 0x80] &wr=2 ?W1; // @P5 LDG.E.EN.LTC128B.U16.CONSTANT.GPU fetchRegB2, [readPtrB + 0x80]
      HFMA2 R52, R102.reuse, R111.reuse.H0_H0, R52 ?W2;      // HFMA2 C_r12_c6, A_r12_k1.reuse, B_c6_k1.reuse.H0_H0, C_r12_c6
      HFMA2 R55, R102.reuse, R110.reuse.H1_H1, R55 ?W1;      // HFMA2 C_r12_c5, A_r12_k1.reuse, B_c4_k1.reuse.H1_H1, C_r12_c5
(P6)  LDG.E.EN.LTC128B.U16.CONSTANT.GPU  R75, [R78 + 0xc0] &rd=3 &wr=2 ?W1; // @P6 LDG.E.EN.LTC128B.U16.CONSTANT.GPU fetchRegB3, [readPtrB + 0xc0]
      HFMA2 R54, R102, R111.reuse.H1_H1, R54 ?W2;            // HFMA2 C_r12_c7, A_r12_k1, B_c6_k1.reuse.H1_H1, C_r12_c7
      HFMA2 R45, R101.reuse, R110.reuse.H0_H0, R45 ?W2;      // HFMA2 C_r10_c4, A_r10_k1.reuse, B_c4_k1.reuse.H0_H0, C_r10_c4
      HFMA2 R44, R101.reuse, R111.reuse.H0_H0, R44 ?W2;      // HFMA2 C_r10_c6, A_r10_k1.reuse, B_c6_k1.reuse.H0_H0, C_r10_c6
      HFMA2 R47, R101.reuse, R110.reuse.H1_H1, R47 ?W2;      // HFMA2 C_r10_c5, A_r10_k1.reuse, B_c4_k1.reuse.H1_H1, C_r10_c5
      HFMA2 R46, R101, R111.reuse.H1_H1, R46 ?W2;            // HFMA2 C_r10_c7, A_r10_k1, B_c6_k1.reuse.H1_H1, C_r10_c7
      HFMA2 R37, R100.reuse, R110.reuse.H0_H0, R37 ?W2;      // HFMA2 C_r8_c4, A_r8_k1.reuse, B_c4_k1.reuse.H0_H0, C_r8_c4
      HFMA2 R36, R100.reuse, R111.reuse.H0_H0, R36 ?W2;      // HFMA2 C_r8_c6, A_r8_k1.reuse, B_c6_k1.reuse.H0_H0, C_r8_c6
      HFMA2 R39, R100.reuse, R110.reuse.H1_H1, R39 ?W2;      // HFMA2 C_r8_c5, A_r8_k1.reuse, B_c4_k1.reuse.H1_H1, C_r8_c5
      HFMA2 R38, R100, R111.reuse.H1_H1, R38 ?W2;            // HFMA2 C_r8_c7, A_r8_k1, B_c6_k1.reuse.H1_H1, C_r8_c7
      HFMA2 R29, R99.reuse, R110.reuse.H0_H0, R29 ?W2;       // HFMA2 C_r6_c4, A_r6_k1.reuse, B_c4_k1.reuse.H0_H0, C_r6_c4
      HFMA2 R28, R99.reuse, R111.reuse.H0_H0, R28 ?W2;       // HFMA2 C_r6_c6, A_r6_k1.reuse, B_c6_k1.reuse.H0_H0, C_r6_c6
      HFMA2 R31, R99.reuse, R110.reuse.H1_H1, R31 ?W2;       // HFMA2 C_r6_c5, A_r6_k1.reuse, B_c4_k1.reuse.H1_H1, C_r6_c5
      HFMA2 R30, R99, R111.reuse.H1_H1, R30 ?W2;             // HFMA2 C_r6_c7, A_r6_k1, B_c6_k1.reuse.H1_H1, C_r6_c7
      HFMA2 R21, R98.reuse, R110.reuse.H0_H0, R21 ?W2;       // HFMA2 C_r4_c4, A_r4_k1.reuse, B_c4_k1.reuse.H0_H0, C_r4_c4
      HFMA2 R20, R98.reuse, R111.reuse.H0_H0, R20 ?W2;       // HFMA2 C_r4_c6, A_r4_k1.reuse, B_c6_k1.reuse.H0_H0, C_r4_c6
      HFMA2 R23, R98.reuse, R110.reuse.H1_H1, R23 ?W2;       // HFMA2 C_r4_c5, A_r4_k1.reuse, B_c4_k1.reuse.H1_H1, C_r4_c5
      HFMA2 R22, R98, R111.reuse.H1_H1, R22 ?W2;             // HFMA2 C_r4_c7, A_r4_k1, B_c6_k1.reuse.H1_H1, C_r4_c7
      HFMA2 R13, R97.reuse, R110.reuse.H0_H0, R13 ?W2;       // HFMA2 C_r2_c4, A_r2_k1.reuse, B_c4_k1.reuse.H0_H0, C_r2_c4
      HFMA2 R12, R97.reuse, R111.reuse.H0_H0, R12 ?W2;       // HFMA2 C_r2_c6, A_r2_k1.reuse, B_c6_k1.reuse.H0_H0, C_r2_c6
      HFMA2 R15, R97.reuse, R110.reuse.H1_H1, R15 ?W2;       // HFMA2 C_r2_c5, A_r2_k1.reuse, B_c4_k1.reuse.H1_H1, C_r2_c5
      HFMA2 R14, R97, R111.reuse.H1_H1, R14 ?W2;             // HFMA2 C_r2_c7, A_r2_k1, B_c6_k1.reuse.H1_H1, C_r2_c7
      HFMA2 R5, R96.reuse, R110.reuse.H0_H0, R5 ?W2;         // HFMA2 C_r0_c4, A_r0_k1.reuse, B_c4_k1.reuse.H0_H0, C_r0_c4
      HFMA2 R4, R96.reuse, R111.reuse.H0_H0, R4 ?W2;         // HFMA2 C_r0_c6, A_r0_k1.reuse, B_c6_k1.reuse.H0_H0, C_r0_c6
      HFMA2 R7, R96.reuse, R110.H1_H1, R7 ?W2;               // HFMA2 C_r0_c5, A_r0_k1.reuse, B_c4_k1.H1_H1, C_r0_c5
      HFMA2 R6, R96, R111.H1_H1, R6 &wr=4 ?W2EG;             // HFMA2 C_r0_c7, A_r0_k1, B_c6_k1.H1_H1, C_r0_c7
      HFMA2 R1, R88.reuse, R104.reuse.H0_H0, R1 &req={0,4} ?W1; // HFMA2 C_r0_c0, A_r0_k0.reuse, B_c0_k0.reuse.H0_H0, C_r0_c0
(P1)  IADD   R78, P2, R78,   c[0][0x190] &req=3 ?W1;         // @P1 IADD readPtrB, predCarry, readPtrB, IncSlowB
      HFMA2 R0, R88.reuse, R105.reuse.H0_H0, R0 ?W2;         // HFMA2 C_r0_c2, A_r0_k0.reuse, B_c2_k0.reuse.H0_H0, C_r0_c2
      HFMA2 R3, R88.reuse, R104.reuse.H1_H1, R3 ?W1;         // HFMA2 C_r0_c1, A_r0_k0.reuse, B_c0_k0.reuse.H1_H1, C_r0_c1
(P1)  IADD.X R79,         R79, c[0][0x194], P2 ?W1;          // @P1 IADD.X readPtrB_HI, readPtrB_HI, IncSlowB_HI, predCarry
      HFMA2 R2, R88, R105.reuse.H1_H1, R2 ?W2;               // HFMA2 C_r0_c3, A_r0_k0, B_c2_k0.reuse.H1_H1, C_r0_c3
      HFMA2 R9, R89.reuse, R104.reuse.H0_H0, R9 ?W1;         // HFMA2 C_r2_c0, A_r2_k0.reuse, B_c0_k0.reuse.H0_H0, C_r2_c0
      LDS.U.128 R96, [R76 + 0x600] &wr=0 ?W1;                // LDS.U.128 A_r0_k1, [sharedA + 0x600]
      HFMA2 R8, R89.reuse, R105.reuse.H0_H0, R8 ?W2;         // HFMA2 C_r2_c2, A_r2_k0.reuse, B_c2_k0.reuse.H0_H0, C_r2_c2
      HFMA2 R11, R89.reuse, R104.reuse.H1_H1, R11 ?W1;       // HFMA2 C_r2_c1, A_r2_k0.reuse, B_c0_k0.reuse.H1_H1, C_r2_c1
      LDS.U.128 R108, [R77 + 0x300] &wr=0 ?W1;               // LDS.U.128 B_c0_k1, [sharedB + 0x300]
      HFMA2 R10, R89, R105.reuse.H1_H1, R10 ?W2;             // HFMA2 C_r2_c3, A_r2_k0, B_c2_k0.reuse.H1_H1, C_r2_c3
      HFMA2 R17, R90.reuse, R104.reuse.H0_H0, R17 ?W1;       // HFMA2 C_r4_c0, A_r4_k0.reuse, B_c0_k0.reuse.H0_H0, C_r4_c0
      LDS.U.128 R100, [R76 + 0x680] &rd=1 &wr=0 ?W1;         // LDS.U.128 A_r8_k1, [sharedA + 0x680]
      HFMA2 R16, R90.reuse, R105.reuse.H0_H0, R16 ?W2;       // HFMA2 C_r4_c2, A_r4_k0.reuse, B_c2_k0.reuse.H0_H0, C_r4_c2
      HFMA2 R19, R90.reuse, R104.reuse.H1_H1, R19 ?W2;       // HFMA2 C_r4_c1, A_r4_k0.reuse, B_c0_k0.reuse.H1_H1, C_r4_c1
      HFMA2 R18, R90, R105.reuse.H1_H1, R18 ?W2;             // HFMA2 C_r4_c3, A_r4_k0, B_c2_k0.reuse.H1_H1, C_r4_c3
      HFMA2 R25, R91.reuse, R104.reuse.H0_H0, R25 ?W2;       // HFMA2 C_r6_c0, A_r6_k0.reuse, B_c0_k0.reuse.H0_H0, C_r6_c0
      HFMA2 R24, R91.reuse, R105.reuse.H0_H0, R24 ?W2;       // HFMA2 C_r6_c2, A_r6_k0.reuse, B_c2_k0.reuse.H0_H0, C_r6_c2
      HFMA2 R27, R91.reuse, R104.reuse.H1_H1, R27 ?W2;       // HFMA2 C_r6_c1, A_r6_k0.reuse, B_c0_k0.reuse.H1_H1, C_r6_c1
      HFMA2 R26, R91, R105.reuse.H1_H1, R26 ?W2;             // HFMA2 C_r6_c3, A_r6_k0, B_c2_k0.reuse.H1_H1, C_r6_c3
      HFMA2 R33, R92.reuse, R104.reuse.H0_H0, R33 ?W2;       // HFMA2 C_r8_c0, A_r8_k0.reuse, B_c0_k0.reuse.H0_H0, C_r8_c0
      HFMA2 R32, R92.reuse, R105.reuse.H0_H0, R32 ?W2;       // HFMA2 C_r8_c2, A_r8_k0.reuse, B_c2_k0.reuse.H0_H0, C_r8_c2
      HFMA2 R35, R92.reuse, R104.reuse.H1_H1, R35 ?W2;       // HFMA2 C_r8_c1, A_r8_k0.reuse, B_c0_k0.reuse.H1_H1, C_r8_c1
      HFMA2 R34, R92, R105.reuse.H1_H1, R34 ?W2;             // HFMA2 C_r8_c3, A_r8_k0, B_c2_k0.reuse.H1_H1, C_r8_c3
      HFMA2 R41, R93.reuse, R104.reuse.H0_H0, R41 ?W2;       // HFMA2 C_r10_c0, A_r10_k0.reuse, B_c0_k0.reuse.H0_H0, C_r10_c0
      HFMA2 R40, R93.reuse, R105.reuse.H0_H0, R40 ?W2;       // HFMA2 C_r10_c2, A_r10_k0.reuse, B_c2_k0.reuse.H0_H0, C_r10_c2
      HFMA2 R43, R93.reuse, R104.reuse.H1_H1, R43 ?W2;       // HFMA2 C_r10_c1, A_r10_k0.reuse, B_c0_k0.reuse.H1_H1, C_r10_c1
      HFMA2 R42, R93, R105.reuse.H1_H1, R42 ?W2;             // HFMA2 C_r10_c3, A_r10_k0, B_c2_k0.reuse.H1_H1, C_r10_c3
      HFMA2 R49, R94.reuse, R104.reuse.H0_H0, R49 ?W2;       // HFMA2 C_r12_c0, A_r12_k0.reuse, B_c0_k0.reuse.H0_H0, C_r12_c0
      HFMA2 R48, R94.reuse, R105.reuse.H0_H0, R48 ?W2;       // HFMA2 C_r12_c2, A_r12_k0.reuse, B_c2_k0.reuse.H0_H0, C_r12_c2
      HFMA2 R51, R94.reuse, R104.reuse.H1_H1, R51 ?W2;       // HFMA2 C_r12_c1, A_r12_k0.reuse, B_c0_k0.reuse.H1_H1, C_r12_c1
      HFMA2 R50, R94.reuse, R105.reuse.H1_H1, R50 ?W2;       // HFMA2 C_r12_c3, A_r12_k0.reuse, B_c2_k0.reuse.H1_H1, C_r12_c3
      HFMA2 R57, R95.reuse, R104.reuse.H0_H0, R57 ?W2;       // HFMA2 C_r14_c0, A_r14_k0.reuse, B_c0_k0.reuse.H0_H0, C_r14_c0
      HFMA2 R56, R95.reuse, R105.reuse.H0_H0, R56 ?W2;       // HFMA2 C_r14_c2, A_r14_k0.reuse, B_c2_k0.reuse.H0_H0, C_r14_c2
      HFMA2 R59, R95.reuse, R104.H1_H1, R59 ?W2;             // HFMA2 C_r14_c1, A_r14_k0.reuse, B_c0_k0.H1_H1, C_r14_c1
      HFMA2 R58, R95.reuse, R105.H1_H1, R58 ?W2;             // HFMA2 C_r14_c3, A_r14_k0.reuse, B_c2_k0.H1_H1, C_r14_c3
      HFMA2 R61, R95.reuse, R106.reuse.H0_H0, R61 ?W2;       // HFMA2 C_r14_c4, A_r14_k0.reuse, B_c4_k0.reuse.H0_H0, C_r14_c4
      HFMA2 R60, R95.reuse, R107.reuse.H0_H0, R60 ?W2;       // HFMA2 C_r14_c6, A_r14_k0.reuse, B_c6_k0.reuse.H0_H0, C_r14_c6
      HFMA2 R63, R95.reuse, R106.reuse.H1_H1, R63 ?W2;       // HFMA2 C_r14_c5, A_r14_k0.reuse, B_c4_k0.reuse.H1_H1, C_r14_c5
      HFMA2 R62, R95, R107.reuse.H1_H1, R62 ?W2;             // HFMA2 C_r14_c7, A_r14_k0, B_c6_k0.reuse.H1_H1, C_r14_c7
      HFMA2 R53, R94.reuse, R106.reuse.H0_H0, R53 ?W2;       // HFMA2 C_r12_c4, A_r12_k0.reuse, B_c4_k0.reuse.H0_H0, C_r12_c4
      HFMA2 R52, R94.reuse, R107.reuse.H0_H0, R52 ?W2;       // HFMA2 C_r12_c6, A_r12_k0.reuse, B_c6_k0.reuse.H0_H0, C_r12_c6
      HFMA2 R55, R94.reuse, R106.reuse.H1_H1, R55 ?W2;       // HFMA2 C_r12_c5, A_r12_k0.reuse, B_c4_k0.reuse.H1_H1, C_r12_c5
      HFMA2 R54, R94, R107.reuse.H1_H1, R54 ?W2;             // HFMA2 C_r12_c7, A_r12_k0, B_c6_k0.reuse.H1_H1, C_r12_c7
      HFMA2 R45, R93.reuse, R106.reuse.H0_H0, R45 ?W2;       // HFMA2 C_r10_c4, A_r10_k0.reuse, B_c4_k0.reuse.H0_H0, C_r10_c4
      HFMA2 R44, R93.reuse, R107.reuse.H0_H0, R44 ?W2;       // HFMA2 C_r10_c6, A_r10_k0.reuse, B_c6_k0.reuse.H0_H0, C_r10_c6
      HFMA2 R47, R93.reuse, R106.reuse.H1_H1, R47 ?W2;       // HFMA2 C_r10_c5, A_r10_k0.reuse, B_c4_k0.reuse.H1_H1, C_r10_c5
      HFMA2 R46, R93, R107.reuse.H1_H1, R46 ?W2;             // HFMA2 C_r10_c7, A_r10_k0, B_c6_k0.reuse.H1_H1, C_r10_c7
      HFMA2 R37, R92.reuse, R106.reuse.H0_H0, R37 ?W2;       // HFMA2 C_r8_c4, A_r8_k0.reuse, B_c4_k0.reuse.H0_H0, C_r8_c4
      HFMA2 R36, R92.reuse, R107.reuse.H0_H0, R36 ?W2;       // HFMA2 C_r8_c6, A_r8_k0.reuse, B_c6_k0.reuse.H0_H0, C_r8_c6
      HFMA2 R39, R92.reuse, R106.reuse.H1_H1, R39 ?W2;       // HFMA2 C_r8_c5, A_r8_k0.reuse, B_c4_k0.reuse.H1_H1, C_r8_c5
      HFMA2 R38, R92, R107.reuse.H1_H1, R38 ?W2;             // HFMA2 C_r8_c7, A_r8_k0, B_c6_k0.reuse.H1_H1, C_r8_c7
      HFMA2 R29, R91.reuse, R106.reuse.H0_H0, R29 ?W2;       // HFMA2 C_r6_c4, A_r6_k0.reuse, B_c4_k0.reuse.H0_H0, C_r6_c4
      HFMA2 R28, R91.reuse, R107.reuse.H0_H0, R28 ?W2;       // HFMA2 C_r6_c6, A_r6_k0.reuse, B_c6_k0.reuse.H0_H0, C_r6_c6
      HFMA2 R31, R91.reuse, R106.reuse.H1_H1, R31 ?W2;       // HFMA2 C_r6_c5, A_r6_k0.reuse, B_c4_k0.reuse.H1_H1, C_r6_c5
      HFMA2 R30, R91, R107.reuse.H1_H1, R30 ?W2;             // HFMA2 C_r6_c7, A_r6_k0, B_c6_k0.reuse.H1_H1, C_r6_c7
      HFMA2 R21, R90.reuse, R106.reuse.H0_H0, R21 ?W2;       // HFMA2 C_r4_c4, A_r4_k0.reuse, B_c4_k0.reuse.H0_H0, C_r4_c4
      HFMA2 R20, R90.reuse, R107.reuse.H0_H0, R20 ?W2;       // HFMA2 C_r4_c6, A_r4_k0.reuse, B_c6_k0.reuse.H0_H0, C_r4_c6
      HFMA2 R23, R90.reuse, R106.reuse.H1_H1, R23 ?W2;       // HFMA2 C_r4_c5, A_r4_k0.reuse, B_c4_k0.reuse.H1_H1, C_r4_c5
      HFMA2 R22, R90, R107.reuse.H1_H1, R22 ?W2;             // HFMA2 C_r4_c7, A_r4_k0, B_c6_k0.reuse.H1_H1, C_r4_c7
      HFMA2 R13, R89.reuse, R106.reuse.H0_H0, R13 ?W2;       // HFMA2 C_r2_c4, A_r2_k0.reuse, B_c4_k0.reuse.H0_H0, C_r2_c4
      HFMA2 R12, R89.reuse, R107.reuse.H0_H0, R12 ?W2;       // HFMA2 C_r2_c6, A_r2_k0.reuse, B_c6_k0.reuse.H0_H0, C_r2_c6
      HFMA2 R15, R89.reuse, R106.reuse.H1_H1, R15 ?W2;       // HFMA2 C_r2_c5, A_r2_k0.reuse, B_c4_k0.reuse.H1_H1, C_r2_c5
      HFMA2 R14, R89, R107.reuse.H1_H1, R14 ?W2;             // HFMA2 C_r2_c7, A_r2_k0, B_c6_k0.reuse.H1_H1, C_r2_c7
      HFMA2 R5, R88.reuse, R106.reuse.H0_H0, R5 ?W2;         // HFMA2 C_r0_c4, A_r0_k0.reuse, B_c4_k0.reuse.H0_H0, C_r0_c4
      HFMA2 R4, R88.reuse, R107.reuse.H0_H0, R4 ?W2;         // HFMA2 C_r0_c6, A_r0_k0.reuse, B_c6_k0.reuse.H0_H0, C_r0_c6
      HFMA2 R7, R88.reuse, R106.H1_H1, R7 ?W2;               // HFMA2 C_r0_c5, A_r0_k0.reuse, B_c4_k0.H1_H1, C_r0_c5
      HFMA2 R6, R88, R107.H1_H1, R6 &wr=4 ?W2EG;             // HFMA2 C_r0_c7, A_r0_k0, B_c6_k0.H1_H1, C_r0_c7
      HFMA2 R1, R96.reuse, R108.reuse.H0_H0, R1 &req={0,4} ?W1; // HFMA2 C_r0_c0, A_r0_k1.reuse, B_c0_k1.reuse.H0_H0, C_r0_c0
      LDS.U.128 R88, [R76 + 0x800] &wr=0 ?W1;                // LDS.U.128 A_r0_k0, [sharedA + 0x800]
      HFMA2 R0, R96.reuse, R109.reuse.H0_H0, R0 ?W2;         // HFMA2 C_r0_c2, A_r0_k1.reuse, B_c2_k1.reuse.H0_H0, C_r0_c2
      HFMA2 R3, R96.reuse, R108.reuse.H1_H1, R3 ?W1;         // HFMA2 C_r0_c1, A_r0_k1.reuse, B_c0_k1.reuse.H1_H1, C_r0_c1
      LDS.U.128 R104, [R77 + 0x400] &wr=0 ?W1;               // LDS.U.128 B_c0_k0, [sharedB + 0x400]
      HFMA2 R2, R96, R109.reuse.H1_H1, R2 ?W2;               // HFMA2 C_r0_c3, A_r0_k1, B_c2_k1.reuse.H1_H1, C_r0_c3
      HFMA2 R9, R97.reuse, R108.reuse.H0_H0, R9 ?W1;         // HFMA2 C_r2_c0, A_r2_k1.reuse, B_c0_k1.reuse.H0_H0, C_r2_c0
      LDS.U.128 R92, [R76 + 0x880] &rd=1 &wr=0 ?W1;          // LDS.U.128 A_r8_k0, [sharedA + 0x880]
      HFMA2 R8, R97.reuse, R109.reuse.H0_H0, R8 ?W2;         // HFMA2 C_r2_c2, A_r2_k1.reuse, B_c2_k1.reuse.H0_H0, C_r2_c2
      HFMA2 R11, R97.reuse, R108.reuse.H1_H1, R11 ?W2;       // HFMA2 C_r2_c1, A_r2_k1.reuse, B_c0_k1.reuse.H1_H1, C_r2_c1
      HFMA2 R10, R97, R109.reuse.H1_H1, R10 ?W2;             // HFMA2 C_r2_c3, A_r2_k1, B_c2_k1.reuse.H1_H1, C_r2_c3
      HFMA2 R17, R98.reuse, R108.reuse.H0_H0, R17 ?W2;       // HFMA2 C_r4_c0, A_r4_k1.reuse, B_c0_k1.reuse.H0_H0, C_r4_c0
      HFMA2 R16, R98.reuse, R109.reuse.H0_H0, R16 ?W2;       // HFMA2 C_r4_c2, A_r4_k1.reuse, B_c2_k1.reuse.H0_H0, C_r4_c2
      HFMA2 R19, R98.reuse, R108.reuse.H1_H1, R19 ?W2;       // HFMA2 C_r4_c1, A_r4_k1.reuse, B_c0_k1.reuse.H1_H1, C_r4_c1
      HFMA2 R18, R98, R109.reuse.H1_H1, R18 ?W2;             // HFMA2 C_r4_c3, A_r4_k1, B_c2_k1.reuse.H1_H1, C_r4_c3
      HFMA2 R25, R99.reuse, R108.reuse.H0_H0, R25 ?W2;       // HFMA2 C_r6_c0, A_r6_k1.reuse, B_c0_k1.reuse.H0_H0, C_r6_c0
      HFMA2 R24, R99.reuse, R109.reuse.H0_H0, R24 ?W2;       // HFMA2 C_r6_c2, A_r6_k1.reuse, B_c2_k1.reuse.H0_H0, C_r6_c2
      HFMA2 R27, R99.reuse, R108.reuse.H1_H1, R27 ?W2;       // HFMA2 C_r6_c1, A_r6_k1.reuse, B_c0_k1.reuse.H1_H1, C_r6_c1
      HFMA2 R26, R99, R109.reuse.H1_H1, R26 ?W2;             // HFMA2 C_r6_c3, A_r6_k1, B_c2_k1.reuse.H1_H1, C_r6_c3
      HFMA2 R33, R100.reuse, R108.reuse.H0_H0, R33 ?W2;      // HFMA2 C_r8_c0, A_r8_k1.reuse, B_c0_k1.reuse.H0_H0, C_r8_c0
      HFMA2 R32, R100.reuse, R109.reuse.H0_H0, R32 ?W2;      // HFMA2 C_r8_c2, A_r8_k1.reuse, B_c2_k1.reuse.H0_H0, C_r8_c2
      HFMA2 R35, R100.reuse, R108.reuse.H1_H1, R35 ?W2;      // HFMA2 C_r8_c1, A_r8_k1.reuse, B_c0_k1.reuse.H1_H1, C_r8_c1
      HFMA2 R34, R100, R109.reuse.H1_H1, R34 ?W2;            // HFMA2 C_r8_c3, A_r8_k1, B_c2_k1.reuse.H1_H1, C_r8_c3
      HFMA2 R41, R101.reuse, R108.reuse.H0_H0, R41 ?W2;      // HFMA2 C_r10_c0, A_r10_k1.reuse, B_c0_k1.reuse.H0_H0, C_r10_c0
      HFMA2 R40, R101.reuse, R109.reuse.H0_H0, R40 ?W2;      // HFMA2 C_r10_c2, A_r10_k1.reuse, B_c2_k1.reuse.H0_H0, C_r10_c2
      HFMA2 R43, R101.reuse, R108.reuse.H1_H1, R43 ?W2;      // HFMA2 C_r10_c1, A_r10_k1.reuse, B_c0_k1.reuse.H1_H1, C_r10_c1
      HFMA2 R42, R101, R109.reuse.H1_H1, R42 ?W2;            // HFMA2 C_r10_c3, A_r10_k1, B_c2_k1.reuse.H1_H1, C_r10_c3
      HFMA2 R49, R102.reuse, R108.reuse.H0_H0, R49 ?W2;      // HFMA2 C_r12_c0, A_r12_k1.reuse, B_c0_k1.reuse.H0_H0, C_r12_c0
      HFMA2 R48, R102.reuse, R109.reuse.H0_H0, R48 ?W2;      // HFMA2 C_r12_c2, A_r12_k1.reuse, B_c2_k1.reuse.H0_H0, C_r12_c2
      HFMA2 R51, R102.reuse, R108.reuse.H1_H1, R51 ?W2;      // HFMA2 C_r12_c1, A_r12_k1.reuse, B_c0_k1.reuse.H1_H1, C_r12_c1
      HFMA2 R50, R102.reuse, R109.reuse.H1_H1, R50 ?W2;      // HFMA2 C_r12_c3, A_r12_k1.reuse, B_c2_k1.reuse.H1_H1, C_r12_c3
      HFMA2 R57, R103.reuse, R108.reuse.H0_H0, R57 ?W2;      // HFMA2 C_r14_c0, A_r14_k1.reuse, B_c0_k1.reuse.H0_H0, C_r14_c0
      HFMA2 R56, R103.reuse, R109.reuse.H0_H0, R56 ?W2;      // HFMA2 C_r14_c2, A_r14_k1.reuse, B_c2_k1.reuse.H0_H0, C_r14_c2
      HFMA2 R59, R103.reuse, R108.H1_H1, R59 ?W2;            // HFMA2 C_r14_c1, A_r14_k1.reuse, B_c0_k1.H1_H1, C_r14_c1
      HFMA2 R58, R103.reuse, R109.H1_H1, R58 ?W2;            // HFMA2 C_r14_c3, A_r14_k1.reuse, B_c2_k1.H1_H1, C_r14_c3
      HFMA2 R61, R103.reuse, R110.reuse.H0_H0, R61 ?W2;      // HFMA2 C_r14_c4, A_r14_k1.reuse, B_c4_k1.reuse.H0_H0, C_r14_c4
      HFMA2 R60, R103.reuse, R111.reuse.H0_H0, R60 ?W2;      // HFMA2 C_r14_c6, A_r14_k1.reuse, B_c6_k1.reuse.H0_H0, C_r14_c6
      HFMA2 R63, R103.reuse, R110.reuse.H1_H1, R63 ?W2;      // HFMA2 C_r14_c5, A_r14_k1.reuse, B_c4_k1.reuse.H1_H1, C_r14_c5
      HFMA2 R62, R103, R111.reuse.H1_H1, R62 ?W2;            // HFMA2 C_r14_c7, A_r14_k1, B_c6_k1.reuse.H1_H1, C_r14_c7
      HFMA2 R53, R102.reuse, R110.reuse.H0_H0, R53 ?W2;      // HFMA2 C_r12_c4, A_r12_k1.reuse, B_c4_k1.reuse.H0_H0, C_r12_c4
      HFMA2 R52, R102.reuse, R111.reuse.H0_H0, R52 ?W2;      // HFMA2 C_r12_c6, A_r12_k1.reuse, B_c6_k1.reuse.H0_H0, C_r12_c6
      HFMA2 R55, R102.reuse, R110.reuse.H1_H1, R55 ?W2;      // HFMA2 C_r12_c5, A_r12_k1.reuse, B_c4_k1.reuse.H1_H1, C_r12_c5
      HFMA2 R54, R102, R111.reuse.H1_H1, R54 ?W2;            // HFMA2 C_r12_c7, A_r12_k1, B_c6_k1.reuse.H1_H1, C_r12_c7
      HFMA2 R45, R101.reuse, R110.reuse.H0_H0, R45 ?W2;      // HFMA2 C_r10_c4, A_r10_k1.reuse, B_c4_k1.reuse.H0_H0, C_r10_c4
      HFMA2 R44, R101.reuse, R111.reuse.H0_H0, R44 ?W2;      // HFMA2 C_r10_c6, A_r10_k1.reuse, B_c6_k1.reuse.H0_H0, C_r10_c6
      HFMA2 R47, R101.reuse, R110.reuse.H1_H1, R47 ?W2;      // HFMA2 C_r10_c5, A_r10_k1.reuse, B_c4_k1.reuse.H1_H1, C_r10_c5
      HFMA2 R46, R101, R111.reuse.H1_H1, R46 ?W2;            // HFMA2 C_r10_c7, A_r10_k1, B_c6_k1.reuse.H1_H1, C_r10_c7
      HFMA2 R37, R100.reuse, R110.reuse.H0_H0, R37 ?W2;      // HFMA2 C_r8_c4, A_r8_k1.reuse, B_c4_k1.reuse.H0_H0, C_r8_c4
      HFMA2 R36, R100.reuse, R111.reuse.H0_H0, R36 ?W2;      // HFMA2 C_r8_c6, A_r8_k1.reuse, B_c6_k1.reuse.H0_H0, C_r8_c6
      HFMA2 R39, R100.reuse, R110.reuse.H1_H1, R39 ?W2;      // HFMA2 C_r8_c5, A_r8_k1.reuse, B_c4_k1.reuse.H1_H1, C_r8_c5
      HFMA2 R38, R100, R111.reuse.H1_H1, R38 ?W2;            // HFMA2 C_r8_c7, A_r8_k1, B_c6_k1.reuse.H1_H1, C_r8_c7
      HFMA2 R29, R99.reuse, R110.reuse.H0_H0, R29 ?W2;       // HFMA2 C_r6_c4, A_r6_k1.reuse, B_c4_k1.reuse.H0_H0, C_r6_c4
      HFMA2 R28, R99.reuse, R111.reuse.H0_H0, R28 ?W2;       // HFMA2 C_r6_c6, A_r6_k1.reuse, B_c6_k1.reuse.H0_H0, C_r6_c6
      HFMA2 R31, R99.reuse, R110.reuse.H1_H1, R31 ?W2;       // HFMA2 C_r6_c5, A_r6_k1.reuse, B_c4_k1.reuse.H1_H1, C_r6_c5
      HFMA2 R30, R99, R111.reuse.H1_H1, R30 ?W2;             // HFMA2 C_r6_c7, A_r6_k1, B_c6_k1.reuse.H1_H1, C_r6_c7
      HFMA2 R21, R98.reuse, R110.reuse.H0_H0, R21 ?W2;       // HFMA2 C_r4_c4, A_r4_k1.reuse, B_c4_k1.reuse.H0_H0, C_r4_c4
      HFMA2 R20, R98.reuse, R111.reuse.H0_H0, R20 ?W2;       // HFMA2 C_r4_c6, A_r4_k1.reuse, B_c6_k1.reuse.H0_H0, C_r4_c6
      HFMA2 R23, R98.reuse, R110.reuse.H1_H1, R23 ?W2;       // HFMA2 C_r4_c5, A_r4_k1.reuse, B_c4_k1.reuse.H1_H1, C_r4_c5
      HFMA2 R22, R98, R111.reuse.H1_H1, R22 ?W2;             // HFMA2 C_r4_c7, A_r4_k1, B_c6_k1.reuse.H1_H1, C_r4_c7
      HFMA2 R13, R97.reuse, R110.reuse.H0_H0, R13 ?W2;       // HFMA2 C_r2_c4, A_r2_k1.reuse, B_c4_k1.reuse.H0_H0, C_r2_c4
      HFMA2 R12, R97.reuse, R111.reuse.H0_H0, R12 ?W2;       // HFMA2 C_r2_c6, A_r2_k1.reuse, B_c6_k1.reuse.H0_H0, C_r2_c6
      HFMA2 R15, R97.reuse, R110.reuse.H1_H1, R15 ?W2;       // HFMA2 C_r2_c5, A_r2_k1.reuse, B_c4_k1.reuse.H1_H1, C_r2_c5
      HFMA2 R14, R97, R111.reuse.H1_H1, R14 ?W2;             // HFMA2 C_r2_c7, A_r2_k1, B_c6_k1.reuse.H1_H1, C_r2_c7
      HFMA2 R5, R96.reuse, R110.reuse.H0_H0, R5 ?W2;         // HFMA2 C_r0_c4, A_r0_k1.reuse, B_c4_k1.reuse.H0_H0, C_r0_c4
      HFMA2 R4, R96.reuse, R111.reuse.H0_H0, R4 ?W2;         // HFMA2 C_r0_c6, A_r0_k1.reuse, B_c6_k1.reuse.H0_H0, C_r0_c6
      HFMA2 R7, R96.reuse, R110.H1_H1, R7 ?W2;               // HFMA2 C_r0_c5, A_r0_k1.reuse, B_c4_k1.H1_H1, C_r0_c5
      HFMA2 R6, R96, R111.H1_H1, R6 &wr=4 ?W2EG;             // HFMA2 C_r0_c7, A_r0_k1, B_c6_k1.H1_H1, C_r0_c7
      HFMA2 R1, R88.reuse, R104.reuse.H0_H0, R1 &req={0,4} ?W1; // HFMA2 C_r0_c0, A_r0_k0.reuse, B_c0_k0.reuse.H0_H0, C_r0_c0
      LDS.U.128 R96, [R76 + 0xa00] &wr=0 ?W1;                // LDS.U.128 A_r0_k1, [sharedA + 0xa00]
      HFMA2 R0, R88.reuse, R105.reuse.H0_H0, R0 ?W2;         // HFMA2 C_r0_c2, A_r0_k0.reuse, B_c2_k0.reuse.H0_H0, C_r0_c2
      HFMA2 R3, R88.reuse, R104.reuse.H1_H1, R3 ?W1;         // HFMA2 C_r0_c1, A_r0_k0.reuse, B_c0_k0.reuse.H1_H1, C_r0_c1
      LDS.U.128 R108, [R77 + 0x500] &wr=0 ?W1;               // LDS.U.128 B_c0_k1, [sharedB + 0x500]
      HFMA2 R2, R88, R105.reuse.H1_H1, R2 ?W2;               // HFMA2 C_r0_c3, A_r0_k0, B_c2_k0.reuse.H1_H1, C_r0_c3
      HFMA2 R9, R89.reuse, R104.reuse.H0_H0, R9 ?W1;         // HFMA2 C_r2_c0, A_r2_k0.reuse, B_c0_k0.reuse.H0_H0, C_r2_c0
      LDS.U.128 R100, [R76 + 0xa80] &rd=1 &wr=0 ?W1;         // LDS.U.128 A_r8_k1, [sharedA + 0xa80]
      HFMA2 R8, R89.reuse, R105.reuse.H0_H0, R8 ?W2;         // HFMA2 C_r2_c2, A_r2_k0.reuse, B_c2_k0.reuse.H0_H0, C_r2_c2
      HFMA2 R11, R89.reuse, R104.reuse.H1_H1, R11 ?W2;       // HFMA2 C_r2_c1, A_r2_k0.reuse, B_c0_k0.reuse.H1_H1, C_r2_c1
      HFMA2 R10, R89, R105.reuse.H1_H1, R10 ?W2;             // HFMA2 C_r2_c3, A_r2_k0, B_c2_k0.reuse.H1_H1, C_r2_c3
      HFMA2 R17, R90.reuse, R104.reuse.H0_H0, R17 ?W2;       // HFMA2 C_r4_c0, A_r4_k0.reuse, B_c0_k0.reuse.H0_H0, C_r4_c0
      HFMA2 R16, R90.reuse, R105.reuse.H0_H0, R16 ?W2;       // HFMA2 C_r4_c2, A_r4_k0.reuse, B_c2_k0.reuse.H0_H0, C_r4_c2
      HFMA2 R19, R90.reuse, R104.reuse.H1_H1, R19 ?W2;       // HFMA2 C_r4_c1, A_r4_k0.reuse, B_c0_k0.reuse.H1_H1, C_r4_c1
      HFMA2 R18, R90, R105.reuse.H1_H1, R18 ?W2;             // HFMA2 C_r4_c3, A_r4_k0, B_c2_k0.reuse.H1_H1, C_r4_c3
      HFMA2 R25, R91.reuse, R104.reuse.H0_H0, R25 ?W2;       // HFMA2 C_r6_c0, A_r6_k0.reuse, B_c0_k0.reuse.H0_H0, C_r6_c0
      HFMA2 R24, R91.reuse, R105.reuse.H0_H0, R24 ?W2;       // HFMA2 C_r6_c2, A_r6_k0.reuse, B_c2_k0.reuse.H0_H0, C_r6_c2
      HFMA2 R27, R91.reuse, R104.reuse.H1_H1, R27 ?W2;       // HFMA2 C_r6_c1, A_r6_k0.reuse, B_c0_k0.reuse.H1_H1, C_r6_c1
      HFMA2 R26, R91, R105.reuse.H1_H1, R26 ?W2;             // HFMA2 C_r6_c3, A_r6_k0, B_c2_k0.reuse.H1_H1, C_r6_c3
      HFMA2 R33, R92.reuse, R104.reuse.H0_H0, R33 ?W2;       // HFMA2 C_r8_c0, A_r8_k0.reuse, B_c0_k0.reuse.H0_H0, C_r8_c0
      HFMA2 R32, R92.reuse, R105.reuse.H0_H0, R32 ?W2;       // HFMA2 C_r8_c2, A_r8_k0.reuse, B_c2_k0.reuse.H0_H0, C_r8_c2
      HFMA2 R35, R92.reuse, R104.reuse.H1_H1, R35 ?W2;       // HFMA2 C_r8_c1, A_r8_k0.reuse, B_c0_k0.reuse.H1_H1, C_r8_c1
      HFMA2 R34, R92, R105.reuse.H1_H1, R34 ?W2;             // HFMA2 C_r8_c3, A_r8_k0, B_c2_k0.reuse.H1_H1, C_r8_c3
      HFMA2 R41, R93.reuse, R104.reuse.H0_H0, R41 ?W2;       // HFMA2 C_r10_c0, A_r10_k0.reuse, B_c0_k0.reuse.H0_H0, C_r10_c0
      HFMA2 R40, R93.reuse, R105.reuse.H0_H0, R40 ?W2;       // HFMA2 C_r10_c2, A_r10_k0.reuse, B_c2_k0.reuse.H0_H0, C_r10_c2
      HFMA2 R43, R93.reuse, R104.reuse.H1_H1, R43 ?W2;       // HFMA2 C_r10_c1, A_r10_k0.reuse, B_c0_k0.reuse.H1_H1, C_r10_c1
      HFMA2 R42, R93, R105.reuse.H1_H1, R42 ?W2;             // HFMA2 C_r10_c3, A_r10_k0, B_c2_k0.reuse.H1_H1, C_r10_c3
      HFMA2 R49, R94.reuse, R104.reuse.H0_H0, R49 ?W2;       // HFMA2 C_r12_c0, A_r12_k0.reuse, B_c0_k0.reuse.H0_H0, C_r12_c0
      HFMA2 R48, R94.reuse, R105.reuse.H0_H0, R48 ?W2;       // HFMA2 C_r12_c2, A_r12_k0.reuse, B_c2_k0.reuse.H0_H0, C_r12_c2
      HFMA2 R51, R94.reuse, R104.reuse.H1_H1, R51 ?W2;       // HFMA2 C_r12_c1, A_r12_k0.reuse, B_c0_k0.reuse.H1_H1, C_r12_c1
      HFMA2 R50, R94.reuse, R105.reuse.H1_H1, R50 ?W2;       // HFMA2 C_r12_c3, A_r12_k0.reuse, B_c2_k0.reuse.H1_H1, C_r12_c3
      HFMA2 R57, R95.reuse, R104.reuse.H0_H0, R57 ?W2;       // HFMA2 C_r14_c0, A_r14_k0.reuse, B_c0_k0.reuse.H0_H0, C_r14_c0
      HFMA2 R56, R95.reuse, R105.reuse.H0_H0, R56 ?W2;       // HFMA2 C_r14_c2, A_r14_k0.reuse, B_c2_k0.reuse.H0_H0, C_r14_c2
      HFMA2 R59, R95.reuse, R104.H1_H1, R59 ?W2;             // HFMA2 C_r14_c1, A_r14_k0.reuse, B_c0_k0.H1_H1, C_r14_c1
      HFMA2 R58, R95.reuse, R105.H1_H1, R58 ?W2;             // HFMA2 C_r14_c3, A_r14_k0.reuse, B_c2_k0.H1_H1, C_r14_c3
      HFMA2 R61, R95.reuse, R106.reuse.H0_H0, R61 ?W2;       // HFMA2 C_r14_c4, A_r14_k0.reuse, B_c4_k0.reuse.H0_H0, C_r14_c4
      HFMA2 R60, R95.reuse, R107.reuse.H0_H0, R60 ?W2;       // HFMA2 C_r14_c6, A_r14_k0.reuse, B_c6_k0.reuse.H0_H0, C_r14_c6
      HFMA2 R63, R95.reuse, R106.reuse.H1_H1, R63 ?W2;       // HFMA2 C_r14_c5, A_r14_k0.reuse, B_c4_k0.reuse.H1_H1, C_r14_c5
      HFMA2 R62, R95, R107.reuse.H1_H1, R62 ?W2;             // HFMA2 C_r14_c7, A_r14_k0, B_c6_k0.reuse.H1_H1, C_r14_c7
      HFMA2 R53, R94.reuse, R106.reuse.H0_H0, R53 ?W2;       // HFMA2 C_r12_c4, A_r12_k0.reuse, B_c4_k0.reuse.H0_H0, C_r12_c4
      HFMA2 R52, R94.reuse, R107.reuse.H0_H0, R52 ?W2;       // HFMA2 C_r12_c6, A_r12_k0.reuse, B_c6_k0.reuse.H0_H0, C_r12_c6
      HFMA2 R55, R94.reuse, R106.reuse.H1_H1, R55 ?W2;       // HFMA2 C_r12_c5, A_r12_k0.reuse, B_c4_k0.reuse.H1_H1, C_r12_c5
      HFMA2 R54, R94, R107.reuse.H1_H1, R54 ?W2;             // HFMA2 C_r12_c7, A_r12_k0, B_c6_k0.reuse.H1_H1, C_r12_c7
      HFMA2 R45, R93.reuse, R106.reuse.H0_H0, R45 ?W2;       // HFMA2 C_r10_c4, A_r10_k0.reuse, B_c4_k0.reuse.H0_H0, C_r10_c4
      HFMA2 R44, R93.reuse, R107.reuse.H0_H0, R44 ?W2;       // HFMA2 C_r10_c6, A_r10_k0.reuse, B_c6_k0.reuse.H0_H0, C_r10_c6
      HFMA2 R47, R93.reuse, R106.reuse.H1_H1, R47 ?W2;       // HFMA2 C_r10_c5, A_r10_k0.reuse, B_c4_k0.reuse.H1_H1, C_r10_c5
      HFMA2 R46, R93, R107.reuse.H1_H1, R46 ?W2;             // HFMA2 C_r10_c7, A_r10_k0, B_c6_k0.reuse.H1_H1, C_r10_c7
      HFMA2 R37, R92.reuse, R106.reuse.H0_H0, R37 ?W2;       // HFMA2 C_r8_c4, A_r8_k0.reuse, B_c4_k0.reuse.H0_H0, C_r8_c4
      HFMA2 R36, R92.reuse, R107.reuse.H0_H0, R36 ?W2;       // HFMA2 C_r8_c6, A_r8_k0.reuse, B_c6_k0.reuse.H0_H0, C_r8_c6
      HFMA2 R39, R92.reuse, R106.reuse.H1_H1, R39 ?W2;       // HFMA2 C_r8_c5, A_r8_k0.reuse, B_c4_k0.reuse.H1_H1, C_r8_c5
      HFMA2 R38, R92, R107.reuse.H1_H1, R38 ?W2;             // HFMA2 C_r8_c7, A_r8_k0, B_c6_k0.reuse.H1_H1, C_r8_c7
      HFMA2 R29, R91.reuse, R106.reuse.H0_H0, R29 ?W2;       // HFMA2 C_r6_c4, A_r6_k0.reuse, B_c4_k0.reuse.H0_H0, C_r6_c4
      HFMA2 R28, R91.reuse, R107.reuse.H0_H0, R28 ?W2;       // HFMA2 C_r6_c6, A_r6_k0.reuse, B_c6_k0.reuse.H0_H0, C_r6_c6
      HFMA2 R31, R91.reuse, R106.reuse.H1_H1, R31 ?W2;       // HFMA2 C_r6_c5, A_r6_k0.reuse, B_c4_k0.reuse.H1_H1, C_r6_c5
      HFMA2 R30, R91, R107.reuse.H1_H1, R30 ?W2;             // HFMA2 C_r6_c7, A_r6_k0, B_c6_k0.reuse.H1_H1, C_r6_c7
      HFMA2 R21, R90.reuse, R106.reuse.H0_H0, R21 ?W2;       // HFMA2 C_r4_c4, A_r4_k0.reuse, B_c4_k0.reuse.H0_H0, C_r4_c4
      HFMA2 R20, R90.reuse, R107.reuse.H0_H0, R20 ?W2;       // HFMA2 C_r4_c6, A_r4_k0.reuse, B_c6_k0.reuse.H0_H0, C_r4_c6
      HFMA2 R23, R90.reuse, R106.reuse.H1_H1, R23 ?W2;       // HFMA2 C_r4_c5, A_r4_k0.reuse, B_c4_k0.reuse.H1_H1, C_r4_c5
      HFMA2 R22, R90, R107.reuse.H1_H1, R22 ?W2;             // HFMA2 C_r4_c7, A_r4_k0, B_c6_k0.reuse.H1_H1, C_r4_c7
      HFMA2 R13, R89.reuse, R106.reuse.H0_H0, R13 ?W2;       // HFMA2 C_r2_c4, A_r2_k0.reuse, B_c4_k0.reuse.H0_H0, C_r2_c4
      HFMA2 R12, R89.reuse, R107.reuse.H0_H0, R12 ?W2;       // HFMA2 C_r2_c6, A_r2_k0.reuse, B_c6_k0.reuse.H0_H0, C_r2_c6
      HFMA2 R15, R89.reuse, R106.reuse.H1_H1, R15 ?W2;       // HFMA2 C_r2_c5, A_r2_k0.reuse, B_c4_k0.reuse.H1_H1, C_r2_c5
      HFMA2 R14, R89, R107.reuse.H1_H1, R14 ?W2;             // HFMA2 C_r2_c7, A_r2_k0, B_c6_k0.reuse.H1_H1, C_r2_c7
      HFMA2 R5, R88.reuse, R106.reuse.H0_H0, R5 ?W2;         // HFMA2 C_r0_c4, A_r0_k0.reuse, B_c4_k0.reuse.H0_H0, C_r0_c4
      HFMA2 R4, R88.reuse, R107.reuse.H0_H0, R4 ?W2;         // HFMA2 C_r0_c6, A_r0_k0.reuse, B_c6_k0.reuse.H0_H0, C_r0_c6
      HFMA2 R7, R88.reuse, R106.H1_H1, R7 ?W2;               // HFMA2 C_r0_c5, A_r0_k0.reuse, B_c4_k0.H1_H1, C_r0_c5
      HFMA2 R6, R88, R107.H1_H1, R6 &wr=4 ?W2EG;             // HFMA2 C_r0_c7, A_r0_k0, B_c6_k0.H1_H1, C_r0_c7
      HFMA2 R1, R96.reuse, R108.reuse.H0_H0, R1 &req={0,4} ?W1; // HFMA2 C_r0_c0, A_r0_k1.reuse, B_c0_k1.reuse.H0_H0, C_r0_c0
      LDS.U.128 R88, [R76 + 0xc00] &wr=0 ?W1;                // LDS.U.128 A_r0_k0, [sharedA + 0xc00]
      HFMA2 R0, R96.reuse, R109.reuse.H0_H0, R0 ?W2;         // HFMA2 C_r0_c2, A_r0_k1.reuse, B_c2_k1.reuse.H0_H0, C_r0_c2
      HFMA2 R3, R96.reuse, R108.reuse.H1_H1, R3 ?W1;         // HFMA2 C_r0_c1, A_r0_k1.reuse, B_c0_k1.reuse.H1_H1, C_r0_c1
      LDS.U.128 R104, [R77 + 0x600] &wr=0 ?W1;               // LDS.U.128 B_c0_k0, [sharedB + 0x600]
      HFMA2 R2, R96, R109.reuse.H1_H1, R2 ?W2;               // HFMA2 C_r0_c3, A_r0_k1, B_c2_k1.reuse.H1_H1, C_r0_c3
      HFMA2 R9, R97.reuse, R108.reuse.H0_H0, R9 ?W1;         // HFMA2 C_r2_c0, A_r2_k1.reuse, B_c0_k1.reuse.H0_H0, C_r2_c0
      LDS.U.128 R92, [R76 + 0xc80] &rd=1 &wr=0 ?W1;          // LDS.U.128 A_r8_k0, [sharedA + 0xc80]
      HFMA2 R8, R97.reuse, R109.reuse.H0_H0, R8 ?W2;         // HFMA2 C_r2_c2, A_r2_k1.reuse, B_c2_k1.reuse.H0_H0, C_r2_c2
      HFMA2 R11, R97.reuse, R108.reuse.H1_H1, R11 ?W2;       // HFMA2 C_r2_c1, A_r2_k1.reuse, B_c0_k1.reuse.H1_H1, C_r2_c1
      HFMA2 R10, R97, R109.reuse.H1_H1, R10 ?W2;             // HFMA2 C_r2_c3, A_r2_k1, B_c2_k1.reuse.H1_H1, C_r2_c3
      HFMA2 R17, R98.reuse, R108.reuse.H0_H0, R17 ?W2;       // HFMA2 C_r4_c0, A_r4_k1.reuse, B_c0_k1.reuse.H0_H0, C_r4_c0
      HFMA2 R16, R98.reuse, R109.reuse.H0_H0, R16 ?W2;       // HFMA2 C_r4_c2, A_r4_k1.reuse, B_c2_k1.reuse.H0_H0, C_r4_c2
      HFMA2 R19, R98.reuse, R108.reuse.H1_H1, R19 ?W2;       // HFMA2 C_r4_c1, A_r4_k1.reuse, B_c0_k1.reuse.H1_H1, C_r4_c1
      HFMA2 R18, R98, R109.reuse.H1_H1, R18 ?W2;             // HFMA2 C_r4_c3, A_r4_k1, B_c2_k1.reuse.H1_H1, C_r4_c3
      HFMA2 R25, R99.reuse, R108.reuse.H0_H0, R25 ?W2;       // HFMA2 C_r6_c0, A_r6_k1.reuse, B_c0_k1.reuse.H0_H0, C_r6_c0
      HFMA2 R24, R99.reuse, R109.reuse.H0_H0, R24 ?W2;       // HFMA2 C_r6_c2, A_r6_k1.reuse, B_c2_k1.reuse.H0_H0, C_r6_c2
      HFMA2 R27, R99.reuse, R108.reuse.H1_H1, R27 ?W2;       // HFMA2 C_r6_c1, A_r6_k1.reuse, B_c0_k1.reuse.H1_H1, C_r6_c1
      HFMA2 R26, R99, R109.reuse.H1_H1, R26 ?W2;             // HFMA2 C_r6_c3, A_r6_k1, B_c2_k1.reuse.H1_H1, C_r6_c3
      HFMA2 R33, R100.reuse, R108.reuse.H0_H0, R33 ?W2;      // HFMA2 C_r8_c0, A_r8_k1.reuse, B_c0_k1.reuse.H0_H0, C_r8_c0
      HFMA2 R32, R100.reuse, R109.reuse.H0_H0, R32 ?W2;      // HFMA2 C_r8_c2, A_r8_k1.reuse, B_c2_k1.reuse.H0_H0, C_r8_c2
      HFMA2 R35, R100.reuse, R108.reuse.H1_H1, R35 ?W2;      // HFMA2 C_r8_c1, A_r8_k1.reuse, B_c0_k1.reuse.H1_H1, C_r8_c1
      HFMA2 R34, R100, R109.reuse.H1_H1, R34 ?W2;            // HFMA2 C_r8_c3, A_r8_k1, B_c2_k1.reuse.H1_H1, C_r8_c3
      HFMA2 R41, R101.reuse, R108.reuse.H0_H0, R41 ?W2;      // HFMA2 C_r10_c0, A_r10_k1.reuse, B_c0_k1.reuse.H0_H0, C_r10_c0
      HFMA2 R40, R101.reuse, R109.reuse.H0_H0, R40 ?W2;      // HFMA2 C_r10_c2, A_r10_k1.reuse, B_c2_k1.reuse.H0_H0, C_r10_c2
      HFMA2 R43, R101.reuse, R108.reuse.H1_H1, R43 ?W2;      // HFMA2 C_r10_c1, A_r10_k1.reuse, B_c0_k1.reuse.H1_H1, C_r10_c1
      HFMA2 R42, R101, R109.reuse.H1_H1, R42 ?W2;            // HFMA2 C_r10_c3, A_r10_k1, B_c2_k1.reuse.H1_H1, C_r10_c3
      HFMA2 R49, R102.reuse, R108.reuse.H0_H0, R49 ?W2;      // HFMA2 C_r12_c0, A_r12_k1.reuse, B_c0_k1.reuse.H0_H0, C_r12_c0
      HFMA2 R48, R102.reuse, R109.reuse.H0_H0, R48 ?W2;      // HFMA2 C_r12_c2, A_r12_k1.reuse, B_c2_k1.reuse.H0_H0, C_r12_c2
      HFMA2 R51, R102.reuse, R108.reuse.H1_H1, R51 ?W2;      // HFMA2 C_r12_c1, A_r12_k1.reuse, B_c0_k1.reuse.H1_H1, C_r12_c1
      HFMA2 R50, R102.reuse, R109.reuse.H1_H1, R50 ?W2;      // HFMA2 C_r12_c3, A_r12_k1.reuse, B_c2_k1.reuse.H1_H1, C_r12_c3
      HFMA2 R57, R103.reuse, R108.reuse.H0_H0, R57 ?W2;      // HFMA2 C_r14_c0, A_r14_k1.reuse, B_c0_k1.reuse.H0_H0, C_r14_c0
      HFMA2 R56, R103.reuse, R109.reuse.H0_H0, R56 ?W2;      // HFMA2 C_r14_c2, A_r14_k1.reuse, B_c2_k1.reuse.H0_H0, C_r14_c2
      HFMA2 R59, R103.reuse, R108.H1_H1, R59 ?W2;            // HFMA2 C_r14_c1, A_r14_k1.reuse, B_c0_k1.H1_H1, C_r14_c1
      HFMA2 R58, R103.reuse, R109.H1_H1, R58 ?W2;            // HFMA2 C_r14_c3, A_r14_k1.reuse, B_c2_k1.H1_H1, C_r14_c3
      HFMA2 R61, R103.reuse, R110.reuse.H0_H0, R61 ?W1;      // HFMA2 C_r14_c4, A_r14_k1.reuse, B_c4_k1.reuse.H0_H0, C_r14_c4
(P1)  STS.U16    [R80 + 0x0], R64 &req=2 ?W1;                // @P1 STS.U16 [sharedWriteA + 0x0], fetchRegA0
      HFMA2 R60, R103.reuse, R111.reuse.H0_H0, R60 ?W2;      // HFMA2 C_r14_c6, A_r14_k1.reuse, B_c6_k1.reuse.H0_H0, C_r14_c6
      HFMA2 R63, R103.reuse, R110.reuse.H1_H1, R63 ?W1;      // HFMA2 C_r14_c5, A_r14_k1.reuse, B_c4_k1.reuse.H1_H1, C_r14_c5
(P1)  STS.U16    [R80 + 0x40], R65 ?W1;                      // @P1 STS.U16 [sharedWriteA + 0x40], fetchRegA1
      HFMA2 R62, R103, R111.reuse.H1_H1, R62 ?W2;            // HFMA2 C_r14_c7, A_r14_k1, B_c6_k1.reuse.H1_H1, C_r14_c7
      HFMA2 R53, R102.reuse, R110.reuse.H0_H0, R53 ?W1;      // HFMA2 C_r12_c4, A_r12_k1.reuse, B_c4_k1.reuse.H0_H0, C_r12_c4
(P1)  STS.U16    [R80 + 0x80], R66 ?W1;                      // @P1 STS.U16 [sharedWriteA + 0x80], fetchRegA2
      HFMA2 R52, R102.reuse, R111.reuse.H0_H0, R52 ?W2;      // HFMA2 C_r12_c6, A_r12_k1.reuse, B_c6_k1.reuse.H0_H0, C_r12_c6
      HFMA2 R55, R102.reuse, R110.reuse.H1_H1, R55 ?W1;      // HFMA2 C_r12_c5, A_r12_k1.reuse, B_c4_k1.reuse.H1_H1, C_r12_c5
(P1)  STS.U16    [R80 + 0xc0], R67 ?W1;                      // @P1 STS.U16 [sharedWriteA + 0xc0], fetchRegA3
      HFMA2 R54, R102, R111.reuse.H1_H1, R54 ?W2;            // HFMA2 C_r12_c7, A_r12_k1, B_c6_k1.reuse.H1_H1, C_r12_c7
      HFMA2 R45, R101.reuse, R110.reuse.H0_H0, R45 ?W1;      // HFMA2 C_r10_c4, A_r10_k1.reuse, B_c4_k1.reuse.H0_H0, C_r10_c4
(P1)  STS.U16    [R80 + 0x100], R68 ?W1;                     // @P1 STS.U16 [sharedWriteA + 0x100], fetchRegA4
      HFMA2 R44, R101.reuse, R111.reuse.H0_H0, R44 ?W2;      // HFMA2 C_r10_c6, A_r10_k1.reuse, B_c6_k1.reuse.H0_H0, C_r10_c6
      HFMA2 R47, R101.reuse, R110.reuse.H1_H1, R47 ?W1;      // HFMA2 C_r10_c5, A_r10_k1.reuse, B_c4_k1.reuse.H1_H1, C_r10_c5
(P1)  STS.U16    [R80 + 0x140], R69 ?W1;                     // @P1 STS.U16 [sharedWriteA + 0x140], fetchRegA5
      HFMA2 R46, R101, R111.reuse.H1_H1, R46 ?W2;            // HFMA2 C_r10_c7, A_r10_k1, B_c6_k1.reuse.H1_H1, C_r10_c7
      HFMA2 R37, R100.reuse, R110.reuse.H0_H0, R37 ?W1;      // HFMA2 C_r8_c4, A_r8_k1.reuse, B_c4_k1.reuse.H0_H0, C_r8_c4
(P1)  STS.U16    [R80 + 0x180], R70 ?W1;                     // @P1 STS.U16 [sharedWriteA + 0x180], fetchRegA6
      HFMA2 R36, R100.reuse, R111.reuse.H0_H0, R36 ?W2;      // HFMA2 C_r8_c6, A_r8_k1.reuse, B_c6_k1.reuse.H0_H0, C_r8_c6
      HFMA2 R39, R100.reuse, R110.reuse.H1_H1, R39 ?W1;      // HFMA2 C_r8_c5, A_r8_k1.reuse, B_c4_k1.reuse.H1_H1, C_r8_c5
(P1)  STS.U16    [R80 + 0x1c0], R71 ?W1;                     // @P1 STS.U16 [sharedWriteA + 0x1c0], fetchRegA7
      HFMA2 R38, R100, R111.reuse.H1_H1, R38 ?W2;            // HFMA2 C_r8_c7, A_r8_k1, B_c6_k1.reuse.H1_H1, C_r8_c7
      HFMA2 R29, R99.reuse, R110.reuse.H0_H0, R29 ?W1;       // HFMA2 C_r6_c4, A_r6_k1.reuse, B_c4_k1.reuse.H0_H0, C_r6_c4
(P1)  STS.U16    [R81 + 0x0], R72 ?W1;                       // @P1 STS.U16 [sharedWriteB + 0x0], fetchRegB0
      HFMA2 R28, R99.reuse, R111.reuse.H0_H0, R28 ?W2;       // HFMA2 C_r6_c6, A_r6_k1.reuse, B_c6_k1.reuse.H0_H0, C_r6_c6
      HFMA2 R31, R99.reuse, R110.reuse.H1_H1, R31 ?W1;       // HFMA2 C_r6_c5, A_r6_k1.reuse, B_c4_k1.reuse.H1_H1, C_r6_c5
(P1)  STS.U16    [R81 + 0x40], R73 ?W1;                      // @P1 STS.U16 [sharedWriteB + 0x40], fetchRegB1
      HFMA2 R30, R99, R111.reuse.H1_H1, R30 ?W2;             // HFMA2 C_r6_c7, A_r6_k1, B_c6_k1.reuse.H1_H1, C_r6_c7
      HFMA2 R21, R98.reuse, R110.reuse.H0_H0, R21 ?W1;       // HFMA2 C_r4_c4, A_r4_k1.reuse, B_c4_k1.reuse.H0_H0, C_r4_c4
(P1)  STS.U16    [R81 + 0x80], R74 ?W1;                      // @P1 STS.U16 [sharedWriteB + 0x80], fetchRegB2
      HFMA2 R20, R98.reuse, R111.reuse.H0_H0, R20 ?W2;       // HFMA2 C_r4_c6, A_r4_k1.reuse, B_c6_k1.reuse.H0_H0, C_r4_c6
      HFMA2 R23, R98.reuse, R110.reuse.H1_H1, R23 ?W1;       // HFMA2 C_r4_c5, A_r4_k1.reuse, B_c4_k1.reuse.H1_H1, C_r4_c5
(P1)  STS.U16    [R81 + 0xc0], R75 &rd=1 ?W1;                // @P1 STS.U16 [sharedWriteB + 0xc0], fetchRegB3
      HFMA2 R22, R98, R111.reuse.H1_H1, R22 ?W2;             // HFMA2 C_r4_c7, A_r4_k1, B_c6_k1.reuse.H1_H1, C_r4_c7
      HFMA2 R13, R97.reuse, R110.reuse.H0_H0, R13 ?W2;       // HFMA2 C_r2_c4, A_r2_k1.reuse, B_c4_k1.reuse.H0_H0, C_r2_c4
      HFMA2 R12, R97.reuse, R111.reuse.H0_H0, R12 ?W2;       // HFMA2 C_r2_c6, A_r2_k1.reuse, B_c6_k1.reuse.H0_H0, C_r2_c6
      HFMA2 R15, R97.reuse, R110.reuse.H1_H1, R15 ?W2;       // HFMA2 C_r2_c5, A_r2_k1.reuse, B_c4_k1.reuse.H1_H1, C_r2_c5
      HFMA2 R14, R97, R111.reuse.H1_H1, R14 ?W2;             // HFMA2 C_r2_c7, A_r2_k1, B_c6_k1.reuse.H1_H1, C_r2_c7
      HFMA2 R5, R96.reuse, R110.reuse.H0_H0, R5 ?W2;         // HFMA2 C_r0_c4, A_r0_k1.reuse, B_c4_k1.reuse.H0_H0, C_r0_c4
      HFMA2 R4, R96.reuse, R111.reuse.H0_H0, R4 ?W2;         // HFMA2 C_r0_c6, A_r0_k1.reuse, B_c6_k1.reuse.H0_H0, C_r0_c6
      HFMA2 R7, R96.reuse, R110.H1_H1, R7 ?W2;               // HFMA2 C_r0_c5, A_r0_k1.reuse, B_c4_k1.H1_H1, C_r0_c5
      HFMA2 R6, R96, R111.H1_H1, R6 &wr=4 ?W2EG;             // HFMA2 C_r0_c7, A_r0_k1, B_c6_k1.H1_H1, C_r0_c7
      HFMA2 R1, R88.reuse, R104.reuse.H0_H0, R1 &req={0,4} ?W1; // HFMA2 C_r0_c0, A_r0_k0.reuse, B_c0_k0.reuse.H0_H0, C_r0_c0
      LDS.U.128 R96, [R76 + 0xe00] &wr=0 ?W1;                // LDS.U.128 A_r0_k1, [sharedA + 0xe00]
      HFMA2 R0, R88.reuse, R105.reuse.H0_H0, R0 ?W2;         // HFMA2 C_r0_c2, A_r0_k0.reuse, B_c2_k0.reuse.H0_H0, C_r0_c2
      HFMA2 R3, R88.reuse, R104.reuse.H1_H1, R3 ?W1;         // HFMA2 C_r0_c1, A_r0_k0.reuse, B_c0_k0.reuse.H1_H1, C_r0_c1
      LDS.U.128 R108, [R77 + 0x700] &wr=0 ?W1;               // LDS.U.128 B_c0_k1, [sharedB + 0x700]
      HFMA2 R2, R88, R105.reuse.H1_H1, R2 ?W2;               // HFMA2 C_r0_c3, A_r0_k0, B_c2_k0.reuse.H1_H1, C_r0_c3
      HFMA2 R9, R89.reuse, R104.reuse.H0_H0, R9 ?W1;         // HFMA2 C_r2_c0, A_r2_k0.reuse, B_c0_k0.reuse.H0_H0, C_r2_c0
      LDS.U.128 R100, [R76 + 0xe80] &rd=1 &wr=0 ?W1;         // LDS.U.128 A_r8_k1, [sharedA + 0xe80]
      HFMA2 R8, R89.reuse, R105.reuse.H0_H0, R8 ?W2;         // HFMA2 C_r2_c2, A_r2_k0.reuse, B_c2_k0.reuse.H0_H0, C_r2_c2
      HFMA2 R11, R89.reuse, R104.reuse.H1_H1, R11 ?W1;       // HFMA2 C_r2_c1, A_r2_k0.reuse, B_c0_k0.reuse.H1_H1, C_r2_c1
(P1)  BAR.SYNC.DEFER_BLOCKING  0 ?W5;                        // @P1 BAR.SYNC.DEFER_BLOCKING 0
      HFMA2 R10, R89, R105.reuse.H1_H1, R10 ?W2;             // HFMA2 C_r2_c3, A_r2_k0, B_c2_k0.reuse.H1_H1, C_r2_c3
      HFMA2 R17, R90.reuse, R104.reuse.H0_H0, R17 ?W2;       // HFMA2 C_r4_c0, A_r4_k0.reuse, B_c0_k0.reuse.H0_H0, C_r4_c0
      HFMA2 R16, R90.reuse, R105.reuse.H0_H0, R16 ?W2;       // HFMA2 C_r4_c2, A_r4_k0.reuse, B_c2_k0.reuse.H0_H0, C_r4_c2
      HFMA2 R19, R90.reuse, R104.reuse.H1_H1, R19 ?W2;       // HFMA2 C_r4_c1, A_r4_k0.reuse, B_c0_k0.reuse.H1_H1, C_r4_c1
      HFMA2 R18, R90, R105.reuse.H1_H1, R18 ?W2;             // HFMA2 C_r4_c3, A_r4_k0, B_c2_k0.reuse.H1_H1, C_r4_c3
      HFMA2 R25, R91.reuse, R104.reuse.H0_H0, R25 ?W2;       // HFMA2 C_r6_c0, A_r6_k0.reuse, B_c0_k0.reuse.H0_H0, C_r6_c0
      HFMA2 R24, R91.reuse, R105.reuse.H0_H0, R24 ?W2;       // HFMA2 C_r6_c2, A_r6_k0.reuse, B_c2_k0.reuse.H0_H0, C_r6_c2
      HFMA2 R27, R91.reuse, R104.reuse.H1_H1, R27 ?W2;       // HFMA2 C_r6_c1, A_r6_k0.reuse, B_c0_k0.reuse.H1_H1, C_r6_c1
      HFMA2 R26, R91, R105.reuse.H1_H1, R26 ?W2;             // HFMA2 C_r6_c3, A_r6_k0, B_c2_k0.reuse.H1_H1, C_r6_c3
      HFMA2 R33, R92.reuse, R104.reuse.H0_H0, R33 ?W2;       // HFMA2 C_r8_c0, A_r8_k0.reuse, B_c0_k0.reuse.H0_H0, C_r8_c0
      HFMA2 R32, R92.reuse, R105.reuse.H0_H0, R32 ?W2;       // HFMA2 C_r8_c2, A_r8_k0.reuse, B_c2_k0.reuse.H0_H0, C_r8_c2
      HFMA2 R35, R92.reuse, R104.reuse.H1_H1, R35 ?W2;       // HFMA2 C_r8_c1, A_r8_k0.reuse, B_c0_k0.reuse.H1_H1, C_r8_c1
      HFMA2 R34, R92, R105.reuse.H1_H1, R34 ?W2;             // HFMA2 C_r8_c3, A_r8_k0, B_c2_k0.reuse.H1_H1, C_r8_c3
      HFMA2 R41, R93.reuse, R104.reuse.H0_H0, R41 ?W2;       // HFMA2 C_r10_c0, A_r10_k0.reuse, B_c0_k0.reuse.H0_H0, C_r10_c0
      HFMA2 R40, R93.reuse, R105.reuse.H0_H0, R40 ?W2;       // HFMA2 C_r10_c2, A_r10_k0.reuse, B_c2_k0.reuse.H0_H0, C_r10_c2
      HFMA2 R43, R93.reuse, R104.reuse.H1_H1, R43 ?W2;       // HFMA2 C_r10_c1, A_r10_k0.reuse, B_c0_k0.reuse.H1_H1, C_r10_c1
      HFMA2 R42, R93, R105.reuse.H1_H1, R42 ?W2;             // HFMA2 C_r10_c3, A_r10_k0, B_c2_k0.reuse.H1_H1, C_r10_c3
      HFMA2 R49, R94.reuse, R104.reuse.H0_H0, R49 ?W2;       // HFMA2 C_r12_c0, A_r12_k0.reuse, B_c0_k0.reuse.H0_H0, C_r12_c0
      HFMA2 R48, R94.reuse, R105.reuse.H0_H0, R48 ?W2;       // HFMA2 C_r12_c2, A_r12_k0.reuse, B_c2_k0.reuse.H0_H0, C_r12_c2
      HFMA2 R51, R94.reuse, R104.reuse.H1_H1, R51 ?W2;       // HFMA2 C_r12_c1, A_r12_k0.reuse, B_c0_k0.reuse.H1_H1, C_r12_c1
      HFMA2 R50, R94.reuse, R105.reuse.H1_H1, R50 ?W2;       // HFMA2 C_r12_c3, A_r12_k0.reuse, B_c2_k0.reuse.H1_H1, C_r12_c3
      HFMA2 R57, R95.reuse, R104.reuse.H0_H0, R57 ?W2;       // HFMA2 C_r14_c0, A_r14_k0.reuse, B_c0_k0.reuse.H0_H0, C_r14_c0
      HFMA2 R56, R95.reuse, R105.reuse.H0_H0, R56 ?W2;       // HFMA2 C_r14_c2, A_r14_k0.reuse, B_c2_k0.reuse.H0_H0, C_r14_c2
      HFMA2 R59, R95.reuse, R104.H1_H1, R59 ?W2;             // HFMA2 C_r14_c1, A_r14_k0.reuse, B_c0_k0.H1_H1, C_r14_c1
      HFMA2 R58, R95.reuse, R105.H1_H1, R58 ?W2;             // HFMA2 C_r14_c3, A_r14_k0.reuse, B_c2_k0.H1_H1, C_r14_c3
      HFMA2 R61, R95.reuse, R106.reuse.H0_H0, R61 ?W2;       // HFMA2 C_r14_c4, A_r14_k0.reuse, B_c4_k0.reuse.H0_H0, C_r14_c4
      HFMA2 R60, R95.reuse, R107.reuse.H0_H0, R60 ?W2;       // HFMA2 C_r14_c6, A_r14_k0.reuse, B_c6_k0.reuse.H0_H0, C_r14_c6
      HFMA2 R63, R95.reuse, R106.reuse.H1_H1, R63 ?W2;       // HFMA2 C_r14_c5, A_r14_k0.reuse, B_c4_k0.reuse.H1_H1, C_r14_c5
      HFMA2 R62, R95, R107.reuse.H1_H1, R62 ?W2;             // HFMA2 C_r14_c7, A_r14_k0, B_c6_k0.reuse.H1_H1, C_r14_c7
      HFMA2 R53, R94.reuse, R106.reuse.H0_H0, R53 ?W2;       // HFMA2 C_r12_c4, A_r12_k0.reuse, B_c4_k0.reuse.H0_H0, C_r12_c4
      HFMA2 R52, R94.reuse, R107.reuse.H0_H0, R52 ?W2;       // HFMA2 C_r12_c6, A_r12_k0.reuse, B_c6_k0.reuse.H0_H0, C_r12_c6
      HFMA2 R55, R94.reuse, R106.reuse.H1_H1, R55 ?W2;       // HFMA2 C_r12_c5, A_r12_k0.reuse, B_c4_k0.reuse.H1_H1, C_r12_c5
      HFMA2 R54, R94, R107.reuse.H1_H1, R54 ?W2;             // HFMA2 C_r12_c7, A_r12_k0, B_c6_k0.reuse.H1_H1, C_r12_c7
      HFMA2 R45, R93.reuse, R106.reuse.H0_H0, R45 ?W2;       // HFMA2 C_r10_c4, A_r10_k0.reuse, B_c4_k0.reuse.H0_H0, C_r10_c4
      HFMA2 R44, R93.reuse, R107.reuse.H0_H0, R44 ?W2;       // HFMA2 C_r10_c6, A_r10_k0.reuse, B_c6_k0.reuse.H0_H0, C_r10_c6
      HFMA2 R47, R93.reuse, R106.reuse.H1_H1, R47 ?W2;       // HFMA2 C_r10_c5, A_r10_k0.reuse, B_c4_k0.reuse.H1_H1, C_r10_c5
      HFMA2 R46, R93, R107.reuse.H1_H1, R46 ?W2;             // HFMA2 C_r10_c7, A_r10_k0, B_c6_k0.reuse.H1_H1, C_r10_c7
      HFMA2 R37, R92.reuse, R106.reuse.H0_H0, R37 ?W2;       // HFMA2 C_r8_c4, A_r8_k0.reuse, B_c4_k0.reuse.H0_H0, C_r8_c4
      HFMA2 R36, R92.reuse, R107.reuse.H0_H0, R36 ?W2;       // HFMA2 C_r8_c6, A_r8_k0.reuse, B_c6_k0.reuse.H0_H0, C_r8_c6
      HFMA2 R39, R92.reuse, R106.reuse.H1_H1, R39 ?W2;       // HFMA2 C_r8_c5, A_r8_k0.reuse, B_c4_k0.reuse.H1_H1, C_r8_c5
      HFMA2 R38, R92, R107.reuse.H1_H1, R38 ?W2;             // HFMA2 C_r8_c7, A_r8_k0, B_c6_k0.reuse.H1_H1, C_r8_c7
      HFMA2 R29, R91.reuse, R106.reuse.H0_H0, R29 ?W2;       // HFMA2 C_r6_c4, A_r6_k0.reuse, B_c4_k0.reuse.H0_H0, C_r6_c4
      HFMA2 R28, R91.reuse, R107.reuse.H0_H0, R28 ?W2;       // HFMA2 C_r6_c6, A_r6_k0.reuse, B_c6_k0.reuse.H0_H0, C_r6_c6
      HFMA2 R31, R91.reuse, R106.reuse.H1_H1, R31 ?W2;       // HFMA2 C_r6_c5, A_r6_k0.reuse, B_c4_k0.reuse.H1_H1, C_r6_c5
      HFMA2 R30, R91, R107.reuse.H1_H1, R30 ?W2;             // HFMA2 C_r6_c7, A_r6_k0, B_c6_k0.reuse.H1_H1, C_r6_c7
      HFMA2 R21, R90.reuse, R106.reuse.H0_H0, R21 ?W2;       // HFMA2 C_r4_c4, A_r4_k0.reuse, B_c4_k0.reuse.H0_H0, C_r4_c4
      HFMA2 R20, R90.reuse, R107.reuse.H0_H0, R20 ?W2;       // HFMA2 C_r4_c6, A_r4_k0.reuse, B_c6_k0.reuse.H0_H0, C_r4_c6
      HFMA2 R23, R90.reuse, R106.reuse.H1_H1, R23 ?W2;       // HFMA2 C_r4_c5, A_r4_k0.reuse, B_c4_k0.reuse.H1_H1, C_r4_c5
      HFMA2 R22, R90, R107.reuse.H1_H1, R22 ?W2;             // HFMA2 C_r4_c7, A_r4_k0, B_c6_k0.reuse.H1_H1, C_r4_c7
      HFMA2 R13, R89.reuse, R106.reuse.H0_H0, R13 ?W2;       // HFMA2 C_r2_c4, A_r2_k0.reuse, B_c4_k0.reuse.H0_H0, C_r2_c4
      HFMA2 R12, R89.reuse, R107.reuse.H0_H0, R12 ?W2;       // HFMA2 C_r2_c6, A_r2_k0.reuse, B_c6_k0.reuse.H0_H0, C_r2_c6
      HFMA2 R15, R89.reuse, R106.reuse.H1_H1, R15 ?W2;       // HFMA2 C_r2_c5, A_r2_k0.reuse, B_c4_k0.reuse.H1_H1, C_r2_c5
      HFMA2 R14, R89, R107.reuse.H1_H1, R14 ?W2;             // HFMA2 C_r2_c7, A_r2_k0, B_c6_k0.reuse.H1_H1, C_r2_c7
      HFMA2 R5, R88.reuse, R106.reuse.H0_H0, R5 ?W2;         // HFMA2 C_r0_c4, A_r0_k0.reuse, B_c4_k0.reuse.H0_H0, C_r0_c4
      HFMA2 R4, R88.reuse, R107.reuse.H0_H0, R4 ?W2;         // HFMA2 C_r0_c6, A_r0_k0.reuse, B_c6_k0.reuse.H0_H0, C_r0_c6
      HFMA2 R7, R88.reuse, R106.H1_H1, R7 ?W2;               // HFMA2 C_r0_c5, A_r0_k0.reuse, B_c4_k0.H1_H1, C_r0_c5
      HFMA2 R6, R88, R107.H1_H1, R6 &wr=4 ?W2EG;             // HFMA2 C_r0_c7, A_r0_k0, B_c6_k0.H1_H1, C_r0_c7
      HFMA2 R1, R96.reuse, R108.reuse.H0_H0, R1 &req={0,4} ?W1; // HFMA2 C_r0_c0, A_r0_k1.reuse, B_c0_k1.reuse.H0_H0, C_r0_c0
      IADD   R76, R76, R87 &req=1 ?W1;                       // IADD sharedA, sharedA, sharedPageFlip
      HFMA2 R0, R96.reuse, R109.reuse.H0_H0, R0 ?W2;         // HFMA2 C_r0_c2, A_r0_k1.reuse, B_c2_k1.reuse.H0_H0, C_r0_c2
      HFMA2 R3, R96.reuse, R108.reuse.H1_H1, R3 ?W1;         // HFMA2 C_r0_c1, A_r0_k1.reuse, B_c0_k1.reuse.H1_H1, C_r0_c1
      IADD   R77, R77, R87 &req=1 ?W1;                       // IADD sharedB, sharedB, sharedPageFlip
      HFMA2 R2, R96, R109.reuse.H1_H1, R2 ?W2;               // HFMA2 C_r0_c3, A_r0_k1, B_c2_k1.reuse.H1_H1, C_r0_c3
      HFMA2 R9, R97.reuse, R108.reuse.H0_H0, R9 ?W1;         // HFMA2 C_r2_c0, A_r2_k1.reuse, B_c0_k1.reuse.H0_H0, C_r2_c0
(P1)  IADD   R80, R80, -R87 &req=1 ?W1;                      // @P1 IADD sharedWriteA, sharedWriteA, -sharedPageFlip
      HFMA2 R8, R97.reuse, R109.reuse.H0_H0, R8 ?W2;         // HFMA2 C_r2_c2, A_r2_k1.reuse, B_c2_k1.reuse.H0_H0, C_r2_c2
      HFMA2 R11, R97.reuse, R108.reuse.H1_H1, R11 ?W1;       // HFMA2 C_r2_c1, A_r2_k1.reuse, B_c0_k1.reuse.H1_H1, C_r2_c1
// Virtual ?REQ_BAR found on next instruction, stop putting ?BARRIER_EXEMPT on decoupled instructions
(P1)  LDS.U.128 R88, [R76 + 0x0] &wr=0 ?W1;                  // @P1 LDS.U.128 A_r0_k0, [sharedA + 0x0]
      HFMA2 R10, R97, R109.reuse.H1_H1, R10 ?W2;             // HFMA2 C_r2_c3, A_r2_k1, B_c2_k1.reuse.H1_H1, C_r2_c3
      HFMA2 R17, R98.reuse, R108.reuse.H0_H0, R17 ?W1;       // HFMA2 C_r4_c0, A_r4_k1.reuse, B_c0_k1.reuse.H0_H0, C_r4_c0
(P1)  LDS.U.128 R104, [R77 + 0x0] &wr=0 ?W1;                 // @P1 LDS.U.128 B_c0_k0, [sharedB + 0x0]
      HFMA2 R16, R98.reuse, R109.reuse.H0_H0, R16 ?W2;       // HFMA2 C_r4_c2, A_r4_k1.reuse, B_c2_k1.reuse.H0_H0, C_r4_c2
      HFMA2 R19, R98.reuse, R108.reuse.H1_H1, R19 ?W1;       // HFMA2 C_r4_c1, A_r4_k1.reuse, B_c0_k1.reuse.H1_H1, C_r4_c1
(P1)  LDS.U.128 R92, [R76 + 0x80] &rd=1 &wr=0 ?W1;           // @P1 LDS.U.128 A_r8_k0, [sharedA + 0x80]
      HFMA2 R18, R98, R109.reuse.H1_H1, R18 ?W2;             // HFMA2 C_r4_c3, A_r4_k1, B_c2_k1.reuse.H1_H1, C_r4_c3
      HFMA2 R25, R99.reuse, R108.reuse.H0_H0, R25 ?W1;       // HFMA2 C_r6_c0, A_r6_k1.reuse, B_c0_k1.reuse.H0_H0, C_r6_c0
(P1)  IADD   R81, R81, -R87 &req=1 ?W1;                      // @P1 IADD sharedWriteB, sharedWriteB, -sharedPageFlip
      HFMA2 R24, R99.reuse, R109.reuse.H0_H0, R24 ?W2;       // HFMA2 C_r6_c2, A_r6_k1.reuse, B_c2_k1.reuse.H0_H0, C_r6_c2
      HFMA2 R27, R99.reuse, R108.reuse.H1_H1, R27 ?W1;       // HFMA2 C_r6_c1, A_r6_k1.reuse, B_c0_k1.reuse.H1_H1, C_r6_c1
(P1)  IADD   R87, RZ, -R87 ?W1;                              // @P1 IADD sharedPageFlip, RZ, -sharedPageFlip
      HFMA2 R26, R99, R109.reuse.H1_H1, R26 ?W2;             // HFMA2 C_r6_c3, A_r6_k1, B_c2_k1.reuse.H1_H1, C_r6_c3
      HFMA2 R33, R100.reuse, R108.reuse.H0_H0, R33 ?W2;      // HFMA2 C_r8_c0, A_r8_k1.reuse, B_c0_k1.reuse.H0_H0, C_r8_c0
      HFMA2 R32, R100.reuse, R109.reuse.H0_H0, R32 ?W2;      // HFMA2 C_r8_c2, A_r8_k1.reuse, B_c2_k1.reuse.H0_H0, C_r8_c2
      HFMA2 R35, R100.reuse, R108.reuse.H1_H1, R35 ?W2;      // HFMA2 C_r8_c1, A_r8_k1.reuse, B_c0_k1.reuse.H1_H1, C_r8_c1
      HFMA2 R34, R100, R109.reuse.H1_H1, R34 ?W2;            // HFMA2 C_r8_c3, A_r8_k1, B_c2_k1.reuse.H1_H1, C_r8_c3
      HFMA2 R41, R101.reuse, R108.reuse.H0_H0, R41 ?W2;      // HFMA2 C_r10_c0, A_r10_k1.reuse, B_c0_k1.reuse.H0_H0, C_r10_c0
      HFMA2 R40, R101.reuse, R109.reuse.H0_H0, R40 ?W2;      // HFMA2 C_r10_c2, A_r10_k1.reuse, B_c2_k1.reuse.H0_H0, C_r10_c2
      HFMA2 R43, R101.reuse, R108.reuse.H1_H1, R43 ?W2;      // HFMA2 C_r10_c1, A_r10_k1.reuse, B_c0_k1.reuse.H1_H1, C_r10_c1
      HFMA2 R42, R101, R109.reuse.H1_H1, R42 ?W2;            // HFMA2 C_r10_c3, A_r10_k1, B_c2_k1.reuse.H1_H1, C_r10_c3
      HFMA2 R49, R102.reuse, R108.reuse.H0_H0, R49 ?W2;      // HFMA2 C_r12_c0, A_r12_k1.reuse, B_c0_k1.reuse.H0_H0, C_r12_c0
      HFMA2 R48, R102.reuse, R109.reuse.H0_H0, R48 ?W2;      // HFMA2 C_r12_c2, A_r12_k1.reuse, B_c2_k1.reuse.H0_H0, C_r12_c2
      HFMA2 R51, R102.reuse, R108.reuse.H1_H1, R51 ?W2;      // HFMA2 C_r12_c1, A_r12_k1.reuse, B_c0_k1.reuse.H1_H1, C_r12_c1
      HFMA2 R50, R102.reuse, R109.reuse.H1_H1, R50 ?W2;      // HFMA2 C_r12_c3, A_r12_k1.reuse, B_c2_k1.reuse.H1_H1, C_r12_c3
      HFMA2 R57, R103.reuse, R108.reuse.H0_H0, R57 ?W2;      // HFMA2 C_r14_c0, A_r14_k1.reuse, B_c0_k1.reuse.H0_H0, C_r14_c0
      HFMA2 R56, R103.reuse, R109.reuse.H0_H0, R56 ?W2;      // HFMA2 C_r14_c2, A_r14_k1.reuse, B_c2_k1.reuse.H0_H0, C_r14_c2
      HFMA2 R59, R103.reuse, R108.H1_H1, R59 ?W2;            // HFMA2 C_r14_c1, A_r14_k1.reuse, B_c0_k1.H1_H1, C_r14_c1
      HFMA2 R58, R103.reuse, R109.H1_H1, R58 ?W2;            // HFMA2 C_r14_c3, A_r14_k1.reuse, B_c2_k1.H1_H1, C_r14_c3
      HFMA2 R61, R103.reuse, R110.reuse.H0_H0, R61 ?W2;      // HFMA2 C_r14_c4, A_r14_k1.reuse, B_c4_k1.reuse.H0_H0, C_r14_c4
      HFMA2 R60, R103.reuse, R111.reuse.H0_H0, R60 ?W2;      // HFMA2 C_r14_c6, A_r14_k1.reuse, B_c6_k1.reuse.H0_H0, C_r14_c6
      HFMA2 R63, R103.reuse, R110.reuse.H1_H1, R63 ?W2;      // HFMA2 C_r14_c5, A_r14_k1.reuse, B_c4_k1.reuse.H1_H1, C_r14_c5
      HFMA2 R62, R103, R111.reuse.H1_H1, R62 ?W2;            // HFMA2 C_r14_c7, A_r14_k1, B_c6_k1.reuse.H1_H1, C_r14_c7
      HFMA2 R53, R102.reuse, R110.reuse.H0_H0, R53 ?W2;      // HFMA2 C_r12_c4, A_r12_k1.reuse, B_c4_k1.reuse.H0_H0, C_r12_c4
      HFMA2 R52, R102.reuse, R111.reuse.H0_H0, R52 ?W2;      // HFMA2 C_r12_c6, A_r12_k1.reuse, B_c6_k1.reuse.H0_H0, C_r12_c6
      HFMA2 R55, R102.reuse, R110.reuse.H1_H1, R55 ?W2;      // HFMA2 C_r12_c5, A_r12_k1.reuse, B_c4_k1.reuse.H1_H1, C_r12_c5
      HFMA2 R54, R102, R111.reuse.H1_H1, R54 ?W2;            // HFMA2 C_r12_c7, A_r12_k1, B_c6_k1.reuse.H1_H1, C_r12_c7
      HFMA2 R45, R101.reuse, R110.reuse.H0_H0, R45 ?W2;      // HFMA2 C_r10_c4, A_r10_k1.reuse, B_c4_k1.reuse.H0_H0, C_r10_c4
      HFMA2 R44, R101.reuse, R111.reuse.H0_H0, R44 ?W2;      // HFMA2 C_r10_c6, A_r10_k1.reuse, B_c6_k1.reuse.H0_H0, C_r10_c6
      HFMA2 R47, R101.reuse, R110.reuse.H1_H1, R47 ?W2;      // HFMA2 C_r10_c5, A_r10_k1.reuse, B_c4_k1.reuse.H1_H1, C_r10_c5
      HFMA2 R46, R101, R111.reuse.H1_H1, R46 ?W2;            // HFMA2 C_r10_c7, A_r10_k1, B_c6_k1.reuse.H1_H1, C_r10_c7
      HFMA2 R37, R100.reuse, R110.reuse.H0_H0, R37 ?W2;      // HFMA2 C_r8_c4, A_r8_k1.reuse, B_c4_k1.reuse.H0_H0, C_r8_c4
      HFMA2 R36, R100.reuse, R111.reuse.H0_H0, R36 ?W2;      // HFMA2 C_r8_c6, A_r8_k1.reuse, B_c6_k1.reuse.H0_H0, C_r8_c6
      HFMA2 R39, R100.reuse, R110.reuse.H1_H1, R39 ?W2;      // HFMA2 C_r8_c5, A_r8_k1.reuse, B_c4_k1.reuse.H1_H1, C_r8_c5
      HFMA2 R38, R100, R111.reuse.H1_H1, R38 ?W2;            // HFMA2 C_r8_c7, A_r8_k1, B_c6_k1.reuse.H1_H1, C_r8_c7
      HFMA2 R29, R99.reuse, R110.reuse.H0_H0, R29 ?W2;       // HFMA2 C_r6_c4, A_r6_k1.reuse, B_c4_k1.reuse.H0_H0, C_r6_c4
      HFMA2 R28, R99.reuse, R111.reuse.H0_H0, R28 ?W2;       // HFMA2 C_r6_c6, A_r6_k1.reuse, B_c6_k1.reuse.H0_H0, C_r6_c6
      HFMA2 R31, R99.reuse, R110.reuse.H1_H1, R31 ?W2;       // HFMA2 C_r6_c5, A_r6_k1.reuse, B_c4_k1.reuse.H1_H1, C_r6_c5
      HFMA2 R30, R99, R111.reuse.H1_H1, R30 ?W2;             // HFMA2 C_r6_c7, A_r6_k1, B_c6_k1.reuse.H1_H1, C_r6_c7
      HFMA2 R21, R98.reuse, R110.reuse.H0_H0, R21 ?W2;       // HFMA2 C_r4_c4, A_r4_k1.reuse, B_c4_k1.reuse.H0_H0, C_r4_c4
      HFMA2 R20, R98.reuse, R111.reuse.H0_H0, R20 ?W2;       // HFMA2 C_r4_c6, A_r4_k1.reuse, B_c6_k1.reuse.H0_H0, C_r4_c6
      HFMA2 R23, R98.reuse, R110.reuse.H1_H1, R23 ?W2;       // HFMA2 C_r4_c5, A_r4_k1.reuse, B_c4_k1.reuse.H1_H1, C_r4_c5
      HFMA2 R22, R98, R111.reuse.H1_H1, R22 ?W2;             // HFMA2 C_r4_c7, A_r4_k1, B_c6_k1.reuse.H1_H1, C_r4_c7
      HFMA2 R13, R97.reuse, R110.reuse.H0_H0, R13 ?W2;       // HFMA2 C_r2_c4, A_r2_k1.reuse, B_c4_k1.reuse.H0_H0, C_r2_c4
      HFMA2 R12, R97.reuse, R111.reuse.H0_H0, R12 ?W2;       // HFMA2 C_r2_c6, A_r2_k1.reuse, B_c6_k1.reuse.H0_H0, C_r2_c6
      HFMA2 R15, R97.reuse, R110.reuse.H1_H1, R15 ?W2;       // HFMA2 C_r2_c5, A_r2_k1.reuse, B_c4_k1.reuse.H1_H1, C_r2_c5
      HFMA2 R14, R97, R111.reuse.H1_H1, R14 ?W2;             // HFMA2 C_r2_c7, A_r2_k1, B_c6_k1.reuse.H1_H1, C_r2_c7
      HFMA2 R5, R96.reuse, R110.reuse.H0_H0, R5 ?W2;         // HFMA2 C_r0_c4, A_r0_k1.reuse, B_c4_k1.reuse.H0_H0, C_r0_c4
      HFMA2 R4, R96.reuse, R111.reuse.H0_H0, R4 ?W2;         // HFMA2 C_r0_c6, A_r0_k1.reuse, B_c6_k1.reuse.H0_H0, C_r0_c6
      HFMA2 R7, R96.reuse, R110.H1_H1, R7 ?W2;               // HFMA2 C_r0_c5, A_r0_k1.reuse, B_c4_k1.H1_H1, C_r0_c5
      HFMA2 R6, R96, R111.H1_H1, R6 &wr=4 ?W1EG;             // HFMA2 C_r0_c7, A_r0_k1, B_c6_k1.H1_H1, C_r0_c7
(P1)  BRA.U turing_hgemm_256x128_mods_nt_LOOP ?W4;           // @P1 BRA.U turing_hgemm_256x128_mods_nt_LOOP
turing_hgemm_256x128_mods_nt_END_OF_LOOP:
      LOP.AND P0, RZ, R85, 0x7 ?W12EG;                       // LOP.AND P0, RZ, counterK, 0x7
(!P0) BRA.U  turing_hgemm_256x128_mods_nt_EPILOG ?W4;        // @!P0 BRA.U turing_hgemm_256x128_mods_nt_EPILOG
turing_hgemm_256x128_mods_nt_K_RESIDUE:
      NOP &req={0, 3, 4} ?W2;                                // NOP &req={SB_LDS_WR, SB_LDG_RD, SB_R_WR}
      S2R  R96, SR_Tid.X &wr=4 ?W2;                          // S2R wid, SR_Tid.X
      LOP.AND R97, R96, 0xe0 &req=4 ?W4;                     // LOP.AND diff, wid, 0xe0
      SHR.U32 R97, R97, 5 ?W4;                               // SHR.U32 diff, diff, 5
      IADD    R97, R97, -R85 ?W4;                            // IADD diff, diff, -counterK
      ISETP.LT    P0, R97, 0 ?W12EG;                         // ISETP.LT P0, diff, 0
(!P0) R2P PR, RZ.B0, 0x78 ?W2;                               // @!P0 R2P PR, RZ.B0, 0x78
(P0)  R2P PR, R86.B0, 0x78 ?W12EG;                           // @P0 R2P PR, raggedMnPreds0.B0, 0x78
(P3)  LDG.E.EN.LTC128B.U16.CONSTANT.GPU  R64, [R82 + 0x0] &wr=2 ?W2; // @P3 LDG.E.EN.LTC128B.U16.CONSTANT.GPU fetchRegA0, [readPtrA + 0x0]
(!P3) MOV R64, RZ ?W2;                                       // @!P3 MOV fetchRegA0_0, RZ
(P4)  LDG.E.EN.LTC128B.U16.CONSTANT.GPU  R65, [R82 + 0x40] &wr=2 ?W2; // @P4 LDG.E.EN.LTC128B.U16.CONSTANT.GPU fetchRegA1, [readPtrA + 0x40]
(!P4) MOV R65, RZ ?W2;                                       // @!P4 MOV fetchRegA1_0, RZ
(P5)  LDG.E.EN.LTC128B.U16.CONSTANT.GPU  R66, [R82 + 0x80] &wr=2 ?W2; // @P5 LDG.E.EN.LTC128B.U16.CONSTANT.GPU fetchRegA2, [readPtrA + 0x80]
(!P5) MOV R66, RZ ?W2;                                       // @!P5 MOV fetchRegA2_0, RZ
(P6)  LDG.E.EN.LTC128B.U16.CONSTANT.GPU  R67, [R82 + 0xc0] &wr=2 ?W2; // @P6 LDG.E.EN.LTC128B.U16.CONSTANT.GPU fetchRegA3, [readPtrA + 0xc0]
(!P6) MOV R67, RZ ?W2;                                       // @!P6 MOV fetchRegA3_0, RZ
(P0)  R2P PR, R86.B1, 0x78 ?W12EG;                           // @P0 R2P PR, raggedMnPreds0.B1, 0x78
(P3)  LDG.E.EN.LTC128B.U16.CONSTANT.GPU  R68, [R82 + 0x100] &wr=2 ?W2; // @P3 LDG.E.EN.LTC128B.U16.CONSTANT.GPU fetchRegA4, [readPtrA + 0x100]
(!P3) MOV R68, RZ ?W2;                                       // @!P3 MOV fetchRegA4_0, RZ
(P4)  LDG.E.EN.LTC128B.U16.CONSTANT.GPU  R69, [R82 + 0x140] &wr=2 ?W2; // @P4 LDG.E.EN.LTC128B.U16.CONSTANT.GPU fetchRegA5, [readPtrA + 0x140]
(!P4) MOV R69, RZ ?W2;                                       // @!P4 MOV fetchRegA5_0, RZ
(P5)  LDG.E.EN.LTC128B.U16.CONSTANT.GPU  R70, [R82 + 0x180] &wr=2 ?W2; // @P5 LDG.E.EN.LTC128B.U16.CONSTANT.GPU fetchRegA6, [readPtrA + 0x180]
(!P5) MOV R70, RZ ?W2;                                       // @!P5 MOV fetchRegA6_0, RZ
(P6)  LDG.E.EN.LTC128B.U16.CONSTANT.GPU  R71, [R82 + 0x1c0] &rd=3 &wr=2 ?W2; // @P6 LDG.E.EN.LTC128B.U16.CONSTANT.GPU fetchRegA7, [readPtrA + 0x1c0]
(!P6) MOV R71, RZ ?W2;                                       // @!P6 MOV fetchRegA7_0, RZ
      LOP.AND R97, R96, 0xe0 &req=4 ?W4;                     // LOP.AND diff, wid, 0xe0
      SHR.U32 R97, R97, 5 ?W4;                               // SHR.U32 diff, diff, 5
      IADD    R97, R97, -R85 ?W4;                            // IADD diff, diff, -counterK
      ISETP.LT    P0, R97, 0 &req=3 ?W12EG;                  // ISETP.LT P0, diff, 0
(!P0) R2P PR, RZ.B0, 0x78 ?W2;                               // @!P0 R2P PR, RZ.B0, 0x78
(P0)  R2P PR, R86.B2, 0x78 ?W12EG;                           // @P0 R2P PR, raggedMnPreds0.B2, 0x78
(P3)  LDG.E.EN.LTC128B.U16.CONSTANT.GPU  R72, [R78 + 0x0] &wr=2 ?W2; // @P3 LDG.E.EN.LTC128B.U16.CONSTANT.GPU fetchRegB0, [readPtrB + 0x0]
(!P3) MOV R72, RZ ?W2;                                       // @!P3 MOV fetchRegB0_0, RZ
(P4)  LDG.E.EN.LTC128B.U16.CONSTANT.GPU  R73, [R78 + 0x40] &wr=2 ?W2; // @P4 LDG.E.EN.LTC128B.U16.CONSTANT.GPU fetchRegB1, [readPtrB + 0x40]
(!P4) MOV R73, RZ ?W2;                                       // @!P4 MOV fetchRegB1_0, RZ
(P5)  LDG.E.EN.LTC128B.U16.CONSTANT.GPU  R74, [R78 + 0x80] &wr=2 ?W2; // @P5 LDG.E.EN.LTC128B.U16.CONSTANT.GPU fetchRegB2, [readPtrB + 0x80]
(!P5) MOV R74, RZ ?W2;                                       // @!P5 MOV fetchRegB2_0, RZ
(P6)  LDG.E.EN.LTC128B.U16.CONSTANT.GPU  R75, [R78 + 0xc0] &rd=3 &wr=2 ?W2; // @P6 LDG.E.EN.LTC128B.U16.CONSTANT.GPU fetchRegB3, [readPtrB + 0xc0]
(!P6) MOV R75, RZ ?W2;                                       // @!P6 MOV fetchRegB3_0, RZ
      LOP32I.AND  R85, R85, 0xfffffff8 ?W2;                  // LOP32I.AND counterK, counterK, 0xfffffff8
      BRA.U turing_hgemm_256x128_mods_nt_PRELOOP ?W4;        // BRA.U turing_hgemm_256x128_mods_nt_PRELOOP
turing_hgemm_256x128_mods_nt_EPILOG:
      ISETP.NE    P0, RZ, c[0][0x1ec] &req={0,1,2,3,4,5} ?W2; // ISETP.NE P0, RZ, AbByRef
      MOV         R80, c[0][0x1d8] ?W2;                      // MOV alphaPtr, AlphaRef
      MOV         R81, c[0][0x1dc] ?W2;                      // MOV alphaPtr_HI, AlphaRef_HI
      MOV         R76, c[0][0x1d4] ?W2;                      // MOV mode, Mode
      S2R         R68, SR_Tid.X &wr=4 ?W2;                   // S2R tid, SR_Tid.X
      S2R         R69, SR_CTAid.X &wr=4 ?W2;                 // S2R ctaRow, SR_CTAid.X
      S2R         R70, SR_CTAid.Y &wr=4 ?W2;                 // S2R ctaCol, SR_CTAid.Y
      S2R         R71, SR_CTAid.Z &wr=4 ?W2;                 // S2R batchIdx, SR_CTAid.Z
(P0)  LDG.E.EN.LTC128B.U16.CONSTANT.GPU R79, [R80] &rd=3 &wr=0 ?W2; // @P0 LDG.E.EN.LTC128B.U16.CONSTANT.GPU alpha, [alphaPtr]
      HSETP2.NE   P1, PT, R84, RZ &wr=4 ?W2;                 // HSETP2.NE P1, PT, beta, RZ
(!P0) LDC.U16    R79, c[0][0x1e8] &wr=0 ?W2;                 // @!P0 LDC.U16 alpha, AlphaVal
      BAR.SYNC.DEFER_BLOCKING 0 &req=3 ?W5;                  // BAR.SYNC.DEFER_BLOCKING 0
      MOV  R81, RZ ?W2;                                      // MOV row_HI, RZ
      LOP.AND  R86, R76, 0xf00 ?W2;                          // LOP.AND log2GroupCols, mode, 0xf00
      LOP.AND  P5, RZ, R76, 0x1000 ?W2;                      // LOP.AND P5, RZ, mode, 0x1000
      SHR.U32  R86, R86, 8 ?W4;                              // SHR.U32 log2GroupCols, log2GroupCols, 8
      BMSK     R87, R86, 1 ?W2;                              // BMSK groupCols, log2GroupCols, 1
      BMSK     R88, RZ, R86 ?W2;                             // BMSK mask, RZ, log2GroupCols
      PSETP.AND P4, !PT, !PT ?W2;                            // PSETP.AND P4, !PT, !PT
turing_hgemm_256x128_mods_nt_epilog_cta_swizzle_loop:
      LOP.OR   R89, R70, R88 &req=4 ?W2;                     // LOP.OR testCol, ctaCol, mask
      ISETP.EQ P3, R88, 3 ?W2;                               // ISETP.EQ P3, mask, 3
      ISETP.LT P2, R89, c[0x0][0x010] ?W2;                   // ISETP.LT P2, testCol, GridDimY
      LOP.AND  R90,  R70.reuse,  R88.reuse ?W2;              // LOP.AND colMod, ctaCol.reuse, mask.reuse
      LOP.AND  R93,  R70,        R87 ?W2;                    // LOP.AND colBit, ctaCol, groupCols
      ISETP.EQ.AND P3, PT, R89, c[0x0][0x010], P3 ?W2;       // ISETP.EQ.AND P3, PT, testCol, GridDimY, P3
      LOP.AND  R91, R70.reuse, ~R88 ?W1;                     // LOP.AND colBase, ctaCol.reuse, ~mask
      IMAD.U32 R92, R90, c[0x0][0x00c], R69 &req=4 ?W1;      // IMAD.U32 linear, colMod, GridDimX, ctaRow
(P5)  ISETP.EQ.XOR P4, PT, R93, R87, P4 ?W2;                 // @P5 ISETP.EQ.XOR P4, PT, colBit, groupCols, P4
      SHR.U32 R87, R87, 1 ?W2;                               // SHR.U32 groupCols, groupCols, 1
(P2)  BRA turing_hgemm_256x128_mods_nt_epilog_cta_swizzle_group_col_pow2 ?W4EG ?BARRIER_EXEMPT; // @P2 BRA turing_hgemm_256x128_mods_nt_epilog_cta_swizzle_group_col_pow2
(!P3) SHR.U32  R88, R88, 1 ?W2;                              // @!P3 SHR.U32 mask, mask, 1
(!P3) IADD     R86, R86, -1 ?W2;                             // @!P3 IADD log2GroupCols, log2GroupCols, -1
(!P3) BRA turing_hgemm_256x128_mods_nt_epilog_cta_swizzle_loop ?W4EG ?BARRIER_EXEMPT; // @!P3 BRA turing_hgemm_256x128_mods_nt_epilog_cta_swizzle_loop
      IMUL.WIDE.U32 R94, R92, 0x55555556 ?W1;                // IMUL.WIDE.U32 swizRow64, linear, 0x55555556
      IADD  R70, R91, R92 ?W5;                               // IADD ctaCol, colBase, linear
      IMAD.U32 R70, R95, -3, R70 ?W1;                        // IMAD.U32 ctaCol, swizRow, -3, ctaCol
(!P4) MOV R69, R95 ?W2;                                      // @!P4 MOV ctaRow, swizRow
(P4)  IADD.X R69, ~R95, c[0x0][0x00c], !PT ?W2;              // @P4 IADD.X ctaRow, ~swizRow, GridDimX, !PT
      BRA turing_hgemm_256x128_mods_nt_epilog_cta_swizzle_done ?W4EG ?BARRIER_EXEMPT; // BRA turing_hgemm_256x128_mods_nt_epilog_cta_swizzle_done
turing_hgemm_256x128_mods_nt_epilog_cta_swizzle_group_col_pow2:
      SHR.U32 R69, R92, R86 ?W2;                             // SHR.U32 ctaRow, linear, log2GroupCols
      LOP3.LUT  R70, R91, R92, R88, 0xf8 ?W2;                // LOP3.LUT ctaCol, colBase, linear, mask, B_AND_C__OR_A ?WiT
(P4)  IADD.X R69, ~R69, c[0x0][0x00c], !PT ?W4;              // @P4 IADD.X ctaRow, ~ctaRow, GridDimX, !PT
turing_hgemm_256x128_mods_nt_epilog_cta_swizzle_done:
      SHL         R90, R68.reuse, 5 &req=4 ?W2;              // SHL scratch3, tid.reuse, 5
      SHL         R89, R68.reuse, 8 ?W2;                     // SHL scratch2, tid.reuse, 8
      SHL         R88, R68.reuse, 3 ?W2;                     // SHL scratch1, tid.reuse, 3
      LOP.AND     R66, R90, 0x1e00 ?W4;                      // LOP.AND stsWritePtr, scratch3, 0x1e00
      LOP3.LUT    R66, R66, 0x100, R89, 0xf8 ?W4;            // LOP3.LUT stsWritePtr, stsWritePtr, 0x100, scratch2, 0xf8
      LOP3.LUT    R66, R66, 0x70, R88, 0xf8 ?W2;             // LOP3.LUT stsWritePtr, stsWritePtr, 0x70, scratch1, 0xf8
      SHL        R67, R68.reuse, 4 ?W4;                      // SHL ldsReadPtr, tid.reuse, 4
      LOP.AND    R67, R67, 0xe00 ?W4;                        // LOP.AND ldsReadPtr, ldsReadPtr, 0xe00
      LOP3.LUT   R67, R67, 0x1f, R68, 0xf8 ?W4;              // LOP3.LUT ldsReadPtr, ldsReadPtr, 0x1f, tid, 0xf8
      SHL        R67, R67, 1 ?W2;                            // SHL ldsReadPtr, ldsReadPtr, 1
      LOP.AND  R86, R68, 0x1f ?W1;                           // LOP.AND intraWarpRow, tid, 0x1f
      MOV32I   R87, 0 ?W1;                                   // MOV32I intraWarpCol, 0
      SHR.U32 R89, R68.reuse, 5 ?W4;                         // SHR.U32 warpCol, tid.reuse, 5
      LOP.AND R89, R89, 0x3 ?W2;                             // LOP.AND warpCol, warpCol, 0x3
      LEA  R85, R70, R87, 7 ?W2;                             // LEA col, ctaCol, intraWarpCol, 7
      SHR  R88, R68.reuse, 7 ?W2;                            // SHR warpRow, tid.reuse, 7
      MOV  R78, c[0][0x1b8] ?W2;                             // MOV strideC, StrideC
      LEA  R80, R69,  R86, 8 ?W2;                            // LEA row, ctaRow, intraWarpRow, 8
      LEA  R85, R89, R85,          5 ?W2;                    // LEA col, warpCol, col, 5
      LEA  R80, R88, R80,          7 ?W5;                    // LEA row, warpRow, row, 7
      LOP.AND P2, RZ, R76, 8 ?W2;                            // LOP.AND P2, RZ, mode, 8
      IMAD.WIDE.U32 R86, R85, c[0][0x1b8], R80 ?W5;          // IMAD.WIDE.U32 readPtrMul, col, StrideC, row
      LOP.AND P6, R90, R76, 3 ?W12EG;                        // LOP.AND P6, scratch1, mode, 3
(!P6) BRA.U   turing_hgemm_256x128_mods_nt_END_BATCH_PTR_CALC1_EPILOG ?W4EG ?BARRIER_EXEMPT; // @!P6 BRA.U turing_hgemm_256x128_mods_nt_END_BATCH_PTR_CALC1_EPILOG
      ISETP.EQ P3,    R90, 2 ?W12EG;                         // ISETP.EQ P3, scratch1, 2
(P3)  LEA.LO   R74, P4, R71.reuse, c[0][0x170], 3 &req=4 ?W4; // @P3 LEA.LO writePtr, P4, batchIdx.reuse, BaseC, 3
(P3)  LEA.HI.X R75, R71, c[0][0x174], RZ, 3, P4 ?W8;         // @P3 LEA.HI.X writePtr_HI, batchIdx, BaseC_HI, RZ, 3, P4
(P3)  LDG.E.EN.LTC128B.64.CONSTANT.GPU R88, [R74 + 0x00] &wr=2 ?W2 ?BARRIER_EXEMPT; // @P3 LDG.E.EN.LTC128B.64.CONSTANT.GPU batchPtrMul, [writePtr + 0x00]
(P3)  LEA.LO   R74, P4, R86.reuse, R88, 1 &req=2 ?W4;        // @P3 LEA.LO writePtr, P4, readPtrMul.reuse, batchPtrMul, 1
(P3)  LEA.HI.X R75, R86, R89, R87, 1, P4 ?W2;                // @P3 LEA.HI.X writePtr_HI, readPtrMul, batchPtrMul_HI, readPtrMul_HI, 1, P4
(!P3) LEA.LO   R74, P4, R86.reuse, c[0][0x170], 1 ?W4;       // @!P3 LEA.LO writePtr, P4, readPtrMul.reuse, BaseC, 1
(!P3) LEA.HI.X R75, R86, c[0][0x174], R87, 1, P4 ?W2;        // @!P3 LEA.HI.X writePtr_HI, readPtrMul, BaseC_HI, readPtrMul_HI, 1, P4
(!P3) IMAD.WIDE.U32 R88,    R71, c[0][0x1a8],    RZ &req=4 ?W4; // @!P3 IMAD.WIDE.U32 batchPtrMul, batchIdx, MatrixStrideC, RZ
(!P3) IMAD.LO.U32   R89, R71, c[0][0x1ac], R89 ?W2;          // @!P3 IMAD.LO.U32 batchPtrMul_HI, batchIdx, MatrixStrideC_HI, batchPtrMul_HI
(!P3) LEA.LO   R74, P4, R88.reuse, R74, 1 ?W4;               // @!P3 LEA.LO writePtr, P4, batchPtrMul.reuse, writePtr, 1
(!P3) LEA.HI.X R75, R88, R75, R87, 1, P4 ?W2;                // @!P3 LEA.HI.X writePtr_HI, batchPtrMul, writePtr_HI, readPtrMul_HI, 1, P4
      BRA.U turing_hgemm_256x128_mods_nt_END_BATCH_PTR_SYNC1_EPILOG ?W4EG ?BARRIER_EXEMPT; // BRA.U turing_hgemm_256x128_mods_nt_END_BATCH_PTR_SYNC1_EPILOG
turing_hgemm_256x128_mods_nt_END_BATCH_PTR_CALC1_EPILOG:
      LEA.LO   R74, P4, R86.reuse, c[0][0x170], 1 ?W4;       // LEA.LO writePtr, P4, readPtrMul.reuse, BaseC, 1
      LEA.HI.X R75, R86, c[0][0x174], R87, 1, P4 ?W8;        // LEA.HI.X writePtr_HI, readPtrMul, BaseC_HI, readPtrMul_HI, 1, P4
turing_hgemm_256x128_mods_nt_END_BATCH_PTR_SYNC1_EPILOG:
      LOP.AND P3, RZ, R76, 32 ?W12EG;                        // LOP.AND P3, RZ, mode, 32
(P3)  IMAD.WIDE.U32 R88,    R71, c[0][0x1a8],    RZ &req=4 ?W4; // @P3 IMAD.WIDE.U32 batchPtrMul, batchIdx, MatrixStrideC, RZ
(P3)  IMAD.LO.U32   R89, R71, c[0][0x1ac], R89 ?W2;          // @P3 IMAD.LO.U32 batchPtrMul_HI, batchIdx, MatrixStrideC_HI, batchPtrMul_HI
(P3)  LEA.LO   R74, P4, R88.reuse, R74, 1 ?W4;               // @P3 LEA.LO writePtr, P4, batchPtrMul.reuse, writePtr, 1
(P3)  LEA.HI.X R75, R88, R75, R87, 1, P4 ?W2;                // @P3 LEA.HI.X writePtr_HI, batchPtrMul, writePtr_HI, readPtrMul_HI, 1, P4
      ISETP.NE.AND  P5, PT, R71, RZ, P2 ?W2;                 // ISETP.NE.AND P5, PT, batchIdx, RZ, P2
      MOV  R72,    c[0][0x170] ?W2;                          // MOV readPtr, BaseC
      MOV  R73, c[0][0x174] ?W2;                             // MOV readPtr_HI, BaseC_HI
      ISETP.EQ      P4, R72, c[0][0x1f0] ?W12EG;             // ISETP.EQ P4, readPtr, BaseD
      ISETP.EQ.AND  P4, PT, R73, c[0][0x1f4], P4 ?W12EG;     // ISETP.EQ.AND P4, PT, readPtr_HI, BaseD_HI, P4
      PSETP.OR      P4, P4, P5 ?W12EG;                       // PSETP.OR P4, P4, P5
(!P4) BRA.U turing_hgemm_256x128_mods_nt_BASED_NEQ_BASEC_CALC_EPILOG ?W4EG ?BARRIER_EXEMPT; // @!P4 BRA.U turing_hgemm_256x128_mods_nt_BASED_NEQ_BASEC_CALC_EPILOG
      MOV       R72, R74 &req=3 ?W2;                         // MOV readPtr, writePtr
      MOV       R73, R75 ?W2;                                // MOV readPtr_HI, writePtr_HI
      BRA.U turing_hgemm_256x128_mods_nt_END_BASEC_CALC_EPILOG ?W4EG ?BARRIER_EXEMPT; // BRA.U turing_hgemm_256x128_mods_nt_END_BASEC_CALC_EPILOG
turing_hgemm_256x128_mods_nt_BASED_NEQ_BASEC_CALC_EPILOG:
      LOP.AND P6, R90, R76, 3 ?W12EG;                        // LOP.AND P6, scratch1, mode, 3
(!P6) BRA.U   turing_hgemm_256x128_mods_nt_END_BATCH_PTR_CALC0_EPILOG ?W4EG ?BARRIER_EXEMPT; // @!P6 BRA.U turing_hgemm_256x128_mods_nt_END_BATCH_PTR_CALC0_EPILOG
      ISETP.EQ P3,    R90, 2 ?W12EG;                         // ISETP.EQ P3, scratch1, 2
(P3)  LEA.LO   R72, P4, R71.reuse, c[0][0x1f0], 3 &req=4 ?W4; // @P3 LEA.LO readPtr, P4, batchIdx.reuse, BaseD, 3
(P3)  LEA.HI.X R73, R71, c[0][0x1f4], RZ, 3, P4 ?W8;         // @P3 LEA.HI.X readPtr_HI, batchIdx, BaseD_HI, RZ, 3, P4
(P3)  LDG.E.EN.LTC128B.64.CONSTANT.GPU R88, [R72 + 0x00] &wr=2 ?W2 ?BARRIER_EXEMPT; // @P3 LDG.E.EN.LTC128B.64.CONSTANT.GPU batchPtrMul, [readPtr + 0x00]
(P3)  LEA.LO   R72, P4, R86.reuse, R88, 1 &req=2 ?W4;        // @P3 LEA.LO readPtr, P4, readPtrMul.reuse, batchPtrMul, 1
(P3)  LEA.HI.X R73, R86, R89, R87, 1, P4 ?W2;                // @P3 LEA.HI.X readPtr_HI, readPtrMul, batchPtrMul_HI, readPtrMul_HI, 1, P4
(!P3) LEA.LO   R72, P4, R86.reuse, c[0][0x1f0], 1 ?W4;       // @!P3 LEA.LO readPtr, P4, readPtrMul.reuse, BaseD, 1
(!P3) LEA.HI.X R73, R86, c[0][0x1f4], R87, 1, P4 ?W2;        // @!P3 LEA.HI.X readPtr_HI, readPtrMul, BaseD_HI, readPtrMul_HI, 1, P4
(!P3) IMAD.WIDE.U32 R88,    R71, c[0][0x1a8],    RZ &req=4 ?W4; // @!P3 IMAD.WIDE.U32 batchPtrMul, batchIdx, MatrixStrideC, RZ
(!P3) IMAD.LO.U32   R89, R71, c[0][0x1ac], R89 ?W2;          // @!P3 IMAD.LO.U32 batchPtrMul_HI, batchIdx, MatrixStrideC_HI, batchPtrMul_HI
(!P3) LEA.LO   R72, P4, R88.reuse, R72, 1 ?W4;               // @!P3 LEA.LO readPtr, P4, batchPtrMul.reuse, readPtr, 1
(!P3) LEA.HI.X R73, R88, R73, R87, 1, P4 ?W2;                // @!P3 LEA.HI.X readPtr_HI, batchPtrMul, readPtr_HI, readPtrMul_HI, 1, P4
      BRA.U turing_hgemm_256x128_mods_nt_END_BATCH_PTR_SYNC0_EPILOG ?W4EG ?BARRIER_EXEMPT; // BRA.U turing_hgemm_256x128_mods_nt_END_BATCH_PTR_SYNC0_EPILOG
turing_hgemm_256x128_mods_nt_END_BATCH_PTR_CALC0_EPILOG:
      LEA.LO   R72, P4, R86.reuse, c[0][0x1f0], 1 ?W4;       // LEA.LO readPtr, P4, readPtrMul.reuse, BaseD, 1
      LEA.HI.X R73, R86, c[0][0x1f4], R87, 1, P4 ?W8;        // LEA.HI.X readPtr_HI, readPtrMul, BaseD_HI, readPtrMul_HI, 1, P4
turing_hgemm_256x128_mods_nt_END_BATCH_PTR_SYNC0_EPILOG:
      LOP.AND P3, RZ, R76, 32 ?W12EG;                        // LOP.AND P3, RZ, mode, 32
(P3)  IMAD.WIDE.U32 R88,    R71, c[0][0x1a8],    RZ &req=4 ?W4; // @P3 IMAD.WIDE.U32 batchPtrMul, batchIdx, MatrixStrideC, RZ
(P3)  IMAD.LO.U32   R89, R71, c[0][0x1ac], R89 ?W2;          // @P3 IMAD.LO.U32 batchPtrMul_HI, batchIdx, MatrixStrideC_HI, batchPtrMul_HI
(P3)  LEA.LO   R72, P4, R88.reuse, R72, 1 ?W4;               // @P3 LEA.LO readPtr, P4, batchPtrMul.reuse, readPtr, 1
(P3)  LEA.HI.X R73, R88, R73, R87, 1, P4 ?W2;                // @P3 LEA.HI.X readPtr_HI, batchPtrMul, readPtr_HI, readPtrMul_HI, 1, P4
turing_hgemm_256x128_mods_nt_END_BASEC_CALC_EPILOG:
(P5)  MOV32I        R84, 0x3c003c00 &req=2 ?W2;              // @P5 MOV32I beta, 0x3c003c00
(P5)  PSETP.AND P1, PT, PT ?W2;                              // @P5 PSETP.AND P1, PT, PT
      IMAD.WIDE.U32 R86, R78, 23, RZ ?W5;                    // IMAD.WIDE.U32 backStride, strideC, 23, RZ
      IADD  R82, R80, -c[0][0x1bc] ?W2;                      // IADD cRowMinusM, row, -CountM
      IADD  R83, R85, -c[0][0x1c0] ?W9;                      // IADD cColMinusN, col, -CountN
(!P2) BRA  turing_hgemm_256x128_mods_nt_EPILOG_SPIN_WAIT_END ?W4EG ?BARRIER_EXEMPT; // @!P2 BRA turing_hgemm_256x128_mods_nt_EPILOG_SPIN_WAIT_END
      IMAD.LO.U32  R123, R70, c[0x0][0x00c], R69 ?W5;        // IMAD.LO.U32 spinLockOffset, ctaCol, GridDimX, ctaRow
      LEA.LO   R120, P2, R123.reuse, c[0][0x1c8], 2 &req=3 ?W4; // LEA.LO spinLockPtr, predCarry, spinLockOffset.reuse, Sync, 2
      LEA.HI.X R121, R123, c[0][0x1cc], RZ, 2, P2 ?W2;       // LEA.HI.X spinLockPtr_HI, spinLockOffset, Sync_HI, RZ, 2, predCarry
      MOV R122, RZ ?W4;                                      // MOV spinLock, RZ
turing_hgemm_256x128_mods_nt_EPILOG_SPIN_WAIT:
      ISETP.NE    P2, R122, R71 &req=2 ?W12EG;               // ISETP.NE P2, spinLock, batchIdx
(P2)  LDG.E.EL.LTC128B.32.STRONG.GPU R122, [R120] &wr=2 ?W2 ?BARRIER_EXEMPT; // @P2 LDG.E.EL.LTC128B.32.STRONG.GPU spinLock, [spinLockPtr]
(P2)  BRA.U turing_hgemm_256x128_mods_nt_EPILOG_SPIN_WAIT ?W4EG ?BARRIER_EXEMPT; // @P2 BRA.U turing_hgemm_256x128_mods_nt_EPILOG_SPIN_WAIT
turing_hgemm_256x128_mods_nt_EPILOG_SPIN_WAIT_END:
      ISETP.LT.AND  P3, PT, R82.reuse, 0, PT ?W2;            // ISETP.LT.AND P3, PT, cRowMinusM.reuse, 0, PT
      ISETP.LT.AND  P4, PT, R82.reuse, -32, PT ?W2;          // ISETP.LT.AND P4, PT, cRowMinusM.reuse, -32, PT
      ISETP.LT.AND  P5, PT, R82.reuse, -64, PT ?W2;          // ISETP.LT.AND P5, PT, cRowMinusM.reuse, -64, PT
      ISETP.LT.AND  P6, PT, R82.reuse, -96, PT ?W2;          // ISETP.LT.AND P6, PT, cRowMinusM.reuse, -96, PT
      ISETP.LT.AND  P3, PT, R83.reuse, 0, P3 ?W2;            // ISETP.LT.AND P3, PT, cColMinusN.reuse, 0, P3
      ISETP.LT.AND  P4, PT, R83.reuse, 0, P4 ?W2;            // ISETP.LT.AND P4, PT, cColMinusN.reuse, 0, P4
      ISETP.LT.AND  P5, PT, R83.reuse, 0, P5 ?W2;            // ISETP.LT.AND P5, PT, cColMinusN.reuse, 0, P5
      ISETP.LT.AND  P6, PT, R83      , 0, P6 ?W4;            // ISETP.LT.AND P6, PT, cColMinusN , 0, P6
      P2R.B0 R77, PR, RZ, 0x78 ?W4;                          // P2R.B0 readPreds, PR, RZ, 0x78
      ISETP.LT.AND  P3, PT, R82.reuse, 0, PT ?W2;            // ISETP.LT.AND P3, PT, cRowMinusM.reuse, 0, PT
      ISETP.LT.AND  P4, PT, R82.reuse, -32, PT ?W2;          // ISETP.LT.AND P4, PT, cRowMinusM.reuse, -32, PT
      ISETP.LT.AND  P5, PT, R82.reuse, -64, PT ?W2;          // ISETP.LT.AND P5, PT, cRowMinusM.reuse, -64, PT
      ISETP.LT.AND  P6, PT, R82.reuse, -96, PT ?W2;          // ISETP.LT.AND P6, PT, cRowMinusM.reuse, -96, PT
      ISETP.LT.AND  P3, PT, R83.reuse, -8, P3 ?W2;           // ISETP.LT.AND P3, PT, cColMinusN.reuse, -8, P3
      ISETP.LT.AND  P4, PT, R83.reuse, -8, P4 ?W2;           // ISETP.LT.AND P4, PT, cColMinusN.reuse, -8, P4
      ISETP.LT.AND  P5, PT, R83.reuse, -8, P5 ?W2;           // ISETP.LT.AND P5, PT, cColMinusN.reuse, -8, P5
      ISETP.LT.AND  P6, PT, R83      , -8, P6 ?W4;           // ISETP.LT.AND P6, PT, cColMinusN , -8, P6
      P2R.B1 R77, PR, R77, 0x78 ?W4;                         // P2R.B1 readPreds, PR, readPreds, 0x78
      ISETP.LT.AND  P3, PT, R82.reuse, 0, PT ?W2;            // ISETP.LT.AND P3, PT, cRowMinusM.reuse, 0, PT
      ISETP.LT.AND  P4, PT, R82.reuse, -32, PT ?W2;          // ISETP.LT.AND P4, PT, cRowMinusM.reuse, -32, PT
      ISETP.LT.AND  P5, PT, R82.reuse, -64, PT ?W2;          // ISETP.LT.AND P5, PT, cRowMinusM.reuse, -64, PT
      ISETP.LT.AND  P6, PT, R82.reuse, -96, PT ?W2;          // ISETP.LT.AND P6, PT, cRowMinusM.reuse, -96, PT
      ISETP.LT.AND  P3, PT, R83.reuse, -16, P3 ?W2;          // ISETP.LT.AND P3, PT, cColMinusN.reuse, -16, P3
      ISETP.LT.AND  P4, PT, R83.reuse, -16, P4 ?W2;          // ISETP.LT.AND P4, PT, cColMinusN.reuse, -16, P4
      ISETP.LT.AND  P5, PT, R83.reuse, -16, P5 ?W2;          // ISETP.LT.AND P5, PT, cColMinusN.reuse, -16, P5
      ISETP.LT.AND  P6, PT, R83      , -16, P6 ?W4;          // ISETP.LT.AND P6, PT, cColMinusN , -16, P6
      P2R.B2 R77, PR, R77, 0x78 ?W4;                         // P2R.B2 readPreds, PR, readPreds, 0x78
      ISETP.LT.AND  P3, PT, R82.reuse, 0, PT ?W2;            // ISETP.LT.AND P3, PT, cRowMinusM.reuse, 0, PT
      ISETP.LT.AND  P4, PT, R82.reuse, -32, PT ?W2;          // ISETP.LT.AND P4, PT, cRowMinusM.reuse, -32, PT
      ISETP.LT.AND  P5, PT, R82.reuse, -64, PT ?W2;          // ISETP.LT.AND P5, PT, cRowMinusM.reuse, -64, PT
      ISETP.LT.AND  P6, PT, R82.reuse, -96, PT ?W2;          // ISETP.LT.AND P6, PT, cRowMinusM.reuse, -96, PT
      ISETP.LT.AND  P3, PT, R83.reuse, -24, P3 ?W2;          // ISETP.LT.AND P3, PT, cColMinusN.reuse, -24, P3
      ISETP.LT.AND  P4, PT, R83.reuse, -24, P4 ?W2;          // ISETP.LT.AND P4, PT, cColMinusN.reuse, -24, P4
      ISETP.LT.AND  P5, PT, R83.reuse, -24, P5 ?W2;          // ISETP.LT.AND P5, PT, cColMinusN.reuse, -24, P5
      ISETP.LT.AND  P6, PT, R83      , -24, P6 ?W4;          // ISETP.LT.AND P6, PT, cColMinusN , -24, P6
      P2R.B3 R77, PR, R77, 0x78 ?W4;                         // P2R.B3 readPreds, PR, readPreds, 0x78
(!P1) R2P PR, RZ.B0, 0x78 ?W2;                               // @!P1 R2P PR, RZ.B0, 0x78
(P1)  R2P PR, R77.B0, 0x78 ?W12EG;                           // @P1 R2P PR, readPreds.B0, 0x78
(P3)  LDG.E.EN.LTC128B.U16.STRONG.GPU  R88, [R72 + 0x0000] &wr=2 ?W2 ?BARRIER_EXEMPT; // @P3 LDG.E.EN.LTC128B.U16.STRONG.GPU fetchRegC0, [readPtr + 0x0000]
(!P3) MOV R88, RZ ?W2;                                       // @!P3 MOV fetchRegC0, RZ
(P4)  LDG.E.EN.LTC128B.U16.STRONG.GPU  R89, [R72 + 0x0040] &wr=2 ?W2 ?BARRIER_EXEMPT; // @P4 LDG.E.EN.LTC128B.U16.STRONG.GPU fetchRegC1, [readPtr + 0x0040]
(!P4) MOV R89, RZ ?W2;                                       // @!P4 MOV fetchRegC1, RZ
(P5)  LDG.E.EN.LTC128B.U16.STRONG.GPU  R90, [R72 + 0x0080] &wr=2 ?W2 ?BARRIER_EXEMPT; // @P5 LDG.E.EN.LTC128B.U16.STRONG.GPU fetchRegC2, [readPtr + 0x0080]
(!P5) MOV R90, RZ ?W2;                                       // @!P5 MOV fetchRegC2, RZ
(P6)  LDG.E.EN.LTC128B.U16.STRONG.GPU  R91, [R72 + 0x00c0] &rd=3 &wr=2 ?W2 ?BARRIER_EXEMPT; // @P6 LDG.E.EN.LTC128B.U16.STRONG.GPU fetchRegC3, [readPtr + 0x00c0]
(!P6) MOV R91, RZ ?W2;                                       // @!P6 MOV fetchRegC3, RZ
      LEA.LO   R72, P2, R78.reuse, R72, 4 &req=3 ?W4;        // LEA.LO readPtr, predCarry, strideC.reuse, readPtr, 4
      LEA.HI.X R73, R78, R73, RZ, 4, P2 ?W8;                 // LEA.HI.X readPtr_HI, strideC, readPtr_HI, strideC_HI, 4, predCarry
(P1)  R2P PR, R77.B1, 0x78 ?W12EG;                           // @P1 R2P PR, readPreds.B1, 0x78
(P3)  LDG.E.EN.LTC128B.U16.STRONG.GPU  R92, [R72 + 0x0000] &wr=2 ?W2 ?BARRIER_EXEMPT; // @P3 LDG.E.EN.LTC128B.U16.STRONG.GPU fetchRegC4, [readPtr + 0x0000]
(!P3) MOV R92, RZ ?W2;                                       // @!P3 MOV fetchRegC4, RZ
(P4)  LDG.E.EN.LTC128B.U16.STRONG.GPU  R93, [R72 + 0x0040] &wr=2 ?W2 ?BARRIER_EXEMPT; // @P4 LDG.E.EN.LTC128B.U16.STRONG.GPU fetchRegC5, [readPtr + 0x0040]
(!P4) MOV R93, RZ ?W2;                                       // @!P4 MOV fetchRegC5, RZ
(P5)  LDG.E.EN.LTC128B.U16.STRONG.GPU  R94, [R72 + 0x0080] &wr=2 ?W2 ?BARRIER_EXEMPT; // @P5 LDG.E.EN.LTC128B.U16.STRONG.GPU fetchRegC6, [readPtr + 0x0080]
(!P5) MOV R94, RZ ?W2;                                       // @!P5 MOV fetchRegC6, RZ
(P6)  LDG.E.EN.LTC128B.U16.STRONG.GPU  R95, [R72 + 0x00c0] &rd=3 &wr=2 ?W2 ?BARRIER_EXEMPT; // @P6 LDG.E.EN.LTC128B.U16.STRONG.GPU fetchRegC7, [readPtr + 0x00c0]
(!P6) MOV R95, RZ ?W2;                                       // @!P6 MOV fetchRegC7, RZ
      LEA.LO   R72, P2, R78.reuse, R72, 4 &req=3 ?W4;        // LEA.LO readPtr, predCarry, strideC.reuse, readPtr, 4
      LEA.HI.X R73, R78, R73, RZ, 4, P2 ?W8;                 // LEA.HI.X readPtr_HI, strideC, readPtr_HI, strideC_HI, 4, predCarry
(P1)  R2P PR, R77.B2, 0x78 ?W12EG;                           // @P1 R2P PR, readPreds.B2, 0x78
(P3)  LDG.E.EN.LTC128B.U16.STRONG.GPU  R96, [R72 + 0x0000] &wr=2 ?W2 ?BARRIER_EXEMPT; // @P3 LDG.E.EN.LTC128B.U16.STRONG.GPU fetchRegC8, [readPtr + 0x0000]
(!P3) MOV R96, RZ ?W2;                                       // @!P3 MOV fetchRegC8, RZ
(P4)  LDG.E.EN.LTC128B.U16.STRONG.GPU  R97, [R72 + 0x0040] &wr=2 ?W2 ?BARRIER_EXEMPT; // @P4 LDG.E.EN.LTC128B.U16.STRONG.GPU fetchRegC9, [readPtr + 0x0040]
(!P4) MOV R97, RZ ?W2;                                       // @!P4 MOV fetchRegC9, RZ
(P5)  LDG.E.EN.LTC128B.U16.STRONG.GPU  R98, [R72 + 0x0080] &wr=2 ?W2 ?BARRIER_EXEMPT; // @P5 LDG.E.EN.LTC128B.U16.STRONG.GPU fetchRegC10, [readPtr + 0x0080]
(!P5) MOV R98, RZ ?W2;                                       // @!P5 MOV fetchRegC10, RZ
(P6)  LDG.E.EN.LTC128B.U16.STRONG.GPU  R99, [R72 + 0x00c0] &rd=3 &wr=2 ?W2 ?BARRIER_EXEMPT; // @P6 LDG.E.EN.LTC128B.U16.STRONG.GPU fetchRegC11, [readPtr + 0x00c0]
(!P6) MOV R99, RZ ?W2;                                       // @!P6 MOV fetchRegC11, RZ
      LEA.LO   R72, P2, R78.reuse, R72, 4 &req=3 ?W4;        // LEA.LO readPtr, predCarry, strideC.reuse, readPtr, 4
      LEA.HI.X R73, R78, R73, RZ, 4, P2 ?W8;                 // LEA.HI.X readPtr_HI, strideC, readPtr_HI, strideC_HI, 4, predCarry
(P1)  R2P PR, R77.B3, 0x78 ?W12EG;                           // @P1 R2P PR, readPreds.B3, 0x78
(P3)  LDG.E.EN.LTC128B.U16.STRONG.GPU  R100, [R72 + 0x0000] &wr=2 ?W2 ?BARRIER_EXEMPT; // @P3 LDG.E.EN.LTC128B.U16.STRONG.GPU fetchRegC12, [readPtr + 0x0000]
(!P3) MOV R100, RZ ?W2;                                      // @!P3 MOV fetchRegC12, RZ
(P4)  LDG.E.EN.LTC128B.U16.STRONG.GPU  R101, [R72 + 0x0040] &wr=2 ?W2 ?BARRIER_EXEMPT; // @P4 LDG.E.EN.LTC128B.U16.STRONG.GPU fetchRegC13, [readPtr + 0x0040]
(!P4) MOV R101, RZ ?W2;                                      // @!P4 MOV fetchRegC13, RZ
(P5)  LDG.E.EN.LTC128B.U16.STRONG.GPU  R102, [R72 + 0x0080] &wr=2 ?W2 ?BARRIER_EXEMPT; // @P5 LDG.E.EN.LTC128B.U16.STRONG.GPU fetchRegC14, [readPtr + 0x0080]
(!P5) MOV R102, RZ ?W2;                                      // @!P5 MOV fetchRegC14, RZ
(P6)  LDG.E.EN.LTC128B.U16.STRONG.GPU  R103, [R72 + 0x00c0] &rd=3 &wr=2 ?W2 ?BARRIER_EXEMPT; // @P6 LDG.E.EN.LTC128B.U16.STRONG.GPU fetchRegC15, [readPtr + 0x00c0]
(!P6) MOV R103, RZ ?W2;                                      // @!P6 MOV fetchRegC15, RZ
      LEA.LO   R72, P2, -R86.reuse, R72, 1 &req=3 ?W4;       // LEA.LO readPtr, predCarry, -backStride.reuse, readPtr, 1
      LEA.HI.X R73, ~R86, R73, R87, 1, P2 ?W2;               // LEA.HI.X readPtr_HI, ~backStride, readPtr_HI, backStride_HI, 1, predCarry
      PSETP.AND  P0, P1, P1 &req=4 ?W1;                      // PSETP.AND P0, P1, P1
      HMUL2  R104, R79.reuse.H0_H0, R1 &req=0 ?W2;           // HMUL2 storeReg0, alpha.reuse.H0_H0, C_r0_c0
      HMUL2  R105, R79.reuse.H0_H0, R9 ?W2;                  // HMUL2 storeReg2, alpha.reuse.H0_H0, C_r2_c0
      HMUL2  R106, R79.reuse.H0_H0, R17 ?W2;                 // HMUL2 storeReg4, alpha.reuse.H0_H0, C_r4_c0
      HMUL2  R107, R79.reuse.H0_H0, R25 ?W2;                 // HMUL2 storeReg6, alpha.reuse.H0_H0, C_r6_c0
      HMUL2  R108, R79.reuse.H0_H0, R33 ?W2;                 // HMUL2 storeReg8, alpha.reuse.H0_H0, C_r8_c0
      HMUL2  R109, R79.reuse.H0_H0, R41 ?W2;                 // HMUL2 storeReg10, alpha.reuse.H0_H0, C_r10_c0
      HMUL2  R110, R79.reuse.H0_H0, R49 ?W2;                 // HMUL2 storeReg12, alpha.reuse.H0_H0, C_r12_c0
      HMUL2  R111, R79.H0_H0, R57 &wr=4 ?W2;                 // HMUL2 storeReg14, alpha.H0_H0, C_r14_c0
      IADD  R83,   R83,    1 ?W2;                            // IADD cColMinusN, cColMinusN, 1
      LEPC R64 &req=3 ?W2;                                   // LEPC pc
// Virtual ?REQ_BAR found on next instruction, stop putting ?BARRIER_EXEMPT on decoupled instructions
      CALL.REL  turing_hgemm_256x128_mods_nt_STORE_COL ?W4;  // CALL.REL turing_hgemm_256x128_mods_nt_STORE_COL
      LEA.LO   R74, P2, -R86.reuse, R74, 1 &req=3 ?W4;       // LEA.LO writePtr, predCarry, -backStride.reuse, writePtr, 1
      LEA.HI.X R75, ~R86, R75, R87, 1, P2 ?W2;               // LEA.HI.X writePtr_HI, ~backStride, writePtr_HI, backStride_HI, 1, predCarry
      LEA.LO   R72, P2, -R86.reuse, R72, 1 &req=3 ?W4;       // LEA.LO readPtr, predCarry, -backStride.reuse, readPtr, 1
      LEA.HI.X R73, ~R86, R73, R87, 1, P2 ?W2;               // LEA.HI.X readPtr_HI, ~backStride, readPtr_HI, backStride_HI, 1, predCarry
      HMUL2  R104, R79.reuse.H0_H0, R3 ?W2;                  // HMUL2 storeReg0, alpha.reuse.H0_H0, C_r0_c1
      HMUL2  R105, R79.reuse.H0_H0, R11 ?W2;                 // HMUL2 storeReg2, alpha.reuse.H0_H0, C_r2_c1
      HMUL2  R106, R79.reuse.H0_H0, R19 ?W2;                 // HMUL2 storeReg4, alpha.reuse.H0_H0, C_r4_c1
      HMUL2  R107, R79.reuse.H0_H0, R27 ?W2;                 // HMUL2 storeReg6, alpha.reuse.H0_H0, C_r6_c1
      HMUL2  R108, R79.reuse.H0_H0, R35 ?W2;                 // HMUL2 storeReg8, alpha.reuse.H0_H0, C_r8_c1
      HMUL2  R109, R79.reuse.H0_H0, R43 ?W2;                 // HMUL2 storeReg10, alpha.reuse.H0_H0, C_r10_c1
      HMUL2  R110, R79.reuse.H0_H0, R51 ?W2;                 // HMUL2 storeReg12, alpha.reuse.H0_H0, C_r12_c1
      HMUL2  R111, R79.H0_H0, R59 &wr=4 ?W2;                 // HMUL2 storeReg14, alpha.H0_H0, C_r14_c1
      IADD  R83,   R83,    1 ?W2;                            // IADD cColMinusN, cColMinusN, 1
      LEPC R64 &req=3 ?W2;                                   // LEPC pc
      CALL.REL  turing_hgemm_256x128_mods_nt_STORE_COL ?W4;  // CALL.REL turing_hgemm_256x128_mods_nt_STORE_COL
      LEA.LO   R74, P2, -R86.reuse, R74, 1 &req=3 ?W4;       // LEA.LO writePtr, predCarry, -backStride.reuse, writePtr, 1
      LEA.HI.X R75, ~R86, R75, R87, 1, P2 ?W2;               // LEA.HI.X writePtr_HI, ~backStride, writePtr_HI, backStride_HI, 1, predCarry
      LEA.LO   R72, P2, -R86.reuse, R72, 1 &req=3 ?W4;       // LEA.LO readPtr, predCarry, -backStride.reuse, readPtr, 1
      LEA.HI.X R73, ~R86, R73, R87, 1, P2 ?W2;               // LEA.HI.X readPtr_HI, ~backStride, readPtr_HI, backStride_HI, 1, predCarry
      HMUL2  R104, R79.reuse.H0_H0, R0 ?W2;                  // HMUL2 storeReg0, alpha.reuse.H0_H0, C_r0_c2
      HMUL2  R105, R79.reuse.H0_H0, R8 ?W2;                  // HMUL2 storeReg2, alpha.reuse.H0_H0, C_r2_c2
      HMUL2  R106, R79.reuse.H0_H0, R16 ?W2;                 // HMUL2 storeReg4, alpha.reuse.H0_H0, C_r4_c2
      HMUL2  R107, R79.reuse.H0_H0, R24 ?W2;                 // HMUL2 storeReg6, alpha.reuse.H0_H0, C_r6_c2
      HMUL2  R108, R79.reuse.H0_H0, R32 ?W2;                 // HMUL2 storeReg8, alpha.reuse.H0_H0, C_r8_c2
      HMUL2  R109, R79.reuse.H0_H0, R40 ?W2;                 // HMUL2 storeReg10, alpha.reuse.H0_H0, C_r10_c2
      HMUL2  R110, R79.reuse.H0_H0, R48 ?W2;                 // HMUL2 storeReg12, alpha.reuse.H0_H0, C_r12_c2
      HMUL2  R111, R79.H0_H0, R56 &wr=4 ?W2;                 // HMUL2 storeReg14, alpha.H0_H0, C_r14_c2
      IADD  R83,   R83,    1 ?W2;                            // IADD cColMinusN, cColMinusN, 1
      LEPC R64 &req=3 ?W2;                                   // LEPC pc
      CALL.REL  turing_hgemm_256x128_mods_nt_STORE_COL ?W4;  // CALL.REL turing_hgemm_256x128_mods_nt_STORE_COL
      LEA.LO   R74, P2, -R86.reuse, R74, 1 &req=3 ?W4;       // LEA.LO writePtr, predCarry, -backStride.reuse, writePtr, 1
      LEA.HI.X R75, ~R86, R75, R87, 1, P2 ?W2;               // LEA.HI.X writePtr_HI, ~backStride, writePtr_HI, backStride_HI, 1, predCarry
      LEA.LO   R72, P2, -R86.reuse, R72, 1 &req=3 ?W4;       // LEA.LO readPtr, predCarry, -backStride.reuse, readPtr, 1
      LEA.HI.X R73, ~R86, R73, R87, 1, P2 ?W2;               // LEA.HI.X readPtr_HI, ~backStride, readPtr_HI, backStride_HI, 1, predCarry
      HMUL2  R104, R79.reuse.H0_H0, R2 ?W2;                  // HMUL2 storeReg0, alpha.reuse.H0_H0, C_r0_c3
      HMUL2  R105, R79.reuse.H0_H0, R10 ?W2;                 // HMUL2 storeReg2, alpha.reuse.H0_H0, C_r2_c3
      HMUL2  R106, R79.reuse.H0_H0, R18 ?W2;                 // HMUL2 storeReg4, alpha.reuse.H0_H0, C_r4_c3
      HMUL2  R107, R79.reuse.H0_H0, R26 ?W2;                 // HMUL2 storeReg6, alpha.reuse.H0_H0, C_r6_c3
      HMUL2  R108, R79.reuse.H0_H0, R34 ?W2;                 // HMUL2 storeReg8, alpha.reuse.H0_H0, C_r8_c3
      HMUL2  R109, R79.reuse.H0_H0, R42 ?W2;                 // HMUL2 storeReg10, alpha.reuse.H0_H0, C_r10_c3
      HMUL2  R110, R79.reuse.H0_H0, R50 ?W2;                 // HMUL2 storeReg12, alpha.reuse.H0_H0, C_r12_c3
      HMUL2  R111, R79.H0_H0, R58 &wr=4 ?W2;                 // HMUL2 storeReg14, alpha.H0_H0, C_r14_c3
      IADD  R83,   R83,    1 ?W2;                            // IADD cColMinusN, cColMinusN, 1
      LEPC R64 &req=3 ?W2;                                   // LEPC pc
      CALL.REL  turing_hgemm_256x128_mods_nt_STORE_COL ?W4;  // CALL.REL turing_hgemm_256x128_mods_nt_STORE_COL
      LEA.LO   R74, P2, -R86.reuse, R74, 1 &req=3 ?W4;       // LEA.LO writePtr, predCarry, -backStride.reuse, writePtr, 1
      LEA.HI.X R75, ~R86, R75, R87, 1, P2 ?W2;               // LEA.HI.X writePtr_HI, ~backStride, writePtr_HI, backStride_HI, 1, predCarry
      LEA.LO   R72, P2, -R86.reuse, R72, 1 &req=3 ?W4;       // LEA.LO readPtr, predCarry, -backStride.reuse, readPtr, 1
      LEA.HI.X R73, ~R86, R73, R87, 1, P2 ?W2;               // LEA.HI.X readPtr_HI, ~backStride, readPtr_HI, backStride_HI, 1, predCarry
      HMUL2  R104, R79.reuse.H0_H0, R5 ?W2;                  // HMUL2 storeReg0, alpha.reuse.H0_H0, C_r0_c4
      HMUL2  R105, R79.reuse.H0_H0, R13 ?W2;                 // HMUL2 storeReg2, alpha.reuse.H0_H0, C_r2_c4
      HMUL2  R106, R79.reuse.H0_H0, R21 ?W2;                 // HMUL2 storeReg4, alpha.reuse.H0_H0, C_r4_c4
      HMUL2  R107, R79.reuse.H0_H0, R29 ?W2;                 // HMUL2 storeReg6, alpha.reuse.H0_H0, C_r6_c4
      HMUL2  R108, R79.reuse.H0_H0, R37 ?W2;                 // HMUL2 storeReg8, alpha.reuse.H0_H0, C_r8_c4
      HMUL2  R109, R79.reuse.H0_H0, R45 ?W2;                 // HMUL2 storeReg10, alpha.reuse.H0_H0, C_r10_c4
      HMUL2  R110, R79.reuse.H0_H0, R53 ?W2;                 // HMUL2 storeReg12, alpha.reuse.H0_H0, C_r12_c4
      HMUL2  R111, R79.H0_H0, R61 &wr=4 ?W2;                 // HMUL2 storeReg14, alpha.H0_H0, C_r14_c4
      IADD  R83,   R83,    1 ?W2;                            // IADD cColMinusN, cColMinusN, 1
      LEPC R64 &req=3 ?W2;                                   // LEPC pc
      CALL.REL  turing_hgemm_256x128_mods_nt_STORE_COL ?W4;  // CALL.REL turing_hgemm_256x128_mods_nt_STORE_COL
      LEA.LO   R74, P2, -R86.reuse, R74, 1 &req=3 ?W4;       // LEA.LO writePtr, predCarry, -backStride.reuse, writePtr, 1
      LEA.HI.X R75, ~R86, R75, R87, 1, P2 ?W2;               // LEA.HI.X writePtr_HI, ~backStride, writePtr_HI, backStride_HI, 1, predCarry
      LEA.LO   R72, P2, -R86.reuse, R72, 1 &req=3 ?W4;       // LEA.LO readPtr, predCarry, -backStride.reuse, readPtr, 1
      LEA.HI.X R73, ~R86, R73, R87, 1, P2 ?W2;               // LEA.HI.X readPtr_HI, ~backStride, readPtr_HI, backStride_HI, 1, predCarry
      HMUL2  R104, R79.reuse.H0_H0, R7 ?W2;                  // HMUL2 storeReg0, alpha.reuse.H0_H0, C_r0_c5
      HMUL2  R105, R79.reuse.H0_H0, R15 ?W2;                 // HMUL2 storeReg2, alpha.reuse.H0_H0, C_r2_c5
      HMUL2  R106, R79.reuse.H0_H0, R23 ?W2;                 // HMUL2 storeReg4, alpha.reuse.H0_H0, C_r4_c5
      HMUL2  R107, R79.reuse.H0_H0, R31 ?W2;                 // HMUL2 storeReg6, alpha.reuse.H0_H0, C_r6_c5
      HMUL2  R108, R79.reuse.H0_H0, R39 ?W2;                 // HMUL2 storeReg8, alpha.reuse.H0_H0, C_r8_c5
      HMUL2  R109, R79.reuse.H0_H0, R47 ?W2;                 // HMUL2 storeReg10, alpha.reuse.H0_H0, C_r10_c5
      HMUL2  R110, R79.reuse.H0_H0, R55 ?W2;                 // HMUL2 storeReg12, alpha.reuse.H0_H0, C_r12_c5
      HMUL2  R111, R79.H0_H0, R63 &wr=4 ?W2;                 // HMUL2 storeReg14, alpha.H0_H0, C_r14_c5
      IADD  R83,   R83,    1 ?W2;                            // IADD cColMinusN, cColMinusN, 1
      LEPC R64 &req=3 ?W2;                                   // LEPC pc
      CALL.REL  turing_hgemm_256x128_mods_nt_STORE_COL ?W4;  // CALL.REL turing_hgemm_256x128_mods_nt_STORE_COL
      LEA.LO   R74, P2, -R86.reuse, R74, 1 &req=3 ?W4;       // LEA.LO writePtr, predCarry, -backStride.reuse, writePtr, 1
      LEA.HI.X R75, ~R86, R75, R87, 1, P2 ?W2;               // LEA.HI.X writePtr_HI, ~backStride, writePtr_HI, backStride_HI, 1, predCarry
      LEA.LO   R72, P2, -R86.reuse, R72, 1 &req=3 ?W4;       // LEA.LO readPtr, predCarry, -backStride.reuse, readPtr, 1
      LEA.HI.X R73, ~R86, R73, R87, 1, P2 ?W2;               // LEA.HI.X readPtr_HI, ~backStride, readPtr_HI, backStride_HI, 1, predCarry
      HMUL2  R104, R79.reuse.H0_H0, R4 ?W2;                  // HMUL2 storeReg0, alpha.reuse.H0_H0, C_r0_c6
      HMUL2  R105, R79.reuse.H0_H0, R12 ?W2;                 // HMUL2 storeReg2, alpha.reuse.H0_H0, C_r2_c6
      HMUL2  R106, R79.reuse.H0_H0, R20 ?W2;                 // HMUL2 storeReg4, alpha.reuse.H0_H0, C_r4_c6
      HMUL2  R107, R79.reuse.H0_H0, R28 ?W2;                 // HMUL2 storeReg6, alpha.reuse.H0_H0, C_r6_c6
      HMUL2  R108, R79.reuse.H0_H0, R36 ?W2;                 // HMUL2 storeReg8, alpha.reuse.H0_H0, C_r8_c6
      HMUL2  R109, R79.reuse.H0_H0, R44 ?W2;                 // HMUL2 storeReg10, alpha.reuse.H0_H0, C_r10_c6
      HMUL2  R110, R79.reuse.H0_H0, R52 ?W2;                 // HMUL2 storeReg12, alpha.reuse.H0_H0, C_r12_c6
      HMUL2  R111, R79.H0_H0, R60 &wr=4 ?W2;                 // HMUL2 storeReg14, alpha.H0_H0, C_r14_c6
      IADD  R83,   R83,    1 ?W2;                            // IADD cColMinusN, cColMinusN, 1
      LEPC R64 &req=3 ?W2;                                   // LEPC pc
      CALL.REL  turing_hgemm_256x128_mods_nt_STORE_COL ?W4;  // CALL.REL turing_hgemm_256x128_mods_nt_STORE_COL
      LEA.LO   R74, P2, -R86.reuse, R74, 1 &req=3 ?W4;       // LEA.LO writePtr, predCarry, -backStride.reuse, writePtr, 1
      LEA.HI.X R75, ~R86, R75, R87, 1, P2 ?W2;               // LEA.HI.X writePtr_HI, ~backStride, writePtr_HI, backStride_HI, 1, predCarry
      PSETP.AND P0, PT, !PT ?W1;                             // PSETP.AND P0, PT, !PT
      HMUL2  R104, R79.reuse.H0_H0, R6 ?W2;                  // HMUL2 storeReg0, alpha.reuse.H0_H0, C_r0_c7
      HMUL2  R105, R79.reuse.H0_H0, R14 ?W2;                 // HMUL2 storeReg2, alpha.reuse.H0_H0, C_r2_c7
      HMUL2  R106, R79.reuse.H0_H0, R22 ?W2;                 // HMUL2 storeReg4, alpha.reuse.H0_H0, C_r4_c7
      HMUL2  R107, R79.reuse.H0_H0, R30 ?W2;                 // HMUL2 storeReg6, alpha.reuse.H0_H0, C_r6_c7
      HMUL2  R108, R79.reuse.H0_H0, R38 ?W2;                 // HMUL2 storeReg8, alpha.reuse.H0_H0, C_r8_c7
      HMUL2  R109, R79.reuse.H0_H0, R46 ?W2;                 // HMUL2 storeReg10, alpha.reuse.H0_H0, C_r10_c7
      HMUL2  R110, R79.reuse.H0_H0, R54 ?W2;                 // HMUL2 storeReg12, alpha.reuse.H0_H0, C_r12_c7
      HMUL2  R111, R79.H0_H0, R62 &wr=4 ?W2;                 // HMUL2 storeReg14, alpha.H0_H0, C_r14_c7
      LEPC R64 &req=3 ?W2;                                   // LEPC pc
      CALL.REL  turing_hgemm_256x128_mods_nt_STORE_COL ?W4;  // CALL.REL turing_hgemm_256x128_mods_nt_STORE_COL
      LOP.AND P1, RZ, R76, 8 ?W4;                            // LOP.AND P1, RZ, mode, 8
      ISETP.EQ.AND P5, PT, R68, 0, P1 &req=4 ?W8;            // ISETP.EQ.AND P5, PT, tid, 0, P1
(P1)  IADD32I  R71, R71, 1 &req=4 ?W2;                       // @P1 IADD32I batchIdx, batchIdx, 1
(P1)  BAR.SYNC 0 ?W5;                                        // @P1 BAR.SYNC 0
(P5)  MEMBAR.GPU ?W5;                                        // @P5 MEMBAR.GPU
// Virtual ?REQ_BAR found on next instruction, stop putting ?BARRIER_EXEMPT on decoupled instructions
(P5)  STG.E.EF.32.STRONG.GPU [R120], R71 ?W2;                // @P5 STG.E.EF.32.STRONG.GPU [spinLockPtr], batchIdx
      EXIT ?W4;                                              // EXIT
turing_hgemm_256x128_mods_nt_STORE_COL:
      STS.128   [R66 + 0x0000], R104 &req=4 ?W2;             // STS.128 [stsWritePtr + 0x0000], storeReg0
      STS.128   [R66 + 0x0080], R108 ?W2;                    // STS.128 [stsWritePtr + 0x0080], storeReg8
      BAR.SYNC.DEFER_BLOCKING 0 ?W5;                         // BAR.SYNC.DEFER_BLOCKING 0
      MOV R122, R77 ?W2;                                     // MOV writePreds, readPreds
      ISETP.LT.AND  P3, PT, R82.reuse, 0, PT ?W2;            // ISETP.LT.AND P3, PT, cRowMinusM.reuse, 0, PT
      ISETP.LT.AND  P4, PT, R82.reuse, -32, PT ?W2;          // ISETP.LT.AND P4, PT, cRowMinusM.reuse, -32, PT
      ISETP.LT.AND  P5, PT, R82.reuse, -64, PT ?W2;          // ISETP.LT.AND P5, PT, cRowMinusM.reuse, -64, PT
      ISETP.LT.AND  P6, PT, R82.reuse, -96, PT ?W2;          // ISETP.LT.AND P6, PT, cRowMinusM.reuse, -96, PT
      ISETP.LT.AND  P3, PT, R83.reuse, 0, P3 ?W2;            // ISETP.LT.AND P3, PT, cColMinusN.reuse, 0, P3
      ISETP.LT.AND  P4, PT, R83.reuse, 0, P4 ?W2;            // ISETP.LT.AND P4, PT, cColMinusN.reuse, 0, P4
      ISETP.LT.AND  P5, PT, R83.reuse, 0, P5 ?W2;            // ISETP.LT.AND P5, PT, cColMinusN.reuse, 0, P5
      ISETP.LT.AND  P6, PT, R83      , 0, P6 ?W4;            // ISETP.LT.AND P6, PT, cColMinusN , 0, P6
      P2R.B0 R77, PR, RZ, 0x78 ?W4;                          // P2R.B0 readPreds, PR, RZ, 0x78
      ISETP.LT.AND  P3, PT, R82.reuse, 0, PT ?W2;            // ISETP.LT.AND P3, PT, cRowMinusM.reuse, 0, PT
      ISETP.LT.AND  P4, PT, R82.reuse, -32, PT ?W2;          // ISETP.LT.AND P4, PT, cRowMinusM.reuse, -32, PT
      ISETP.LT.AND  P5, PT, R82.reuse, -64, PT ?W2;          // ISETP.LT.AND P5, PT, cRowMinusM.reuse, -64, PT
      ISETP.LT.AND  P6, PT, R82.reuse, -96, PT ?W2;          // ISETP.LT.AND P6, PT, cRowMinusM.reuse, -96, PT
      ISETP.LT.AND  P3, PT, R83.reuse, -8, P3 ?W2;           // ISETP.LT.AND P3, PT, cColMinusN.reuse, -8, P3
      ISETP.LT.AND  P4, PT, R83.reuse, -8, P4 ?W2;           // ISETP.LT.AND P4, PT, cColMinusN.reuse, -8, P4
      ISETP.LT.AND  P5, PT, R83.reuse, -8, P5 ?W2;           // ISETP.LT.AND P5, PT, cColMinusN.reuse, -8, P5
      ISETP.LT.AND  P6, PT, R83      , -8, P6 ?W4;           // ISETP.LT.AND P6, PT, cColMinusN , -8, P6
      P2R.B1 R77, PR, R77, 0x78 ?W4;                         // P2R.B1 readPreds, PR, readPreds, 0x78
      ISETP.LT.AND  P3, PT, R82.reuse, 0, PT ?W2;            // ISETP.LT.AND P3, PT, cRowMinusM.reuse, 0, PT
      ISETP.LT.AND  P4, PT, R82.reuse, -32, PT ?W2;          // ISETP.LT.AND P4, PT, cRowMinusM.reuse, -32, PT
      ISETP.LT.AND  P5, PT, R82.reuse, -64, PT ?W2;          // ISETP.LT.AND P5, PT, cRowMinusM.reuse, -64, PT
      ISETP.LT.AND  P6, PT, R82.reuse, -96, PT ?W2;          // ISETP.LT.AND P6, PT, cRowMinusM.reuse, -96, PT
      ISETP.LT.AND  P3, PT, R83.reuse, -16, P3 ?W2;          // ISETP.LT.AND P3, PT, cColMinusN.reuse, -16, P3
      ISETP.LT.AND  P4, PT, R83.reuse, -16, P4 ?W2;          // ISETP.LT.AND P4, PT, cColMinusN.reuse, -16, P4
      ISETP.LT.AND  P5, PT, R83.reuse, -16, P5 ?W2;          // ISETP.LT.AND P5, PT, cColMinusN.reuse, -16, P5
      ISETP.LT.AND  P6, PT, R83      , -16, P6 ?W4;          // ISETP.LT.AND P6, PT, cColMinusN , -16, P6
      P2R.B2 R77, PR, R77, 0x78 ?W4;                         // P2R.B2 readPreds, PR, readPreds, 0x78
      ISETP.LT.AND  P3, PT, R82.reuse, 0, PT ?W2;            // ISETP.LT.AND P3, PT, cRowMinusM.reuse, 0, PT
      ISETP.LT.AND  P4, PT, R82.reuse, -32, PT ?W2;          // ISETP.LT.AND P4, PT, cRowMinusM.reuse, -32, PT
      ISETP.LT.AND  P5, PT, R82.reuse, -64, PT ?W2;          // ISETP.LT.AND P5, PT, cRowMinusM.reuse, -64, PT
      ISETP.LT.AND  P6, PT, R82.reuse, -96, PT ?W2;          // ISETP.LT.AND P6, PT, cRowMinusM.reuse, -96, PT
      ISETP.LT.AND  P3, PT, R83.reuse, -24, P3 ?W2;          // ISETP.LT.AND P3, PT, cColMinusN.reuse, -24, P3
      ISETP.LT.AND  P4, PT, R83.reuse, -24, P4 ?W2;          // ISETP.LT.AND P4, PT, cColMinusN.reuse, -24, P4
      ISETP.LT.AND  P5, PT, R83.reuse, -24, P5 ?W2;          // ISETP.LT.AND P5, PT, cColMinusN.reuse, -24, P5
      ISETP.LT.AND  P6, PT, R83      , -24, P6 ?W4;          // ISETP.LT.AND P6, PT, cColMinusN , -24, P6
      P2R.B3 R77, PR, R77, 0x78 ?W4;                         // P2R.B3 readPreds, PR, readPreds, 0x78
// Virtual ?REQ_BAR found on next instruction, stop putting ?BARRIER_EXEMPT on decoupled instructions
      LDS.U16   R104, [R67 + 0x0000] &wr=0 ?W1;              // LDS.U16 storeReg0, [ldsReadPtr + 0x0000]
      LDS.U16   R112, [R67 + 0x0040] &wr=0 ?W1;              // LDS.U16 storeReg1, [ldsReadPtr + 0x0040]
      LDS.U16   R105, [R67 + 0x0080] &wr=0 ?W1;              // LDS.U16 storeReg2, [ldsReadPtr + 0x0080]
      LDS.U16   R113, [R67 + 0x00c0] &wr=0 ?W1;              // LDS.U16 storeReg3, [ldsReadPtr + 0x00c0]
      LDS.U16   R106, [R67 + 0x0100] &wr=0 ?W1;              // LDS.U16 storeReg4, [ldsReadPtr + 0x0100]
      LDS.U16   R114, [R67 + 0x0140] &wr=0 ?W1;              // LDS.U16 storeReg5, [ldsReadPtr + 0x0140]
      LDS.U16   R107, [R67 + 0x0180] &wr=0 ?W1;              // LDS.U16 storeReg6, [ldsReadPtr + 0x0180]
      LDS.U16   R115, [R67 + 0x01c0] &wr=0 ?W1;              // LDS.U16 storeReg7, [ldsReadPtr + 0x01c0]
      LDS.U16   R108, [R67 + 0x0200] &wr=0 ?W1;              // LDS.U16 storeReg8, [ldsReadPtr + 0x0200]
      LDS.U16   R116, [R67 + 0x0240] &wr=0 ?W1;              // LDS.U16 storeReg9, [ldsReadPtr + 0x0240]
      LDS.U16   R109, [R67 + 0x0280] &wr=0 ?W1;              // LDS.U16 storeReg10, [ldsReadPtr + 0x0280]
      LDS.U16   R117, [R67 + 0x02c0] &wr=0 ?W1;              // LDS.U16 storeReg11, [ldsReadPtr + 0x02c0]
      LDS.U16   R110, [R67 + 0x0300] &wr=0 ?W1;              // LDS.U16 storeReg12, [ldsReadPtr + 0x0300]
      LDS.U16   R118, [R67 + 0x0340] &wr=0 ?W1;              // LDS.U16 storeReg13, [ldsReadPtr + 0x0340]
      LDS.U16   R111, [R67 + 0x0380] &wr=0 ?W1;              // LDS.U16 storeReg14, [ldsReadPtr + 0x0380]
      LDS.U16   R119, [R67 + 0x03c0] &wr=0 ?W1;              // LDS.U16 storeReg15, [ldsReadPtr + 0x03c0]
      BAR.SYNC.DEFER_BLOCKING 0 ?W5;                         // BAR.SYNC.DEFER_BLOCKING 0
      LOP.AND P2, RZ, R76, 32 ?W12EG;                        // LOP.AND P2, RZ, mode, 32
      ISETP.GT.AND P2, PT, R71, 0, P2 ?W12EG;                // ISETP.GT.AND P2, PT, batchIdx, 0, P2
(P2)  BRA.U turing_hgemm_256x128_mods_nt_END_BIAS ?W4EG ?BARRIER_EXEMPT; // @P2 BRA.U turing_hgemm_256x128_mods_nt_END_BIAS
turing_hgemm_256x128_mods_nt_END_BIAS:
(!P1) BRA  turing_hgemm_256x128_mods_nt_STORE_COL_WRITE ?W4EG ?BARRIER_EXEMPT; // @!P1 BRA turing_hgemm_256x128_mods_nt_STORE_COL_WRITE
(P2)  BRA.U   turing_hgemm_256x128_mods_nt_STORE_COL_WRITE ?W4EG ?BARRIER_EXEMPT; // @P2 BRA.U turing_hgemm_256x128_mods_nt_STORE_COL_WRITE
(!P0) R2P PR, RZ.B0, 0x78 ?W2;                               // @!P0 R2P PR, RZ.B0, 0x78
(P0)  R2P PR, R77.B0, 0x78 ?W12EG;                           // @P0 R2P PR, readPreds.B0, 0x78
      HFMA2    R104, R84.reuse, R88, R104 &req={2,0} &rd=4 ?W2; // HFMA2 storeReg0, beta.reuse, fetchRegC0, storeReg0
(P3)  LDG.E.EN.LTC128B.U16.STRONG.GPU    R88, [R72 + 0x0000] &req=4   &wr=2 ?W2 ?BARRIER_EXEMPT; // @P3 LDG.E.EN.LTC128B.U16.STRONG.GPU fetchRegC0, [readPtr + 0x0000]
      HFMA2    R112, R84.reuse, R89, R112 &rd=4 ?W2;         // HFMA2 storeReg1, beta.reuse, fetchRegC1, storeReg1
(P4)  LDG.E.EN.LTC128B.U16.STRONG.GPU    R89, [R72 + 0x0040] &req=4   &wr=2 ?W2 ?BARRIER_EXEMPT; // @P4 LDG.E.EN.LTC128B.U16.STRONG.GPU fetchRegC1, [readPtr + 0x0040]
      HFMA2    R105, R84.reuse, R90, R105 &rd=4 ?W2;         // HFMA2 storeReg2, beta.reuse, fetchRegC2, storeReg2
(P5)  LDG.E.EN.LTC128B.U16.STRONG.GPU    R90, [R72 + 0x0080] &req=4   &wr=2 ?W2 ?BARRIER_EXEMPT; // @P5 LDG.E.EN.LTC128B.U16.STRONG.GPU fetchRegC2, [readPtr + 0x0080]
      HFMA2    R113, R84.reuse, R91, R113 &rd=4 ?W2;         // HFMA2 storeReg3, beta.reuse, fetchRegC3, storeReg3
(P6)  LDG.E.EN.LTC128B.U16.STRONG.GPU    R91, [R72 + 0x00c0] &req=4 &rd=3  &wr=2 ?W2 ?BARRIER_EXEMPT; // @P6 LDG.E.EN.LTC128B.U16.STRONG.GPU fetchRegC3, [readPtr + 0x00c0]
      LEA.LO   R72, P2, R78.reuse, R72, 4 &req=3 ?W4;        // LEA.LO readPtr, predCarry, strideC.reuse, readPtr, 4
      LEA.HI.X R73, R78, R73, RZ, 4, P2 ?W6;                 // LEA.HI.X readPtr_HI, strideC, readPtr_HI, strideC_HI, 4, predCarry
(P0)  R2P PR, R77.B1, 0x78 ?W12EG;                           // @P0 R2P PR, readPreds.B1, 0x78
      HFMA2    R106, R84.reuse, R92, R106 &rd=4 ?W2;         // HFMA2 storeReg4, beta.reuse, fetchRegC4, storeReg4
(P3)  LDG.E.EN.LTC128B.U16.STRONG.GPU    R92, [R72 + 0x0000] &req=4   &wr=2 ?W2 ?BARRIER_EXEMPT; // @P3 LDG.E.EN.LTC128B.U16.STRONG.GPU fetchRegC4, [readPtr + 0x0000]
      HFMA2    R114, R84.reuse, R93, R114 &rd=4 ?W2;         // HFMA2 storeReg5, beta.reuse, fetchRegC5, storeReg5
(P4)  LDG.E.EN.LTC128B.U16.STRONG.GPU    R93, [R72 + 0x0040] &req=4   &wr=2 ?W2 ?BARRIER_EXEMPT; // @P4 LDG.E.EN.LTC128B.U16.STRONG.GPU fetchRegC5, [readPtr + 0x0040]
      HFMA2    R107, R84.reuse, R94, R107 &rd=4 ?W2;         // HFMA2 storeReg6, beta.reuse, fetchRegC6, storeReg6
(P5)  LDG.E.EN.LTC128B.U16.STRONG.GPU    R94, [R72 + 0x0080] &req=4   &wr=2 ?W2 ?BARRIER_EXEMPT; // @P5 LDG.E.EN.LTC128B.U16.STRONG.GPU fetchRegC6, [readPtr + 0x0080]
      HFMA2    R115, R84.reuse, R95, R115 &rd=4 ?W2;         // HFMA2 storeReg7, beta.reuse, fetchRegC7, storeReg7
(P6)  LDG.E.EN.LTC128B.U16.STRONG.GPU    R95, [R72 + 0x00c0] &req=4 &rd=3  &wr=2 ?W2 ?BARRIER_EXEMPT; // @P6 LDG.E.EN.LTC128B.U16.STRONG.GPU fetchRegC7, [readPtr + 0x00c0]
      LEA.LO   R72, P2, R78.reuse, R72, 4 &req=3 ?W4;        // LEA.LO readPtr, predCarry, strideC.reuse, readPtr, 4
      LEA.HI.X R73, R78, R73, RZ, 4, P2 ?W6;                 // LEA.HI.X readPtr_HI, strideC, readPtr_HI, strideC_HI, 4, predCarry
(P0)  R2P PR, R77.B2, 0x78 ?W12EG;                           // @P0 R2P PR, readPreds.B2, 0x78
      HFMA2    R108, R84.reuse, R96, R108 &rd=4 ?W2;         // HFMA2 storeReg8, beta.reuse, fetchRegC8, storeReg8
(P3)  LDG.E.EN.LTC128B.U16.STRONG.GPU    R96, [R72 + 0x0000] &req=4   &wr=2 ?W2 ?BARRIER_EXEMPT; // @P3 LDG.E.EN.LTC128B.U16.STRONG.GPU fetchRegC8, [readPtr + 0x0000]
      HFMA2    R116, R84.reuse, R97, R116 &rd=4 ?W2;         // HFMA2 storeReg9, beta.reuse, fetchRegC9, storeReg9
(P4)  LDG.E.EN.LTC128B.U16.STRONG.GPU    R97, [R72 + 0x0040] &req=4   &wr=2 ?W2 ?BARRIER_EXEMPT; // @P4 LDG.E.EN.LTC128B.U16.STRONG.GPU fetchRegC9, [readPtr + 0x0040]
      HFMA2    R109, R84.reuse, R98, R109 &rd=4 ?W2;         // HFMA2 storeReg10, beta.reuse, fetchRegC10, storeReg10
(P5)  LDG.E.EN.LTC128B.U16.STRONG.GPU    R98, [R72 + 0x0080] &req=4   &wr=2 ?W2 ?BARRIER_EXEMPT; // @P5 LDG.E.EN.LTC128B.U16.STRONG.GPU fetchRegC10, [readPtr + 0x0080]
      HFMA2    R117, R84.reuse, R99, R117 &rd=4 ?W2;         // HFMA2 storeReg11, beta.reuse, fetchRegC11, storeReg11
(P6)  LDG.E.EN.LTC128B.U16.STRONG.GPU    R99, [R72 + 0x00c0] &req=4 &rd=3  &wr=2 ?W2 ?BARRIER_EXEMPT; // @P6 LDG.E.EN.LTC128B.U16.STRONG.GPU fetchRegC11, [readPtr + 0x00c0]
      LEA.LO   R72, P2, R78.reuse, R72, 4 &req=3 ?W4;        // LEA.LO readPtr, predCarry, strideC.reuse, readPtr, 4
      LEA.HI.X R73, R78, R73, RZ, 4, P2 ?W6;                 // LEA.HI.X readPtr_HI, strideC, readPtr_HI, strideC_HI, 4, predCarry
(P0)  R2P PR, R77.B3, 0x78 ?W12EG;                           // @P0 R2P PR, readPreds.B3, 0x78
      HFMA2    R110, R84.reuse, R100, R110 &rd=4 ?W2;        // HFMA2 storeReg12, beta.reuse, fetchRegC12, storeReg12
(P3)  LDG.E.EN.LTC128B.U16.STRONG.GPU    R100, [R72 + 0x0000] &req=4   &wr=2 ?W2 ?BARRIER_EXEMPT; // @P3 LDG.E.EN.LTC128B.U16.STRONG.GPU fetchRegC12, [readPtr + 0x0000]
      HFMA2    R118, R84.reuse, R101, R118 &rd=4 ?W2;        // HFMA2 storeReg13, beta.reuse, fetchRegC13, storeReg13
(P4)  LDG.E.EN.LTC128B.U16.STRONG.GPU    R101, [R72 + 0x0040] &req=4   &wr=2 ?W2 ?BARRIER_EXEMPT; // @P4 LDG.E.EN.LTC128B.U16.STRONG.GPU fetchRegC13, [readPtr + 0x0040]
      HFMA2    R111, R84.reuse, R102, R111 &rd=4 ?W2;        // HFMA2 storeReg14, beta.reuse, fetchRegC14, storeReg14
(P5)  LDG.E.EN.LTC128B.U16.STRONG.GPU    R102, [R72 + 0x0080] &req=4   &wr=2 ?W2 ?BARRIER_EXEMPT; // @P5 LDG.E.EN.LTC128B.U16.STRONG.GPU fetchRegC14, [readPtr + 0x0080]
      HFMA2    R119, R84      , R103, R119 &wr=4 ?W2;        // HFMA2 storeReg15, beta , fetchRegC15, storeReg15
(P6)  LDG.E.EN.LTC128B.U16.STRONG.GPU    R103, [R72 + 0x00c0] &req=4 &rd=3  &wr=2 ?W2 ?BARRIER_EXEMPT; // @P6 LDG.E.EN.LTC128B.U16.STRONG.GPU fetchRegC15, [readPtr + 0x00c0]
turing_hgemm_256x128_mods_nt_STORE_COL_WRITE:
      LOP.AND P2, RZ, R76, 32 ?W12EG;                        // LOP.AND P2, RZ, mode, 32
(P2)  BRA.U   turing_hgemm_256x128_mods_nt_END_RELU_EPILOG ?W4EG ?BARRIER_EXEMPT; // @P2 BRA.U turing_hgemm_256x128_mods_nt_END_RELU_EPILOG
turing_hgemm_256x128_mods_nt_END_RELU_EPILOG:
      R2P PR, R122.B0, 0x78 ?W12EG;                          // R2P PR, writePreds.B0, 0x78
(P3)  STG.E.EF.U16.WEAK [R74 + 0x0000], R104 &req={0,4} ?W2 ?BARRIER_EXEMPT; // @P3 STG.E.EF.U16.WEAK [writePtr + 0x0000], storeReg0
(P4)  STG.E.EF.U16.WEAK [R74 + 0x0040], R112 ?W2 ?BARRIER_EXEMPT; // @P4 STG.E.EF.U16.WEAK [writePtr + 0x0040], storeReg1
(P5)  STG.E.EF.U16.WEAK [R74 + 0x0080], R105 ?W2 ?BARRIER_EXEMPT; // @P5 STG.E.EF.U16.WEAK [writePtr + 0x0080], storeReg2
(P6)  STG.E.EF.U16.WEAK [R74 + 0x00c0], R113 &rd=3 ?W2 ?BARRIER_EXEMPT; // @P6 STG.E.EF.U16.WEAK [writePtr + 0x00c0], storeReg3
      LEA.LO   R74, P2, R78.reuse, R74, 4 &req=3 ?W4;        // LEA.LO writePtr, predCarry, strideC.reuse, writePtr, 4
      LEA.HI.X R75, R78, R75, RZ, 4, P2 ?W8;                 // LEA.HI.X writePtr_HI, strideC, writePtr_HI, strideC_HI, 4, predCarry
      R2P PR, R122.B1, 0x78 ?W12EG;                          // R2P PR, writePreds.B1, 0x78
(P3)  STG.E.EF.U16.WEAK [R74 + 0x0000], R106 ?W2 ?BARRIER_EXEMPT; // @P3 STG.E.EF.U16.WEAK [writePtr + 0x0000], storeReg4
(P4)  STG.E.EF.U16.WEAK [R74 + 0x0040], R114 ?W2 ?BARRIER_EXEMPT; // @P4 STG.E.EF.U16.WEAK [writePtr + 0x0040], storeReg5
(P5)  STG.E.EF.U16.WEAK [R74 + 0x0080], R107 ?W2 ?BARRIER_EXEMPT; // @P5 STG.E.EF.U16.WEAK [writePtr + 0x0080], storeReg6
(P6)  STG.E.EF.U16.WEAK [R74 + 0x00c0], R115 &rd=3 ?W2 ?BARRIER_EXEMPT; // @P6 STG.E.EF.U16.WEAK [writePtr + 0x00c0], storeReg7
      LEA.LO   R74, P2, R78.reuse, R74, 4 &req=3 ?W4;        // LEA.LO writePtr, predCarry, strideC.reuse, writePtr, 4
      LEA.HI.X R75, R78, R75, RZ, 4, P2 ?W8;                 // LEA.HI.X writePtr_HI, strideC, writePtr_HI, strideC_HI, 4, predCarry
      R2P PR, R122.B2, 0x78 ?W12EG;                          // R2P PR, writePreds.B2, 0x78
(P3)  STG.E.EF.U16.WEAK [R74 + 0x0000], R108 ?W2 ?BARRIER_EXEMPT; // @P3 STG.E.EF.U16.WEAK [writePtr + 0x0000], storeReg8
(P4)  STG.E.EF.U16.WEAK [R74 + 0x0040], R116 ?W2 ?BARRIER_EXEMPT; // @P4 STG.E.EF.U16.WEAK [writePtr + 0x0040], storeReg9
(P5)  STG.E.EF.U16.WEAK [R74 + 0x0080], R109 ?W2 ?BARRIER_EXEMPT; // @P5 STG.E.EF.U16.WEAK [writePtr + 0x0080], storeReg10
(P6)  STG.E.EF.U16.WEAK [R74 + 0x00c0], R117 &rd=3 ?W2 ?BARRIER_EXEMPT; // @P6 STG.E.EF.U16.WEAK [writePtr + 0x00c0], storeReg11
      LEA.LO   R74, P2, R78.reuse, R74, 4 &req=3 ?W4;        // LEA.LO writePtr, predCarry, strideC.reuse, writePtr, 4
      LEA.HI.X R75, R78, R75, RZ, 4, P2 ?W8;                 // LEA.HI.X writePtr_HI, strideC, writePtr_HI, strideC_HI, 4, predCarry
      R2P PR, R122.B3, 0x78 ?W12EG;                          // R2P PR, writePreds.B3, 0x78
(P3)  STG.E.EF.U16.WEAK [R74 + 0x0000], R110 ?W2 ?BARRIER_EXEMPT; // @P3 STG.E.EF.U16.WEAK [writePtr + 0x0000], storeReg12
(P4)  STG.E.EF.U16.WEAK [R74 + 0x0040], R118 ?W2 ?BARRIER_EXEMPT; // @P4 STG.E.EF.U16.WEAK [writePtr + 0x0040], storeReg13
(P5)  STG.E.EF.U16.WEAK [R74 + 0x0080], R111 ?W2 ?BARRIER_EXEMPT; // @P5 STG.E.EF.U16.WEAK [writePtr + 0x0080], storeReg14
(P6)  STG.E.EF.U16.WEAK [R74 + 0x00c0], R119 &rd=3 ?W2 ?BARRIER_EXEMPT; // @P6 STG.E.EF.U16.WEAK [writePtr + 0x00c0], storeReg15
// Virtual ?REQ_BAR found on next instruction, stop putting ?BARRIER_EXEMPT on decoupled instructions
      RET.ABS  R64 + 32 ?W4;                                 // RET.ABS pc + 32
turing_hgemm_256x128_mods_nt_END:
	.sectioninfo	@"SHI_REGISTERS=127"
//--------------------- .lw.info.turing_hgemm_256x128_mods_nt

	.section	.lw.info.turing_hgemm_256x128_mods_nt,"",@SHT_LWDA_INFO
	// ---- lwinfo : EIATTR_PARAM_CBANK
	.align 4
turing_hgemm_256x128_mods_nt_1:
	.byte  0x04, 0xa
	.short  (turing_hgemm_256x128_mods_nt_3 - turing_hgemm_256x128_mods_nt_2)
	.align 4
turing_hgemm_256x128_mods_nt_2:
	.word	index@(.lw.constant0.turing_hgemm_256x128_mods_nt)
	.short  0x0160
	.short  0x98

	// ---- lwinfo : EIATTR_CBANK_PARAM_SIZE
	.align 4
turing_hgemm_256x128_mods_nt_3:
	.byte	0x03, 0x19
	.short  0x98

	// ---- lwinfo : EIATTR_KPARAM_INFO
	.align 4
turing_hgemm_256x128_mods_nt_4:
	.byte  0x04, 0x17
	.short (turing_hgemm_256x128_mods_nt_6 - turing_hgemm_256x128_mods_nt_5)
turing_hgemm_256x128_mods_nt_5:
	.word	0x00000000
	.short  0x0
	.short  0x0
	.byte  0x00, 0xf0, 0x61, 0x02

turing_hgemm_256x128_mods_nt_6:
//--------------------- .lw.shared.turing_hgemm_256x128_mods_nt

	.section	.lw.shared.turing_hgemm_256x128_mods_nt,"aw",@nobits
	.align 4
	.zero 12284
	.word shmem_reloc_turing_hgemm_256x128_mods_nt
//--------------------- .lw.callgraph             --------------------------
	.section	.lw.callgraph,"",@"SHT_CALLGRAPH"
	.sectionentsize	8
	.align 4
	.byte	0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff
	.align 4
	.byte	0x00, 0x00, 0x00, 0x00, 0xfe, 0xff, 0xff, 0xff
	.byte	0x00, 0x00, 0x00, 0x00, 0xfd, 0xff, 0xff, 0xff

// ------------------- lwinfo        --------
	.section	.lw.info,"",@SHT_LWDA_INFO

	// ---- lwinfo : EIATTR_MIN_STACK_SIZE
	.align 4
.turing_hgemm_256x128_mods_nt_L1:
	.byte  0x04, 0x12
	.short  (.turing_hgemm_256x128_mods_nt_L3 - .turing_hgemm_256x128_mods_nt_L2)
	.align 4
.turing_hgemm_256x128_mods_nt_L2:
	.word	index@(turing_hgemm_256x128_mods_nt)
	.word  0x0

	// ---- lwinfo : EIATTR_FRAME_SIZE
	.align 4
.turing_hgemm_256x128_mods_nt_L3:
	.byte  0x04, 0x11
	.short  (.turing_hgemm_256x128_mods_nt_L5 - .turing_hgemm_256x128_mods_nt_L4)
	.align 4
.turing_hgemm_256x128_mods_nt_L4:
	.word	index@(turing_hgemm_256x128_mods_nt)
	.word  0x0

.turing_hgemm_256x128_mods_nt_L5:

//--------------------- .lw.constant0.turing_hgemm_256x128_mods_nt
	.section	.lw.constant0.turing_hgemm_256x128_mods_nt,"a",@progbits
	.align 4
.turing_hgemm_256x128_mods_nt_L6:
	.zero     504

// ------------------- Symbol --------

// const ShaderParams turing_hgemm_256x128_mods_nt_params = {
//     /* version             */ 1,
//     /* name                */ "turing_hgemm_256x128_mods_nt",
//     /* kernel              */ (void*)turing_hgemm_256x128_mods_nt,
//     /* chipFamily          */ GEMM_CHIP_TURING,
//     /* gemmType            */ HGEMM,
//     /* typeA               */ R_16F,
//     /* typeAm              */ R_16F,
//     /* packCountA             1, */
//     /* typeB               */ R_16F,
//     /* packCountB             1, */
//     /* typeC               */ R_16F,
//     /* packCountC             1, */
//     /* typeEpilog          */ R_16F,
//     /* packCountEpilog        1, */
//     /* shapeC              */ RECT,
//     /* layoutA             */ N,
//     /* layoutB             */ T,
//     /* log2ElementsPerLdgA */ 0,
//     /* log2ElementsPerLdgB */ 0,
//     /* reLuAndBias         */ 0,
//     /* isReleaseKernel     */ 1,
//     /* numRegisters        */ 125,
//     /* usedRegisters          125, */
//     /* sharedMemSize       */ 12288,  /* 12.000 KB */
//     /* elementRowsPerCta   */ 256,
//     /* elementRowsPerWarp     128, */
//     /* elementColsperCta   */ 128,
//     /* elementColsPerWarp     32, */
//     /* threadsPerCta       */ 256,
//     /* raggedMn            */ true,
//     /* warpStrideK         */ 8,
//     /* shiftFastA          */ 1,
//     /* multiplierSlowA     */ 16,
//     /* offsetSlowA         */ 0,
//     /* shiftFastB          */ 1,
//     /* multiplierSlowB     */ 16,
//     /* offsetSlowB         */ 0,
//     /* shiftFastAm         */ 0,
//     /* multiplierSlowAm    */ 0,
//     /* offsetSlowAm        */ 0,
//     /* kBlock              */ 8,
//     /* lwDnnEdges          */ LWDNN_NONE,
//     /* lwDnnLayout         */ NCHW,
//     /* lwDnnStridedB       */ false,
//     /* lwDnnSplitK         */ false,
//     /* lwDnnDgrad          */ false,
//     /* lwDnnWgrad          */ false,
//     /* sliceRows           */ 1,
//     /* sliceCols           */ 1,
//     /* abiVersion          */ ABI_PREAMPERE_G
// };
// raggedMnNumPreds 12, R2P's in loop 4
