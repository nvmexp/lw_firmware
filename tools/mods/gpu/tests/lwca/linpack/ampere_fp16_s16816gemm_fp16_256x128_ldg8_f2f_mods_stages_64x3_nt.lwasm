.headerflags	@"EF_LWDA_TEXMODE_UNIFIED EF_LWDA_64BIT_ADDRESS EF_LWDA_SM80 EF_LWDA_PTX_SM(EF_LWDA_SM80) "

	.section       .text.ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt,"ax",@progbits
	.sectionflags	@"SHF_BARRIERS=1"
	.align 128
	.global        ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt
	.type          ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt,@function
	.size          ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt,(ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_END - ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt)
	.other         ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt,@"STO_LWDA_ENTRY STV_DEFAULT"
ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt:
.text.ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt:
      MOV  R155, RZ ?W2;                                     // MOV ctaRow_HI, RZ
      MOV R2, RZ ?W2;                                        // MOV kCount, RZ
      MOV   R158, c[0][0x1d4] ?W4;                           // MOV mode, Mode
      S2R  R157, SR_CTAid.Z &wr=4 ?W2;                       // S2R batchIdx, SR_CTAid.Z
      S2R R3, SR_VirtId &wr=4 ?W2;                           // S2R smId, SR_VirtId
      S2R R149, SR_Tid.X &wr=4 ?W2;                          // S2R tidx, SR_Tid.X
      S2R R154, SR_CTAid.X &wr=4 ?W2;                        // S2R ctaRow, SR_CTAid.X
      S2R R156, SR_CTAid.Y &wr=4 ?W2;                        // S2R ctaCol, SR_CTAid.Y
      ISETP.NE P0, RZ, c[0][0x1f0] ?W2;                      // ISETP.NE P0, RZ, AbByRef
      LOP.AND  R4, R158, 0xf00 ?W2;                          // LOP.AND log2GroupCols, mode, 0xf00
      LOP.AND  P5, RZ, R158, 0x1000 ?W2;                     // LOP.AND P5, RZ, mode, 0x1000
      SHR.U32  R4, R4, 8 ?W4;                                // SHR.U32 log2GroupCols, log2GroupCols, 8
      BMSK     R5, R4, 1 ?W2;                                // BMSK groupCols, log2GroupCols, 1
      BMSK     R6, RZ, R4 ?W2;                               // BMSK mask, RZ, log2GroupCols
      PSETP.AND P4, !PT, !PT ?W2;                            // PSETP.AND P4, !PT, !PT
ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_prolog_cta_swizzle_loop:
      LOP.OR   R7, R156, R6 &req=4 ?W2;                      // LOP.OR testCol, ctaCol, mask
      ISETP.EQ P3, R6, 3 ?W2;                                // ISETP.EQ P3, mask, 3
      ISETP.LT P2, R7, c[0x0][0x010] ?W2;                    // ISETP.LT P2, testCol, GridDimY
      LOP.AND  R8,  R156.reuse,  R6.reuse ?W2;               // LOP.AND colMod, ctaCol.reuse, mask.reuse
      LOP.AND  R11,  R156,        R5 ?W2;                    // LOP.AND colBit, ctaCol, groupCols
      ISETP.EQ.AND P3, PT, R7, c[0x0][0x010], P3 ?W2;        // ISETP.EQ.AND P3, PT, testCol, GridDimY, P3
      LOP.AND  R9, R156.reuse, ~R6 ?W1;                      // LOP.AND colBase, ctaCol.reuse, ~mask
      IMAD.U32 R10, R8, c[0x0][0x00c], R154 &req=4 ?W1;      // IMAD.U32 linear, colMod, GridDimX, ctaRow
(P5)  ISETP.EQ.XOR P4, PT, R11, R5, P4 ?W2;                  // @P5 ISETP.EQ.XOR P4, PT, colBit, groupCols, P4
      SHR.U32 R5, R5, 1 ?W2;                                 // SHR.U32 groupCols, groupCols, 1
(P2)  BRA ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_prolog_cta_swizzle_group_col_pow2 ?W5; // @P2 BRA ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_prolog_cta_swizzle_group_col_pow2
(!P3) SHR.U32  R6, R6, 1 ?W2;                                // @!P3 SHR.U32 mask, mask, 1
(!P3) IADD     R4, R4, -1 ?W2;                               // @!P3 IADD log2GroupCols, log2GroupCols, -1
(!P3) BRA ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_prolog_cta_swizzle_loop ?W5; // @!P3 BRA ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_prolog_cta_swizzle_loop
      IMUL.WIDE.U32 R12, R10, 0x55555556 ?W1;                // IMUL.WIDE.U32 swizRow64, linear, 0x55555556
      IADD  R156, R9, R10 ?W5;                               // IADD ctaCol, colBase, linear
      IMAD.U32 R156, R13, -3, R156 ?W1;                      // IMAD.U32 ctaCol, swizRow, -3, ctaCol
(!P4) MOV R154, R13 ?W2;                                     // @!P4 MOV ctaRow, swizRow
(P4)  IADD.X R154, ~R13, c[0x0][0x00c], !PT ?W2;             // @P4 IADD.X ctaRow, ~swizRow, GridDimX, !PT
      BRA ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_prolog_cta_swizzle_done ?W5; // BRA ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_prolog_cta_swizzle_done
ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_prolog_cta_swizzle_group_col_pow2:
      SHR.U32 R154, R10, R4 ?W2;                             // SHR.U32 ctaRow, linear, log2GroupCols
      LOP3.LUT  R156, R9, R10, R6, 0xf8 ?W2;                 // LOP3.LUT ctaCol, colBase, linear, mask, B_AND_C__OR_A ?WiT
(P4)  IADD.X R154, ~R154, c[0x0][0x00c], !PT ?W4;            // @P4 IADD.X ctaRow, ~ctaRow, GridDimX, !PT
ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_prolog_cta_swizzle_done:
      SHR.U32 R3, R3, 20 ?W2;                                // SHR.U32 smId, smId, 20
      LOP.AND P3, RZ, R158, 0x10000 ?W2;                     // LOP.AND P3, RZ, mode, 0x10000
      IMAD.LO.U32 R6, R157, c[0x0][0x010], R156 ?W5;         // IMAD.LO.U32 ctaIdx, batchIdx, GridDimY, ctaCol
      IMAD.WIDE.U32 R6, R6, c[0x0][0x00c], R154 ?W5;         // IMAD.WIDE.U32 ctaIdx, ctaIdx, GridDimX, ctaRow
      LOP.AND R3, R3, 0x1ff ?W2;                             // LOP.AND smId, smId, 0x1ff
      LEA.LO   R4, P2, R6.reuse, c[0][0x1c8], 1 ?W4;         // LEA.LO syncPointer, predCarry, ctaIdx.reuse, Sync, 1
      LEA.HI.X R5, R6, c[0][0x1cc], R7, 1, P2 ?W8;           // LEA.HI.X syncPointer_HI, ctaIdx, Sync_HI, ctaIdx_HI, 1, predCarry
(P3)  STG.E.EN.U16.WEAK [R4], R3 &rd=5 ?W2;                  // @P3 STG.E.EN.U16.WEAK [syncPointer], smId
      MOV R160,    c[0][0x1e0] ?W2;                          // MOV betaPtr, BetaRef
      MOV R161, c[0][0x1e4] ?W2;                             // MOV betaPtr_HI, BetaRef_HI
      LOP.AND P3, RZ, R158, 4 ?W2;                           // LOP.AND P3, RZ, mode, 4
      IMAD.LO.U32 R6, R157, c[0][0x1d0], RZ &req=4 ?W5;      // IMAD.LO.U32 temp0, batchIdx, ChunkK, RZ
      IADD    R6, -R6, c[0][0x1c4] ?W2;                      // IADD temp0, -temp0, CountK
      MOV     R148, c[0][0x1c4] ?W2;                         // MOV counterK, CountK
      ISETP.LT.AND  P4, PT, R6, c[0][0x1d0], P3 ?W2;         // ISETP.LT.AND P4, PT, temp0, ChunkK, P3
(P3)  MOV        R148, c[0][0x1d0] ?W11;                     // @P3 MOV counterK, ChunkK
(P4)  MOV        R148, R6 ?W4;                               // @P4 MOV counterK, temp0
(P0)  LDG.E.EN.LTC128B.32.CONSTANT R128, [R160] &req=5 &wr=0 ?W2; // @P0 LDG.E.EN.LTC128B.32.CONSTANT beta, [betaPtr]
(!P0) MOV  R128, c[0][0x1ec] ?W1;                            // @!P0 MOV beta, BetaVal
      MOV  R7, RZ ?W2;                                       // MOV offsetA_HI, RZ
      LOP.AND R3, R149, 7 &req=4 ?W2;                        // LOP.AND contiguousIdA, swizTidx, 7
      SHR.U32 R4, R149, 3 ?W4;                               // SHR.U32 crosswiseIdA, swizTidx, 3
      MOV  R9, RZ ?W2;                                       // MOV scaledContiguousIdA_HI, RZ
      SHL R8, R3, 3 ?W4;                                     // SHL scaledContiguousIdA, contiguousIdA, 3
      LEA R6, R154, R8, 8 &req=4 ?W4;                        // LEA offsetA, ctaRow, scaledContiguousIdA, 8
      IADD R5, R6, -c[0][0x1bc] ?W2;                         // IADD diffContiguousA, offsetA, -CountM
      IMAD.WIDE.U32 R6, R4, c[0][0x1b0], R6 ?W2;             // IMAD.WIDE.U32 offsetA, crosswiseIdA, StrideA, offsetA
      SHR      R11, R149, 3 ?W2;                             // SHR colId, tidx, 3
      LOP.AND  R10, R149, 0x7 ?W2;                           // LOP.AND rowId, tidx, 0x7
      SHL      R12, R11, 7 ?W2;                              // SHL offset, colId, 7
      LOP.XOR  R10, R10, R11 ?W4;                            // LOP.XOR rowId, rowId, colId
      LOP.AND  R10, R10, 0x7 ?W4;                            // LOP.AND rowId, rowId, 0x7
      LEA      R129, R10, R12, 4 ?W2;                        // LEA sharedWriteA, rowId, offset, 4
      MOV  R13, RZ ?W2;                                      // MOV offsetB_HI, RZ
      LOP.AND R10, R149, 7 ?W2;                              // LOP.AND contiguousIdB, swizTidx, 7
      SHR.U32 R11, R149, 3 ?W4;                              // SHR.U32 crosswiseIdB, swizTidx, 3
      MOV  R15, RZ ?W2;                                      // MOV scaledContiguousIdB_HI, RZ
      SHL R14, R10, 3 ?W4;                                   // SHL scaledContiguousIdB, contiguousIdB, 3
      LEA R12, R156, R14, 7 &req=4 ?W4;                      // LEA offsetB, ctaCol, scaledContiguousIdB, 7
      IADD R16, R12, -c[0][0x1c0] ?W2;                       // IADD diffContiguousB, offsetB, -CountN
      IMAD.WIDE.U32 R12, R11, c[0][0x1b4], R12 ?W2;          // IMAD.WIDE.U32 offsetB, crosswiseIdB, StrideB, offsetB
      SHR      R18, R149, 3 ?W2;                             // SHR colId, tidx, 3
      LOP.AND  R17, R149, 0x7 ?W2;                           // LOP.AND rowId, tidx, 0x7
      SHL      R19, R18, 7 ?W2;                              // SHL offset, colId, 7
      LOP.XOR  R17, R17, R18 ?W4;                            // LOP.XOR rowId, rowId, colId
      LOP.AND  R17, R17, 0x7 ?W4;                            // LOP.AND rowId, rowId, 0x7
      LEA      R138, R17, R19, 4 ?W4;                        // LEA sharedWriteB, rowId, offset, 4
      IADD R138, R138, 0x8000 ?W2;                           // IADD sharedWriteB, sharedWriteB, 0x8000
      LOP.AND P2, R17, R158, 0x7 ?W13EG;                     // LOP.AND predCarry, temp0, mode, 0x7
      MOV  R130,    c[0][0x160] ?W2;                         // MOV readPtrA0, BaseA
      MOV  R131, c[0][0x164] ?W2;                            // MOV readPtrA0_HI, BaseA_HI
(!P2) BRA.U ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_END_BATCH_PTR_CALCA_PROLOG ?W5; // @!predCarry BRA.U ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_END_BATCH_PTR_CALCA_PROLOG
      ISETP.EQ  P2, R17, 0x2 ?W13EG;                         // ISETP.EQ predCarry, temp0, 0x2
(!P2) BRA.U ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_BATCHED_CONTIG_PTR_CALCA_PROLOG ?W5; // @!predCarry BRA.U ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_BATCHED_CONTIG_PTR_CALCA_PROLOG
      LEA.LO   R130, P2, R157.reuse, c[0][0x160], 3 ?W4;     // LEA.LO readPtrA0, predCarry, batchIdx.reuse, BaseA, 3
      LEA.HI.X R131, R157, c[0][0x164], RZ, 3, P2 ?W8;       // LEA.HI.X readPtrA0_HI, batchIdx, BaseA_HI, RZ, 3, predCarry
      LDG.E.EN.LTC128B.64.CONSTANT R130, [R130] &rd=5 &wr=0 ?W2; // LDG.E.EN.LTC128B.64.CONSTANT readPtrA0, [readPtrA0]
      BRA.U ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_END_BATCH_PTR_CALCA_PROLOG ?W5; // BRA.U ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_END_BATCH_PTR_CALCA_PROLOG
ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_BATCHED_CONTIG_PTR_CALCA_PROLOG:
      IMAD.WIDE.U32 R18,    R157, c[0][0x198],    RZ &req=4 ?W4; // IMAD.WIDE.U32 elementOffset, batchIdx, MatrixStrideA, RZ
      IMAD.LO.U32   R19, R157, c[0][0x19c], R19 ?W2;         // IMAD.LO.U32 elementOffset_HI, batchIdx, MatrixStrideA_HI, elementOffset_HI
      LEA.LO   R130, P2, R18.reuse, c[0][0x160], 1 ?W4;      // LEA.LO readPtrA0, predCarry, elementOffset.reuse, BaseA, 1
      LEA.HI.X R131, R18, c[0][0x164], R19, 1, P2 ?W2;       // LEA.HI.X readPtrA0_HI, elementOffset, BaseA_HI, elementOffset_HI, 1, predCarry
ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_END_BATCH_PTR_CALCA_PROLOG:
      LEA.LO   R130, P2, R6.reuse, R130, 1 &req=0 ?W4;       // LEA.LO readPtrA0, predCarry, offsetA.reuse, readPtrA0, 1
      LEA.HI.X R131, R6, R131, R7, 1, P2 ?W2;                // LEA.HI.X readPtrA0_HI, offsetA, readPtrA0_HI, offsetA_HI, 1, predCarry
      LOP.AND P2, R17, R158, 0x7 ?W13EG;                     // LOP.AND predCarry, temp0, mode, 0x7
      MOV  R134,    c[0][0x168] ?W2;                         // MOV readPtrB0, BaseB
      MOV  R135, c[0][0x16c] ?W2;                            // MOV readPtrB0_HI, BaseB_HI
(!P2) BRA.U ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_END_BATCH_PTR_CALCB_PROLOG ?W5; // @!predCarry BRA.U ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_END_BATCH_PTR_CALCB_PROLOG
      ISETP.EQ  P2, R17, 0x2 ?W13EG;                         // ISETP.EQ predCarry, temp0, 0x2
(!P2) BRA.U ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_BATCHED_CONTIG_PTR_CALCB_PROLOG ?W5; // @!predCarry BRA.U ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_BATCHED_CONTIG_PTR_CALCB_PROLOG
      LEA.LO   R134, P2, R157.reuse, c[0][0x168], 3 ?W4;     // LEA.LO readPtrB0, predCarry, batchIdx.reuse, BaseB, 3
      LEA.HI.X R135, R157, c[0][0x16c], RZ, 3, P2 ?W8;       // LEA.HI.X readPtrB0_HI, batchIdx, BaseB_HI, RZ, 3, predCarry
      LDG.E.EN.LTC128B.64.CONSTANT R134, [R134] &rd=5 &wr=0 ?W2; // LDG.E.EN.LTC128B.64.CONSTANT readPtrB0, [readPtrB0]
      BRA.U ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_END_BATCH_PTR_CALCB_PROLOG ?W5; // BRA.U ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_END_BATCH_PTR_CALCB_PROLOG
ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_BATCHED_CONTIG_PTR_CALCB_PROLOG:
      IMAD.WIDE.U32 R18,    R157, c[0][0x1a0],    RZ &req=4 ?W4; // IMAD.WIDE.U32 elementOffset, batchIdx, MatrixStrideB, RZ
      IMAD.LO.U32   R19, R157, c[0][0x1a4], R19 ?W2;         // IMAD.LO.U32 elementOffset_HI, batchIdx, MatrixStrideB_HI, elementOffset_HI
      LEA.LO   R134, P2, R18.reuse, c[0][0x168], 1 ?W4;      // LEA.LO readPtrB0, predCarry, elementOffset.reuse, BaseB, 1
      LEA.HI.X R135, R18, c[0][0x16c], R19, 1, P2 ?W2;       // LEA.HI.X readPtrB0_HI, elementOffset, BaseB_HI, elementOffset_HI, 1, predCarry
ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_END_BATCH_PTR_CALCB_PROLOG:
      LEA.LO   R134, P2, R12.reuse, R134, 1 &req=0 ?W4;      // LEA.LO readPtrB0, predCarry, offsetB.reuse, readPtrB0, 1
      LEA.HI.X R135, R12, R135, R13, 1, P2 ?W2;              // LEA.HI.X readPtrB0_HI, offsetB, readPtrB0_HI, offsetB_HI, 1, predCarry
      SHR R1, R148, 6 ?W4;                                   // SHR countResidueK, counterK, 6
      SHL R1, R1, 6 ?W4;                                     // SHL countResidueK, countResidueK, 6
      IADD R1, R148, -R1 ?W4;                                // IADD countResidueK, counterK, -countResidueK
      ISETP.GT P0, R1, RZ ?W13EG;                            // ISETP.GT P0, countResidueK, RZ
(!P0) BRA.U ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_FULL_LDGSTAGE_PREDICATES ?W5; // @!P0 BRA.U ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_FULL_LDGSTAGE_PREDICATES
      IADD R17, R4, -R1 ?W4;                                 // IADD diffCrosswiseA, crosswiseIdA, -countResidueK
      ISETP.LT P0, R17, 0 ?W4;                               // ISETP.LT P0, diffCrosswiseA, 0
      ISETP.LT.AND P3, PT, R5, 0, P0 ?W2;                    // ISETP.LT.AND P3, PT, diffContiguousA, 0, P0
      ISETP.LT.AND P4, PT, R5, -64, P0 ?W2;                  // ISETP.LT.AND P4, PT, diffContiguousA, -64, P0
      ISETP.LT.AND P5, PT, R5, -128, P0 ?W2;                 // ISETP.LT.AND P5, PT, diffContiguousA, -128, P0
      ISETP.LT.AND P6, PT, R5, -192, P0 ?W4;                 // ISETP.LT.AND P6, PT, diffContiguousA, -192, P0
      P2R.B0 R0, PR, RZ, 0x78 ?W2;                           // P2R.B0 predStorageResidue0, PR, RZ, 0x78
      ISETP.LT P0, R17, -32 ?W4;                             // ISETP.LT P0, diffCrosswiseA, -32
      ISETP.LT.AND P3, PT, R5, 0, P0 ?W2;                    // ISETP.LT.AND P3, PT, diffContiguousA, 0, P0
      ISETP.LT.AND P4, PT, R5, -64, P0 ?W2;                  // ISETP.LT.AND P4, PT, diffContiguousA, -64, P0
      ISETP.LT.AND P5, PT, R5, -128, P0 ?W2;                 // ISETP.LT.AND P5, PT, diffContiguousA, -128, P0
      ISETP.LT.AND P6, PT, R5, -192, P0 ?W4;                 // ISETP.LT.AND P6, PT, diffContiguousA, -192, P0
      P2R.B1 R0, PR, R0, 0x78 ?W2;                           // P2R.B1 predStorageResidue0, PR, predStorageResidue0, 0x78
      IADD R18, R11, -R1 ?W4;                                // IADD diffCrosswiseB, crosswiseIdB, -countResidueK
      ISETP.LT P0, R18, 0 ?W4;                               // ISETP.LT P0, diffCrosswiseB, 0
      ISETP.LT.AND P3, PT, R16, 0, P0 ?W2;                   // ISETP.LT.AND P3, PT, diffContiguousB, 0, P0
      ISETP.LT.AND P4, PT, R16, -64, P0 ?W2;                 // ISETP.LT.AND P4, PT, diffContiguousB, -64, P0
      ISETP.LT P0, R18, -32 ?W4;                             // ISETP.LT P0, diffCrosswiseB, -32
      ISETP.LT.AND P5, PT, R16, 0, P0 ?W2;                   // ISETP.LT.AND P5, PT, diffContiguousB, 0, P0
      ISETP.LT.AND P6, PT, R16, -64, P0 ?W4;                 // ISETP.LT.AND P6, PT, diffContiguousB, -64, P0
      P2R.B2 R0, PR, R0, 0x78 ?W2;                           // P2R.B2 predStorageResidue0, PR, predStorageResidue0, 0x78
ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_FULL_LDGSTAGE_PREDICATES:
      IADD R17, R4, -R148 ?W4;                               // IADD diffCrosswiseA, crosswiseIdA, -counterK
      ISETP.LT P0, R17, 0 ?W4;                               // ISETP.LT P0, diffCrosswiseA, 0
      ISETP.LT.AND P3, PT, R5, 0, P0 ?W2;                    // ISETP.LT.AND P3, PT, diffContiguousA, 0, P0
      ISETP.LT.AND P4, PT, R5, -64, P0 ?W2;                  // ISETP.LT.AND P4, PT, diffContiguousA, -64, P0
      ISETP.LT.AND P5, PT, R5, -128, P0 ?W2;                 // ISETP.LT.AND P5, PT, diffContiguousA, -128, P0
      ISETP.LT.AND P6, PT, R5, -192, P0 ?W4;                 // ISETP.LT.AND P6, PT, diffContiguousA, -192, P0
      P2R.B0 R147, PR, RZ, 0x78 ?W2;                         // P2R.B0 predStorage0, PR, RZ, 0x78
      ISETP.LT P0, R17, -32 ?W4;                             // ISETP.LT P0, diffCrosswiseA, -32
      ISETP.LT.AND P3, PT, R5, 0, P0 ?W2;                    // ISETP.LT.AND P3, PT, diffContiguousA, 0, P0
      ISETP.LT.AND P4, PT, R5, -64, P0 ?W2;                  // ISETP.LT.AND P4, PT, diffContiguousA, -64, P0
      ISETP.LT.AND P5, PT, R5, -128, P0 ?W2;                 // ISETP.LT.AND P5, PT, diffContiguousA, -128, P0
      ISETP.LT.AND P6, PT, R5, -192, P0 ?W4;                 // ISETP.LT.AND P6, PT, diffContiguousA, -192, P0
      P2R.B1 R147, PR, R147, 0x78 ?W2;                       // P2R.B1 predStorage0, PR, predStorage0, 0x78
      IADD R18, R11, -R148 ?W4;                              // IADD diffCrosswiseB, crosswiseIdB, -counterK
      ISETP.LT P0, R18, 0 ?W4;                               // ISETP.LT P0, diffCrosswiseB, 0
      ISETP.LT.AND P3, PT, R16, 0, P0 ?W2;                   // ISETP.LT.AND P3, PT, diffContiguousB, 0, P0
      ISETP.LT.AND P4, PT, R16, -64, P0 ?W2;                 // ISETP.LT.AND P4, PT, diffContiguousB, -64, P0
      ISETP.LT P0, R18, -32 ?W4;                             // ISETP.LT P0, diffCrosswiseB, -32
      ISETP.LT.AND P5, PT, R16, 0, P0 ?W2;                   // ISETP.LT.AND P5, PT, diffContiguousB, 0, P0
      ISETP.LT.AND P6, PT, R16, -64, P0 ?W4;                 // ISETP.LT.AND P6, PT, diffContiguousB, -64, P0
      P2R.B2 R147, PR, R147, 0x78 ?W2;                       // P2R.B2 predStorage0, PR, predStorage0, 0x78
      MOV R19, RZ ?W2;                                       // MOV countRollingStage, RZ
      MOV R150, 128 ?W5;                                     // MOV globalAddressOffsetA, 128
      IMAD.WIDE.U32 R150, R150, c[0][0x1bc], RZ ?W5;         // IMAD.WIDE.U32 globalAddressOffsetA, globalAddressOffsetA, CountM, RZ
      MOV R152, 128 ?W5;                                     // MOV globalAddressOffsetB, 128
      IMAD.WIDE.U32 R152, R152, c[0][0x1c0], RZ ?W5;         // IMAD.WIDE.U32 globalAddressOffsetB, globalAddressOffsetB, CountN, RZ
      ISETP.LE P0, R1, RZ ?W2;                               // ISETP.LE P0, countResidueK, RZ
      ULDC UR5, c[0][0x200] ?W2;                             // ULDC urdDescriptor_UA1, urdDescriptorA
      ULDC UR7, c[0][0x204] ?W2;                             // ULDC urdDescriptor_UB1, urdDescriptorB
      UMOV UR8, URZ ?W2;                                     // UMOV smemBaseRead_U, URZ
      UMOV UR4, URZ ?W2;                                     // UMOV urdDescriptor_UA0, URZ
      UMOV UR6, URZ ?W2;                                     // UMOV urdDescriptor_UB0, URZ
      UISETP.LT UP0, UR8, 0x18000 ?W2;                       // UISETP.LT UP0, smemBaseRead_U, 0x18000
      UISETP.LT UP1, UR4, 0x18000 ?W2;                       // UISETP.LT UP1, urdDescriptor_UA0, 0x18000
(P0)  BRA.U ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_START_LDG ?W5; // @P0 BRA.U ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_START_LDG
      SHR R2, R148, 6 ?W5;                                   // SHR kCount, counterK, 6
      IMAD.WIDE.U32 R20, R2, R150, R130 ?W5;                 // IMAD.WIDE.U32 residueGlobalPtrA, kCount, globalAddressOffsetA, readPtrA0
      IMAD.WIDE.U32 R22, R2, R152, R134 ?W5;                 // IMAD.WIDE.U32 residueGlobalPtrB, kCount, globalAddressOffsetB, readPtrB0
      IADD   R132, P2, R20,   c[0][0x178] ?W4;               // IADD readPtrA1, predCarry, residueGlobalPtrA, IncFastA
      IADD.X R133,         R21, c[0][0x17c], P2 ?W2;         // IADD.X readPtrA1_HI, residueGlobalPtrA_HI, IncFastA_HI, predCarry
      IADD   R136, P2, R22,   c[0][0x180] ?W4;               // IADD readPtrB1, predCarry, residueGlobalPtrB, IncFastB
      IADD.X R137,         R23, c[0][0x184], P2 ?W2;         // IADD.X readPtrB1_HI, residueGlobalPtrB_HI, IncFastB_HI, predCarry
      R2P PR, R0.B0, 0x78 ?W13EG;                            // R2P PR, predStorageResidue0.B0, 0x78
      LDGSTS.E.BYPASS.EN.LTC128B.128.CONSTANT [R129 + UR4 + 0x0], desc[UR5][R20.64 + 0x0], P3 &rd=5 ?W2; // LDGSTS.E.BYPASS.EN.LTC128B.128.CONSTANT [sharedWriteA + urdDescriptor_UA0 + 0x0], desc[urdDescriptor_UA1][residueGlobalPtrA.64 + 0x0], P3
      LDGSTS.E.BYPASS.EN.LTC128B.128.CONSTANT [R129 + UR4 + 0x2000], desc[UR5][R20.64 + 0x80], P4 &rd=5 ?W2; // LDGSTS.E.BYPASS.EN.LTC128B.128.CONSTANT [sharedWriteA + urdDescriptor_UA0 + 0x2000], desc[urdDescriptor_UA1][residueGlobalPtrA.64 + 0x80], P4
      LDGSTS.E.BYPASS.EN.LTC128B.128.CONSTANT [R129 + UR4 + 0x4000], desc[UR5][R20.64 + 0x100], P5 &rd=5 ?W2; // LDGSTS.E.BYPASS.EN.LTC128B.128.CONSTANT [sharedWriteA + urdDescriptor_UA0 + 0x4000], desc[urdDescriptor_UA1][residueGlobalPtrA.64 + 0x100], P5
      LDGSTS.E.BYPASS.EN.LTC128B.128.CONSTANT [R129 + UR4 + 0x6000], desc[UR5][R20.64 + 0x180], P6 &rd=5 ?W2; // LDGSTS.E.BYPASS.EN.LTC128B.128.CONSTANT [sharedWriteA + urdDescriptor_UA0 + 0x6000], desc[urdDescriptor_UA1][residueGlobalPtrA.64 + 0x180], P6
      R2P PR, R0.B1, 0x78 ?W13EG;                            // R2P PR, predStorageResidue0.B1, 0x78
      LDGSTS.E.BYPASS.EN.LTC128B.128.CONSTANT [R129 + UR4 + 0x1000], desc[UR5][R132.64 + 0x0], P3 &rd=5 ?W2; // LDGSTS.E.BYPASS.EN.LTC128B.128.CONSTANT [sharedWriteA + urdDescriptor_UA0 + 0x1000], desc[urdDescriptor_UA1][readPtrA1.64 + 0x0], P3
      LDGSTS.E.BYPASS.EN.LTC128B.128.CONSTANT [R129 + UR4 + 0x3000], desc[UR5][R132.64 + 0x80], P4 &rd=5 ?W2; // LDGSTS.E.BYPASS.EN.LTC128B.128.CONSTANT [sharedWriteA + urdDescriptor_UA0 + 0x3000], desc[urdDescriptor_UA1][readPtrA1.64 + 0x80], P4
      LDGSTS.E.BYPASS.EN.LTC128B.128.CONSTANT [R129 + UR4 + 0x5000], desc[UR5][R132.64 + 0x100], P5 &rd=5 ?W2; // LDGSTS.E.BYPASS.EN.LTC128B.128.CONSTANT [sharedWriteA + urdDescriptor_UA0 + 0x5000], desc[urdDescriptor_UA1][readPtrA1.64 + 0x100], P5
      LDGSTS.E.BYPASS.EN.LTC128B.128.CONSTANT [R129 + UR4 + 0x7000], desc[UR5][R132.64 + 0x180], P6 &rd=5 ?W2; // LDGSTS.E.BYPASS.EN.LTC128B.128.CONSTANT [sharedWriteA + urdDescriptor_UA0 + 0x7000], desc[urdDescriptor_UA1][readPtrA1.64 + 0x180], P6
      R2P PR, R0.B2, 0x78 ?W13EG;                            // R2P PR, predStorageResidue0.B2, 0x78
      LDGSTS.E.BYPASS.EN.LTC128B.128.CONSTANT [R138 + UR6 + 0x0], desc[UR7][R22.64 + 0x0], P3 &rd=3 ?W2; // LDGSTS.E.BYPASS.EN.LTC128B.128.CONSTANT [sharedWriteB + urdDescriptor_UB0 + 0x0], desc[urdDescriptor_UB1][residueGlobalPtrB.64 + 0x0], P3
      LDGSTS.E.BYPASS.EN.LTC128B.128.CONSTANT [R138 + UR6 + 0x2000], desc[UR7][R22.64 + 0x80], P4 &rd=3 ?W2; // LDGSTS.E.BYPASS.EN.LTC128B.128.CONSTANT [sharedWriteB + urdDescriptor_UB0 + 0x2000], desc[urdDescriptor_UB1][residueGlobalPtrB.64 + 0x80], P4
      LDGSTS.E.BYPASS.EN.LTC128B.128.CONSTANT [R138 + UR6 + 0x1000], desc[UR7][R136.64 + 0x0], P5 &rd=3 ?W2; // LDGSTS.E.BYPASS.EN.LTC128B.128.CONSTANT [sharedWriteB + urdDescriptor_UB0 + 0x1000], desc[urdDescriptor_UB1][readPtrB1.64 + 0x0], P5
      LDGSTS.E.BYPASS.EN.LTC128B.128.CONSTANT [R138 + UR6 + 0x3000], desc[UR7][R136.64 + 0x80], P6 &rd=3 ?W2; // LDGSTS.E.BYPASS.EN.LTC128B.128.CONSTANT [sharedWriteB + urdDescriptor_UB0 + 0x3000], desc[urdDescriptor_UB1][readPtrB1.64 + 0x80], P6
      LDGDEPBAR &wr=0 ?W1;                                   // LDGDEPBAR &wr=SB_LDG_WR ?WeT
      @UP1 UIADD3 UR4, UR4, 0xc000, URZ ?W2;                 // @UP1 UIADD3 urdDescriptor_UA0, urdDescriptor_UA0, 0xc000, URZ
      @!UP1 UMOV UR4, URZ ?W2;                               // @!UP1 UMOV urdDescriptor_UA0, URZ
      UISETP.LT UP1, UR4, 0x18000 ?W2;                       // UISETP.LT UP1, urdDescriptor_UA0, 0x18000
      UMOV UR6, UR4 ?W2;                                     // UMOV urdDescriptor_UB0, urdDescriptor_UA0
      ISETP.GT P0, R148, R1 ?W9;                             // ISETP.GT P0, counterK, countResidueK
      IADD R148, R148, -R1 ?W2;                              // IADD counterK, counterK, -countResidueK
      IADD R19, R19, 1 ?W4;                                  // IADD countRollingStage, countRollingStage, 1
ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_START_LDG:
      IADD   R132, P2, R130,   c[0][0x178] &req=5 ?W4;       // IADD readPtrA1, predCarry, readPtrA0, IncFastA
      IADD.X R133,         R131, c[0][0x17c], P2 ?W2;        // IADD.X readPtrA1_HI, readPtrA0_HI, IncFastA_HI, predCarry
      IADD   R136, P2, R134,   c[0][0x180] &req=3 ?W4;       // IADD readPtrB1, predCarry, readPtrB0, IncFastB
      IADD.X R137,         R135, c[0][0x184], P2 ?W2;        // IADD.X readPtrB1_HI, readPtrB0_HI, IncFastB_HI, predCarry
ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_ROLL_PROLOG:
(!P0) MOV  R147, RZ ?W4;                                     // @!P0 MOV predStorage0, RZ
      R2P PR, R147.B0, 0x78 ?W13EG;                          // R2P PR, predStorage0.B0, 0x78
      LDGSTS.E.BYPASS.EN.LTC128B.128.CONSTANT [R129 + UR4 + 0x0], desc[UR5][R130.64 + 0x0], P3 &rd=5 ?W2; // LDGSTS.E.BYPASS.EN.LTC128B.128.CONSTANT [sharedWriteA + urdDescriptor_UA0 + 0x0], desc[urdDescriptor_UA1][readPtrA0.64 + 0x0], P3
      LDGSTS.E.BYPASS.EN.LTC128B.128.CONSTANT [R129 + UR4 + 0x2000], desc[UR5][R130.64 + 0x80], P4 &rd=5 ?W2; // LDGSTS.E.BYPASS.EN.LTC128B.128.CONSTANT [sharedWriteA + urdDescriptor_UA0 + 0x2000], desc[urdDescriptor_UA1][readPtrA0.64 + 0x80], P4
      LDGSTS.E.BYPASS.EN.LTC128B.128.CONSTANT [R129 + UR4 + 0x4000], desc[UR5][R130.64 + 0x100], P5 &rd=5 ?W2; // LDGSTS.E.BYPASS.EN.LTC128B.128.CONSTANT [sharedWriteA + urdDescriptor_UA0 + 0x4000], desc[urdDescriptor_UA1][readPtrA0.64 + 0x100], P5
      LDGSTS.E.BYPASS.EN.LTC128B.128.CONSTANT [R129 + UR4 + 0x6000], desc[UR5][R130.64 + 0x180], P6 &rd=5 ?W2; // LDGSTS.E.BYPASS.EN.LTC128B.128.CONSTANT [sharedWriteA + urdDescriptor_UA0 + 0x6000], desc[urdDescriptor_UA1][readPtrA0.64 + 0x180], P6
      R2P PR, R147.B1, 0x78 ?W13EG;                          // R2P PR, predStorage0.B1, 0x78
      LDGSTS.E.BYPASS.EN.LTC128B.128.CONSTANT [R129 + UR4 + 0x1000], desc[UR5][R132.64 + 0x0], P3 &rd=5 ?W2; // LDGSTS.E.BYPASS.EN.LTC128B.128.CONSTANT [sharedWriteA + urdDescriptor_UA0 + 0x1000], desc[urdDescriptor_UA1][readPtrA1.64 + 0x0], P3
      LDGSTS.E.BYPASS.EN.LTC128B.128.CONSTANT [R129 + UR4 + 0x3000], desc[UR5][R132.64 + 0x80], P4 &rd=5 ?W2; // LDGSTS.E.BYPASS.EN.LTC128B.128.CONSTANT [sharedWriteA + urdDescriptor_UA0 + 0x3000], desc[urdDescriptor_UA1][readPtrA1.64 + 0x80], P4
      LDGSTS.E.BYPASS.EN.LTC128B.128.CONSTANT [R129 + UR4 + 0x5000], desc[UR5][R132.64 + 0x100], P5 &rd=5 ?W2; // LDGSTS.E.BYPASS.EN.LTC128B.128.CONSTANT [sharedWriteA + urdDescriptor_UA0 + 0x5000], desc[urdDescriptor_UA1][readPtrA1.64 + 0x100], P5
      LDGSTS.E.BYPASS.EN.LTC128B.128.CONSTANT [R129 + UR4 + 0x7000], desc[UR5][R132.64 + 0x180], P6 &rd=5 ?W2; // LDGSTS.E.BYPASS.EN.LTC128B.128.CONSTANT [sharedWriteA + urdDescriptor_UA0 + 0x7000], desc[urdDescriptor_UA1][readPtrA1.64 + 0x180], P6
      R2P PR, R147.B2, 0x78 ?W13EG;                          // R2P PR, predStorage0.B2, 0x78
      LDGSTS.E.BYPASS.EN.LTC128B.128.CONSTANT [R138 + UR6 + 0x0], desc[UR7][R134.64 + 0x0], P3 &rd=3 ?W2; // LDGSTS.E.BYPASS.EN.LTC128B.128.CONSTANT [sharedWriteB + urdDescriptor_UB0 + 0x0], desc[urdDescriptor_UB1][readPtrB0.64 + 0x0], P3
      LDGSTS.E.BYPASS.EN.LTC128B.128.CONSTANT [R138 + UR6 + 0x2000], desc[UR7][R134.64 + 0x80], P4 &rd=3 ?W2; // LDGSTS.E.BYPASS.EN.LTC128B.128.CONSTANT [sharedWriteB + urdDescriptor_UB0 + 0x2000], desc[urdDescriptor_UB1][readPtrB0.64 + 0x80], P4
      LDGSTS.E.BYPASS.EN.LTC128B.128.CONSTANT [R138 + UR6 + 0x1000], desc[UR7][R136.64 + 0x0], P5 &rd=3 ?W2; // LDGSTS.E.BYPASS.EN.LTC128B.128.CONSTANT [sharedWriteB + urdDescriptor_UB0 + 0x1000], desc[urdDescriptor_UB1][readPtrB1.64 + 0x0], P5
      LDGSTS.E.BYPASS.EN.LTC128B.128.CONSTANT [R138 + UR6 + 0x3000], desc[UR7][R136.64 + 0x80], P6 &rd=3 ?W2; // LDGSTS.E.BYPASS.EN.LTC128B.128.CONSTANT [sharedWriteB + urdDescriptor_UB0 + 0x3000], desc[urdDescriptor_UB1][readPtrB1.64 + 0x80], P6
      LDGDEPBAR &wr=0 ?W1;                                   // LDGDEPBAR &wr=SB_LDG_WR ?WeT
      @UP1 UIADD3 UR4, UR4, 0xc000, URZ ?W2;                 // @UP1 UIADD3 urdDescriptor_UA0, urdDescriptor_UA0, 0xc000, URZ
      @!UP1 UMOV UR4, URZ ?W2;                               // @!UP1 UMOV urdDescriptor_UA0, URZ
      UISETP.LT UP1, UR4, 0x18000 ?W2;                       // UISETP.LT UP1, urdDescriptor_UA0, 0x18000
      UMOV UR6, UR4 ?W2;                                     // UMOV urdDescriptor_UB0, urdDescriptor_UA0
      ISETP.GT P0, R148, 64 ?W7;                             // ISETP.GT P0, counterK, 64
      IADD R148, R148, -64 ?W2;                              // IADD counterK, counterK, -64
      IADD R19, R19, 1 ?W4;                                  // IADD countRollingStage, countRollingStage, 1
      ISETP.LT.AND P1, PT,  R19, 2, P0 ?W2;                  // ISETP.LT.AND P1, PT, countRollingStage, 2, P0
      IADD   R130, P2, R130,   R150 &req=5 ?W4;              // IADD readPtrA0, predCarry, readPtrA0, globalAddressOffsetA
      IADD.X R131,         R131, R151, P2 ?W2;               // IADD.X readPtrA0_HI, readPtrA0_HI, globalAddressOffsetA_HI, predCarry
      IADD   R132, P2, R132,   R150 &req=5 ?W4;              // IADD readPtrA1, predCarry, readPtrA1, globalAddressOffsetA
      IADD.X R133,         R133, R151, P2 ?W2;               // IADD.X readPtrA1_HI, readPtrA1_HI, globalAddressOffsetA_HI, predCarry
      IADD   R134, P2, R134,   R152 &req=3 ?W4;              // IADD readPtrB0, predCarry, readPtrB0, globalAddressOffsetB
      IADD.X R135,         R135, R153, P2 ?W2;               // IADD.X readPtrB0_HI, readPtrB0_HI, globalAddressOffsetB_HI, predCarry
      IADD   R136, P2, R136,   R152 &req=3 ?W4;              // IADD readPtrB1, predCarry, readPtrB1, globalAddressOffsetB
      IADD.X R137,         R137, R153, P2 ?W2;               // IADD.X readPtrB1_HI, readPtrB1_HI, globalAddressOffsetB_HI, predCarry
(P1)  BRA ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_ROLL_PROLOG ?W5; // @P1 BRA ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_ROLL_PROLOG
      ISETP.LT P0, R19, 2 ?W6;                               // ISETP.LT P0, countRollingStage, 2
      IADD R19, R19, -2 ?W5;                                 // IADD countRollingStage, countRollingStage, -2
      IMAD R148, R19, 64, R148 ?W2;                          // IMAD counterK, countRollingStage, 64, counterK
(!P0) BRA ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_NO_SKIP_ANY_STAGE ?W5; // @!P0 BRA ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_NO_SKIP_ANY_STAGE
ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_WRITE_SB:
      ISETP.LT P0, R19, -1 ?W10;                             // ISETP.LT P0, countRollingStage, -1
      IADD R19, R19, 1 ?W2;                                  // IADD countRollingStage, countRollingStage, 1
      LDGDEPBAR &wr=0 ?W1;                                   // LDGDEPBAR &wr=SB_LDG_WR ?WeT
(P0)  BRA ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_WRITE_SB ?W5; // @P0 BRA ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_WRITE_SB
ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_NO_SKIP_ANY_STAGE:
      ISETP.GT P0, R148, RZ ?W2;                             // ISETP.GT P0, counterK, RZ
      STS.128 [R129 + UR4 + 0x0], RZ ?W2;                    // STS.128 [sharedWriteA + urdDescriptor_UA0 + 0x0], RZ
      STS.128 [R129 + UR4 + 0x2000], RZ ?W2;                 // STS.128 [sharedWriteA + urdDescriptor_UA0 + 0x2000], RZ
      STS.128 [R129 + UR4 + 0x4000], RZ ?W2;                 // STS.128 [sharedWriteA + urdDescriptor_UA0 + 0x4000], RZ
      STS.128 [R129 + UR4 + 0x6000], RZ ?W2;                 // STS.128 [sharedWriteA + urdDescriptor_UA0 + 0x6000], RZ
      STS.128 [R129 + UR4 + 0x1000], RZ ?W2;                 // STS.128 [sharedWriteA + urdDescriptor_UA0 + 0x1000], RZ
      STS.128 [R129 + UR4 + 0x3000], RZ ?W2;                 // STS.128 [sharedWriteA + urdDescriptor_UA0 + 0x3000], RZ
      STS.128 [R129 + UR4 + 0x5000], RZ ?W2;                 // STS.128 [sharedWriteA + urdDescriptor_UA0 + 0x5000], RZ
      STS.128 [R129 + UR4 + 0x7000], RZ ?W2;                 // STS.128 [sharedWriteA + urdDescriptor_UA0 + 0x7000], RZ
      STS.128 [R138 + UR6 + 0x0], RZ ?W2;                    // STS.128 [sharedWriteB + urdDescriptor_UB0 + 0x0], RZ
      STS.128 [R138 + UR6 + 0x2000], RZ ?W2;                 // STS.128 [sharedWriteB + urdDescriptor_UB0 + 0x2000], RZ
      STS.128 [R138 + UR6 + 0x1000], RZ ?W2;                 // STS.128 [sharedWriteB + urdDescriptor_UB0 + 0x1000], RZ
      STS.128 [R138 + UR6 + 0x3000], RZ ?W2;                 // STS.128 [sharedWriteB + urdDescriptor_UB0 + 0x3000], RZ
      CS2R.64  R0,   SRZ ?W2;                                // CS2R.64 R0, SRZ
      CS2R.64  R2,   SRZ ?W2;                                // CS2R.64 R2, SRZ
      CS2R.64  R4,   SRZ ?W2;                                // CS2R.64 R4, SRZ
      CS2R.64  R6,   SRZ ?W2;                                // CS2R.64 R6, SRZ
      CS2R.64  R8,   SRZ ?W2;                                // CS2R.64 R8, SRZ
      CS2R.64  R10,  SRZ ?W2;                                // CS2R.64 R10, SRZ
      CS2R.64  R12,  SRZ ?W2;                                // CS2R.64 R12, SRZ
      CS2R.64  R14,  SRZ ?W2;                                // CS2R.64 R14, SRZ
      CS2R.64  R16,  SRZ ?W2;                                // CS2R.64 R16, SRZ
      CS2R.64  R18,  SRZ ?W2;                                // CS2R.64 R18, SRZ
      CS2R.64  R20,  SRZ ?W2;                                // CS2R.64 R20, SRZ
      CS2R.64  R22,  SRZ ?W2;                                // CS2R.64 R22, SRZ
      CS2R.64  R24,  SRZ ?W2;                                // CS2R.64 R24, SRZ
      CS2R.64  R26,  SRZ ?W2;                                // CS2R.64 R26, SRZ
      CS2R.64  R28,  SRZ ?W2;                                // CS2R.64 R28, SRZ
      CS2R.64  R30,  SRZ ?W2;                                // CS2R.64 R30, SRZ
      CS2R.64  R32,  SRZ ?W2;                                // CS2R.64 R32, SRZ
      CS2R.64  R34,  SRZ ?W2;                                // CS2R.64 R34, SRZ
      CS2R.64  R36,  SRZ ?W2;                                // CS2R.64 R36, SRZ
      CS2R.64  R38,  SRZ ?W2;                                // CS2R.64 R38, SRZ
      CS2R.64  R40,  SRZ ?W2;                                // CS2R.64 R40, SRZ
      CS2R.64  R42,  SRZ ?W2;                                // CS2R.64 R42, SRZ
      CS2R.64  R44,  SRZ ?W2;                                // CS2R.64 R44, SRZ
      CS2R.64  R46,  SRZ ?W2;                                // CS2R.64 R46, SRZ
      CS2R.64  R48,  SRZ ?W2;                                // CS2R.64 R48, SRZ
      CS2R.64  R50,  SRZ ?W2;                                // CS2R.64 R50, SRZ
      CS2R.64  R52,  SRZ ?W2;                                // CS2R.64 R52, SRZ
      CS2R.64  R54,  SRZ ?W2;                                // CS2R.64 R54, SRZ
      CS2R.64  R56,  SRZ ?W2;                                // CS2R.64 R56, SRZ
      CS2R.64  R58,  SRZ ?W2;                                // CS2R.64 R58, SRZ
      CS2R.64  R60,  SRZ ?W2;                                // CS2R.64 R60, SRZ
      CS2R.64  R62,  SRZ ?W2;                                // CS2R.64 R62, SRZ
      CS2R.64  R64,  SRZ ?W2;                                // CS2R.64 R64, SRZ
      CS2R.64  R66,  SRZ ?W2;                                // CS2R.64 R66, SRZ
      CS2R.64  R68,  SRZ ?W2;                                // CS2R.64 R68, SRZ
      CS2R.64  R70,  SRZ ?W2;                                // CS2R.64 R70, SRZ
      CS2R.64  R72,  SRZ ?W2;                                // CS2R.64 R72, SRZ
      CS2R.64  R74,  SRZ ?W2;                                // CS2R.64 R74, SRZ
      CS2R.64  R76,  SRZ ?W2;                                // CS2R.64 R76, SRZ
      CS2R.64  R78,  SRZ ?W2;                                // CS2R.64 R78, SRZ
      CS2R.64  R80,  SRZ ?W2;                                // CS2R.64 R80, SRZ
      CS2R.64  R82,  SRZ ?W2;                                // CS2R.64 R82, SRZ
      CS2R.64  R84,  SRZ ?W2;                                // CS2R.64 R84, SRZ
      CS2R.64  R86,  SRZ ?W2;                                // CS2R.64 R86, SRZ
      CS2R.64  R88,  SRZ ?W2;                                // CS2R.64 R88, SRZ
      CS2R.64  R90,  SRZ ?W2;                                // CS2R.64 R90, SRZ
      CS2R.64  R92,  SRZ ?W2;                                // CS2R.64 R92, SRZ
      CS2R.64  R94,  SRZ ?W2;                                // CS2R.64 R94, SRZ
      CS2R.64  R96,  SRZ ?W2;                                // CS2R.64 R96, SRZ
      CS2R.64  R98,  SRZ ?W2;                                // CS2R.64 R98, SRZ
      CS2R.64  R100, SRZ ?W2;                                // CS2R.64 R100, SRZ
      CS2R.64  R102, SRZ ?W2;                                // CS2R.64 R102, SRZ
      CS2R.64  R104, SRZ ?W2;                                // CS2R.64 R104, SRZ
      CS2R.64  R106, SRZ ?W2;                                // CS2R.64 R106, SRZ
      CS2R.64  R108, SRZ ?W2;                                // CS2R.64 R108, SRZ
      CS2R.64  R110, SRZ ?W2;                                // CS2R.64 R110, SRZ
      CS2R.64  R112, SRZ ?W2;                                // CS2R.64 R112, SRZ
      CS2R.64  R114, SRZ ?W2;                                // CS2R.64 R114, SRZ
      CS2R.64  R116, SRZ ?W2;                                // CS2R.64 R116, SRZ
      CS2R.64  R118, SRZ ?W2;                                // CS2R.64 R118, SRZ
      CS2R.64  R120, SRZ ?W2;                                // CS2R.64 R120, SRZ
      CS2R.64  R122, SRZ ?W2;                                // CS2R.64 R122, SRZ
      CS2R.64  R124, SRZ ?W2;                                // CS2R.64 R124, SRZ
      CS2R.64  R126, SRZ ?W2;                                // CS2R.64 R126, SRZ
      SHR      R157, R149, 5 ?W4;                            // SHR warpId, tidx, 5
      LOP.AND  R158, R157, 0x3 ?W2;                          // LOP.AND warpIdx, warpId, 0x3
      SHR      R162, R157, 2 ?W4;                            // SHR warpIdy, warpId, 2
      SHR     R163, R162, 1 ?W3;                             // SHR sliceIdy, warpIdy, 1
      LOP.AND R164, R162, 1 ?W2;                             // LOP.AND warpIdyPerSlice, warpIdy, 1
      IMAD.LO R163, R163, 0x2000, RZ ?W5;                    // IMAD.LO sliceIdy, sliceIdy, 0x2000, RZ
      LOP.AND  R166, R149, 0x1F ?W4;                         // LOP.AND thRowId, tidx, 0x1F
      SHR     R167, R166, 0x4 ?W2;                           // SHR offset, thRowId, 0x4
      LOP.AND R165, R166, 0x7 ?W2;                           // LOP.AND thColId, thRowId, 0x7
      LOP.AND R166, R166, 0xf ?W2;                           // LOP.AND thRowId, thRowId, 0xf
      LEA     R165, R167, R165, 0x3 ?W2;                     // LEA thColId, offset, thColId, 0x3
      SHR  R166, R166, 0x3 ?W2;                              // SHR thRowId, thRowId, 0x3
      SHL      R167, R165, 7 ?W2;                            // SHL offset, thColId, 7
      LOP.AND R165, R149, 0x7 ?W4;                           // LOP.AND thColId, tidx, 0x7
      LOP.XOR  R166, R165, R166 ?W4;                         // LOP.XOR thRowId, thColId, thRowId
      IMAD.LO  R167, R158, 0x2000, R167 ?W5;                 // IMAD.LO offset, warpIdx, 0x2000, offset
      LEA      R139, R166, R167, 4 ?W4;                      // LEA sharedA0, thRowId, offset, 4
      LOP.XOR  R140, R139, 0x20 ?W4;                         // LOP.XOR sharedA1, sharedA0, 0x20
      LOP.XOR  R141, R139, 0x40 ?W4;                         // LOP.XOR sharedA2, sharedA0, 0x40
      LOP.XOR  R142, R141, 0x20 ?W4;                         // LOP.XOR sharedA3, sharedA2, 0x20
      SHR      R157, R149, 5 ?W4;                            // SHR warpId, tidx, 5
      LOP.AND  R158, R157, 0x3 ?W2;                          // LOP.AND warpIdx, warpId, 0x3
      SHR      R162, R157, 2 ?W4;                            // SHR warpIdy, warpId, 2
      SHR     R163, R162, 1 ?W3;                             // SHR sliceIdy, warpIdy, 1
      LOP.AND R164, R162, 1 ?W2;                             // LOP.AND warpIdyPerSlice, warpIdy, 1
      IMAD.LO R163, R163, 0x2000, RZ ?W5;                    // IMAD.LO sliceIdy, sliceIdy, 0x2000, RZ
      LOP.AND  R166, R149, 0x1F ?W4;                         // LOP.AND thRowId, tidx, 0x1F
      LOP.AND R165, R166, 0xf ?W2;                           // LOP.AND thColId, thRowId, 0xf
      SHR  R166, R166, 0x4 ?W2;                              // SHR thRowId, thRowId, 0x4
      SHL      R167, R165, 7 ?W2;                            // SHL offset, thColId, 7
      LOP.AND R165, R149, 0x7 ?W4;                           // LOP.AND thColId, tidx, 0x7
      LOP.XOR  R166, R165, R166 ?W4;                         // LOP.XOR thRowId, thColId, thRowId
      IMAD.LO  R167, R164, 0x2000, R167 ?W5;                 // IMAD.LO offset, warpIdyPerSlice, 0x2000, offset
      LEA      R143, R166, R167, 4 ?W4;                      // LEA sharedB0, thRowId, offset, 4
      LOP.XOR  R144, R143, 0x20 ?W4;                         // LOP.XOR sharedB1, sharedB0, 0x20
      LOP.XOR  R145, R143, 0x40 ?W4;                         // LOP.XOR sharedB2, sharedB0, 0x40
      LOP.XOR  R146, R145, 0x20 ?W4;                         // LOP.XOR sharedB3, sharedB2, 0x20
      DEPBAR.LE SB0, 1 ?W5;                                  // DEPBAR.LE SBSB_LDG_WR, 1
      BAR.SYNC.DEFER_BLOCKING 0 ?W6;                         // BAR.SYNC.DEFER_BLOCKING 0
(!P0) MOV  R147, RZ ?W4;                                     // @!P0 MOV predStorage0, RZ
      R2P PR, R147.B0, 0x78 ?W13EG;                          // R2P PR, predStorage0.B0, 0x78
      LDGSTS.E.BYPASS.EN.LTC128B.128.CONSTANT [R129 + UR4 + 0x0], desc[UR5][R130.64 + 0x0], P3 &rd=5 ?W2 ?BARRIER_EXEMPT; // LDGSTS.E.BYPASS.EN.LTC128B.128.CONSTANT [sharedWriteA + urdDescriptor_UA0 + 0x0], desc[urdDescriptor_UA1][readPtrA0.64 + 0x0], P3
      LDGSTS.E.BYPASS.EN.LTC128B.128.CONSTANT [R129 + UR4 + 0x2000], desc[UR5][R130.64 + 0x80], P4 &rd=5 ?W2 ?BARRIER_EXEMPT; // LDGSTS.E.BYPASS.EN.LTC128B.128.CONSTANT [sharedWriteA + urdDescriptor_UA0 + 0x2000], desc[urdDescriptor_UA1][readPtrA0.64 + 0x80], P4
      LDGSTS.E.BYPASS.EN.LTC128B.128.CONSTANT [R129 + UR4 + 0x4000], desc[UR5][R130.64 + 0x100], P5 &rd=5 ?W2 ?BARRIER_EXEMPT; // LDGSTS.E.BYPASS.EN.LTC128B.128.CONSTANT [sharedWriteA + urdDescriptor_UA0 + 0x4000], desc[urdDescriptor_UA1][readPtrA0.64 + 0x100], P5
// Virtual ?REQ_BAR found on next instruction, stop putting ?BARRIER_EXEMPT on decoupled instructions
      LDSM.16.MT88.4 R156, [R139 + UR8 + 0x0] &wr=4 ?W2;     // LDSM.16.MT88.4 A_r0_k0, [sharedA0 + smemBaseRead_U + 0x0]
      LDSM.16.MT88.4 R160, [R140 + UR8 + 0x0] &wr=4 ?W2;     // LDSM.16.MT88.4 A_r2_k0, [sharedA1 + smemBaseRead_U + 0x0]
      LDSM.16.MT88.4 R164, [R141 + UR8 + 0x0] &wr=4 ?W2;     // LDSM.16.MT88.4 A_r4_k0, [sharedA2 + smemBaseRead_U + 0x0]
      LDSM.16.MT88.4 R168, [R142 + UR8 + 0x0] &wr=4 ?W2;     // LDSM.16.MT88.4 A_r6_k0, [sharedA3 + smemBaseRead_U + 0x0]
      LDSM.16.MT88.4 R188, [R143 + UR8 + 0x8000] &wr=4 ?W2;  // LDSM.16.MT88.4 B_c0_k0, [sharedB0 + smemBaseRead_U + 0x8000]
      LDSM.16.MT88.4 R192, [R144 + UR8 + 0x8000] &wr=4 ?W2;  // LDSM.16.MT88.4 B_c2_k0, [sharedB1 + smemBaseRead_U + 0x8000]
      LDSM.16.MT88.4 R196, [R145 + UR8 + 0x8000] &wr=4 ?W2;  // LDSM.16.MT88.4 B_c4_k0, [sharedB2 + smemBaseRead_U + 0x8000]
      LDSM.16.MT88.4 R200, [R146 + UR8 + 0x8000] &wr=4 ?W2;  // LDSM.16.MT88.4 B_c6_k0, [sharedB3 + smemBaseRead_U + 0x8000]
ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_LOOP:
      HMMA.16816.F32 R0, R156.reuse, R188, R0 &req={4,4} ?W2; // HMMA.16816.F32 C_r0_c0, A_r0_k0.reuse, B_c0_k0, C_r0_c0
      LDSM.16.MT88.4 R172, [R139 + UR8 + 0x800] &wr=4 ?W2;   // LDSM.16.MT88.4 A_r0_k2, [sharedA0 + smemBaseRead_U + 0x800]
(P6)  LDGSTS.E.BYPASS.EN.LTC128B.128.CONSTANT [R129 + UR4 + 0x6000], desc[UR5][R130.64 + 0x180] &rd=5 ?W2; // @P6 LDGSTS.E.BYPASS.EN.LTC128B.128.CONSTANT [sharedWriteA + urdDescriptor_UA0 + 0x6000], desc[urdDescriptor_UA1][readPtrA0.64 + 0x180]
      R2P PR, R147.B1, 0x78 ?W2;                             // R2P PR, predStorage0.B1, 0x78
      HMMA.16816.F32 R4, R156.reuse, R190, R4 ?W8;           // HMMA.16816.F32 C_r0_c2, A_r0_k0.reuse, B_c1_k0, C_r0_c2
      HMMA.16816.F32 R8, R156.reuse, R192, R8 ?W2;           // HMMA.16816.F32 C_r0_c4, A_r0_k0.reuse, B_c2_k0, C_r0_c4
      LDSM.16.MT88.4 R176, [R140 + UR8 + 0x800] &wr=4 ?W6;   // LDSM.16.MT88.4 A_r2_k2, [sharedA1 + smemBaseRead_U + 0x800]
      HMMA.16816.F32 R12, R156.reuse, R194, R12 ?W8;         // HMMA.16816.F32 C_r0_c6, A_r0_k0.reuse, B_c3_k0, C_r0_c6
      HMMA.16816.F32 R16, R156.reuse, R196, R16 ?W2;         // HMMA.16816.F32 C_r0_c8, A_r0_k0.reuse, B_c4_k0, C_r0_c8
      LDSM.16.MT88.4 R180, [R141 + UR8 + 0x800] &wr=4 ?W6;   // LDSM.16.MT88.4 A_r4_k2, [sharedA2 + smemBaseRead_U + 0x800]
      HMMA.16816.F32 R20, R156.reuse, R198, R20 ?W8;         // HMMA.16816.F32 C_r0_c10, A_r0_k0.reuse, B_c5_k0, C_r0_c10
      HMMA.16816.F32 R24, R156.reuse, R200, R24 ?W2;         // HMMA.16816.F32 C_r0_c12, A_r0_k0.reuse, B_c6_k0, C_r0_c12
      LDSM.16.MT88.4 R184, [R142 + UR8 + 0x800] &wr=4 ?W6;   // LDSM.16.MT88.4 A_r6_k2, [sharedA3 + smemBaseRead_U + 0x800]
      HMMA.16816.F32 R28, R156, R202.reuse, R28 ?W8;         // HMMA.16816.F32 C_r0_c14, A_r0_k0, B_c7_k0.reuse, C_r0_c14
      HMMA.16816.F32 R60, R160.reuse, R202, R60 ?W2;         // HMMA.16816.F32 C_r2_c14, A_r2_k0.reuse, B_c7_k0, C_r2_c14
      LDSM.16.MT88.4 R204, [R143 + UR8 + 0x8800] &wr=4 ?W6;  // LDSM.16.MT88.4 B_c0_k2, [sharedB0 + smemBaseRead_U + 0x8800]
      HMMA.16816.F32 R56, R160.reuse, R200, R56 ?W8;         // HMMA.16816.F32 C_r2_c12, A_r2_k0.reuse, B_c6_k0, C_r2_c12
      HMMA.16816.F32 R52, R160.reuse, R198, R52 ?W2;         // HMMA.16816.F32 C_r2_c10, A_r2_k0.reuse, B_c5_k0, C_r2_c10
      LDSM.16.MT88.4 R208, [R144 + UR8 + 0x8800] &wr=4 ?W6;  // LDSM.16.MT88.4 B_c2_k2, [sharedB1 + smemBaseRead_U + 0x8800]
      HMMA.16816.F32 R48, R160.reuse, R196, R48 ?W2;         // HMMA.16816.F32 C_r2_c8, A_r2_k0.reuse, B_c4_k0, C_r2_c8
(P3)  LDGSTS.E.BYPASS.EN.LTC128B.128.CONSTANT [R129 + UR4 + 0x1000], desc[UR5][R132.64 + 0x0] &rd=5 ?W6; // @P3 LDGSTS.E.BYPASS.EN.LTC128B.128.CONSTANT [sharedWriteA + urdDescriptor_UA0 + 0x1000], desc[urdDescriptor_UA1][readPtrA1.64 + 0x0]
      HMMA.16816.F32 R44, R160.reuse, R194, R44 ?W2;         // HMMA.16816.F32 C_r2_c6, A_r2_k0.reuse, B_c3_k0, C_r2_c6
      LDSM.16.MT88.4 R212, [R145 + UR8 + 0x8800] &wr=4 ?W6;  // LDSM.16.MT88.4 B_c4_k2, [sharedB2 + smemBaseRead_U + 0x8800]
      HMMA.16816.F32 R40, R160.reuse, R192, R40 ?W8;         // HMMA.16816.F32 C_r2_c4, A_r2_k0.reuse, B_c2_k0, C_r2_c4
      HMMA.16816.F32 R36, R160.reuse, R190, R36 ?W2;         // HMMA.16816.F32 C_r2_c2, A_r2_k0.reuse, B_c1_k0, C_r2_c2
      LDSM.16.MT88.4 R216, [R146 + UR8 + 0x8800] &wr=4 ?W6;  // LDSM.16.MT88.4 B_c6_k2, [sharedB3 + smemBaseRead_U + 0x8800]
      HMMA.16816.F32 R32, R160, R188.reuse, R32 ?W8;         // HMMA.16816.F32 C_r2_c0, A_r2_k0, B_c0_k0.reuse, C_r2_c0
      HMMA.16816.F32 R64, R164.reuse, R188, R64 ?W8;         // HMMA.16816.F32 C_r4_c0, A_r4_k0.reuse, B_c0_k0, C_r4_c0
      HMMA.16816.F32 R68, R164.reuse, R190, R68 ?W8;         // HMMA.16816.F32 C_r4_c2, A_r4_k0.reuse, B_c1_k0, C_r4_c2
      HMMA.16816.F32 R72, R164.reuse, R192, R72 ?W8;         // HMMA.16816.F32 C_r4_c4, A_r4_k0.reuse, B_c2_k0, C_r4_c4
      HMMA.16816.F32 R76, R164.reuse, R194, R76 ?W8;         // HMMA.16816.F32 C_r4_c6, A_r4_k0.reuse, B_c3_k0, C_r4_c6
      HMMA.16816.F32 R80, R164.reuse, R196, R80 ?W8;         // HMMA.16816.F32 C_r4_c8, A_r4_k0.reuse, B_c4_k0, C_r4_c8
      HMMA.16816.F32 R84, R164.reuse, R198, R84 ?W2;         // HMMA.16816.F32 C_r4_c10, A_r4_k0.reuse, B_c5_k0, C_r4_c10
(P4)  LDGSTS.E.BYPASS.EN.LTC128B.128.CONSTANT [R129 + UR4 + 0x3000], desc[UR5][R132.64 + 0x80] &rd=5 ?W6; // @P4 LDGSTS.E.BYPASS.EN.LTC128B.128.CONSTANT [sharedWriteA + urdDescriptor_UA0 + 0x3000], desc[urdDescriptor_UA1][readPtrA1.64 + 0x80]
      HMMA.16816.F32 R88, R164.reuse, R200, R88 ?W8;         // HMMA.16816.F32 C_r4_c12, A_r4_k0.reuse, B_c6_k0, C_r4_c12
      HMMA.16816.F32 R92, R164, R202.reuse, R92 ?W8;         // HMMA.16816.F32 C_r4_c14, A_r4_k0, B_c7_k0.reuse, C_r4_c14
      HMMA.16816.F32 R124, R168.reuse, R202, R124 ?W8;       // HMMA.16816.F32 C_r6_c14, A_r6_k0.reuse, B_c7_k0, C_r6_c14
      HMMA.16816.F32 R120, R168.reuse, R200, R120 ?W8;       // HMMA.16816.F32 C_r6_c12, A_r6_k0.reuse, B_c6_k0, C_r6_c12
      HMMA.16816.F32 R116, R168.reuse, R198, R116 ?W8;       // HMMA.16816.F32 C_r6_c10, A_r6_k0.reuse, B_c5_k0, C_r6_c10
      HMMA.16816.F32 R112, R168.reuse, R196, R112 ?W8;       // HMMA.16816.F32 C_r6_c8, A_r6_k0.reuse, B_c4_k0, C_r6_c8
      HMMA.16816.F32 R108, R168.reuse, R194, R108 ?W8;       // HMMA.16816.F32 C_r6_c6, A_r6_k0.reuse, B_c3_k0, C_r6_c6
      HMMA.16816.F32 R104, R168.reuse, R192, R104 ?W8;       // HMMA.16816.F32 C_r6_c4, A_r6_k0.reuse, B_c2_k0, C_r6_c4
      HMMA.16816.F32 R100, R168.reuse, R190, R100 ?W8;       // HMMA.16816.F32 C_r6_c2, A_r6_k0.reuse, B_c1_k0, C_r6_c2
      HMMA.16816.F32 R96, R168, R188, R96 &wr=4 ?W2EG;       // HMMA.16816.F32 C_r6_c0, A_r6_k0, B_c0_k0, C_r6_c0
(P5)  LDGSTS.E.BYPASS.EN.LTC128B.128.CONSTANT [R129 + UR4 + 0x5000], desc[UR5][R132.64 + 0x100] &rd=5 ?W6; // @P5 LDGSTS.E.BYPASS.EN.LTC128B.128.CONSTANT [sharedWriteA + urdDescriptor_UA0 + 0x5000], desc[urdDescriptor_UA1][readPtrA1.64 + 0x100]
      HMMA.16816.F32 R0, R172.reuse, R204, R0 &req={4,4} ?W2; // HMMA.16816.F32 C_r0_c0, A_r0_k2.reuse, B_c0_k2, C_r0_c0
      LDSM.16.MT88.4 R156, [R139 + UR8 + 0x1000] &wr=4 ?W6;  // LDSM.16.MT88.4 A_r0_k0, [sharedA0 + smemBaseRead_U + 0x1000]
      HMMA.16816.F32 R4, R172.reuse, R206, R4 ?W8;           // HMMA.16816.F32 C_r0_c2, A_r0_k2.reuse, B_c1_k2, C_r0_c2
      HMMA.16816.F32 R8, R172.reuse, R208, R8 ?W2;           // HMMA.16816.F32 C_r0_c4, A_r0_k2.reuse, B_c2_k2, C_r0_c4
      LDSM.16.MT88.4 R160, [R140 + UR8 + 0x1000] &wr=4 ?W6;  // LDSM.16.MT88.4 A_r2_k0, [sharedA1 + smemBaseRead_U + 0x1000]
      HMMA.16816.F32 R12, R172.reuse, R210, R12 ?W8;         // HMMA.16816.F32 C_r0_c6, A_r0_k2.reuse, B_c3_k2, C_r0_c6
      HMMA.16816.F32 R16, R172.reuse, R212, R16 ?W2;         // HMMA.16816.F32 C_r0_c8, A_r0_k2.reuse, B_c4_k2, C_r0_c8
      LDSM.16.MT88.4 R164, [R141 + UR8 + 0x1000] &wr=4 ?W6;  // LDSM.16.MT88.4 A_r4_k0, [sharedA2 + smemBaseRead_U + 0x1000]
      HMMA.16816.F32 R20, R172.reuse, R214, R20 ?W8;         // HMMA.16816.F32 C_r0_c10, A_r0_k2.reuse, B_c5_k2, C_r0_c10
      HMMA.16816.F32 R24, R172.reuse, R216, R24 ?W2;         // HMMA.16816.F32 C_r0_c12, A_r0_k2.reuse, B_c6_k2, C_r0_c12
      LDSM.16.MT88.4 R168, [R142 + UR8 + 0x1000] &wr=4 ?W6;  // LDSM.16.MT88.4 A_r6_k0, [sharedA3 + smemBaseRead_U + 0x1000]
      HMMA.16816.F32 R28, R172, R218.reuse, R28 ?W8;         // HMMA.16816.F32 C_r0_c14, A_r0_k2, B_c7_k2.reuse, C_r0_c14
      HMMA.16816.F32 R60, R176.reuse, R218, R60 ?W2;         // HMMA.16816.F32 C_r2_c14, A_r2_k2.reuse, B_c7_k2, C_r2_c14
      LDSM.16.MT88.4 R188, [R143 + UR8 + 0x9000] &wr=4 ?W6;  // LDSM.16.MT88.4 B_c0_k0, [sharedB0 + smemBaseRead_U + 0x9000]
      HMMA.16816.F32 R56, R176.reuse, R216, R56 ?W2;         // HMMA.16816.F32 C_r2_c12, A_r2_k2.reuse, B_c6_k2, C_r2_c12
(P6)  LDGSTS.E.BYPASS.EN.LTC128B.128.CONSTANT [R129 + UR4 + 0x7000], desc[UR5][R132.64 + 0x180] &rd=5 ?W2; // @P6 LDGSTS.E.BYPASS.EN.LTC128B.128.CONSTANT [sharedWriteA + urdDescriptor_UA0 + 0x7000], desc[urdDescriptor_UA1][readPtrA1.64 + 0x180]
      R2P PR, R147.B2, 0x78 ?W4;                             // R2P PR, predStorage0.B2, 0x78
      HMMA.16816.F32 R52, R176.reuse, R214, R52 ?W2;         // HMMA.16816.F32 C_r2_c10, A_r2_k2.reuse, B_c5_k2, C_r2_c10
      LDSM.16.MT88.4 R192, [R144 + UR8 + 0x9000] &wr=4 ?W6;  // LDSM.16.MT88.4 B_c2_k0, [sharedB1 + smemBaseRead_U + 0x9000]
      HMMA.16816.F32 R48, R176.reuse, R212, R48 ?W8;         // HMMA.16816.F32 C_r2_c8, A_r2_k2.reuse, B_c4_k2, C_r2_c8
      HMMA.16816.F32 R44, R176.reuse, R210, R44 ?W2;         // HMMA.16816.F32 C_r2_c6, A_r2_k2.reuse, B_c3_k2, C_r2_c6
      LDSM.16.MT88.4 R196, [R145 + UR8 + 0x9000] &wr=4 ?W6;  // LDSM.16.MT88.4 B_c4_k0, [sharedB2 + smemBaseRead_U + 0x9000]
      HMMA.16816.F32 R40, R176.reuse, R208, R40 ?W8;         // HMMA.16816.F32 C_r2_c4, A_r2_k2.reuse, B_c2_k2, C_r2_c4
      HMMA.16816.F32 R36, R176.reuse, R206, R36 ?W2;         // HMMA.16816.F32 C_r2_c2, A_r2_k2.reuse, B_c1_k2, C_r2_c2
      LDSM.16.MT88.4 R200, [R146 + UR8 + 0x9000] &wr=4 ?W6;  // LDSM.16.MT88.4 B_c6_k0, [sharedB3 + smemBaseRead_U + 0x9000]
      HMMA.16816.F32 R32, R176, R204.reuse, R32 ?W8;         // HMMA.16816.F32 C_r2_c0, A_r2_k2, B_c0_k2.reuse, C_r2_c0
      HMMA.16816.F32 R64, R180.reuse, R204, R64 ?W8;         // HMMA.16816.F32 C_r4_c0, A_r4_k2.reuse, B_c0_k2, C_r4_c0
      HMMA.16816.F32 R68, R180.reuse, R206, R68 ?W8;         // HMMA.16816.F32 C_r4_c2, A_r4_k2.reuse, B_c1_k2, C_r4_c2
      HMMA.16816.F32 R72, R180.reuse, R208, R72 ?W8;         // HMMA.16816.F32 C_r4_c4, A_r4_k2.reuse, B_c2_k2, C_r4_c4
      HMMA.16816.F32 R76, R180.reuse, R210, R76 ?W2;         // HMMA.16816.F32 C_r4_c6, A_r4_k2.reuse, B_c3_k2, C_r4_c6
(P3)  LDGSTS.E.BYPASS.EN.LTC128B.128.CONSTANT [R138 + UR6 + 0x0], desc[UR7][R134.64 + 0x0] &rd=3 ?W6; // @P3 LDGSTS.E.BYPASS.EN.LTC128B.128.CONSTANT [sharedWriteB + urdDescriptor_UB0 + 0x0], desc[urdDescriptor_UB1][readPtrB0.64 + 0x0]
      HMMA.16816.F32 R80, R180.reuse, R212, R80 ?W8;         // HMMA.16816.F32 C_r4_c8, A_r4_k2.reuse, B_c4_k2, C_r4_c8
      HMMA.16816.F32 R84, R180.reuse, R214, R84 ?W8;         // HMMA.16816.F32 C_r4_c10, A_r4_k2.reuse, B_c5_k2, C_r4_c10
      HMMA.16816.F32 R88, R180.reuse, R216, R88 ?W8;         // HMMA.16816.F32 C_r4_c12, A_r4_k2.reuse, B_c6_k2, C_r4_c12
      HMMA.16816.F32 R92, R180, R218.reuse, R92 ?W8;         // HMMA.16816.F32 C_r4_c14, A_r4_k2, B_c7_k2.reuse, C_r4_c14
      HMMA.16816.F32 R124, R184.reuse, R218, R124 ?W8;       // HMMA.16816.F32 C_r6_c14, A_r6_k2.reuse, B_c7_k2, C_r6_c14
      HMMA.16816.F32 R120, R184.reuse, R216, R120 ?W8;       // HMMA.16816.F32 C_r6_c12, A_r6_k2.reuse, B_c6_k2, C_r6_c12
      HMMA.16816.F32 R116, R184.reuse, R214, R116 ?W8;       // HMMA.16816.F32 C_r6_c10, A_r6_k2.reuse, B_c5_k2, C_r6_c10
      HMMA.16816.F32 R112, R184.reuse, R212, R112 ?W8;       // HMMA.16816.F32 C_r6_c8, A_r6_k2.reuse, B_c4_k2, C_r6_c8
      HMMA.16816.F32 R108, R184.reuse, R210, R108 ?W8;       // HMMA.16816.F32 C_r6_c6, A_r6_k2.reuse, B_c3_k2, C_r6_c6
      HMMA.16816.F32 R104, R184.reuse, R208, R104 ?W8;       // HMMA.16816.F32 C_r6_c4, A_r6_k2.reuse, B_c2_k2, C_r6_c4
      HMMA.16816.F32 R100, R184.reuse, R206, R100 ?W2;       // HMMA.16816.F32 C_r6_c2, A_r6_k2.reuse, B_c1_k2, C_r6_c2
(P4)  LDGSTS.E.BYPASS.EN.LTC128B.128.CONSTANT [R138 + UR6 + 0x2000], desc[UR7][R134.64 + 0x80] &rd=3 ?W6; // @P4 LDGSTS.E.BYPASS.EN.LTC128B.128.CONSTANT [sharedWriteB + urdDescriptor_UB0 + 0x2000], desc[urdDescriptor_UB1][readPtrB0.64 + 0x80]
      HMMA.16816.F32 R96, R184, R204, R96 &wr=4 ?W8EG;       // HMMA.16816.F32 C_r6_c0, A_r6_k2, B_c0_k2, C_r6_c0
      HMMA.16816.F32 R0, R156.reuse, R188, R0 &req={4,4} ?W2; // HMMA.16816.F32 C_r0_c0, A_r0_k0.reuse, B_c0_k0, C_r0_c0
      LDSM.16.MT88.4 R172, [R139 + UR8 + 0x1800] &wr=4 ?W6;  // LDSM.16.MT88.4 A_r0_k2, [sharedA0 + smemBaseRead_U + 0x1800]
      HMMA.16816.F32 R4, R156.reuse, R190, R4 ?W8;           // HMMA.16816.F32 C_r0_c2, A_r0_k0.reuse, B_c1_k0, C_r0_c2
      HMMA.16816.F32 R8, R156.reuse, R192, R8 ?W2;           // HMMA.16816.F32 C_r0_c4, A_r0_k0.reuse, B_c2_k0, C_r0_c4
      LDSM.16.MT88.4 R176, [R140 + UR8 + 0x1800] &wr=4 ?W6;  // LDSM.16.MT88.4 A_r2_k2, [sharedA1 + smemBaseRead_U + 0x1800]
      HMMA.16816.F32 R12, R156.reuse, R194, R12 ?W8;         // HMMA.16816.F32 C_r0_c6, A_r0_k0.reuse, B_c3_k0, C_r0_c6
      HMMA.16816.F32 R16, R156.reuse, R196, R16 ?W2;         // HMMA.16816.F32 C_r0_c8, A_r0_k0.reuse, B_c4_k0, C_r0_c8
      LDSM.16.MT88.4 R180, [R141 + UR8 + 0x1800] &wr=4 ?W2;  // LDSM.16.MT88.4 A_r4_k2, [sharedA2 + smemBaseRead_U + 0x1800]
      UISETP.LT UP0, UR8, 0x18000 ?W4;                       // UISETP.LT UP0, smemBaseRead_U, 0x18000
      HMMA.16816.F32 R20, R156.reuse, R198, R20 ?W8;         // HMMA.16816.F32 C_r0_c10, A_r0_k0.reuse, B_c5_k0, C_r0_c10
      HMMA.16816.F32 R24, R156.reuse, R200, R24 ?W2;         // HMMA.16816.F32 C_r0_c12, A_r0_k0.reuse, B_c6_k0, C_r0_c12
      LDSM.16.MT88.4 R184, [R142 + UR8 + 0x1800] &wr=4 ?W6;  // LDSM.16.MT88.4 A_r6_k2, [sharedA3 + smemBaseRead_U + 0x1800]
      HMMA.16816.F32 R28, R156, R202.reuse, R28 ?W8;         // HMMA.16816.F32 C_r0_c14, A_r0_k0, B_c7_k0.reuse, C_r0_c14
      HMMA.16816.F32 R60, R160.reuse, R202, R60 ?W2;         // HMMA.16816.F32 C_r2_c14, A_r2_k0.reuse, B_c7_k0, C_r2_c14
      LDSM.16.MT88.4 R204, [R143 + UR8 + 0x9800] &wr=4 ?W2;  // LDSM.16.MT88.4 B_c0_k2, [sharedB0 + smemBaseRead_U + 0x9800]
(P5)  LDGSTS.E.BYPASS.EN.LTC128B.128.CONSTANT [R138 + UR6 + 0x1000], desc[UR7][R136.64 + 0x0] &rd=3 ?W4; // @P5 LDGSTS.E.BYPASS.EN.LTC128B.128.CONSTANT [sharedWriteB + urdDescriptor_UB0 + 0x1000], desc[urdDescriptor_UB1][readPtrB1.64 + 0x0]
      HMMA.16816.F32 R56, R160.reuse, R200, R56 ?W8;         // HMMA.16816.F32 C_r2_c12, A_r2_k0.reuse, B_c6_k0, C_r2_c12
      HMMA.16816.F32 R52, R160.reuse, R198, R52 ?W2;         // HMMA.16816.F32 C_r2_c10, A_r2_k0.reuse, B_c5_k0, C_r2_c10
      LDSM.16.MT88.4 R208, [R144 + UR8 + 0x9800] &wr=4 ?W6;  // LDSM.16.MT88.4 B_c2_k2, [sharedB1 + smemBaseRead_U + 0x9800]
      HMMA.16816.F32 R48, R160.reuse, R196, R48 ?W8;         // HMMA.16816.F32 C_r2_c8, A_r2_k0.reuse, B_c4_k0, C_r2_c8
      HMMA.16816.F32 R44, R160.reuse, R194, R44 ?W2;         // HMMA.16816.F32 C_r2_c6, A_r2_k0.reuse, B_c3_k0, C_r2_c6
      LDSM.16.MT88.4 R212, [R145 + UR8 + 0x9800] &wr=4 ?W6;  // LDSM.16.MT88.4 B_c4_k2, [sharedB2 + smemBaseRead_U + 0x9800]
      HMMA.16816.F32 R40, R160.reuse, R192, R40 ?W8;         // HMMA.16816.F32 C_r2_c4, A_r2_k0.reuse, B_c2_k0, C_r2_c4
      HMMA.16816.F32 R36, R160.reuse, R190, R36 ?W2;         // HMMA.16816.F32 C_r2_c2, A_r2_k0.reuse, B_c1_k0, C_r2_c2
      LDSM.16.MT88.4 R216, [R146 + UR8 + 0x9800] &wr=4 ?W2;  // LDSM.16.MT88.4 B_c6_k2, [sharedB3 + smemBaseRead_U + 0x9800]
      @UP0 UIADD3 UR8, UR8, 0xc000, URZ ?W2;                 // @UP0 UIADD3 smemBaseRead_U, smemBaseRead_U, 0xc000, URZ
      @!UP0 UMOV UR8, URZ ?W2;                               // @!UP0 UMOV smemBaseRead_U, URZ
      HMMA.16816.F32 R32, R160, R188.reuse, R32 ?W8;         // HMMA.16816.F32 C_r2_c0, A_r2_k0, B_c0_k0.reuse, C_r2_c0
      HMMA.16816.F32 R64, R164.reuse, R188, R64 ?W8;         // HMMA.16816.F32 C_r4_c0, A_r4_k0.reuse, B_c0_k0, C_r4_c0
      HMMA.16816.F32 R68, R164.reuse, R190, R68 ?W8;         // HMMA.16816.F32 C_r4_c2, A_r4_k0.reuse, B_c1_k0, C_r4_c2
      HMMA.16816.F32 R72, R164.reuse, R192, R72 ?W2;         // HMMA.16816.F32 C_r4_c4, A_r4_k0.reuse, B_c2_k0, C_r4_c4
(P6)  LDGSTS.E.BYPASS.EN.LTC128B.128.CONSTANT [R138 + UR6 + 0x3000], desc[UR7][R136.64 + 0x80] &rd=3 ?W2; // @P6 LDGSTS.E.BYPASS.EN.LTC128B.128.CONSTANT [sharedWriteB + urdDescriptor_UB0 + 0x3000], desc[urdDescriptor_UB1][readPtrB1.64 + 0x80]
      LDGDEPBAR &wr=0 ?W1;                                   // LDGDEPBAR &wr=SB_LDG_WR ?W1
      @UP1 UIADD3 UR4, UR4, 0xc000, URZ ?W2;                 // @UP1 UIADD3 urdDescriptor_UA0, urdDescriptor_UA0, 0xc000, URZ
      @!UP1 UMOV UR4, URZ ?W1;                               // @!UP1 UMOV urdDescriptor_UA0, URZ
      HMMA.16816.F32 R76, R164.reuse, R194, R76 ?W2;         // HMMA.16816.F32 C_r4_c6, A_r4_k0.reuse, B_c3_k0, C_r4_c6
      UISETP.LT UP1, UR4, 0x18000 ?W2;                       // UISETP.LT UP1, urdDescriptor_UA0, 0x18000
      UMOV UR6, UR4 ?W2;                                     // UMOV urdDescriptor_UB0, urdDescriptor_UA0
      IADD R148, R148, -64 ?W2;                              // IADD counterK, counterK, -64
      HMMA.16816.F32 R80, R164.reuse, R196, R80 ?W2;         // HMMA.16816.F32 C_r4_c8, A_r4_k0.reuse, B_c4_k0, C_r4_c8
      ISETP.GT P0, R148, RZ ?W6;                             // ISETP.GT P0, counterK, RZ
      HMMA.16816.F32 R84, R164.reuse, R198, R84 ?W8;         // HMMA.16816.F32 C_r4_c10, A_r4_k0.reuse, B_c5_k0, C_r4_c10
      HMMA.16816.F32 R88, R164.reuse, R200, R88 ?W2;         // HMMA.16816.F32 C_r4_c12, A_r4_k0.reuse, B_c6_k0, C_r4_c12
      ISETP.GT P1, R148, -128 ?W2;                           // ISETP.GT P1, counterK, -128
      IADD   R130, P2, R130,   R150 &req=5 ?W4;              // IADD readPtrA0, predCarry, readPtrA0, globalAddressOffsetA
      HMMA.16816.F32 R92, R164, R202.reuse, R92 ?W2;         // HMMA.16816.F32 C_r4_c14, A_r4_k0, B_c7_k0.reuse, C_r4_c14
      IADD.X R131,         R131, R151, P2 ?W2;               // IADD.X readPtrA0_HI, readPtrA0_HI, globalAddressOffsetA_HI, predCarry
      IADD   R132, P2, R132,   R150 &req=5 ?W4;              // IADD readPtrA1, predCarry, readPtrA1, globalAddressOffsetA
      HMMA.16816.F32 R124, R168.reuse, R202, R124 ?W2;       // HMMA.16816.F32 C_r6_c14, A_r6_k0.reuse, B_c7_k0, C_r6_c14
      IADD.X R133,         R133, R151, P2 ?W2;               // IADD.X readPtrA1_HI, readPtrA1_HI, globalAddressOffsetA_HI, predCarry
      IADD   R134, P2, R134,   R152 &req=3 ?W4;              // IADD readPtrB0, predCarry, readPtrB0, globalAddressOffsetB
      HMMA.16816.F32 R120, R168.reuse, R200, R120 ?W2;       // HMMA.16816.F32 C_r6_c12, A_r6_k0.reuse, B_c6_k0, C_r6_c12
      DEPBAR.LE SB0, 1 ?W5;                                  // DEPBAR.LE SBSB_LDG_WR, 1
      IADD.X R135,         R135, R153, P2 ?W1;               // IADD.X readPtrB0_HI, readPtrB0_HI, globalAddressOffsetB_HI, predCarry
      HMMA.16816.F32 R116, R168.reuse, R198, R116 ?W2;       // HMMA.16816.F32 C_r6_c10, A_r6_k0.reuse, B_c5_k0, C_r6_c10
      BAR.SYNC.DEFER_BLOCKING 0 ?W6;                         // BAR.SYNC.DEFER_BLOCKING 0
      HMMA.16816.F32 R112, R168.reuse, R196, R112 ?W2;       // HMMA.16816.F32 C_r6_c8, A_r6_k0.reuse, B_c4_k0, C_r6_c8
      IADD   R136, P2, R136,   R152 &req=3 ?W4;              // IADD readPtrB1, predCarry, readPtrB1, globalAddressOffsetB
      IADD.X R137,         R137, R153, P2 ?W2;               // IADD.X readPtrB1_HI, readPtrB1_HI, globalAddressOffsetB_HI, predCarry
      HMMA.16816.F32 R108, R168.reuse, R194, R108 ?W8;       // HMMA.16816.F32 C_r6_c6, A_r6_k0.reuse, B_c3_k0, C_r6_c6
      HMMA.16816.F32 R104, R168.reuse, R192, R104 ?W8;       // HMMA.16816.F32 C_r6_c4, A_r6_k0.reuse, B_c2_k0, C_r6_c4
      HMMA.16816.F32 R100, R168.reuse, R190, R100 ?W8;       // HMMA.16816.F32 C_r6_c2, A_r6_k0.reuse, B_c1_k0, C_r6_c2
      HMMA.16816.F32 R96, R168, R188, R96 &wr=4 ?W8EG;       // HMMA.16816.F32 C_r6_c0, A_r6_k0, B_c0_k0, C_r6_c0
      HMMA.16816.F32 R0, R172.reuse, R204, R0 &req={4,4} ?W2; // HMMA.16816.F32 C_r0_c0, A_r0_k2.reuse, B_c0_k2, C_r0_c0
// Virtual ?REQ_BAR found on next instruction, stop putting ?BARRIER_EXEMPT on decoupled instructions
      LDSM.16.MT88.4 R156, [R139 + UR8 + 0x0] &wr=4 ?W1;     // LDSM.16.MT88.4 A_r0_k0, [sharedA0 + smemBaseRead_U + 0x0]
(!P0) MOV  R147, RZ ?W4;                                     // @!P0 MOV predStorage0, RZ
      R2P PR, R147.B0, 0x78 ?W1;                             // R2P PR, predStorage0.B0, 0x78
      HMMA.16816.F32 R4, R172.reuse, R206, R4 ?W8;           // HMMA.16816.F32 C_r0_c2, A_r0_k2.reuse, B_c1_k2, C_r0_c2
      HMMA.16816.F32 R8, R172.reuse, R208, R8 ?W2;           // HMMA.16816.F32 C_r0_c4, A_r0_k2.reuse, B_c2_k2, C_r0_c4
      LDSM.16.MT88.4 R160, [R140 + UR8 + 0x0] &wr=4 ?W2;     // LDSM.16.MT88.4 A_r2_k0, [sharedA1 + smemBaseRead_U + 0x0]
(P3)  LDGSTS.E.BYPASS.EN.LTC128B.128.CONSTANT [R129 + UR4 + 0x0], desc[UR5][R130.64 + 0x0] &rd=5 ?W4; // @P3 LDGSTS.E.BYPASS.EN.LTC128B.128.CONSTANT [sharedWriteA + urdDescriptor_UA0 + 0x0], desc[urdDescriptor_UA1][readPtrA0.64 + 0x0]
      HMMA.16816.F32 R12, R172.reuse, R210, R12 ?W8;         // HMMA.16816.F32 C_r0_c6, A_r0_k2.reuse, B_c3_k2, C_r0_c6
      HMMA.16816.F32 R16, R172.reuse, R212, R16 ?W2;         // HMMA.16816.F32 C_r0_c8, A_r0_k2.reuse, B_c4_k2, C_r0_c8
      LDSM.16.MT88.4 R164, [R141 + UR8 + 0x0] &wr=4 ?W6;     // LDSM.16.MT88.4 A_r4_k0, [sharedA2 + smemBaseRead_U + 0x0]
      HMMA.16816.F32 R20, R172.reuse, R214, R20 ?W8;         // HMMA.16816.F32 C_r0_c10, A_r0_k2.reuse, B_c5_k2, C_r0_c10
      HMMA.16816.F32 R24, R172.reuse, R216, R24 ?W2;         // HMMA.16816.F32 C_r0_c12, A_r0_k2.reuse, B_c6_k2, C_r0_c12
      LDSM.16.MT88.4 R168, [R142 + UR8 + 0x0] &wr=4 ?W6;     // LDSM.16.MT88.4 A_r6_k0, [sharedA3 + smemBaseRead_U + 0x0]
      HMMA.16816.F32 R28, R172, R218.reuse, R28 ?W8;         // HMMA.16816.F32 C_r0_c14, A_r0_k2, B_c7_k2.reuse, C_r0_c14
      HMMA.16816.F32 R60, R176.reuse, R218, R60 ?W2;         // HMMA.16816.F32 C_r2_c14, A_r2_k2.reuse, B_c7_k2, C_r2_c14
      LDSM.16.MT88.4 R188, [R143 + UR8 + 0x8000] &wr=4 ?W6;  // LDSM.16.MT88.4 B_c0_k0, [sharedB0 + smemBaseRead_U + 0x8000]
      HMMA.16816.F32 R56, R176.reuse, R216, R56 ?W8;         // HMMA.16816.F32 C_r2_c12, A_r2_k2.reuse, B_c6_k2, C_r2_c12
      HMMA.16816.F32 R52, R176.reuse, R214, R52 ?W2;         // HMMA.16816.F32 C_r2_c10, A_r2_k2.reuse, B_c5_k2, C_r2_c10
      LDSM.16.MT88.4 R192, [R144 + UR8 + 0x8000] &wr=4 ?W6;  // LDSM.16.MT88.4 B_c2_k0, [sharedB1 + smemBaseRead_U + 0x8000]
      HMMA.16816.F32 R48, R176.reuse, R212, R48 ?W2;         // HMMA.16816.F32 C_r2_c8, A_r2_k2.reuse, B_c4_k2, C_r2_c8
(P4)  LDGSTS.E.BYPASS.EN.LTC128B.128.CONSTANT [R129 + UR4 + 0x2000], desc[UR5][R130.64 + 0x80] &rd=5 ?W6; // @P4 LDGSTS.E.BYPASS.EN.LTC128B.128.CONSTANT [sharedWriteA + urdDescriptor_UA0 + 0x2000], desc[urdDescriptor_UA1][readPtrA0.64 + 0x80]
      HMMA.16816.F32 R44, R176.reuse, R210, R44 ?W2;         // HMMA.16816.F32 C_r2_c6, A_r2_k2.reuse, B_c3_k2, C_r2_c6
      LDSM.16.MT88.4 R196, [R145 + UR8 + 0x8000] &wr=4 ?W6;  // LDSM.16.MT88.4 B_c4_k0, [sharedB2 + smemBaseRead_U + 0x8000]
      HMMA.16816.F32 R40, R176.reuse, R208, R40 ?W8;         // HMMA.16816.F32 C_r2_c4, A_r2_k2.reuse, B_c2_k2, C_r2_c4
      HMMA.16816.F32 R36, R176.reuse, R206, R36 ?W2;         // HMMA.16816.F32 C_r2_c2, A_r2_k2.reuse, B_c1_k2, C_r2_c2
      LDSM.16.MT88.4 R200, [R146 + UR8 + 0x8000] &wr=4 ?W6;  // LDSM.16.MT88.4 B_c6_k0, [sharedB3 + smemBaseRead_U + 0x8000]
      HMMA.16816.F32 R32, R176, R204.reuse, R32 ?W8;         // HMMA.16816.F32 C_r2_c0, A_r2_k2, B_c0_k2.reuse, C_r2_c0
      HMMA.16816.F32 R64, R180.reuse, R204, R64 ?W8;         // HMMA.16816.F32 C_r4_c0, A_r4_k2.reuse, B_c0_k2, C_r4_c0
      HMMA.16816.F32 R68, R180.reuse, R206, R68 ?W8;         // HMMA.16816.F32 C_r4_c2, A_r4_k2.reuse, B_c1_k2, C_r4_c2
      HMMA.16816.F32 R72, R180.reuse, R208, R72 ?W8;         // HMMA.16816.F32 C_r4_c4, A_r4_k2.reuse, B_c2_k2, C_r4_c4
      HMMA.16816.F32 R76, R180.reuse, R210, R76 ?W8;         // HMMA.16816.F32 C_r4_c6, A_r4_k2.reuse, B_c3_k2, C_r4_c6
      HMMA.16816.F32 R80, R180.reuse, R212, R80 ?W8;         // HMMA.16816.F32 C_r4_c8, A_r4_k2.reuse, B_c4_k2, C_r4_c8
      HMMA.16816.F32 R84, R180.reuse, R214, R84 ?W8;         // HMMA.16816.F32 C_r4_c10, A_r4_k2.reuse, B_c5_k2, C_r4_c10
      HMMA.16816.F32 R88, R180.reuse, R216, R88 ?W2;         // HMMA.16816.F32 C_r4_c12, A_r4_k2.reuse, B_c6_k2, C_r4_c12
(P5)  LDGSTS.E.BYPASS.EN.LTC128B.128.CONSTANT [R129 + UR4 + 0x4000], desc[UR5][R130.64 + 0x100] &rd=5 ?W6; // @P5 LDGSTS.E.BYPASS.EN.LTC128B.128.CONSTANT [sharedWriteA + urdDescriptor_UA0 + 0x4000], desc[urdDescriptor_UA1][readPtrA0.64 + 0x100]
      HMMA.16816.F32 R92, R180, R218.reuse, R92 ?W8;         // HMMA.16816.F32 C_r4_c14, A_r4_k2, B_c7_k2.reuse, C_r4_c14
      HMMA.16816.F32 R124, R184.reuse, R218, R124 ?W8;       // HMMA.16816.F32 C_r6_c14, A_r6_k2.reuse, B_c7_k2, C_r6_c14
      HMMA.16816.F32 R120, R184.reuse, R216, R120 ?W8;       // HMMA.16816.F32 C_r6_c12, A_r6_k2.reuse, B_c6_k2, C_r6_c12
      HMMA.16816.F32 R116, R184.reuse, R214, R116 ?W8;       // HMMA.16816.F32 C_r6_c10, A_r6_k2.reuse, B_c5_k2, C_r6_c10
      HMMA.16816.F32 R112, R184.reuse, R212, R112 ?W8;       // HMMA.16816.F32 C_r6_c8, A_r6_k2.reuse, B_c4_k2, C_r6_c8
      HMMA.16816.F32 R108, R184.reuse, R210, R108 ?W8;       // HMMA.16816.F32 C_r6_c6, A_r6_k2.reuse, B_c3_k2, C_r6_c6
      HMMA.16816.F32 R104, R184.reuse, R208, R104 ?W8;       // HMMA.16816.F32 C_r6_c4, A_r6_k2.reuse, B_c2_k2, C_r6_c4
      HMMA.16816.F32 R100, R184.reuse, R206, R100 ?W8;       // HMMA.16816.F32 C_r6_c2, A_r6_k2.reuse, B_c1_k2, C_r6_c2
      HMMA.16816.F32 R96, R184, R204, R96 &wr=4 ?W2EG;       // HMMA.16816.F32 C_r6_c0, A_r6_k2, B_c0_k2, C_r6_c0
(P1)  BRA.U ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_LOOP ?W5; // @P1 BRA.U ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_LOOP
ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_END_OF_LOOP:
ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_EPILOG:
      ULDC UR4, c[0][0x208] ?W2;                             // ULDC urdDescriptor_UC0, urdDescriptorC0
      ULDC UR5, c[0][0x20c] ?W2;                             // ULDC urdDescriptor_UC1, urdDescriptorC1
      ISETP.NE    P0, RZ, c[0][0x1f0] &req={0,1,2,3,4,5} ?W2; // ISETP.NE P0, RZ, AbByRef
      MOV         R146, c[0][0x1d8] ?W2;                     // MOV alphaPtr, AlphaRef
      MOV         R147, c[0][0x1dc] ?W2;                     // MOV alphaPtr_HI, AlphaRef_HI
      MOV         R137, c[0][0x1d4] ?W2;                     // MOV mode, Mode
      S2R         R133, SR_Tid.X &wr=4 ?W2;                  // S2R tid, SR_Tid.X
      S2R         R134, SR_CTAid.X &wr=4 ?W2;                // S2R ctaRow, SR_CTAid.X
      S2R         R135, SR_CTAid.Y &wr=4 ?W2;                // S2R ctaCol, SR_CTAid.Y
      S2R         R136, SR_CTAid.Z &wr=4 ?W2;                // S2R batchIdx, SR_CTAid.Z
(P0)  LDG.E.EN.LTC128B.32.CONSTANT R144, [R146] &rd=3 &wr=0 ?W2; // @P0 LDG.E.EN.LTC128B.32.CONSTANT alpha, [alphaPtr]
      FSETP.NE   P1, R128, RZ ?W2;                           // FSETP.NE P1, beta, RZ
(!P0) MOV        R144, c[0][0x1e8] ?W2;                      // @!P0 MOV alpha, AlphaVal
      BAR.SYNC.DEFER_BLOCKING 0 &req=3 ?W6;                  // BAR.SYNC.DEFER_BLOCKING 0
      MOV  R147, RZ ?W2;                                     // MOV row_HI, RZ
      LOP.AND  R150, R137, 0xf00 ?W2;                        // LOP.AND log2GroupCols, mode, 0xf00
      LOP.AND  P5, RZ, R137, 0x1000 ?W2;                     // LOP.AND P5, RZ, mode, 0x1000
      SHR.U32  R150, R150, 8 ?W4;                            // SHR.U32 log2GroupCols, log2GroupCols, 8
      BMSK     R151, R150, 1 ?W2;                            // BMSK groupCols, log2GroupCols, 1
      BMSK     R152, RZ, R150 ?W2;                           // BMSK mask, RZ, log2GroupCols
      PSETP.AND P4, !PT, !PT ?W2;                            // PSETP.AND P4, !PT, !PT
ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_epilog_cta_swizzle_loop:
      LOP.OR   R153, R135, R152 &req=4 ?W2;                  // LOP.OR testCol, ctaCol, mask
      ISETP.EQ P3, R152, 3 ?W2;                              // ISETP.EQ P3, mask, 3
      ISETP.LT P2, R153, c[0x0][0x010] ?W2;                  // ISETP.LT P2, testCol, GridDimY
      LOP.AND  R154,  R135.reuse,  R152.reuse ?W2;           // LOP.AND colMod, ctaCol.reuse, mask.reuse
      LOP.AND  R157,  R135,        R151 ?W2;                 // LOP.AND colBit, ctaCol, groupCols
      ISETP.EQ.AND P3, PT, R153, c[0x0][0x010], P3 ?W2;      // ISETP.EQ.AND P3, PT, testCol, GridDimY, P3
      LOP.AND  R155, R135.reuse, ~R152 ?W1;                  // LOP.AND colBase, ctaCol.reuse, ~mask
      IMAD.U32 R156, R154, c[0x0][0x00c], R134 &req=4 ?W1;   // IMAD.U32 linear, colMod, GridDimX, ctaRow
(P5)  ISETP.EQ.XOR P4, PT, R157, R151, P4 ?W2;               // @P5 ISETP.EQ.XOR P4, PT, colBit, groupCols, P4
      SHR.U32 R151, R151, 1 ?W2;                             // SHR.U32 groupCols, groupCols, 1
(P2)  BRA ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_epilog_cta_swizzle_group_col_pow2 ?W5EG ?BARRIER_EXEMPT; // @P2 BRA ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_epilog_cta_swizzle_group_col_pow2
(!P3) SHR.U32  R152, R152, 1 ?W2;                            // @!P3 SHR.U32 mask, mask, 1
(!P3) IADD     R150, R150, -1 ?W2;                           // @!P3 IADD log2GroupCols, log2GroupCols, -1
(!P3) BRA ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_epilog_cta_swizzle_loop ?W5EG ?BARRIER_EXEMPT; // @!P3 BRA ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_epilog_cta_swizzle_loop
      IMUL.WIDE.U32 R158, R156, 0x55555556 ?W1;              // IMUL.WIDE.U32 swizRow64, linear, 0x55555556
      IADD  R135, R155, R156 ?W5;                            // IADD ctaCol, colBase, linear
      IMAD.U32 R135, R159, -3, R135 ?W1;                     // IMAD.U32 ctaCol, swizRow, -3, ctaCol
(!P4) MOV R134, R159 ?W2;                                    // @!P4 MOV ctaRow, swizRow
(P4)  IADD.X R134, ~R159, c[0x0][0x00c], !PT ?W2;            // @P4 IADD.X ctaRow, ~swizRow, GridDimX, !PT
      BRA ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_epilog_cta_swizzle_done ?W5EG ?BARRIER_EXEMPT; // BRA ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_epilog_cta_swizzle_done
ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_epilog_cta_swizzle_group_col_pow2:
      SHR.U32 R134, R156, R150 ?W2;                          // SHR.U32 ctaRow, linear, log2GroupCols
      LOP3.LUT  R135, R155, R156, R152, 0xf8 ?W2;            // LOP3.LUT ctaCol, colBase, linear, mask, B_AND_C__OR_A ?WiT
(P4)  IADD.X R134, ~R134, c[0x0][0x00c], !PT ?W4;            // @P4 IADD.X ctaRow, ~ctaRow, GridDimX, !PT
ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_epilog_cta_swizzle_done:
      LOP.AND  R152, R133, 3 &req=4 ?W4;                     // LOP.AND tmp0, tid, 3
      SHL      R129, R152, 5 ?W2;                            // SHL stsWritePtr, tmp0, 5
      SHR      R152, R133, 2 ?W4;                            // SHR tmp0, tid, 2
      LOP.AND  R152, R152, 0x7 ?W4;                          // LOP.AND tmp0, tmp0, 0x7
      LEA      R129, R152, R129, 2 ?W2;                      // LEA stsWritePtr, tmp0, stsWritePtr, 2
      SHR      R153, R133, 5 ?W4;                            // SHR warpId, tid, 5
      LEA      R129, R153, R129, 8 ?W2;                      // LEA stsWritePtr, warpId, stsWritePtr, 8
      LOP.AND  R152, R133, 3 ?W4;                            // LOP.AND tmp0, tid, 3
      LEA      R129, R152, R129, 13 ?W1;                     // LEA stsWritePtr, tmp0, stsWritePtr, 13
      LOP.AND  R152, R133, 15 ?W4;                           // LOP.AND tmp0, tid, 15
      SHL      R132, R152, 4 ?W2;                            // SHL ldsReadPtr, tmp0, 4
      SHL R150, R152, 2 ?W2;                                 // SHL intraWarpRow, tmp0, 2
      LEA R132, R153, R132, 8 ?W2;                           // LEA ldsReadPtr, warpId, ldsReadPtr, 8
      LOP.AND  R152, R133, 0x1f ?W4;                         // LOP.AND tmp0, tid, 0x1f
      SHR      R152, R152, 5 ?W4;                            // SHR tmp0, tmp0, 5
      SHL      R154, R152, 5 ?W4;                            // SHL tmp1, tmp0, 5
      IADD     R132, R132, R154 ?W4;                         // IADD ldsReadPtr, ldsReadPtr, tmp1
      LEA      R132, R152, R132, 13 ?W1;                     // LEA ldsReadPtr, tmp0, ldsReadPtr, 13
      LOP.AND  R152, R133, 16 ?W4;                           // LOP.AND tmp0, tid, 16
      LEA      R132, R152, R132, 7 ?W1;                      // LEA ldsReadPtr, tmp0, ldsReadPtr, 7
      LOP.AND  R152, R133, 31 ?W4;                           // LOP.AND tmp0, tid, 31
      SHR      R151, R152, 4 ?W1;                            // SHR intraWarpCol, tmp0, 4
      LOP.AND R152, R133, 255 ?W4;                           // LOP.AND tmp0, tid, 255
      SHR     R155, R152.reuse, 5 ?W2;                       // SHR warpRow, tmp0.reuse, 5
      SHR     R156, R152.reuse, 7 ?W2;                       // SHR warpCol, tmp0.reuse, 7
      LOP.AND R155, R155, 3 ?W2;                             // LOP.AND warpRow, warpRow, 3
      LEA  R149, R135, R151, 7 ?W2;                          // LEA col, ctaCol, intraWarpCol, 7
      MOV  R143, c[0][0x1b8] ?W2;                            // MOV strideC, StrideC
      LEA  R146, R134, R150, 8 ?W2;                          // LEA row, ctaRow, intraWarpRow, 8
      LEA  R149, R156, R149,  6 ?W2;                         // LEA col, warpCol, col, 6
      LEA  R146, R155, R146,  6 ?W5;                         // LEA row, warpRow, row, 6
      LOP.AND P2, RZ, R137, 8 ?W2;                           // LOP.AND P2, RZ, mode, 8
      IMAD.WIDE.U32 R150, R149, c[0][0x1b8], R146 ?W5;       // IMAD.WIDE.U32 readPtrMul, col, StrideC, row
      LOP.AND P6, R154, R137, 3 ?W13EG;                      // LOP.AND P6, scratch1, mode, 3
(!P6) BRA.U   ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_END_BATCH_PTR_CALC1_EPILOG ?W5EG ?BARRIER_EXEMPT; // @!P6 BRA.U ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_END_BATCH_PTR_CALC1_EPILOG
      ISETP.EQ P3,    R154, 2 ?W13EG;                        // ISETP.EQ P3, scratch1, 2
(P3)  LEA.LO   R140, P4, R136.reuse, c[0][0x170], 3 &req=4 ?W4; // @P3 LEA.LO writePtr, P4, batchIdx.reuse, BaseC, 3
(P3)  LEA.HI.X R141, R136, c[0][0x174], RZ, 3, P4 ?W8;       // @P3 LEA.HI.X writePtr_HI, batchIdx, BaseC_HI, RZ, 3, P4
(P3)  LDG.E.EN.LTC128B.64.CONSTANT R152, [R140 + 0x00] &wr=2 ?W2 ?BARRIER_EXEMPT; // @P3 LDG.E.EN.LTC128B.64.CONSTANT batchPtrMul, [writePtr + 0x00]
(P3)  LEA.LO   R140, P4, R150.reuse, R152, 1 &req=2 ?W4;     // @P3 LEA.LO writePtr, P4, readPtrMul.reuse, batchPtrMul, 1
(P3)  LEA.HI.X R141, R150, R153, R151, 1, P4 ?W2;            // @P3 LEA.HI.X writePtr_HI, readPtrMul, batchPtrMul_HI, readPtrMul_HI, 1, P4
(!P3) LEA.LO   R140, P4, R150.reuse, c[0][0x170], 1 ?W4;     // @!P3 LEA.LO writePtr, P4, readPtrMul.reuse, BaseC, 1
(!P3) LEA.HI.X R141, R150, c[0][0x174], R151, 1, P4 ?W2;     // @!P3 LEA.HI.X writePtr_HI, readPtrMul, BaseC_HI, readPtrMul_HI, 1, P4
(!P3) IMAD.WIDE.U32 R152,    R136, c[0][0x1a8],    RZ &req=4 ?W4; // @!P3 IMAD.WIDE.U32 batchPtrMul, batchIdx, MatrixStrideC, RZ
(!P3) IMAD.LO.U32   R153, R136, c[0][0x1ac], R153 ?W2;       // @!P3 IMAD.LO.U32 batchPtrMul_HI, batchIdx, MatrixStrideC_HI, batchPtrMul_HI
(!P3) LEA.LO   R140, P4, R152.reuse, R140, 1 ?W4;            // @!P3 LEA.LO writePtr, P4, batchPtrMul.reuse, writePtr, 1
(!P3) LEA.HI.X R141, R152, R141, R151, 1, P4 ?W2;            // @!P3 LEA.HI.X writePtr_HI, batchPtrMul, writePtr_HI, readPtrMul_HI, 1, P4
      BRA.U ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_END_BATCH_PTR_SYNC1_EPILOG ?W5EG ?BARRIER_EXEMPT; // BRA.U ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_END_BATCH_PTR_SYNC1_EPILOG
ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_END_BATCH_PTR_CALC1_EPILOG:
      LEA.LO   R140, P4, R150.reuse, c[0][0x170], 1 ?W4;     // LEA.LO writePtr, P4, readPtrMul.reuse, BaseC, 1
      LEA.HI.X R141, R150, c[0][0x174], R151, 1, P4 ?W8;     // LEA.HI.X writePtr_HI, readPtrMul, BaseC_HI, readPtrMul_HI, 1, P4
ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_END_BATCH_PTR_SYNC1_EPILOG:
      LOP.AND P3, RZ, R137, 32 ?W13EG;                       // LOP.AND P3, RZ, mode, 32
(P3)  IMAD.WIDE.U32 R152,    R136, c[0][0x1a8],    RZ &req=4 ?W4; // @P3 IMAD.WIDE.U32 batchPtrMul, batchIdx, MatrixStrideC, RZ
(P3)  IMAD.LO.U32   R153, R136, c[0][0x1ac], R153 ?W2;       // @P3 IMAD.LO.U32 batchPtrMul_HI, batchIdx, MatrixStrideC_HI, batchPtrMul_HI
(P3)  LEA.LO   R140, P4, R152.reuse, R140, 1 ?W4;            // @P3 LEA.LO writePtr, P4, batchPtrMul.reuse, writePtr, 1
(P3)  LEA.HI.X R141, R152, R141, R151, 1, P4 ?W2;            // @P3 LEA.HI.X writePtr_HI, batchPtrMul, writePtr_HI, readPtrMul_HI, 1, P4
      ISETP.NE.AND  P5, PT, R136, RZ, P2 ?W2;                // ISETP.NE.AND P5, PT, batchIdx, RZ, P2
      MOV  R138,    c[0][0x170] ?W2;                         // MOV readPtr, BaseC
      MOV  R139, c[0][0x174] ?W2;                            // MOV readPtr_HI, BaseC_HI
      ISETP.EQ      P4, R138, c[0][0x1f8] ?W13EG;            // ISETP.EQ P4, readPtr, BaseD
      ISETP.EQ.AND  P4, PT, R139, c[0][0x1fc], P4 ?W13EG;    // ISETP.EQ.AND P4, PT, readPtr_HI, BaseD_HI, P4
      PSETP.OR      P4, P4, P5 ?W13EG;                       // PSETP.OR P4, P4, P5
(!P4) BRA.U ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_BASED_NEQ_BASEC_CALC_EPILOG ?W5EG ?BARRIER_EXEMPT; // @!P4 BRA.U ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_BASED_NEQ_BASEC_CALC_EPILOG
      MOV       R138, R140 &req=3 ?W2;                       // MOV readPtr, writePtr
      MOV       R139, R141 ?W2;                              // MOV readPtr_HI, writePtr_HI
      BRA.U ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_END_BASEC_CALC_EPILOG ?W5EG ?BARRIER_EXEMPT; // BRA.U ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_END_BASEC_CALC_EPILOG
ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_BASED_NEQ_BASEC_CALC_EPILOG:
      LOP.AND P6, R154, R137, 3 ?W13EG;                      // LOP.AND P6, scratch1, mode, 3
(!P6) BRA.U   ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_END_BATCH_PTR_CALC0_EPILOG ?W5EG ?BARRIER_EXEMPT; // @!P6 BRA.U ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_END_BATCH_PTR_CALC0_EPILOG
      ISETP.EQ P3,    R154, 2 ?W13EG;                        // ISETP.EQ P3, scratch1, 2
(P3)  LEA.LO   R138, P4, R136.reuse, c[0][0x1f8], 3 &req=4 ?W4; // @P3 LEA.LO readPtr, P4, batchIdx.reuse, BaseD, 3
(P3)  LEA.HI.X R139, R136, c[0][0x1fc], RZ, 3, P4 ?W8;       // @P3 LEA.HI.X readPtr_HI, batchIdx, BaseD_HI, RZ, 3, P4
(P3)  LDG.E.EN.LTC128B.64.CONSTANT R152, [R138 + 0x00] &wr=2 ?W2 ?BARRIER_EXEMPT; // @P3 LDG.E.EN.LTC128B.64.CONSTANT batchPtrMul, [readPtr + 0x00]
(P3)  LEA.LO   R138, P4, R150.reuse, R152, 1 &req=2 ?W4;     // @P3 LEA.LO readPtr, P4, readPtrMul.reuse, batchPtrMul, 1
(P3)  LEA.HI.X R139, R150, R153, R151, 1, P4 ?W2;            // @P3 LEA.HI.X readPtr_HI, readPtrMul, batchPtrMul_HI, readPtrMul_HI, 1, P4
(!P3) LEA.LO   R138, P4, R150.reuse, c[0][0x1f8], 1 ?W4;     // @!P3 LEA.LO readPtr, P4, readPtrMul.reuse, BaseD, 1
(!P3) LEA.HI.X R139, R150, c[0][0x1fc], R151, 1, P4 ?W2;     // @!P3 LEA.HI.X readPtr_HI, readPtrMul, BaseD_HI, readPtrMul_HI, 1, P4
(!P3) IMAD.WIDE.U32 R152,    R136, c[0][0x1a8],    RZ &req=4 ?W4; // @!P3 IMAD.WIDE.U32 batchPtrMul, batchIdx, MatrixStrideC, RZ
(!P3) IMAD.LO.U32   R153, R136, c[0][0x1ac], R153 ?W2;       // @!P3 IMAD.LO.U32 batchPtrMul_HI, batchIdx, MatrixStrideC_HI, batchPtrMul_HI
(!P3) LEA.LO   R138, P4, R152.reuse, R138, 1 ?W4;            // @!P3 LEA.LO readPtr, P4, batchPtrMul.reuse, readPtr, 1
(!P3) LEA.HI.X R139, R152, R139, R151, 1, P4 ?W2;            // @!P3 LEA.HI.X readPtr_HI, batchPtrMul, readPtr_HI, readPtrMul_HI, 1, P4
      BRA.U ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_END_BATCH_PTR_SYNC0_EPILOG ?W5EG ?BARRIER_EXEMPT; // BRA.U ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_END_BATCH_PTR_SYNC0_EPILOG
ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_END_BATCH_PTR_CALC0_EPILOG:
      LEA.LO   R138, P4, R150.reuse, c[0][0x1f8], 1 ?W4;     // LEA.LO readPtr, P4, readPtrMul.reuse, BaseD, 1
      LEA.HI.X R139, R150, c[0][0x1fc], R151, 1, P4 ?W8;     // LEA.HI.X readPtr_HI, readPtrMul, BaseD_HI, readPtrMul_HI, 1, P4
ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_END_BATCH_PTR_SYNC0_EPILOG:
      LOP.AND P3, RZ, R137, 32 ?W13EG;                       // LOP.AND P3, RZ, mode, 32
(P3)  IMAD.WIDE.U32 R152,    R136, c[0][0x1a8],    RZ &req=4 ?W4; // @P3 IMAD.WIDE.U32 batchPtrMul, batchIdx, MatrixStrideC, RZ
(P3)  IMAD.LO.U32   R153, R136, c[0][0x1ac], R153 ?W2;       // @P3 IMAD.LO.U32 batchPtrMul_HI, batchIdx, MatrixStrideC_HI, batchPtrMul_HI
(P3)  LEA.LO   R138, P4, R152.reuse, R138, 1 ?W4;            // @P3 LEA.LO readPtr, P4, batchPtrMul.reuse, readPtr, 1
(P3)  LEA.HI.X R139, R152, R139, R151, 1, P4 ?W2;            // @P3 LEA.HI.X readPtr_HI, batchPtrMul, readPtr_HI, readPtrMul_HI, 1, P4
ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_END_BASEC_CALC_EPILOG:
(P5)  MOV32I        R128, 0x3f800000 &req=2 ?W2;             // @P5 MOV32I beta, 0x3f800000
(P5)  PSETP.AND P1, PT, PT ?W2;                              // @P5 PSETP.AND P1, PT, PT
      IADD  R145, R146, -c[0][0x1bc] ?W2;                    // IADD cRowMinusM, row, -CountM
      IADD  R148, R149, -c[0][0x1c0] ?W11;                   // IADD cColMinusN, col, -CountN
(!P2) BRA  ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_EPILOG_SPIN_WAIT_END ?W5EG ?BARRIER_EXEMPT; // @!P2 BRA ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_EPILOG_SPIN_WAIT_END
      IMAD.LO.U32  R185, R135, c[0x0][0x00c], R134 ?W5;      // IMAD.LO.U32 spinLockOffset, ctaCol, GridDimX, ctaRow
      LEA.LO   R166, P2, R185.reuse, c[0][0x1c8], 2 &req=3 ?W4; // LEA.LO spinLockPtr, predCarry, spinLockOffset.reuse, Sync, 2
      LEA.HI.X R167, R185, c[0][0x1cc], RZ, 2, P2 ?W2;       // LEA.HI.X spinLockPtr_HI, spinLockOffset, Sync_HI, RZ, 2, predCarry
      MOV R184, RZ ?W4;                                      // MOV spinLock, RZ
ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_EPILOG_SPIN_WAIT:
      ISETP.NE    P2, R184, R136 &req=2 ?W13EG;              // ISETP.NE P2, spinLock, batchIdx
(P2)  LDG.E.EL.LTC128B.32.STRONG.GPU R184, [R166] &wr=2 ?W2 ?BARRIER_EXEMPT; // @P2 LDG.E.EL.LTC128B.32.STRONG.GPU spinLock, [spinLockPtr]
(P2)  BRA.U ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_EPILOG_SPIN_WAIT ?W5EG ?BARRIER_EXEMPT; // @P2 BRA.U ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_EPILOG_SPIN_WAIT
ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_EPILOG_SPIN_WAIT_END:
      ISETP.LT.AND  P2, PT, R145, 0, PT ?W4;                 // ISETP.LT.AND P2, PT, cRowMinusM, 0, PT
      ISETP.LT.AND  P3, PT, R148.reuse, 0, P2 ?W1;           // ISETP.LT.AND P3, PT, cColMinusN.reuse, 0, P2
      ISETP.LT.AND  P4, PT, R148.reuse, -2, P2 ?W4;          // ISETP.LT.AND P4, PT, cColMinusN.reuse, -2, P2
      P2R.B0 R142, PR, RZ, 0x78 ?W2;                         // P2R.B0 readPreds, PR, RZ, 0x78
      ISETP.LT.AND  P3, PT, R148.reuse, -4, P2 ?W1;          // ISETP.LT.AND P3, PT, cColMinusN.reuse, -4, P2
      ISETP.LT.AND  P4, PT, R148      , -6, P2 ?W4;          // ISETP.LT.AND P4, PT, cColMinusN , -6, P2
      P2R.B1 R142, PR, R142, 0x78 ?W2;                       // P2R.B1 readPreds, PR, readPreds, 0x78
(!P1) BRA.U  ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_END_PREFETCH_OLD_C ?W5EG ?BARRIER_EXEMPT; // @!P1 BRA.U ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_END_PREFETCH_OLD_C
      R2P PR, R142.B0, 0x78 ?W13EG;                          // R2P PR, readPreds.B0, 0x78
      LEA.LO   R184, P2, R143.reuse, R138, 2 ?W4;            // LEA.LO readPtr2, predCarry, strideC.reuse, readPtr0, 2
      LEA.HI.X R185, R143, R139, RZ, 2, P2 ?W4;              // LEA.HI.X readPtr2_HI, strideC, readPtr0_HI, strideC_HI, 2, predCarry
      LDG.E.EN.LTC128B.64.STRONG.GPU R150, desc[UR4][R138.64], P3 &rd=3 &wr=2 ?W1 ?BARRIER_EXEMPT; // LDG.E.EN.LTC128B.64.STRONG.GPU fetchRegC0, desc[urdDescriptor_UC0][readPtr0.64], P3
      LEA.LO   R186, P2, R143.reuse, R184, 2 ?W4;            // LEA.LO readPtr4, predCarry, strideC.reuse, readPtr2, 2
      LEA.HI.X R187, R143, R185, RZ, 2, P2 ?W4;              // LEA.HI.X readPtr4_HI, strideC, readPtr2_HI, strideC_HI, 2, predCarry
      LDG.E.EN.LTC128B.64.STRONG.GPU R152, desc[UR4][R184.64], P4 &rd=3 &wr=2 ?W1 ?BARRIER_EXEMPT; // LDG.E.EN.LTC128B.64.STRONG.GPU fetchRegC2, desc[urdDescriptor_UC0][readPtr2.64], P4
      R2P PR, R142.B1, 0x78 ?W13EG;                          // R2P PR, readPreds.B1, 0x78
      LEA.LO   R188, P2, R143.reuse, R186, 2 ?W4;            // LEA.LO readPtr6, predCarry, strideC.reuse, readPtr4, 2
      LEA.HI.X R189, R143, R187, RZ, 2, P2 ?W4;              // LEA.HI.X readPtr6_HI, strideC, readPtr4_HI, strideC_HI, 2, predCarry
      LDG.E.EN.LTC128B.64.STRONG.GPU R154, desc[UR4][R186.64], P3 &rd=3 &wr=2 ?W7 ?BARRIER_EXEMPT; // LDG.E.EN.LTC128B.64.STRONG.GPU fetchRegC4, desc[urdDescriptor_UC0][readPtr4.64], P3
      LDG.E.EN.LTC128B.64.STRONG.GPU R156, desc[UR4][R188.64], P4 &rd=3 &wr=2 ?W4 ?BARRIER_EXEMPT; // LDG.E.EN.LTC128B.64.STRONG.GPU fetchRegC6, desc[urdDescriptor_UC0][readPtr6.64], P4
      LEA.LO   R138, P2, R143.reuse, R138, 4 &req=3 ?W4;     // LEA.LO readPtr, predCarry, strideC.reuse, readPtr, 4
      LEA.HI.X R139, R143, R139, RZ, 4, P2 ?W1;              // LEA.HI.X readPtr_HI, strideC, readPtr_HI, strideC_HI, 4, predCarry
ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_END_PREFETCH_OLD_C:
      PSETP.AND  P0, P1, P1 ?W1;                             // PSETP.AND P0, P1, P1
      FMUL  R168, R144.reuse, R0 &req=0 ?W2;                 // FMUL storeReg0, alpha.reuse, C_r0_c0
      FMUL  R169, R144.reuse, R2 ?W2;                        // FMUL storeReg1, alpha.reuse, C_r1_c0
      FMUL  R170, R144.reuse, R32 ?W2;                       // FMUL storeReg2, alpha.reuse, C_r2_c0
      FMUL  R171, R144.reuse, R34 ?W2;                       // FMUL storeReg3, alpha.reuse, C_r3_c0
      FMUL  R172, R144.reuse, R64 ?W2;                       // FMUL storeReg4, alpha.reuse, C_r4_c0
      FMUL  R173, R144.reuse, R66 ?W2;                       // FMUL storeReg5, alpha.reuse, C_r5_c0
      FMUL  R174, R144.reuse, R96 ?W2;                       // FMUL storeReg6, alpha.reuse, C_r6_c0
      FMUL  R175, R144.reuse, R98 ?W2;                       // FMUL storeReg7, alpha.reuse, C_r7_c0
      FMUL  R176, R144.reuse, R1 ?W2;                        // FMUL storeReg8, alpha.reuse, C_r0_c1
      FMUL  R177, R144.reuse, R3 ?W2;                        // FMUL storeReg9, alpha.reuse, C_r1_c1
      FMUL  R178, R144.reuse, R33 ?W2;                       // FMUL storeReg10, alpha.reuse, C_r2_c1
      FMUL  R179, R144.reuse, R35 ?W2;                       // FMUL storeReg11, alpha.reuse, C_r3_c1
      FMUL  R180, R144.reuse, R65 ?W2;                       // FMUL storeReg12, alpha.reuse, C_r4_c1
      FMUL  R181, R144.reuse, R67 ?W2;                       // FMUL storeReg13, alpha.reuse, C_r5_c1
      FMUL  R182, R144.reuse, R97 ?W2;                       // FMUL storeReg14, alpha.reuse, C_r6_c1
      FMUL  R183, R144, R99 ?W2;                             // FMUL storeReg15, alpha, C_r7_c1
      IADD  R148, R148, 8 ?W1;                               // IADD cColMinusN, cColMinusN, 8
      LEPC R130 &req=3 ?W2;                                  // LEPC pc
// Virtual ?REQ_BAR found on next instruction, stop putting ?BARRIER_EXEMPT on decoupled instructions
      CALL.REL  ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_STORE_COL ?W5; // CALL.REL ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_STORE_COL
      LEA.LO   R140, P2, R143.reuse, R140, 4 &req=3 ?W4;     // LEA.LO writePtr, predCarry, strideC.reuse, writePtr, 4
      LEA.HI.X R141, R143, R141, RZ, 4, P2 ?W1;              // LEA.HI.X writePtr_HI, strideC, writePtr_HI, strideC_HI, 4, predCarry
      LEA.LO   R138, P2, R143.reuse, R138, 4 &req=3 ?W4;     // LEA.LO readPtr, predCarry, strideC.reuse, readPtr, 4
      LEA.HI.X R139, R143, R139, RZ, 4, P2 ?W1;              // LEA.HI.X readPtr_HI, strideC, readPtr_HI, strideC_HI, 4, predCarry
      FMUL  R168, R144.reuse, R4 ?W2;                        // FMUL storeReg0, alpha.reuse, C_r0_c2
      FMUL  R169, R144.reuse, R6 ?W2;                        // FMUL storeReg1, alpha.reuse, C_r1_c2
      FMUL  R170, R144.reuse, R36 ?W2;                       // FMUL storeReg2, alpha.reuse, C_r2_c2
      FMUL  R171, R144.reuse, R38 ?W2;                       // FMUL storeReg3, alpha.reuse, C_r3_c2
      FMUL  R172, R144.reuse, R68 ?W2;                       // FMUL storeReg4, alpha.reuse, C_r4_c2
      FMUL  R173, R144.reuse, R70 ?W2;                       // FMUL storeReg5, alpha.reuse, C_r5_c2
      FMUL  R174, R144.reuse, R100 ?W2;                      // FMUL storeReg6, alpha.reuse, C_r6_c2
      FMUL  R175, R144.reuse, R102 ?W2;                      // FMUL storeReg7, alpha.reuse, C_r7_c2
      FMUL  R176, R144.reuse, R5 ?W2;                        // FMUL storeReg8, alpha.reuse, C_r0_c3
      FMUL  R177, R144.reuse, R7 ?W2;                        // FMUL storeReg9, alpha.reuse, C_r1_c3
      FMUL  R178, R144.reuse, R37 ?W2;                       // FMUL storeReg10, alpha.reuse, C_r2_c3
      FMUL  R179, R144.reuse, R39 ?W2;                       // FMUL storeReg11, alpha.reuse, C_r3_c3
      FMUL  R180, R144.reuse, R69 ?W2;                       // FMUL storeReg12, alpha.reuse, C_r4_c3
      FMUL  R181, R144.reuse, R71 ?W2;                       // FMUL storeReg13, alpha.reuse, C_r5_c3
      FMUL  R182, R144.reuse, R101 ?W2;                      // FMUL storeReg14, alpha.reuse, C_r6_c3
      FMUL  R183, R144, R103 ?W2;                            // FMUL storeReg15, alpha, C_r7_c3
      IADD  R148, R148, 8 ?W1;                               // IADD cColMinusN, cColMinusN, 8
      LEPC R130 &req=3 ?W2;                                  // LEPC pc
      CALL.REL  ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_STORE_COL ?W5; // CALL.REL ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_STORE_COL
      LEA.LO   R140, P2, R143.reuse, R140, 4 &req=3 ?W4;     // LEA.LO writePtr, predCarry, strideC.reuse, writePtr, 4
      LEA.HI.X R141, R143, R141, RZ, 4, P2 ?W1;              // LEA.HI.X writePtr_HI, strideC, writePtr_HI, strideC_HI, 4, predCarry
      LEA.LO   R138, P2, R143.reuse, R138, 4 &req=3 ?W4;     // LEA.LO readPtr, predCarry, strideC.reuse, readPtr, 4
      LEA.HI.X R139, R143, R139, RZ, 4, P2 ?W1;              // LEA.HI.X readPtr_HI, strideC, readPtr_HI, strideC_HI, 4, predCarry
      FMUL  R168, R144.reuse, R8 ?W2;                        // FMUL storeReg0, alpha.reuse, C_r0_c4
      FMUL  R169, R144.reuse, R10 ?W2;                       // FMUL storeReg1, alpha.reuse, C_r1_c4
      FMUL  R170, R144.reuse, R40 ?W2;                       // FMUL storeReg2, alpha.reuse, C_r2_c4
      FMUL  R171, R144.reuse, R42 ?W2;                       // FMUL storeReg3, alpha.reuse, C_r3_c4
      FMUL  R172, R144.reuse, R72 ?W2;                       // FMUL storeReg4, alpha.reuse, C_r4_c4
      FMUL  R173, R144.reuse, R74 ?W2;                       // FMUL storeReg5, alpha.reuse, C_r5_c4
      FMUL  R174, R144.reuse, R104 ?W2;                      // FMUL storeReg6, alpha.reuse, C_r6_c4
      FMUL  R175, R144.reuse, R106 ?W2;                      // FMUL storeReg7, alpha.reuse, C_r7_c4
      FMUL  R176, R144.reuse, R9 ?W2;                        // FMUL storeReg8, alpha.reuse, C_r0_c5
      FMUL  R177, R144.reuse, R11 ?W2;                       // FMUL storeReg9, alpha.reuse, C_r1_c5
      FMUL  R178, R144.reuse, R41 ?W2;                       // FMUL storeReg10, alpha.reuse, C_r2_c5
      FMUL  R179, R144.reuse, R43 ?W2;                       // FMUL storeReg11, alpha.reuse, C_r3_c5
      FMUL  R180, R144.reuse, R73 ?W2;                       // FMUL storeReg12, alpha.reuse, C_r4_c5
      FMUL  R181, R144.reuse, R75 ?W2;                       // FMUL storeReg13, alpha.reuse, C_r5_c5
      FMUL  R182, R144.reuse, R105 ?W2;                      // FMUL storeReg14, alpha.reuse, C_r6_c5
      FMUL  R183, R144, R107 ?W2;                            // FMUL storeReg15, alpha, C_r7_c5
      IADD  R148, R148, 8 ?W1;                               // IADD cColMinusN, cColMinusN, 8
      LEPC R130 &req=3 ?W2;                                  // LEPC pc
      CALL.REL  ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_STORE_COL ?W5; // CALL.REL ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_STORE_COL
      LEA.LO   R140, P2, R143.reuse, R140, 4 &req=3 ?W4;     // LEA.LO writePtr, predCarry, strideC.reuse, writePtr, 4
      LEA.HI.X R141, R143, R141, RZ, 4, P2 ?W1;              // LEA.HI.X writePtr_HI, strideC, writePtr_HI, strideC_HI, 4, predCarry
      LEA.LO   R138, P2, R143.reuse, R138, 4 &req=3 ?W4;     // LEA.LO readPtr, predCarry, strideC.reuse, readPtr, 4
      LEA.HI.X R139, R143, R139, RZ, 4, P2 ?W1;              // LEA.HI.X readPtr_HI, strideC, readPtr_HI, strideC_HI, 4, predCarry
      FMUL  R168, R144.reuse, R12 ?W2;                       // FMUL storeReg0, alpha.reuse, C_r0_c6
      FMUL  R169, R144.reuse, R14 ?W2;                       // FMUL storeReg1, alpha.reuse, C_r1_c6
      FMUL  R170, R144.reuse, R44 ?W2;                       // FMUL storeReg2, alpha.reuse, C_r2_c6
      FMUL  R171, R144.reuse, R46 ?W2;                       // FMUL storeReg3, alpha.reuse, C_r3_c6
      FMUL  R172, R144.reuse, R76 ?W2;                       // FMUL storeReg4, alpha.reuse, C_r4_c6
      FMUL  R173, R144.reuse, R78 ?W2;                       // FMUL storeReg5, alpha.reuse, C_r5_c6
      FMUL  R174, R144.reuse, R108 ?W2;                      // FMUL storeReg6, alpha.reuse, C_r6_c6
      FMUL  R175, R144.reuse, R110 ?W2;                      // FMUL storeReg7, alpha.reuse, C_r7_c6
      FMUL  R176, R144.reuse, R13 ?W2;                       // FMUL storeReg8, alpha.reuse, C_r0_c7
      FMUL  R177, R144.reuse, R15 ?W2;                       // FMUL storeReg9, alpha.reuse, C_r1_c7
      FMUL  R178, R144.reuse, R45 ?W2;                       // FMUL storeReg10, alpha.reuse, C_r2_c7
      FMUL  R179, R144.reuse, R47 ?W2;                       // FMUL storeReg11, alpha.reuse, C_r3_c7
      FMUL  R180, R144.reuse, R77 ?W2;                       // FMUL storeReg12, alpha.reuse, C_r4_c7
      FMUL  R181, R144.reuse, R79 ?W2;                       // FMUL storeReg13, alpha.reuse, C_r5_c7
      FMUL  R182, R144.reuse, R109 ?W2;                      // FMUL storeReg14, alpha.reuse, C_r6_c7
      FMUL  R183, R144, R111 ?W2;                            // FMUL storeReg15, alpha, C_r7_c7
      IADD  R148, R148, 8 ?W1;                               // IADD cColMinusN, cColMinusN, 8
      LEPC R130 &req=3 ?W2;                                  // LEPC pc
      CALL.REL  ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_STORE_COL ?W5; // CALL.REL ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_STORE_COL
      LEA.LO   R140, P2, R143.reuse, R140, 4 &req=3 ?W4;     // LEA.LO writePtr, predCarry, strideC.reuse, writePtr, 4
      LEA.HI.X R141, R143, R141, RZ, 4, P2 ?W1;              // LEA.HI.X writePtr_HI, strideC, writePtr_HI, strideC_HI, 4, predCarry
      LEA.LO   R138, P2, R143.reuse, R138, 4 &req=3 ?W4;     // LEA.LO readPtr, predCarry, strideC.reuse, readPtr, 4
      LEA.HI.X R139, R143, R139, RZ, 4, P2 ?W1;              // LEA.HI.X readPtr_HI, strideC, readPtr_HI, strideC_HI, 4, predCarry
      FMUL  R168, R144.reuse, R16 ?W2;                       // FMUL storeReg0, alpha.reuse, C_r0_c8
      FMUL  R169, R144.reuse, R18 ?W2;                       // FMUL storeReg1, alpha.reuse, C_r1_c8
      FMUL  R170, R144.reuse, R48 ?W2;                       // FMUL storeReg2, alpha.reuse, C_r2_c8
      FMUL  R171, R144.reuse, R50 ?W2;                       // FMUL storeReg3, alpha.reuse, C_r3_c8
      FMUL  R172, R144.reuse, R80 ?W2;                       // FMUL storeReg4, alpha.reuse, C_r4_c8
      FMUL  R173, R144.reuse, R82 ?W2;                       // FMUL storeReg5, alpha.reuse, C_r5_c8
      FMUL  R174, R144.reuse, R112 ?W2;                      // FMUL storeReg6, alpha.reuse, C_r6_c8
      FMUL  R175, R144.reuse, R114 ?W2;                      // FMUL storeReg7, alpha.reuse, C_r7_c8
      FMUL  R176, R144.reuse, R17 ?W2;                       // FMUL storeReg8, alpha.reuse, C_r0_c9
      FMUL  R177, R144.reuse, R19 ?W2;                       // FMUL storeReg9, alpha.reuse, C_r1_c9
      FMUL  R178, R144.reuse, R49 ?W2;                       // FMUL storeReg10, alpha.reuse, C_r2_c9
      FMUL  R179, R144.reuse, R51 ?W2;                       // FMUL storeReg11, alpha.reuse, C_r3_c9
      FMUL  R180, R144.reuse, R81 ?W2;                       // FMUL storeReg12, alpha.reuse, C_r4_c9
      FMUL  R181, R144.reuse, R83 ?W2;                       // FMUL storeReg13, alpha.reuse, C_r5_c9
      FMUL  R182, R144.reuse, R113 ?W2;                      // FMUL storeReg14, alpha.reuse, C_r6_c9
      FMUL  R183, R144, R115 ?W2;                            // FMUL storeReg15, alpha, C_r7_c9
      IADD  R148, R148, 8 ?W1;                               // IADD cColMinusN, cColMinusN, 8
      LEPC R130 &req=3 ?W2;                                  // LEPC pc
      CALL.REL  ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_STORE_COL ?W5; // CALL.REL ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_STORE_COL
      LEA.LO   R140, P2, R143.reuse, R140, 4 &req=3 ?W4;     // LEA.LO writePtr, predCarry, strideC.reuse, writePtr, 4
      LEA.HI.X R141, R143, R141, RZ, 4, P2 ?W1;              // LEA.HI.X writePtr_HI, strideC, writePtr_HI, strideC_HI, 4, predCarry
      LEA.LO   R138, P2, R143.reuse, R138, 4 &req=3 ?W4;     // LEA.LO readPtr, predCarry, strideC.reuse, readPtr, 4
      LEA.HI.X R139, R143, R139, RZ, 4, P2 ?W1;              // LEA.HI.X readPtr_HI, strideC, readPtr_HI, strideC_HI, 4, predCarry
      FMUL  R168, R144.reuse, R20 ?W2;                       // FMUL storeReg0, alpha.reuse, C_r0_c10
      FMUL  R169, R144.reuse, R22 ?W2;                       // FMUL storeReg1, alpha.reuse, C_r1_c10
      FMUL  R170, R144.reuse, R52 ?W2;                       // FMUL storeReg2, alpha.reuse, C_r2_c10
      FMUL  R171, R144.reuse, R54 ?W2;                       // FMUL storeReg3, alpha.reuse, C_r3_c10
      FMUL  R172, R144.reuse, R84 ?W2;                       // FMUL storeReg4, alpha.reuse, C_r4_c10
      FMUL  R173, R144.reuse, R86 ?W2;                       // FMUL storeReg5, alpha.reuse, C_r5_c10
      FMUL  R174, R144.reuse, R116 ?W2;                      // FMUL storeReg6, alpha.reuse, C_r6_c10
      FMUL  R175, R144.reuse, R118 ?W2;                      // FMUL storeReg7, alpha.reuse, C_r7_c10
      FMUL  R176, R144.reuse, R21 ?W2;                       // FMUL storeReg8, alpha.reuse, C_r0_c11
      FMUL  R177, R144.reuse, R23 ?W2;                       // FMUL storeReg9, alpha.reuse, C_r1_c11
      FMUL  R178, R144.reuse, R53 ?W2;                       // FMUL storeReg10, alpha.reuse, C_r2_c11
      FMUL  R179, R144.reuse, R55 ?W2;                       // FMUL storeReg11, alpha.reuse, C_r3_c11
      FMUL  R180, R144.reuse, R85 ?W2;                       // FMUL storeReg12, alpha.reuse, C_r4_c11
      FMUL  R181, R144.reuse, R87 ?W2;                       // FMUL storeReg13, alpha.reuse, C_r5_c11
      FMUL  R182, R144.reuse, R117 ?W2;                      // FMUL storeReg14, alpha.reuse, C_r6_c11
      FMUL  R183, R144, R119 ?W2;                            // FMUL storeReg15, alpha, C_r7_c11
      IADD  R148, R148, 8 ?W1;                               // IADD cColMinusN, cColMinusN, 8
      LEPC R130 &req=3 ?W2;                                  // LEPC pc
      CALL.REL  ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_STORE_COL ?W5; // CALL.REL ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_STORE_COL
      LEA.LO   R140, P2, R143.reuse, R140, 4 &req=3 ?W4;     // LEA.LO writePtr, predCarry, strideC.reuse, writePtr, 4
      LEA.HI.X R141, R143, R141, RZ, 4, P2 ?W1;              // LEA.HI.X writePtr_HI, strideC, writePtr_HI, strideC_HI, 4, predCarry
      LEA.LO   R138, P2, R143.reuse, R138, 4 &req=3 ?W4;     // LEA.LO readPtr, predCarry, strideC.reuse, readPtr, 4
      LEA.HI.X R139, R143, R139, RZ, 4, P2 ?W1;              // LEA.HI.X readPtr_HI, strideC, readPtr_HI, strideC_HI, 4, predCarry
      FMUL  R168, R144.reuse, R24 ?W2;                       // FMUL storeReg0, alpha.reuse, C_r0_c12
      FMUL  R169, R144.reuse, R26 ?W2;                       // FMUL storeReg1, alpha.reuse, C_r1_c12
      FMUL  R170, R144.reuse, R56 ?W2;                       // FMUL storeReg2, alpha.reuse, C_r2_c12
      FMUL  R171, R144.reuse, R58 ?W2;                       // FMUL storeReg3, alpha.reuse, C_r3_c12
      FMUL  R172, R144.reuse, R88 ?W2;                       // FMUL storeReg4, alpha.reuse, C_r4_c12
      FMUL  R173, R144.reuse, R90 ?W2;                       // FMUL storeReg5, alpha.reuse, C_r5_c12
      FMUL  R174, R144.reuse, R120 ?W2;                      // FMUL storeReg6, alpha.reuse, C_r6_c12
      FMUL  R175, R144.reuse, R122 ?W2;                      // FMUL storeReg7, alpha.reuse, C_r7_c12
      FMUL  R176, R144.reuse, R25 ?W2;                       // FMUL storeReg8, alpha.reuse, C_r0_c13
      FMUL  R177, R144.reuse, R27 ?W2;                       // FMUL storeReg9, alpha.reuse, C_r1_c13
      FMUL  R178, R144.reuse, R57 ?W2;                       // FMUL storeReg10, alpha.reuse, C_r2_c13
      FMUL  R179, R144.reuse, R59 ?W2;                       // FMUL storeReg11, alpha.reuse, C_r3_c13
      FMUL  R180, R144.reuse, R89 ?W2;                       // FMUL storeReg12, alpha.reuse, C_r4_c13
      FMUL  R181, R144.reuse, R91 ?W2;                       // FMUL storeReg13, alpha.reuse, C_r5_c13
      FMUL  R182, R144.reuse, R121 ?W2;                      // FMUL storeReg14, alpha.reuse, C_r6_c13
      FMUL  R183, R144, R123 ?W2;                            // FMUL storeReg15, alpha, C_r7_c13
      IADD  R148, R148, 8 ?W1;                               // IADD cColMinusN, cColMinusN, 8
      LEPC R130 &req=3 ?W2;                                  // LEPC pc
      CALL.REL  ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_STORE_COL ?W5; // CALL.REL ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_STORE_COL
      LEA.LO   R140, P2, R143.reuse, R140, 4 &req=3 ?W4;     // LEA.LO writePtr, predCarry, strideC.reuse, writePtr, 4
      LEA.HI.X R141, R143, R141, RZ, 4, P2 ?W1;              // LEA.HI.X writePtr_HI, strideC, writePtr_HI, strideC_HI, 4, predCarry
      PSETP.AND P0, PT, !PT ?W1;                             // PSETP.AND P0, PT, !PT
      FMUL  R168, R144.reuse, R28 ?W2;                       // FMUL storeReg0, alpha.reuse, C_r0_c14
      FMUL  R169, R144.reuse, R30 ?W2;                       // FMUL storeReg1, alpha.reuse, C_r1_c14
      FMUL  R170, R144.reuse, R60 ?W2;                       // FMUL storeReg2, alpha.reuse, C_r2_c14
      FMUL  R171, R144.reuse, R62 ?W2;                       // FMUL storeReg3, alpha.reuse, C_r3_c14
      FMUL  R172, R144.reuse, R92 ?W2;                       // FMUL storeReg4, alpha.reuse, C_r4_c14
      FMUL  R173, R144.reuse, R94 ?W2;                       // FMUL storeReg5, alpha.reuse, C_r5_c14
      FMUL  R174, R144.reuse, R124 ?W2;                      // FMUL storeReg6, alpha.reuse, C_r6_c14
      FMUL  R175, R144.reuse, R126 ?W2;                      // FMUL storeReg7, alpha.reuse, C_r7_c14
      FMUL  R176, R144.reuse, R29 ?W2;                       // FMUL storeReg8, alpha.reuse, C_r0_c15
      FMUL  R177, R144.reuse, R31 ?W2;                       // FMUL storeReg9, alpha.reuse, C_r1_c15
      FMUL  R178, R144.reuse, R61 ?W2;                       // FMUL storeReg10, alpha.reuse, C_r2_c15
      FMUL  R179, R144.reuse, R63 ?W2;                       // FMUL storeReg11, alpha.reuse, C_r3_c15
      FMUL  R180, R144.reuse, R93 ?W2;                       // FMUL storeReg12, alpha.reuse, C_r4_c15
      FMUL  R181, R144.reuse, R95 ?W2;                       // FMUL storeReg13, alpha.reuse, C_r5_c15
      FMUL  R182, R144.reuse, R125 ?W2;                      // FMUL storeReg14, alpha.reuse, C_r6_c15
      FMUL  R183, R144, R127 ?W2;                            // FMUL storeReg15, alpha, C_r7_c15
      LEPC R130 &req=3 ?W2;                                  // LEPC pc
      CALL.REL  ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_STORE_COL ?W5; // CALL.REL ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_STORE_COL
      LOP.AND P1, RZ, R137, 8 ?W4;                           // LOP.AND P1, RZ, mode, 8
      ISETP.EQ.AND P5, PT, R133, 0, P1 &req=4 ?W9;           // ISETP.EQ.AND P5, PT, tid, 0, P1
(P1)  IADD32I  R136, R136, 1 &req=4 ?W2;                     // @P1 IADD32I batchIdx, batchIdx, 1
(P1)  BAR.SYNC 0 ?W6;                                        // @P1 BAR.SYNC 0
(P5)  MEMBAR.GPU ?W6;                                        // @P5 MEMBAR.GPU
// Virtual ?REQ_BAR found on next instruction, stop putting ?BARRIER_EXEMPT on decoupled instructions
(P5)  STG.E.EF.32.STRONG.GPU [R166], R136 ?W2;               // @P5 STG.E.EF.32.STRONG.GPU [spinLockPtr], batchIdx
      EXIT ?W5;                                              // EXIT
ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_STORE_COL:
      STS.32  [R129 + 0x0000], R168 ?W1;                     // STS.32 [stsWritePtr + 0x0000], storeReg0
      STS.32  [R129 + 0x0020], R169 ?W1;                     // STS.32 [stsWritePtr + 0x0020], storeReg1
      STS.32  [R129 + 0x0040], R170 ?W1;                     // STS.32 [stsWritePtr + 0x0040], storeReg2
      STS.32  [R129 + 0x0060], R171 ?W1;                     // STS.32 [stsWritePtr + 0x0060], storeReg3
      STS.32  [R129 + 0x0080], R172 ?W1;                     // STS.32 [stsWritePtr + 0x0080], storeReg4
      STS.32  [R129 + 0x00a0], R173 ?W1;                     // STS.32 [stsWritePtr + 0x00a0], storeReg5
      STS.32  [R129 + 0x00c0], R174 ?W1;                     // STS.32 [stsWritePtr + 0x00c0], storeReg6
      STS.32  [R129 + 0x00e0], R175 ?W1;                     // STS.32 [stsWritePtr + 0x00e0], storeReg7
      STS.32  [R129 + 0x0800], R176 ?W1;                     // STS.32 [stsWritePtr + 0x0800], storeReg8
      STS.32  [R129 + 0x0820], R177 ?W1;                     // STS.32 [stsWritePtr + 0x0820], storeReg9
      STS.32  [R129 + 0x0840], R178 ?W1;                     // STS.32 [stsWritePtr + 0x0840], storeReg10
      STS.32  [R129 + 0x0860], R179 ?W1;                     // STS.32 [stsWritePtr + 0x0860], storeReg11
      STS.32  [R129 + 0x0880], R180 ?W1;                     // STS.32 [stsWritePtr + 0x0880], storeReg12
      STS.32  [R129 + 0x08a0], R181 ?W1;                     // STS.32 [stsWritePtr + 0x08a0], storeReg13
      STS.32  [R129 + 0x08c0], R182 ?W1;                     // STS.32 [stsWritePtr + 0x08c0], storeReg14
      STS.32  [R129 + 0x08e0], R183 &rd=1 ?W1;               // STS.32 [stsWritePtr + 0x08e0], storeReg15
      MOV R184, R142 ?W2;                                    // MOV writePreds, readPreds
      ISETP.LT.AND  P2, PT, R145, 0, PT ?W4;                 // ISETP.LT.AND P2, PT, cRowMinusM, 0, PT
      ISETP.LT.AND  P3, PT, R148.reuse, 0, P2 ?W1;           // ISETP.LT.AND P3, PT, cColMinusN.reuse, 0, P2
      ISETP.LT.AND  P4, PT, R148.reuse, -2, P2 ?W4;          // ISETP.LT.AND P4, PT, cColMinusN.reuse, -2, P2
      P2R.B0 R142, PR, RZ, 0x78 ?W2;                         // P2R.B0 readPreds, PR, RZ, 0x78
      ISETP.LT.AND  P3, PT, R148.reuse, -4, P2 ?W1;          // ISETP.LT.AND P3, PT, cColMinusN.reuse, -4, P2
      ISETP.LT.AND  P4, PT, R148      , -6, P2 ?W4;          // ISETP.LT.AND P4, PT, cColMinusN , -6, P2
      P2R.B1 R142, PR, R142, 0x78 ?W2;                       // P2R.B1 readPreds, PR, readPreds, 0x78
      LDS.128 R168, [R132 + 0x0000] &wr=0 ?W1;               // LDS.128 storeReg0, [ldsReadPtr + 0x0000]
      LDS.128 R172, [R132 + 0x2020] &wr=0 ?W1;               // LDS.128 storeReg4, [ldsReadPtr + 0x2020]
      LDS.128 R176, [R132 + 0x4040] &wr=0 ?W1;               // LDS.128 storeReg8, [ldsReadPtr + 0x4040]
      LDS.128 R180, [R132 + 0x6060] &wr=0 ?W2;               // LDS.128 storeReg12, [ldsReadPtr + 0x6060]
      LOP.AND P2, RZ, R137, 32 ?W13EG;                       // LOP.AND P2, RZ, mode, 32
      ISETP.GT.AND P2, PT, R136, 0, P2 ?W13EG;               // ISETP.GT.AND P2, PT, batchIdx, 0, P2
(P2)  BRA.U ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_END_BIAS ?W5; // @P2 BRA.U ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_END_BIAS
ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_END_BIAS:
(!P1) BRA  ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_STORE_COL_WRITE ?W5; // @!P1 BRA ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_STORE_COL_WRITE
      HADD2.F32 R165, -RZ, R157.reuse.H1_H1 &req={2} ?W2;    // HADD2.F32 fetchRegC15, -RZ, fetchRegC7.reuse.H1_H1
      HADD2.F32 R164, -RZ, R157.H0_H0 ?W2;                   // HADD2.F32 fetchRegC14, -RZ, fetchRegC7.H0_H0
      HADD2.F32 R163, -RZ, R156.reuse.H1_H1 ?W2;             // HADD2.F32 fetchRegC13, -RZ, fetchRegC6.reuse.H1_H1
      HADD2.F32 R162, -RZ, R156.H0_H0 ?W2;                   // HADD2.F32 fetchRegC12, -RZ, fetchRegC6.H0_H0
      HADD2.F32 R161, -RZ, R155.reuse.H1_H1 ?W2;             // HADD2.F32 fetchRegC11, -RZ, fetchRegC5.reuse.H1_H1
      HADD2.F32 R160, -RZ, R155.H0_H0 ?W2;                   // HADD2.F32 fetchRegC10, -RZ, fetchRegC5.H0_H0
      HADD2.F32 R159, -RZ, R154.reuse.H1_H1 ?W2;             // HADD2.F32 fetchRegC9, -RZ, fetchRegC4.reuse.H1_H1
      HADD2.F32 R158, -RZ, R154.H0_H0 ?W2;                   // HADD2.F32 fetchRegC8, -RZ, fetchRegC4.H0_H0
      HADD2.F32 R157, -RZ, R153.reuse.H1_H1 ?W2;             // HADD2.F32 fetchRegC7, -RZ, fetchRegC3.reuse.H1_H1
      HADD2.F32 R156, -RZ, R153.H0_H0 ?W2;                   // HADD2.F32 fetchRegC6, -RZ, fetchRegC3.H0_H0
      HADD2.F32 R155, -RZ, R152.reuse.H1_H1 ?W2;             // HADD2.F32 fetchRegC5, -RZ, fetchRegC2.reuse.H1_H1
      HADD2.F32 R154, -RZ, R152.H0_H0 ?W2;                   // HADD2.F32 fetchRegC4, -RZ, fetchRegC2.H0_H0
      HADD2.F32 R153, -RZ, R151.reuse.H1_H1 ?W2;             // HADD2.F32 fetchRegC3, -RZ, fetchRegC1.reuse.H1_H1
      HADD2.F32 R152, -RZ, R151.H0_H0 ?W2;                   // HADD2.F32 fetchRegC2, -RZ, fetchRegC1.H0_H0
      HADD2.F32 R151, -RZ, R150.reuse.H1_H1 ?W2;             // HADD2.F32 fetchRegC1, -RZ, fetchRegC0.reuse.H1_H1
      HADD2.F32 R150, -RZ, R150.H0_H0 ?W10;                  // HADD2.F32 fetchRegC0, -RZ, fetchRegC0.H0_H0
(P2)  BRA.U   ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_STORE_COL_WRITE ?W5; // @P2 BRA.U ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_STORE_COL_WRITE
      FFMA R168, R128.reuse, R150, R168 &req={2,0,4} ?W2;    // FFMA storeReg0, beta.reuse, fetchRegC0, storeReg0
      FFMA R169, R128.reuse, R151, R169 ?W2;                 // FFMA storeReg1, beta.reuse, fetchRegC1, storeReg1
      FFMA R170, R128.reuse, R152, R170 ?W2;                 // FFMA storeReg2, beta.reuse, fetchRegC2, storeReg2
      FFMA R171, R128.reuse, R153, R171 ?W2;                 // FFMA storeReg3, beta.reuse, fetchRegC3, storeReg3
      FFMA R172, R128.reuse, R154, R172 ?W2;                 // FFMA storeReg4, beta.reuse, fetchRegC4, storeReg4
      FFMA R173, R128.reuse, R155, R173 ?W2;                 // FFMA storeReg5, beta.reuse, fetchRegC5, storeReg5
      FFMA R174, R128.reuse, R156, R174 ?W2;                 // FFMA storeReg6, beta.reuse, fetchRegC6, storeReg6
      FFMA R175, R128.reuse, R157, R175 ?W2;                 // FFMA storeReg7, beta.reuse, fetchRegC7, storeReg7
      FFMA R176, R128.reuse, R158, R176 ?W2;                 // FFMA storeReg8, beta.reuse, fetchRegC8, storeReg8
      FFMA R177, R128.reuse, R159, R177 ?W2;                 // FFMA storeReg9, beta.reuse, fetchRegC9, storeReg9
      FFMA R178, R128.reuse, R160, R178 ?W2;                 // FFMA storeReg10, beta.reuse, fetchRegC10, storeReg10
      FFMA R179, R128.reuse, R161, R179 ?W2;                 // FFMA storeReg11, beta.reuse, fetchRegC11, storeReg11
      FFMA R180, R128.reuse, R162, R180 ?W2;                 // FFMA storeReg12, beta.reuse, fetchRegC12, storeReg12
      FFMA R181, R128.reuse, R163, R181 ?W2;                 // FFMA storeReg13, beta.reuse, fetchRegC13, storeReg13
      FFMA R182, R128.reuse, R164, R182 ?W2;                 // FFMA storeReg14, beta.reuse, fetchRegC14, storeReg14
      FFMA R183, R128      , R165, R183 ?W2;                 // FFMA storeReg15, beta , fetchRegC15, storeReg15
(!P0) BRA.U  ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_END_PREFETCH_C_AND_BETA_SCALE ?W5; // @!P0 BRA.U ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_END_PREFETCH_C_AND_BETA_SCALE
      R2P PR, R142.B0, 0x78 ?W13EG;                          // R2P PR, readPreds.B0, 0x78
      LEA.LO   R186, P2, R143.reuse, R138, 2 ?W4;            // LEA.LO readPtr2, predCarry, strideC.reuse, readPtr0, 2
      LEA.HI.X R187, R143, R139, RZ, 2, P2 ?W4;              // LEA.HI.X readPtr2_HI, strideC, readPtr0_HI, strideC_HI, 2, predCarry
      LDG.E.EN.LTC128B.64.STRONG.GPU R150, desc[UR4][R138.64], P3 &rd=3 &wr=2 ?W1; // LDG.E.EN.LTC128B.64.STRONG.GPU fetchRegC0, desc[urdDescriptor_UC0][readPtr0.64], P3
      LEA.LO   R188, P2, R143.reuse, R186, 2 ?W4;            // LEA.LO readPtr4, predCarry, strideC.reuse, readPtr2, 2
      LEA.HI.X R189, R143, R187, RZ, 2, P2 ?W4;              // LEA.HI.X readPtr4_HI, strideC, readPtr2_HI, strideC_HI, 2, predCarry
      LDG.E.EN.LTC128B.64.STRONG.GPU R152, desc[UR4][R186.64], P4 &rd=3 &wr=2 ?W1; // LDG.E.EN.LTC128B.64.STRONG.GPU fetchRegC2, desc[urdDescriptor_UC0][readPtr2.64], P4
      R2P PR, R142.B1, 0x78 ?W13EG;                          // R2P PR, readPreds.B1, 0x78
      LEA.LO   R190, P2, R143.reuse, R188, 2 ?W4;            // LEA.LO readPtr6, predCarry, strideC.reuse, readPtr4, 2
      LEA.HI.X R191, R143, R189, RZ, 2, P2 ?W4;              // LEA.HI.X readPtr6_HI, strideC, readPtr4_HI, strideC_HI, 2, predCarry
      LDG.E.EN.LTC128B.64.STRONG.GPU R154, desc[UR4][R188.64], P3 &rd=3 &wr=2 ?W7; // LDG.E.EN.LTC128B.64.STRONG.GPU fetchRegC4, desc[urdDescriptor_UC0][readPtr4.64], P3
      LDG.E.EN.LTC128B.64.STRONG.GPU R156, desc[UR4][R190.64], P4 &rd=3 &wr=2 ?W4; // LDG.E.EN.LTC128B.64.STRONG.GPU fetchRegC6, desc[urdDescriptor_UC0][readPtr6.64], P4
ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_END_PREFETCH_C_AND_BETA_SCALE:
ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_STORE_COL_WRITE:
      LOP.AND P2, RZ, R137, 32 ?W13EG;                       // LOP.AND P2, RZ, mode, 32
(P2)  BRA.U   ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_END_RELU_EPILOG ?W5; // @P2 BRA.U ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_END_RELU_EPILOG
ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_END_RELU_EPILOG:
      F2FP.F16.F32.PACK_AB R168, R169, R168 &req={0,4} ?W2;  // F2FP.F16.F32.PACK_AB storeReg0, storeReg1, storeReg0
      F2FP.F16.F32.PACK_AB R169, R171, R170 ?W2;             // F2FP.F16.F32.PACK_AB storeReg1, storeReg3, storeReg2
      F2FP.F16.F32.PACK_AB R170, R173, R172 ?W2;             // F2FP.F16.F32.PACK_AB storeReg2, storeReg5, storeReg4
      F2FP.F16.F32.PACK_AB R171, R175, R174 ?W2;             // F2FP.F16.F32.PACK_AB storeReg3, storeReg7, storeReg6
      F2FP.F16.F32.PACK_AB R172, R177, R176 ?W2;             // F2FP.F16.F32.PACK_AB storeReg4, storeReg9, storeReg8
      F2FP.F16.F32.PACK_AB R173, R179, R178 ?W2;             // F2FP.F16.F32.PACK_AB storeReg5, storeReg11, storeReg10
      F2FP.F16.F32.PACK_AB R174, R181, R180 ?W2;             // F2FP.F16.F32.PACK_AB storeReg6, storeReg13, storeReg12
      F2FP.F16.F32.PACK_AB R175, R183, R182 ?W2;             // F2FP.F16.F32.PACK_AB storeReg7, storeReg15, storeReg14
      R2P PR, R184.B0, 0x78 ?W13EG;                          // R2P PR, writePreds.B0, 0x78
      LEA.LO   R186, P2, R143.reuse, R140, 2 &req={1,3} ?W4; // LEA.LO writePtr2, predCarry, strideC.reuse, writePtr0, 2
      LEA.HI.X R187, R143, R141, RZ, 2, P2 ?W1;              // LEA.HI.X writePtr2_HI, strideC, writePtr0_HI, strideC_HI, 2, predCarry
(P3)  STG.E.EF.64.WEAK  desc[UR4][R140.64], R168 &req={0,4} ?W2; // @P3 STG.E.EF.64.WEAK desc[urdDescriptor_UC0][writePtr0.64], storeReg0
      LEA.LO   R188, P2, R143.reuse, R186, 2 ?W4;            // LEA.LO writePtr4, predCarry, strideC.reuse, writePtr2, 2
      LEA.HI.X R189, R143, R187, RZ, 2, P2 ?W1;              // LEA.HI.X writePtr4_HI, strideC, writePtr2_HI, strideC_HI, 2, predCarry
(P4)  STG.E.EF.64.WEAK  desc[UR4][R186.64], R170 ?W2;        // @P4 STG.E.EF.64.WEAK desc[urdDescriptor_UC0][writePtr2.64], storeReg2
      R2P PR, R184.B1, 0x78 ?W13EG;                          // R2P PR, writePreds.B1, 0x78
      LEA.LO   R190, P2, R143.reuse, R188, 2 ?W4;            // LEA.LO writePtr6, predCarry, strideC.reuse, writePtr4, 2
      LEA.HI.X R191, R143, R189, RZ, 2, P2 ?W1;              // LEA.HI.X writePtr6_HI, strideC, writePtr4_HI, strideC_HI, 2, predCarry
(P3)  STG.E.EF.64.WEAK  desc[UR4][R188.64], R172 ?W7;        // @P3 STG.E.EF.64.WEAK desc[urdDescriptor_UC0][writePtr4.64], storeReg4
(P4)  STG.E.EF.64.WEAK  desc[UR4][R190.64], R174 &rd=3 ?W2;  // @P4 STG.E.EF.64.WEAK desc[urdDescriptor_UC0][writePtr6.64], storeReg6
      RET.ABS  R130 + 32 ?W5;                                // RET.ABS pc + 32
ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_END:
	.sectioninfo	@"SHI_REGISTERS=222"
//--------------------- .lw.info.ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt

	.section	.lw.info.ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt,"",@SHT_LWDA_INFO
	// ---- lwinfo : EIATTR_PARAM_CBANK
	.align 4
ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_1:
	.byte  0x04, 0xa
	.short  (ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_3 - ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_2)
	.align 4
ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_2:
	.word	index@(.lw.constant0.ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt)
	.short  0x0160
	.short  0xb0

	// ---- lwinfo : EIATTR_CBANK_PARAM_SIZE
	.align 4
ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_3:
	.byte	0x03, 0x19
	.short  0xb0

	// ---- lwinfo : EIATTR_KPARAM_INFO
	.align 4
ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_4:
	.byte  0x04, 0x17
	.short (ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_6 - ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_5)
ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_5:
	.word	0x00000000
	.short  0x0
	.short  0x0
	.byte  0x00, 0xf0, 0xc1, 0x02

ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_6:
//--------------------- .lw.shared.ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt

	.section	.lw.shared.ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt,"aw",@nobits
	.align 4
	.zero 49148
	.word shmem_reloc_ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt
//--------------------- .lw.callgraph             --------------------------
	.section	.lw.callgraph,"",@"SHT_CALLGRAPH"
	.sectionentsize	8
	.align 4
	.byte	0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff
	.align 4
	.byte	0x00, 0x00, 0x00, 0x00, 0xfe, 0xff, 0xff, 0xff
	.byte	0x00, 0x00, 0x00, 0x00, 0xfd, 0xff, 0xff, 0xff

// ------------------- lwinfo        --------
	.section	.lw.info,"",@SHT_LWDA_INFO

	// ---- lwinfo : EIATTR_MIN_STACK_SIZE
	.align 4
.ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_L1:
	.byte  0x04, 0x12
	.short  (.ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_L3 - .ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_L2)
	.align 4
.ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_L2:
	.word	index@(ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt)
	.word  0x0

	// ---- lwinfo : EIATTR_FRAME_SIZE
	.align 4
.ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_L3:
	.byte  0x04, 0x11
	.short  (.ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_L5 - .ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_L4)
	.align 4
.ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_L4:
	.word	index@(ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt)
	.word  0x0

.ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_L5:

//--------------------- .lw.constant0.ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt
	.section	.lw.constant0.ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt,"a",@progbits
	.align 4
.ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_L6:
	.zero     528

// ------------------- Symbol --------

// const ShaderParams ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt_params = {
//     /* version             */ 1,
//     /* name                */ "ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt",
//     /* kernel              */ (void*)ampere_fp16_s16816gemm_fp16_256x128_ldg8_f2f_mods_stages_64x3_nt,
//     /* chipFamily          */ GEMM_CHIP_AMPERE,
//     /* gemmType            */ S16816GEMM,
//     /* typeA               */ R_16F,
//     /* typeAm              */ R_32F,
//     /* packCountA             1, */
//     /* typeB               */ R_16F,
//     /* packCountB             1, */
//     /* typeC               */ R_16F,
//     /* packCountC             1, */
//     /* typeEpilog          */ R_32F,
//     /* packCountEpilog        1, */
//     /* shapeC              */ RECT,
//     /* layoutA             */ N,
//     /* layoutB             */ T,
//     /* log2ElementsPerLdgA */ 3,
//     /* log2ElementsPerLdgB */ 3,
//     /* reLuAndBias         */ 0,
//     /* isReleaseKernel     */ 1,
//     /* numRegisters        */ 220,
//     /* usedRegisters          217, */
//     /* sharedMemSize       */ 147456,  /* 144.000 KB */
//     /* elementRowsPerCta   */ 256,
//     /* elementRowsPerWarp     64, */
//     /* elementColsperCta   */ 128,
//     /* elementColsPerWarp     64, */
//     /* threadsPerCta       */ 256,
//     /* raggedMn            */ true,
//     /* warpStrideK         */ 8,
//     /* shiftFastA          */ 6,
//     /* multiplierSlowA     */ 64,
//     /* offsetSlowA         */ 0,
//     /* shiftFastB          */ 6,
//     /* multiplierSlowB     */ 64,
//     /* offsetSlowB         */ 0,
//     /* shiftFastAm         */ 6,
//     /* multiplierSlowAm    */ 64,
//     /* offsetSlowAm        */ 0,
//     /* kBlock              */ 64,
//     /* lwDnnEdges          */ LWDNN_NONE,
//     /* lwDnnLayout         */ NCHW,
//     /* lwDnnStridedB       */ false,
//     /* lwDnnSplitK         */ false,
//     /* lwDnnDgrad          */ false,
//     /* lwDnnWgrad          */ false,
//     /* sliceRows           */ 1,
//     /* sliceCols           */ 1,
//     /* abiVersion          */ ABI_AMPERE_G
// };
