/*
 * LWIDIA_COPYRIGHT_BEGIN
 *
 * Copyright 2015-2016 by LWPU Corporation.  All rights reserved.  All
 * information contained herein is proprietary and confidential to LWPU
 * Corporation.  Any use, reproduction, or disclosure without the written
 * permission of LWPU Corporation is prohibited.
 *
 * LWIDIA_COPYRIGHT_END
 */

//********************************************************************
// This file contains the lwca kernel for EccTexTest.
//
// The code is written in LWASM because the compiler tends to
// optimize or rearrange the low-level register accesses, even if
// written in PTX.  Guides for programming LWASM can be found at:
//
// - //sw/compiler/gpgpu/doc/spec/abi/next/abi-fermi.pdf
// - //sw/compiler/gpgpu/doc/spec/abi/next/abi-kepler.pdf
// - //sw/compiler/gpgpu/doc/spec/DCI/Maxwell_DCI.txt
// - //sw/compiler/gpgpu/doc/spec/DCI/Pascal_DCI.txt
// - https://wiki.lwpu.com/engwiki/index.php/Compiler_and_OCG/Compute_Compiler/ptxas#Dolwments
// - //hw/class/fermi/SASS/doc/opcodes.htm
// - //hw/doc/gpu/kepler/kepler/design/IAS/SML1/ISA/opcodes.htm
// - //hw/doc/gpu/maxwell/maxwell/design/IAS/SM/ISA/opcodes.htm
//
//********************************************************************
#include "eccdefs.h"
#if SM_VER == 60
    .headerflags @"EF_LWDA_SM60 EF_LWDA_PTX_SM(EF_LWDA_SM60) EF_LWDA_64BIT_ADDRESS"
#elif SM_VER == 62 // SM_VER 62 may be different.
    .headerflags @"EF_LWDA_SM60 EF_LWDA_PTX_SM(EF_LWDA_SM60) EF_LWDA_64BIT_ADDRESS"
#elif SM_VER == 70
    .headerflags @"EF_LWDA_SM70 EF_LWDA_PTX_SM(EF_LWDA_SM70) EF_LWDA_64BIT_ADDRESS"
#endif


//--------------------------------------------------------------------
// Colwenience macros to call functions with arguments.
//
// Unless stated otherwise, functions in this file follow the
// following colwentions:
// - Arguments are passed in R0, R1, etc.
// - The return value, if any, is returned in R0.
// - Registers R0-R3 may used as local storage so that their original
//   values are lost ("destroyed").
//
// These macros "push" the arguments in reverse order to make it
// easier to pass R0 and R1 as arguments.
//
#define CALL1(func, arg)        \
    MOV R0, arg;                \
    CAL func

#define CALL2(func, arg0, arg1) \
    MOV R1, arg1;               \
    MOV R0, arg0;               \
    CAL func

//--------------------------------------------------------------------
// Colwenience macros to define a for-loop, with the loop index stored
// in a local var.  For ease of implementation, this for-loop iterates
// backward from N to 1, with N already loaded in loopVar, and assumes
// N > 0.
//
#define FOR(label, loopVar)             \
        SSY label##_1;                  \
    label##_0:

#define END_FOR(label, loopVar)         \
        MOV R0, loopVar;                \
        IADD R0.CC, R0, -1;             \
        MOV loopVar, R0;                \
        BRA CC.NE, label##_0;           \
        SYNC;                           \
    label##_1:

//--------------------------------------------------------------------
// Colwenience macros to define an if-then-else statement.
//
#define IF(label, var, cmp, value)        \
        ISETP.cmp.U32 P0, var, value;     \
        SSY label##_EndIf;                \
        @!P0 BRA label##_Else;

#define ELSE(label)     \
        SYNC;           \
    label##_Else:

#define END_IF(label)   \
        SYNC;           \
    label##_EndIf:

//--------------------------------------------------------------------
// Send a command to the CPU.
//
// Usually, we use the SendHostCommand() function to send commands to
// the CPU.  But during the brief period when checkbits are disabled,
// we want to avoid writing to registers -- especially the register
// that we're creating ECC errors on.  So we use this macro while
// disabling checkbits, and SendHostCommand() everywhere else.
//
// label [in]: A unique string used as a prefix for local labels
// pHostCommand [in]: A register pair containing the address of the
// HostCommand object.
// cmd [out]: A register containing the command to send to the CPU
// arg [out]: A register containing the argument to send to the CPU
// tmp: A register used for local storage; destroyed.  The only
//    values that this macro should write to tmp are cmd and
//    HOST_DONE.
//
// Note: When polling on the global HostCommand data if we poll too
//      fast we end up causing our cache lines for L1 to be evicted.
//      When this happens we get a reload from L2 with the correct 
//      checkbits and we don't want this when ECC has been re-enabled.
//      To prevent this we slow down the polling period. The value
//      of 500us was empirically chosen based on a GP100 with 30 SMs.
#define SEND_HOST_COMMAND(label, pHostCommand, cmd, arg, tmp)   \
        STG.E.WT.32 [pHostCommand + 4], arg;                    \
        MEMBAR.SYS;                                             \
        STG.E.WT.32 [pHostCommand], cmd;                        \
        SSY label##_End;                                        \
    label##_Loop:                                               \
        S2R TimerLo, SR_GlobalTimerLo;                          \
        S2R TimerHi, SR_GlobalTimerHi;                          \
        IADD TimerLo.CC, TimerLo, TimerDelay;                   \
        IADD.X TimerHi, TimerHi, RZ;                            \
                                                                \
    label##_WaitLoop:                                           \
        S2R R4, SR_GlobalTimerLo;                               \
        S2R R5, SR_GlobalTimerHi;                               \
        IADD RZ.CC, R4, -TimerLo;                               \
        ISETP.LT.X P0, R5, TimerHi;                             \
        @P0 BRA label##_WaitLoop;                               \
                                                                \
        LDG.E.CV.32 tmp, [pHostCommand];                        \
        ISETP.NE.U32 P0, tmp, HOST_DONE;                        \
        @P0 BRA label##_Loop;                                   \
        SYNC;                                                   \
    label##_End:

//----------------------------------------------------------------------
// Entry point for the ecctex kernel.
//
// This kernel runs a loop that inserts one ECC error per warp on
// each iteration.  That works out to about 400 errors per iteration,
// since typical GPUs have about 12 SMs and 32 warps per SM.  The
// algorithm looks like this:
//
//      for m_LoopIdx in [0..NUM_LOOPS]:
//          m_TestThread = random thread in warp
//          m_ErrType = randomly choose 0 (SBE) or 1 (DBE)
//          m_BadValue = randomly choose a value with 1(SBE) or 2(DBE) bits set
//          if (this thread == m_TestThread):
//              callwlate the thread specific address for local writes
//              callwlate the thread speficic address for scratch reads
//              Disable ECC checkbits
//              Write m_BadValue to global storage
//              Enable ECC checkbits
//              Read from scratch to clear hw flops
//              Read m_BadValue to induce ECC error
//
// This kernel mostly uses registers instead of local memory variables, because using local 
// memory specifically the LDL/STL instructions cause OOR_ADR exceptions when an ECC correction 
// oclwrs. I don't understand why this happens and we should probably file a bug against either 
// compiler or hardware for this.
// To avoid extraneous register-writes while checkbits are disabled (which could inject extra ECC
//  errors), the kernel loads all of the registers before checkbits are disabled, and treats
// those registers as read-only until checkbits are re-enabled.
//
// Register Allocation
// R0 - R6 scratch
// Note: The ???Lo/???Hi registers store 64 bits values and the Lo/Hi combinations must start on an 
//       even numbered register, ie. R14/R15, R18/R19, etc.
#define HstDisChkBits           R7      //holds the constant HOST_DISABLE_CHECKBITS
#define HstEnChkBits            R8      //holds the constant HOST_ENABLE_CHECKBITS
#define WarpId                  R9
#define HostCommandLo           R10     //address to the command surface object
#define HostCommandHi           R11
#define TestSurfaceLo           R12     //address to the start of the test surface object
#define TestSurfaceHi           R13
#define TestSurfaceTidLo        R14     //location in test surface for this thread ID (tid)
#define TestSurfaceTidHi        R15
#define TestSurfaceTidScratchLo R16     //location of the scratch area for this tid
#define TestSurfaceTidScratchHi R17
#define Rng                     R18
#define LoopIdx                 R19
#define TestThread              R20
#define ErrType                 R21
#define BadValueLo              R22
#define BadValueHi              R23
#define TimerLo                 R24
#define TimerHi                 R25
#define TimerDelay              R26


.section .text.InjectErrors, "ax", @progbits
    .sectionflags @"SHF_BARRIERS=1"
    .sectioninfo @"SHI_REGISTERS=29" // NUM_REGISTERS
    .align 4

InjectErrors:
    .global InjectErrors
    .type InjectErrors, @function
    .other InjectErrors, @"STO_LWDA_ENTRY STV_DEFAULT"

    // Initialize local registers 
    //
    MOV32I R0, 32@lo(HostCommand);
    MOV32I R1, 32@hi(HostCommand);
    LD.E.64 HostCommandLo, [R0];

    MOV32I R0, 32@lo(TestSurface);
    MOV32I R1, 32@hi(TestSurface);
    LD.E.64 TestSurfaceLo, [R0];

    MOV32I R0, 32@lo(NumLoops);
    MOV32I R1, 32@hi(NumLoops);
    LD.E LoopIdx, [R0];

    MOV32I R0, 32@lo(Seed);
    MOV32I R1, 32@hi(Seed);
    LD.E Rng, [R0];


    MOV HstDisChkBits, HOST_DISABLE_CHECKBITS;
    MOV HstEnChkBits, HOST_ENABLE_CHECKBITS;
    MOV TimerDelay, 125000; //  4ns increments = 500us
    CAL FlushCache;
        
    // HostCommandLo += WarpId * COMMAND_SIZE
    //
    CAL GetWarpId;
    IMUL.U32.U32.LO R2, WarpId, COMMAND_SIZE;

    IADD HostCommandLo.CC, HostCommandLo, R2;
    IADD.X HostCommandHi, HostCommandHi, RZ;

    // Main loop
    //
    FOR (L_InjectErrors_For, LoopIdx )
        CAL FlushCache;

        // Randomly choose what error to insert.
        //
        // Implementation: When we write a register with checkbits disabled,
        // Fermi preserves the old checkbits but Kepler+ overwrites the
        // checkbits with 0.  So we can set m_GoodValue to any value in Fermi,
        // but in Kepler+ we must set it to a value (such as 0) that has
        // checkbits=0 in order to aclwrately insert an SBE or DBE.
        //
        //Use the loop index to determine what thread to run.
        MOV R0, LoopIdx;
        IADD R0, R0, -1;
        LOP.AND R0, R0, 0x1f; //R0 = LoopIdx%16
        MOV TestThread, R0; 

        // The kernel needs to access two locations per warp in the test surface that are on cache
        // line boundries so that we can flush the hw flops. To do that we are changing the buffer
        // organization to store the TestSurfaceTid in the 1st 256 bytes (32threads * 8 bytes) 
        // and the scratch location (TestSurfaceTidScratch) in the 2nd 256 bytes. 
        // So each SM will consume 512 bytes/warp
        // Test offset = (warp_id * 512) + (TestThread * 8)
        // Scratch offset = Test offset + 256
        SHL R0, WarpId, 9;      // R0 = warpId * 512
        SHL R2, TestThread, 3;  // R2 = TestThread * 8
        IADD R2, R2, R0;        // R2 = (warpId*512) + (TestThread*8)
        
        MOV R0, TestSurfaceLo;
        MOV R1, TestSurfaceHi;

        IADD R0.CC, R0, R2;     // Add thread offset (account for carry)
        IADD.X R1, R1, RZ;
        MOV TestSurfaceTidLo, R0; 
        MOV TestSurfaceTidHi, R1; 

        IADD R0.CC, R0, 0x100;   // Add scratch surface offset (account for carry)
        IADD.X R1, R1, RZ;
        MOV TestSurfaceTidScratchLo, R0; 
        MOV TestSurfaceTidScratchHi, R1; 
        
        CALL1(GetRandom, 2); // 0=SBE, 1=DBE
        MOV ErrType, R0; 

        CALL1(GetRandomBits, R0);
        MOV BadValueLo, R0; 
        MOV BadValueHi, RZ; 
        
        // Inject an error in one thread on each warp.  The counters
        // can't keep track if we inject more than one error per warp
        // at a time.
        //
        CAL GetThreadId;  //R0 = ThreadId
        IF (L_InjectErrors_If0, R0, EQ, TestThread)

            // Tell the CPU about the error we're about to inject.
            //
            CALL2(SendHostCommand, HOST_STORE_THREAD_ID, TestThread);
            CALL2(SendHostCommand, HOST_STORE_ERR_TYPE, ErrType);

            // Here's the heart of the test: 
            // 1. disable checkbits, 
            // 2. toggle 1-2 bits and perform a 64bit write to global storage.
            //    This will set all the check bits to zero and update
            //    the L2 (not L1) cache.
            // 3. Perform a 64bit read from global storage to update the L1 
            //    cache
            // 4. Re-enable ECC
            // 5. Perform a 64 bit read from global storage to generate ECC
            // 6. Perform a 64 bit write back to global storage for verification.
            // (see eccdefs.h).
            //
            // DISABLE_CHECKBITS
            SEND_HOST_COMMAND(L_InjectErrors_Cmd0, HostCommandLo, HstDisChkBits, RZ, R0) 

            // Store globally to the L2 cache, then read back into L1 cache 
            // The readback into L1 with ECC disabled should set all checkbits = 0.
            // The checkbits span 64bits of data, so do a 64bit write to clear all of the bits 
            STG.E.CG.64 [TestSurfaceTidLo], BadValueLo;     //write through to L2
            LDG.E.CA.64 R0, [TestSurfaceTidLo];             //read back into L1
            MEMBAR.SYS;                                             

            //ENABLE_CHECKBITS
            SEND_HOST_COMMAND(L_InjectErrors_Cmd1, HostCommandLo, HstEnChkBits, RZ, R0) 

            // Add dummy read a multiple of 128 bytes from target read to flush the hw flops.
            // This is required to WAR the hardware optimization. So read from TestSurfaceTidScratch
            LDG.E.CA.64 R2, [TestSurfaceTidScratchLo]; 

            // Read back the value to trigger ECC
            LDG.E.CA.64 R0, [TestSurfaceTidLo];

            // Store the value read from L1 back to the Test Surface scratch space for checking
            STG.E.CG.64 [TestSurfaceTidScratchLo], R0;

            CALL2(SendHostCommand, HOST_CHECK_COUNTS, RZ);
        ELSE (L_InjectErrors_If0)
        END_IF (L_InjectErrors_If0)
    END_FOR (L_InjectErrors_For, LoopIdx)

    CALL2(SendHostCommand, GPU_DONE, RZ);
    EXIT;

//--------------------------------------------------------------------
// Flush all the caches 
//
FlushCache:
    SSY CACHE_FLUSH_0;
    CCTL.D.IVALL;
    CCTL.I.IVALL;
    CCTLL.IVALL;
    SYNC;
    CACHE_FLUSH_0:
    RET;
    

//--------------------------------------------------------------------
// Get a unique id for each (SM,warp), numbered from 0 to num_warps-1
// R0 [out]: Warp id = (ctaid.x * ntid.y)+tid.y
// R1-R2: Destroyed
//
GetWarpId:
    S2R R0, SR_CTAID.X;         // R0 = ctaid.x (SM id)
#if SM_VER == 60                // R1 = ntid.y (warps per SM assuming that ntid.x = 32)
    MOV R1, c[0][12];           // See Maxwell_DCI.txt/Pascal_DCI.txt
#else
    MOV R1, c[0][12];           // See Maxwell_DCI.txt/Pascal_DCI.txt
#endif
    S2R R2, SR_TID.Y;           // R2 = tid.y (warp id)
    IMUL.U32.U32.LO R0, R0, R1; // return R0 * R1 + R2
    IADD R0, R0, R2;
    MOV WarpId, R0;
    RET;


//--------------------------------------------------------------------
// Get the id of the current thread within the warp,
// from 0 to WARP_SIZE-1.
// R0 [out]: thread id
//
GetThreadId:
    S2R R0, SR_LaneId;
    RET;

//--------------------------------------------------------------------
// Update the random-number generator
// R0 [out]: New RNG state
//
UpdateRng:
    MOV R0, Rng; //Rng
    IMUL32I.U32.U32.LO R0, R0, 1664525;
    IADD32I R0, R0, 1013904223;
    MOV Rng, R0; //Rng
    RET;

//--------------------------------------------------------------------
// Generate a random number from 0 to N-1
// R0 [in]: Range of the randomly-generated number
// R0 [out]: Random number from 0 to R0[in]-1
// R1: Destroyed
//
GetRandom:
    MOV R1, R0;
    CAL UpdateRng;
    IMUL.U32.U32.HI R0, R0, R1;
    RET;

//--------------------------------------------------------------------
// Generate a random number from 0 to 0xffffffff
// R0 [out]: Random 32-bit integer
// R1: Destroyed
//
GetRandom32:
    CAL UpdateRng;
    MOV R1, R0;
    CAL UpdateRng;
    PRMT R0, R0, 0x7632, R1;
    RET;

//--------------------------------------------------------------------
// Return a 32-bit number with 1 or 2 bits set, the rest 0.
// R0 [in]: 0 = set one bit in the return value, 1 = set two bits
// R0 [out]: 32-bit number with 1-2 random bits set
// R1-R2: Destroyed
//
GetRandomBits:
    IF (L_GetRandomBits, R0, EQ, RZ)
        CALL1(GetRandom, 32);
        MOV R1, 1;
        SHL.W R0, R1, R0;
    ELSE (L_GetRandomBits)
        CALL1(GetRandom, 32);
        MOV R2, R0;
        CALL1(GetRandom, 31);
        IADD.PO R0, R0, R2;
        MOV R1, 1;
        SHL.W R0, R1, R0;
        SHL.W R2, R1, R2;
        LOP.OR R0, R0, R2;
    END_IF (L_GetRandomBits)
    RET;

//--------------------------------------------------------------------
// Send a command to the CPU.
// R0 [in]: The command to send
// R1 [in]: The argument of the command
// R1-R3: Destroyed
//
SendHostCommand:
    MOV R2, HostCommandLo;
    MOV R3, HostCommandHi;
    SEND_HOST_COMMAND(L_SendHostCommand, R2, R0, R1, R1)
    RET;


//--------------------------------------------------------------------
// Info section
//
.section .lw.info, "" ,@"SHT_LWDA_INFO"
    .align 4

    .byte 4, 17         // EIATTR_FRAME_SIZE
    .short 8
    .word index@(InjectErrors)
    .word  StackSize

    .byte 4, 18         // EIATTR_MIN_STACK_SIZE
    .short 8
    .word index@(InjectErrors)
    .word StackSize

//--------------------------------------------------------------------
// Kernel parameters
//
.section .lw.constant0.InjectErrors, "a", @progbits
    .align 4
    .zero 320


//--------------------------------------------------------------------
// Constants
//

//--------------------------------------------------------------------
// Global variables
//
.section .lw.global, "aw", @nobits
    .align 8
HostCommand:
    .global HostCommand
    .type HostCommand, @object
    .size HostCommand, 8
    .zero 8
TestSurface:
    .global TestSurface
    .type TestSurface, @object
    .size TestSurface, 8
    .zero 8
NumLoops:
    .global NumLoops
    .type NumLoops, @object
    .size NumLoops, 4
    .zero 4
Seed:
    .global Seed
    .type Seed, @object
    .size Seed, 4
    .zero 4

//--------------------------------------------------------------------
// Local variables
//
    .set StackSize,   0x200

