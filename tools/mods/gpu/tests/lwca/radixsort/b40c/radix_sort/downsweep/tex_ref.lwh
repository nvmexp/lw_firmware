/******************************************************************************
 * 
 * Copyright 2010-2012 Duane Merrill
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. 
 * 
 * For more information, see our Google Code project site: 
 * http://code.google.com/p/back40computing/
 * 
 ******************************************************************************/

/******************************************************************************
 * Texture references for downsweep kernels
 ******************************************************************************/

#pragma once

#include <b40c/util/error_utils.lwh>
#include <b40c/util/basic_utils.lwh>
#include <b40c/util/tex_vector.lwh>

namespace b40c {
namespace radix_sort {
namespace downsweep {

/******************************************************************************
 * Key textures
 ******************************************************************************/

/**
 * Templated texture reference for downsweep keys
 */
template <typename KeyVectorType>
struct TexKeys
{
#ifndef __LWDACC__
    LWtexref ref0;
    LWtexref ref1;
#else
	// Texture reference type
	typedef texture<KeyVectorType, lwdaTextureType1D, lwdaReadModeElementType> TexRef;

	static TexRef ref0;
	static TexRef ref1;
#endif    

	/**
	 * Bind textures
	 */
#ifndef __LWDACC__
	lwdaError_t BindTexture(
		void *d0,
		void *d1,
		size_t bytes)
	{
		lwdaError_t retval = lwdaSuccess;

		if (d0) {
            size_t byteoffset;
            lwTexRefSetAddress(&byteoffset, ref0, (LWdeviceptr)d0, bytes);
            lwTexRefSetFormat(ref0, LW_AD_FORMAT_UNSIGNED_INT32, 4);
//          lwTexRefSetAddressMode(ref0, 0, LW_TR_ADDRESS_MODE_CLAMP);
//          lwTexRefSetAddressMode(ref0, 1, LW_TR_ADDRESS_MODE_CLAMP);
//          lwTexRefSetAddressMode(ref0, 2, LW_TR_ADDRESS_MODE_CLAMP);
//          lwTexRefSetFilterMode(ref0, LW_TR_FILTER_MODE_POINT);
		}
		if (d1) {
            size_t byteoffset;
            lwTexRefSetAddress(&byteoffset, ref1, (LWdeviceptr)d1, bytes);
            lwTexRefSetFormat(ref1, LW_AD_FORMAT_UNSIGNED_INT32, 4);
//          lwTexRefSetAddressMode(ref1, 0, LW_TR_ADDRESS_MODE_CLAMP);
//          lwTexRefSetAddressMode(ref1, 1, LW_TR_ADDRESS_MODE_CLAMP);
//          lwTexRefSetAddressMode(ref1, 2, LW_TR_ADDRESS_MODE_CLAMP);
//          lwTexRefSetFilterMode(ref1, LW_TR_FILTER_MODE_POINT);
		}

		return retval;
	}
#else
    static lwdaError_t BindTexture(
		void *d0,
		void *d1,
		size_t bytes)
	{
		lwdaError_t retval = lwdaSuccess;
		do {
			lwdaChannelFormatDesc tex_desc = lwdaCreateChannelDesc<KeyVectorType>();

			if (d0) {
				// Bind key texture ref0
				retval = lwdaBindTexture(0, ref0, d0, tex_desc, bytes);
				if ((retval = util::B40CPerror(retval, "lwdaBindTexture failed", __FILE__, __LINE__))) break;
			}
			if (d1) {
				// Bind key texture ref1
				retval = lwdaBindTexture(0, ref1, d1, tex_desc, bytes);
				if ((retval = util::B40CPerror(retval, "lwdaBindTexture failed", __FILE__, __LINE__))) break;
			}
		} while (0);

		return retval;
	}
#endif
};

// Texture reference definitions
#ifdef __LWDACC__
template <typename KeyVectorType>
typename TexKeys<KeyVectorType>::TexRef TexKeys<KeyVectorType>::ref0;

template <typename KeyVectorType>
typename TexKeys<KeyVectorType>::TexRef TexKeys<KeyVectorType>::ref1;
#endif


/******************************************************************************
 * Value textures
 ******************************************************************************/

/**
 * Templated texture reference for downsweep values
 */
template <typename ValueVectorType>
struct TexValues
{
#ifndef __LWDACC__
    LWtexref ref0;
    LWtexref ref1;
#else
	// Texture reference type
	typedef texture<ValueVectorType, lwdaTextureType1D, lwdaReadModeElementType> TexRef;

	static TexRef ref0;
	static TexRef ref1;
#endif
    

	/**
	 * Bind textures
	 */
#ifndef __LWDACC__
	lwdaError_t BindTexture(
		void *d0,
		void *d1,
		size_t bytes)
	{
		lwdaError_t retval = lwdaSuccess;

		if (d0) {
            size_t byteoffset;
            lwTexRefSetAddress(&byteoffset, ref0, (LWdeviceptr)d0, bytes);
            lwTexRefSetFormat(ref0, LW_AD_FORMAT_UNSIGNED_INT32, 4);
//          lwTexRefSetAddressMode(ref0, 0, LW_TR_ADDRESS_MODE_CLAMP);
//          lwTexRefSetAddressMode(ref0, 1, LW_TR_ADDRESS_MODE_CLAMP);
//          lwTexRefSetAddressMode(ref0, 2, LW_TR_ADDRESS_MODE_CLAMP);
//          lwTexRefSetFilterMode(ref0, LW_TR_FILTER_MODE_POINT);
		}
		if (d1) {
            size_t byteoffset;
            lwTexRefSetAddress(&byteoffset, ref1, (LWdeviceptr)d1, bytes);
            lwTexRefSetFormat(ref1, LW_AD_FORMAT_UNSIGNED_INT32, 4);
//          lwTexRefSetAddressMode(ref1, 0, LW_TR_ADDRESS_MODE_CLAMP);
//          lwTexRefSetAddressMode(ref1, 1, LW_TR_ADDRESS_MODE_CLAMP);
//          lwTexRefSetAddressMode(ref1, 2, LW_TR_ADDRESS_MODE_CLAMP);
//          lwTexRefSetFilterMode(ref1, LW_TR_FILTER_MODE_POINT);
		}

		return retval;
	}
#else
    static lwdaError_t BindTexture(
		void *d0,
		void *d1,
		size_t bytes)
	{
		lwdaError_t retval = lwdaSuccess;
		do {
			lwdaChannelFormatDesc tex_desc = lwdaCreateChannelDesc<ValueVectorType>();

			if (d0) {
				// Bind key texture ref0
				retval = lwdaBindTexture(0, ref0, d0, tex_desc, bytes);
				if ((retval = util::B40CPerror(retval, "lwdaBindTexture failed", __FILE__, __LINE__))) break;
			}
			if (d1) {
				// Bind key texture ref1
				retval = lwdaBindTexture(0, ref1, d1, tex_desc, bytes);
				if ((retval = util::B40CPerror(retval, "lwdaBindTexture failed", __FILE__, __LINE__))) break;
			}
		} while (0);

		return retval;
	}
#endif
};

// Texture reference definitions
#ifdef __LWDACC__
template <typename ValueVectorType>
typename TexValues<ValueVectorType>::TexRef TexValues<ValueVectorType>::ref0;

template <typename ValueVectorType>
typename TexValues<ValueVectorType>::TexRef TexValues<ValueVectorType>::ref1;
#endif


/******************************************************************************
 * Texture types for downsweep kernel
 ******************************************************************************/

template <typename KeyType, typename ValueType, int THREAD_ELEMENTS>
struct Textures
{
	// Elements per texture load
	enum {
		KEY_ELEMENTS_PER_TEX		= util::TexVector<KeyType, THREAD_ELEMENTS>::ELEMENTS_PER_TEX,
		VALUE_ELEMENTS_PER_TEX		= util::TexVector<ValueType, THREAD_ELEMENTS>::ELEMENTS_PER_TEX,
		ELEMENTS_PER_TEX			= LWB_MIN(int(KEY_ELEMENTS_PER_TEX), int(VALUE_ELEMENTS_PER_TEX))
	};

	typedef typename util::TexVector<
		KeyType,
		ELEMENTS_PER_TEX>::VecType KeyTexType;

	// Texture binding for downsweep values
	typedef typename util::TexVector<
		ValueType,
		ELEMENTS_PER_TEX>::VecType ValueTexType;
};


} // namespace downsweep
} // namespace radix_sort
} // namespace b40c

