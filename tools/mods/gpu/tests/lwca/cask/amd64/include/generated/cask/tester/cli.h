// AUTOMATICALLY GENERATED, DO NOT EDIT MANUALLY!!!
// clang-format off
//   DATE: 01/26/2022 21:54:18
//   PYTHONPATH: /home/scratch.bmiranda_sw_1/p4-2001/dev/compute_arch/src/fast_kernels/git/cask_sdk/cask_core:/home/scratch.bmiranda_sw_1/p4-2001/dev/compute_arch/src/fast_kernels/git/cask_sdk/bladeworks:/home/scratch.bmiranda_sw_1/p4-2001/dev/compute_arch/src/fast_kernels/git/cask_sdk/_deps/decorator-src/src:/home/scratch.bmiranda_sw_1/p4-2001/dev/compute_arch/src/fast_kernels/git/cask_sdk/_deps/six-src:/home/scratch.bmiranda_sw_1/p4-2001/dev/compute_arch/src/fast_kernels/git/cask_sdk/_deps/pytools-src:/home/scratch.bmiranda_sw_1/p4-2001/dev/compute_arch/src/fast_kernels/git/cask_sdk/_deps/pymbolic-src:/home/scratch.bmiranda_sw_1/p4-2001/dev/compute_arch/src/fast_kernels/git/cask_sdk/_deps/jinja-src/src:/home/scratch.bmiranda_sw_1/p4-2001/dev/compute_arch/src/fast_kernels/git/cask_sdk/_deps/markupsafe-src/src
//   CMD: /home/scratch.bmiranda_sw_1/p4-2001/dev/compute_arch/src/fast_kernels/git/cask_sdk/cask_core/cask_plugin/scripts/codegen.py --spec /home/scratch.bmiranda_sw_1/p4-2001/dev/compute_arch/src/fast_kernels/git/cask_sdk/cask_core/cask_plugin/specs/graph.py --template /home/scratch.bmiranda_sw_1/p4-2001/dev/compute_arch/src/fast_kernels/git/cask_sdk/cask_core/cask_plugin/templates/tester/cmd_desc.h.j2 --template-dir /home/scratch.bmiranda_sw_1/p4-2001/dev/compute_arch/src/fast_kernels/git/cask_sdk/cask_core/cask_plugin/templates --output /home/scratch.bmiranda_sw_1/p4-2001/dev/compute_arch/src/fast_kernels/git/cask_sdk/_deps/cask_core-build/cask_plugin/include/generated/cask/tester/cli.h --namespace cask_core --only .*
// clang-format on


#pragma once

#include <generated/cask_plugin/operation.h>
#include <generated/cask/tester/operation/json.h>

#include <cask/tester/cmdline.h>
#include <cask/tester/tester.h>

#include <vector>
#include <string>
#include <algorithm>
#include <unordered_map>
#include <type_traits>

namespace cask_plugin {

using ParamDescriptions = cask::tester::ParamDesc;

template <typename> class ArgParser;

class KernelCLI {
protected:
  std::unordered_map<std::string, cask::TensorDesc> tensor_descs_;
};


template<>
class ArgParser<cask_plugin::Convolution> : public cask::tester::ArgParser {
public:
  using Arguments = cask_plugin::Convolution;

  ArgParser(void *args_data) : cask::tester::ArgParser(args_data) {
    assert((args_data != nullptr) && "Must allocate buffer for arguments");
    this->args_ = reinterpret_cast<Arguments *>(args_data);

    using cask::tester::value;
    using cask::tester::FillMode;
    std::vector<cask::tester::ParamDesc::Param> options{
      
      { "", "y.channels",
        "Convolution: y.channels. Default: 32.",
        value<int64_t>(&(args_->y.channels), 32) },
      { "", "y.stride.depth",
        "Convolution: y.stride.depth. Default: -1.",
        value<int64_t>(&(args_->y.stride.depth), -1) },
      { "", "y.stride.height",
        "Convolution: y.stride.height. Default: -1.",
        value<int64_t>(&(args_->y.stride.height), -1) },
      { "", "y.stride.width",
        "Convolution: y.stride.width. Default: -1.",
        value<int64_t>(&(args_->y.stride.width), -1) },
      { "", "y.stride.channels",
        "Convolution: y.stride.channels. Default: -1.",
        value<int64_t>(&(args_->y.stride.channels), -1) },
      { "", "y.stride.batches",
        "Convolution: y.stride.batches. Default: -1.",
        value<int64_t>(&(args_->y.stride.batches), -1) },
      { "", "x.depth",
        "Convolution: x.depth. Default: 1.",
        value<int64_t>(&(args_->x.depth), 1) },
      { "", "x.height",
        "Convolution: x.height. Default: 32.",
        value<int64_t>(&(args_->x.height), 32) },
      { "", "x.width",
        "Convolution: x.width. Default: 32.",
        value<int64_t>(&(args_->x.width), 32) },
      { "", "x.channels",
        "Convolution: x.channels. Default: 32.",
        value<int64_t>(&(args_->x.channels), 32) },
      { "", "x.batches",
        "Convolution: x.batches. Default: 1.",
        value<int64_t>(&(args_->x.batches), 1) },
      { "", "x.stride.depth",
        "Convolution: x.stride.depth. Default: -1.",
        value<int64_t>(&(args_->x.stride.depth), -1) },
      { "", "x.stride.height",
        "Convolution: x.stride.height. Default: -1.",
        value<int64_t>(&(args_->x.stride.height), -1) },
      { "", "x.stride.width",
        "Convolution: x.stride.width. Default: -1.",
        value<int64_t>(&(args_->x.stride.width), -1) },
      { "", "x.stride.channels",
        "Convolution: x.stride.channels. Default: -1.",
        value<int64_t>(&(args_->x.stride.channels), -1) },
      { "", "x.stride.batches",
        "Convolution: x.stride.batches. Default: -1.",
        value<int64_t>(&(args_->x.stride.batches), -1) },
      { "", "w.depth",
        "Convolution: w.depth. Default: 1.",
        value<int64_t>(&(args_->w.depth), 1) },
      { "", "w.height",
        "Convolution: w.height. Default: 3.",
        value<int64_t>(&(args_->w.height), 3) },
      { "", "w.width",
        "Convolution: w.width. Default: 3.",
        value<int64_t>(&(args_->w.width), 3) },
      { "", "w.stride.depth",
        "Convolution: w.stride.depth. Default: -1.",
        value<int64_t>(&(args_->w.stride.depth), -1) },
      { "", "w.stride.height",
        "Convolution: w.stride.height. Default: -1.",
        value<int64_t>(&(args_->w.stride.height), -1) },
      { "", "w.stride.width",
        "Convolution: w.stride.width. Default: -1.",
        value<int64_t>(&(args_->w.stride.width), -1) },
      { "", "w.stride.channels",
        "Convolution: w.stride.channels. Default: -1.",
        value<int64_t>(&(args_->w.stride.channels), -1) },
      { "", "w.stride.filters",
        "Convolution: w.stride.filters. Default: -1.",
        value<int64_t>(&(args_->w.stride.filters), -1) },
      { "", "bias.stride.elems",
        "Convolution: bias.stride.elems. Default: -1.",
        value<int64_t>(&(args_->bias.stride.elems), -1) },
      { "", "valpha.stride.elems",
        "Convolution: valpha.stride.elems. Default: -1.",
        value<int64_t>(&(args_->valpha.stride.elems), -1) },
      { "", "vbeta.stride.elems",
        "Convolution: vbeta.stride.elems. Default: -1.",
        value<int64_t>(&(args_->vbeta.stride.elems), -1) },
      { "", "groups",
        "Convolution: groups. Default: 1.",
        value<int64_t>(&(args_->groups), 1) },
      { "", "padding_front",
        "Convolution: padding_front. Default: 0.",
        value<int64_t>(&(args_->padding_front), 0) },
      { "", "padding_back",
        "Convolution: padding_back. Default: 0.",
        value<int64_t>(&(args_->padding_back), 0) },
      { "", "padding_top",
        "Convolution: padding_top. Default: 0.",
        value<int64_t>(&(args_->padding_top), 0) },
      { "", "padding_bottom",
        "Convolution: padding_bottom. Default: 0.",
        value<int64_t>(&(args_->padding_bottom), 0) },
      { "", "padding_left",
        "Convolution: padding_left. Default: 0.",
        value<int64_t>(&(args_->padding_left), 0) },
      { "", "padding_right",
        "Convolution: padding_right. Default: 0.",
        value<int64_t>(&(args_->padding_right), 0) },
      { "", "padding_value",
        "Convolution: padding_value. Default: 0.0.",
        value<float>(&(args_->padding_value), 0.0) },
      { "", "stride_depth",
        "Convolution: stride_depth. Default: 1.",
        value<int64_t>(&(args_->stride_depth), 1) },
      { "", "stride_height",
        "Convolution: stride_height. Default: 1.",
        value<int64_t>(&(args_->stride_height), 1) },
      { "", "stride_width",
        "Convolution: stride_width. Default: 1.",
        value<int64_t>(&(args_->stride_width), 1) },
      { "", "dilation_depth",
        "Convolution: dilation_depth. Default: 1.",
        value<int64_t>(&(args_->dilation_depth), 1) },
      { "", "dilation_height",
        "Convolution: dilation_height. Default: 1.",
        value<int64_t>(&(args_->dilation_height), 1) },
      { "", "dilation_width",
        "Convolution: dilation_width. Default: 1.",
        value<int64_t>(&(args_->dilation_width), 1) },
      { "", "is_xcorrelation",
        "Convolution: is_xcorrelation. Use --no_is_xcorrelation to disable it. Default: false.",
        value<bool>(&(args_->is_xcorrelation), false) },
      { "", "with_bias",
        "Convolution: with_bias. Use --no_with_bias to disable it. Default: false.",
        value<bool>(&(args_->with_bias), false) },
      { "", "alpha",
        "Convolution: alpha. Default: 1.0.",
        value<double>(&(args_->alpha), 1.0) },
      { "", "beta",
        "Convolution: beta. Default: 1.0.",
        value<double>(&(args_->beta), 1.0) },
      { "", "apply_relu",
        "Convolution: apply_relu. Use --no_apply_relu to disable it. Default: false.",
        value<bool>(&(args_->apply_relu), false) },
      { "", "relu_upper_bound",
        "Convolution: relu_upper_bound. Default: 4.5.",
        value<float>(&(args_->relu_upper_bound), 4.5) },
      { "", "relu_lower_bound",
        "Convolution: relu_lower_bound. Default: 0.0.",
        value<float>(&(args_->relu_lower_bound), 0.0) },
      { "", "per_channel_scaling",
        "Convolution: per_channel_scaling. Use --no_per_channel_scaling to disable it. Default: false.",
        value<bool>(&(args_->per_channel_scaling), false) },
      { "", "split_k.slices",
        "Convolution: split_k.slices. Default: 1.",
        value<int32_t>(&(args_->split_k.slices), 1) },
      { "", "split_k.kernels",
        "Convolution: split_k.kernels. Default: 1.",
        value<int32_t>(&(args_->split_k.kernels), 1) },
      { "", "split_k.buffers",
        "Convolution: split_k.buffers. Default: 0.",
        value<int32_t>(&(args_->split_k.buffers), 0) },
      { "", "split_k_t",
        "Convolution: split_k_t. Use --no_split_k_t to disable it. Default: false.",
        value<bool>(&(args_->split_k_t), false) },
      { "", "split_k_r",
        "Convolution: split_k_r. Use --no_split_k_r to disable it. Default: false.",
        value<bool>(&(args_->split_k_r), false) },
      { "", "segment_k.split1",
        "Convolution: segment_k.split1. Default: -1.",
        value<int32_t>(&(args_->segment_k.split1), -1) },
      { "", "segment_k.split2",
        "Convolution: segment_k.split2. Default: -1.",
        value<int32_t>(&(args_->segment_k.split2), -1) },
      { "", "segment_k.factor1",
        "Convolution: segment_k.factor1. Default: -1.",
        value<int32_t>(&(args_->segment_k.factor1), -1) },
      { "", "segment_k.factor2",
        "Convolution: segment_k.factor2. Default: -1.",
        value<int32_t>(&(args_->segment_k.factor2), -1) },
      { "", "segment_k.gmem_limit",
        "Convolution: segment_k.gmem_limit. Default: -1.",
        value<int64_t>(&(args_->segment_k.gmem_limit), -1) },
      { "", "segment_k.k_min",
        "Convolution: segment_k.k_min. Default: -1.",
        value<int32_t>(&(args_->segment_k.k_min), -1) },
      { "", "segment_k.factor_min",
        "Convolution: segment_k.factor_min. Default: -1.",
        value<int32_t>(&(args_->segment_k.factor_min), -1) },
      { "", "segment_k.factor_max",
        "Convolution: segment_k.factor_max. Default: -1.",
        value<int32_t>(&(args_->segment_k.factor_max), -1) },
      { "", "cga_tile.m",
        "Convolution: cga_tile.m. Default: 0.",
        value<int>(&(args_->cga_tile.m), 0) },
      { "", "cga_tile.n",
        "Convolution: cga_tile.n. Default: 0.",
        value<int>(&(args_->cga_tile.n), 0) },
      { "", "cga_tile.k",
        "Convolution: cga_tile.k. Default: 0.",
        value<int>(&(args_->cga_tile.k), 0) },
      { "", "ctas_per_wave",
        "Convolution: ctas_per_wave. Default: 0.",
        value<int64_t>(&(args_->ctas_per_wave), 0) },
      { "", "cta_swizzle",
        "Convolution: cta_swizzle. Use --no_cta_swizzle to disable it. Default: false.",
        value<bool>(&(args_->cta_swizzle), false) },
      { "", "runtime_para0",
        "Convolution: runtime_para0. Default: 1.0.",
        value<float>(&(args_->runtime_para0), 1.0) },
      { "", "y.fill", "Convolution: y.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "y.ref.fill", "Convolution: y.ref.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "x.fill", "Convolution: x.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "w.fill", "Convolution: w.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "cask_managed_w", "Convolution: Let CASK to manage this tensor Default: false",
        value<bool>(&(args_->cask_managed_w), false) },
      { "", "c.fill", "Convolution: c.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "bias.fill", "Convolution: bias.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "cask_managed_bias", "Convolution: Let CASK to manage this tensor Default: false",
        value<bool>(&(args_->cask_managed_bias), false) },
      { "", "valpha.fill", "Convolution: valpha.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "cask_managed_valpha", "Convolution: Let CASK to manage this tensor Default: false",
        value<bool>(&(args_->cask_managed_valpha), false) },
      { "", "vbeta.fill", "Convolution: vbeta.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "cask_managed_vbeta", "Convolution: Let CASK to manage this tensor Default: false",
        value<bool>(&(args_->cask_managed_vbeta), false) },
    };

    this->add_options(options);
  }

  ~ArgParser() {}

  const Arguments *arguments() const { return args_; }

  void deleteArguments() { if (args_) delete args_; }

  int parse(const int argc, const char *argv[], bool fail_on_bad_opt = true) {
    int parsed_args = cask::tester::parse(argc, argv, this->param_desc(), fail_on_bad_opt);

    // Update arguments for consistence
    args_->w.filters = args_->y.channels;
    args_->w.channels = (args_->x.channels/args_->groups);
    args_->y.batches = args_->x.batches;
    args_->y.depth = 1 + ((args_->x.depth + args_->padding_front + args_->padding_back - (args_->dilation_depth * (args_->w.depth + -1) + 1))/args_->stride_depth);
    args_->y.height = 1 + ((args_->x.height + args_->padding_top + args_->padding_bottom - (args_->dilation_height * (args_->w.height + -1) + 1))/args_->stride_height);
    args_->y.width = 1 + ((args_->x.width + args_->padding_right + args_->padding_left - (args_->dilation_width * (args_->w.width + -1) + 1))/args_->stride_width);
    args_->c.channels = args_->y.channels;
    args_->c.batches = args_->x.batches;
    args_->c.depth = args_->y.depth;
    args_->c.height = args_->y.height;
    args_->c.width = args_->y.width;
    args_->c.stride.channels = args_->y.stride.channels;
    args_->c.stride.batches = args_->y.stride.batches;
    args_->c.stride.depth = args_->y.stride.depth;
    args_->c.stride.height = args_->y.stride.height;
    args_->c.stride.width = args_->y.stride.width;
    args_->bias.elems = args_->y.channels;
    args_->valpha.elems = args_->y.channels;
    args_->vbeta.elems = args_->y.channels;
    cask_plugin::toInternalShape(&args_->y)->finalize();
    //args_->y.finalize();
    cask_plugin::toInternalShape(&args_->x)->finalize();
    //args_->x.finalize();
    cask_plugin::toInternalShape(&args_->w)->finalize();
    //args_->w.finalize();
    cask_plugin::toInternalShape(&args_->c)->finalize();
    //args_->c.finalize();
    cask_plugin::toInternalShape(&args_->bias)->finalize();
    //args_->bias.finalize();
    cask_plugin::toInternalShape(&args_->valpha)->finalize();
    //args_->valpha.finalize();
    cask_plugin::toInternalShape(&args_->vbeta)->finalize();
    //args_->vbeta.finalize();

    this->finalize();

    return parsed_args;
  }

  virtual void finalize() { }

private:
    Arguments *args_;
};


template<>
class ArgParser<cask_plugin::ConvolutionDgrad> : public cask::tester::ArgParser {
public:
  using Arguments = cask_plugin::ConvolutionDgrad;

  ArgParser(void *args_data) : cask::tester::ArgParser(args_data) {
    assert((args_data != nullptr) && "Must allocate buffer for arguments");
    this->args_ = reinterpret_cast<Arguments *>(args_data);

    using cask::tester::value;
    using cask::tester::FillMode;
    std::vector<cask::tester::ParamDesc::Param> options{
      
      { "", "dy.channels",
        "ConvolutionDgrad: dy.channels. Default: 32.",
        value<int64_t>(&(args_->dy.channels), 32) },
      { "", "dy.stride.depth",
        "ConvolutionDgrad: dy.stride.depth. Default: -1.",
        value<int64_t>(&(args_->dy.stride.depth), -1) },
      { "", "dy.stride.height",
        "ConvolutionDgrad: dy.stride.height. Default: -1.",
        value<int64_t>(&(args_->dy.stride.height), -1) },
      { "", "dy.stride.width",
        "ConvolutionDgrad: dy.stride.width. Default: -1.",
        value<int64_t>(&(args_->dy.stride.width), -1) },
      { "", "dy.stride.channels",
        "ConvolutionDgrad: dy.stride.channels. Default: -1.",
        value<int64_t>(&(args_->dy.stride.channels), -1) },
      { "", "dy.stride.batches",
        "ConvolutionDgrad: dy.stride.batches. Default: -1.",
        value<int64_t>(&(args_->dy.stride.batches), -1) },
      { "", "dx.depth",
        "ConvolutionDgrad: dx.depth. Default: 1.",
        value<int64_t>(&(args_->dx.depth), 1) },
      { "", "dx.height",
        "ConvolutionDgrad: dx.height. Default: 32.",
        value<int64_t>(&(args_->dx.height), 32) },
      { "", "dx.width",
        "ConvolutionDgrad: dx.width. Default: 32.",
        value<int64_t>(&(args_->dx.width), 32) },
      { "", "dx.channels",
        "ConvolutionDgrad: dx.channels. Default: 32.",
        value<int64_t>(&(args_->dx.channels), 32) },
      { "", "dx.batches",
        "ConvolutionDgrad: dx.batches. Default: 1.",
        value<int64_t>(&(args_->dx.batches), 1) },
      { "", "dx.stride.depth",
        "ConvolutionDgrad: dx.stride.depth. Default: -1.",
        value<int64_t>(&(args_->dx.stride.depth), -1) },
      { "", "dx.stride.height",
        "ConvolutionDgrad: dx.stride.height. Default: -1.",
        value<int64_t>(&(args_->dx.stride.height), -1) },
      { "", "dx.stride.width",
        "ConvolutionDgrad: dx.stride.width. Default: -1.",
        value<int64_t>(&(args_->dx.stride.width), -1) },
      { "", "dx.stride.channels",
        "ConvolutionDgrad: dx.stride.channels. Default: -1.",
        value<int64_t>(&(args_->dx.stride.channels), -1) },
      { "", "dx.stride.batches",
        "ConvolutionDgrad: dx.stride.batches. Default: -1.",
        value<int64_t>(&(args_->dx.stride.batches), -1) },
      { "", "w.depth",
        "ConvolutionDgrad: w.depth. Default: 1.",
        value<int64_t>(&(args_->w.depth), 1) },
      { "", "w.height",
        "ConvolutionDgrad: w.height. Default: 3.",
        value<int64_t>(&(args_->w.height), 3) },
      { "", "w.width",
        "ConvolutionDgrad: w.width. Default: 3.",
        value<int64_t>(&(args_->w.width), 3) },
      { "", "w.stride.depth",
        "ConvolutionDgrad: w.stride.depth. Default: -1.",
        value<int64_t>(&(args_->w.stride.depth), -1) },
      { "", "w.stride.height",
        "ConvolutionDgrad: w.stride.height. Default: -1.",
        value<int64_t>(&(args_->w.stride.height), -1) },
      { "", "w.stride.width",
        "ConvolutionDgrad: w.stride.width. Default: -1.",
        value<int64_t>(&(args_->w.stride.width), -1) },
      { "", "w.stride.channels",
        "ConvolutionDgrad: w.stride.channels. Default: -1.",
        value<int64_t>(&(args_->w.stride.channels), -1) },
      { "", "w.stride.filters",
        "ConvolutionDgrad: w.stride.filters. Default: -1.",
        value<int64_t>(&(args_->w.stride.filters), -1) },
      { "", "valpha.stride.elems",
        "ConvolutionDgrad: valpha.stride.elems. Default: -1.",
        value<int64_t>(&(args_->valpha.stride.elems), -1) },
      { "", "vbeta.stride.elems",
        "ConvolutionDgrad: vbeta.stride.elems. Default: -1.",
        value<int64_t>(&(args_->vbeta.stride.elems), -1) },
      { "", "groups",
        "ConvolutionDgrad: groups. Default: 1.",
        value<int64_t>(&(args_->groups), 1) },
      { "", "padding_front",
        "ConvolutionDgrad: padding_front. Default: 0.",
        value<int64_t>(&(args_->padding_front), 0) },
      { "", "padding_back",
        "ConvolutionDgrad: padding_back. Default: 0.",
        value<int64_t>(&(args_->padding_back), 0) },
      { "", "padding_top",
        "ConvolutionDgrad: padding_top. Default: 0.",
        value<int64_t>(&(args_->padding_top), 0) },
      { "", "padding_bottom",
        "ConvolutionDgrad: padding_bottom. Default: 0.",
        value<int64_t>(&(args_->padding_bottom), 0) },
      { "", "padding_left",
        "ConvolutionDgrad: padding_left. Default: 0.",
        value<int64_t>(&(args_->padding_left), 0) },
      { "", "padding_right",
        "ConvolutionDgrad: padding_right. Default: 0.",
        value<int64_t>(&(args_->padding_right), 0) },
      { "", "stride_depth",
        "ConvolutionDgrad: stride_depth. Default: 1.",
        value<int64_t>(&(args_->stride_depth), 1) },
      { "", "stride_height",
        "ConvolutionDgrad: stride_height. Default: 1.",
        value<int64_t>(&(args_->stride_height), 1) },
      { "", "stride_width",
        "ConvolutionDgrad: stride_width. Default: 1.",
        value<int64_t>(&(args_->stride_width), 1) },
      { "", "dilation_depth",
        "ConvolutionDgrad: dilation_depth. Default: 1.",
        value<int64_t>(&(args_->dilation_depth), 1) },
      { "", "dilation_height",
        "ConvolutionDgrad: dilation_height. Default: 1.",
        value<int64_t>(&(args_->dilation_height), 1) },
      { "", "dilation_width",
        "ConvolutionDgrad: dilation_width. Default: 1.",
        value<int64_t>(&(args_->dilation_width), 1) },
      { "", "is_xcorrelation",
        "ConvolutionDgrad: is_xcorrelation. Use --no_is_xcorrelation to disable it. Default: false.",
        value<bool>(&(args_->is_xcorrelation), false) },
      { "", "with_bias",
        "ConvolutionDgrad: with_bias. Use --no_with_bias to disable it. Default: false.",
        value<bool>(&(args_->with_bias), false) },
      { "", "alpha",
        "ConvolutionDgrad: alpha. Default: 1.0.",
        value<double>(&(args_->alpha), 1.0) },
      { "", "beta",
        "ConvolutionDgrad: beta. Default: 1.0.",
        value<double>(&(args_->beta), 1.0) },
      { "", "apply_relu",
        "ConvolutionDgrad: apply_relu. Use --no_apply_relu to disable it. Default: false.",
        value<bool>(&(args_->apply_relu), false) },
      { "", "per_channel_scaling",
        "ConvolutionDgrad: per_channel_scaling. Use --no_per_channel_scaling to disable it. Default: false.",
        value<bool>(&(args_->per_channel_scaling), false) },
      { "", "split_k.slices",
        "ConvolutionDgrad: split_k.slices. Default: 1.",
        value<int32_t>(&(args_->split_k.slices), 1) },
      { "", "split_k.kernels",
        "ConvolutionDgrad: split_k.kernels. Default: 1.",
        value<int32_t>(&(args_->split_k.kernels), 1) },
      { "", "split_k.buffers",
        "ConvolutionDgrad: split_k.buffers. Default: 0.",
        value<int32_t>(&(args_->split_k.buffers), 0) },
      { "", "split_k_t",
        "ConvolutionDgrad: split_k_t. Use --no_split_k_t to disable it. Default: false.",
        value<bool>(&(args_->split_k_t), false) },
      { "", "split_k_r",
        "ConvolutionDgrad: split_k_r. Use --no_split_k_r to disable it. Default: false.",
        value<bool>(&(args_->split_k_r), false) },
      { "", "segment_k.split1",
        "ConvolutionDgrad: segment_k.split1. Default: -1.",
        value<int32_t>(&(args_->segment_k.split1), -1) },
      { "", "segment_k.split2",
        "ConvolutionDgrad: segment_k.split2. Default: -1.",
        value<int32_t>(&(args_->segment_k.split2), -1) },
      { "", "segment_k.factor1",
        "ConvolutionDgrad: segment_k.factor1. Default: -1.",
        value<int32_t>(&(args_->segment_k.factor1), -1) },
      { "", "segment_k.factor2",
        "ConvolutionDgrad: segment_k.factor2. Default: -1.",
        value<int32_t>(&(args_->segment_k.factor2), -1) },
      { "", "segment_k.gmem_limit",
        "ConvolutionDgrad: segment_k.gmem_limit. Default: -1.",
        value<int64_t>(&(args_->segment_k.gmem_limit), -1) },
      { "", "segment_k.k_min",
        "ConvolutionDgrad: segment_k.k_min. Default: -1.",
        value<int32_t>(&(args_->segment_k.k_min), -1) },
      { "", "segment_k.factor_min",
        "ConvolutionDgrad: segment_k.factor_min. Default: -1.",
        value<int32_t>(&(args_->segment_k.factor_min), -1) },
      { "", "segment_k.factor_max",
        "ConvolutionDgrad: segment_k.factor_max. Default: -1.",
        value<int32_t>(&(args_->segment_k.factor_max), -1) },
      { "", "cga_tile.m",
        "ConvolutionDgrad: cga_tile.m. Default: 0.",
        value<int>(&(args_->cga_tile.m), 0) },
      { "", "cga_tile.n",
        "ConvolutionDgrad: cga_tile.n. Default: 0.",
        value<int>(&(args_->cga_tile.n), 0) },
      { "", "cga_tile.k",
        "ConvolutionDgrad: cga_tile.k. Default: 0.",
        value<int>(&(args_->cga_tile.k), 0) },
      { "", "ctas_per_wave",
        "ConvolutionDgrad: ctas_per_wave. Default: 0.",
        value<int64_t>(&(args_->ctas_per_wave), 0) },
      { "", "cta_swizzle",
        "ConvolutionDgrad: cta_swizzle. Use --no_cta_swizzle to disable it. Default: false.",
        value<bool>(&(args_->cta_swizzle), false) },
      { "", "dy.fill", "ConvolutionDgrad: dy.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "dx.fill", "ConvolutionDgrad: dx.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "dx.ref.fill", "ConvolutionDgrad: dx.ref.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "w.fill", "ConvolutionDgrad: w.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "cask_managed_w", "ConvolutionDgrad: Let CASK to manage this tensor Default: false",
        value<bool>(&(args_->cask_managed_w), false) },
      { "", "c.fill", "ConvolutionDgrad: c.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "valpha.fill", "ConvolutionDgrad: valpha.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "cask_managed_valpha", "ConvolutionDgrad: Let CASK to manage this tensor Default: false",
        value<bool>(&(args_->cask_managed_valpha), false) },
      { "", "vbeta.fill", "ConvolutionDgrad: vbeta.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "cask_managed_vbeta", "ConvolutionDgrad: Let CASK to manage this tensor Default: false",
        value<bool>(&(args_->cask_managed_vbeta), false) },
    };

    this->add_options(options);
  }

  ~ArgParser() {}

  const Arguments *arguments() const { return args_; }

  void deleteArguments() { if (args_) delete args_; }

  int parse(const int argc, const char *argv[], bool fail_on_bad_opt = true) {
    int parsed_args = cask::tester::parse(argc, argv, this->param_desc(), fail_on_bad_opt);

    // Update arguments for consistence
    args_->w.filters = args_->dy.channels;
    args_->w.channels = (args_->dx.channels/args_->groups);
    args_->dy.batches = args_->dx.batches;
    args_->dy.depth = 1 + ((args_->padding_front + args_->padding_back + args_->dx.depth - (args_->dilation_depth * (args_->w.depth + -1) + 1))/args_->stride_depth);
    args_->dy.height = 1 + ((args_->padding_top + args_->padding_bottom + args_->dx.height - (args_->dilation_height * (args_->w.height + -1) + 1))/args_->stride_height);
    args_->dy.width = 1 + ((args_->padding_right + args_->padding_left + args_->dx.width - (args_->dilation_width * (args_->w.width + -1) + 1))/args_->stride_width);
    args_->c.channels = args_->dx.channels;
    args_->c.batches = args_->dx.batches;
    args_->c.depth = args_->dx.depth;
    args_->c.height = args_->dx.height;
    args_->c.width = args_->dx.width;
    args_->c.stride.channels = args_->dx.stride.channels;
    args_->c.stride.batches = args_->dx.stride.batches;
    args_->c.stride.depth = args_->dx.stride.depth;
    args_->c.stride.height = args_->dx.stride.height;
    args_->c.stride.width = args_->dx.stride.width;
    args_->valpha.elems = args_->dx.channels;
    args_->vbeta.elems = args_->dx.channels;
    cask_plugin::toInternalShape(&args_->dy)->finalize();
    //args_->dy.finalize();
    cask_plugin::toInternalShape(&args_->dx)->finalize();
    //args_->dx.finalize();
    cask_plugin::toInternalShape(&args_->w)->finalize();
    //args_->w.finalize();
    cask_plugin::toInternalShape(&args_->c)->finalize();
    //args_->c.finalize();
    cask_plugin::toInternalShape(&args_->valpha)->finalize();
    //args_->valpha.finalize();
    cask_plugin::toInternalShape(&args_->vbeta)->finalize();
    //args_->vbeta.finalize();

    this->finalize();

    return parsed_args;
  }

  virtual void finalize() { }

private:
    Arguments *args_;
};


template<>
class ArgParser<cask_plugin::ConvolutionWgrad> : public cask::tester::ArgParser {
public:
  using Arguments = cask_plugin::ConvolutionWgrad;

  ArgParser(void *args_data) : cask::tester::ArgParser(args_data) {
    assert((args_data != nullptr) && "Must allocate buffer for arguments");
    this->args_ = reinterpret_cast<Arguments *>(args_data);

    using cask::tester::value;
    using cask::tester::FillMode;
    std::vector<cask::tester::ParamDesc::Param> options{
      
      { "", "dy.channels",
        "ConvolutionWgrad: dy.channels. Default: 32.",
        value<int64_t>(&(args_->dy.channels), 32) },
      { "", "dy.stride.depth",
        "ConvolutionWgrad: dy.stride.depth. Default: -1.",
        value<int64_t>(&(args_->dy.stride.depth), -1) },
      { "", "dy.stride.height",
        "ConvolutionWgrad: dy.stride.height. Default: -1.",
        value<int64_t>(&(args_->dy.stride.height), -1) },
      { "", "dy.stride.width",
        "ConvolutionWgrad: dy.stride.width. Default: -1.",
        value<int64_t>(&(args_->dy.stride.width), -1) },
      { "", "dy.stride.channels",
        "ConvolutionWgrad: dy.stride.channels. Default: -1.",
        value<int64_t>(&(args_->dy.stride.channels), -1) },
      { "", "dy.stride.batches",
        "ConvolutionWgrad: dy.stride.batches. Default: -1.",
        value<int64_t>(&(args_->dy.stride.batches), -1) },
      { "", "x.depth",
        "ConvolutionWgrad: x.depth. Default: 1.",
        value<int64_t>(&(args_->x.depth), 1) },
      { "", "x.height",
        "ConvolutionWgrad: x.height. Default: 32.",
        value<int64_t>(&(args_->x.height), 32) },
      { "", "x.width",
        "ConvolutionWgrad: x.width. Default: 32.",
        value<int64_t>(&(args_->x.width), 32) },
      { "", "x.channels",
        "ConvolutionWgrad: x.channels. Default: 32.",
        value<int64_t>(&(args_->x.channels), 32) },
      { "", "x.batches",
        "ConvolutionWgrad: x.batches. Default: 1.",
        value<int64_t>(&(args_->x.batches), 1) },
      { "", "x.stride.depth",
        "ConvolutionWgrad: x.stride.depth. Default: -1.",
        value<int64_t>(&(args_->x.stride.depth), -1) },
      { "", "x.stride.height",
        "ConvolutionWgrad: x.stride.height. Default: -1.",
        value<int64_t>(&(args_->x.stride.height), -1) },
      { "", "x.stride.width",
        "ConvolutionWgrad: x.stride.width. Default: -1.",
        value<int64_t>(&(args_->x.stride.width), -1) },
      { "", "x.stride.channels",
        "ConvolutionWgrad: x.stride.channels. Default: -1.",
        value<int64_t>(&(args_->x.stride.channels), -1) },
      { "", "x.stride.batches",
        "ConvolutionWgrad: x.stride.batches. Default: -1.",
        value<int64_t>(&(args_->x.stride.batches), -1) },
      { "", "dw.depth",
        "ConvolutionWgrad: dw.depth. Default: 1.",
        value<int64_t>(&(args_->dw.depth), 1) },
      { "", "dw.height",
        "ConvolutionWgrad: dw.height. Default: 3.",
        value<int64_t>(&(args_->dw.height), 3) },
      { "", "dw.width",
        "ConvolutionWgrad: dw.width. Default: 3.",
        value<int64_t>(&(args_->dw.width), 3) },
      { "", "dw.stride.depth",
        "ConvolutionWgrad: dw.stride.depth. Default: -1.",
        value<int64_t>(&(args_->dw.stride.depth), -1) },
      { "", "dw.stride.height",
        "ConvolutionWgrad: dw.stride.height. Default: -1.",
        value<int64_t>(&(args_->dw.stride.height), -1) },
      { "", "dw.stride.width",
        "ConvolutionWgrad: dw.stride.width. Default: -1.",
        value<int64_t>(&(args_->dw.stride.width), -1) },
      { "", "dw.stride.channels",
        "ConvolutionWgrad: dw.stride.channels. Default: -1.",
        value<int64_t>(&(args_->dw.stride.channels), -1) },
      { "", "dw.stride.filters",
        "ConvolutionWgrad: dw.stride.filters. Default: -1.",
        value<int64_t>(&(args_->dw.stride.filters), -1) },
      { "", "groups",
        "ConvolutionWgrad: groups. Default: 1.",
        value<int64_t>(&(args_->groups), 1) },
      { "", "padding_front",
        "ConvolutionWgrad: padding_front. Default: 0.",
        value<int64_t>(&(args_->padding_front), 0) },
      { "", "padding_back",
        "ConvolutionWgrad: padding_back. Default: 0.",
        value<int64_t>(&(args_->padding_back), 0) },
      { "", "padding_top",
        "ConvolutionWgrad: padding_top. Default: 0.",
        value<int64_t>(&(args_->padding_top), 0) },
      { "", "padding_bottom",
        "ConvolutionWgrad: padding_bottom. Default: 0.",
        value<int64_t>(&(args_->padding_bottom), 0) },
      { "", "padding_left",
        "ConvolutionWgrad: padding_left. Default: 0.",
        value<int64_t>(&(args_->padding_left), 0) },
      { "", "padding_right",
        "ConvolutionWgrad: padding_right. Default: 0.",
        value<int64_t>(&(args_->padding_right), 0) },
      { "", "stride_depth",
        "ConvolutionWgrad: stride_depth. Default: 1.",
        value<int64_t>(&(args_->stride_depth), 1) },
      { "", "stride_height",
        "ConvolutionWgrad: stride_height. Default: 1.",
        value<int64_t>(&(args_->stride_height), 1) },
      { "", "stride_width",
        "ConvolutionWgrad: stride_width. Default: 1.",
        value<int64_t>(&(args_->stride_width), 1) },
      { "", "dilation_depth",
        "ConvolutionWgrad: dilation_depth. Default: 1.",
        value<int64_t>(&(args_->dilation_depth), 1) },
      { "", "dilation_height",
        "ConvolutionWgrad: dilation_height. Default: 1.",
        value<int64_t>(&(args_->dilation_height), 1) },
      { "", "dilation_width",
        "ConvolutionWgrad: dilation_width. Default: 1.",
        value<int64_t>(&(args_->dilation_width), 1) },
      { "", "is_xcorrelation",
        "ConvolutionWgrad: is_xcorrelation. Use --no_is_xcorrelation to disable it. Default: false.",
        value<bool>(&(args_->is_xcorrelation), false) },
      { "", "with_bias",
        "ConvolutionWgrad: with_bias. Use --no_with_bias to disable it. Default: false.",
        value<bool>(&(args_->with_bias), false) },
      { "", "alpha",
        "ConvolutionWgrad: alpha. Default: 1.0.",
        value<double>(&(args_->alpha), 1.0) },
      { "", "beta",
        "ConvolutionWgrad: beta. Default: 1.0.",
        value<double>(&(args_->beta), 1.0) },
      { "", "apply_relu",
        "ConvolutionWgrad: apply_relu. Use --no_apply_relu to disable it. Default: false.",
        value<bool>(&(args_->apply_relu), false) },
      { "", "per_channel_scaling",
        "ConvolutionWgrad: per_channel_scaling. Use --no_per_channel_scaling to disable it. Default: false.",
        value<bool>(&(args_->per_channel_scaling), false) },
      { "", "split_k.split_k_slices",
        "ConvolutionWgrad: split_k.split_k_slices. Default: 0.",
        value<int>(&(args_->split_k.split_k_slices), 0) },
      { "", "split_k.split_h_slices",
        "ConvolutionWgrad: split_k.split_h_slices. Default: 1.",
        value<int>(&(args_->split_k.split_h_slices), 1) },
      { "", "split_k.kernels",
        "ConvolutionWgrad: split_k.kernels. Default: 1.",
        value<int>(&(args_->split_k.kernels), 1) },
      { "", "split_k.buffers",
        "ConvolutionWgrad: split_k.buffers. Default: 0.",
        value<int>(&(args_->split_k.buffers), 0) },
      { "", "split_k_t",
        "ConvolutionWgrad: split_k_t. Use --no_split_k_t to disable it. Default: false.",
        value<bool>(&(args_->split_k_t), false) },
      { "", "split_k_r",
        "ConvolutionWgrad: split_k_r. Use --no_split_k_r to disable it. Default: false.",
        value<bool>(&(args_->split_k_r), false) },
      { "", "segment_k.split1",
        "ConvolutionWgrad: segment_k.split1. Default: -1.",
        value<int32_t>(&(args_->segment_k.split1), -1) },
      { "", "segment_k.split2",
        "ConvolutionWgrad: segment_k.split2. Default: -1.",
        value<int32_t>(&(args_->segment_k.split2), -1) },
      { "", "segment_k.factor1",
        "ConvolutionWgrad: segment_k.factor1. Default: -1.",
        value<int32_t>(&(args_->segment_k.factor1), -1) },
      { "", "segment_k.factor2",
        "ConvolutionWgrad: segment_k.factor2. Default: -1.",
        value<int32_t>(&(args_->segment_k.factor2), -1) },
      { "", "segment_k.gmem_limit",
        "ConvolutionWgrad: segment_k.gmem_limit. Default: -1.",
        value<int64_t>(&(args_->segment_k.gmem_limit), -1) },
      { "", "segment_k.k_min",
        "ConvolutionWgrad: segment_k.k_min. Default: -1.",
        value<int32_t>(&(args_->segment_k.k_min), -1) },
      { "", "segment_k.factor_min",
        "ConvolutionWgrad: segment_k.factor_min. Default: -1.",
        value<int32_t>(&(args_->segment_k.factor_min), -1) },
      { "", "segment_k.factor_max",
        "ConvolutionWgrad: segment_k.factor_max. Default: -1.",
        value<int32_t>(&(args_->segment_k.factor_max), -1) },
      { "", "cga_tile.m",
        "ConvolutionWgrad: cga_tile.m. Default: 0.",
        value<int>(&(args_->cga_tile.m), 0) },
      { "", "cga_tile.n",
        "ConvolutionWgrad: cga_tile.n. Default: 0.",
        value<int>(&(args_->cga_tile.n), 0) },
      { "", "cga_tile.k",
        "ConvolutionWgrad: cga_tile.k. Default: 0.",
        value<int>(&(args_->cga_tile.k), 0) },
      { "", "dy.fill", "ConvolutionWgrad: dy.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "x.fill", "ConvolutionWgrad: x.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "dw.fill", "ConvolutionWgrad: dw.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "dw.ref.fill", "ConvolutionWgrad: dw.ref.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "c.fill", "ConvolutionWgrad: c.fill",
        value<FillMode>(nullptr, FillMode()) },
    };

    this->add_options(options);
  }

  ~ArgParser() {}

  const Arguments *arguments() const { return args_; }

  void deleteArguments() { if (args_) delete args_; }

  int parse(const int argc, const char *argv[], bool fail_on_bad_opt = true) {
    int parsed_args = cask::tester::parse(argc, argv, this->param_desc(), fail_on_bad_opt);

    // Update arguments for consistence
    args_->dy.batches = args_->x.batches;
    args_->dw.channels = (args_->x.channels/args_->groups);
    args_->dw.filters = args_->dy.channels;
    args_->dy.width = 1 + ((args_->x.width + args_->padding_right + args_->padding_left - (args_->dilation_width * (args_->dw.width + -1) + 1))/args_->stride_width);
    args_->dy.height = 1 + ((args_->x.height + args_->padding_top + args_->padding_bottom - (args_->dilation_height * (args_->dw.height + -1) + 1))/args_->stride_height);
    args_->dy.depth = 1 + ((args_->x.depth + args_->padding_front + args_->padding_back - (args_->dilation_depth * (args_->dw.depth + -1) + 1))/args_->stride_depth);
    args_->c.filters = args_->dw.filters;
    args_->c.channels = args_->dw.channels;
    args_->c.width = args_->dw.width;
    args_->c.depth = args_->dw.depth;
    args_->c.height = args_->dw.height;
    args_->c.stride.channels = args_->dw.stride.channels;
    args_->c.stride.filters = args_->dw.stride.filters;
    args_->c.stride.depth = args_->dw.stride.depth;
    args_->c.stride.height = args_->dw.stride.height;
    args_->c.stride.width = args_->dw.stride.width;
    cask_plugin::toInternalShape(&args_->dy)->finalize();
    //args_->dy.finalize();
    cask_plugin::toInternalShape(&args_->x)->finalize();
    //args_->x.finalize();
    cask_plugin::toInternalShape(&args_->dw)->finalize();
    //args_->dw.finalize();
    cask_plugin::toInternalShape(&args_->c)->finalize();
    //args_->c.finalize();

    this->finalize();

    return parsed_args;
  }

  virtual void finalize() { }

private:
    Arguments *args_;
};


template<>
class ArgParser<cask_plugin::Deconvolution> : public cask::tester::ArgParser {
public:
  using Arguments = cask_plugin::Deconvolution;

  ArgParser(void *args_data) : cask::tester::ArgParser(args_data) {
    assert((args_data != nullptr) && "Must allocate buffer for arguments");
    this->args_ = reinterpret_cast<Arguments *>(args_data);

    using cask::tester::value;
    using cask::tester::FillMode;
    std::vector<cask::tester::ParamDesc::Param> options{
      
      { "", "y.channels",
        "Deconvolution: y.channels. Default: 32.",
        value<int64_t>(&(args_->y.channels), 32) },
      { "", "y.stride.depth",
        "Deconvolution: y.stride.depth. Default: -1.",
        value<int64_t>(&(args_->y.stride.depth), -1) },
      { "", "y.stride.height",
        "Deconvolution: y.stride.height. Default: -1.",
        value<int64_t>(&(args_->y.stride.height), -1) },
      { "", "y.stride.width",
        "Deconvolution: y.stride.width. Default: -1.",
        value<int64_t>(&(args_->y.stride.width), -1) },
      { "", "y.stride.channels",
        "Deconvolution: y.stride.channels. Default: -1.",
        value<int64_t>(&(args_->y.stride.channels), -1) },
      { "", "y.stride.batches",
        "Deconvolution: y.stride.batches. Default: -1.",
        value<int64_t>(&(args_->y.stride.batches), -1) },
      { "", "x.depth",
        "Deconvolution: x.depth. Default: 1.",
        value<int64_t>(&(args_->x.depth), 1) },
      { "", "x.height",
        "Deconvolution: x.height. Default: 32.",
        value<int64_t>(&(args_->x.height), 32) },
      { "", "x.width",
        "Deconvolution: x.width. Default: 32.",
        value<int64_t>(&(args_->x.width), 32) },
      { "", "x.channels",
        "Deconvolution: x.channels. Default: 32.",
        value<int64_t>(&(args_->x.channels), 32) },
      { "", "x.batches",
        "Deconvolution: x.batches. Default: 1.",
        value<int64_t>(&(args_->x.batches), 1) },
      { "", "x.stride.depth",
        "Deconvolution: x.stride.depth. Default: -1.",
        value<int64_t>(&(args_->x.stride.depth), -1) },
      { "", "x.stride.height",
        "Deconvolution: x.stride.height. Default: -1.",
        value<int64_t>(&(args_->x.stride.height), -1) },
      { "", "x.stride.width",
        "Deconvolution: x.stride.width. Default: -1.",
        value<int64_t>(&(args_->x.stride.width), -1) },
      { "", "x.stride.channels",
        "Deconvolution: x.stride.channels. Default: -1.",
        value<int64_t>(&(args_->x.stride.channels), -1) },
      { "", "x.stride.batches",
        "Deconvolution: x.stride.batches. Default: -1.",
        value<int64_t>(&(args_->x.stride.batches), -1) },
      { "", "w.depth",
        "Deconvolution: w.depth. Default: 1.",
        value<int64_t>(&(args_->w.depth), 1) },
      { "", "w.height",
        "Deconvolution: w.height. Default: 3.",
        value<int64_t>(&(args_->w.height), 3) },
      { "", "w.width",
        "Deconvolution: w.width. Default: 3.",
        value<int64_t>(&(args_->w.width), 3) },
      { "", "w.stride.depth",
        "Deconvolution: w.stride.depth. Default: -1.",
        value<int64_t>(&(args_->w.stride.depth), -1) },
      { "", "w.stride.height",
        "Deconvolution: w.stride.height. Default: -1.",
        value<int64_t>(&(args_->w.stride.height), -1) },
      { "", "w.stride.width",
        "Deconvolution: w.stride.width. Default: -1.",
        value<int64_t>(&(args_->w.stride.width), -1) },
      { "", "w.stride.channels",
        "Deconvolution: w.stride.channels. Default: -1.",
        value<int64_t>(&(args_->w.stride.channels), -1) },
      { "", "w.stride.filters",
        "Deconvolution: w.stride.filters. Default: -1.",
        value<int64_t>(&(args_->w.stride.filters), -1) },
      { "", "bias.stride.elems",
        "Deconvolution: bias.stride.elems. Default: -1.",
        value<int64_t>(&(args_->bias.stride.elems), -1) },
      { "", "valpha.stride.elems",
        "Deconvolution: valpha.stride.elems. Default: -1.",
        value<int64_t>(&(args_->valpha.stride.elems), -1) },
      { "", "vbeta.stride.elems",
        "Deconvolution: vbeta.stride.elems. Default: -1.",
        value<int64_t>(&(args_->vbeta.stride.elems), -1) },
      { "", "groups",
        "Deconvolution: groups. Default: 1.",
        value<int64_t>(&(args_->groups), 1) },
      { "", "padding_front",
        "Deconvolution: padding_front. Default: 0.",
        value<int64_t>(&(args_->padding_front), 0) },
      { "", "padding_back",
        "Deconvolution: padding_back. Default: 0.",
        value<int64_t>(&(args_->padding_back), 0) },
      { "", "padding_top",
        "Deconvolution: padding_top. Default: 0.",
        value<int64_t>(&(args_->padding_top), 0) },
      { "", "padding_bottom",
        "Deconvolution: padding_bottom. Default: 0.",
        value<int64_t>(&(args_->padding_bottom), 0) },
      { "", "padding_left",
        "Deconvolution: padding_left. Default: 0.",
        value<int64_t>(&(args_->padding_left), 0) },
      { "", "padding_right",
        "Deconvolution: padding_right. Default: 0.",
        value<int64_t>(&(args_->padding_right), 0) },
      { "", "stride_depth",
        "Deconvolution: stride_depth. Default: 1.",
        value<int64_t>(&(args_->stride_depth), 1) },
      { "", "stride_height",
        "Deconvolution: stride_height. Default: 1.",
        value<int64_t>(&(args_->stride_height), 1) },
      { "", "stride_width",
        "Deconvolution: stride_width. Default: 1.",
        value<int64_t>(&(args_->stride_width), 1) },
      { "", "dilation_depth",
        "Deconvolution: dilation_depth. Default: 1.",
        value<int64_t>(&(args_->dilation_depth), 1) },
      { "", "dilation_height",
        "Deconvolution: dilation_height. Default: 1.",
        value<int64_t>(&(args_->dilation_height), 1) },
      { "", "dilation_width",
        "Deconvolution: dilation_width. Default: 1.",
        value<int64_t>(&(args_->dilation_width), 1) },
      { "", "is_xcorrelation",
        "Deconvolution: is_xcorrelation. Use --no_is_xcorrelation to disable it. Default: false.",
        value<bool>(&(args_->is_xcorrelation), false) },
      { "", "with_bias",
        "Deconvolution: with_bias. Use --no_with_bias to disable it. Default: false.",
        value<bool>(&(args_->with_bias), false) },
      { "", "alpha",
        "Deconvolution: alpha. Default: 1.0.",
        value<double>(&(args_->alpha), 1.0) },
      { "", "beta",
        "Deconvolution: beta. Default: 1.0.",
        value<double>(&(args_->beta), 1.0) },
      { "", "apply_relu",
        "Deconvolution: apply_relu. Use --no_apply_relu to disable it. Default: false.",
        value<bool>(&(args_->apply_relu), false) },
      { "", "relu_upper_bound",
        "Deconvolution: relu_upper_bound. Default: 4.5.",
        value<float>(&(args_->relu_upper_bound), 4.5) },
      { "", "relu_lower_bound",
        "Deconvolution: relu_lower_bound. Default: 0.0.",
        value<float>(&(args_->relu_lower_bound), 0.0) },
      { "", "per_channel_scaling",
        "Deconvolution: per_channel_scaling. Use --no_per_channel_scaling to disable it. Default: false.",
        value<bool>(&(args_->per_channel_scaling), false) },
      { "", "split_k.slices",
        "Deconvolution: split_k.slices. Default: 1.",
        value<int32_t>(&(args_->split_k.slices), 1) },
      { "", "split_k.kernels",
        "Deconvolution: split_k.kernels. Default: 1.",
        value<int32_t>(&(args_->split_k.kernels), 1) },
      { "", "split_k.buffers",
        "Deconvolution: split_k.buffers. Default: 0.",
        value<int32_t>(&(args_->split_k.buffers), 0) },
      { "", "split_k_t",
        "Deconvolution: split_k_t. Use --no_split_k_t to disable it. Default: false.",
        value<bool>(&(args_->split_k_t), false) },
      { "", "split_k_r",
        "Deconvolution: split_k_r. Use --no_split_k_r to disable it. Default: false.",
        value<bool>(&(args_->split_k_r), false) },
      { "", "segment_k.split1",
        "Deconvolution: segment_k.split1. Default: -1.",
        value<int32_t>(&(args_->segment_k.split1), -1) },
      { "", "segment_k.split2",
        "Deconvolution: segment_k.split2. Default: -1.",
        value<int32_t>(&(args_->segment_k.split2), -1) },
      { "", "segment_k.factor1",
        "Deconvolution: segment_k.factor1. Default: -1.",
        value<int32_t>(&(args_->segment_k.factor1), -1) },
      { "", "segment_k.factor2",
        "Deconvolution: segment_k.factor2. Default: -1.",
        value<int32_t>(&(args_->segment_k.factor2), -1) },
      { "", "segment_k.gmem_limit",
        "Deconvolution: segment_k.gmem_limit. Default: -1.",
        value<int64_t>(&(args_->segment_k.gmem_limit), -1) },
      { "", "segment_k.k_min",
        "Deconvolution: segment_k.k_min. Default: -1.",
        value<int32_t>(&(args_->segment_k.k_min), -1) },
      { "", "segment_k.factor_min",
        "Deconvolution: segment_k.factor_min. Default: -1.",
        value<int32_t>(&(args_->segment_k.factor_min), -1) },
      { "", "segment_k.factor_max",
        "Deconvolution: segment_k.factor_max. Default: -1.",
        value<int32_t>(&(args_->segment_k.factor_max), -1) },
      { "", "cga_tile.m",
        "Deconvolution: cga_tile.m. Default: 0.",
        value<int>(&(args_->cga_tile.m), 0) },
      { "", "cga_tile.n",
        "Deconvolution: cga_tile.n. Default: 0.",
        value<int>(&(args_->cga_tile.n), 0) },
      { "", "cga_tile.k",
        "Deconvolution: cga_tile.k. Default: 0.",
        value<int>(&(args_->cga_tile.k), 0) },
      { "", "ctas_per_wave",
        "Deconvolution: ctas_per_wave. Default: 0.",
        value<int64_t>(&(args_->ctas_per_wave), 0) },
      { "", "cta_swizzle",
        "Deconvolution: cta_swizzle. Use --no_cta_swizzle to disable it. Default: false.",
        value<bool>(&(args_->cta_swizzle), false) },
      { "", "runtime_para0",
        "Deconvolution: runtime_para0. Default: 1.0.",
        value<float>(&(args_->runtime_para0), 1.0) },
      { "", "y.fill", "Deconvolution: y.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "x.fill", "Deconvolution: x.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "x.ref.fill", "Deconvolution: x.ref.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "w.fill", "Deconvolution: w.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "cask_managed_w", "Deconvolution: Let CASK to manage this tensor Default: false",
        value<bool>(&(args_->cask_managed_w), false) },
      { "", "c.fill", "Deconvolution: c.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "bias.fill", "Deconvolution: bias.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "cask_managed_bias", "Deconvolution: Let CASK to manage this tensor Default: false",
        value<bool>(&(args_->cask_managed_bias), false) },
      { "", "valpha.fill", "Deconvolution: valpha.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "cask_managed_valpha", "Deconvolution: Let CASK to manage this tensor Default: false",
        value<bool>(&(args_->cask_managed_valpha), false) },
      { "", "vbeta.fill", "Deconvolution: vbeta.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "cask_managed_vbeta", "Deconvolution: Let CASK to manage this tensor Default: false",
        value<bool>(&(args_->cask_managed_vbeta), false) },
    };

    this->add_options(options);
  }

  ~ArgParser() {}

  const Arguments *arguments() const { return args_; }

  void deleteArguments() { if (args_) delete args_; }

  int parse(const int argc, const char *argv[], bool fail_on_bad_opt = true) {
    int parsed_args = cask::tester::parse(argc, argv, this->param_desc(), fail_on_bad_opt);

    // Update arguments for consistence
    args_->w.filters = args_->y.channels;
    args_->w.channels = (args_->x.channels/args_->groups);
    args_->y.batches = args_->x.batches;
    args_->y.depth = 1 + ((args_->x.depth + args_->padding_front + args_->padding_back - (args_->dilation_depth * (args_->w.depth + -1) + 1))/args_->stride_depth);
    args_->y.height = 1 + ((args_->x.height + args_->padding_top + args_->padding_bottom - (args_->dilation_height * (args_->w.height + -1) + 1))/args_->stride_height);
    args_->y.width = 1 + ((args_->x.width + args_->padding_right + args_->padding_left - (args_->dilation_width * (args_->w.width + -1) + 1))/args_->stride_width);
    args_->c.channels = args_->x.channels;
    args_->c.batches = args_->x.batches;
    args_->c.depth = args_->x.depth;
    args_->c.height = args_->x.height;
    args_->c.width = args_->x.width;
    args_->c.stride.channels = args_->x.stride.channels;
    args_->c.stride.batches = args_->x.stride.batches;
    args_->c.stride.depth = args_->x.stride.depth;
    args_->c.stride.height = args_->x.stride.height;
    args_->c.stride.width = args_->x.stride.width;
    args_->bias.elems = args_->x.channels;
    args_->valpha.elems = args_->x.channels;
    args_->vbeta.elems = args_->x.channels;
    cask_plugin::toInternalShape(&args_->y)->finalize();
    //args_->y.finalize();
    cask_plugin::toInternalShape(&args_->x)->finalize();
    //args_->x.finalize();
    cask_plugin::toInternalShape(&args_->w)->finalize();
    //args_->w.finalize();
    cask_plugin::toInternalShape(&args_->c)->finalize();
    //args_->c.finalize();
    cask_plugin::toInternalShape(&args_->bias)->finalize();
    //args_->bias.finalize();
    cask_plugin::toInternalShape(&args_->valpha)->finalize();
    //args_->valpha.finalize();
    cask_plugin::toInternalShape(&args_->vbeta)->finalize();
    //args_->vbeta.finalize();

    this->finalize();

    return parsed_args;
  }

  virtual void finalize() { }

private:
    Arguments *args_;
};


template<>
class ArgParser<cask_plugin::Pooling> : public cask::tester::ArgParser {
public:
  using Arguments = cask_plugin::Pooling;

  ArgParser(void *args_data) : cask::tester::ArgParser(args_data) {
    assert((args_data != nullptr) && "Must allocate buffer for arguments");
    this->args_ = reinterpret_cast<Arguments *>(args_data);

    using cask::tester::value;
    using cask::tester::FillMode;
    std::vector<cask::tester::ParamDesc::Param> options{
      
      { "", "y.depth",
        "Pooling: y.depth. Default: 1.",
        value<int64_t>(&(args_->y.depth), 1) },
      { "", "y.height",
        "Pooling: y.height. Default: 32.",
        value<int64_t>(&(args_->y.height), 32) },
      { "", "y.width",
        "Pooling: y.width. Default: 32.",
        value<int64_t>(&(args_->y.width), 32) },
      { "", "y.channels",
        "Pooling: y.channels. Default: 32.",
        value<int64_t>(&(args_->y.channels), 32) },
      { "", "y.batches",
        "Pooling: y.batches. Default: 1.",
        value<int64_t>(&(args_->y.batches), 1) },
      { "", "y.stride.depth",
        "Pooling: y.stride.depth. Default: -1.",
        value<int64_t>(&(args_->y.stride.depth), -1) },
      { "", "y.stride.height",
        "Pooling: y.stride.height. Default: -1.",
        value<int64_t>(&(args_->y.stride.height), -1) },
      { "", "y.stride.width",
        "Pooling: y.stride.width. Default: -1.",
        value<int64_t>(&(args_->y.stride.width), -1) },
      { "", "y.stride.channels",
        "Pooling: y.stride.channels. Default: -1.",
        value<int64_t>(&(args_->y.stride.channels), -1) },
      { "", "y.stride.batches",
        "Pooling: y.stride.batches. Default: -1.",
        value<int64_t>(&(args_->y.stride.batches), -1) },
      { "", "x.depth",
        "Pooling: x.depth. Default: 1.",
        value<int64_t>(&(args_->x.depth), 1) },
      { "", "x.height",
        "Pooling: x.height. Default: 32.",
        value<int64_t>(&(args_->x.height), 32) },
      { "", "x.width",
        "Pooling: x.width. Default: 32.",
        value<int64_t>(&(args_->x.width), 32) },
      { "", "x.channels",
        "Pooling: x.channels. Default: 32.",
        value<int64_t>(&(args_->x.channels), 32) },
      { "", "x.batches",
        "Pooling: x.batches. Default: 1.",
        value<int64_t>(&(args_->x.batches), 1) },
      { "", "x.stride.depth",
        "Pooling: x.stride.depth. Default: -1.",
        value<int64_t>(&(args_->x.stride.depth), -1) },
      { "", "x.stride.height",
        "Pooling: x.stride.height. Default: -1.",
        value<int64_t>(&(args_->x.stride.height), -1) },
      { "", "x.stride.width",
        "Pooling: x.stride.width. Default: -1.",
        value<int64_t>(&(args_->x.stride.width), -1) },
      { "", "x.stride.channels",
        "Pooling: x.stride.channels. Default: -1.",
        value<int64_t>(&(args_->x.stride.channels), -1) },
      { "", "x.stride.batches",
        "Pooling: x.stride.batches. Default: -1.",
        value<int64_t>(&(args_->x.stride.batches), -1) },
      { "", "padding_top",
        "Pooling: padding_top. Default: 0.",
        value<int64_t>(&(args_->padding_top), 0) },
      { "", "padding_bottom",
        "Pooling: padding_bottom. Default: 0.",
        value<int64_t>(&(args_->padding_bottom), 0) },
      { "", "padding_left",
        "Pooling: padding_left. Default: 0.",
        value<int64_t>(&(args_->padding_left), 0) },
      { "", "padding_right",
        "Pooling: padding_right. Default: 0.",
        value<int64_t>(&(args_->padding_right), 0) },
      { "", "stride_height",
        "Pooling: stride_height. Default: 1.",
        value<int64_t>(&(args_->stride_height), 1) },
      { "", "stride_width",
        "Pooling: stride_width. Default: 1.",
        value<int64_t>(&(args_->stride_width), 1) },
      { "", "win_height",
        "Pooling: win_height. Default: 1.",
        value<int64_t>(&(args_->win_height), 1) },
      { "", "win_width",
        "Pooling: win_width. Default: 1.",
        value<int64_t>(&(args_->win_width), 1) },
      { "", "valpha.elems",
        "Pooling: valpha.elems. Default: 128.",
        value<int64_t>(&(args_->valpha.elems), 128) },
      { "", "valpha.stride.elems",
        "Pooling: valpha.stride.elems. Default: -1.",
        value<int64_t>(&(args_->valpha.stride.elems), -1) },
      { "", "vbeta.elems",
        "Pooling: vbeta.elems. Default: 128.",
        value<int64_t>(&(args_->vbeta.elems), 128) },
      { "", "vbeta.stride.elems",
        "Pooling: vbeta.stride.elems. Default: -1.",
        value<int64_t>(&(args_->vbeta.stride.elems), -1) },
      { "", "alpha",
        "Pooling: alpha. Default: 1.0.",
        value<float>(&(args_->alpha), 1.0) },
      { "", "beta",
        "Pooling: beta. Default: 1.0.",
        value<float>(&(args_->beta), 1.0) },
      { "", "blend_factor",
        "Pooling: blend_factor. Default: 0.",
        value<float>(&(args_->blend_factor), 0) },
      { "", "pooling_mode",
        "Pooling: pooling_mode. Default: 1.",
        value<int>(&(args_->pooling_mode), 1) },
      { "", "per_channel_scaling",
        "Pooling: per_channel_scaling. Use --no_per_channel_scaling to disable it. Default: false.",
        value<bool>(&(args_->per_channel_scaling), false) },
      { "", "y.fill", "Pooling: y.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "y.ref.fill", "Pooling: y.ref.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "x.fill", "Pooling: x.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "valpha.fill", "Pooling: valpha.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "cask_managed_valpha", "Pooling: Let CASK to manage this tensor Default: false",
        value<bool>(&(args_->cask_managed_valpha), false) },
      { "", "vbeta.fill", "Pooling: vbeta.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "cask_managed_vbeta", "Pooling: Let CASK to manage this tensor Default: false",
        value<bool>(&(args_->cask_managed_vbeta), false) },
    };

    this->add_options(options);
  }

  ~ArgParser() {}

  const Arguments *arguments() const { return args_; }

  void deleteArguments() { if (args_) delete args_; }

  int parse(const int argc, const char *argv[], bool fail_on_bad_opt = true) {
    int parsed_args = cask::tester::parse(argc, argv, this->param_desc(), fail_on_bad_opt);

    // Update arguments for consistence
    cask_plugin::toInternalShape(&args_->y)->finalize();
    //args_->y.finalize();
    cask_plugin::toInternalShape(&args_->x)->finalize();
    //args_->x.finalize();
    cask_plugin::toInternalShape(&args_->valpha)->finalize();
    //args_->valpha.finalize();
    cask_plugin::toInternalShape(&args_->vbeta)->finalize();
    //args_->vbeta.finalize();

    this->finalize();

    return parsed_args;
  }

  virtual void finalize() { }

private:
    Arguments *args_;
};


template<>
class ArgParser<cask_plugin::Softmax> : public cask::tester::ArgParser {
public:
  using Arguments = cask_plugin::Softmax;

  ArgParser(void *args_data) : cask::tester::ArgParser(args_data) {
    assert((args_data != nullptr) && "Must allocate buffer for arguments");
    this->args_ = reinterpret_cast<Arguments *>(args_data);

    using cask::tester::value;
    using cask::tester::FillMode;
    std::vector<cask::tester::ParamDesc::Param> options{
      
      { "", "x.batches",
        "Softmax: x.batches. Default: 1.",
        value<int64_t>(&(args_->x.batches), 1) },
      { "", "x.rows",
        "Softmax: x.rows. Default: 128.",
        value<int64_t>(&(args_->x.rows), 128) },
      { "", "x.cols",
        "Softmax: x.cols. Default: 128.",
        value<int64_t>(&(args_->x.cols), 128) },
      { "", "x.stride.batches",
        "Softmax: x.stride.batches. Default: -1.",
        value<int64_t>(&(args_->x.stride.batches), -1) },
      { "", "x.stride.rows",
        "Softmax: x.stride.rows. Default: -1.",
        value<int64_t>(&(args_->x.stride.rows), -1) },
      { "", "x.stride.cols",
        "Softmax: x.stride.cols. Default: -1.",
        value<int64_t>(&(args_->x.stride.cols), -1) },
      { "", "y.stride.batches",
        "Softmax: y.stride.batches. Default: -1.",
        value<int64_t>(&(args_->y.stride.batches), -1) },
      { "", "y.stride.rows",
        "Softmax: y.stride.rows. Default: -1.",
        value<int64_t>(&(args_->y.stride.rows), -1) },
      { "", "y.stride.cols",
        "Softmax: y.stride.cols. Default: -1.",
        value<int64_t>(&(args_->y.stride.cols), -1) },
      { "", "dim",
        "Softmax: dim. Default: 0.",
        value<int>(&(args_->dim), 0) },
      { "", "alpha",
        "Softmax: alpha. Default: 1.0.",
        value<double>(&(args_->alpha), 1.0) },
      { "", "beta",
        "Softmax: beta. Default: 1.0.",
        value<double>(&(args_->beta), 1.0) },
      { "", "per_channel_scaling",
        "Softmax: per_channel_scaling. Use --no_per_channel_scaling to disable it. Default: false.",
        value<bool>(&(args_->per_channel_scaling), false) },
      { "", "x.fill", "Softmax: x.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "y.fill", "Softmax: y.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "y.ref.fill", "Softmax: y.ref.fill",
        value<FillMode>(nullptr, FillMode()) },
    };

    this->add_options(options);
  }

  ~ArgParser() {}

  const Arguments *arguments() const { return args_; }

  void deleteArguments() { if (args_) delete args_; }

  int parse(const int argc, const char *argv[], bool fail_on_bad_opt = true) {
    int parsed_args = cask::tester::parse(argc, argv, this->param_desc(), fail_on_bad_opt);

    // Update arguments for consistence
    args_->y.batches = args_->x.batches;
    args_->y.rows = args_->x.rows;
    args_->y.cols = args_->x.cols;
    cask_plugin::toInternalShape(&args_->x)->finalize();
    //args_->x.finalize();
    cask_plugin::toInternalShape(&args_->y)->finalize();
    //args_->y.finalize();

    this->finalize();

    return parsed_args;
  }

  virtual void finalize() { }

private:
    Arguments *args_;
};


template<>
class ArgParser<cask_plugin::Reduce> : public cask::tester::ArgParser {
public:
  using Arguments = cask_plugin::Reduce;

  ArgParser(void *args_data) : cask::tester::ArgParser(args_data) {
    assert((args_data != nullptr) && "Must allocate buffer for arguments");
    this->args_ = reinterpret_cast<Arguments *>(args_data);

    using cask::tester::value;
    using cask::tester::FillMode;
    std::vector<cask::tester::ParamDesc::Param> options{
      
      { "", "x.batches",
        "Reduce: x.batches. Default: 1.",
        value<int64_t>(&(args_->x.batches), 1) },
      { "", "x.rows",
        "Reduce: x.rows. Default: 128.",
        value<int64_t>(&(args_->x.rows), 128) },
      { "", "x.cols",
        "Reduce: x.cols. Default: 128.",
        value<int64_t>(&(args_->x.cols), 128) },
      { "", "x.stride.batches",
        "Reduce: x.stride.batches. Default: -1.",
        value<int64_t>(&(args_->x.stride.batches), -1) },
      { "", "x.stride.rows",
        "Reduce: x.stride.rows. Default: -1.",
        value<int64_t>(&(args_->x.stride.rows), -1) },
      { "", "x.stride.cols",
        "Reduce: x.stride.cols. Default: -1.",
        value<int64_t>(&(args_->x.stride.cols), -1) },
      { "", "y.batches",
        "Reduce: y.batches. Default: 1.",
        value<int64_t>(&(args_->y.batches), 1) },
      { "", "y.rows",
        "Reduce: y.rows. Default: 128.",
        value<int64_t>(&(args_->y.rows), 128) },
      { "", "y.cols",
        "Reduce: y.cols. Default: 128.",
        value<int64_t>(&(args_->y.cols), 128) },
      { "", "y.stride.batches",
        "Reduce: y.stride.batches. Default: -1.",
        value<int64_t>(&(args_->y.stride.batches), -1) },
      { "", "y.stride.rows",
        "Reduce: y.stride.rows. Default: -1.",
        value<int64_t>(&(args_->y.stride.rows), -1) },
      { "", "y.stride.cols",
        "Reduce: y.stride.cols. Default: -1.",
        value<int64_t>(&(args_->y.stride.cols), -1) },
      { "", "partial_sum.batches",
        "Reduce: partial_sum.batches. Default: 1.",
        value<int64_t>(&(args_->partial_sum.batches), 1) },
      { "", "partial_sum.rows",
        "Reduce: partial_sum.rows. Default: 128.",
        value<int64_t>(&(args_->partial_sum.rows), 128) },
      { "", "partial_sum.cols",
        "Reduce: partial_sum.cols. Default: 128.",
        value<int64_t>(&(args_->partial_sum.cols), 128) },
      { "", "partial_sum.stride.batches",
        "Reduce: partial_sum.stride.batches. Default: -1.",
        value<int64_t>(&(args_->partial_sum.stride.batches), -1) },
      { "", "partial_sum.stride.rows",
        "Reduce: partial_sum.stride.rows. Default: -1.",
        value<int64_t>(&(args_->partial_sum.stride.rows), -1) },
      { "", "partial_sum.stride.cols",
        "Reduce: partial_sum.stride.cols. Default: -1.",
        value<int64_t>(&(args_->partial_sum.stride.cols), -1) },
      { "", "partial_sum_square.batches",
        "Reduce: partial_sum_square.batches. Default: 1.",
        value<int64_t>(&(args_->partial_sum_square.batches), 1) },
      { "", "partial_sum_square.rows",
        "Reduce: partial_sum_square.rows. Default: 128.",
        value<int64_t>(&(args_->partial_sum_square.rows), 128) },
      { "", "partial_sum_square.cols",
        "Reduce: partial_sum_square.cols. Default: 128.",
        value<int64_t>(&(args_->partial_sum_square.cols), 128) },
      { "", "partial_sum_square.stride.batches",
        "Reduce: partial_sum_square.stride.batches. Default: -1.",
        value<int64_t>(&(args_->partial_sum_square.stride.batches), -1) },
      { "", "partial_sum_square.stride.rows",
        "Reduce: partial_sum_square.stride.rows. Default: -1.",
        value<int64_t>(&(args_->partial_sum_square.stride.rows), -1) },
      { "", "partial_sum_square.stride.cols",
        "Reduce: partial_sum_square.stride.cols. Default: -1.",
        value<int64_t>(&(args_->partial_sum_square.stride.cols), -1) },
      { "", "gamma.batches",
        "Reduce: gamma.batches. Default: 1.",
        value<int64_t>(&(args_->gamma.batches), 1) },
      { "", "gamma.rows",
        "Reduce: gamma.rows. Default: 128.",
        value<int64_t>(&(args_->gamma.rows), 128) },
      { "", "gamma.cols",
        "Reduce: gamma.cols. Default: 128.",
        value<int64_t>(&(args_->gamma.cols), 128) },
      { "", "gamma.stride.batches",
        "Reduce: gamma.stride.batches. Default: -1.",
        value<int64_t>(&(args_->gamma.stride.batches), -1) },
      { "", "gamma.stride.rows",
        "Reduce: gamma.stride.rows. Default: -1.",
        value<int64_t>(&(args_->gamma.stride.rows), -1) },
      { "", "gamma.stride.cols",
        "Reduce: gamma.stride.cols. Default: -1.",
        value<int64_t>(&(args_->gamma.stride.cols), -1) },
      { "", "beta.batches",
        "Reduce: beta.batches. Default: 1.",
        value<int64_t>(&(args_->beta.batches), 1) },
      { "", "beta.rows",
        "Reduce: beta.rows. Default: 128.",
        value<int64_t>(&(args_->beta.rows), 128) },
      { "", "beta.cols",
        "Reduce: beta.cols. Default: 128.",
        value<int64_t>(&(args_->beta.cols), 128) },
      { "", "beta.stride.batches",
        "Reduce: beta.stride.batches. Default: -1.",
        value<int64_t>(&(args_->beta.stride.batches), -1) },
      { "", "beta.stride.rows",
        "Reduce: beta.stride.rows. Default: -1.",
        value<int64_t>(&(args_->beta.stride.rows), -1) },
      { "", "beta.stride.cols",
        "Reduce: beta.stride.cols. Default: -1.",
        value<int64_t>(&(args_->beta.stride.cols), -1) },
      { "", "inv_count",
        "Reduce: inv_count. Default: 0.0.",
        value<float>(&(args_->inv_count), 0.0) },
      { "", "epsilon",
        "Reduce: epsilon. Default: 0.0.",
        value<float>(&(args_->epsilon), 0.0) },
      { "", "dqScaleIn",
        "Reduce: dqScaleIn. Default: 0.0.",
        value<float>(&(args_->dqScaleIn), 0.0) },
      { "", "qScale",
        "Reduce: qScale. Default: 0.0.",
        value<float>(&(args_->qScale), 0.0) },
      { "", "num_elements_per_partial_sum",
        "Reduce: num_elements_per_partial_sum. Default: 0.",
        value<int>(&(args_->num_elements_per_partial_sum), 0) },
      { "", "num_partial_sums",
        "Reduce: num_partial_sums. Default: 0.",
        value<int>(&(args_->num_partial_sums), 0) },
      { "", "M",
        "Reduce: M. Default: 0.",
        value<int>(&(args_->M), 0) },
      { "", "N",
        "Reduce: N. Default: 0.",
        value<int>(&(args_->N), 0) },
      { "", "x.fill", "Reduce: x.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "y.fill", "Reduce: y.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "y.ref.fill", "Reduce: y.ref.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "partial_sum.fill", "Reduce: partial_sum.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "partial_sum_square.fill", "Reduce: partial_sum_square.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "gamma.fill", "Reduce: gamma.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "beta.fill", "Reduce: beta.fill",
        value<FillMode>(nullptr, FillMode()) },
    };

    this->add_options(options);
  }

  ~ArgParser() {}

  const Arguments *arguments() const { return args_; }

  void deleteArguments() { if (args_) delete args_; }

  int parse(const int argc, const char *argv[], bool fail_on_bad_opt = true) {
    int parsed_args = cask::tester::parse(argc, argv, this->param_desc(), fail_on_bad_opt);

    // Update arguments for consistence
    cask_plugin::toInternalShape(&args_->x)->finalize();
    //args_->x.finalize();
    cask_plugin::toInternalShape(&args_->y)->finalize();
    //args_->y.finalize();
    cask_plugin::toInternalShape(&args_->partial_sum)->finalize();
    //args_->partial_sum.finalize();
    cask_plugin::toInternalShape(&args_->partial_sum_square)->finalize();
    //args_->partial_sum_square.finalize();
    cask_plugin::toInternalShape(&args_->gamma)->finalize();
    //args_->gamma.finalize();
    cask_plugin::toInternalShape(&args_->beta)->finalize();
    //args_->beta.finalize();

    this->finalize();

    return parsed_args;
  }

  virtual void finalize() { }

private:
    Arguments *args_;
};


template<>
class ArgParser<cask_plugin::ReLU> : public cask::tester::ArgParser {
public:
  using Arguments = cask_plugin::ReLU;

  ArgParser(void *args_data) : cask::tester::ArgParser(args_data) {
    assert((args_data != nullptr) && "Must allocate buffer for arguments");
    this->args_ = reinterpret_cast<Arguments *>(args_data);

    using cask::tester::value;
    using cask::tester::FillMode;
    std::vector<cask::tester::ParamDesc::Param> options{
      
      { "", "x.dim[0]",
        "ReLU: x.dim[0]. Default: -1.",
        value<int64_t>(&(args_->x.dim[0]), -1) },
      { "", "x.dim[1]",
        "ReLU: x.dim[1]. Default: -1.",
        value<int64_t>(&(args_->x.dim[1]), -1) },
      { "", "x.dim[2]",
        "ReLU: x.dim[2]. Default: -1.",
        value<int64_t>(&(args_->x.dim[2]), -1) },
      { "", "x.dim[3]",
        "ReLU: x.dim[3]. Default: -1.",
        value<int64_t>(&(args_->x.dim[3]), -1) },
      { "", "x.dim[4]",
        "ReLU: x.dim[4]. Default: -1.",
        value<int64_t>(&(args_->x.dim[4]), -1) },
      { "", "x.dim[5]",
        "ReLU: x.dim[5]. Default: -1.",
        value<int64_t>(&(args_->x.dim[5]), -1) },
      { "", "x.dim[6]",
        "ReLU: x.dim[6]. Default: -1.",
        value<int64_t>(&(args_->x.dim[6]), -1) },
      { "", "x.dim[7]",
        "ReLU: x.dim[7]. Default: -1.",
        value<int64_t>(&(args_->x.dim[7]), -1) },
      { "", "x.dim[8]",
        "ReLU: x.dim[8]. Default: -1.",
        value<int64_t>(&(args_->x.dim[8]), -1) },
      { "", "x.dim[9]",
        "ReLU: x.dim[9]. Default: -1.",
        value<int64_t>(&(args_->x.dim[9]), -1) },
      { "", "x.dim[10]",
        "ReLU: x.dim[10]. Default: -1.",
        value<int64_t>(&(args_->x.dim[10]), -1) },
      { "", "x.dim[11]",
        "ReLU: x.dim[11]. Default: -1.",
        value<int64_t>(&(args_->x.dim[11]), -1) },
      { "", "x.dim[12]",
        "ReLU: x.dim[12]. Default: -1.",
        value<int64_t>(&(args_->x.dim[12]), -1) },
      { "", "x.dim[13]",
        "ReLU: x.dim[13]. Default: -1.",
        value<int64_t>(&(args_->x.dim[13]), -1) },
      { "", "x.dim[14]",
        "ReLU: x.dim[14]. Default: -1.",
        value<int64_t>(&(args_->x.dim[14]), -1) },
      { "", "x.dim[15]",
        "ReLU: x.dim[15]. Default: -1.",
        value<int64_t>(&(args_->x.dim[15]), -1) },
      { "", "x.dim[16]",
        "ReLU: x.dim[16]. Default: -1.",
        value<int64_t>(&(args_->x.dim[16]), -1) },
      { "", "x.dim[17]",
        "ReLU: x.dim[17]. Default: -1.",
        value<int64_t>(&(args_->x.dim[17]), -1) },
      { "", "x.dim[18]",
        "ReLU: x.dim[18]. Default: -1.",
        value<int64_t>(&(args_->x.dim[18]), -1) },
      { "", "x.dim[19]",
        "ReLU: x.dim[19]. Default: -1.",
        value<int64_t>(&(args_->x.dim[19]), -1) },
      { "", "x.dim[20]",
        "ReLU: x.dim[20]. Default: -1.",
        value<int64_t>(&(args_->x.dim[20]), -1) },
      { "", "x.dim[21]",
        "ReLU: x.dim[21]. Default: -1.",
        value<int64_t>(&(args_->x.dim[21]), -1) },
      { "", "x.dim[22]",
        "ReLU: x.dim[22]. Default: -1.",
        value<int64_t>(&(args_->x.dim[22]), -1) },
      { "", "x.dim[23]",
        "ReLU: x.dim[23]. Default: -1.",
        value<int64_t>(&(args_->x.dim[23]), -1) },
      { "", "x.dim[24]",
        "ReLU: x.dim[24]. Default: -1.",
        value<int64_t>(&(args_->x.dim[24]), -1) },
      { "", "x.dim[25]",
        "ReLU: x.dim[25]. Default: -1.",
        value<int64_t>(&(args_->x.dim[25]), -1) },
      { "", "x.dim[26]",
        "ReLU: x.dim[26]. Default: -1.",
        value<int64_t>(&(args_->x.dim[26]), -1) },
      { "", "x.dim[27]",
        "ReLU: x.dim[27]. Default: -1.",
        value<int64_t>(&(args_->x.dim[27]), -1) },
      { "", "x.dim[28]",
        "ReLU: x.dim[28]. Default: -1.",
        value<int64_t>(&(args_->x.dim[28]), -1) },
      { "", "x.dim[29]",
        "ReLU: x.dim[29]. Default: -1.",
        value<int64_t>(&(args_->x.dim[29]), -1) },
      { "", "x.dim[30]",
        "ReLU: x.dim[30]. Default: -1.",
        value<int64_t>(&(args_->x.dim[30]), -1) },
      { "", "x.dim[31]",
        "ReLU: x.dim[31]. Default: -1.",
        value<int64_t>(&(args_->x.dim[31]), -1) },
      { "", "x.dim[32]",
        "ReLU: x.dim[32]. Default: -1.",
        value<int64_t>(&(args_->x.dim[32]), -1) },
      { "", "x.dim[33]",
        "ReLU: x.dim[33]. Default: -1.",
        value<int64_t>(&(args_->x.dim[33]), -1) },
      { "", "x.dim[34]",
        "ReLU: x.dim[34]. Default: -1.",
        value<int64_t>(&(args_->x.dim[34]), -1) },
      { "", "x.dim[35]",
        "ReLU: x.dim[35]. Default: -1.",
        value<int64_t>(&(args_->x.dim[35]), -1) },
      { "", "x.stride[0]",
        "ReLU: x.stride[0]. Default: -1.",
        value<int64_t>(&(args_->x.stride[0]), -1) },
      { "", "x.stride[1]",
        "ReLU: x.stride[1]. Default: -1.",
        value<int64_t>(&(args_->x.stride[1]), -1) },
      { "", "x.stride[2]",
        "ReLU: x.stride[2]. Default: -1.",
        value<int64_t>(&(args_->x.stride[2]), -1) },
      { "", "x.stride[3]",
        "ReLU: x.stride[3]. Default: -1.",
        value<int64_t>(&(args_->x.stride[3]), -1) },
      { "", "x.stride[4]",
        "ReLU: x.stride[4]. Default: -1.",
        value<int64_t>(&(args_->x.stride[4]), -1) },
      { "", "x.stride[5]",
        "ReLU: x.stride[5]. Default: -1.",
        value<int64_t>(&(args_->x.stride[5]), -1) },
      { "", "x.stride[6]",
        "ReLU: x.stride[6]. Default: -1.",
        value<int64_t>(&(args_->x.stride[6]), -1) },
      { "", "x.stride[7]",
        "ReLU: x.stride[7]. Default: -1.",
        value<int64_t>(&(args_->x.stride[7]), -1) },
      { "", "x.stride[8]",
        "ReLU: x.stride[8]. Default: -1.",
        value<int64_t>(&(args_->x.stride[8]), -1) },
      { "", "x.stride[9]",
        "ReLU: x.stride[9]. Default: -1.",
        value<int64_t>(&(args_->x.stride[9]), -1) },
      { "", "x.stride[10]",
        "ReLU: x.stride[10]. Default: -1.",
        value<int64_t>(&(args_->x.stride[10]), -1) },
      { "", "x.stride[11]",
        "ReLU: x.stride[11]. Default: -1.",
        value<int64_t>(&(args_->x.stride[11]), -1) },
      { "", "x.stride[12]",
        "ReLU: x.stride[12]. Default: -1.",
        value<int64_t>(&(args_->x.stride[12]), -1) },
      { "", "x.stride[13]",
        "ReLU: x.stride[13]. Default: -1.",
        value<int64_t>(&(args_->x.stride[13]), -1) },
      { "", "x.stride[14]",
        "ReLU: x.stride[14]. Default: -1.",
        value<int64_t>(&(args_->x.stride[14]), -1) },
      { "", "x.stride[15]",
        "ReLU: x.stride[15]. Default: -1.",
        value<int64_t>(&(args_->x.stride[15]), -1) },
      { "", "x.stride[16]",
        "ReLU: x.stride[16]. Default: -1.",
        value<int64_t>(&(args_->x.stride[16]), -1) },
      { "", "x.stride[17]",
        "ReLU: x.stride[17]. Default: -1.",
        value<int64_t>(&(args_->x.stride[17]), -1) },
      { "", "x.stride[18]",
        "ReLU: x.stride[18]. Default: -1.",
        value<int64_t>(&(args_->x.stride[18]), -1) },
      { "", "x.stride[19]",
        "ReLU: x.stride[19]. Default: -1.",
        value<int64_t>(&(args_->x.stride[19]), -1) },
      { "", "x.stride[20]",
        "ReLU: x.stride[20]. Default: -1.",
        value<int64_t>(&(args_->x.stride[20]), -1) },
      { "", "x.stride[21]",
        "ReLU: x.stride[21]. Default: -1.",
        value<int64_t>(&(args_->x.stride[21]), -1) },
      { "", "x.stride[22]",
        "ReLU: x.stride[22]. Default: -1.",
        value<int64_t>(&(args_->x.stride[22]), -1) },
      { "", "x.stride[23]",
        "ReLU: x.stride[23]. Default: -1.",
        value<int64_t>(&(args_->x.stride[23]), -1) },
      { "", "x.stride[24]",
        "ReLU: x.stride[24]. Default: -1.",
        value<int64_t>(&(args_->x.stride[24]), -1) },
      { "", "x.stride[25]",
        "ReLU: x.stride[25]. Default: -1.",
        value<int64_t>(&(args_->x.stride[25]), -1) },
      { "", "x.stride[26]",
        "ReLU: x.stride[26]. Default: -1.",
        value<int64_t>(&(args_->x.stride[26]), -1) },
      { "", "x.stride[27]",
        "ReLU: x.stride[27]. Default: -1.",
        value<int64_t>(&(args_->x.stride[27]), -1) },
      { "", "x.stride[28]",
        "ReLU: x.stride[28]. Default: -1.",
        value<int64_t>(&(args_->x.stride[28]), -1) },
      { "", "x.stride[29]",
        "ReLU: x.stride[29]. Default: -1.",
        value<int64_t>(&(args_->x.stride[29]), -1) },
      { "", "x.stride[30]",
        "ReLU: x.stride[30]. Default: -1.",
        value<int64_t>(&(args_->x.stride[30]), -1) },
      { "", "x.stride[31]",
        "ReLU: x.stride[31]. Default: -1.",
        value<int64_t>(&(args_->x.stride[31]), -1) },
      { "", "x.stride[32]",
        "ReLU: x.stride[32]. Default: -1.",
        value<int64_t>(&(args_->x.stride[32]), -1) },
      { "", "x.stride[33]",
        "ReLU: x.stride[33]. Default: -1.",
        value<int64_t>(&(args_->x.stride[33]), -1) },
      { "", "x.stride[34]",
        "ReLU: x.stride[34]. Default: -1.",
        value<int64_t>(&(args_->x.stride[34]), -1) },
      { "", "x.stride[35]",
        "ReLU: x.stride[35]. Default: -1.",
        value<int64_t>(&(args_->x.stride[35]), -1) },
      { "", "x.dimensions",
        "ReLU: x.dimensions. Default: 36.",
        value<int32_t>(&(args_->x.dimensions), 36) },
      { "", "y.dim[0]",
        "ReLU: y.dim[0]. Default: -1.",
        value<int64_t>(&(args_->y.dim[0]), -1) },
      { "", "y.dim[1]",
        "ReLU: y.dim[1]. Default: -1.",
        value<int64_t>(&(args_->y.dim[1]), -1) },
      { "", "y.dim[2]",
        "ReLU: y.dim[2]. Default: -1.",
        value<int64_t>(&(args_->y.dim[2]), -1) },
      { "", "y.dim[3]",
        "ReLU: y.dim[3]. Default: -1.",
        value<int64_t>(&(args_->y.dim[3]), -1) },
      { "", "y.dim[4]",
        "ReLU: y.dim[4]. Default: -1.",
        value<int64_t>(&(args_->y.dim[4]), -1) },
      { "", "y.dim[5]",
        "ReLU: y.dim[5]. Default: -1.",
        value<int64_t>(&(args_->y.dim[5]), -1) },
      { "", "y.dim[6]",
        "ReLU: y.dim[6]. Default: -1.",
        value<int64_t>(&(args_->y.dim[6]), -1) },
      { "", "y.dim[7]",
        "ReLU: y.dim[7]. Default: -1.",
        value<int64_t>(&(args_->y.dim[7]), -1) },
      { "", "y.dim[8]",
        "ReLU: y.dim[8]. Default: -1.",
        value<int64_t>(&(args_->y.dim[8]), -1) },
      { "", "y.dim[9]",
        "ReLU: y.dim[9]. Default: -1.",
        value<int64_t>(&(args_->y.dim[9]), -1) },
      { "", "y.dim[10]",
        "ReLU: y.dim[10]. Default: -1.",
        value<int64_t>(&(args_->y.dim[10]), -1) },
      { "", "y.dim[11]",
        "ReLU: y.dim[11]. Default: -1.",
        value<int64_t>(&(args_->y.dim[11]), -1) },
      { "", "y.dim[12]",
        "ReLU: y.dim[12]. Default: -1.",
        value<int64_t>(&(args_->y.dim[12]), -1) },
      { "", "y.dim[13]",
        "ReLU: y.dim[13]. Default: -1.",
        value<int64_t>(&(args_->y.dim[13]), -1) },
      { "", "y.dim[14]",
        "ReLU: y.dim[14]. Default: -1.",
        value<int64_t>(&(args_->y.dim[14]), -1) },
      { "", "y.dim[15]",
        "ReLU: y.dim[15]. Default: -1.",
        value<int64_t>(&(args_->y.dim[15]), -1) },
      { "", "y.dim[16]",
        "ReLU: y.dim[16]. Default: -1.",
        value<int64_t>(&(args_->y.dim[16]), -1) },
      { "", "y.dim[17]",
        "ReLU: y.dim[17]. Default: -1.",
        value<int64_t>(&(args_->y.dim[17]), -1) },
      { "", "y.dim[18]",
        "ReLU: y.dim[18]. Default: -1.",
        value<int64_t>(&(args_->y.dim[18]), -1) },
      { "", "y.dim[19]",
        "ReLU: y.dim[19]. Default: -1.",
        value<int64_t>(&(args_->y.dim[19]), -1) },
      { "", "y.dim[20]",
        "ReLU: y.dim[20]. Default: -1.",
        value<int64_t>(&(args_->y.dim[20]), -1) },
      { "", "y.dim[21]",
        "ReLU: y.dim[21]. Default: -1.",
        value<int64_t>(&(args_->y.dim[21]), -1) },
      { "", "y.dim[22]",
        "ReLU: y.dim[22]. Default: -1.",
        value<int64_t>(&(args_->y.dim[22]), -1) },
      { "", "y.dim[23]",
        "ReLU: y.dim[23]. Default: -1.",
        value<int64_t>(&(args_->y.dim[23]), -1) },
      { "", "y.dim[24]",
        "ReLU: y.dim[24]. Default: -1.",
        value<int64_t>(&(args_->y.dim[24]), -1) },
      { "", "y.dim[25]",
        "ReLU: y.dim[25]. Default: -1.",
        value<int64_t>(&(args_->y.dim[25]), -1) },
      { "", "y.dim[26]",
        "ReLU: y.dim[26]. Default: -1.",
        value<int64_t>(&(args_->y.dim[26]), -1) },
      { "", "y.dim[27]",
        "ReLU: y.dim[27]. Default: -1.",
        value<int64_t>(&(args_->y.dim[27]), -1) },
      { "", "y.dim[28]",
        "ReLU: y.dim[28]. Default: -1.",
        value<int64_t>(&(args_->y.dim[28]), -1) },
      { "", "y.dim[29]",
        "ReLU: y.dim[29]. Default: -1.",
        value<int64_t>(&(args_->y.dim[29]), -1) },
      { "", "y.dim[30]",
        "ReLU: y.dim[30]. Default: -1.",
        value<int64_t>(&(args_->y.dim[30]), -1) },
      { "", "y.dim[31]",
        "ReLU: y.dim[31]. Default: -1.",
        value<int64_t>(&(args_->y.dim[31]), -1) },
      { "", "y.dim[32]",
        "ReLU: y.dim[32]. Default: -1.",
        value<int64_t>(&(args_->y.dim[32]), -1) },
      { "", "y.dim[33]",
        "ReLU: y.dim[33]. Default: -1.",
        value<int64_t>(&(args_->y.dim[33]), -1) },
      { "", "y.dim[34]",
        "ReLU: y.dim[34]. Default: -1.",
        value<int64_t>(&(args_->y.dim[34]), -1) },
      { "", "y.dim[35]",
        "ReLU: y.dim[35]. Default: -1.",
        value<int64_t>(&(args_->y.dim[35]), -1) },
      { "", "y.stride[0]",
        "ReLU: y.stride[0]. Default: -1.",
        value<int64_t>(&(args_->y.stride[0]), -1) },
      { "", "y.stride[1]",
        "ReLU: y.stride[1]. Default: -1.",
        value<int64_t>(&(args_->y.stride[1]), -1) },
      { "", "y.stride[2]",
        "ReLU: y.stride[2]. Default: -1.",
        value<int64_t>(&(args_->y.stride[2]), -1) },
      { "", "y.stride[3]",
        "ReLU: y.stride[3]. Default: -1.",
        value<int64_t>(&(args_->y.stride[3]), -1) },
      { "", "y.stride[4]",
        "ReLU: y.stride[4]. Default: -1.",
        value<int64_t>(&(args_->y.stride[4]), -1) },
      { "", "y.stride[5]",
        "ReLU: y.stride[5]. Default: -1.",
        value<int64_t>(&(args_->y.stride[5]), -1) },
      { "", "y.stride[6]",
        "ReLU: y.stride[6]. Default: -1.",
        value<int64_t>(&(args_->y.stride[6]), -1) },
      { "", "y.stride[7]",
        "ReLU: y.stride[7]. Default: -1.",
        value<int64_t>(&(args_->y.stride[7]), -1) },
      { "", "y.stride[8]",
        "ReLU: y.stride[8]. Default: -1.",
        value<int64_t>(&(args_->y.stride[8]), -1) },
      { "", "y.stride[9]",
        "ReLU: y.stride[9]. Default: -1.",
        value<int64_t>(&(args_->y.stride[9]), -1) },
      { "", "y.stride[10]",
        "ReLU: y.stride[10]. Default: -1.",
        value<int64_t>(&(args_->y.stride[10]), -1) },
      { "", "y.stride[11]",
        "ReLU: y.stride[11]. Default: -1.",
        value<int64_t>(&(args_->y.stride[11]), -1) },
      { "", "y.stride[12]",
        "ReLU: y.stride[12]. Default: -1.",
        value<int64_t>(&(args_->y.stride[12]), -1) },
      { "", "y.stride[13]",
        "ReLU: y.stride[13]. Default: -1.",
        value<int64_t>(&(args_->y.stride[13]), -1) },
      { "", "y.stride[14]",
        "ReLU: y.stride[14]. Default: -1.",
        value<int64_t>(&(args_->y.stride[14]), -1) },
      { "", "y.stride[15]",
        "ReLU: y.stride[15]. Default: -1.",
        value<int64_t>(&(args_->y.stride[15]), -1) },
      { "", "y.stride[16]",
        "ReLU: y.stride[16]. Default: -1.",
        value<int64_t>(&(args_->y.stride[16]), -1) },
      { "", "y.stride[17]",
        "ReLU: y.stride[17]. Default: -1.",
        value<int64_t>(&(args_->y.stride[17]), -1) },
      { "", "y.stride[18]",
        "ReLU: y.stride[18]. Default: -1.",
        value<int64_t>(&(args_->y.stride[18]), -1) },
      { "", "y.stride[19]",
        "ReLU: y.stride[19]. Default: -1.",
        value<int64_t>(&(args_->y.stride[19]), -1) },
      { "", "y.stride[20]",
        "ReLU: y.stride[20]. Default: -1.",
        value<int64_t>(&(args_->y.stride[20]), -1) },
      { "", "y.stride[21]",
        "ReLU: y.stride[21]. Default: -1.",
        value<int64_t>(&(args_->y.stride[21]), -1) },
      { "", "y.stride[22]",
        "ReLU: y.stride[22]. Default: -1.",
        value<int64_t>(&(args_->y.stride[22]), -1) },
      { "", "y.stride[23]",
        "ReLU: y.stride[23]. Default: -1.",
        value<int64_t>(&(args_->y.stride[23]), -1) },
      { "", "y.stride[24]",
        "ReLU: y.stride[24]. Default: -1.",
        value<int64_t>(&(args_->y.stride[24]), -1) },
      { "", "y.stride[25]",
        "ReLU: y.stride[25]. Default: -1.",
        value<int64_t>(&(args_->y.stride[25]), -1) },
      { "", "y.stride[26]",
        "ReLU: y.stride[26]. Default: -1.",
        value<int64_t>(&(args_->y.stride[26]), -1) },
      { "", "y.stride[27]",
        "ReLU: y.stride[27]. Default: -1.",
        value<int64_t>(&(args_->y.stride[27]), -1) },
      { "", "y.stride[28]",
        "ReLU: y.stride[28]. Default: -1.",
        value<int64_t>(&(args_->y.stride[28]), -1) },
      { "", "y.stride[29]",
        "ReLU: y.stride[29]. Default: -1.",
        value<int64_t>(&(args_->y.stride[29]), -1) },
      { "", "y.stride[30]",
        "ReLU: y.stride[30]. Default: -1.",
        value<int64_t>(&(args_->y.stride[30]), -1) },
      { "", "y.stride[31]",
        "ReLU: y.stride[31]. Default: -1.",
        value<int64_t>(&(args_->y.stride[31]), -1) },
      { "", "y.stride[32]",
        "ReLU: y.stride[32]. Default: -1.",
        value<int64_t>(&(args_->y.stride[32]), -1) },
      { "", "y.stride[33]",
        "ReLU: y.stride[33]. Default: -1.",
        value<int64_t>(&(args_->y.stride[33]), -1) },
      { "", "y.stride[34]",
        "ReLU: y.stride[34]. Default: -1.",
        value<int64_t>(&(args_->y.stride[34]), -1) },
      { "", "y.stride[35]",
        "ReLU: y.stride[35]. Default: -1.",
        value<int64_t>(&(args_->y.stride[35]), -1) },
      { "", "y.dimensions",
        "ReLU: y.dimensions. Default: 36.",
        value<int32_t>(&(args_->y.dimensions), 36) },
      { "", "relu_lower_bound",
        "ReLU: relu_lower_bound. Default: 0.0.",
        value<float>(&(args_->relu_lower_bound), 0.0) },
      { "", "relu_upper_bound",
        "ReLU: relu_upper_bound. Default: 4.5.",
        value<float>(&(args_->relu_upper_bound), 4.5) },
      { "", "x.fill", "ReLU: x.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "y.fill", "ReLU: y.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "y.ref.fill", "ReLU: y.ref.fill",
        value<FillMode>(nullptr, FillMode()) },
    };

    this->add_options(options);
  }

  ~ArgParser() {}

  const Arguments *arguments() const { return args_; }

  void deleteArguments() { if (args_) delete args_; }

  int parse(const int argc, const char *argv[], bool fail_on_bad_opt = true) {
    int parsed_args = cask::tester::parse(argc, argv, this->param_desc(), fail_on_bad_opt);

    // Update arguments for consistence

    this->finalize();

    return parsed_args;
  }

  virtual void finalize() { }

private:
    Arguments *args_;
};


template<>
class ArgParser<cask_plugin::MatMul> : public cask::tester::ArgParser {
public:
  using Arguments = cask_plugin::MatMul;

  ArgParser(void *args_data) : cask::tester::ArgParser(args_data) {
    assert((args_data != nullptr) && "Must allocate buffer for arguments");
    this->args_ = reinterpret_cast<Arguments *>(args_data);

    using cask::tester::value;
    using cask::tester::FillMode;
    std::vector<cask::tester::ParamDesc::Param> options{
      
      { "", "a.batches",
        "MatMul: a.batches. Default: 1.",
        value<int64_t>(&(args_->a.batches), 1) },
      { "", "a.rows",
        "MatMul: a.rows. Default: 128.",
        value<int64_t>(&(args_->a.rows), 128) },
      { "", "a.stride.batches",
        "MatMul: a.stride.batches. Default: -1.",
        value<int64_t>(&(args_->a.stride.batches), -1) },
      { "", "a.stride.rows",
        "MatMul: a.stride.rows. Default: -1.",
        value<int64_t>(&(args_->a.stride.rows), -1) },
      { "", "a.stride.cols",
        "MatMul: a.stride.cols. Default: -1.",
        value<int64_t>(&(args_->a.stride.cols), -1) },
      { "", "b.rows",
        "MatMul: b.rows. Default: 128.",
        value<int64_t>(&(args_->b.rows), 128) },
      { "", "b.cols",
        "MatMul: b.cols. Default: 128.",
        value<int64_t>(&(args_->b.cols), 128) },
      { "", "b.stride.batches",
        "MatMul: b.stride.batches. Default: -1.",
        value<int64_t>(&(args_->b.stride.batches), -1) },
      { "", "b.stride.rows",
        "MatMul: b.stride.rows. Default: -1.",
        value<int64_t>(&(args_->b.stride.rows), -1) },
      { "", "b.stride.cols",
        "MatMul: b.stride.cols. Default: -1.",
        value<int64_t>(&(args_->b.stride.cols), -1) },
      { "", "c.stride.batches",
        "MatMul: c.stride.batches. Default: -1.",
        value<int64_t>(&(args_->c.stride.batches), -1) },
      { "", "c.stride.rows",
        "MatMul: c.stride.rows. Default: -1.",
        value<int64_t>(&(args_->c.stride.rows), -1) },
      { "", "c.stride.cols",
        "MatMul: c.stride.cols. Default: -1.",
        value<int64_t>(&(args_->c.stride.cols), -1) },
      { "", "f.dim[0]",
        "MatMul: f.dim[0]. Default: -1.",
        value<int64_t>(&(args_->f.dim[0]), -1) },
      { "", "f.dim[1]",
        "MatMul: f.dim[1]. Default: -1.",
        value<int64_t>(&(args_->f.dim[1]), -1) },
      { "", "f.dim[2]",
        "MatMul: f.dim[2]. Default: -1.",
        value<int64_t>(&(args_->f.dim[2]), -1) },
      { "", "f.dim[3]",
        "MatMul: f.dim[3]. Default: -1.",
        value<int64_t>(&(args_->f.dim[3]), -1) },
      { "", "f.dim[4]",
        "MatMul: f.dim[4]. Default: -1.",
        value<int64_t>(&(args_->f.dim[4]), -1) },
      { "", "f.dim[5]",
        "MatMul: f.dim[5]. Default: -1.",
        value<int64_t>(&(args_->f.dim[5]), -1) },
      { "", "f.dim[6]",
        "MatMul: f.dim[6]. Default: -1.",
        value<int64_t>(&(args_->f.dim[6]), -1) },
      { "", "f.dim[7]",
        "MatMul: f.dim[7]. Default: -1.",
        value<int64_t>(&(args_->f.dim[7]), -1) },
      { "", "f.dim[8]",
        "MatMul: f.dim[8]. Default: -1.",
        value<int64_t>(&(args_->f.dim[8]), -1) },
      { "", "f.dim[9]",
        "MatMul: f.dim[9]. Default: -1.",
        value<int64_t>(&(args_->f.dim[9]), -1) },
      { "", "f.dim[10]",
        "MatMul: f.dim[10]. Default: -1.",
        value<int64_t>(&(args_->f.dim[10]), -1) },
      { "", "f.dim[11]",
        "MatMul: f.dim[11]. Default: -1.",
        value<int64_t>(&(args_->f.dim[11]), -1) },
      { "", "f.dim[12]",
        "MatMul: f.dim[12]. Default: -1.",
        value<int64_t>(&(args_->f.dim[12]), -1) },
      { "", "f.dim[13]",
        "MatMul: f.dim[13]. Default: -1.",
        value<int64_t>(&(args_->f.dim[13]), -1) },
      { "", "f.dim[14]",
        "MatMul: f.dim[14]. Default: -1.",
        value<int64_t>(&(args_->f.dim[14]), -1) },
      { "", "f.dim[15]",
        "MatMul: f.dim[15]. Default: -1.",
        value<int64_t>(&(args_->f.dim[15]), -1) },
      { "", "f.dim[16]",
        "MatMul: f.dim[16]. Default: -1.",
        value<int64_t>(&(args_->f.dim[16]), -1) },
      { "", "f.dim[17]",
        "MatMul: f.dim[17]. Default: -1.",
        value<int64_t>(&(args_->f.dim[17]), -1) },
      { "", "f.dim[18]",
        "MatMul: f.dim[18]. Default: -1.",
        value<int64_t>(&(args_->f.dim[18]), -1) },
      { "", "f.dim[19]",
        "MatMul: f.dim[19]. Default: -1.",
        value<int64_t>(&(args_->f.dim[19]), -1) },
      { "", "f.dim[20]",
        "MatMul: f.dim[20]. Default: -1.",
        value<int64_t>(&(args_->f.dim[20]), -1) },
      { "", "f.dim[21]",
        "MatMul: f.dim[21]. Default: -1.",
        value<int64_t>(&(args_->f.dim[21]), -1) },
      { "", "f.dim[22]",
        "MatMul: f.dim[22]. Default: -1.",
        value<int64_t>(&(args_->f.dim[22]), -1) },
      { "", "f.dim[23]",
        "MatMul: f.dim[23]. Default: -1.",
        value<int64_t>(&(args_->f.dim[23]), -1) },
      { "", "f.dim[24]",
        "MatMul: f.dim[24]. Default: -1.",
        value<int64_t>(&(args_->f.dim[24]), -1) },
      { "", "f.dim[25]",
        "MatMul: f.dim[25]. Default: -1.",
        value<int64_t>(&(args_->f.dim[25]), -1) },
      { "", "f.dim[26]",
        "MatMul: f.dim[26]. Default: -1.",
        value<int64_t>(&(args_->f.dim[26]), -1) },
      { "", "f.dim[27]",
        "MatMul: f.dim[27]. Default: -1.",
        value<int64_t>(&(args_->f.dim[27]), -1) },
      { "", "f.dim[28]",
        "MatMul: f.dim[28]. Default: -1.",
        value<int64_t>(&(args_->f.dim[28]), -1) },
      { "", "f.dim[29]",
        "MatMul: f.dim[29]. Default: -1.",
        value<int64_t>(&(args_->f.dim[29]), -1) },
      { "", "f.dim[30]",
        "MatMul: f.dim[30]. Default: -1.",
        value<int64_t>(&(args_->f.dim[30]), -1) },
      { "", "f.dim[31]",
        "MatMul: f.dim[31]. Default: -1.",
        value<int64_t>(&(args_->f.dim[31]), -1) },
      { "", "f.dim[32]",
        "MatMul: f.dim[32]. Default: -1.",
        value<int64_t>(&(args_->f.dim[32]), -1) },
      { "", "f.dim[33]",
        "MatMul: f.dim[33]. Default: -1.",
        value<int64_t>(&(args_->f.dim[33]), -1) },
      { "", "f.dim[34]",
        "MatMul: f.dim[34]. Default: -1.",
        value<int64_t>(&(args_->f.dim[34]), -1) },
      { "", "f.dim[35]",
        "MatMul: f.dim[35]. Default: -1.",
        value<int64_t>(&(args_->f.dim[35]), -1) },
      { "", "f.stride[0]",
        "MatMul: f.stride[0]. Default: -1.",
        value<int64_t>(&(args_->f.stride[0]), -1) },
      { "", "f.stride[1]",
        "MatMul: f.stride[1]. Default: -1.",
        value<int64_t>(&(args_->f.stride[1]), -1) },
      { "", "f.stride[2]",
        "MatMul: f.stride[2]. Default: -1.",
        value<int64_t>(&(args_->f.stride[2]), -1) },
      { "", "f.stride[3]",
        "MatMul: f.stride[3]. Default: -1.",
        value<int64_t>(&(args_->f.stride[3]), -1) },
      { "", "f.stride[4]",
        "MatMul: f.stride[4]. Default: -1.",
        value<int64_t>(&(args_->f.stride[4]), -1) },
      { "", "f.stride[5]",
        "MatMul: f.stride[5]. Default: -1.",
        value<int64_t>(&(args_->f.stride[5]), -1) },
      { "", "f.stride[6]",
        "MatMul: f.stride[6]. Default: -1.",
        value<int64_t>(&(args_->f.stride[6]), -1) },
      { "", "f.stride[7]",
        "MatMul: f.stride[7]. Default: -1.",
        value<int64_t>(&(args_->f.stride[7]), -1) },
      { "", "f.stride[8]",
        "MatMul: f.stride[8]. Default: -1.",
        value<int64_t>(&(args_->f.stride[8]), -1) },
      { "", "f.stride[9]",
        "MatMul: f.stride[9]. Default: -1.",
        value<int64_t>(&(args_->f.stride[9]), -1) },
      { "", "f.stride[10]",
        "MatMul: f.stride[10]. Default: -1.",
        value<int64_t>(&(args_->f.stride[10]), -1) },
      { "", "f.stride[11]",
        "MatMul: f.stride[11]. Default: -1.",
        value<int64_t>(&(args_->f.stride[11]), -1) },
      { "", "f.stride[12]",
        "MatMul: f.stride[12]. Default: -1.",
        value<int64_t>(&(args_->f.stride[12]), -1) },
      { "", "f.stride[13]",
        "MatMul: f.stride[13]. Default: -1.",
        value<int64_t>(&(args_->f.stride[13]), -1) },
      { "", "f.stride[14]",
        "MatMul: f.stride[14]. Default: -1.",
        value<int64_t>(&(args_->f.stride[14]), -1) },
      { "", "f.stride[15]",
        "MatMul: f.stride[15]. Default: -1.",
        value<int64_t>(&(args_->f.stride[15]), -1) },
      { "", "f.stride[16]",
        "MatMul: f.stride[16]. Default: -1.",
        value<int64_t>(&(args_->f.stride[16]), -1) },
      { "", "f.stride[17]",
        "MatMul: f.stride[17]. Default: -1.",
        value<int64_t>(&(args_->f.stride[17]), -1) },
      { "", "f.stride[18]",
        "MatMul: f.stride[18]. Default: -1.",
        value<int64_t>(&(args_->f.stride[18]), -1) },
      { "", "f.stride[19]",
        "MatMul: f.stride[19]. Default: -1.",
        value<int64_t>(&(args_->f.stride[19]), -1) },
      { "", "f.stride[20]",
        "MatMul: f.stride[20]. Default: -1.",
        value<int64_t>(&(args_->f.stride[20]), -1) },
      { "", "f.stride[21]",
        "MatMul: f.stride[21]. Default: -1.",
        value<int64_t>(&(args_->f.stride[21]), -1) },
      { "", "f.stride[22]",
        "MatMul: f.stride[22]. Default: -1.",
        value<int64_t>(&(args_->f.stride[22]), -1) },
      { "", "f.stride[23]",
        "MatMul: f.stride[23]. Default: -1.",
        value<int64_t>(&(args_->f.stride[23]), -1) },
      { "", "f.stride[24]",
        "MatMul: f.stride[24]. Default: -1.",
        value<int64_t>(&(args_->f.stride[24]), -1) },
      { "", "f.stride[25]",
        "MatMul: f.stride[25]. Default: -1.",
        value<int64_t>(&(args_->f.stride[25]), -1) },
      { "", "f.stride[26]",
        "MatMul: f.stride[26]. Default: -1.",
        value<int64_t>(&(args_->f.stride[26]), -1) },
      { "", "f.stride[27]",
        "MatMul: f.stride[27]. Default: -1.",
        value<int64_t>(&(args_->f.stride[27]), -1) },
      { "", "f.stride[28]",
        "MatMul: f.stride[28]. Default: -1.",
        value<int64_t>(&(args_->f.stride[28]), -1) },
      { "", "f.stride[29]",
        "MatMul: f.stride[29]. Default: -1.",
        value<int64_t>(&(args_->f.stride[29]), -1) },
      { "", "f.stride[30]",
        "MatMul: f.stride[30]. Default: -1.",
        value<int64_t>(&(args_->f.stride[30]), -1) },
      { "", "f.stride[31]",
        "MatMul: f.stride[31]. Default: -1.",
        value<int64_t>(&(args_->f.stride[31]), -1) },
      { "", "f.stride[32]",
        "MatMul: f.stride[32]. Default: -1.",
        value<int64_t>(&(args_->f.stride[32]), -1) },
      { "", "f.stride[33]",
        "MatMul: f.stride[33]. Default: -1.",
        value<int64_t>(&(args_->f.stride[33]), -1) },
      { "", "f.stride[34]",
        "MatMul: f.stride[34]. Default: -1.",
        value<int64_t>(&(args_->f.stride[34]), -1) },
      { "", "f.stride[35]",
        "MatMul: f.stride[35]. Default: -1.",
        value<int64_t>(&(args_->f.stride[35]), -1) },
      { "", "f.dimensions",
        "MatMul: f.dimensions. Default: 36.",
        value<int32_t>(&(args_->f.dimensions), 36) },
      { "", "a.fill", "MatMul: a.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "b.fill", "MatMul: b.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "c.fill", "MatMul: c.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "c.ref.fill", "MatMul: c.ref.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "f.fill", "MatMul: f.fill",
        value<FillMode>(nullptr, FillMode()) },
    };

    this->add_options(options);
  }

  ~ArgParser() {}

  const Arguments *arguments() const { return args_; }

  void deleteArguments() { if (args_) delete args_; }

  int parse(const int argc, const char *argv[], bool fail_on_bad_opt = true) {
    int parsed_args = cask::tester::parse(argc, argv, this->param_desc(), fail_on_bad_opt);

    // Update arguments for consistence
    args_->c.batches = args_->a.batches;
    args_->c.rows = args_->a.rows;
    args_->c.cols = args_->b.cols;
    args_->a.cols = args_->b.rows;
    args_->b.batches = args_->a.batches;
    cask_plugin::toInternalShape(&args_->a)->finalize();
    //args_->a.finalize();
    cask_plugin::toInternalShape(&args_->b)->finalize();
    //args_->b.finalize();
    cask_plugin::toInternalShape(&args_->c)->finalize();
    //args_->c.finalize();

    this->finalize();

    return parsed_args;
  }

  virtual void finalize() { }

private:
    Arguments *args_;
};


template<>
class ArgParser<cask_plugin::Add> : public cask::tester::ArgParser {
public:
  using Arguments = cask_plugin::Add;

  ArgParser(void *args_data) : cask::tester::ArgParser(args_data) {
    assert((args_data != nullptr) && "Must allocate buffer for arguments");
    this->args_ = reinterpret_cast<Arguments *>(args_data);

    using cask::tester::value;
    using cask::tester::FillMode;
    std::vector<cask::tester::ParamDesc::Param> options{
      
      { "", "c.dim[0]",
        "Add: c.dim[0]. Default: -1.",
        value<int64_t>(&(args_->c.dim[0]), -1) },
      { "", "c.dim[1]",
        "Add: c.dim[1]. Default: -1.",
        value<int64_t>(&(args_->c.dim[1]), -1) },
      { "", "c.dim[2]",
        "Add: c.dim[2]. Default: -1.",
        value<int64_t>(&(args_->c.dim[2]), -1) },
      { "", "c.dim[3]",
        "Add: c.dim[3]. Default: -1.",
        value<int64_t>(&(args_->c.dim[3]), -1) },
      { "", "c.dim[4]",
        "Add: c.dim[4]. Default: -1.",
        value<int64_t>(&(args_->c.dim[4]), -1) },
      { "", "c.dim[5]",
        "Add: c.dim[5]. Default: -1.",
        value<int64_t>(&(args_->c.dim[5]), -1) },
      { "", "c.dim[6]",
        "Add: c.dim[6]. Default: -1.",
        value<int64_t>(&(args_->c.dim[6]), -1) },
      { "", "c.dim[7]",
        "Add: c.dim[7]. Default: -1.",
        value<int64_t>(&(args_->c.dim[7]), -1) },
      { "", "c.dim[8]",
        "Add: c.dim[8]. Default: -1.",
        value<int64_t>(&(args_->c.dim[8]), -1) },
      { "", "c.dim[9]",
        "Add: c.dim[9]. Default: -1.",
        value<int64_t>(&(args_->c.dim[9]), -1) },
      { "", "c.dim[10]",
        "Add: c.dim[10]. Default: -1.",
        value<int64_t>(&(args_->c.dim[10]), -1) },
      { "", "c.dim[11]",
        "Add: c.dim[11]. Default: -1.",
        value<int64_t>(&(args_->c.dim[11]), -1) },
      { "", "c.dim[12]",
        "Add: c.dim[12]. Default: -1.",
        value<int64_t>(&(args_->c.dim[12]), -1) },
      { "", "c.dim[13]",
        "Add: c.dim[13]. Default: -1.",
        value<int64_t>(&(args_->c.dim[13]), -1) },
      { "", "c.dim[14]",
        "Add: c.dim[14]. Default: -1.",
        value<int64_t>(&(args_->c.dim[14]), -1) },
      { "", "c.dim[15]",
        "Add: c.dim[15]. Default: -1.",
        value<int64_t>(&(args_->c.dim[15]), -1) },
      { "", "c.dim[16]",
        "Add: c.dim[16]. Default: -1.",
        value<int64_t>(&(args_->c.dim[16]), -1) },
      { "", "c.dim[17]",
        "Add: c.dim[17]. Default: -1.",
        value<int64_t>(&(args_->c.dim[17]), -1) },
      { "", "c.dim[18]",
        "Add: c.dim[18]. Default: -1.",
        value<int64_t>(&(args_->c.dim[18]), -1) },
      { "", "c.dim[19]",
        "Add: c.dim[19]. Default: -1.",
        value<int64_t>(&(args_->c.dim[19]), -1) },
      { "", "c.dim[20]",
        "Add: c.dim[20]. Default: -1.",
        value<int64_t>(&(args_->c.dim[20]), -1) },
      { "", "c.dim[21]",
        "Add: c.dim[21]. Default: -1.",
        value<int64_t>(&(args_->c.dim[21]), -1) },
      { "", "c.dim[22]",
        "Add: c.dim[22]. Default: -1.",
        value<int64_t>(&(args_->c.dim[22]), -1) },
      { "", "c.dim[23]",
        "Add: c.dim[23]. Default: -1.",
        value<int64_t>(&(args_->c.dim[23]), -1) },
      { "", "c.dim[24]",
        "Add: c.dim[24]. Default: -1.",
        value<int64_t>(&(args_->c.dim[24]), -1) },
      { "", "c.dim[25]",
        "Add: c.dim[25]. Default: -1.",
        value<int64_t>(&(args_->c.dim[25]), -1) },
      { "", "c.dim[26]",
        "Add: c.dim[26]. Default: -1.",
        value<int64_t>(&(args_->c.dim[26]), -1) },
      { "", "c.dim[27]",
        "Add: c.dim[27]. Default: -1.",
        value<int64_t>(&(args_->c.dim[27]), -1) },
      { "", "c.dim[28]",
        "Add: c.dim[28]. Default: -1.",
        value<int64_t>(&(args_->c.dim[28]), -1) },
      { "", "c.dim[29]",
        "Add: c.dim[29]. Default: -1.",
        value<int64_t>(&(args_->c.dim[29]), -1) },
      { "", "c.dim[30]",
        "Add: c.dim[30]. Default: -1.",
        value<int64_t>(&(args_->c.dim[30]), -1) },
      { "", "c.dim[31]",
        "Add: c.dim[31]. Default: -1.",
        value<int64_t>(&(args_->c.dim[31]), -1) },
      { "", "c.dim[32]",
        "Add: c.dim[32]. Default: -1.",
        value<int64_t>(&(args_->c.dim[32]), -1) },
      { "", "c.dim[33]",
        "Add: c.dim[33]. Default: -1.",
        value<int64_t>(&(args_->c.dim[33]), -1) },
      { "", "c.dim[34]",
        "Add: c.dim[34]. Default: -1.",
        value<int64_t>(&(args_->c.dim[34]), -1) },
      { "", "c.dim[35]",
        "Add: c.dim[35]. Default: -1.",
        value<int64_t>(&(args_->c.dim[35]), -1) },
      { "", "c.stride[0]",
        "Add: c.stride[0]. Default: -1.",
        value<int64_t>(&(args_->c.stride[0]), -1) },
      { "", "c.stride[1]",
        "Add: c.stride[1]. Default: -1.",
        value<int64_t>(&(args_->c.stride[1]), -1) },
      { "", "c.stride[2]",
        "Add: c.stride[2]. Default: -1.",
        value<int64_t>(&(args_->c.stride[2]), -1) },
      { "", "c.stride[3]",
        "Add: c.stride[3]. Default: -1.",
        value<int64_t>(&(args_->c.stride[3]), -1) },
      { "", "c.stride[4]",
        "Add: c.stride[4]. Default: -1.",
        value<int64_t>(&(args_->c.stride[4]), -1) },
      { "", "c.stride[5]",
        "Add: c.stride[5]. Default: -1.",
        value<int64_t>(&(args_->c.stride[5]), -1) },
      { "", "c.stride[6]",
        "Add: c.stride[6]. Default: -1.",
        value<int64_t>(&(args_->c.stride[6]), -1) },
      { "", "c.stride[7]",
        "Add: c.stride[7]. Default: -1.",
        value<int64_t>(&(args_->c.stride[7]), -1) },
      { "", "c.stride[8]",
        "Add: c.stride[8]. Default: -1.",
        value<int64_t>(&(args_->c.stride[8]), -1) },
      { "", "c.stride[9]",
        "Add: c.stride[9]. Default: -1.",
        value<int64_t>(&(args_->c.stride[9]), -1) },
      { "", "c.stride[10]",
        "Add: c.stride[10]. Default: -1.",
        value<int64_t>(&(args_->c.stride[10]), -1) },
      { "", "c.stride[11]",
        "Add: c.stride[11]. Default: -1.",
        value<int64_t>(&(args_->c.stride[11]), -1) },
      { "", "c.stride[12]",
        "Add: c.stride[12]. Default: -1.",
        value<int64_t>(&(args_->c.stride[12]), -1) },
      { "", "c.stride[13]",
        "Add: c.stride[13]. Default: -1.",
        value<int64_t>(&(args_->c.stride[13]), -1) },
      { "", "c.stride[14]",
        "Add: c.stride[14]. Default: -1.",
        value<int64_t>(&(args_->c.stride[14]), -1) },
      { "", "c.stride[15]",
        "Add: c.stride[15]. Default: -1.",
        value<int64_t>(&(args_->c.stride[15]), -1) },
      { "", "c.stride[16]",
        "Add: c.stride[16]. Default: -1.",
        value<int64_t>(&(args_->c.stride[16]), -1) },
      { "", "c.stride[17]",
        "Add: c.stride[17]. Default: -1.",
        value<int64_t>(&(args_->c.stride[17]), -1) },
      { "", "c.stride[18]",
        "Add: c.stride[18]. Default: -1.",
        value<int64_t>(&(args_->c.stride[18]), -1) },
      { "", "c.stride[19]",
        "Add: c.stride[19]. Default: -1.",
        value<int64_t>(&(args_->c.stride[19]), -1) },
      { "", "c.stride[20]",
        "Add: c.stride[20]. Default: -1.",
        value<int64_t>(&(args_->c.stride[20]), -1) },
      { "", "c.stride[21]",
        "Add: c.stride[21]. Default: -1.",
        value<int64_t>(&(args_->c.stride[21]), -1) },
      { "", "c.stride[22]",
        "Add: c.stride[22]. Default: -1.",
        value<int64_t>(&(args_->c.stride[22]), -1) },
      { "", "c.stride[23]",
        "Add: c.stride[23]. Default: -1.",
        value<int64_t>(&(args_->c.stride[23]), -1) },
      { "", "c.stride[24]",
        "Add: c.stride[24]. Default: -1.",
        value<int64_t>(&(args_->c.stride[24]), -1) },
      { "", "c.stride[25]",
        "Add: c.stride[25]. Default: -1.",
        value<int64_t>(&(args_->c.stride[25]), -1) },
      { "", "c.stride[26]",
        "Add: c.stride[26]. Default: -1.",
        value<int64_t>(&(args_->c.stride[26]), -1) },
      { "", "c.stride[27]",
        "Add: c.stride[27]. Default: -1.",
        value<int64_t>(&(args_->c.stride[27]), -1) },
      { "", "c.stride[28]",
        "Add: c.stride[28]. Default: -1.",
        value<int64_t>(&(args_->c.stride[28]), -1) },
      { "", "c.stride[29]",
        "Add: c.stride[29]. Default: -1.",
        value<int64_t>(&(args_->c.stride[29]), -1) },
      { "", "c.stride[30]",
        "Add: c.stride[30]. Default: -1.",
        value<int64_t>(&(args_->c.stride[30]), -1) },
      { "", "c.stride[31]",
        "Add: c.stride[31]. Default: -1.",
        value<int64_t>(&(args_->c.stride[31]), -1) },
      { "", "c.stride[32]",
        "Add: c.stride[32]. Default: -1.",
        value<int64_t>(&(args_->c.stride[32]), -1) },
      { "", "c.stride[33]",
        "Add: c.stride[33]. Default: -1.",
        value<int64_t>(&(args_->c.stride[33]), -1) },
      { "", "c.stride[34]",
        "Add: c.stride[34]. Default: -1.",
        value<int64_t>(&(args_->c.stride[34]), -1) },
      { "", "c.stride[35]",
        "Add: c.stride[35]. Default: -1.",
        value<int64_t>(&(args_->c.stride[35]), -1) },
      { "", "c.dimensions",
        "Add: c.dimensions. Default: 36.",
        value<int32_t>(&(args_->c.dimensions), 36) },
      { "", "x.dim[0]",
        "Add: x.dim[0]. Default: -1.",
        value<int64_t>(&(args_->x.dim[0]), -1) },
      { "", "x.dim[1]",
        "Add: x.dim[1]. Default: -1.",
        value<int64_t>(&(args_->x.dim[1]), -1) },
      { "", "x.dim[2]",
        "Add: x.dim[2]. Default: -1.",
        value<int64_t>(&(args_->x.dim[2]), -1) },
      { "", "x.dim[3]",
        "Add: x.dim[3]. Default: -1.",
        value<int64_t>(&(args_->x.dim[3]), -1) },
      { "", "x.dim[4]",
        "Add: x.dim[4]. Default: -1.",
        value<int64_t>(&(args_->x.dim[4]), -1) },
      { "", "x.dim[5]",
        "Add: x.dim[5]. Default: -1.",
        value<int64_t>(&(args_->x.dim[5]), -1) },
      { "", "x.dim[6]",
        "Add: x.dim[6]. Default: -1.",
        value<int64_t>(&(args_->x.dim[6]), -1) },
      { "", "x.dim[7]",
        "Add: x.dim[7]. Default: -1.",
        value<int64_t>(&(args_->x.dim[7]), -1) },
      { "", "x.dim[8]",
        "Add: x.dim[8]. Default: -1.",
        value<int64_t>(&(args_->x.dim[8]), -1) },
      { "", "x.dim[9]",
        "Add: x.dim[9]. Default: -1.",
        value<int64_t>(&(args_->x.dim[9]), -1) },
      { "", "x.dim[10]",
        "Add: x.dim[10]. Default: -1.",
        value<int64_t>(&(args_->x.dim[10]), -1) },
      { "", "x.dim[11]",
        "Add: x.dim[11]. Default: -1.",
        value<int64_t>(&(args_->x.dim[11]), -1) },
      { "", "x.dim[12]",
        "Add: x.dim[12]. Default: -1.",
        value<int64_t>(&(args_->x.dim[12]), -1) },
      { "", "x.dim[13]",
        "Add: x.dim[13]. Default: -1.",
        value<int64_t>(&(args_->x.dim[13]), -1) },
      { "", "x.dim[14]",
        "Add: x.dim[14]. Default: -1.",
        value<int64_t>(&(args_->x.dim[14]), -1) },
      { "", "x.dim[15]",
        "Add: x.dim[15]. Default: -1.",
        value<int64_t>(&(args_->x.dim[15]), -1) },
      { "", "x.dim[16]",
        "Add: x.dim[16]. Default: -1.",
        value<int64_t>(&(args_->x.dim[16]), -1) },
      { "", "x.dim[17]",
        "Add: x.dim[17]. Default: -1.",
        value<int64_t>(&(args_->x.dim[17]), -1) },
      { "", "x.dim[18]",
        "Add: x.dim[18]. Default: -1.",
        value<int64_t>(&(args_->x.dim[18]), -1) },
      { "", "x.dim[19]",
        "Add: x.dim[19]. Default: -1.",
        value<int64_t>(&(args_->x.dim[19]), -1) },
      { "", "x.dim[20]",
        "Add: x.dim[20]. Default: -1.",
        value<int64_t>(&(args_->x.dim[20]), -1) },
      { "", "x.dim[21]",
        "Add: x.dim[21]. Default: -1.",
        value<int64_t>(&(args_->x.dim[21]), -1) },
      { "", "x.dim[22]",
        "Add: x.dim[22]. Default: -1.",
        value<int64_t>(&(args_->x.dim[22]), -1) },
      { "", "x.dim[23]",
        "Add: x.dim[23]. Default: -1.",
        value<int64_t>(&(args_->x.dim[23]), -1) },
      { "", "x.dim[24]",
        "Add: x.dim[24]. Default: -1.",
        value<int64_t>(&(args_->x.dim[24]), -1) },
      { "", "x.dim[25]",
        "Add: x.dim[25]. Default: -1.",
        value<int64_t>(&(args_->x.dim[25]), -1) },
      { "", "x.dim[26]",
        "Add: x.dim[26]. Default: -1.",
        value<int64_t>(&(args_->x.dim[26]), -1) },
      { "", "x.dim[27]",
        "Add: x.dim[27]. Default: -1.",
        value<int64_t>(&(args_->x.dim[27]), -1) },
      { "", "x.dim[28]",
        "Add: x.dim[28]. Default: -1.",
        value<int64_t>(&(args_->x.dim[28]), -1) },
      { "", "x.dim[29]",
        "Add: x.dim[29]. Default: -1.",
        value<int64_t>(&(args_->x.dim[29]), -1) },
      { "", "x.dim[30]",
        "Add: x.dim[30]. Default: -1.",
        value<int64_t>(&(args_->x.dim[30]), -1) },
      { "", "x.dim[31]",
        "Add: x.dim[31]. Default: -1.",
        value<int64_t>(&(args_->x.dim[31]), -1) },
      { "", "x.dim[32]",
        "Add: x.dim[32]. Default: -1.",
        value<int64_t>(&(args_->x.dim[32]), -1) },
      { "", "x.dim[33]",
        "Add: x.dim[33]. Default: -1.",
        value<int64_t>(&(args_->x.dim[33]), -1) },
      { "", "x.dim[34]",
        "Add: x.dim[34]. Default: -1.",
        value<int64_t>(&(args_->x.dim[34]), -1) },
      { "", "x.dim[35]",
        "Add: x.dim[35]. Default: -1.",
        value<int64_t>(&(args_->x.dim[35]), -1) },
      { "", "x.stride[0]",
        "Add: x.stride[0]. Default: -1.",
        value<int64_t>(&(args_->x.stride[0]), -1) },
      { "", "x.stride[1]",
        "Add: x.stride[1]. Default: -1.",
        value<int64_t>(&(args_->x.stride[1]), -1) },
      { "", "x.stride[2]",
        "Add: x.stride[2]. Default: -1.",
        value<int64_t>(&(args_->x.stride[2]), -1) },
      { "", "x.stride[3]",
        "Add: x.stride[3]. Default: -1.",
        value<int64_t>(&(args_->x.stride[3]), -1) },
      { "", "x.stride[4]",
        "Add: x.stride[4]. Default: -1.",
        value<int64_t>(&(args_->x.stride[4]), -1) },
      { "", "x.stride[5]",
        "Add: x.stride[5]. Default: -1.",
        value<int64_t>(&(args_->x.stride[5]), -1) },
      { "", "x.stride[6]",
        "Add: x.stride[6]. Default: -1.",
        value<int64_t>(&(args_->x.stride[6]), -1) },
      { "", "x.stride[7]",
        "Add: x.stride[7]. Default: -1.",
        value<int64_t>(&(args_->x.stride[7]), -1) },
      { "", "x.stride[8]",
        "Add: x.stride[8]. Default: -1.",
        value<int64_t>(&(args_->x.stride[8]), -1) },
      { "", "x.stride[9]",
        "Add: x.stride[9]. Default: -1.",
        value<int64_t>(&(args_->x.stride[9]), -1) },
      { "", "x.stride[10]",
        "Add: x.stride[10]. Default: -1.",
        value<int64_t>(&(args_->x.stride[10]), -1) },
      { "", "x.stride[11]",
        "Add: x.stride[11]. Default: -1.",
        value<int64_t>(&(args_->x.stride[11]), -1) },
      { "", "x.stride[12]",
        "Add: x.stride[12]. Default: -1.",
        value<int64_t>(&(args_->x.stride[12]), -1) },
      { "", "x.stride[13]",
        "Add: x.stride[13]. Default: -1.",
        value<int64_t>(&(args_->x.stride[13]), -1) },
      { "", "x.stride[14]",
        "Add: x.stride[14]. Default: -1.",
        value<int64_t>(&(args_->x.stride[14]), -1) },
      { "", "x.stride[15]",
        "Add: x.stride[15]. Default: -1.",
        value<int64_t>(&(args_->x.stride[15]), -1) },
      { "", "x.stride[16]",
        "Add: x.stride[16]. Default: -1.",
        value<int64_t>(&(args_->x.stride[16]), -1) },
      { "", "x.stride[17]",
        "Add: x.stride[17]. Default: -1.",
        value<int64_t>(&(args_->x.stride[17]), -1) },
      { "", "x.stride[18]",
        "Add: x.stride[18]. Default: -1.",
        value<int64_t>(&(args_->x.stride[18]), -1) },
      { "", "x.stride[19]",
        "Add: x.stride[19]. Default: -1.",
        value<int64_t>(&(args_->x.stride[19]), -1) },
      { "", "x.stride[20]",
        "Add: x.stride[20]. Default: -1.",
        value<int64_t>(&(args_->x.stride[20]), -1) },
      { "", "x.stride[21]",
        "Add: x.stride[21]. Default: -1.",
        value<int64_t>(&(args_->x.stride[21]), -1) },
      { "", "x.stride[22]",
        "Add: x.stride[22]. Default: -1.",
        value<int64_t>(&(args_->x.stride[22]), -1) },
      { "", "x.stride[23]",
        "Add: x.stride[23]. Default: -1.",
        value<int64_t>(&(args_->x.stride[23]), -1) },
      { "", "x.stride[24]",
        "Add: x.stride[24]. Default: -1.",
        value<int64_t>(&(args_->x.stride[24]), -1) },
      { "", "x.stride[25]",
        "Add: x.stride[25]. Default: -1.",
        value<int64_t>(&(args_->x.stride[25]), -1) },
      { "", "x.stride[26]",
        "Add: x.stride[26]. Default: -1.",
        value<int64_t>(&(args_->x.stride[26]), -1) },
      { "", "x.stride[27]",
        "Add: x.stride[27]. Default: -1.",
        value<int64_t>(&(args_->x.stride[27]), -1) },
      { "", "x.stride[28]",
        "Add: x.stride[28]. Default: -1.",
        value<int64_t>(&(args_->x.stride[28]), -1) },
      { "", "x.stride[29]",
        "Add: x.stride[29]. Default: -1.",
        value<int64_t>(&(args_->x.stride[29]), -1) },
      { "", "x.stride[30]",
        "Add: x.stride[30]. Default: -1.",
        value<int64_t>(&(args_->x.stride[30]), -1) },
      { "", "x.stride[31]",
        "Add: x.stride[31]. Default: -1.",
        value<int64_t>(&(args_->x.stride[31]), -1) },
      { "", "x.stride[32]",
        "Add: x.stride[32]. Default: -1.",
        value<int64_t>(&(args_->x.stride[32]), -1) },
      { "", "x.stride[33]",
        "Add: x.stride[33]. Default: -1.",
        value<int64_t>(&(args_->x.stride[33]), -1) },
      { "", "x.stride[34]",
        "Add: x.stride[34]. Default: -1.",
        value<int64_t>(&(args_->x.stride[34]), -1) },
      { "", "x.stride[35]",
        "Add: x.stride[35]. Default: -1.",
        value<int64_t>(&(args_->x.stride[35]), -1) },
      { "", "x.dimensions",
        "Add: x.dimensions. Default: 36.",
        value<int32_t>(&(args_->x.dimensions), 36) },
      { "", "y.stride[0]",
        "Add: y.stride[0]. Default: -1.",
        value<int64_t>(&(args_->y.stride[0]), -1) },
      { "", "y.stride[1]",
        "Add: y.stride[1]. Default: -1.",
        value<int64_t>(&(args_->y.stride[1]), -1) },
      { "", "y.stride[2]",
        "Add: y.stride[2]. Default: -1.",
        value<int64_t>(&(args_->y.stride[2]), -1) },
      { "", "y.stride[3]",
        "Add: y.stride[3]. Default: -1.",
        value<int64_t>(&(args_->y.stride[3]), -1) },
      { "", "y.stride[4]",
        "Add: y.stride[4]. Default: -1.",
        value<int64_t>(&(args_->y.stride[4]), -1) },
      { "", "y.stride[5]",
        "Add: y.stride[5]. Default: -1.",
        value<int64_t>(&(args_->y.stride[5]), -1) },
      { "", "y.stride[6]",
        "Add: y.stride[6]. Default: -1.",
        value<int64_t>(&(args_->y.stride[6]), -1) },
      { "", "y.stride[7]",
        "Add: y.stride[7]. Default: -1.",
        value<int64_t>(&(args_->y.stride[7]), -1) },
      { "", "y.stride[8]",
        "Add: y.stride[8]. Default: -1.",
        value<int64_t>(&(args_->y.stride[8]), -1) },
      { "", "y.stride[9]",
        "Add: y.stride[9]. Default: -1.",
        value<int64_t>(&(args_->y.stride[9]), -1) },
      { "", "y.stride[10]",
        "Add: y.stride[10]. Default: -1.",
        value<int64_t>(&(args_->y.stride[10]), -1) },
      { "", "y.stride[11]",
        "Add: y.stride[11]. Default: -1.",
        value<int64_t>(&(args_->y.stride[11]), -1) },
      { "", "y.stride[12]",
        "Add: y.stride[12]. Default: -1.",
        value<int64_t>(&(args_->y.stride[12]), -1) },
      { "", "y.stride[13]",
        "Add: y.stride[13]. Default: -1.",
        value<int64_t>(&(args_->y.stride[13]), -1) },
      { "", "y.stride[14]",
        "Add: y.stride[14]. Default: -1.",
        value<int64_t>(&(args_->y.stride[14]), -1) },
      { "", "y.stride[15]",
        "Add: y.stride[15]. Default: -1.",
        value<int64_t>(&(args_->y.stride[15]), -1) },
      { "", "y.stride[16]",
        "Add: y.stride[16]. Default: -1.",
        value<int64_t>(&(args_->y.stride[16]), -1) },
      { "", "y.stride[17]",
        "Add: y.stride[17]. Default: -1.",
        value<int64_t>(&(args_->y.stride[17]), -1) },
      { "", "y.stride[18]",
        "Add: y.stride[18]. Default: -1.",
        value<int64_t>(&(args_->y.stride[18]), -1) },
      { "", "y.stride[19]",
        "Add: y.stride[19]. Default: -1.",
        value<int64_t>(&(args_->y.stride[19]), -1) },
      { "", "y.stride[20]",
        "Add: y.stride[20]. Default: -1.",
        value<int64_t>(&(args_->y.stride[20]), -1) },
      { "", "y.stride[21]",
        "Add: y.stride[21]. Default: -1.",
        value<int64_t>(&(args_->y.stride[21]), -1) },
      { "", "y.stride[22]",
        "Add: y.stride[22]. Default: -1.",
        value<int64_t>(&(args_->y.stride[22]), -1) },
      { "", "y.stride[23]",
        "Add: y.stride[23]. Default: -1.",
        value<int64_t>(&(args_->y.stride[23]), -1) },
      { "", "y.stride[24]",
        "Add: y.stride[24]. Default: -1.",
        value<int64_t>(&(args_->y.stride[24]), -1) },
      { "", "y.stride[25]",
        "Add: y.stride[25]. Default: -1.",
        value<int64_t>(&(args_->y.stride[25]), -1) },
      { "", "y.stride[26]",
        "Add: y.stride[26]. Default: -1.",
        value<int64_t>(&(args_->y.stride[26]), -1) },
      { "", "y.stride[27]",
        "Add: y.stride[27]. Default: -1.",
        value<int64_t>(&(args_->y.stride[27]), -1) },
      { "", "y.stride[28]",
        "Add: y.stride[28]. Default: -1.",
        value<int64_t>(&(args_->y.stride[28]), -1) },
      { "", "y.stride[29]",
        "Add: y.stride[29]. Default: -1.",
        value<int64_t>(&(args_->y.stride[29]), -1) },
      { "", "y.stride[30]",
        "Add: y.stride[30]. Default: -1.",
        value<int64_t>(&(args_->y.stride[30]), -1) },
      { "", "y.stride[31]",
        "Add: y.stride[31]. Default: -1.",
        value<int64_t>(&(args_->y.stride[31]), -1) },
      { "", "y.stride[32]",
        "Add: y.stride[32]. Default: -1.",
        value<int64_t>(&(args_->y.stride[32]), -1) },
      { "", "y.stride[33]",
        "Add: y.stride[33]. Default: -1.",
        value<int64_t>(&(args_->y.stride[33]), -1) },
      { "", "y.stride[34]",
        "Add: y.stride[34]. Default: -1.",
        value<int64_t>(&(args_->y.stride[34]), -1) },
      { "", "y.stride[35]",
        "Add: y.stride[35]. Default: -1.",
        value<int64_t>(&(args_->y.stride[35]), -1) },
      { "", "y.dimensions",
        "Add: y.dimensions. Default: 36.",
        value<int32_t>(&(args_->y.dimensions), 36) },
      { "", "c.fill", "Add: c.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "x.fill", "Add: x.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "y.fill", "Add: y.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "y.ref.fill", "Add: y.ref.fill",
        value<FillMode>(nullptr, FillMode()) },
    };

    this->add_options(options);
  }

  ~ArgParser() {}

  const Arguments *arguments() const { return args_; }

  void deleteArguments() { if (args_) delete args_; }

  int parse(const int argc, const char *argv[], bool fail_on_bad_opt = true) {
    int parsed_args = cask::tester::parse(argc, argv, this->param_desc(), fail_on_bad_opt);

    // Update arguments for consistence
    args_->y.dim[0] = args_->x.dim[0];
    args_->y.dim[1] = args_->x.dim[1];
    args_->y.dim[2] = args_->x.dim[2];
    args_->y.dim[3] = args_->x.dim[3];
    args_->y.dim[4] = args_->x.dim[4];
    args_->y.dim[5] = args_->x.dim[5];
    args_->y.dim[6] = args_->x.dim[6];
    args_->y.dim[7] = args_->x.dim[7];
    args_->y.dim[8] = args_->x.dim[8];
    args_->y.dim[9] = args_->x.dim[9];
    args_->y.dim[10] = args_->x.dim[10];
    args_->y.dim[11] = args_->x.dim[11];
    args_->y.dim[12] = args_->x.dim[12];
    args_->y.dim[13] = args_->x.dim[13];
    args_->y.dim[14] = args_->x.dim[14];
    args_->y.dim[15] = args_->x.dim[15];
    args_->y.dim[16] = args_->x.dim[16];
    args_->y.dim[17] = args_->x.dim[17];
    args_->y.dim[18] = args_->x.dim[18];
    args_->y.dim[19] = args_->x.dim[19];
    args_->y.dim[20] = args_->x.dim[20];
    args_->y.dim[21] = args_->x.dim[21];
    args_->y.dim[22] = args_->x.dim[22];
    args_->y.dim[23] = args_->x.dim[23];
    args_->y.dim[24] = args_->x.dim[24];
    args_->y.dim[25] = args_->x.dim[25];
    args_->y.dim[26] = args_->x.dim[26];
    args_->y.dim[27] = args_->x.dim[27];
    args_->y.dim[28] = args_->x.dim[28];
    args_->y.dim[29] = args_->x.dim[29];
    args_->y.dim[30] = args_->x.dim[30];
    args_->y.dim[31] = args_->x.dim[31];
    args_->y.dim[32] = args_->x.dim[32];
    args_->y.dim[33] = args_->x.dim[33];
    args_->y.dim[34] = args_->x.dim[34];
    args_->y.dim[35] = args_->x.dim[35];

    this->finalize();

    return parsed_args;
  }

  virtual void finalize() { }

private:
    Arguments *args_;
};


template<>
class ArgParser<cask_plugin::Mul> : public cask::tester::ArgParser {
public:
  using Arguments = cask_plugin::Mul;

  ArgParser(void *args_data) : cask::tester::ArgParser(args_data) {
    assert((args_data != nullptr) && "Must allocate buffer for arguments");
    this->args_ = reinterpret_cast<Arguments *>(args_data);

    using cask::tester::value;
    using cask::tester::FillMode;
    std::vector<cask::tester::ParamDesc::Param> options{
      
      { "", "x.dim[0]",
        "Mul: x.dim[0]. Default: -1.",
        value<int64_t>(&(args_->x.dim[0]), -1) },
      { "", "x.dim[1]",
        "Mul: x.dim[1]. Default: -1.",
        value<int64_t>(&(args_->x.dim[1]), -1) },
      { "", "x.dim[2]",
        "Mul: x.dim[2]. Default: -1.",
        value<int64_t>(&(args_->x.dim[2]), -1) },
      { "", "x.dim[3]",
        "Mul: x.dim[3]. Default: -1.",
        value<int64_t>(&(args_->x.dim[3]), -1) },
      { "", "x.dim[4]",
        "Mul: x.dim[4]. Default: -1.",
        value<int64_t>(&(args_->x.dim[4]), -1) },
      { "", "x.dim[5]",
        "Mul: x.dim[5]. Default: -1.",
        value<int64_t>(&(args_->x.dim[5]), -1) },
      { "", "x.dim[6]",
        "Mul: x.dim[6]. Default: -1.",
        value<int64_t>(&(args_->x.dim[6]), -1) },
      { "", "x.dim[7]",
        "Mul: x.dim[7]. Default: -1.",
        value<int64_t>(&(args_->x.dim[7]), -1) },
      { "", "x.dim[8]",
        "Mul: x.dim[8]. Default: -1.",
        value<int64_t>(&(args_->x.dim[8]), -1) },
      { "", "x.dim[9]",
        "Mul: x.dim[9]. Default: -1.",
        value<int64_t>(&(args_->x.dim[9]), -1) },
      { "", "x.dim[10]",
        "Mul: x.dim[10]. Default: -1.",
        value<int64_t>(&(args_->x.dim[10]), -1) },
      { "", "x.dim[11]",
        "Mul: x.dim[11]. Default: -1.",
        value<int64_t>(&(args_->x.dim[11]), -1) },
      { "", "x.dim[12]",
        "Mul: x.dim[12]. Default: -1.",
        value<int64_t>(&(args_->x.dim[12]), -1) },
      { "", "x.dim[13]",
        "Mul: x.dim[13]. Default: -1.",
        value<int64_t>(&(args_->x.dim[13]), -1) },
      { "", "x.dim[14]",
        "Mul: x.dim[14]. Default: -1.",
        value<int64_t>(&(args_->x.dim[14]), -1) },
      { "", "x.dim[15]",
        "Mul: x.dim[15]. Default: -1.",
        value<int64_t>(&(args_->x.dim[15]), -1) },
      { "", "x.dim[16]",
        "Mul: x.dim[16]. Default: -1.",
        value<int64_t>(&(args_->x.dim[16]), -1) },
      { "", "x.dim[17]",
        "Mul: x.dim[17]. Default: -1.",
        value<int64_t>(&(args_->x.dim[17]), -1) },
      { "", "x.dim[18]",
        "Mul: x.dim[18]. Default: -1.",
        value<int64_t>(&(args_->x.dim[18]), -1) },
      { "", "x.dim[19]",
        "Mul: x.dim[19]. Default: -1.",
        value<int64_t>(&(args_->x.dim[19]), -1) },
      { "", "x.dim[20]",
        "Mul: x.dim[20]. Default: -1.",
        value<int64_t>(&(args_->x.dim[20]), -1) },
      { "", "x.dim[21]",
        "Mul: x.dim[21]. Default: -1.",
        value<int64_t>(&(args_->x.dim[21]), -1) },
      { "", "x.dim[22]",
        "Mul: x.dim[22]. Default: -1.",
        value<int64_t>(&(args_->x.dim[22]), -1) },
      { "", "x.dim[23]",
        "Mul: x.dim[23]. Default: -1.",
        value<int64_t>(&(args_->x.dim[23]), -1) },
      { "", "x.dim[24]",
        "Mul: x.dim[24]. Default: -1.",
        value<int64_t>(&(args_->x.dim[24]), -1) },
      { "", "x.dim[25]",
        "Mul: x.dim[25]. Default: -1.",
        value<int64_t>(&(args_->x.dim[25]), -1) },
      { "", "x.dim[26]",
        "Mul: x.dim[26]. Default: -1.",
        value<int64_t>(&(args_->x.dim[26]), -1) },
      { "", "x.dim[27]",
        "Mul: x.dim[27]. Default: -1.",
        value<int64_t>(&(args_->x.dim[27]), -1) },
      { "", "x.dim[28]",
        "Mul: x.dim[28]. Default: -1.",
        value<int64_t>(&(args_->x.dim[28]), -1) },
      { "", "x.dim[29]",
        "Mul: x.dim[29]. Default: -1.",
        value<int64_t>(&(args_->x.dim[29]), -1) },
      { "", "x.dim[30]",
        "Mul: x.dim[30]. Default: -1.",
        value<int64_t>(&(args_->x.dim[30]), -1) },
      { "", "x.dim[31]",
        "Mul: x.dim[31]. Default: -1.",
        value<int64_t>(&(args_->x.dim[31]), -1) },
      { "", "x.dim[32]",
        "Mul: x.dim[32]. Default: -1.",
        value<int64_t>(&(args_->x.dim[32]), -1) },
      { "", "x.dim[33]",
        "Mul: x.dim[33]. Default: -1.",
        value<int64_t>(&(args_->x.dim[33]), -1) },
      { "", "x.dim[34]",
        "Mul: x.dim[34]. Default: -1.",
        value<int64_t>(&(args_->x.dim[34]), -1) },
      { "", "x.dim[35]",
        "Mul: x.dim[35]. Default: -1.",
        value<int64_t>(&(args_->x.dim[35]), -1) },
      { "", "x.stride[0]",
        "Mul: x.stride[0]. Default: -1.",
        value<int64_t>(&(args_->x.stride[0]), -1) },
      { "", "x.stride[1]",
        "Mul: x.stride[1]. Default: -1.",
        value<int64_t>(&(args_->x.stride[1]), -1) },
      { "", "x.stride[2]",
        "Mul: x.stride[2]. Default: -1.",
        value<int64_t>(&(args_->x.stride[2]), -1) },
      { "", "x.stride[3]",
        "Mul: x.stride[3]. Default: -1.",
        value<int64_t>(&(args_->x.stride[3]), -1) },
      { "", "x.stride[4]",
        "Mul: x.stride[4]. Default: -1.",
        value<int64_t>(&(args_->x.stride[4]), -1) },
      { "", "x.stride[5]",
        "Mul: x.stride[5]. Default: -1.",
        value<int64_t>(&(args_->x.stride[5]), -1) },
      { "", "x.stride[6]",
        "Mul: x.stride[6]. Default: -1.",
        value<int64_t>(&(args_->x.stride[6]), -1) },
      { "", "x.stride[7]",
        "Mul: x.stride[7]. Default: -1.",
        value<int64_t>(&(args_->x.stride[7]), -1) },
      { "", "x.stride[8]",
        "Mul: x.stride[8]. Default: -1.",
        value<int64_t>(&(args_->x.stride[8]), -1) },
      { "", "x.stride[9]",
        "Mul: x.stride[9]. Default: -1.",
        value<int64_t>(&(args_->x.stride[9]), -1) },
      { "", "x.stride[10]",
        "Mul: x.stride[10]. Default: -1.",
        value<int64_t>(&(args_->x.stride[10]), -1) },
      { "", "x.stride[11]",
        "Mul: x.stride[11]. Default: -1.",
        value<int64_t>(&(args_->x.stride[11]), -1) },
      { "", "x.stride[12]",
        "Mul: x.stride[12]. Default: -1.",
        value<int64_t>(&(args_->x.stride[12]), -1) },
      { "", "x.stride[13]",
        "Mul: x.stride[13]. Default: -1.",
        value<int64_t>(&(args_->x.stride[13]), -1) },
      { "", "x.stride[14]",
        "Mul: x.stride[14]. Default: -1.",
        value<int64_t>(&(args_->x.stride[14]), -1) },
      { "", "x.stride[15]",
        "Mul: x.stride[15]. Default: -1.",
        value<int64_t>(&(args_->x.stride[15]), -1) },
      { "", "x.stride[16]",
        "Mul: x.stride[16]. Default: -1.",
        value<int64_t>(&(args_->x.stride[16]), -1) },
      { "", "x.stride[17]",
        "Mul: x.stride[17]. Default: -1.",
        value<int64_t>(&(args_->x.stride[17]), -1) },
      { "", "x.stride[18]",
        "Mul: x.stride[18]. Default: -1.",
        value<int64_t>(&(args_->x.stride[18]), -1) },
      { "", "x.stride[19]",
        "Mul: x.stride[19]. Default: -1.",
        value<int64_t>(&(args_->x.stride[19]), -1) },
      { "", "x.stride[20]",
        "Mul: x.stride[20]. Default: -1.",
        value<int64_t>(&(args_->x.stride[20]), -1) },
      { "", "x.stride[21]",
        "Mul: x.stride[21]. Default: -1.",
        value<int64_t>(&(args_->x.stride[21]), -1) },
      { "", "x.stride[22]",
        "Mul: x.stride[22]. Default: -1.",
        value<int64_t>(&(args_->x.stride[22]), -1) },
      { "", "x.stride[23]",
        "Mul: x.stride[23]. Default: -1.",
        value<int64_t>(&(args_->x.stride[23]), -1) },
      { "", "x.stride[24]",
        "Mul: x.stride[24]. Default: -1.",
        value<int64_t>(&(args_->x.stride[24]), -1) },
      { "", "x.stride[25]",
        "Mul: x.stride[25]. Default: -1.",
        value<int64_t>(&(args_->x.stride[25]), -1) },
      { "", "x.stride[26]",
        "Mul: x.stride[26]. Default: -1.",
        value<int64_t>(&(args_->x.stride[26]), -1) },
      { "", "x.stride[27]",
        "Mul: x.stride[27]. Default: -1.",
        value<int64_t>(&(args_->x.stride[27]), -1) },
      { "", "x.stride[28]",
        "Mul: x.stride[28]. Default: -1.",
        value<int64_t>(&(args_->x.stride[28]), -1) },
      { "", "x.stride[29]",
        "Mul: x.stride[29]. Default: -1.",
        value<int64_t>(&(args_->x.stride[29]), -1) },
      { "", "x.stride[30]",
        "Mul: x.stride[30]. Default: -1.",
        value<int64_t>(&(args_->x.stride[30]), -1) },
      { "", "x.stride[31]",
        "Mul: x.stride[31]. Default: -1.",
        value<int64_t>(&(args_->x.stride[31]), -1) },
      { "", "x.stride[32]",
        "Mul: x.stride[32]. Default: -1.",
        value<int64_t>(&(args_->x.stride[32]), -1) },
      { "", "x.stride[33]",
        "Mul: x.stride[33]. Default: -1.",
        value<int64_t>(&(args_->x.stride[33]), -1) },
      { "", "x.stride[34]",
        "Mul: x.stride[34]. Default: -1.",
        value<int64_t>(&(args_->x.stride[34]), -1) },
      { "", "x.stride[35]",
        "Mul: x.stride[35]. Default: -1.",
        value<int64_t>(&(args_->x.stride[35]), -1) },
      { "", "x.dimensions",
        "Mul: x.dimensions. Default: 36.",
        value<int32_t>(&(args_->x.dimensions), 36) },
      { "", "y.dim[0]",
        "Mul: y.dim[0]. Default: -1.",
        value<int64_t>(&(args_->y.dim[0]), -1) },
      { "", "y.dim[1]",
        "Mul: y.dim[1]. Default: -1.",
        value<int64_t>(&(args_->y.dim[1]), -1) },
      { "", "y.dim[2]",
        "Mul: y.dim[2]. Default: -1.",
        value<int64_t>(&(args_->y.dim[2]), -1) },
      { "", "y.dim[3]",
        "Mul: y.dim[3]. Default: -1.",
        value<int64_t>(&(args_->y.dim[3]), -1) },
      { "", "y.dim[4]",
        "Mul: y.dim[4]. Default: -1.",
        value<int64_t>(&(args_->y.dim[4]), -1) },
      { "", "y.dim[5]",
        "Mul: y.dim[5]. Default: -1.",
        value<int64_t>(&(args_->y.dim[5]), -1) },
      { "", "y.dim[6]",
        "Mul: y.dim[6]. Default: -1.",
        value<int64_t>(&(args_->y.dim[6]), -1) },
      { "", "y.dim[7]",
        "Mul: y.dim[7]. Default: -1.",
        value<int64_t>(&(args_->y.dim[7]), -1) },
      { "", "y.dim[8]",
        "Mul: y.dim[8]. Default: -1.",
        value<int64_t>(&(args_->y.dim[8]), -1) },
      { "", "y.dim[9]",
        "Mul: y.dim[9]. Default: -1.",
        value<int64_t>(&(args_->y.dim[9]), -1) },
      { "", "y.dim[10]",
        "Mul: y.dim[10]. Default: -1.",
        value<int64_t>(&(args_->y.dim[10]), -1) },
      { "", "y.dim[11]",
        "Mul: y.dim[11]. Default: -1.",
        value<int64_t>(&(args_->y.dim[11]), -1) },
      { "", "y.dim[12]",
        "Mul: y.dim[12]. Default: -1.",
        value<int64_t>(&(args_->y.dim[12]), -1) },
      { "", "y.dim[13]",
        "Mul: y.dim[13]. Default: -1.",
        value<int64_t>(&(args_->y.dim[13]), -1) },
      { "", "y.dim[14]",
        "Mul: y.dim[14]. Default: -1.",
        value<int64_t>(&(args_->y.dim[14]), -1) },
      { "", "y.dim[15]",
        "Mul: y.dim[15]. Default: -1.",
        value<int64_t>(&(args_->y.dim[15]), -1) },
      { "", "y.dim[16]",
        "Mul: y.dim[16]. Default: -1.",
        value<int64_t>(&(args_->y.dim[16]), -1) },
      { "", "y.dim[17]",
        "Mul: y.dim[17]. Default: -1.",
        value<int64_t>(&(args_->y.dim[17]), -1) },
      { "", "y.dim[18]",
        "Mul: y.dim[18]. Default: -1.",
        value<int64_t>(&(args_->y.dim[18]), -1) },
      { "", "y.dim[19]",
        "Mul: y.dim[19]. Default: -1.",
        value<int64_t>(&(args_->y.dim[19]), -1) },
      { "", "y.dim[20]",
        "Mul: y.dim[20]. Default: -1.",
        value<int64_t>(&(args_->y.dim[20]), -1) },
      { "", "y.dim[21]",
        "Mul: y.dim[21]. Default: -1.",
        value<int64_t>(&(args_->y.dim[21]), -1) },
      { "", "y.dim[22]",
        "Mul: y.dim[22]. Default: -1.",
        value<int64_t>(&(args_->y.dim[22]), -1) },
      { "", "y.dim[23]",
        "Mul: y.dim[23]. Default: -1.",
        value<int64_t>(&(args_->y.dim[23]), -1) },
      { "", "y.dim[24]",
        "Mul: y.dim[24]. Default: -1.",
        value<int64_t>(&(args_->y.dim[24]), -1) },
      { "", "y.dim[25]",
        "Mul: y.dim[25]. Default: -1.",
        value<int64_t>(&(args_->y.dim[25]), -1) },
      { "", "y.dim[26]",
        "Mul: y.dim[26]. Default: -1.",
        value<int64_t>(&(args_->y.dim[26]), -1) },
      { "", "y.dim[27]",
        "Mul: y.dim[27]. Default: -1.",
        value<int64_t>(&(args_->y.dim[27]), -1) },
      { "", "y.dim[28]",
        "Mul: y.dim[28]. Default: -1.",
        value<int64_t>(&(args_->y.dim[28]), -1) },
      { "", "y.dim[29]",
        "Mul: y.dim[29]. Default: -1.",
        value<int64_t>(&(args_->y.dim[29]), -1) },
      { "", "y.dim[30]",
        "Mul: y.dim[30]. Default: -1.",
        value<int64_t>(&(args_->y.dim[30]), -1) },
      { "", "y.dim[31]",
        "Mul: y.dim[31]. Default: -1.",
        value<int64_t>(&(args_->y.dim[31]), -1) },
      { "", "y.dim[32]",
        "Mul: y.dim[32]. Default: -1.",
        value<int64_t>(&(args_->y.dim[32]), -1) },
      { "", "y.dim[33]",
        "Mul: y.dim[33]. Default: -1.",
        value<int64_t>(&(args_->y.dim[33]), -1) },
      { "", "y.dim[34]",
        "Mul: y.dim[34]. Default: -1.",
        value<int64_t>(&(args_->y.dim[34]), -1) },
      { "", "y.dim[35]",
        "Mul: y.dim[35]. Default: -1.",
        value<int64_t>(&(args_->y.dim[35]), -1) },
      { "", "y.stride[0]",
        "Mul: y.stride[0]. Default: -1.",
        value<int64_t>(&(args_->y.stride[0]), -1) },
      { "", "y.stride[1]",
        "Mul: y.stride[1]. Default: -1.",
        value<int64_t>(&(args_->y.stride[1]), -1) },
      { "", "y.stride[2]",
        "Mul: y.stride[2]. Default: -1.",
        value<int64_t>(&(args_->y.stride[2]), -1) },
      { "", "y.stride[3]",
        "Mul: y.stride[3]. Default: -1.",
        value<int64_t>(&(args_->y.stride[3]), -1) },
      { "", "y.stride[4]",
        "Mul: y.stride[4]. Default: -1.",
        value<int64_t>(&(args_->y.stride[4]), -1) },
      { "", "y.stride[5]",
        "Mul: y.stride[5]. Default: -1.",
        value<int64_t>(&(args_->y.stride[5]), -1) },
      { "", "y.stride[6]",
        "Mul: y.stride[6]. Default: -1.",
        value<int64_t>(&(args_->y.stride[6]), -1) },
      { "", "y.stride[7]",
        "Mul: y.stride[7]. Default: -1.",
        value<int64_t>(&(args_->y.stride[7]), -1) },
      { "", "y.stride[8]",
        "Mul: y.stride[8]. Default: -1.",
        value<int64_t>(&(args_->y.stride[8]), -1) },
      { "", "y.stride[9]",
        "Mul: y.stride[9]. Default: -1.",
        value<int64_t>(&(args_->y.stride[9]), -1) },
      { "", "y.stride[10]",
        "Mul: y.stride[10]. Default: -1.",
        value<int64_t>(&(args_->y.stride[10]), -1) },
      { "", "y.stride[11]",
        "Mul: y.stride[11]. Default: -1.",
        value<int64_t>(&(args_->y.stride[11]), -1) },
      { "", "y.stride[12]",
        "Mul: y.stride[12]. Default: -1.",
        value<int64_t>(&(args_->y.stride[12]), -1) },
      { "", "y.stride[13]",
        "Mul: y.stride[13]. Default: -1.",
        value<int64_t>(&(args_->y.stride[13]), -1) },
      { "", "y.stride[14]",
        "Mul: y.stride[14]. Default: -1.",
        value<int64_t>(&(args_->y.stride[14]), -1) },
      { "", "y.stride[15]",
        "Mul: y.stride[15]. Default: -1.",
        value<int64_t>(&(args_->y.stride[15]), -1) },
      { "", "y.stride[16]",
        "Mul: y.stride[16]. Default: -1.",
        value<int64_t>(&(args_->y.stride[16]), -1) },
      { "", "y.stride[17]",
        "Mul: y.stride[17]. Default: -1.",
        value<int64_t>(&(args_->y.stride[17]), -1) },
      { "", "y.stride[18]",
        "Mul: y.stride[18]. Default: -1.",
        value<int64_t>(&(args_->y.stride[18]), -1) },
      { "", "y.stride[19]",
        "Mul: y.stride[19]. Default: -1.",
        value<int64_t>(&(args_->y.stride[19]), -1) },
      { "", "y.stride[20]",
        "Mul: y.stride[20]. Default: -1.",
        value<int64_t>(&(args_->y.stride[20]), -1) },
      { "", "y.stride[21]",
        "Mul: y.stride[21]. Default: -1.",
        value<int64_t>(&(args_->y.stride[21]), -1) },
      { "", "y.stride[22]",
        "Mul: y.stride[22]. Default: -1.",
        value<int64_t>(&(args_->y.stride[22]), -1) },
      { "", "y.stride[23]",
        "Mul: y.stride[23]. Default: -1.",
        value<int64_t>(&(args_->y.stride[23]), -1) },
      { "", "y.stride[24]",
        "Mul: y.stride[24]. Default: -1.",
        value<int64_t>(&(args_->y.stride[24]), -1) },
      { "", "y.stride[25]",
        "Mul: y.stride[25]. Default: -1.",
        value<int64_t>(&(args_->y.stride[25]), -1) },
      { "", "y.stride[26]",
        "Mul: y.stride[26]. Default: -1.",
        value<int64_t>(&(args_->y.stride[26]), -1) },
      { "", "y.stride[27]",
        "Mul: y.stride[27]. Default: -1.",
        value<int64_t>(&(args_->y.stride[27]), -1) },
      { "", "y.stride[28]",
        "Mul: y.stride[28]. Default: -1.",
        value<int64_t>(&(args_->y.stride[28]), -1) },
      { "", "y.stride[29]",
        "Mul: y.stride[29]. Default: -1.",
        value<int64_t>(&(args_->y.stride[29]), -1) },
      { "", "y.stride[30]",
        "Mul: y.stride[30]. Default: -1.",
        value<int64_t>(&(args_->y.stride[30]), -1) },
      { "", "y.stride[31]",
        "Mul: y.stride[31]. Default: -1.",
        value<int64_t>(&(args_->y.stride[31]), -1) },
      { "", "y.stride[32]",
        "Mul: y.stride[32]. Default: -1.",
        value<int64_t>(&(args_->y.stride[32]), -1) },
      { "", "y.stride[33]",
        "Mul: y.stride[33]. Default: -1.",
        value<int64_t>(&(args_->y.stride[33]), -1) },
      { "", "y.stride[34]",
        "Mul: y.stride[34]. Default: -1.",
        value<int64_t>(&(args_->y.stride[34]), -1) },
      { "", "y.stride[35]",
        "Mul: y.stride[35]. Default: -1.",
        value<int64_t>(&(args_->y.stride[35]), -1) },
      { "", "y.dimensions",
        "Mul: y.dimensions. Default: 36.",
        value<int32_t>(&(args_->y.dimensions), 36) },
      { "", "c.dim[0]",
        "Mul: c.dim[0]. Default: -1.",
        value<int64_t>(&(args_->c.dim[0]), -1) },
      { "", "c.dim[1]",
        "Mul: c.dim[1]. Default: -1.",
        value<int64_t>(&(args_->c.dim[1]), -1) },
      { "", "c.dim[2]",
        "Mul: c.dim[2]. Default: -1.",
        value<int64_t>(&(args_->c.dim[2]), -1) },
      { "", "c.dim[3]",
        "Mul: c.dim[3]. Default: -1.",
        value<int64_t>(&(args_->c.dim[3]), -1) },
      { "", "c.dim[4]",
        "Mul: c.dim[4]. Default: -1.",
        value<int64_t>(&(args_->c.dim[4]), -1) },
      { "", "c.dim[5]",
        "Mul: c.dim[5]. Default: -1.",
        value<int64_t>(&(args_->c.dim[5]), -1) },
      { "", "c.dim[6]",
        "Mul: c.dim[6]. Default: -1.",
        value<int64_t>(&(args_->c.dim[6]), -1) },
      { "", "c.dim[7]",
        "Mul: c.dim[7]. Default: -1.",
        value<int64_t>(&(args_->c.dim[7]), -1) },
      { "", "c.dim[8]",
        "Mul: c.dim[8]. Default: -1.",
        value<int64_t>(&(args_->c.dim[8]), -1) },
      { "", "c.dim[9]",
        "Mul: c.dim[9]. Default: -1.",
        value<int64_t>(&(args_->c.dim[9]), -1) },
      { "", "c.dim[10]",
        "Mul: c.dim[10]. Default: -1.",
        value<int64_t>(&(args_->c.dim[10]), -1) },
      { "", "c.dim[11]",
        "Mul: c.dim[11]. Default: -1.",
        value<int64_t>(&(args_->c.dim[11]), -1) },
      { "", "c.dim[12]",
        "Mul: c.dim[12]. Default: -1.",
        value<int64_t>(&(args_->c.dim[12]), -1) },
      { "", "c.dim[13]",
        "Mul: c.dim[13]. Default: -1.",
        value<int64_t>(&(args_->c.dim[13]), -1) },
      { "", "c.dim[14]",
        "Mul: c.dim[14]. Default: -1.",
        value<int64_t>(&(args_->c.dim[14]), -1) },
      { "", "c.dim[15]",
        "Mul: c.dim[15]. Default: -1.",
        value<int64_t>(&(args_->c.dim[15]), -1) },
      { "", "c.dim[16]",
        "Mul: c.dim[16]. Default: -1.",
        value<int64_t>(&(args_->c.dim[16]), -1) },
      { "", "c.dim[17]",
        "Mul: c.dim[17]. Default: -1.",
        value<int64_t>(&(args_->c.dim[17]), -1) },
      { "", "c.dim[18]",
        "Mul: c.dim[18]. Default: -1.",
        value<int64_t>(&(args_->c.dim[18]), -1) },
      { "", "c.dim[19]",
        "Mul: c.dim[19]. Default: -1.",
        value<int64_t>(&(args_->c.dim[19]), -1) },
      { "", "c.dim[20]",
        "Mul: c.dim[20]. Default: -1.",
        value<int64_t>(&(args_->c.dim[20]), -1) },
      { "", "c.dim[21]",
        "Mul: c.dim[21]. Default: -1.",
        value<int64_t>(&(args_->c.dim[21]), -1) },
      { "", "c.dim[22]",
        "Mul: c.dim[22]. Default: -1.",
        value<int64_t>(&(args_->c.dim[22]), -1) },
      { "", "c.dim[23]",
        "Mul: c.dim[23]. Default: -1.",
        value<int64_t>(&(args_->c.dim[23]), -1) },
      { "", "c.dim[24]",
        "Mul: c.dim[24]. Default: -1.",
        value<int64_t>(&(args_->c.dim[24]), -1) },
      { "", "c.dim[25]",
        "Mul: c.dim[25]. Default: -1.",
        value<int64_t>(&(args_->c.dim[25]), -1) },
      { "", "c.dim[26]",
        "Mul: c.dim[26]. Default: -1.",
        value<int64_t>(&(args_->c.dim[26]), -1) },
      { "", "c.dim[27]",
        "Mul: c.dim[27]. Default: -1.",
        value<int64_t>(&(args_->c.dim[27]), -1) },
      { "", "c.dim[28]",
        "Mul: c.dim[28]. Default: -1.",
        value<int64_t>(&(args_->c.dim[28]), -1) },
      { "", "c.dim[29]",
        "Mul: c.dim[29]. Default: -1.",
        value<int64_t>(&(args_->c.dim[29]), -1) },
      { "", "c.dim[30]",
        "Mul: c.dim[30]. Default: -1.",
        value<int64_t>(&(args_->c.dim[30]), -1) },
      { "", "c.dim[31]",
        "Mul: c.dim[31]. Default: -1.",
        value<int64_t>(&(args_->c.dim[31]), -1) },
      { "", "c.dim[32]",
        "Mul: c.dim[32]. Default: -1.",
        value<int64_t>(&(args_->c.dim[32]), -1) },
      { "", "c.dim[33]",
        "Mul: c.dim[33]. Default: -1.",
        value<int64_t>(&(args_->c.dim[33]), -1) },
      { "", "c.dim[34]",
        "Mul: c.dim[34]. Default: -1.",
        value<int64_t>(&(args_->c.dim[34]), -1) },
      { "", "c.dim[35]",
        "Mul: c.dim[35]. Default: -1.",
        value<int64_t>(&(args_->c.dim[35]), -1) },
      { "", "c.stride[0]",
        "Mul: c.stride[0]. Default: -1.",
        value<int64_t>(&(args_->c.stride[0]), -1) },
      { "", "c.stride[1]",
        "Mul: c.stride[1]. Default: -1.",
        value<int64_t>(&(args_->c.stride[1]), -1) },
      { "", "c.stride[2]",
        "Mul: c.stride[2]. Default: -1.",
        value<int64_t>(&(args_->c.stride[2]), -1) },
      { "", "c.stride[3]",
        "Mul: c.stride[3]. Default: -1.",
        value<int64_t>(&(args_->c.stride[3]), -1) },
      { "", "c.stride[4]",
        "Mul: c.stride[4]. Default: -1.",
        value<int64_t>(&(args_->c.stride[4]), -1) },
      { "", "c.stride[5]",
        "Mul: c.stride[5]. Default: -1.",
        value<int64_t>(&(args_->c.stride[5]), -1) },
      { "", "c.stride[6]",
        "Mul: c.stride[6]. Default: -1.",
        value<int64_t>(&(args_->c.stride[6]), -1) },
      { "", "c.stride[7]",
        "Mul: c.stride[7]. Default: -1.",
        value<int64_t>(&(args_->c.stride[7]), -1) },
      { "", "c.stride[8]",
        "Mul: c.stride[8]. Default: -1.",
        value<int64_t>(&(args_->c.stride[8]), -1) },
      { "", "c.stride[9]",
        "Mul: c.stride[9]. Default: -1.",
        value<int64_t>(&(args_->c.stride[9]), -1) },
      { "", "c.stride[10]",
        "Mul: c.stride[10]. Default: -1.",
        value<int64_t>(&(args_->c.stride[10]), -1) },
      { "", "c.stride[11]",
        "Mul: c.stride[11]. Default: -1.",
        value<int64_t>(&(args_->c.stride[11]), -1) },
      { "", "c.stride[12]",
        "Mul: c.stride[12]. Default: -1.",
        value<int64_t>(&(args_->c.stride[12]), -1) },
      { "", "c.stride[13]",
        "Mul: c.stride[13]. Default: -1.",
        value<int64_t>(&(args_->c.stride[13]), -1) },
      { "", "c.stride[14]",
        "Mul: c.stride[14]. Default: -1.",
        value<int64_t>(&(args_->c.stride[14]), -1) },
      { "", "c.stride[15]",
        "Mul: c.stride[15]. Default: -1.",
        value<int64_t>(&(args_->c.stride[15]), -1) },
      { "", "c.stride[16]",
        "Mul: c.stride[16]. Default: -1.",
        value<int64_t>(&(args_->c.stride[16]), -1) },
      { "", "c.stride[17]",
        "Mul: c.stride[17]. Default: -1.",
        value<int64_t>(&(args_->c.stride[17]), -1) },
      { "", "c.stride[18]",
        "Mul: c.stride[18]. Default: -1.",
        value<int64_t>(&(args_->c.stride[18]), -1) },
      { "", "c.stride[19]",
        "Mul: c.stride[19]. Default: -1.",
        value<int64_t>(&(args_->c.stride[19]), -1) },
      { "", "c.stride[20]",
        "Mul: c.stride[20]. Default: -1.",
        value<int64_t>(&(args_->c.stride[20]), -1) },
      { "", "c.stride[21]",
        "Mul: c.stride[21]. Default: -1.",
        value<int64_t>(&(args_->c.stride[21]), -1) },
      { "", "c.stride[22]",
        "Mul: c.stride[22]. Default: -1.",
        value<int64_t>(&(args_->c.stride[22]), -1) },
      { "", "c.stride[23]",
        "Mul: c.stride[23]. Default: -1.",
        value<int64_t>(&(args_->c.stride[23]), -1) },
      { "", "c.stride[24]",
        "Mul: c.stride[24]. Default: -1.",
        value<int64_t>(&(args_->c.stride[24]), -1) },
      { "", "c.stride[25]",
        "Mul: c.stride[25]. Default: -1.",
        value<int64_t>(&(args_->c.stride[25]), -1) },
      { "", "c.stride[26]",
        "Mul: c.stride[26]. Default: -1.",
        value<int64_t>(&(args_->c.stride[26]), -1) },
      { "", "c.stride[27]",
        "Mul: c.stride[27]. Default: -1.",
        value<int64_t>(&(args_->c.stride[27]), -1) },
      { "", "c.stride[28]",
        "Mul: c.stride[28]. Default: -1.",
        value<int64_t>(&(args_->c.stride[28]), -1) },
      { "", "c.stride[29]",
        "Mul: c.stride[29]. Default: -1.",
        value<int64_t>(&(args_->c.stride[29]), -1) },
      { "", "c.stride[30]",
        "Mul: c.stride[30]. Default: -1.",
        value<int64_t>(&(args_->c.stride[30]), -1) },
      { "", "c.stride[31]",
        "Mul: c.stride[31]. Default: -1.",
        value<int64_t>(&(args_->c.stride[31]), -1) },
      { "", "c.stride[32]",
        "Mul: c.stride[32]. Default: -1.",
        value<int64_t>(&(args_->c.stride[32]), -1) },
      { "", "c.stride[33]",
        "Mul: c.stride[33]. Default: -1.",
        value<int64_t>(&(args_->c.stride[33]), -1) },
      { "", "c.stride[34]",
        "Mul: c.stride[34]. Default: -1.",
        value<int64_t>(&(args_->c.stride[34]), -1) },
      { "", "c.stride[35]",
        "Mul: c.stride[35]. Default: -1.",
        value<int64_t>(&(args_->c.stride[35]), -1) },
      { "", "c.dimensions",
        "Mul: c.dimensions. Default: 36.",
        value<int32_t>(&(args_->c.dimensions), 36) },
      { "", "scale",
        "Mul: scale. Default: 1.0.",
        value<double>(&(args_->scale), 1.0) },
      { "", "scale_imag",
        "Mul: scale_imag. Default: 0.0.",
        value<double>(&(args_->scale_imag), 0.0) },
      { "", "x.fill", "Mul: x.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "y.fill", "Mul: y.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "y.ref.fill", "Mul: y.ref.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "c.fill", "Mul: c.fill",
        value<FillMode>(nullptr, FillMode()) },
    };

    this->add_options(options);
  }

  ~ArgParser() {}

  const Arguments *arguments() const { return args_; }

  void deleteArguments() { if (args_) delete args_; }

  int parse(const int argc, const char *argv[], bool fail_on_bad_opt = true) {
    int parsed_args = cask::tester::parse(argc, argv, this->param_desc(), fail_on_bad_opt);

    // Update arguments for consistence

    this->finalize();

    return parsed_args;
  }

  virtual void finalize() { }

private:
    Arguments *args_;
};


template<>
class ArgParser<cask_plugin::Conv> : public cask::tester::ArgParser {
public:
  using Arguments = cask_plugin::Conv;

  ArgParser(void *args_data) : cask::tester::ArgParser(args_data) {
    assert((args_data != nullptr) && "Must allocate buffer for arguments");
    this->args_ = reinterpret_cast<Arguments *>(args_data);

    using cask::tester::value;
    using cask::tester::FillMode;
    std::vector<cask::tester::ParamDesc::Param> options{
      
      { "", "y.stride.depth",
        "Conv: y.stride.depth. Default: -1.",
        value<int64_t>(&(args_->y.stride.depth), -1) },
      { "", "y.stride.height",
        "Conv: y.stride.height. Default: -1.",
        value<int64_t>(&(args_->y.stride.height), -1) },
      { "", "y.stride.width",
        "Conv: y.stride.width. Default: -1.",
        value<int64_t>(&(args_->y.stride.width), -1) },
      { "", "y.stride.channels",
        "Conv: y.stride.channels. Default: -1.",
        value<int64_t>(&(args_->y.stride.channels), -1) },
      { "", "y.stride.batches",
        "Conv: y.stride.batches. Default: -1.",
        value<int64_t>(&(args_->y.stride.batches), -1) },
      { "", "x.depth",
        "Conv: x.depth. Default: 1.",
        value<int64_t>(&(args_->x.depth), 1) },
      { "", "x.height",
        "Conv: x.height. Default: 32.",
        value<int64_t>(&(args_->x.height), 32) },
      { "", "x.width",
        "Conv: x.width. Default: 32.",
        value<int64_t>(&(args_->x.width), 32) },
      { "", "x.channels",
        "Conv: x.channels. Default: 32.",
        value<int64_t>(&(args_->x.channels), 32) },
      { "", "x.batches",
        "Conv: x.batches. Default: 1.",
        value<int64_t>(&(args_->x.batches), 1) },
      { "", "x.stride.depth",
        "Conv: x.stride.depth. Default: -1.",
        value<int64_t>(&(args_->x.stride.depth), -1) },
      { "", "x.stride.height",
        "Conv: x.stride.height. Default: -1.",
        value<int64_t>(&(args_->x.stride.height), -1) },
      { "", "x.stride.width",
        "Conv: x.stride.width. Default: -1.",
        value<int64_t>(&(args_->x.stride.width), -1) },
      { "", "x.stride.channels",
        "Conv: x.stride.channels. Default: -1.",
        value<int64_t>(&(args_->x.stride.channels), -1) },
      { "", "x.stride.batches",
        "Conv: x.stride.batches. Default: -1.",
        value<int64_t>(&(args_->x.stride.batches), -1) },
      { "", "w.depth",
        "Conv: w.depth. Default: 1.",
        value<int64_t>(&(args_->w.depth), 1) },
      { "", "w.height",
        "Conv: w.height. Default: 3.",
        value<int64_t>(&(args_->w.height), 3) },
      { "", "w.width",
        "Conv: w.width. Default: 3.",
        value<int64_t>(&(args_->w.width), 3) },
      { "", "w.filters",
        "Conv: w.filters. Default: 128.",
        value<int64_t>(&(args_->w.filters), 128) },
      { "", "w.stride.depth",
        "Conv: w.stride.depth. Default: -1.",
        value<int64_t>(&(args_->w.stride.depth), -1) },
      { "", "w.stride.height",
        "Conv: w.stride.height. Default: -1.",
        value<int64_t>(&(args_->w.stride.height), -1) },
      { "", "w.stride.width",
        "Conv: w.stride.width. Default: -1.",
        value<int64_t>(&(args_->w.stride.width), -1) },
      { "", "w.stride.channels",
        "Conv: w.stride.channels. Default: -1.",
        value<int64_t>(&(args_->w.stride.channels), -1) },
      { "", "w.stride.filters",
        "Conv: w.stride.filters. Default: -1.",
        value<int64_t>(&(args_->w.stride.filters), -1) },
      { "", "groups",
        "Conv: groups. Default: 1.",
        value<int64_t>(&(args_->groups), 1) },
      { "", "padding_front",
        "Conv: padding_front. Default: 0.",
        value<int64_t>(&(args_->padding_front), 0) },
      { "", "padding_back",
        "Conv: padding_back. Default: 0.",
        value<int64_t>(&(args_->padding_back), 0) },
      { "", "padding_top",
        "Conv: padding_top. Default: 0.",
        value<int64_t>(&(args_->padding_top), 0) },
      { "", "padding_bottom",
        "Conv: padding_bottom. Default: 0.",
        value<int64_t>(&(args_->padding_bottom), 0) },
      { "", "padding_left",
        "Conv: padding_left. Default: 0.",
        value<int64_t>(&(args_->padding_left), 0) },
      { "", "padding_right",
        "Conv: padding_right. Default: 0.",
        value<int64_t>(&(args_->padding_right), 0) },
      { "", "stride_depth",
        "Conv: stride_depth. Default: 1.",
        value<int64_t>(&(args_->stride_depth), 1) },
      { "", "stride_height",
        "Conv: stride_height. Default: 1.",
        value<int64_t>(&(args_->stride_height), 1) },
      { "", "stride_width",
        "Conv: stride_width. Default: 1.",
        value<int64_t>(&(args_->stride_width), 1) },
      { "", "dilation_depth",
        "Conv: dilation_depth. Default: 1.",
        value<int64_t>(&(args_->dilation_depth), 1) },
      { "", "dilation_height",
        "Conv: dilation_height. Default: 1.",
        value<int64_t>(&(args_->dilation_height), 1) },
      { "", "dilation_width",
        "Conv: dilation_width. Default: 1.",
        value<int64_t>(&(args_->dilation_width), 1) },
      { "", "is_xcorrelation",
        "Conv: is_xcorrelation. Use --no_is_xcorrelation to disable it. Default: false.",
        value<bool>(&(args_->is_xcorrelation), false) },
      { "", "y.fill", "Conv: y.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "y.ref.fill", "Conv: y.ref.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "x.fill", "Conv: x.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "w.fill", "Conv: w.fill",
        value<FillMode>(nullptr, FillMode()) },
    };

    this->add_options(options);
  }

  ~ArgParser() {}

  const Arguments *arguments() const { return args_; }

  void deleteArguments() { if (args_) delete args_; }

  int parse(const int argc, const char *argv[], bool fail_on_bad_opt = true) {
    int parsed_args = cask::tester::parse(argc, argv, this->param_desc(), fail_on_bad_opt);

    // Update arguments for consistence
    args_->y.batches = args_->x.batches;
    args_->y.channels = args_->w.filters;
    args_->y.depth = 1 + ((args_->x.depth + args_->padding_front + args_->padding_back - (args_->dilation_depth * (args_->w.depth + -1) + 1))/args_->stride_depth);
    args_->y.height = 1 + ((args_->x.height + args_->padding_top + args_->padding_bottom - (args_->dilation_height * (args_->w.height + -1) + 1))/args_->stride_height);
    args_->y.width = 1 + ((args_->x.width + args_->padding_right + args_->padding_left - (args_->dilation_width * (args_->w.width + -1) + 1))/args_->stride_width);
    args_->w.channels = (args_->x.channels/args_->groups);
    cask_plugin::toInternalShape(&args_->y)->finalize();
    //args_->y.finalize();
    cask_plugin::toInternalShape(&args_->x)->finalize();
    //args_->x.finalize();
    cask_plugin::toInternalShape(&args_->w)->finalize();
    //args_->w.finalize();

    this->finalize();

    return parsed_args;
  }

  virtual void finalize() { }

private:
    Arguments *args_;
};


template<>
class ArgParser<cask_plugin::Elementwise> : public cask::tester::ArgParser {
public:
  using Arguments = cask_plugin::Elementwise;

  ArgParser(void *args_data) : cask::tester::ArgParser(args_data) {
    assert((args_data != nullptr) && "Must allocate buffer for arguments");
    this->args_ = reinterpret_cast<Arguments *>(args_data);

    using cask::tester::value;
    using cask::tester::FillMode;
    std::vector<cask::tester::ParamDesc::Param> options{
      
      { "", "x.batches",
        "Elementwise: x.batches. Default: 1.",
        value<int64_t>(&(args_->x.batches), 1) },
      { "", "x.rows",
        "Elementwise: x.rows. Default: 128.",
        value<int64_t>(&(args_->x.rows), 128) },
      { "", "x.cols",
        "Elementwise: x.cols. Default: 128.",
        value<int64_t>(&(args_->x.cols), 128) },
      { "", "x.stride.batches",
        "Elementwise: x.stride.batches. Default: -1.",
        value<int64_t>(&(args_->x.stride.batches), -1) },
      { "", "x.stride.rows",
        "Elementwise: x.stride.rows. Default: -1.",
        value<int64_t>(&(args_->x.stride.rows), -1) },
      { "", "x.stride.cols",
        "Elementwise: x.stride.cols. Default: -1.",
        value<int64_t>(&(args_->x.stride.cols), -1) },
      { "", "y.batches",
        "Elementwise: y.batches. Default: 1.",
        value<int64_t>(&(args_->y.batches), 1) },
      { "", "y.rows",
        "Elementwise: y.rows. Default: 128.",
        value<int64_t>(&(args_->y.rows), 128) },
      { "", "y.cols",
        "Elementwise: y.cols. Default: 128.",
        value<int64_t>(&(args_->y.cols), 128) },
      { "", "y.stride.batches",
        "Elementwise: y.stride.batches. Default: -1.",
        value<int64_t>(&(args_->y.stride.batches), -1) },
      { "", "y.stride.rows",
        "Elementwise: y.stride.rows. Default: -1.",
        value<int64_t>(&(args_->y.stride.rows), -1) },
      { "", "y.stride.cols",
        "Elementwise: y.stride.cols. Default: -1.",
        value<int64_t>(&(args_->y.stride.cols), -1) },
      { "", "x.fill", "Elementwise: x.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "y.fill", "Elementwise: y.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "y.ref.fill", "Elementwise: y.ref.fill",
        value<FillMode>(nullptr, FillMode()) },
    };

    this->add_options(options);
  }

  ~ArgParser() {}

  const Arguments *arguments() const { return args_; }

  void deleteArguments() { if (args_) delete args_; }

  int parse(const int argc, const char *argv[], bool fail_on_bad_opt = true) {
    int parsed_args = cask::tester::parse(argc, argv, this->param_desc(), fail_on_bad_opt);

    // Update arguments for consistence
    cask_plugin::toInternalShape(&args_->x)->finalize();
    //args_->x.finalize();
    cask_plugin::toInternalShape(&args_->y)->finalize();
    //args_->y.finalize();

    this->finalize();

    return parsed_args;
  }

  virtual void finalize() { }

private:
    Arguments *args_;
};


template<>
class ArgParser<cask_plugin::LayoutTransformation> : public cask::tester::ArgParser {
public:
  using Arguments = cask_plugin::LayoutTransformation;

  ArgParser(void *args_data) : cask::tester::ArgParser(args_data) {
    assert((args_data != nullptr) && "Must allocate buffer for arguments");
    this->args_ = reinterpret_cast<Arguments *>(args_data);

    using cask::tester::value;
    using cask::tester::FillMode;
    std::vector<cask::tester::ParamDesc::Param> options{
      
      { "", "A.dim[0]",
        "LayoutTransformation: A.dim[0]. Default: -1.",
        value<int64_t>(&(args_->A.dim[0]), -1) },
      { "", "A.dim[1]",
        "LayoutTransformation: A.dim[1]. Default: -1.",
        value<int64_t>(&(args_->A.dim[1]), -1) },
      { "", "A.dim[2]",
        "LayoutTransformation: A.dim[2]. Default: -1.",
        value<int64_t>(&(args_->A.dim[2]), -1) },
      { "", "A.dim[3]",
        "LayoutTransformation: A.dim[3]. Default: -1.",
        value<int64_t>(&(args_->A.dim[3]), -1) },
      { "", "A.dim[4]",
        "LayoutTransformation: A.dim[4]. Default: -1.",
        value<int64_t>(&(args_->A.dim[4]), -1) },
      { "", "A.dim[5]",
        "LayoutTransformation: A.dim[5]. Default: -1.",
        value<int64_t>(&(args_->A.dim[5]), -1) },
      { "", "A.dim[6]",
        "LayoutTransformation: A.dim[6]. Default: -1.",
        value<int64_t>(&(args_->A.dim[6]), -1) },
      { "", "A.dim[7]",
        "LayoutTransformation: A.dim[7]. Default: -1.",
        value<int64_t>(&(args_->A.dim[7]), -1) },
      { "", "A.stride[0]",
        "LayoutTransformation: A.stride[0]. Default: -1.",
        value<int64_t>(&(args_->A.stride[0]), -1) },
      { "", "A.stride[1]",
        "LayoutTransformation: A.stride[1]. Default: -1.",
        value<int64_t>(&(args_->A.stride[1]), -1) },
      { "", "A.stride[2]",
        "LayoutTransformation: A.stride[2]. Default: -1.",
        value<int64_t>(&(args_->A.stride[2]), -1) },
      { "", "A.stride[3]",
        "LayoutTransformation: A.stride[3]. Default: -1.",
        value<int64_t>(&(args_->A.stride[3]), -1) },
      { "", "A.stride[4]",
        "LayoutTransformation: A.stride[4]. Default: -1.",
        value<int64_t>(&(args_->A.stride[4]), -1) },
      { "", "A.stride[5]",
        "LayoutTransformation: A.stride[5]. Default: -1.",
        value<int64_t>(&(args_->A.stride[5]), -1) },
      { "", "A.stride[6]",
        "LayoutTransformation: A.stride[6]. Default: -1.",
        value<int64_t>(&(args_->A.stride[6]), -1) },
      { "", "A.stride[7]",
        "LayoutTransformation: A.stride[7]. Default: -1.",
        value<int64_t>(&(args_->A.stride[7]), -1) },
      { "", "A.dimensions",
        "LayoutTransformation: A.dimensions. Default: 8.",
        value<int32_t>(&(args_->A.dimensions), 8) },
      { "", "B.dim[0]",
        "LayoutTransformation: B.dim[0]. Default: -1.",
        value<int64_t>(&(args_->B.dim[0]), -1) },
      { "", "B.dim[1]",
        "LayoutTransformation: B.dim[1]. Default: -1.",
        value<int64_t>(&(args_->B.dim[1]), -1) },
      { "", "B.dim[2]",
        "LayoutTransformation: B.dim[2]. Default: -1.",
        value<int64_t>(&(args_->B.dim[2]), -1) },
      { "", "B.dim[3]",
        "LayoutTransformation: B.dim[3]. Default: -1.",
        value<int64_t>(&(args_->B.dim[3]), -1) },
      { "", "B.dim[4]",
        "LayoutTransformation: B.dim[4]. Default: -1.",
        value<int64_t>(&(args_->B.dim[4]), -1) },
      { "", "B.dim[5]",
        "LayoutTransformation: B.dim[5]. Default: -1.",
        value<int64_t>(&(args_->B.dim[5]), -1) },
      { "", "B.dim[6]",
        "LayoutTransformation: B.dim[6]. Default: -1.",
        value<int64_t>(&(args_->B.dim[6]), -1) },
      { "", "B.dim[7]",
        "LayoutTransformation: B.dim[7]. Default: -1.",
        value<int64_t>(&(args_->B.dim[7]), -1) },
      { "", "B.stride[0]",
        "LayoutTransformation: B.stride[0]. Default: -1.",
        value<int64_t>(&(args_->B.stride[0]), -1) },
      { "", "B.stride[1]",
        "LayoutTransformation: B.stride[1]. Default: -1.",
        value<int64_t>(&(args_->B.stride[1]), -1) },
      { "", "B.stride[2]",
        "LayoutTransformation: B.stride[2]. Default: -1.",
        value<int64_t>(&(args_->B.stride[2]), -1) },
      { "", "B.stride[3]",
        "LayoutTransformation: B.stride[3]. Default: -1.",
        value<int64_t>(&(args_->B.stride[3]), -1) },
      { "", "B.stride[4]",
        "LayoutTransformation: B.stride[4]. Default: -1.",
        value<int64_t>(&(args_->B.stride[4]), -1) },
      { "", "B.stride[5]",
        "LayoutTransformation: B.stride[5]. Default: -1.",
        value<int64_t>(&(args_->B.stride[5]), -1) },
      { "", "B.stride[6]",
        "LayoutTransformation: B.stride[6]. Default: -1.",
        value<int64_t>(&(args_->B.stride[6]), -1) },
      { "", "B.stride[7]",
        "LayoutTransformation: B.stride[7]. Default: -1.",
        value<int64_t>(&(args_->B.stride[7]), -1) },
      { "", "B.dimensions",
        "LayoutTransformation: B.dimensions. Default: 8.",
        value<int32_t>(&(args_->B.dimensions), 8) },
      { "", "C.dim[0]",
        "LayoutTransformation: C.dim[0]. Default: -1.",
        value<int64_t>(&(args_->C.dim[0]), -1) },
      { "", "C.dim[1]",
        "LayoutTransformation: C.dim[1]. Default: -1.",
        value<int64_t>(&(args_->C.dim[1]), -1) },
      { "", "C.dim[2]",
        "LayoutTransformation: C.dim[2]. Default: -1.",
        value<int64_t>(&(args_->C.dim[2]), -1) },
      { "", "C.dim[3]",
        "LayoutTransformation: C.dim[3]. Default: -1.",
        value<int64_t>(&(args_->C.dim[3]), -1) },
      { "", "C.dim[4]",
        "LayoutTransformation: C.dim[4]. Default: -1.",
        value<int64_t>(&(args_->C.dim[4]), -1) },
      { "", "C.dim[5]",
        "LayoutTransformation: C.dim[5]. Default: -1.",
        value<int64_t>(&(args_->C.dim[5]), -1) },
      { "", "C.dim[6]",
        "LayoutTransformation: C.dim[6]. Default: -1.",
        value<int64_t>(&(args_->C.dim[6]), -1) },
      { "", "C.dim[7]",
        "LayoutTransformation: C.dim[7]. Default: -1.",
        value<int64_t>(&(args_->C.dim[7]), -1) },
      { "", "C.stride[0]",
        "LayoutTransformation: C.stride[0]. Default: -1.",
        value<int64_t>(&(args_->C.stride[0]), -1) },
      { "", "C.stride[1]",
        "LayoutTransformation: C.stride[1]. Default: -1.",
        value<int64_t>(&(args_->C.stride[1]), -1) },
      { "", "C.stride[2]",
        "LayoutTransformation: C.stride[2]. Default: -1.",
        value<int64_t>(&(args_->C.stride[2]), -1) },
      { "", "C.stride[3]",
        "LayoutTransformation: C.stride[3]. Default: -1.",
        value<int64_t>(&(args_->C.stride[3]), -1) },
      { "", "C.stride[4]",
        "LayoutTransformation: C.stride[4]. Default: -1.",
        value<int64_t>(&(args_->C.stride[4]), -1) },
      { "", "C.stride[5]",
        "LayoutTransformation: C.stride[5]. Default: -1.",
        value<int64_t>(&(args_->C.stride[5]), -1) },
      { "", "C.stride[6]",
        "LayoutTransformation: C.stride[6]. Default: -1.",
        value<int64_t>(&(args_->C.stride[6]), -1) },
      { "", "C.stride[7]",
        "LayoutTransformation: C.stride[7]. Default: -1.",
        value<int64_t>(&(args_->C.stride[7]), -1) },
      { "", "C.dimensions",
        "LayoutTransformation: C.dimensions. Default: 8.",
        value<int32_t>(&(args_->C.dimensions), 8) },
      { "", "D.dim[0]",
        "LayoutTransformation: D.dim[0]. Default: -1.",
        value<int64_t>(&(args_->D.dim[0]), -1) },
      { "", "D.dim[1]",
        "LayoutTransformation: D.dim[1]. Default: -1.",
        value<int64_t>(&(args_->D.dim[1]), -1) },
      { "", "D.dim[2]",
        "LayoutTransformation: D.dim[2]. Default: -1.",
        value<int64_t>(&(args_->D.dim[2]), -1) },
      { "", "D.dim[3]",
        "LayoutTransformation: D.dim[3]. Default: -1.",
        value<int64_t>(&(args_->D.dim[3]), -1) },
      { "", "D.dim[4]",
        "LayoutTransformation: D.dim[4]. Default: -1.",
        value<int64_t>(&(args_->D.dim[4]), -1) },
      { "", "D.dim[5]",
        "LayoutTransformation: D.dim[5]. Default: -1.",
        value<int64_t>(&(args_->D.dim[5]), -1) },
      { "", "D.dim[6]",
        "LayoutTransformation: D.dim[6]. Default: -1.",
        value<int64_t>(&(args_->D.dim[6]), -1) },
      { "", "D.dim[7]",
        "LayoutTransformation: D.dim[7]. Default: -1.",
        value<int64_t>(&(args_->D.dim[7]), -1) },
      { "", "D.stride[0]",
        "LayoutTransformation: D.stride[0]. Default: -1.",
        value<int64_t>(&(args_->D.stride[0]), -1) },
      { "", "D.stride[1]",
        "LayoutTransformation: D.stride[1]. Default: -1.",
        value<int64_t>(&(args_->D.stride[1]), -1) },
      { "", "D.stride[2]",
        "LayoutTransformation: D.stride[2]. Default: -1.",
        value<int64_t>(&(args_->D.stride[2]), -1) },
      { "", "D.stride[3]",
        "LayoutTransformation: D.stride[3]. Default: -1.",
        value<int64_t>(&(args_->D.stride[3]), -1) },
      { "", "D.stride[4]",
        "LayoutTransformation: D.stride[4]. Default: -1.",
        value<int64_t>(&(args_->D.stride[4]), -1) },
      { "", "D.stride[5]",
        "LayoutTransformation: D.stride[5]. Default: -1.",
        value<int64_t>(&(args_->D.stride[5]), -1) },
      { "", "D.stride[6]",
        "LayoutTransformation: D.stride[6]. Default: -1.",
        value<int64_t>(&(args_->D.stride[6]), -1) },
      { "", "D.stride[7]",
        "LayoutTransformation: D.stride[7]. Default: -1.",
        value<int64_t>(&(args_->D.stride[7]), -1) },
      { "", "D.dimensions",
        "LayoutTransformation: D.dimensions. Default: 8.",
        value<int32_t>(&(args_->D.dimensions), 8) },
      { "", "Alpha",
        "LayoutTransformation: Alpha. Default: 0.0.",
        value<float>(&(args_->Alpha), 0.0) },
      { "", "Beta",
        "LayoutTransformation: Beta. Default: 0.0.",
        value<float>(&(args_->Beta), 0.0) },
      { "", "Gamma",
        "LayoutTransformation: Gamma. Default: 0.0.",
        value<float>(&(args_->Gamma), 0.0) },
      { "", "OpA",
        "LayoutTransformation: OpA. Default: 0.",
        value<int32_t>(&(args_->OpA), 0) },
      { "", "OpB",
        "LayoutTransformation: OpB. Default: 0.",
        value<int32_t>(&(args_->OpB), 0) },
      { "", "OpC",
        "LayoutTransformation: OpC. Default: 0.",
        value<int32_t>(&(args_->OpC), 0) },
      { "", "OpAB",
        "LayoutTransformation: OpAB. Default: 3.",
        value<int32_t>(&(args_->OpAB), 3) },
      { "", "OpABC",
        "LayoutTransformation: OpABC. Default: 3.",
        value<int32_t>(&(args_->OpABC), 3) },
      { "", "A.fill", "LayoutTransformation: A.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "B.fill", "LayoutTransformation: B.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "C.fill", "LayoutTransformation: C.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "D.fill", "LayoutTransformation: D.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "D.ref.fill", "LayoutTransformation: D.ref.fill",
        value<FillMode>(nullptr, FillMode()) },
    };

    this->add_options(options);
  }

  ~ArgParser() {}

  const Arguments *arguments() const { return args_; }

  void deleteArguments() { if (args_) delete args_; }

  int parse(const int argc, const char *argv[], bool fail_on_bad_opt = true) {
    int parsed_args = cask::tester::parse(argc, argv, this->param_desc(), fail_on_bad_opt);

    // Update arguments for consistence

    this->finalize();

    return parsed_args;
  }

  virtual void finalize() { }

private:
    Arguments *args_;
};


template<>
class ArgParser<cask_plugin::Gett> : public cask::tester::ArgParser {
public:
  using Arguments = cask_plugin::Gett;

  ArgParser(void *args_data) : cask::tester::ArgParser(args_data) {
    assert((args_data != nullptr) && "Must allocate buffer for arguments");
    this->args_ = reinterpret_cast<Arguments *>(args_data);

    using cask::tester::value;
    using cask::tester::FillMode;
    std::vector<cask::tester::ParamDesc::Param> options{
      
      { "", "a.dim[0]",
        "Gett: a.dim[0]. Default: -1.",
        value<int64_t>(&(args_->a.dim[0]), -1) },
      { "", "a.dim[1]",
        "Gett: a.dim[1]. Default: -1.",
        value<int64_t>(&(args_->a.dim[1]), -1) },
      { "", "a.dim[2]",
        "Gett: a.dim[2]. Default: -1.",
        value<int64_t>(&(args_->a.dim[2]), -1) },
      { "", "a.dim[3]",
        "Gett: a.dim[3]. Default: -1.",
        value<int64_t>(&(args_->a.dim[3]), -1) },
      { "", "a.dim[4]",
        "Gett: a.dim[4]. Default: -1.",
        value<int64_t>(&(args_->a.dim[4]), -1) },
      { "", "a.dim[5]",
        "Gett: a.dim[5]. Default: -1.",
        value<int64_t>(&(args_->a.dim[5]), -1) },
      { "", "a.dim[6]",
        "Gett: a.dim[6]. Default: -1.",
        value<int64_t>(&(args_->a.dim[6]), -1) },
      { "", "a.dim[7]",
        "Gett: a.dim[7]. Default: -1.",
        value<int64_t>(&(args_->a.dim[7]), -1) },
      { "", "a.dim[8]",
        "Gett: a.dim[8]. Default: -1.",
        value<int64_t>(&(args_->a.dim[8]), -1) },
      { "", "a.dim[9]",
        "Gett: a.dim[9]. Default: -1.",
        value<int64_t>(&(args_->a.dim[9]), -1) },
      { "", "a.dim[10]",
        "Gett: a.dim[10]. Default: -1.",
        value<int64_t>(&(args_->a.dim[10]), -1) },
      { "", "a.dim[11]",
        "Gett: a.dim[11]. Default: -1.",
        value<int64_t>(&(args_->a.dim[11]), -1) },
      { "", "a.dim[12]",
        "Gett: a.dim[12]. Default: -1.",
        value<int64_t>(&(args_->a.dim[12]), -1) },
      { "", "a.dim[13]",
        "Gett: a.dim[13]. Default: -1.",
        value<int64_t>(&(args_->a.dim[13]), -1) },
      { "", "a.dim[14]",
        "Gett: a.dim[14]. Default: -1.",
        value<int64_t>(&(args_->a.dim[14]), -1) },
      { "", "a.dim[15]",
        "Gett: a.dim[15]. Default: -1.",
        value<int64_t>(&(args_->a.dim[15]), -1) },
      { "", "a.dim[16]",
        "Gett: a.dim[16]. Default: -1.",
        value<int64_t>(&(args_->a.dim[16]), -1) },
      { "", "a.dim[17]",
        "Gett: a.dim[17]. Default: -1.",
        value<int64_t>(&(args_->a.dim[17]), -1) },
      { "", "a.dim[18]",
        "Gett: a.dim[18]. Default: -1.",
        value<int64_t>(&(args_->a.dim[18]), -1) },
      { "", "a.dim[19]",
        "Gett: a.dim[19]. Default: -1.",
        value<int64_t>(&(args_->a.dim[19]), -1) },
      { "", "a.dim[20]",
        "Gett: a.dim[20]. Default: -1.",
        value<int64_t>(&(args_->a.dim[20]), -1) },
      { "", "a.dim[21]",
        "Gett: a.dim[21]. Default: -1.",
        value<int64_t>(&(args_->a.dim[21]), -1) },
      { "", "a.dim[22]",
        "Gett: a.dim[22]. Default: -1.",
        value<int64_t>(&(args_->a.dim[22]), -1) },
      { "", "a.dim[23]",
        "Gett: a.dim[23]. Default: -1.",
        value<int64_t>(&(args_->a.dim[23]), -1) },
      { "", "a.dim[24]",
        "Gett: a.dim[24]. Default: -1.",
        value<int64_t>(&(args_->a.dim[24]), -1) },
      { "", "a.dim[25]",
        "Gett: a.dim[25]. Default: -1.",
        value<int64_t>(&(args_->a.dim[25]), -1) },
      { "", "a.dim[26]",
        "Gett: a.dim[26]. Default: -1.",
        value<int64_t>(&(args_->a.dim[26]), -1) },
      { "", "a.dim[27]",
        "Gett: a.dim[27]. Default: -1.",
        value<int64_t>(&(args_->a.dim[27]), -1) },
      { "", "a.dim[28]",
        "Gett: a.dim[28]. Default: -1.",
        value<int64_t>(&(args_->a.dim[28]), -1) },
      { "", "a.dim[29]",
        "Gett: a.dim[29]. Default: -1.",
        value<int64_t>(&(args_->a.dim[29]), -1) },
      { "", "a.dim[30]",
        "Gett: a.dim[30]. Default: -1.",
        value<int64_t>(&(args_->a.dim[30]), -1) },
      { "", "a.dim[31]",
        "Gett: a.dim[31]. Default: -1.",
        value<int64_t>(&(args_->a.dim[31]), -1) },
      { "", "a.dim[32]",
        "Gett: a.dim[32]. Default: -1.",
        value<int64_t>(&(args_->a.dim[32]), -1) },
      { "", "a.dim[33]",
        "Gett: a.dim[33]. Default: -1.",
        value<int64_t>(&(args_->a.dim[33]), -1) },
      { "", "a.dim[34]",
        "Gett: a.dim[34]. Default: -1.",
        value<int64_t>(&(args_->a.dim[34]), -1) },
      { "", "a.dim[35]",
        "Gett: a.dim[35]. Default: -1.",
        value<int64_t>(&(args_->a.dim[35]), -1) },
      { "", "a.stride[0]",
        "Gett: a.stride[0]. Default: -1.",
        value<int64_t>(&(args_->a.stride[0]), -1) },
      { "", "a.stride[1]",
        "Gett: a.stride[1]. Default: -1.",
        value<int64_t>(&(args_->a.stride[1]), -1) },
      { "", "a.stride[2]",
        "Gett: a.stride[2]. Default: -1.",
        value<int64_t>(&(args_->a.stride[2]), -1) },
      { "", "a.stride[3]",
        "Gett: a.stride[3]. Default: -1.",
        value<int64_t>(&(args_->a.stride[3]), -1) },
      { "", "a.stride[4]",
        "Gett: a.stride[4]. Default: -1.",
        value<int64_t>(&(args_->a.stride[4]), -1) },
      { "", "a.stride[5]",
        "Gett: a.stride[5]. Default: -1.",
        value<int64_t>(&(args_->a.stride[5]), -1) },
      { "", "a.stride[6]",
        "Gett: a.stride[6]. Default: -1.",
        value<int64_t>(&(args_->a.stride[6]), -1) },
      { "", "a.stride[7]",
        "Gett: a.stride[7]. Default: -1.",
        value<int64_t>(&(args_->a.stride[7]), -1) },
      { "", "a.stride[8]",
        "Gett: a.stride[8]. Default: -1.",
        value<int64_t>(&(args_->a.stride[8]), -1) },
      { "", "a.stride[9]",
        "Gett: a.stride[9]. Default: -1.",
        value<int64_t>(&(args_->a.stride[9]), -1) },
      { "", "a.stride[10]",
        "Gett: a.stride[10]. Default: -1.",
        value<int64_t>(&(args_->a.stride[10]), -1) },
      { "", "a.stride[11]",
        "Gett: a.stride[11]. Default: -1.",
        value<int64_t>(&(args_->a.stride[11]), -1) },
      { "", "a.stride[12]",
        "Gett: a.stride[12]. Default: -1.",
        value<int64_t>(&(args_->a.stride[12]), -1) },
      { "", "a.stride[13]",
        "Gett: a.stride[13]. Default: -1.",
        value<int64_t>(&(args_->a.stride[13]), -1) },
      { "", "a.stride[14]",
        "Gett: a.stride[14]. Default: -1.",
        value<int64_t>(&(args_->a.stride[14]), -1) },
      { "", "a.stride[15]",
        "Gett: a.stride[15]. Default: -1.",
        value<int64_t>(&(args_->a.stride[15]), -1) },
      { "", "a.stride[16]",
        "Gett: a.stride[16]. Default: -1.",
        value<int64_t>(&(args_->a.stride[16]), -1) },
      { "", "a.stride[17]",
        "Gett: a.stride[17]. Default: -1.",
        value<int64_t>(&(args_->a.stride[17]), -1) },
      { "", "a.stride[18]",
        "Gett: a.stride[18]. Default: -1.",
        value<int64_t>(&(args_->a.stride[18]), -1) },
      { "", "a.stride[19]",
        "Gett: a.stride[19]. Default: -1.",
        value<int64_t>(&(args_->a.stride[19]), -1) },
      { "", "a.stride[20]",
        "Gett: a.stride[20]. Default: -1.",
        value<int64_t>(&(args_->a.stride[20]), -1) },
      { "", "a.stride[21]",
        "Gett: a.stride[21]. Default: -1.",
        value<int64_t>(&(args_->a.stride[21]), -1) },
      { "", "a.stride[22]",
        "Gett: a.stride[22]. Default: -1.",
        value<int64_t>(&(args_->a.stride[22]), -1) },
      { "", "a.stride[23]",
        "Gett: a.stride[23]. Default: -1.",
        value<int64_t>(&(args_->a.stride[23]), -1) },
      { "", "a.stride[24]",
        "Gett: a.stride[24]. Default: -1.",
        value<int64_t>(&(args_->a.stride[24]), -1) },
      { "", "a.stride[25]",
        "Gett: a.stride[25]. Default: -1.",
        value<int64_t>(&(args_->a.stride[25]), -1) },
      { "", "a.stride[26]",
        "Gett: a.stride[26]. Default: -1.",
        value<int64_t>(&(args_->a.stride[26]), -1) },
      { "", "a.stride[27]",
        "Gett: a.stride[27]. Default: -1.",
        value<int64_t>(&(args_->a.stride[27]), -1) },
      { "", "a.stride[28]",
        "Gett: a.stride[28]. Default: -1.",
        value<int64_t>(&(args_->a.stride[28]), -1) },
      { "", "a.stride[29]",
        "Gett: a.stride[29]. Default: -1.",
        value<int64_t>(&(args_->a.stride[29]), -1) },
      { "", "a.stride[30]",
        "Gett: a.stride[30]. Default: -1.",
        value<int64_t>(&(args_->a.stride[30]), -1) },
      { "", "a.stride[31]",
        "Gett: a.stride[31]. Default: -1.",
        value<int64_t>(&(args_->a.stride[31]), -1) },
      { "", "a.stride[32]",
        "Gett: a.stride[32]. Default: -1.",
        value<int64_t>(&(args_->a.stride[32]), -1) },
      { "", "a.stride[33]",
        "Gett: a.stride[33]. Default: -1.",
        value<int64_t>(&(args_->a.stride[33]), -1) },
      { "", "a.stride[34]",
        "Gett: a.stride[34]. Default: -1.",
        value<int64_t>(&(args_->a.stride[34]), -1) },
      { "", "a.stride[35]",
        "Gett: a.stride[35]. Default: -1.",
        value<int64_t>(&(args_->a.stride[35]), -1) },
      { "", "b.dim[0]",
        "Gett: b.dim[0]. Default: -1.",
        value<int64_t>(&(args_->b.dim[0]), -1) },
      { "", "b.dim[1]",
        "Gett: b.dim[1]. Default: -1.",
        value<int64_t>(&(args_->b.dim[1]), -1) },
      { "", "b.dim[2]",
        "Gett: b.dim[2]. Default: -1.",
        value<int64_t>(&(args_->b.dim[2]), -1) },
      { "", "b.dim[3]",
        "Gett: b.dim[3]. Default: -1.",
        value<int64_t>(&(args_->b.dim[3]), -1) },
      { "", "b.dim[4]",
        "Gett: b.dim[4]. Default: -1.",
        value<int64_t>(&(args_->b.dim[4]), -1) },
      { "", "b.dim[5]",
        "Gett: b.dim[5]. Default: -1.",
        value<int64_t>(&(args_->b.dim[5]), -1) },
      { "", "b.dim[6]",
        "Gett: b.dim[6]. Default: -1.",
        value<int64_t>(&(args_->b.dim[6]), -1) },
      { "", "b.dim[7]",
        "Gett: b.dim[7]. Default: -1.",
        value<int64_t>(&(args_->b.dim[7]), -1) },
      { "", "b.dim[8]",
        "Gett: b.dim[8]. Default: -1.",
        value<int64_t>(&(args_->b.dim[8]), -1) },
      { "", "b.dim[9]",
        "Gett: b.dim[9]. Default: -1.",
        value<int64_t>(&(args_->b.dim[9]), -1) },
      { "", "b.dim[10]",
        "Gett: b.dim[10]. Default: -1.",
        value<int64_t>(&(args_->b.dim[10]), -1) },
      { "", "b.dim[11]",
        "Gett: b.dim[11]. Default: -1.",
        value<int64_t>(&(args_->b.dim[11]), -1) },
      { "", "b.dim[12]",
        "Gett: b.dim[12]. Default: -1.",
        value<int64_t>(&(args_->b.dim[12]), -1) },
      { "", "b.dim[13]",
        "Gett: b.dim[13]. Default: -1.",
        value<int64_t>(&(args_->b.dim[13]), -1) },
      { "", "b.dim[14]",
        "Gett: b.dim[14]. Default: -1.",
        value<int64_t>(&(args_->b.dim[14]), -1) },
      { "", "b.dim[15]",
        "Gett: b.dim[15]. Default: -1.",
        value<int64_t>(&(args_->b.dim[15]), -1) },
      { "", "b.dim[16]",
        "Gett: b.dim[16]. Default: -1.",
        value<int64_t>(&(args_->b.dim[16]), -1) },
      { "", "b.dim[17]",
        "Gett: b.dim[17]. Default: -1.",
        value<int64_t>(&(args_->b.dim[17]), -1) },
      { "", "b.dim[18]",
        "Gett: b.dim[18]. Default: -1.",
        value<int64_t>(&(args_->b.dim[18]), -1) },
      { "", "b.dim[19]",
        "Gett: b.dim[19]. Default: -1.",
        value<int64_t>(&(args_->b.dim[19]), -1) },
      { "", "b.dim[20]",
        "Gett: b.dim[20]. Default: -1.",
        value<int64_t>(&(args_->b.dim[20]), -1) },
      { "", "b.dim[21]",
        "Gett: b.dim[21]. Default: -1.",
        value<int64_t>(&(args_->b.dim[21]), -1) },
      { "", "b.dim[22]",
        "Gett: b.dim[22]. Default: -1.",
        value<int64_t>(&(args_->b.dim[22]), -1) },
      { "", "b.dim[23]",
        "Gett: b.dim[23]. Default: -1.",
        value<int64_t>(&(args_->b.dim[23]), -1) },
      { "", "b.dim[24]",
        "Gett: b.dim[24]. Default: -1.",
        value<int64_t>(&(args_->b.dim[24]), -1) },
      { "", "b.dim[25]",
        "Gett: b.dim[25]. Default: -1.",
        value<int64_t>(&(args_->b.dim[25]), -1) },
      { "", "b.dim[26]",
        "Gett: b.dim[26]. Default: -1.",
        value<int64_t>(&(args_->b.dim[26]), -1) },
      { "", "b.dim[27]",
        "Gett: b.dim[27]. Default: -1.",
        value<int64_t>(&(args_->b.dim[27]), -1) },
      { "", "b.dim[28]",
        "Gett: b.dim[28]. Default: -1.",
        value<int64_t>(&(args_->b.dim[28]), -1) },
      { "", "b.dim[29]",
        "Gett: b.dim[29]. Default: -1.",
        value<int64_t>(&(args_->b.dim[29]), -1) },
      { "", "b.dim[30]",
        "Gett: b.dim[30]. Default: -1.",
        value<int64_t>(&(args_->b.dim[30]), -1) },
      { "", "b.dim[31]",
        "Gett: b.dim[31]. Default: -1.",
        value<int64_t>(&(args_->b.dim[31]), -1) },
      { "", "b.dim[32]",
        "Gett: b.dim[32]. Default: -1.",
        value<int64_t>(&(args_->b.dim[32]), -1) },
      { "", "b.dim[33]",
        "Gett: b.dim[33]. Default: -1.",
        value<int64_t>(&(args_->b.dim[33]), -1) },
      { "", "b.dim[34]",
        "Gett: b.dim[34]. Default: -1.",
        value<int64_t>(&(args_->b.dim[34]), -1) },
      { "", "b.dim[35]",
        "Gett: b.dim[35]. Default: -1.",
        value<int64_t>(&(args_->b.dim[35]), -1) },
      { "", "b.stride[0]",
        "Gett: b.stride[0]. Default: -1.",
        value<int64_t>(&(args_->b.stride[0]), -1) },
      { "", "b.stride[1]",
        "Gett: b.stride[1]. Default: -1.",
        value<int64_t>(&(args_->b.stride[1]), -1) },
      { "", "b.stride[2]",
        "Gett: b.stride[2]. Default: -1.",
        value<int64_t>(&(args_->b.stride[2]), -1) },
      { "", "b.stride[3]",
        "Gett: b.stride[3]. Default: -1.",
        value<int64_t>(&(args_->b.stride[3]), -1) },
      { "", "b.stride[4]",
        "Gett: b.stride[4]. Default: -1.",
        value<int64_t>(&(args_->b.stride[4]), -1) },
      { "", "b.stride[5]",
        "Gett: b.stride[5]. Default: -1.",
        value<int64_t>(&(args_->b.stride[5]), -1) },
      { "", "b.stride[6]",
        "Gett: b.stride[6]. Default: -1.",
        value<int64_t>(&(args_->b.stride[6]), -1) },
      { "", "b.stride[7]",
        "Gett: b.stride[7]. Default: -1.",
        value<int64_t>(&(args_->b.stride[7]), -1) },
      { "", "b.stride[8]",
        "Gett: b.stride[8]. Default: -1.",
        value<int64_t>(&(args_->b.stride[8]), -1) },
      { "", "b.stride[9]",
        "Gett: b.stride[9]. Default: -1.",
        value<int64_t>(&(args_->b.stride[9]), -1) },
      { "", "b.stride[10]",
        "Gett: b.stride[10]. Default: -1.",
        value<int64_t>(&(args_->b.stride[10]), -1) },
      { "", "b.stride[11]",
        "Gett: b.stride[11]. Default: -1.",
        value<int64_t>(&(args_->b.stride[11]), -1) },
      { "", "b.stride[12]",
        "Gett: b.stride[12]. Default: -1.",
        value<int64_t>(&(args_->b.stride[12]), -1) },
      { "", "b.stride[13]",
        "Gett: b.stride[13]. Default: -1.",
        value<int64_t>(&(args_->b.stride[13]), -1) },
      { "", "b.stride[14]",
        "Gett: b.stride[14]. Default: -1.",
        value<int64_t>(&(args_->b.stride[14]), -1) },
      { "", "b.stride[15]",
        "Gett: b.stride[15]. Default: -1.",
        value<int64_t>(&(args_->b.stride[15]), -1) },
      { "", "b.stride[16]",
        "Gett: b.stride[16]. Default: -1.",
        value<int64_t>(&(args_->b.stride[16]), -1) },
      { "", "b.stride[17]",
        "Gett: b.stride[17]. Default: -1.",
        value<int64_t>(&(args_->b.stride[17]), -1) },
      { "", "b.stride[18]",
        "Gett: b.stride[18]. Default: -1.",
        value<int64_t>(&(args_->b.stride[18]), -1) },
      { "", "b.stride[19]",
        "Gett: b.stride[19]. Default: -1.",
        value<int64_t>(&(args_->b.stride[19]), -1) },
      { "", "b.stride[20]",
        "Gett: b.stride[20]. Default: -1.",
        value<int64_t>(&(args_->b.stride[20]), -1) },
      { "", "b.stride[21]",
        "Gett: b.stride[21]. Default: -1.",
        value<int64_t>(&(args_->b.stride[21]), -1) },
      { "", "b.stride[22]",
        "Gett: b.stride[22]. Default: -1.",
        value<int64_t>(&(args_->b.stride[22]), -1) },
      { "", "b.stride[23]",
        "Gett: b.stride[23]. Default: -1.",
        value<int64_t>(&(args_->b.stride[23]), -1) },
      { "", "b.stride[24]",
        "Gett: b.stride[24]. Default: -1.",
        value<int64_t>(&(args_->b.stride[24]), -1) },
      { "", "b.stride[25]",
        "Gett: b.stride[25]. Default: -1.",
        value<int64_t>(&(args_->b.stride[25]), -1) },
      { "", "b.stride[26]",
        "Gett: b.stride[26]. Default: -1.",
        value<int64_t>(&(args_->b.stride[26]), -1) },
      { "", "b.stride[27]",
        "Gett: b.stride[27]. Default: -1.",
        value<int64_t>(&(args_->b.stride[27]), -1) },
      { "", "b.stride[28]",
        "Gett: b.stride[28]. Default: -1.",
        value<int64_t>(&(args_->b.stride[28]), -1) },
      { "", "b.stride[29]",
        "Gett: b.stride[29]. Default: -1.",
        value<int64_t>(&(args_->b.stride[29]), -1) },
      { "", "b.stride[30]",
        "Gett: b.stride[30]. Default: -1.",
        value<int64_t>(&(args_->b.stride[30]), -1) },
      { "", "b.stride[31]",
        "Gett: b.stride[31]. Default: -1.",
        value<int64_t>(&(args_->b.stride[31]), -1) },
      { "", "b.stride[32]",
        "Gett: b.stride[32]. Default: -1.",
        value<int64_t>(&(args_->b.stride[32]), -1) },
      { "", "b.stride[33]",
        "Gett: b.stride[33]. Default: -1.",
        value<int64_t>(&(args_->b.stride[33]), -1) },
      { "", "b.stride[34]",
        "Gett: b.stride[34]. Default: -1.",
        value<int64_t>(&(args_->b.stride[34]), -1) },
      { "", "b.stride[35]",
        "Gett: b.stride[35]. Default: -1.",
        value<int64_t>(&(args_->b.stride[35]), -1) },
      { "", "c.dim[0]",
        "Gett: c.dim[0]. Default: -1.",
        value<int64_t>(&(args_->c.dim[0]), -1) },
      { "", "c.dim[1]",
        "Gett: c.dim[1]. Default: -1.",
        value<int64_t>(&(args_->c.dim[1]), -1) },
      { "", "c.dim[2]",
        "Gett: c.dim[2]. Default: -1.",
        value<int64_t>(&(args_->c.dim[2]), -1) },
      { "", "c.dim[3]",
        "Gett: c.dim[3]. Default: -1.",
        value<int64_t>(&(args_->c.dim[3]), -1) },
      { "", "c.dim[4]",
        "Gett: c.dim[4]. Default: -1.",
        value<int64_t>(&(args_->c.dim[4]), -1) },
      { "", "c.dim[5]",
        "Gett: c.dim[5]. Default: -1.",
        value<int64_t>(&(args_->c.dim[5]), -1) },
      { "", "c.dim[6]",
        "Gett: c.dim[6]. Default: -1.",
        value<int64_t>(&(args_->c.dim[6]), -1) },
      { "", "c.dim[7]",
        "Gett: c.dim[7]. Default: -1.",
        value<int64_t>(&(args_->c.dim[7]), -1) },
      { "", "c.dim[8]",
        "Gett: c.dim[8]. Default: -1.",
        value<int64_t>(&(args_->c.dim[8]), -1) },
      { "", "c.dim[9]",
        "Gett: c.dim[9]. Default: -1.",
        value<int64_t>(&(args_->c.dim[9]), -1) },
      { "", "c.dim[10]",
        "Gett: c.dim[10]. Default: -1.",
        value<int64_t>(&(args_->c.dim[10]), -1) },
      { "", "c.dim[11]",
        "Gett: c.dim[11]. Default: -1.",
        value<int64_t>(&(args_->c.dim[11]), -1) },
      { "", "c.dim[12]",
        "Gett: c.dim[12]. Default: -1.",
        value<int64_t>(&(args_->c.dim[12]), -1) },
      { "", "c.dim[13]",
        "Gett: c.dim[13]. Default: -1.",
        value<int64_t>(&(args_->c.dim[13]), -1) },
      { "", "c.dim[14]",
        "Gett: c.dim[14]. Default: -1.",
        value<int64_t>(&(args_->c.dim[14]), -1) },
      { "", "c.dim[15]",
        "Gett: c.dim[15]. Default: -1.",
        value<int64_t>(&(args_->c.dim[15]), -1) },
      { "", "c.dim[16]",
        "Gett: c.dim[16]. Default: -1.",
        value<int64_t>(&(args_->c.dim[16]), -1) },
      { "", "c.dim[17]",
        "Gett: c.dim[17]. Default: -1.",
        value<int64_t>(&(args_->c.dim[17]), -1) },
      { "", "c.dim[18]",
        "Gett: c.dim[18]. Default: -1.",
        value<int64_t>(&(args_->c.dim[18]), -1) },
      { "", "c.dim[19]",
        "Gett: c.dim[19]. Default: -1.",
        value<int64_t>(&(args_->c.dim[19]), -1) },
      { "", "c.dim[20]",
        "Gett: c.dim[20]. Default: -1.",
        value<int64_t>(&(args_->c.dim[20]), -1) },
      { "", "c.dim[21]",
        "Gett: c.dim[21]. Default: -1.",
        value<int64_t>(&(args_->c.dim[21]), -1) },
      { "", "c.dim[22]",
        "Gett: c.dim[22]. Default: -1.",
        value<int64_t>(&(args_->c.dim[22]), -1) },
      { "", "c.dim[23]",
        "Gett: c.dim[23]. Default: -1.",
        value<int64_t>(&(args_->c.dim[23]), -1) },
      { "", "c.dim[24]",
        "Gett: c.dim[24]. Default: -1.",
        value<int64_t>(&(args_->c.dim[24]), -1) },
      { "", "c.dim[25]",
        "Gett: c.dim[25]. Default: -1.",
        value<int64_t>(&(args_->c.dim[25]), -1) },
      { "", "c.dim[26]",
        "Gett: c.dim[26]. Default: -1.",
        value<int64_t>(&(args_->c.dim[26]), -1) },
      { "", "c.dim[27]",
        "Gett: c.dim[27]. Default: -1.",
        value<int64_t>(&(args_->c.dim[27]), -1) },
      { "", "c.dim[28]",
        "Gett: c.dim[28]. Default: -1.",
        value<int64_t>(&(args_->c.dim[28]), -1) },
      { "", "c.dim[29]",
        "Gett: c.dim[29]. Default: -1.",
        value<int64_t>(&(args_->c.dim[29]), -1) },
      { "", "c.dim[30]",
        "Gett: c.dim[30]. Default: -1.",
        value<int64_t>(&(args_->c.dim[30]), -1) },
      { "", "c.dim[31]",
        "Gett: c.dim[31]. Default: -1.",
        value<int64_t>(&(args_->c.dim[31]), -1) },
      { "", "c.dim[32]",
        "Gett: c.dim[32]. Default: -1.",
        value<int64_t>(&(args_->c.dim[32]), -1) },
      { "", "c.dim[33]",
        "Gett: c.dim[33]. Default: -1.",
        value<int64_t>(&(args_->c.dim[33]), -1) },
      { "", "c.dim[34]",
        "Gett: c.dim[34]. Default: -1.",
        value<int64_t>(&(args_->c.dim[34]), -1) },
      { "", "c.dim[35]",
        "Gett: c.dim[35]. Default: -1.",
        value<int64_t>(&(args_->c.dim[35]), -1) },
      { "", "c.stride[0]",
        "Gett: c.stride[0]. Default: -1.",
        value<int64_t>(&(args_->c.stride[0]), -1) },
      { "", "c.stride[1]",
        "Gett: c.stride[1]. Default: -1.",
        value<int64_t>(&(args_->c.stride[1]), -1) },
      { "", "c.stride[2]",
        "Gett: c.stride[2]. Default: -1.",
        value<int64_t>(&(args_->c.stride[2]), -1) },
      { "", "c.stride[3]",
        "Gett: c.stride[3]. Default: -1.",
        value<int64_t>(&(args_->c.stride[3]), -1) },
      { "", "c.stride[4]",
        "Gett: c.stride[4]. Default: -1.",
        value<int64_t>(&(args_->c.stride[4]), -1) },
      { "", "c.stride[5]",
        "Gett: c.stride[5]. Default: -1.",
        value<int64_t>(&(args_->c.stride[5]), -1) },
      { "", "c.stride[6]",
        "Gett: c.stride[6]. Default: -1.",
        value<int64_t>(&(args_->c.stride[6]), -1) },
      { "", "c.stride[7]",
        "Gett: c.stride[7]. Default: -1.",
        value<int64_t>(&(args_->c.stride[7]), -1) },
      { "", "c.stride[8]",
        "Gett: c.stride[8]. Default: -1.",
        value<int64_t>(&(args_->c.stride[8]), -1) },
      { "", "c.stride[9]",
        "Gett: c.stride[9]. Default: -1.",
        value<int64_t>(&(args_->c.stride[9]), -1) },
      { "", "c.stride[10]",
        "Gett: c.stride[10]. Default: -1.",
        value<int64_t>(&(args_->c.stride[10]), -1) },
      { "", "c.stride[11]",
        "Gett: c.stride[11]. Default: -1.",
        value<int64_t>(&(args_->c.stride[11]), -1) },
      { "", "c.stride[12]",
        "Gett: c.stride[12]. Default: -1.",
        value<int64_t>(&(args_->c.stride[12]), -1) },
      { "", "c.stride[13]",
        "Gett: c.stride[13]. Default: -1.",
        value<int64_t>(&(args_->c.stride[13]), -1) },
      { "", "c.stride[14]",
        "Gett: c.stride[14]. Default: -1.",
        value<int64_t>(&(args_->c.stride[14]), -1) },
      { "", "c.stride[15]",
        "Gett: c.stride[15]. Default: -1.",
        value<int64_t>(&(args_->c.stride[15]), -1) },
      { "", "c.stride[16]",
        "Gett: c.stride[16]. Default: -1.",
        value<int64_t>(&(args_->c.stride[16]), -1) },
      { "", "c.stride[17]",
        "Gett: c.stride[17]. Default: -1.",
        value<int64_t>(&(args_->c.stride[17]), -1) },
      { "", "c.stride[18]",
        "Gett: c.stride[18]. Default: -1.",
        value<int64_t>(&(args_->c.stride[18]), -1) },
      { "", "c.stride[19]",
        "Gett: c.stride[19]. Default: -1.",
        value<int64_t>(&(args_->c.stride[19]), -1) },
      { "", "c.stride[20]",
        "Gett: c.stride[20]. Default: -1.",
        value<int64_t>(&(args_->c.stride[20]), -1) },
      { "", "c.stride[21]",
        "Gett: c.stride[21]. Default: -1.",
        value<int64_t>(&(args_->c.stride[21]), -1) },
      { "", "c.stride[22]",
        "Gett: c.stride[22]. Default: -1.",
        value<int64_t>(&(args_->c.stride[22]), -1) },
      { "", "c.stride[23]",
        "Gett: c.stride[23]. Default: -1.",
        value<int64_t>(&(args_->c.stride[23]), -1) },
      { "", "c.stride[24]",
        "Gett: c.stride[24]. Default: -1.",
        value<int64_t>(&(args_->c.stride[24]), -1) },
      { "", "c.stride[25]",
        "Gett: c.stride[25]. Default: -1.",
        value<int64_t>(&(args_->c.stride[25]), -1) },
      { "", "c.stride[26]",
        "Gett: c.stride[26]. Default: -1.",
        value<int64_t>(&(args_->c.stride[26]), -1) },
      { "", "c.stride[27]",
        "Gett: c.stride[27]. Default: -1.",
        value<int64_t>(&(args_->c.stride[27]), -1) },
      { "", "c.stride[28]",
        "Gett: c.stride[28]. Default: -1.",
        value<int64_t>(&(args_->c.stride[28]), -1) },
      { "", "c.stride[29]",
        "Gett: c.stride[29]. Default: -1.",
        value<int64_t>(&(args_->c.stride[29]), -1) },
      { "", "c.stride[30]",
        "Gett: c.stride[30]. Default: -1.",
        value<int64_t>(&(args_->c.stride[30]), -1) },
      { "", "c.stride[31]",
        "Gett: c.stride[31]. Default: -1.",
        value<int64_t>(&(args_->c.stride[31]), -1) },
      { "", "c.stride[32]",
        "Gett: c.stride[32]. Default: -1.",
        value<int64_t>(&(args_->c.stride[32]), -1) },
      { "", "c.stride[33]",
        "Gett: c.stride[33]. Default: -1.",
        value<int64_t>(&(args_->c.stride[33]), -1) },
      { "", "c.stride[34]",
        "Gett: c.stride[34]. Default: -1.",
        value<int64_t>(&(args_->c.stride[34]), -1) },
      { "", "c.stride[35]",
        "Gett: c.stride[35]. Default: -1.",
        value<int64_t>(&(args_->c.stride[35]), -1) },
      { "", "d.dim[0]",
        "Gett: d.dim[0]. Default: -1.",
        value<int64_t>(&(args_->d.dim[0]), -1) },
      { "", "d.dim[1]",
        "Gett: d.dim[1]. Default: -1.",
        value<int64_t>(&(args_->d.dim[1]), -1) },
      { "", "d.dim[2]",
        "Gett: d.dim[2]. Default: -1.",
        value<int64_t>(&(args_->d.dim[2]), -1) },
      { "", "d.dim[3]",
        "Gett: d.dim[3]. Default: -1.",
        value<int64_t>(&(args_->d.dim[3]), -1) },
      { "", "d.dim[4]",
        "Gett: d.dim[4]. Default: -1.",
        value<int64_t>(&(args_->d.dim[4]), -1) },
      { "", "d.dim[5]",
        "Gett: d.dim[5]. Default: -1.",
        value<int64_t>(&(args_->d.dim[5]), -1) },
      { "", "d.dim[6]",
        "Gett: d.dim[6]. Default: -1.",
        value<int64_t>(&(args_->d.dim[6]), -1) },
      { "", "d.dim[7]",
        "Gett: d.dim[7]. Default: -1.",
        value<int64_t>(&(args_->d.dim[7]), -1) },
      { "", "d.dim[8]",
        "Gett: d.dim[8]. Default: -1.",
        value<int64_t>(&(args_->d.dim[8]), -1) },
      { "", "d.dim[9]",
        "Gett: d.dim[9]. Default: -1.",
        value<int64_t>(&(args_->d.dim[9]), -1) },
      { "", "d.dim[10]",
        "Gett: d.dim[10]. Default: -1.",
        value<int64_t>(&(args_->d.dim[10]), -1) },
      { "", "d.dim[11]",
        "Gett: d.dim[11]. Default: -1.",
        value<int64_t>(&(args_->d.dim[11]), -1) },
      { "", "d.dim[12]",
        "Gett: d.dim[12]. Default: -1.",
        value<int64_t>(&(args_->d.dim[12]), -1) },
      { "", "d.dim[13]",
        "Gett: d.dim[13]. Default: -1.",
        value<int64_t>(&(args_->d.dim[13]), -1) },
      { "", "d.dim[14]",
        "Gett: d.dim[14]. Default: -1.",
        value<int64_t>(&(args_->d.dim[14]), -1) },
      { "", "d.dim[15]",
        "Gett: d.dim[15]. Default: -1.",
        value<int64_t>(&(args_->d.dim[15]), -1) },
      { "", "d.dim[16]",
        "Gett: d.dim[16]. Default: -1.",
        value<int64_t>(&(args_->d.dim[16]), -1) },
      { "", "d.dim[17]",
        "Gett: d.dim[17]. Default: -1.",
        value<int64_t>(&(args_->d.dim[17]), -1) },
      { "", "d.dim[18]",
        "Gett: d.dim[18]. Default: -1.",
        value<int64_t>(&(args_->d.dim[18]), -1) },
      { "", "d.dim[19]",
        "Gett: d.dim[19]. Default: -1.",
        value<int64_t>(&(args_->d.dim[19]), -1) },
      { "", "d.dim[20]",
        "Gett: d.dim[20]. Default: -1.",
        value<int64_t>(&(args_->d.dim[20]), -1) },
      { "", "d.dim[21]",
        "Gett: d.dim[21]. Default: -1.",
        value<int64_t>(&(args_->d.dim[21]), -1) },
      { "", "d.dim[22]",
        "Gett: d.dim[22]. Default: -1.",
        value<int64_t>(&(args_->d.dim[22]), -1) },
      { "", "d.dim[23]",
        "Gett: d.dim[23]. Default: -1.",
        value<int64_t>(&(args_->d.dim[23]), -1) },
      { "", "d.dim[24]",
        "Gett: d.dim[24]. Default: -1.",
        value<int64_t>(&(args_->d.dim[24]), -1) },
      { "", "d.dim[25]",
        "Gett: d.dim[25]. Default: -1.",
        value<int64_t>(&(args_->d.dim[25]), -1) },
      { "", "d.dim[26]",
        "Gett: d.dim[26]. Default: -1.",
        value<int64_t>(&(args_->d.dim[26]), -1) },
      { "", "d.dim[27]",
        "Gett: d.dim[27]. Default: -1.",
        value<int64_t>(&(args_->d.dim[27]), -1) },
      { "", "d.dim[28]",
        "Gett: d.dim[28]. Default: -1.",
        value<int64_t>(&(args_->d.dim[28]), -1) },
      { "", "d.dim[29]",
        "Gett: d.dim[29]. Default: -1.",
        value<int64_t>(&(args_->d.dim[29]), -1) },
      { "", "d.dim[30]",
        "Gett: d.dim[30]. Default: -1.",
        value<int64_t>(&(args_->d.dim[30]), -1) },
      { "", "d.dim[31]",
        "Gett: d.dim[31]. Default: -1.",
        value<int64_t>(&(args_->d.dim[31]), -1) },
      { "", "d.dim[32]",
        "Gett: d.dim[32]. Default: -1.",
        value<int64_t>(&(args_->d.dim[32]), -1) },
      { "", "d.dim[33]",
        "Gett: d.dim[33]. Default: -1.",
        value<int64_t>(&(args_->d.dim[33]), -1) },
      { "", "d.dim[34]",
        "Gett: d.dim[34]. Default: -1.",
        value<int64_t>(&(args_->d.dim[34]), -1) },
      { "", "d.dim[35]",
        "Gett: d.dim[35]. Default: -1.",
        value<int64_t>(&(args_->d.dim[35]), -1) },
      { "", "d.stride[0]",
        "Gett: d.stride[0]. Default: -1.",
        value<int64_t>(&(args_->d.stride[0]), -1) },
      { "", "d.stride[1]",
        "Gett: d.stride[1]. Default: -1.",
        value<int64_t>(&(args_->d.stride[1]), -1) },
      { "", "d.stride[2]",
        "Gett: d.stride[2]. Default: -1.",
        value<int64_t>(&(args_->d.stride[2]), -1) },
      { "", "d.stride[3]",
        "Gett: d.stride[3]. Default: -1.",
        value<int64_t>(&(args_->d.stride[3]), -1) },
      { "", "d.stride[4]",
        "Gett: d.stride[4]. Default: -1.",
        value<int64_t>(&(args_->d.stride[4]), -1) },
      { "", "d.stride[5]",
        "Gett: d.stride[5]. Default: -1.",
        value<int64_t>(&(args_->d.stride[5]), -1) },
      { "", "d.stride[6]",
        "Gett: d.stride[6]. Default: -1.",
        value<int64_t>(&(args_->d.stride[6]), -1) },
      { "", "d.stride[7]",
        "Gett: d.stride[7]. Default: -1.",
        value<int64_t>(&(args_->d.stride[7]), -1) },
      { "", "d.stride[8]",
        "Gett: d.stride[8]. Default: -1.",
        value<int64_t>(&(args_->d.stride[8]), -1) },
      { "", "d.stride[9]",
        "Gett: d.stride[9]. Default: -1.",
        value<int64_t>(&(args_->d.stride[9]), -1) },
      { "", "d.stride[10]",
        "Gett: d.stride[10]. Default: -1.",
        value<int64_t>(&(args_->d.stride[10]), -1) },
      { "", "d.stride[11]",
        "Gett: d.stride[11]. Default: -1.",
        value<int64_t>(&(args_->d.stride[11]), -1) },
      { "", "d.stride[12]",
        "Gett: d.stride[12]. Default: -1.",
        value<int64_t>(&(args_->d.stride[12]), -1) },
      { "", "d.stride[13]",
        "Gett: d.stride[13]. Default: -1.",
        value<int64_t>(&(args_->d.stride[13]), -1) },
      { "", "d.stride[14]",
        "Gett: d.stride[14]. Default: -1.",
        value<int64_t>(&(args_->d.stride[14]), -1) },
      { "", "d.stride[15]",
        "Gett: d.stride[15]. Default: -1.",
        value<int64_t>(&(args_->d.stride[15]), -1) },
      { "", "d.stride[16]",
        "Gett: d.stride[16]. Default: -1.",
        value<int64_t>(&(args_->d.stride[16]), -1) },
      { "", "d.stride[17]",
        "Gett: d.stride[17]. Default: -1.",
        value<int64_t>(&(args_->d.stride[17]), -1) },
      { "", "d.stride[18]",
        "Gett: d.stride[18]. Default: -1.",
        value<int64_t>(&(args_->d.stride[18]), -1) },
      { "", "d.stride[19]",
        "Gett: d.stride[19]. Default: -1.",
        value<int64_t>(&(args_->d.stride[19]), -1) },
      { "", "d.stride[20]",
        "Gett: d.stride[20]. Default: -1.",
        value<int64_t>(&(args_->d.stride[20]), -1) },
      { "", "d.stride[21]",
        "Gett: d.stride[21]. Default: -1.",
        value<int64_t>(&(args_->d.stride[21]), -1) },
      { "", "d.stride[22]",
        "Gett: d.stride[22]. Default: -1.",
        value<int64_t>(&(args_->d.stride[22]), -1) },
      { "", "d.stride[23]",
        "Gett: d.stride[23]. Default: -1.",
        value<int64_t>(&(args_->d.stride[23]), -1) },
      { "", "d.stride[24]",
        "Gett: d.stride[24]. Default: -1.",
        value<int64_t>(&(args_->d.stride[24]), -1) },
      { "", "d.stride[25]",
        "Gett: d.stride[25]. Default: -1.",
        value<int64_t>(&(args_->d.stride[25]), -1) },
      { "", "d.stride[26]",
        "Gett: d.stride[26]. Default: -1.",
        value<int64_t>(&(args_->d.stride[26]), -1) },
      { "", "d.stride[27]",
        "Gett: d.stride[27]. Default: -1.",
        value<int64_t>(&(args_->d.stride[27]), -1) },
      { "", "d.stride[28]",
        "Gett: d.stride[28]. Default: -1.",
        value<int64_t>(&(args_->d.stride[28]), -1) },
      { "", "d.stride[29]",
        "Gett: d.stride[29]. Default: -1.",
        value<int64_t>(&(args_->d.stride[29]), -1) },
      { "", "d.stride[30]",
        "Gett: d.stride[30]. Default: -1.",
        value<int64_t>(&(args_->d.stride[30]), -1) },
      { "", "d.stride[31]",
        "Gett: d.stride[31]. Default: -1.",
        value<int64_t>(&(args_->d.stride[31]), -1) },
      { "", "d.stride[32]",
        "Gett: d.stride[32]. Default: -1.",
        value<int64_t>(&(args_->d.stride[32]), -1) },
      { "", "d.stride[33]",
        "Gett: d.stride[33]. Default: -1.",
        value<int64_t>(&(args_->d.stride[33]), -1) },
      { "", "d.stride[34]",
        "Gett: d.stride[34]. Default: -1.",
        value<int64_t>(&(args_->d.stride[34]), -1) },
      { "", "d.stride[35]",
        "Gett: d.stride[35]. Default: -1.",
        value<int64_t>(&(args_->d.stride[35]), -1) },
      { "", "num_modes_l",
        "Gett: num_modes_l. Default: 1.",
        value<int32_t>(&(args_->num_modes_l), 1) },
      { "", "num_modes_m",
        "Gett: num_modes_m. Default: 1.",
        value<int32_t>(&(args_->num_modes_m), 1) },
      { "", "num_modes_n",
        "Gett: num_modes_n. Default: 1.",
        value<int32_t>(&(args_->num_modes_n), 1) },
      { "", "num_modes_k",
        "Gett: num_modes_k. Default: 1.",
        value<int32_t>(&(args_->num_modes_k), 1) },
      { "", "alpha",
        "Gett: alpha. Default: 1.0.",
        value<float>(&(args_->alpha), 1.0) },
      { "", "beta",
        "Gett: beta. Default: 0.0.",
        value<float>(&(args_->beta), 0.0) },
      { "", "split_k.slices",
        "Gett: split_k.slices. Default: 1.",
        value<int32_t>(&(args_->split_k.slices), 1) },
      { "", "split_k.kernels",
        "Gett: split_k.kernels. Default: 1.",
        value<int32_t>(&(args_->split_k.kernels), 1) },
      { "", "split_k.buffers",
        "Gett: split_k.buffers. Default: 0.",
        value<int32_t>(&(args_->split_k.buffers), 0) },
      { "", "segment_k.split1",
        "Gett: segment_k.split1. Default: -1.",
        value<int32_t>(&(args_->segment_k.split1), -1) },
      { "", "segment_k.split2",
        "Gett: segment_k.split2. Default: -1.",
        value<int32_t>(&(args_->segment_k.split2), -1) },
      { "", "segment_k.factor1",
        "Gett: segment_k.factor1. Default: -1.",
        value<int32_t>(&(args_->segment_k.factor1), -1) },
      { "", "segment_k.factor2",
        "Gett: segment_k.factor2. Default: -1.",
        value<int32_t>(&(args_->segment_k.factor2), -1) },
      { "", "segment_k.gmem_limit",
        "Gett: segment_k.gmem_limit. Default: -1.",
        value<int64_t>(&(args_->segment_k.gmem_limit), -1) },
      { "", "segment_k.k_min",
        "Gett: segment_k.k_min. Default: -1.",
        value<int32_t>(&(args_->segment_k.k_min), -1) },
      { "", "segment_k.factor_min",
        "Gett: segment_k.factor_min. Default: -1.",
        value<int32_t>(&(args_->segment_k.factor_min), -1) },
      { "", "segment_k.factor_max",
        "Gett: segment_k.factor_max. Default: -1.",
        value<int32_t>(&(args_->segment_k.factor_max), -1) },
      { "", "a.fill", "Gett: a.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "b.fill", "Gett: b.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "c.fill", "Gett: c.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "d.fill", "Gett: d.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "d.ref.fill", "Gett: d.ref.fill",
        value<FillMode>(nullptr, FillMode()) },
    };

    this->add_options(options);
  }

  ~ArgParser() {}

  const Arguments *arguments() const { return args_; }

  void deleteArguments() { if (args_) delete args_; }

  int parse(const int argc, const char *argv[], bool fail_on_bad_opt = true) {
    int parsed_args = cask::tester::parse(argc, argv, this->param_desc(), fail_on_bad_opt);

    // Update arguments for consistence
    args_->a.dimensions = args_->num_modes_m + args_->num_modes_l + args_->num_modes_k;
    args_->b.dimensions = args_->num_modes_n + args_->num_modes_l + args_->num_modes_k;
    args_->c.dimensions = args_->num_modes_n + args_->num_modes_m + args_->num_modes_l;
    args_->d.dimensions = args_->num_modes_n + args_->num_modes_m + args_->num_modes_l;

    this->finalize();

    return parsed_args;
  }

  virtual void finalize() { }

private:
    Arguments *args_;
};


template<>
class ArgParser<cask_plugin::AddMul4> : public cask::tester::ArgParser {
public:
  using Arguments = cask_plugin::AddMul4;

  ArgParser(void *args_data) : cask::tester::ArgParser(args_data) {
    assert((args_data != nullptr) && "Must allocate buffer for arguments");
    this->args_ = reinterpret_cast<Arguments *>(args_data);

    using cask::tester::value;
    using cask::tester::FillMode;
    std::vector<cask::tester::ParamDesc::Param> options{
      
      { "", "a.dim[0]",
        "AddMul4: a.dim[0]. Default: -1.",
        value<int64_t>(&(args_->a.dim[0]), -1) },
      { "", "a.dim[1]",
        "AddMul4: a.dim[1]. Default: -1.",
        value<int64_t>(&(args_->a.dim[1]), -1) },
      { "", "a.dim[2]",
        "AddMul4: a.dim[2]. Default: -1.",
        value<int64_t>(&(args_->a.dim[2]), -1) },
      { "", "a.dim[3]",
        "AddMul4: a.dim[3]. Default: -1.",
        value<int64_t>(&(args_->a.dim[3]), -1) },
      { "", "a.dim[4]",
        "AddMul4: a.dim[4]. Default: -1.",
        value<int64_t>(&(args_->a.dim[4]), -1) },
      { "", "a.dim[5]",
        "AddMul4: a.dim[5]. Default: -1.",
        value<int64_t>(&(args_->a.dim[5]), -1) },
      { "", "a.dim[6]",
        "AddMul4: a.dim[6]. Default: -1.",
        value<int64_t>(&(args_->a.dim[6]), -1) },
      { "", "a.dim[7]",
        "AddMul4: a.dim[7]. Default: -1.",
        value<int64_t>(&(args_->a.dim[7]), -1) },
      { "", "a.stride[0]",
        "AddMul4: a.stride[0]. Default: -1.",
        value<int64_t>(&(args_->a.stride[0]), -1) },
      { "", "a.stride[1]",
        "AddMul4: a.stride[1]. Default: -1.",
        value<int64_t>(&(args_->a.stride[1]), -1) },
      { "", "a.stride[2]",
        "AddMul4: a.stride[2]. Default: -1.",
        value<int64_t>(&(args_->a.stride[2]), -1) },
      { "", "a.stride[3]",
        "AddMul4: a.stride[3]. Default: -1.",
        value<int64_t>(&(args_->a.stride[3]), -1) },
      { "", "a.stride[4]",
        "AddMul4: a.stride[4]. Default: -1.",
        value<int64_t>(&(args_->a.stride[4]), -1) },
      { "", "a.stride[5]",
        "AddMul4: a.stride[5]. Default: -1.",
        value<int64_t>(&(args_->a.stride[5]), -1) },
      { "", "a.stride[6]",
        "AddMul4: a.stride[6]. Default: -1.",
        value<int64_t>(&(args_->a.stride[6]), -1) },
      { "", "a.stride[7]",
        "AddMul4: a.stride[7]. Default: -1.",
        value<int64_t>(&(args_->a.stride[7]), -1) },
      { "", "b.dim[0]",
        "AddMul4: b.dim[0]. Default: -1.",
        value<int64_t>(&(args_->b.dim[0]), -1) },
      { "", "b.dim[1]",
        "AddMul4: b.dim[1]. Default: -1.",
        value<int64_t>(&(args_->b.dim[1]), -1) },
      { "", "b.dim[2]",
        "AddMul4: b.dim[2]. Default: -1.",
        value<int64_t>(&(args_->b.dim[2]), -1) },
      { "", "b.dim[3]",
        "AddMul4: b.dim[3]. Default: -1.",
        value<int64_t>(&(args_->b.dim[3]), -1) },
      { "", "b.dim[4]",
        "AddMul4: b.dim[4]. Default: -1.",
        value<int64_t>(&(args_->b.dim[4]), -1) },
      { "", "b.dim[5]",
        "AddMul4: b.dim[5]. Default: -1.",
        value<int64_t>(&(args_->b.dim[5]), -1) },
      { "", "b.dim[6]",
        "AddMul4: b.dim[6]. Default: -1.",
        value<int64_t>(&(args_->b.dim[6]), -1) },
      { "", "b.dim[7]",
        "AddMul4: b.dim[7]. Default: -1.",
        value<int64_t>(&(args_->b.dim[7]), -1) },
      { "", "b.stride[0]",
        "AddMul4: b.stride[0]. Default: -1.",
        value<int64_t>(&(args_->b.stride[0]), -1) },
      { "", "b.stride[1]",
        "AddMul4: b.stride[1]. Default: -1.",
        value<int64_t>(&(args_->b.stride[1]), -1) },
      { "", "b.stride[2]",
        "AddMul4: b.stride[2]. Default: -1.",
        value<int64_t>(&(args_->b.stride[2]), -1) },
      { "", "b.stride[3]",
        "AddMul4: b.stride[3]. Default: -1.",
        value<int64_t>(&(args_->b.stride[3]), -1) },
      { "", "b.stride[4]",
        "AddMul4: b.stride[4]. Default: -1.",
        value<int64_t>(&(args_->b.stride[4]), -1) },
      { "", "b.stride[5]",
        "AddMul4: b.stride[5]. Default: -1.",
        value<int64_t>(&(args_->b.stride[5]), -1) },
      { "", "b.stride[6]",
        "AddMul4: b.stride[6]. Default: -1.",
        value<int64_t>(&(args_->b.stride[6]), -1) },
      { "", "b.stride[7]",
        "AddMul4: b.stride[7]. Default: -1.",
        value<int64_t>(&(args_->b.stride[7]), -1) },
      { "", "b.dimensions",
        "AddMul4: b.dimensions. Default: 8.",
        value<int32_t>(&(args_->b.dimensions), 8) },
      { "", "c.dim[0]",
        "AddMul4: c.dim[0]. Default: -1.",
        value<int64_t>(&(args_->c.dim[0]), -1) },
      { "", "c.dim[1]",
        "AddMul4: c.dim[1]. Default: -1.",
        value<int64_t>(&(args_->c.dim[1]), -1) },
      { "", "c.dim[2]",
        "AddMul4: c.dim[2]. Default: -1.",
        value<int64_t>(&(args_->c.dim[2]), -1) },
      { "", "c.dim[3]",
        "AddMul4: c.dim[3]. Default: -1.",
        value<int64_t>(&(args_->c.dim[3]), -1) },
      { "", "c.dim[4]",
        "AddMul4: c.dim[4]. Default: -1.",
        value<int64_t>(&(args_->c.dim[4]), -1) },
      { "", "c.dim[5]",
        "AddMul4: c.dim[5]. Default: -1.",
        value<int64_t>(&(args_->c.dim[5]), -1) },
      { "", "c.dim[6]",
        "AddMul4: c.dim[6]. Default: -1.",
        value<int64_t>(&(args_->c.dim[6]), -1) },
      { "", "c.dim[7]",
        "AddMul4: c.dim[7]. Default: -1.",
        value<int64_t>(&(args_->c.dim[7]), -1) },
      { "", "c.stride[0]",
        "AddMul4: c.stride[0]. Default: -1.",
        value<int64_t>(&(args_->c.stride[0]), -1) },
      { "", "c.stride[1]",
        "AddMul4: c.stride[1]. Default: -1.",
        value<int64_t>(&(args_->c.stride[1]), -1) },
      { "", "c.stride[2]",
        "AddMul4: c.stride[2]. Default: -1.",
        value<int64_t>(&(args_->c.stride[2]), -1) },
      { "", "c.stride[3]",
        "AddMul4: c.stride[3]. Default: -1.",
        value<int64_t>(&(args_->c.stride[3]), -1) },
      { "", "c.stride[4]",
        "AddMul4: c.stride[4]. Default: -1.",
        value<int64_t>(&(args_->c.stride[4]), -1) },
      { "", "c.stride[5]",
        "AddMul4: c.stride[5]. Default: -1.",
        value<int64_t>(&(args_->c.stride[5]), -1) },
      { "", "c.stride[6]",
        "AddMul4: c.stride[6]. Default: -1.",
        value<int64_t>(&(args_->c.stride[6]), -1) },
      { "", "c.stride[7]",
        "AddMul4: c.stride[7]. Default: -1.",
        value<int64_t>(&(args_->c.stride[7]), -1) },
      { "", "c.dimensions",
        "AddMul4: c.dimensions. Default: 8.",
        value<int32_t>(&(args_->c.dimensions), 8) },
      { "", "d.dim[0]",
        "AddMul4: d.dim[0]. Default: -1.",
        value<int64_t>(&(args_->d.dim[0]), -1) },
      { "", "d.dim[1]",
        "AddMul4: d.dim[1]. Default: -1.",
        value<int64_t>(&(args_->d.dim[1]), -1) },
      { "", "d.dim[2]",
        "AddMul4: d.dim[2]. Default: -1.",
        value<int64_t>(&(args_->d.dim[2]), -1) },
      { "", "d.dim[3]",
        "AddMul4: d.dim[3]. Default: -1.",
        value<int64_t>(&(args_->d.dim[3]), -1) },
      { "", "d.dim[4]",
        "AddMul4: d.dim[4]. Default: -1.",
        value<int64_t>(&(args_->d.dim[4]), -1) },
      { "", "d.dim[5]",
        "AddMul4: d.dim[5]. Default: -1.",
        value<int64_t>(&(args_->d.dim[5]), -1) },
      { "", "d.dim[6]",
        "AddMul4: d.dim[6]. Default: -1.",
        value<int64_t>(&(args_->d.dim[6]), -1) },
      { "", "d.dim[7]",
        "AddMul4: d.dim[7]. Default: -1.",
        value<int64_t>(&(args_->d.dim[7]), -1) },
      { "", "d.stride[0]",
        "AddMul4: d.stride[0]. Default: -1.",
        value<int64_t>(&(args_->d.stride[0]), -1) },
      { "", "d.stride[1]",
        "AddMul4: d.stride[1]. Default: -1.",
        value<int64_t>(&(args_->d.stride[1]), -1) },
      { "", "d.stride[2]",
        "AddMul4: d.stride[2]. Default: -1.",
        value<int64_t>(&(args_->d.stride[2]), -1) },
      { "", "d.stride[3]",
        "AddMul4: d.stride[3]. Default: -1.",
        value<int64_t>(&(args_->d.stride[3]), -1) },
      { "", "d.stride[4]",
        "AddMul4: d.stride[4]. Default: -1.",
        value<int64_t>(&(args_->d.stride[4]), -1) },
      { "", "d.stride[5]",
        "AddMul4: d.stride[5]. Default: -1.",
        value<int64_t>(&(args_->d.stride[5]), -1) },
      { "", "d.stride[6]",
        "AddMul4: d.stride[6]. Default: -1.",
        value<int64_t>(&(args_->d.stride[6]), -1) },
      { "", "d.stride[7]",
        "AddMul4: d.stride[7]. Default: -1.",
        value<int64_t>(&(args_->d.stride[7]), -1) },
      { "", "d.dimensions",
        "AddMul4: d.dimensions. Default: 8.",
        value<int32_t>(&(args_->d.dimensions), 8) },
      { "", "y.dim[0]",
        "AddMul4: y.dim[0]. Default: -1.",
        value<int64_t>(&(args_->y.dim[0]), -1) },
      { "", "y.dim[1]",
        "AddMul4: y.dim[1]. Default: -1.",
        value<int64_t>(&(args_->y.dim[1]), -1) },
      { "", "y.dim[2]",
        "AddMul4: y.dim[2]. Default: -1.",
        value<int64_t>(&(args_->y.dim[2]), -1) },
      { "", "y.dim[3]",
        "AddMul4: y.dim[3]. Default: -1.",
        value<int64_t>(&(args_->y.dim[3]), -1) },
      { "", "y.dim[4]",
        "AddMul4: y.dim[4]. Default: -1.",
        value<int64_t>(&(args_->y.dim[4]), -1) },
      { "", "y.dim[5]",
        "AddMul4: y.dim[5]. Default: -1.",
        value<int64_t>(&(args_->y.dim[5]), -1) },
      { "", "y.dim[6]",
        "AddMul4: y.dim[6]. Default: -1.",
        value<int64_t>(&(args_->y.dim[6]), -1) },
      { "", "y.dim[7]",
        "AddMul4: y.dim[7]. Default: -1.",
        value<int64_t>(&(args_->y.dim[7]), -1) },
      { "", "y.stride[0]",
        "AddMul4: y.stride[0]. Default: -1.",
        value<int64_t>(&(args_->y.stride[0]), -1) },
      { "", "y.stride[1]",
        "AddMul4: y.stride[1]. Default: -1.",
        value<int64_t>(&(args_->y.stride[1]), -1) },
      { "", "y.stride[2]",
        "AddMul4: y.stride[2]. Default: -1.",
        value<int64_t>(&(args_->y.stride[2]), -1) },
      { "", "y.stride[3]",
        "AddMul4: y.stride[3]. Default: -1.",
        value<int64_t>(&(args_->y.stride[3]), -1) },
      { "", "y.stride[4]",
        "AddMul4: y.stride[4]. Default: -1.",
        value<int64_t>(&(args_->y.stride[4]), -1) },
      { "", "y.stride[5]",
        "AddMul4: y.stride[5]. Default: -1.",
        value<int64_t>(&(args_->y.stride[5]), -1) },
      { "", "y.stride[6]",
        "AddMul4: y.stride[6]. Default: -1.",
        value<int64_t>(&(args_->y.stride[6]), -1) },
      { "", "y.stride[7]",
        "AddMul4: y.stride[7]. Default: -1.",
        value<int64_t>(&(args_->y.stride[7]), -1) },
      { "", "y.dimensions",
        "AddMul4: y.dimensions. Default: 8.",
        value<int32_t>(&(args_->y.dimensions), 8) },
      { "", "valpha.dim[0]",
        "AddMul4: valpha.dim[0]. Default: -1.",
        value<int64_t>(&(args_->valpha.dim[0]), -1) },
      { "", "valpha.dim[1]",
        "AddMul4: valpha.dim[1]. Default: -1.",
        value<int64_t>(&(args_->valpha.dim[1]), -1) },
      { "", "valpha.dim[2]",
        "AddMul4: valpha.dim[2]. Default: -1.",
        value<int64_t>(&(args_->valpha.dim[2]), -1) },
      { "", "valpha.dim[3]",
        "AddMul4: valpha.dim[3]. Default: -1.",
        value<int64_t>(&(args_->valpha.dim[3]), -1) },
      { "", "valpha.dim[4]",
        "AddMul4: valpha.dim[4]. Default: -1.",
        value<int64_t>(&(args_->valpha.dim[4]), -1) },
      { "", "valpha.dim[5]",
        "AddMul4: valpha.dim[5]. Default: -1.",
        value<int64_t>(&(args_->valpha.dim[5]), -1) },
      { "", "valpha.dim[6]",
        "AddMul4: valpha.dim[6]. Default: -1.",
        value<int64_t>(&(args_->valpha.dim[6]), -1) },
      { "", "valpha.dim[7]",
        "AddMul4: valpha.dim[7]. Default: -1.",
        value<int64_t>(&(args_->valpha.dim[7]), -1) },
      { "", "valpha.stride[0]",
        "AddMul4: valpha.stride[0]. Default: -1.",
        value<int64_t>(&(args_->valpha.stride[0]), -1) },
      { "", "valpha.stride[1]",
        "AddMul4: valpha.stride[1]. Default: -1.",
        value<int64_t>(&(args_->valpha.stride[1]), -1) },
      { "", "valpha.stride[2]",
        "AddMul4: valpha.stride[2]. Default: -1.",
        value<int64_t>(&(args_->valpha.stride[2]), -1) },
      { "", "valpha.stride[3]",
        "AddMul4: valpha.stride[3]. Default: -1.",
        value<int64_t>(&(args_->valpha.stride[3]), -1) },
      { "", "valpha.stride[4]",
        "AddMul4: valpha.stride[4]. Default: -1.",
        value<int64_t>(&(args_->valpha.stride[4]), -1) },
      { "", "valpha.stride[5]",
        "AddMul4: valpha.stride[5]. Default: -1.",
        value<int64_t>(&(args_->valpha.stride[5]), -1) },
      { "", "valpha.stride[6]",
        "AddMul4: valpha.stride[6]. Default: -1.",
        value<int64_t>(&(args_->valpha.stride[6]), -1) },
      { "", "valpha.stride[7]",
        "AddMul4: valpha.stride[7]. Default: -1.",
        value<int64_t>(&(args_->valpha.stride[7]), -1) },
      { "", "valpha.dimensions",
        "AddMul4: valpha.dimensions. Default: 8.",
        value<int32_t>(&(args_->valpha.dimensions), 8) },
      { "", "scaling.scale",
        "AddMul4: scaling.scale. Default: 1.0.",
        value<double>(&(args_->scaling.scale), 1.0) },
      { "", "scaling.scale_imag",
        "AddMul4: scaling.scale_imag. Default: 0.0.",
        value<double>(&(args_->scaling.scale_imag), 0.0) },
      { "", "a.fill", "AddMul4: a.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "b.fill", "AddMul4: b.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "c.fill", "AddMul4: c.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "d.fill", "AddMul4: d.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "y.fill", "AddMul4: y.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "y.ref.fill", "AddMul4: y.ref.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "valpha.fill", "AddMul4: valpha.fill",
        value<FillMode>(nullptr, FillMode()) },
    };

    this->add_options(options);
  }

  ~ArgParser() {}

  const Arguments *arguments() const { return args_; }

  void deleteArguments() { if (args_) delete args_; }

  int parse(const int argc, const char *argv[], bool fail_on_bad_opt = true) {
    int parsed_args = cask::tester::parse(argc, argv, this->param_desc(), fail_on_bad_opt);

    // Update arguments for consistence
    args_->a.dimensions = args_->b.dimensions;
    args_->a.dimensions = args_->c.dimensions;
    args_->a.dimensions = args_->d.dimensions;
    args_->a.dimensions = args_->valpha.dimensions;
    args_->a.dimensions = args_->y.dimensions;

    this->finalize();

    return parsed_args;
  }

  virtual void finalize() { }

private:
    Arguments *args_;
};


template<>
class ArgParser<cask_plugin::ConvBiasReLU> : public cask::tester::ArgParser {
public:
  using Arguments = cask_plugin::ConvBiasReLU;

  ArgParser(void *args_data) : cask::tester::ArgParser(args_data) {
    assert((args_data != nullptr) && "Must allocate buffer for arguments");
    this->args_ = reinterpret_cast<Arguments *>(args_data);

    using cask::tester::value;
    using cask::tester::FillMode;
    std::vector<cask::tester::ParamDesc::Param> options{
      
      { "", "y.depth",
        "ConvBiasReLU: y.depth. Default: 1.",
        value<int64_t>(&(args_->y.depth), 1) },
      { "", "y.height",
        "ConvBiasReLU: y.height. Default: 32.",
        value<int64_t>(&(args_->y.height), 32) },
      { "", "y.width",
        "ConvBiasReLU: y.width. Default: 32.",
        value<int64_t>(&(args_->y.width), 32) },
      { "", "y.channels",
        "ConvBiasReLU: y.channels. Default: 32.",
        value<int64_t>(&(args_->y.channels), 32) },
      { "", "y.batches",
        "ConvBiasReLU: y.batches. Default: 1.",
        value<int64_t>(&(args_->y.batches), 1) },
      { "", "y.stride.depth",
        "ConvBiasReLU: y.stride.depth. Default: -1.",
        value<int64_t>(&(args_->y.stride.depth), -1) },
      { "", "y.stride.height",
        "ConvBiasReLU: y.stride.height. Default: -1.",
        value<int64_t>(&(args_->y.stride.height), -1) },
      { "", "y.stride.width",
        "ConvBiasReLU: y.stride.width. Default: -1.",
        value<int64_t>(&(args_->y.stride.width), -1) },
      { "", "y.stride.channels",
        "ConvBiasReLU: y.stride.channels. Default: -1.",
        value<int64_t>(&(args_->y.stride.channels), -1) },
      { "", "y.stride.batches",
        "ConvBiasReLU: y.stride.batches. Default: -1.",
        value<int64_t>(&(args_->y.stride.batches), -1) },
      { "", "x.depth",
        "ConvBiasReLU: x.depth. Default: 1.",
        value<int64_t>(&(args_->x.depth), 1) },
      { "", "x.height",
        "ConvBiasReLU: x.height. Default: 32.",
        value<int64_t>(&(args_->x.height), 32) },
      { "", "x.width",
        "ConvBiasReLU: x.width. Default: 32.",
        value<int64_t>(&(args_->x.width), 32) },
      { "", "x.channels",
        "ConvBiasReLU: x.channels. Default: 32.",
        value<int64_t>(&(args_->x.channels), 32) },
      { "", "x.batches",
        "ConvBiasReLU: x.batches. Default: 1.",
        value<int64_t>(&(args_->x.batches), 1) },
      { "", "x.stride.depth",
        "ConvBiasReLU: x.stride.depth. Default: -1.",
        value<int64_t>(&(args_->x.stride.depth), -1) },
      { "", "x.stride.height",
        "ConvBiasReLU: x.stride.height. Default: -1.",
        value<int64_t>(&(args_->x.stride.height), -1) },
      { "", "x.stride.width",
        "ConvBiasReLU: x.stride.width. Default: -1.",
        value<int64_t>(&(args_->x.stride.width), -1) },
      { "", "x.stride.channels",
        "ConvBiasReLU: x.stride.channels. Default: -1.",
        value<int64_t>(&(args_->x.stride.channels), -1) },
      { "", "x.stride.batches",
        "ConvBiasReLU: x.stride.batches. Default: -1.",
        value<int64_t>(&(args_->x.stride.batches), -1) },
      { "", "w.depth",
        "ConvBiasReLU: w.depth. Default: 1.",
        value<int64_t>(&(args_->w.depth), 1) },
      { "", "w.height",
        "ConvBiasReLU: w.height. Default: 3.",
        value<int64_t>(&(args_->w.height), 3) },
      { "", "w.width",
        "ConvBiasReLU: w.width. Default: 3.",
        value<int64_t>(&(args_->w.width), 3) },
      { "", "w.channels",
        "ConvBiasReLU: w.channels. Default: 32.",
        value<int64_t>(&(args_->w.channels), 32) },
      { "", "w.filters",
        "ConvBiasReLU: w.filters. Default: 128.",
        value<int64_t>(&(args_->w.filters), 128) },
      { "", "w.stride.depth",
        "ConvBiasReLU: w.stride.depth. Default: -1.",
        value<int64_t>(&(args_->w.stride.depth), -1) },
      { "", "w.stride.height",
        "ConvBiasReLU: w.stride.height. Default: -1.",
        value<int64_t>(&(args_->w.stride.height), -1) },
      { "", "w.stride.width",
        "ConvBiasReLU: w.stride.width. Default: -1.",
        value<int64_t>(&(args_->w.stride.width), -1) },
      { "", "w.stride.channels",
        "ConvBiasReLU: w.stride.channels. Default: -1.",
        value<int64_t>(&(args_->w.stride.channels), -1) },
      { "", "w.stride.filters",
        "ConvBiasReLU: w.stride.filters. Default: -1.",
        value<int64_t>(&(args_->w.stride.filters), -1) },
      { "", "c.depth",
        "ConvBiasReLU: c.depth. Default: 1.",
        value<int64_t>(&(args_->c.depth), 1) },
      { "", "c.height",
        "ConvBiasReLU: c.height. Default: 32.",
        value<int64_t>(&(args_->c.height), 32) },
      { "", "c.width",
        "ConvBiasReLU: c.width. Default: 32.",
        value<int64_t>(&(args_->c.width), 32) },
      { "", "c.channels",
        "ConvBiasReLU: c.channels. Default: 32.",
        value<int64_t>(&(args_->c.channels), 32) },
      { "", "c.batches",
        "ConvBiasReLU: c.batches. Default: 1.",
        value<int64_t>(&(args_->c.batches), 1) },
      { "", "c.stride.depth",
        "ConvBiasReLU: c.stride.depth. Default: -1.",
        value<int64_t>(&(args_->c.stride.depth), -1) },
      { "", "c.stride.height",
        "ConvBiasReLU: c.stride.height. Default: -1.",
        value<int64_t>(&(args_->c.stride.height), -1) },
      { "", "c.stride.width",
        "ConvBiasReLU: c.stride.width. Default: -1.",
        value<int64_t>(&(args_->c.stride.width), -1) },
      { "", "c.stride.channels",
        "ConvBiasReLU: c.stride.channels. Default: -1.",
        value<int64_t>(&(args_->c.stride.channels), -1) },
      { "", "c.stride.batches",
        "ConvBiasReLU: c.stride.batches. Default: -1.",
        value<int64_t>(&(args_->c.stride.batches), -1) },
      { "", "bias.elems",
        "ConvBiasReLU: bias.elems. Default: 128.",
        value<int64_t>(&(args_->bias.elems), 128) },
      { "", "bias.stride.elems",
        "ConvBiasReLU: bias.stride.elems. Default: -1.",
        value<int64_t>(&(args_->bias.stride.elems), -1) },
      { "", "valpha.elems",
        "ConvBiasReLU: valpha.elems. Default: 128.",
        value<int64_t>(&(args_->valpha.elems), 128) },
      { "", "valpha.stride.elems",
        "ConvBiasReLU: valpha.stride.elems. Default: -1.",
        value<int64_t>(&(args_->valpha.stride.elems), -1) },
      { "", "vbeta.elems",
        "ConvBiasReLU: vbeta.elems. Default: 128.",
        value<int64_t>(&(args_->vbeta.elems), 128) },
      { "", "vbeta.stride.elems",
        "ConvBiasReLU: vbeta.stride.elems. Default: -1.",
        value<int64_t>(&(args_->vbeta.stride.elems), -1) },
      { "", "with_bias",
        "ConvBiasReLU: with_bias. Use --no_with_bias to disable it. Default: false.",
        value<bool>(&(args_->with_bias), false) },
      { "", "apply_relu",
        "ConvBiasReLU: apply_relu. Use --no_apply_relu to disable it. Default: false.",
        value<bool>(&(args_->apply_relu), false) },
      { "", "per_channel_scaling",
        "ConvBiasReLU: per_channel_scaling. Use --no_per_channel_scaling to disable it. Default: false.",
        value<bool>(&(args_->per_channel_scaling), false) },
      { "", "conv.groups",
        "ConvBiasReLU: conv.groups. Default: 1.",
        value<int64_t>(&(args_->conv.groups), 1) },
      { "", "conv.padding_front",
        "ConvBiasReLU: conv.padding_front. Default: 0.",
        value<int64_t>(&(args_->conv.padding_front), 0) },
      { "", "conv.padding_back",
        "ConvBiasReLU: conv.padding_back. Default: 0.",
        value<int64_t>(&(args_->conv.padding_back), 0) },
      { "", "conv.padding_top",
        "ConvBiasReLU: conv.padding_top. Default: 0.",
        value<int64_t>(&(args_->conv.padding_top), 0) },
      { "", "conv.padding_bottom",
        "ConvBiasReLU: conv.padding_bottom. Default: 0.",
        value<int64_t>(&(args_->conv.padding_bottom), 0) },
      { "", "conv.padding_left",
        "ConvBiasReLU: conv.padding_left. Default: 0.",
        value<int64_t>(&(args_->conv.padding_left), 0) },
      { "", "conv.padding_right",
        "ConvBiasReLU: conv.padding_right. Default: 0.",
        value<int64_t>(&(args_->conv.padding_right), 0) },
      { "", "conv.stride_depth",
        "ConvBiasReLU: conv.stride_depth. Default: 1.",
        value<int64_t>(&(args_->conv.stride_depth), 1) },
      { "", "conv.stride_height",
        "ConvBiasReLU: conv.stride_height. Default: 1.",
        value<int64_t>(&(args_->conv.stride_height), 1) },
      { "", "conv.stride_width",
        "ConvBiasReLU: conv.stride_width. Default: 1.",
        value<int64_t>(&(args_->conv.stride_width), 1) },
      { "", "conv.dilation_depth",
        "ConvBiasReLU: conv.dilation_depth. Default: 1.",
        value<int64_t>(&(args_->conv.dilation_depth), 1) },
      { "", "conv.dilation_height",
        "ConvBiasReLU: conv.dilation_height. Default: 1.",
        value<int64_t>(&(args_->conv.dilation_height), 1) },
      { "", "conv.dilation_width",
        "ConvBiasReLU: conv.dilation_width. Default: 1.",
        value<int64_t>(&(args_->conv.dilation_width), 1) },
      { "", "conv.is_xcorrelation",
        "ConvBiasReLU: conv.is_xcorrelation. Use --no_conv.is_xcorrelation to disable it. Default: false.",
        value<bool>(&(args_->conv.is_xcorrelation), false) },
      { "", "relu.relu_lower_bound",
        "ConvBiasReLU: relu.relu_lower_bound. Default: 0.0.",
        value<float>(&(args_->relu.relu_lower_bound), 0.0) },
      { "", "relu.relu_upper_bound",
        "ConvBiasReLU: relu.relu_upper_bound. Default: 4.5.",
        value<float>(&(args_->relu.relu_upper_bound), 4.5) },
      { "", "alpha_scaling.scale",
        "ConvBiasReLU: alpha_scaling.scale. Default: 1.0.",
        value<double>(&(args_->alpha_scaling.scale), 1.0) },
      { "", "alpha_scaling.scale_imag",
        "ConvBiasReLU: alpha_scaling.scale_imag. Default: 0.0.",
        value<double>(&(args_->alpha_scaling.scale_imag), 0.0) },
      { "", "beta_scaling.scale",
        "ConvBiasReLU: beta_scaling.scale. Default: 1.0.",
        value<double>(&(args_->beta_scaling.scale), 1.0) },
      { "", "beta_scaling.scale_imag",
        "ConvBiasReLU: beta_scaling.scale_imag. Default: 0.0.",
        value<double>(&(args_->beta_scaling.scale_imag), 0.0) },
      { "", "y.fill", "ConvBiasReLU: y.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "y.ref.fill", "ConvBiasReLU: y.ref.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "x.fill", "ConvBiasReLU: x.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "w.fill", "ConvBiasReLU: w.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "cask_managed_w", "ConvBiasReLU: Let CASK to manage this tensor Default: false",
        value<bool>(&(args_->cask_managed_w), false) },
      { "", "c.fill", "ConvBiasReLU: c.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "bias.fill", "ConvBiasReLU: bias.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "cask_managed_bias", "ConvBiasReLU: Let CASK to manage this tensor Default: false",
        value<bool>(&(args_->cask_managed_bias), false) },
      { "", "valpha.fill", "ConvBiasReLU: valpha.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "cask_managed_valpha", "ConvBiasReLU: Let CASK to manage this tensor Default: false",
        value<bool>(&(args_->cask_managed_valpha), false) },
      { "", "vbeta.fill", "ConvBiasReLU: vbeta.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "cask_managed_vbeta", "ConvBiasReLU: Let CASK to manage this tensor Default: false",
        value<bool>(&(args_->cask_managed_vbeta), false) },
    };

    this->add_options(options);
  }

  ~ArgParser() {}

  const Arguments *arguments() const { return args_; }

  void deleteArguments() { if (args_) delete args_; }

  int parse(const int argc, const char *argv[], bool fail_on_bad_opt = true) {
    int parsed_args = cask::tester::parse(argc, argv, this->param_desc(), fail_on_bad_opt);

    // Update arguments for consistence
    cask_plugin::toInternalShape(&args_->y)->finalize();
    //args_->y.finalize();
    cask_plugin::toInternalShape(&args_->x)->finalize();
    //args_->x.finalize();
    cask_plugin::toInternalShape(&args_->w)->finalize();
    //args_->w.finalize();
    cask_plugin::toInternalShape(&args_->c)->finalize();
    //args_->c.finalize();
    cask_plugin::toInternalShape(&args_->bias)->finalize();
    //args_->bias.finalize();
    cask_plugin::toInternalShape(&args_->valpha)->finalize();
    //args_->valpha.finalize();
    cask_plugin::toInternalShape(&args_->vbeta)->finalize();
    //args_->vbeta.finalize();

    this->finalize();

    return parsed_args;
  }

  virtual void finalize() { }

private:
    Arguments *args_;
};


template<>
class ArgParser<cask_plugin::GemmBiasReLU> : public cask::tester::ArgParser {
public:
  using Arguments = cask_plugin::GemmBiasReLU;

  ArgParser(void *args_data) : cask::tester::ArgParser(args_data) {
    assert((args_data != nullptr) && "Must allocate buffer for arguments");
    this->args_ = reinterpret_cast<Arguments *>(args_data);

    using cask::tester::value;
    using cask::tester::FillMode;
    std::vector<cask::tester::ParamDesc::Param> options{
      
      { "", "a.batches",
        "GemmBiasReLU: a.batches. Default: 1.",
        value<int64_t>(&(args_->a.batches), 1) },
      { "", "a.rows",
        "GemmBiasReLU: a.rows. Default: 128.",
        value<int64_t>(&(args_->a.rows), 128) },
      { "", "a.stride.batches",
        "GemmBiasReLU: a.stride.batches. Default: -1.",
        value<int64_t>(&(args_->a.stride.batches), -1) },
      { "", "a.stride.rows",
        "GemmBiasReLU: a.stride.rows. Default: -1.",
        value<int64_t>(&(args_->a.stride.rows), -1) },
      { "", "a.stride.cols",
        "GemmBiasReLU: a.stride.cols. Default: -1.",
        value<int64_t>(&(args_->a.stride.cols), -1) },
      { "", "b.rows",
        "GemmBiasReLU: b.rows. Default: 128.",
        value<int64_t>(&(args_->b.rows), 128) },
      { "", "b.cols",
        "GemmBiasReLU: b.cols. Default: 128.",
        value<int64_t>(&(args_->b.cols), 128) },
      { "", "b.stride.batches",
        "GemmBiasReLU: b.stride.batches. Default: -1.",
        value<int64_t>(&(args_->b.stride.batches), -1) },
      { "", "b.stride.rows",
        "GemmBiasReLU: b.stride.rows. Default: -1.",
        value<int64_t>(&(args_->b.stride.rows), -1) },
      { "", "b.stride.cols",
        "GemmBiasReLU: b.stride.cols. Default: -1.",
        value<int64_t>(&(args_->b.stride.cols), -1) },
      { "", "c.stride.batches",
        "GemmBiasReLU: c.stride.batches. Default: -1.",
        value<int64_t>(&(args_->c.stride.batches), -1) },
      { "", "c.stride.rows",
        "GemmBiasReLU: c.stride.rows. Default: -1.",
        value<int64_t>(&(args_->c.stride.rows), -1) },
      { "", "c.stride.cols",
        "GemmBiasReLU: c.stride.cols. Default: -1.",
        value<int64_t>(&(args_->c.stride.cols), -1) },
      { "", "bias.stride.batches",
        "GemmBiasReLU: bias.stride.batches. Default: -1.",
        value<int64_t>(&(args_->bias.stride.batches), -1) },
      { "", "valpha.stride.batches",
        "GemmBiasReLU: valpha.stride.batches. Default: -1.",
        value<int64_t>(&(args_->valpha.stride.batches), -1) },
      { "", "scale_a.stride.batches",
        "GemmBiasReLU: scale_a.stride.batches. Default: -1.",
        value<int64_t>(&(args_->scale_a.stride.batches), -1) },
      { "", "scale_a.stride.rows",
        "GemmBiasReLU: scale_a.stride.rows. Default: -1.",
        value<int64_t>(&(args_->scale_a.stride.rows), -1) },
      { "", "scale_a.stride.cols",
        "GemmBiasReLU: scale_a.stride.cols. Default: -1.",
        value<int64_t>(&(args_->scale_a.stride.cols), -1) },
      { "", "scale_b.stride.batches",
        "GemmBiasReLU: scale_b.stride.batches. Default: -1.",
        value<int64_t>(&(args_->scale_b.stride.batches), -1) },
      { "", "scale_b.stride.rows",
        "GemmBiasReLU: scale_b.stride.rows. Default: -1.",
        value<int64_t>(&(args_->scale_b.stride.rows), -1) },
      { "", "scale_b.stride.cols",
        "GemmBiasReLU: scale_b.stride.cols. Default: -1.",
        value<int64_t>(&(args_->scale_b.stride.cols), -1) },
      { "", "scale_c.stride.batches",
        "GemmBiasReLU: scale_c.stride.batches. Default: -1.",
        value<int64_t>(&(args_->scale_c.stride.batches), -1) },
      { "", "scale_c.stride.rows",
        "GemmBiasReLU: scale_c.stride.rows. Default: -1.",
        value<int64_t>(&(args_->scale_c.stride.rows), -1) },
      { "", "scale_c.stride.cols",
        "GemmBiasReLU: scale_c.stride.cols. Default: -1.",
        value<int64_t>(&(args_->scale_c.stride.cols), -1) },
      { "", "scale_d.stride.batches",
        "GemmBiasReLU: scale_d.stride.batches. Default: -1.",
        value<int64_t>(&(args_->scale_d.stride.batches), -1) },
      { "", "scale_d.stride.rows",
        "GemmBiasReLU: scale_d.stride.rows. Default: -1.",
        value<int64_t>(&(args_->scale_d.stride.rows), -1) },
      { "", "scale_d.stride.cols",
        "GemmBiasReLU: scale_d.stride.cols. Default: -1.",
        value<int64_t>(&(args_->scale_d.stride.cols), -1) },
      { "", "amax_d.stride.batches",
        "GemmBiasReLU: amax_d.stride.batches. Default: -1.",
        value<int64_t>(&(args_->amax_d.stride.batches), -1) },
      { "", "amax_d.stride.rows",
        "GemmBiasReLU: amax_d.stride.rows. Default: -1.",
        value<int64_t>(&(args_->amax_d.stride.rows), -1) },
      { "", "amax_d.stride.cols",
        "GemmBiasReLU: amax_d.stride.cols. Default: -1.",
        value<int64_t>(&(args_->amax_d.stride.cols), -1) },
      { "", "apply_relu",
        "GemmBiasReLU: apply_relu. Use --no_apply_relu to disable it. Default: false.",
        value<bool>(&(args_->apply_relu), false) },
      { "", "with_bias",
        "GemmBiasReLU: with_bias. Use --no_with_bias to disable it. Default: false.",
        value<bool>(&(args_->with_bias), false) },
      { "", "pass_device_pointer",
        "GemmBiasReLU: pass_device_pointer. Use --no_pass_device_pointer to disable it. Default: false.",
        value<bool>(&(args_->pass_device_pointer), false) },
      { "", "split_k.slices",
        "GemmBiasReLU: split_k.slices. Default: 1.",
        value<int32_t>(&(args_->split_k.slices), 1) },
      { "", "split_k.kernels",
        "GemmBiasReLU: split_k.kernels. Default: 1.",
        value<int32_t>(&(args_->split_k.kernels), 1) },
      { "", "split_k.buffers",
        "GemmBiasReLU: split_k.buffers. Default: 0.",
        value<int32_t>(&(args_->split_k.buffers), 0) },
      { "", "segment_k.split1",
        "GemmBiasReLU: segment_k.split1. Default: -1.",
        value<int32_t>(&(args_->segment_k.split1), -1) },
      { "", "segment_k.split2",
        "GemmBiasReLU: segment_k.split2. Default: -1.",
        value<int32_t>(&(args_->segment_k.split2), -1) },
      { "", "segment_k.factor1",
        "GemmBiasReLU: segment_k.factor1. Default: -1.",
        value<int32_t>(&(args_->segment_k.factor1), -1) },
      { "", "segment_k.factor2",
        "GemmBiasReLU: segment_k.factor2. Default: -1.",
        value<int32_t>(&(args_->segment_k.factor2), -1) },
      { "", "segment_k.gmem_limit",
        "GemmBiasReLU: segment_k.gmem_limit. Default: -1.",
        value<int64_t>(&(args_->segment_k.gmem_limit), -1) },
      { "", "segment_k.k_min",
        "GemmBiasReLU: segment_k.k_min. Default: -1.",
        value<int32_t>(&(args_->segment_k.k_min), -1) },
      { "", "segment_k.factor_min",
        "GemmBiasReLU: segment_k.factor_min. Default: -1.",
        value<int32_t>(&(args_->segment_k.factor_min), -1) },
      { "", "segment_k.factor_max",
        "GemmBiasReLU: segment_k.factor_max. Default: -1.",
        value<int32_t>(&(args_->segment_k.factor_max), -1) },
      { "", "array_count",
        "GemmBiasReLU: array_count. Default: 0.",
        value<int64_t>(&(args_->array_count), 0) },
      { "", "per_channel_scaling",
        "GemmBiasReLU: per_channel_scaling. Use --no_per_channel_scaling to disable it. Default: false.",
        value<bool>(&(args_->per_channel_scaling), false) },
      { "", "cga_tile.m",
        "GemmBiasReLU: cga_tile.m. Default: 0.",
        value<int>(&(args_->cga_tile.m), 0) },
      { "", "cga_tile.n",
        "GemmBiasReLU: cga_tile.n. Default: 0.",
        value<int>(&(args_->cga_tile.n), 0) },
      { "", "cga_tile.k",
        "GemmBiasReLU: cga_tile.k. Default: 0.",
        value<int>(&(args_->cga_tile.k), 0) },
      { "", "ctas_per_wave",
        "GemmBiasReLU: ctas_per_wave. Default: 0.",
        value<int64_t>(&(args_->ctas_per_wave), 0) },
      { "", "cta_swizzle",
        "GemmBiasReLU: cta_swizzle. Use --no_cta_swizzle to disable it. Default: false.",
        value<bool>(&(args_->cta_swizzle), false) },
      { "", "runtime_para0",
        "GemmBiasReLU: runtime_para0. Default: 1.0.",
        value<float>(&(args_->runtime_para0), 1.0) },
      { "", "period_mask_ns",
        "GemmBiasReLU: period_mask_ns. Default: 0.",
        value<uint32_t>(&(args_->period_mask_ns), 0) },
      { "", "pulse_ns",
        "GemmBiasReLU: pulse_ns. Default: 0.",
        value<uint32_t>(&(args_->pulse_ns), 0) },
      { "", "min_sleep",
        "GemmBiasReLU: min_sleep. Default: 0.",
        value<uint32_t>(&(args_->min_sleep), 0) },
      { "", "mainloop_count",
        "GemmBiasReLU: mainloop_count. Default: 0.",
        value<uint32_t>(&(args_->mainloop_count), 0) },
      { "", "relu.relu_lower_bound",
        "GemmBiasReLU: relu.relu_lower_bound. Default: 0.0.",
        value<float>(&(args_->relu.relu_lower_bound), 0.0) },
      { "", "relu.relu_upper_bound",
        "GemmBiasReLU: relu.relu_upper_bound. Default: 4.5.",
        value<float>(&(args_->relu.relu_upper_bound), 4.5) },
      { "", "alpha_scaling.scale",
        "GemmBiasReLU: alpha_scaling.scale. Default: 1.0.",
        value<double>(&(args_->alpha_scaling.scale), 1.0) },
      { "", "alpha_scaling.scale_imag",
        "GemmBiasReLU: alpha_scaling.scale_imag. Default: 0.0.",
        value<double>(&(args_->alpha_scaling.scale_imag), 0.0) },
      { "", "beta_scaling.scale",
        "GemmBiasReLU: beta_scaling.scale. Default: 1.0.",
        value<double>(&(args_->beta_scaling.scale), 1.0) },
      { "", "beta_scaling.scale_imag",
        "GemmBiasReLU: beta_scaling.scale_imag. Default: 0.0.",
        value<double>(&(args_->beta_scaling.scale_imag), 0.0) },
      { "", "d.fill", "GemmBiasReLU: d.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "d.ref.fill", "GemmBiasReLU: d.ref.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "a.fill", "GemmBiasReLU: a.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "cask_managed_a", "GemmBiasReLU: Let CASK to manage this tensor Default: false",
        value<bool>(&(args_->cask_managed_a), false) },
      { "", "b.fill", "GemmBiasReLU: b.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "c.fill", "GemmBiasReLU: c.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "bias.fill", "GemmBiasReLU: bias.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "cask_managed_bias", "GemmBiasReLU: Let CASK to manage this tensor Default: false",
        value<bool>(&(args_->cask_managed_bias), false) },
      { "", "valpha.fill", "GemmBiasReLU: valpha.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "cask_managed_valpha", "GemmBiasReLU: Let CASK to manage this tensor Default: false",
        value<bool>(&(args_->cask_managed_valpha), false) },
      { "", "vbeta.fill", "GemmBiasReLU: vbeta.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "cask_managed_vbeta", "GemmBiasReLU: Let CASK to manage this tensor Default: false",
        value<bool>(&(args_->cask_managed_vbeta), false) },
      { "", "scale_a.fill", "GemmBiasReLU: scale_a.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "scale_b.fill", "GemmBiasReLU: scale_b.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "scale_c.fill", "GemmBiasReLU: scale_c.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "scale_d.fill", "GemmBiasReLU: scale_d.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "amax_d.fill", "GemmBiasReLU: amax_d.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "amax_d.ref.fill", "GemmBiasReLU: amax_d.ref.fill",
        value<FillMode>(nullptr, FillMode()) },
    };

    this->add_options(options);
  }

  ~ArgParser() {}

  const Arguments *arguments() const { return args_; }

  void deleteArguments() { if (args_) delete args_; }

  int parse(const int argc, const char *argv[], bool fail_on_bad_opt = true) {
    int parsed_args = cask::tester::parse(argc, argv, this->param_desc(), fail_on_bad_opt);

    // Update arguments for consistence
    args_->a.cols = args_->b.rows;
    args_->c.rows = args_->a.rows;
    args_->c.cols = args_->b.cols;
    args_->d.rows = args_->a.rows;
    args_->d.cols = args_->b.cols;
    args_->b.batches = args_->a.batches;
    args_->c.batches = args_->a.batches;
    args_->d.batches = args_->a.batches;
    args_->d.stride.rows = args_->c.stride.rows;
    args_->d.stride.cols = args_->c.stride.cols;
    args_->d.stride.batches = args_->c.stride.batches;
    args_->bias.rows = args_->a.rows;
    args_->bias.cols = 1;
    args_->bias.batches = args_->a.batches;
    args_->bias.stride.rows = 1;
    args_->bias.stride.cols = args_->bias.rows;
    args_->valpha.rows = (args_->per_channel_scaling ? args_->a.rows : 1);
    args_->valpha.cols = 1;
    args_->valpha.batches = args_->a.batches;
    args_->valpha.stride.rows = 1;
    args_->valpha.stride.cols = args_->valpha.rows;
    args_->vbeta.rows = (args_->per_channel_scaling ? args_->a.rows : 1);
    args_->vbeta.cols = 1;
    args_->vbeta.batches = args_->a.batches;
    args_->vbeta.stride.rows = 1;
    args_->vbeta.stride.cols = args_->vbeta.rows;
    args_->vbeta.stride.batches = args_->valpha.stride.batches;
    args_->scale_a.batches = 1;
    args_->scale_a.rows = 1;
    args_->scale_a.cols = 1;
    args_->scale_b.batches = 1;
    args_->scale_b.rows = 1;
    args_->scale_b.cols = 1;
    args_->scale_c.batches = 1;
    args_->scale_c.rows = 1;
    args_->scale_c.cols = 1;
    args_->scale_d.batches = 1;
    args_->scale_d.rows = 1;
    args_->scale_d.cols = 1;
    args_->amax_d.batches = 1;
    args_->amax_d.rows = 1;
    args_->amax_d.cols = 1;
    cask_plugin::toInternalShape(&args_->d)->finalize();
    //args_->d.finalize();
    cask_plugin::toInternalShape(&args_->a)->finalize();
    //args_->a.finalize();
    cask_plugin::toInternalShape(&args_->b)->finalize();
    //args_->b.finalize();
    cask_plugin::toInternalShape(&args_->c)->finalize();
    //args_->c.finalize();
    cask_plugin::toInternalShape(&args_->bias)->finalize();
    //args_->bias.finalize();
    cask_plugin::toInternalShape(&args_->valpha)->finalize();
    //args_->valpha.finalize();
    cask_plugin::toInternalShape(&args_->vbeta)->finalize();
    //args_->vbeta.finalize();
    cask_plugin::toInternalShape(&args_->scale_a)->finalize();
    //args_->scale_a.finalize();
    cask_plugin::toInternalShape(&args_->scale_b)->finalize();
    //args_->scale_b.finalize();
    cask_plugin::toInternalShape(&args_->scale_c)->finalize();
    //args_->scale_c.finalize();
    cask_plugin::toInternalShape(&args_->scale_d)->finalize();
    //args_->scale_d.finalize();
    cask_plugin::toInternalShape(&args_->amax_d)->finalize();
    //args_->amax_d.finalize();

    this->finalize();

    return parsed_args;
  }

  virtual void finalize() { }

private:
    Arguments *args_;
};


template<>
class ArgParser<cask_plugin::DepSepConv> : public cask::tester::ArgParser {
public:
  using Arguments = cask_plugin::DepSepConv;

  ArgParser(void *args_data) : cask::tester::ArgParser(args_data) {
    assert((args_data != nullptr) && "Must allocate buffer for arguments");
    this->args_ = reinterpret_cast<Arguments *>(args_data);

    using cask::tester::value;
    using cask::tester::FillMode;
    std::vector<cask::tester::ParamDesc::Param> options{
      
      { "", "dep_a.height",
        "DepSepConv: dep_a.height. Default: 32.",
        value<int64_t>(&(args_->dep_a.height), 32) },
      { "", "dep_a.width",
        "DepSepConv: dep_a.width. Default: 32.",
        value<int64_t>(&(args_->dep_a.width), 32) },
      { "", "dep_a.channels",
        "DepSepConv: dep_a.channels. Default: 32.",
        value<int64_t>(&(args_->dep_a.channels), 32) },
      { "", "dep_a.batches",
        "DepSepConv: dep_a.batches. Default: 1.",
        value<int64_t>(&(args_->dep_a.batches), 1) },
      { "", "dep_a.stride.depth",
        "DepSepConv: dep_a.stride.depth. Default: -1.",
        value<int64_t>(&(args_->dep_a.stride.depth), -1) },
      { "", "dep_a.stride.height",
        "DepSepConv: dep_a.stride.height. Default: -1.",
        value<int64_t>(&(args_->dep_a.stride.height), -1) },
      { "", "dep_a.stride.width",
        "DepSepConv: dep_a.stride.width. Default: -1.",
        value<int64_t>(&(args_->dep_a.stride.width), -1) },
      { "", "dep_a.stride.channels",
        "DepSepConv: dep_a.stride.channels. Default: -1.",
        value<int64_t>(&(args_->dep_a.stride.channels), -1) },
      { "", "dep_a.stride.batches",
        "DepSepConv: dep_a.stride.batches. Default: -1.",
        value<int64_t>(&(args_->dep_a.stride.batches), -1) },
      { "", "dep_b.height",
        "DepSepConv: dep_b.height. Default: 3.",
        value<int64_t>(&(args_->dep_b.height), 3) },
      { "", "dep_b.width",
        "DepSepConv: dep_b.width. Default: 3.",
        value<int64_t>(&(args_->dep_b.width), 3) },
      { "", "dep_b.stride.depth",
        "DepSepConv: dep_b.stride.depth. Default: -1.",
        value<int64_t>(&(args_->dep_b.stride.depth), -1) },
      { "", "dep_b.stride.height",
        "DepSepConv: dep_b.stride.height. Default: -1.",
        value<int64_t>(&(args_->dep_b.stride.height), -1) },
      { "", "dep_b.stride.width",
        "DepSepConv: dep_b.stride.width. Default: -1.",
        value<int64_t>(&(args_->dep_b.stride.width), -1) },
      { "", "dep_b.stride.channels",
        "DepSepConv: dep_b.stride.channels. Default: -1.",
        value<int64_t>(&(args_->dep_b.stride.channels), -1) },
      { "", "dep_b.stride.filters",
        "DepSepConv: dep_b.stride.filters. Default: -1.",
        value<int64_t>(&(args_->dep_b.stride.filters), -1) },
      { "", "sep_b.filters",
        "DepSepConv: sep_b.filters. Default: 128.",
        value<int64_t>(&(args_->sep_b.filters), 128) },
      { "", "sep_b.stride.depth",
        "DepSepConv: sep_b.stride.depth. Default: -1.",
        value<int64_t>(&(args_->sep_b.stride.depth), -1) },
      { "", "sep_b.stride.height",
        "DepSepConv: sep_b.stride.height. Default: -1.",
        value<int64_t>(&(args_->sep_b.stride.height), -1) },
      { "", "sep_b.stride.width",
        "DepSepConv: sep_b.stride.width. Default: -1.",
        value<int64_t>(&(args_->sep_b.stride.width), -1) },
      { "", "sep_b.stride.channels",
        "DepSepConv: sep_b.stride.channels. Default: -1.",
        value<int64_t>(&(args_->sep_b.stride.channels), -1) },
      { "", "sep_b.stride.filters",
        "DepSepConv: sep_b.stride.filters. Default: -1.",
        value<int64_t>(&(args_->sep_b.stride.filters), -1) },
      { "", "dep_bias.stride.elems",
        "DepSepConv: dep_bias.stride.elems. Default: -1.",
        value<int64_t>(&(args_->dep_bias.stride.elems), -1) },
      { "", "sep_bias.stride.elems",
        "DepSepConv: sep_bias.stride.elems. Default: -1.",
        value<int64_t>(&(args_->sep_bias.stride.elems), -1) },
      { "", "dep_alpha.stride.elems",
        "DepSepConv: dep_alpha.stride.elems. Default: -1.",
        value<int64_t>(&(args_->dep_alpha.stride.elems), -1) },
      { "", "sep_alpha.stride.elems",
        "DepSepConv: sep_alpha.stride.elems. Default: -1.",
        value<int64_t>(&(args_->sep_alpha.stride.elems), -1) },
      { "", "sep_c.stride.depth",
        "DepSepConv: sep_c.stride.depth. Default: -1.",
        value<int64_t>(&(args_->sep_c.stride.depth), -1) },
      { "", "sep_c.stride.height",
        "DepSepConv: sep_c.stride.height. Default: -1.",
        value<int64_t>(&(args_->sep_c.stride.height), -1) },
      { "", "sep_c.stride.width",
        "DepSepConv: sep_c.stride.width. Default: -1.",
        value<int64_t>(&(args_->sep_c.stride.width), -1) },
      { "", "sep_c.stride.channels",
        "DepSepConv: sep_c.stride.channels. Default: -1.",
        value<int64_t>(&(args_->sep_c.stride.channels), -1) },
      { "", "sep_c.stride.batches",
        "DepSepConv: sep_c.stride.batches. Default: -1.",
        value<int64_t>(&(args_->sep_c.stride.batches), -1) },
      { "", "dep_conv.padding_top",
        "DepSepConv: dep_conv.padding_top. Default: 0.",
        value<int64_t>(&(args_->dep_conv.padding_top), 0) },
      { "", "dep_conv.padding_bottom",
        "DepSepConv: dep_conv.padding_bottom. Default: 0.",
        value<int64_t>(&(args_->dep_conv.padding_bottom), 0) },
      { "", "dep_conv.padding_left",
        "DepSepConv: dep_conv.padding_left. Default: 0.",
        value<int64_t>(&(args_->dep_conv.padding_left), 0) },
      { "", "dep_conv.padding_right",
        "DepSepConv: dep_conv.padding_right. Default: 0.",
        value<int64_t>(&(args_->dep_conv.padding_right), 0) },
      { "", "dep_conv.stride_height",
        "DepSepConv: dep_conv.stride_height. Default: 1.",
        value<int64_t>(&(args_->dep_conv.stride_height), 1) },
      { "", "dep_conv.stride_width",
        "DepSepConv: dep_conv.stride_width. Default: 1.",
        value<int64_t>(&(args_->dep_conv.stride_width), 1) },
      { "", "dep_with_relu",
        "DepSepConv: dep_with_relu. Use --no_dep_with_relu to disable it. Default: false.",
        value<bool>(&(args_->dep_with_relu), false) },
      { "", "dep_relu.relu_lower_bound",
        "DepSepConv: dep_relu.relu_lower_bound. Default: 0.0.",
        value<float>(&(args_->dep_relu.relu_lower_bound), 0.0) },
      { "", "dep_relu.relu_upper_bound",
        "DepSepConv: dep_relu.relu_upper_bound. Default: 4.5.",
        value<float>(&(args_->dep_relu.relu_upper_bound), 4.5) },
      { "", "dep_scale.scale",
        "DepSepConv: dep_scale.scale. Default: 1.0.",
        value<double>(&(args_->dep_scale.scale), 1.0) },
      { "", "dep_scale.scale_imag",
        "DepSepConv: dep_scale.scale_imag. Default: 0.0.",
        value<double>(&(args_->dep_scale.scale_imag), 0.0) },
      { "", "sep_with_relu",
        "DepSepConv: sep_with_relu. Use --no_sep_with_relu to disable it. Default: false.",
        value<bool>(&(args_->sep_with_relu), false) },
      { "", "sep_relu.relu_lower_bound",
        "DepSepConv: sep_relu.relu_lower_bound. Default: 0.0.",
        value<float>(&(args_->sep_relu.relu_lower_bound), 0.0) },
      { "", "sep_relu.relu_upper_bound",
        "DepSepConv: sep_relu.relu_upper_bound. Default: 4.5.",
        value<float>(&(args_->sep_relu.relu_upper_bound), 4.5) },
      { "", "sep_scale.scale",
        "DepSepConv: sep_scale.scale. Default: 1.0.",
        value<double>(&(args_->sep_scale.scale), 1.0) },
      { "", "sep_scale.scale_imag",
        "DepSepConv: sep_scale.scale_imag. Default: 0.0.",
        value<double>(&(args_->sep_scale.scale_imag), 0.0) },
      { "", "dep_a.fill", "DepSepConv: dep_a.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "dep_b.fill", "DepSepConv: dep_b.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "sep_b.fill", "DepSepConv: sep_b.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "dep_bias.fill", "DepSepConv: dep_bias.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "sep_bias.fill", "DepSepConv: sep_bias.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "dep_alpha.fill", "DepSepConv: dep_alpha.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "sep_alpha.fill", "DepSepConv: sep_alpha.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "sep_c.fill", "DepSepConv: sep_c.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "sep_c.ref.fill", "DepSepConv: sep_c.ref.fill",
        value<FillMode>(nullptr, FillMode()) },
    };

    this->add_options(options);
  }

  ~ArgParser() {}

  const Arguments *arguments() const { return args_; }

  void deleteArguments() { if (args_) delete args_; }

  int parse(const int argc, const char *argv[], bool fail_on_bad_opt = true) {
    int parsed_args = cask::tester::parse(argc, argv, this->param_desc(), fail_on_bad_opt);

    // Update arguments for consistence
    args_->dep_b.filters = args_->dep_a.channels;
    args_->dep_b.channels = args_->dep_a.channels;
    args_->dep_alpha.elems = args_->dep_a.channels;
    args_->dep_bias.elems = args_->dep_a.channels;
    args_->dep_conv.groups = args_->dep_a.channels;
    args_->dep_conv.is_xcorrelation = 1;
    args_->dep_conv.dilation_height = 1;
    args_->dep_conv.dilation_width = 1;
    args_->sep_b.channels = args_->dep_a.channels;
    args_->sep_c.channels = args_->sep_b.filters;
    args_->sep_conv.is_xcorrelation = 1;
    args_->sep_alpha.elems = args_->sep_c.channels;
    args_->sep_bias.elems = args_->sep_c.channels;
    args_->sep_b.width = 1;
    args_->sep_b.height = 1;
    args_->sep_conv.groups = 1;
    args_->sep_conv.stride_depth = 1;
    args_->sep_conv.stride_height = 1;
    args_->sep_conv.stride_width = 1;
    args_->sep_conv.dilation_depth = 1;
    args_->sep_conv.dilation_height = 1;
    args_->sep_conv.dilation_width = 1;
    args_->sep_conv.padding_front = 0;
    args_->sep_conv.padding_back = 0;
    args_->sep_conv.padding_top = 0;
    args_->sep_conv.padding_bottom = 0;
    args_->sep_conv.padding_left = 0;
    args_->sep_conv.padding_right = 0;
    args_->sep_c.height = 1 + ((args_->dep_conv.padding_top + args_->dep_conv.padding_bottom + args_->dep_a.height - (args_->dep_conv.dilation_height * (args_->dep_b.height + -1) + 1))/args_->dep_conv.stride_height);
    args_->sep_c.width = 1 + ((args_->dep_conv.padding_right + args_->dep_conv.padding_left + args_->dep_a.width - (args_->dep_conv.dilation_width * (args_->dep_b.width + -1) + 1))/args_->dep_conv.stride_width);
    args_->sep_c.batches = args_->dep_a.batches;
    args_->dep_a.depth = 1;
    args_->dep_conv.padding_front = 0;
    args_->dep_conv.padding_back = 0;
    args_->dep_conv.stride_depth = 1;
    args_->dep_conv.dilation_depth = 1;
    args_->dep_b.depth = args_->dep_a.depth;
    args_->sep_b.depth = args_->dep_a.depth;
    args_->sep_c.depth = args_->dep_a.depth;
    cask_plugin::toInternalShape(&args_->dep_a)->finalize();
    //args_->dep_a.finalize();
    cask_plugin::toInternalShape(&args_->dep_b)->finalize();
    //args_->dep_b.finalize();
    cask_plugin::toInternalShape(&args_->sep_b)->finalize();
    //args_->sep_b.finalize();
    cask_plugin::toInternalShape(&args_->dep_bias)->finalize();
    //args_->dep_bias.finalize();
    cask_plugin::toInternalShape(&args_->sep_bias)->finalize();
    //args_->sep_bias.finalize();
    cask_plugin::toInternalShape(&args_->dep_alpha)->finalize();
    //args_->dep_alpha.finalize();
    cask_plugin::toInternalShape(&args_->sep_alpha)->finalize();
    //args_->sep_alpha.finalize();
    cask_plugin::toInternalShape(&args_->sep_c)->finalize();
    //args_->sep_c.finalize();

    this->finalize();

    return parsed_args;
  }

  virtual void finalize() { }

private:
    Arguments *args_;
};


template<>
class ArgParser<cask_plugin::BnApplyFpropBnStat> : public cask::tester::ArgParser {
public:
  using Arguments = cask_plugin::BnApplyFpropBnStat;

  ArgParser(void *args_data) : cask::tester::ArgParser(args_data) {
    assert((args_data != nullptr) && "Must allocate buffer for arguments");
    this->args_ = reinterpret_cast<Arguments *>(args_data);

    using cask::tester::value;
    using cask::tester::FillMode;
    std::vector<cask::tester::ParamDesc::Param> options{
      
      { "", "y.channels",
        "BnApplyFpropBnStat: y.channels. Default: 32.",
        value<int64_t>(&(args_->y.channels), 32) },
      { "", "y.stride.depth",
        "BnApplyFpropBnStat: y.stride.depth. Default: -1.",
        value<int64_t>(&(args_->y.stride.depth), -1) },
      { "", "y.stride.height",
        "BnApplyFpropBnStat: y.stride.height. Default: -1.",
        value<int64_t>(&(args_->y.stride.height), -1) },
      { "", "y.stride.width",
        "BnApplyFpropBnStat: y.stride.width. Default: -1.",
        value<int64_t>(&(args_->y.stride.width), -1) },
      { "", "y.stride.channels",
        "BnApplyFpropBnStat: y.stride.channels. Default: -1.",
        value<int64_t>(&(args_->y.stride.channels), -1) },
      { "", "y.stride.batches",
        "BnApplyFpropBnStat: y.stride.batches. Default: -1.",
        value<int64_t>(&(args_->y.stride.batches), -1) },
      { "", "x.depth",
        "BnApplyFpropBnStat: x.depth. Default: 1.",
        value<int64_t>(&(args_->x.depth), 1) },
      { "", "x.height",
        "BnApplyFpropBnStat: x.height. Default: 32.",
        value<int64_t>(&(args_->x.height), 32) },
      { "", "x.width",
        "BnApplyFpropBnStat: x.width. Default: 32.",
        value<int64_t>(&(args_->x.width), 32) },
      { "", "x.channels",
        "BnApplyFpropBnStat: x.channels. Default: 32.",
        value<int64_t>(&(args_->x.channels), 32) },
      { "", "x.batches",
        "BnApplyFpropBnStat: x.batches. Default: 1.",
        value<int64_t>(&(args_->x.batches), 1) },
      { "", "x.stride.depth",
        "BnApplyFpropBnStat: x.stride.depth. Default: -1.",
        value<int64_t>(&(args_->x.stride.depth), -1) },
      { "", "x.stride.height",
        "BnApplyFpropBnStat: x.stride.height. Default: -1.",
        value<int64_t>(&(args_->x.stride.height), -1) },
      { "", "x.stride.width",
        "BnApplyFpropBnStat: x.stride.width. Default: -1.",
        value<int64_t>(&(args_->x.stride.width), -1) },
      { "", "x.stride.channels",
        "BnApplyFpropBnStat: x.stride.channels. Default: -1.",
        value<int64_t>(&(args_->x.stride.channels), -1) },
      { "", "x.stride.batches",
        "BnApplyFpropBnStat: x.stride.batches. Default: -1.",
        value<int64_t>(&(args_->x.stride.batches), -1) },
      { "", "w.depth",
        "BnApplyFpropBnStat: w.depth. Default: 1.",
        value<int64_t>(&(args_->w.depth), 1) },
      { "", "w.height",
        "BnApplyFpropBnStat: w.height. Default: 3.",
        value<int64_t>(&(args_->w.height), 3) },
      { "", "w.width",
        "BnApplyFpropBnStat: w.width. Default: 3.",
        value<int64_t>(&(args_->w.width), 3) },
      { "", "w.stride.depth",
        "BnApplyFpropBnStat: w.stride.depth. Default: -1.",
        value<int64_t>(&(args_->w.stride.depth), -1) },
      { "", "w.stride.height",
        "BnApplyFpropBnStat: w.stride.height. Default: -1.",
        value<int64_t>(&(args_->w.stride.height), -1) },
      { "", "w.stride.width",
        "BnApplyFpropBnStat: w.stride.width. Default: -1.",
        value<int64_t>(&(args_->w.stride.width), -1) },
      { "", "w.stride.channels",
        "BnApplyFpropBnStat: w.stride.channels. Default: -1.",
        value<int64_t>(&(args_->w.stride.channels), -1) },
      { "", "w.stride.filters",
        "BnApplyFpropBnStat: w.stride.filters. Default: -1.",
        value<int64_t>(&(args_->w.stride.filters), -1) },
      { "", "c.stride.depth",
        "BnApplyFpropBnStat: c.stride.depth. Default: -1.",
        value<int64_t>(&(args_->c.stride.depth), -1) },
      { "", "c.stride.height",
        "BnApplyFpropBnStat: c.stride.height. Default: -1.",
        value<int64_t>(&(args_->c.stride.height), -1) },
      { "", "c.stride.width",
        "BnApplyFpropBnStat: c.stride.width. Default: -1.",
        value<int64_t>(&(args_->c.stride.width), -1) },
      { "", "c.stride.channels",
        "BnApplyFpropBnStat: c.stride.channels. Default: -1.",
        value<int64_t>(&(args_->c.stride.channels), -1) },
      { "", "c.stride.batches",
        "BnApplyFpropBnStat: c.stride.batches. Default: -1.",
        value<int64_t>(&(args_->c.stride.batches), -1) },
      { "", "bn_res.stride.depth",
        "BnApplyFpropBnStat: bn_res.stride.depth. Default: -1.",
        value<int64_t>(&(args_->bn_res.stride.depth), -1) },
      { "", "bn_res.stride.height",
        "BnApplyFpropBnStat: bn_res.stride.height. Default: -1.",
        value<int64_t>(&(args_->bn_res.stride.height), -1) },
      { "", "bn_res.stride.width",
        "BnApplyFpropBnStat: bn_res.stride.width. Default: -1.",
        value<int64_t>(&(args_->bn_res.stride.width), -1) },
      { "", "bn_res.stride.channels",
        "BnApplyFpropBnStat: bn_res.stride.channels. Default: -1.",
        value<int64_t>(&(args_->bn_res.stride.channels), -1) },
      { "", "bn_res.stride.batches",
        "BnApplyFpropBnStat: bn_res.stride.batches. Default: -1.",
        value<int64_t>(&(args_->bn_res.stride.batches), -1) },
      { "", "bn_res_add_relu_out.stride.depth",
        "BnApplyFpropBnStat: bn_res_add_relu_out.stride.depth. Default: -1.",
        value<int64_t>(&(args_->bn_res_add_relu_out.stride.depth), -1) },
      { "", "bn_res_add_relu_out.stride.height",
        "BnApplyFpropBnStat: bn_res_add_relu_out.stride.height. Default: -1.",
        value<int64_t>(&(args_->bn_res_add_relu_out.stride.height), -1) },
      { "", "bn_res_add_relu_out.stride.width",
        "BnApplyFpropBnStat: bn_res_add_relu_out.stride.width. Default: -1.",
        value<int64_t>(&(args_->bn_res_add_relu_out.stride.width), -1) },
      { "", "bn_res_add_relu_out.stride.channels",
        "BnApplyFpropBnStat: bn_res_add_relu_out.stride.channels. Default: -1.",
        value<int64_t>(&(args_->bn_res_add_relu_out.stride.channels), -1) },
      { "", "bn_res_add_relu_out.stride.batches",
        "BnApplyFpropBnStat: bn_res_add_relu_out.stride.batches. Default: -1.",
        value<int64_t>(&(args_->bn_res_add_relu_out.stride.batches), -1) },
      { "", "bn_scale.stride.elems",
        "BnApplyFpropBnStat: bn_scale.stride.elems. Default: -1.",
        value<int64_t>(&(args_->bn_scale.stride.elems), -1) },
      { "", "bn_bias.stride.elems",
        "BnApplyFpropBnStat: bn_bias.stride.elems. Default: -1.",
        value<int64_t>(&(args_->bn_bias.stride.elems), -1) },
      { "", "bn_res_scale.stride.elems",
        "BnApplyFpropBnStat: bn_res_scale.stride.elems. Default: -1.",
        value<int64_t>(&(args_->bn_res_scale.stride.elems), -1) },
      { "", "bn_res_bias.stride.elems",
        "BnApplyFpropBnStat: bn_res_bias.stride.elems. Default: -1.",
        value<int64_t>(&(args_->bn_res_bias.stride.elems), -1) },
      { "", "bn_mean.stride.elems",
        "BnApplyFpropBnStat: bn_mean.stride.elems. Default: -1.",
        value<int64_t>(&(args_->bn_mean.stride.elems), -1) },
      { "", "bn_inv_stddev.stride.elems",
        "BnApplyFpropBnStat: bn_inv_stddev.stride.elems. Default: -1.",
        value<int64_t>(&(args_->bn_inv_stddev.stride.elems), -1) },
      { "", "bn_sum.stride.elems",
        "BnApplyFpropBnStat: bn_sum.stride.elems. Default: -1.",
        value<int64_t>(&(args_->bn_sum.stride.elems), -1) },
      { "", "bn_sum_of_squares.stride.elems",
        "BnApplyFpropBnStat: bn_sum_of_squares.stride.elems. Default: -1.",
        value<int64_t>(&(args_->bn_sum_of_squares.stride.elems), -1) },
      { "", "bn_bitmask_relu_out.stride.elems",
        "BnApplyFpropBnStat: bn_bitmask_relu_out.stride.elems. Default: -1.",
        value<int64_t>(&(args_->bn_bitmask_relu_out.stride.elems), -1) },
      { "", "conv.padding_front",
        "BnApplyFpropBnStat: conv.padding_front. Default: 0.",
        value<int64_t>(&(args_->conv.padding_front), 0) },
      { "", "conv.padding_back",
        "BnApplyFpropBnStat: conv.padding_back. Default: 0.",
        value<int64_t>(&(args_->conv.padding_back), 0) },
      { "", "conv.padding_top",
        "BnApplyFpropBnStat: conv.padding_top. Default: 0.",
        value<int64_t>(&(args_->conv.padding_top), 0) },
      { "", "conv.padding_bottom",
        "BnApplyFpropBnStat: conv.padding_bottom. Default: 0.",
        value<int64_t>(&(args_->conv.padding_bottom), 0) },
      { "", "conv.padding_left",
        "BnApplyFpropBnStat: conv.padding_left. Default: 0.",
        value<int64_t>(&(args_->conv.padding_left), 0) },
      { "", "conv.padding_right",
        "BnApplyFpropBnStat: conv.padding_right. Default: 0.",
        value<int64_t>(&(args_->conv.padding_right), 0) },
      { "", "conv.stride_depth",
        "BnApplyFpropBnStat: conv.stride_depth. Default: 1.",
        value<int64_t>(&(args_->conv.stride_depth), 1) },
      { "", "conv.stride_height",
        "BnApplyFpropBnStat: conv.stride_height. Default: 1.",
        value<int64_t>(&(args_->conv.stride_height), 1) },
      { "", "conv.stride_width",
        "BnApplyFpropBnStat: conv.stride_width. Default: 1.",
        value<int64_t>(&(args_->conv.stride_width), 1) },
      { "", "conv.dilation_depth",
        "BnApplyFpropBnStat: conv.dilation_depth. Default: 1.",
        value<int64_t>(&(args_->conv.dilation_depth), 1) },
      { "", "conv.dilation_height",
        "BnApplyFpropBnStat: conv.dilation_height. Default: 1.",
        value<int64_t>(&(args_->conv.dilation_height), 1) },
      { "", "conv.dilation_width",
        "BnApplyFpropBnStat: conv.dilation_width. Default: 1.",
        value<int64_t>(&(args_->conv.dilation_width), 1) },
      { "", "conv.is_xcorrelation",
        "BnApplyFpropBnStat: conv.is_xcorrelation. Use --no_conv.is_xcorrelation to disable it. Default: false.",
        value<bool>(&(args_->conv.is_xcorrelation), false) },
      { "", "alpha",
        "BnApplyFpropBnStat: alpha. Default: 1.0.",
        value<double>(&(args_->alpha), 1.0) },
      { "", "beta",
        "BnApplyFpropBnStat: beta. Default: 1.0.",
        value<double>(&(args_->beta), 1.0) },
      { "", "bn_epsilon",
        "BnApplyFpropBnStat: bn_epsilon. Default: 0.01.",
        value<double>(&(args_->bn_epsilon), 0.01) },
      { "", "y.fill", "BnApplyFpropBnStat: y.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "y.ref.fill", "BnApplyFpropBnStat: y.ref.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "x.fill", "BnApplyFpropBnStat: x.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "w.fill", "BnApplyFpropBnStat: w.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "c.fill", "BnApplyFpropBnStat: c.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "bn_res.fill", "BnApplyFpropBnStat: bn_res.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "bn_res_add_relu_out.fill", "BnApplyFpropBnStat: bn_res_add_relu_out.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "bn_res_add_relu_out.ref.fill", "BnApplyFpropBnStat: bn_res_add_relu_out.ref.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "bn_scale.fill", "BnApplyFpropBnStat: bn_scale.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "bn_bias.fill", "BnApplyFpropBnStat: bn_bias.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "bn_res_scale.fill", "BnApplyFpropBnStat: bn_res_scale.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "bn_res_bias.fill", "BnApplyFpropBnStat: bn_res_bias.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "bn_mean.fill", "BnApplyFpropBnStat: bn_mean.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "bn_mean.ref.fill", "BnApplyFpropBnStat: bn_mean.ref.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "bn_inv_stddev.fill", "BnApplyFpropBnStat: bn_inv_stddev.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "bn_inv_stddev.ref.fill", "BnApplyFpropBnStat: bn_inv_stddev.ref.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "bn_sum.fill", "BnApplyFpropBnStat: bn_sum.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "bn_sum.ref.fill", "BnApplyFpropBnStat: bn_sum.ref.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "bn_sum_of_squares.fill", "BnApplyFpropBnStat: bn_sum_of_squares.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "bn_sum_of_squares.ref.fill", "BnApplyFpropBnStat: bn_sum_of_squares.ref.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "bn_bitmask_relu_out.fill", "BnApplyFpropBnStat: bn_bitmask_relu_out.fill",
        value<FillMode>(nullptr, FillMode()) },
      { "", "bn_bitmask_relu_out.ref.fill", "BnApplyFpropBnStat: bn_bitmask_relu_out.ref.fill",
        value<FillMode>(nullptr, FillMode()) },
    };

    this->add_options(options);
  }

  ~ArgParser() {}

  const Arguments *arguments() const { return args_; }

  void deleteArguments() { if (args_) delete args_; }

  int parse(const int argc, const char *argv[], bool fail_on_bad_opt = true) {
    int parsed_args = cask::tester::parse(argc, argv, this->param_desc(), fail_on_bad_opt);

    // Update arguments for consistence
    args_->y.batches = args_->x.batches;
    args_->w.channels = args_->x.channels;
    args_->w.filters = args_->y.channels;
    args_->c.batches = args_->y.batches;
    args_->c.channels = args_->y.channels;
    args_->c.depth = args_->y.depth;
    args_->c.height = args_->y.height;
    args_->c.width = args_->y.width;
    args_->conv.groups = 1;
    args_->bn_res.batches = args_->x.batches;
    args_->bn_res.depth = args_->x.depth;
    args_->bn_res.height = args_->x.height;
    args_->bn_res.width = args_->x.width;
    args_->bn_res.channels = args_->x.channels;
    args_->bn_res_add_relu_out.batches = args_->x.batches;
    args_->bn_res_add_relu_out.depth = args_->x.depth;
    args_->bn_res_add_relu_out.height = args_->x.height;
    args_->bn_res_add_relu_out.width = args_->x.width;
    args_->bn_res_add_relu_out.channels = args_->x.channels;
    args_->bn_scale.elems = args_->x.channels;
    args_->bn_bias.elems = args_->x.channels;
    args_->bn_res_scale.elems = args_->x.channels;
    args_->bn_res_bias.elems = args_->x.channels;
    args_->bn_mean.elems = args_->y.channels;
    args_->bn_inv_stddev.elems = args_->y.channels;
    args_->bn_sum.elems = args_->y.channels;
    args_->bn_sum_of_squares.elems = args_->y.channels;
    args_->bn_bitmask_relu_out.elems = ((args_->x.batches * args_->x.height * args_->x.width - (args_->x.batches * args_->x.height * args_->x.width/16) * 16 > 8 ? 8 : args_->x.batches * args_->x.height * args_->x.width - (args_->x.batches * args_->x.height * args_->x.width/16) * 16) + ((args_->x.batches * args_->x.height * args_->x.width/16) * 16) / 2) * ((args_->x.channels + 63)/64) * 4;
    args_->y.depth = 1 + ((args_->x.depth + args_->conv.padding_front + args_->conv.padding_back - (args_->conv.dilation_depth * (args_->w.depth + -1) + 1))/args_->conv.stride_depth);
    args_->y.height = 1 + ((args_->x.height + args_->conv.padding_top + args_->conv.padding_bottom - (args_->conv.dilation_height * (args_->w.height + -1) + 1))/args_->conv.stride_height);
    args_->y.width = 1 + ((args_->x.width + args_->conv.padding_right + args_->conv.padding_left - (args_->conv.dilation_width * (args_->w.width + -1) + 1))/args_->conv.stride_width);
    cask_plugin::toInternalShape(&args_->y)->finalize();
    //args_->y.finalize();
    cask_plugin::toInternalShape(&args_->x)->finalize();
    //args_->x.finalize();
    cask_plugin::toInternalShape(&args_->w)->finalize();
    //args_->w.finalize();
    cask_plugin::toInternalShape(&args_->c)->finalize();
    //args_->c.finalize();
    cask_plugin::toInternalShape(&args_->bn_res)->finalize();
    //args_->bn_res.finalize();
    cask_plugin::toInternalShape(&args_->bn_res_add_relu_out)->finalize();
    //args_->bn_res_add_relu_out.finalize();
    cask_plugin::toInternalShape(&args_->bn_scale)->finalize();
    //args_->bn_scale.finalize();
    cask_plugin::toInternalShape(&args_->bn_bias)->finalize();
    //args_->bn_bias.finalize();
    cask_plugin::toInternalShape(&args_->bn_res_scale)->finalize();
    //args_->bn_res_scale.finalize();
    cask_plugin::toInternalShape(&args_->bn_res_bias)->finalize();
    //args_->bn_res_bias.finalize();
    cask_plugin::toInternalShape(&args_->bn_mean)->finalize();
    //args_->bn_mean.finalize();
    cask_plugin::toInternalShape(&args_->bn_inv_stddev)->finalize();
    //args_->bn_inv_stddev.finalize();
    cask_plugin::toInternalShape(&args_->bn_sum)->finalize();
    //args_->bn_sum.finalize();
    cask_plugin::toInternalShape(&args_->bn_sum_of_squares)->finalize();
    //args_->bn_sum_of_squares.finalize();
    cask_plugin::toInternalShape(&args_->bn_bitmask_relu_out)->finalize();
    //args_->bn_bitmask_relu_out.finalize();

    this->finalize();

    return parsed_args;
  }

  virtual void finalize() { }

private:
    Arguments *args_;
};

}