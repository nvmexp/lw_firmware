#!/home/utils/Python/builds/3.6.6-20180809/bin/python3.6

## Python script to generate all valid floorsweepable configs
## for a given chip for PRODUCT/FUNC_VALID modes using the fs_lib
## Input of this script is a csv file with valid configs generated by fslib
## Output of this script is a level file to run all the configs on fmodel 
## Copyright LWPU Corp. 2019

import re
import os
import sys
import pandas as pd
import numpy as np
import argparse

#colwerts int to 8bit binary format, with each bit complemented
def int_to_bin_compl_string(i):
    if i == 0:
        return "11111111"
    s = ''
    j = 0
    while j < 8:
        if i & 1 == 1:
            s = "0" + s
        else:
            s = "1" + s
        i //= 2
        j += 1
    return s

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Generate fslib valid config fmodel level based on an input level. Input level should be specified with relative path to //hw/lwgpu/diag/testgen/config/levels. Output level is generated at specified absolute path or by default at //hw/lwgpu/diag/testgen/. Copy it back to wherever you want')
    parser.add_argument('--chip', action="store", dest="chip", required=True)   #ga100/ga102
    parser.add_argument('--mode', action="store", dest="mode", required=True)   #PRODUCT/FUNC_VALID
    parser.add_argument('--outputlevel', action="store", dest="outputlevel", required=True)
    parser.add_argument('--inputcsv', action="store", dest="inputcsv", required=True)
    parser.add_argument('--onlynumfbp', action="store", dest="onlynumfbp", required=False, default="0")   #if specified, it outputs configs with that many active fbps
    parser.add_argument('--inputlevel', action="store", dest="inputlevel", required=True)   #combining the two step process

    args = parser.parse_args()
#    shutil.rmtree(args.output_dir, ignore_errors=True)
#    os.mkdir(args.output_dir)
    df = pd.read_csv(args.inputcsv)
    f = open("temp", "w")
#    f = open( args.outputlevel + "_" + args.chip + "_"+ args.mode, "w")
    f.write("# Generated using gen_fslevel.py\n\n")

    if (args.chip == "ga100"):
#        print (df.shape)
#        print (df.ndim)
#        print (df.head())
#        print (df.dtypes)

        if (int(args.onlynumfbp) > 12):
            sys.exit("fatal error: onlynumfbp should be less than 12 in ga100")
        for index, row in df.iterrows():
            if ((int(args.onlynumfbp) != 0) and (int(row[19]) != int(args.onlynumfbp))):
                continue

            numTPC = 0
            numFBP = 0
            for i in range(0,8):
                f.write("gpc" + str(i) + "[tpc[")
                if (row[17+i] == "ff"):
                    f.write("00000000]pes[000]]")
                else:
                    f.write("11111111]pes[111]]")
                    numTPC += 8
                f.write(" ")

            for i in range(0,12):
                f.write("fbp" + str(i) + "[ltc[")
                if (int(row[1+i]) > 0):
                    f.write("00]]")
                else:
                    f.write("11]]")
                    numFBP += 1
                if (i != 11):
                    f.write(" ")
            f.write("  # " + str(numTPC) + " TPCs " + str(numFBP) + " FBPs")
            f.write("\n\n")

    if (args.chip == "ga102"):
        if (int(args.onlynumfbp) > 6):
            sys.exit("fatal error: onlynumfbp should be less than 6 in ga102")
        for index, row in df.iterrows():
            if ((int(args.onlynumfbp) != 0) and (int(row[19]) != int(args.onlynumfbp))):
                continue

            numTPC = 0
            numFBP = 0
            for i in range(0,7):
                f.write("gpc" + str(i) + "[tpc[")
                f.write("11111111]pes[111]rop[11]]")
                numTPC += 8
                f.write(" ")

            for i in range(0,6):
                f.write("fbp" + str(i) + "[ltc[")
                if (int(row[12+i]) == 0):
                    f.write("11]")
                    numFBP += 1
                elif (int(row[12+i]) == 1):
                    f.write("10]")
                    numFBP += 1
                elif (int(row[12+i]) == 2):
                    f.write("01]")
                    numFBP += 1
                else:
                    f.write("00]")
                
                f.write("l2slice[")
                l2s_str = row[i*2+1] + row[i*2]
                f.write(int_to_bin_compl_string(int(l2s_str,16)))
                f.write("]] ")
                
            f.write("  # " + str(numTPC) + " TPCs " + str(numFBP) + " FBPs")
            f.write("\n\n")

    f.close()   #temp is generated
    os.chdir("../../../diag/testgen/")
    print("Exelwting config/pmScripts/gen_fs2.py -chip ga102 -node fbp -node gpc -level " + args.inputlevel + " -readHumanDump ../../clib/lwshared/fs_lib/temp -no_fb_reg > " + args.outputlevel)
    os.system("config/pmScripts/gen_fs2.py -chip ga102 -node fbp -node gpc -level " + args.inputlevel + " -readHumanDump ../../clib/lwshared/fs_lib/temp -no_fb_reg > " + args.outputlevel)
    os.chdir("../../clib/lwshared/fs_lib/")
    os.system("rm temp")
