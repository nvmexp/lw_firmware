/*
 * LWIDIA_COPYRIGHT_BEGIN
 *
 * Copyright 2021-2022 by LWPU Corporation.  All rights reserved.  All
 * information contained herein is proprietary and confidential to LWPU
 * Corporation.  Any use, reproduction, or disclosure without the written
 * permission of LWPU Corporation is prohibited.
 *
 * LWIDIA_COPYRIGHT_END
*/

#include "mdiag/tests/gpu/trace_3d/trace_3d.h"

extern const ParamDecl trace_3d_params[] =
{
    PARAM_SUBDECL(lwgpu_single_params),
    PARAM_SUBDECL(test_params),

    STRING_PARAM("-i", "specifies path to input trace file, exclusive with -no_trace"),
    SIMPLE_PARAM("-no_trace", "not really run a real trace, exclusive with -i"),
    SIMPLE_PARAM("-silence_surface_info", "Do not print out surface buffer allocating and freeing information"),

    // Memory space properties for render targets
    MEMORY_SPACE_PARAMS("C", "all color buffers"),
    MEMORY_SPACE_PARAMS("CA", "color buffer A"),
    MEMORY_SPACE_PARAMS("CB", "color buffer B"),
    MEMORY_SPACE_PARAMS("CC", "color buffer C"),
    MEMORY_SPACE_PARAMS("CD", "color buffer D"),
    MEMORY_SPACE_PARAMS("CE", "color buffer E"),
    MEMORY_SPACE_PARAMS("CF", "color buffer F"),
    MEMORY_SPACE_PARAMS("CG", "color buffer G"),
    MEMORY_SPACE_PARAMS("CH", "color buffer H"),
    MEMORY_SPACE_PARAMS("Z", "Z buffer"),

    STRING_PARAM("-crcpath", "specifies path to CRC file"),
    STRING_PARAM("-crcfilename", "specifies name of CRC file(default is \"test.crc\")"),
    STRING_PARAM("-o", "specifies output file"),
    SIMPLE_PARAM("-frontdoor_check", "Read image out using frontdoor path"),

    // below dmacheck methods are obsoleted
    // -dmacheck_m2m (-dmacheck 0)
    // -dmaCheck (-dmacheck 1)
    // -dmacheck_cipher (-dmacheck 2)
    // -dmacheckCipher (-dmacheck 3)
    // -dmacheck_msppp (-dmacheck 4)
    // -dmacheck_cepri (-dmacheck 7)
    { "-dma_check", "u", (ParamDecl::PARAM_ENFORCE_RANGE | ParamDecl::GROUP_START), 5, 6, "dma image back to system memory" },
    { "-dmacheck_ce",      "5", ParamDecl::GROUP_MEMBER, 0, 0, "dma image back to sysmem using Copy Engine" },
    { "-crccheck_gpu",     "6", ParamDecl::GROUP_MEMBER, 0, 0, "compute CRC using FECS" },

    SIMPLE_PARAM("-disable_compressed_vidmem_surfaces_dma", "For Blackwell and above, by default, RTL targets use CE for reads from compressed surfaces in video memory. Use this option to disable it"),
    SIMPLE_PARAM("-disable_bsp", "dummy argument, should not use"),
    SIMPLE_PARAM("-crc_new_channel", "Create a separate channel for performing CRC callwlations; to be used with the dma check options"),

    SIMPLE_PARAM("-dma_fill", "Using copy engine to fill the surface"),
    { "-dma_load", "u", (ParamDecl::PARAM_ENFORCE_RANGE | ParamDecl::GROUP_START), 0, 1, "load trace buffers in dma way" },
    { "-dma_load_ce",     "1", ParamDecl::GROUP_MEMBER, 0, 0, "Unsupported... please use -surfaceinit_ce" },
    SIMPLE_PARAM("-load_new_channel", "create a separate channel for loading trace buffer to chip"),

    { "-copy_surface", "u", (ParamDecl::PARAM_ENFORCE_RANGE | ParamDecl::GROUP_START), 0, 2, "copy image to fb or system memory" },
    { "-blitsurface_vid",     "0", ParamDecl::GROUP_MEMBER, 0, 0, "Blit surfaces to FB in pitch format before CRC checking/dumping" },
    { "-blitsurface_coh",     "1", ParamDecl::GROUP_MEMBER, 0, 0, "Blit surfaces to coherent SysMem in pitch format before CRC checking/dumping" },
    { "-blitsurface_skip",    "2", ParamDecl::GROUP_MEMBER, 0, 0, "Skip the Blit surface step before GPU CRC callwlation" },

    SIMPLE_PARAM("-dump_pre_swizzle", "dump comptags before swizzle"),
    SIMPLE_PARAM("-dump_post_swizzle", "dump comptags after swizzle"),

    SIMPLE_PARAM("-disable_swizzle_between_naive_raw", "disable the swizzle logic on mods side between naive and raw"),

    SIMPLE_PARAM("-pitch", "Set layout of color surfaces to pitch"),

    SIMPLE_PARAM("-ZLwllMod", "Notify test we expect Zlwll to change the image if enabled"),

    { "-crcMode", "u", (ParamDecl::PARAM_ENFORCE_RANGE |
                        ParamDecl::GROUP_START), CrcEnums::CRC_NONE, CrcEnums::CRC_ENDMARK, "Describes how to handle crc checking" },
    { "-no_check",   (const char*)CrcEnums::CRC_NONE, ParamDecl::GROUP_MEMBER | ParamDecl::GROUP_MEMBER_UNSIGNED, 0, 0, "skip crc check" },
    { "-crcReport",  (const char*)CrcEnums::CRC_REPORT, ParamDecl::GROUP_MEMBER | ParamDecl::GROUP_MEMBER_UNSIGNED, 0, 0, "do not run tests, simply look for crc existence and report it" },
    { "-crcCheck",   (const char*)CrcEnums::CRC_CHECK,  ParamDecl::GROUP_MEMBER | ParamDecl::GROUP_MEMBER_UNSIGNED, 0, 0, "do crc check" },
    { "-crcDump",    (const char*)CrcEnums::CRC_DUMP,   ParamDecl::GROUP_MEMBER | ParamDecl::GROUP_MEMBER_UNSIGNED, 0, 0, "write crc/interrupts to crcfile/intrfile" },
    { "-crlwpdate",  (const char*)CrcEnums::CRC_UPDATE, ParamDecl::GROUP_MEMBER | ParamDecl::GROUP_MEMBER_UNSIGNED, 0, 0, "update crc file, using perforce commands to edit/add file to repository" },
    { "-checkOnlyInterrupts",  (const char*)CrcEnums::INTERRUPT_ONLY, ParamDecl::GROUP_MEMBER | ParamDecl::GROUP_MEMBER_UNSIGNED, 0, 0, "Only do interrupts check" },

    // change paths like O:\traces\kelvin_30\hic\... to P:\perforce\arch\traces\kelvin_30\hic\...
    STRING_PARAM("-crcLocal", "generate crc and img paths by translating input filename prefix into new filename prefix,\ne.g. '-crcLocal L:\\perforce\\arch\\traces(O:\\traces,P:\\)';\nif you are using wine, you must use wine paths\nAlso relwrsively creates any missing crc directories in the new filename prefix subtree"),
    SIMPLE_PARAM("-copy_all_crc_for_gild", "[no-op] Copy all CRCs in case of a mismatch and we are gilding a new chip."),

    SIMPLE_PARAM("-ForceVisible", "Disable ROP from doing z depth test - usually for zlwll unit test"),
    SIMPLE_PARAM("-visible_early_z", "set registers to show whether early or late Z is in use, also force primitive broadcast for fermi"),
    SIMPLE_PARAM("-visible_early_z_nobroadcast", "set registers to show whether early or late Z is in use, not force primitive broadcast"),

    { "-aamode", "u", (ParamDecl::PARAM_ENFORCE_RANGE |
                       ParamDecl::GROUP_START), 0, 11, "set the antialiased mode" },
    { "-1X1",                 "0", ParamDecl::GROUP_MEMBER, 0, 0, "One of the AA modes" },
    { "-2X1_D3D",             "1", ParamDecl::GROUP_MEMBER, 0, 0, "One of the AA modes" },
    { "-4X2_D3D",             "2", ParamDecl::GROUP_MEMBER, 0, 0, "One of the AA modes" },
    { "-2X1",                 "3", ParamDecl::GROUP_MEMBER, 0, 0, "One of the AA modes" },
    { "-2X2",                 "5", ParamDecl::GROUP_MEMBER, 0, 0, "One of the AA modes" },
    { "-4X2",                 "6", ParamDecl::GROUP_MEMBER, 0, 0, "One of the AA modes" },
    { "-2X2_VC_4",            "7", ParamDecl::GROUP_MEMBER, 0, 0, "One of the AA modes" },
    { "-2X2_VC_12",           "8", ParamDecl::GROUP_MEMBER, 0, 0, "One of the AA modes" },
    { "-4X2_VC_8",            "9", ParamDecl::GROUP_MEMBER, 0, 0, "One of the AA modes" },
    { "-4X2_VC_24",           "10", ParamDecl::GROUP_MEMBER, 0, 0, "One of the AA modes" },
    { "-4X4",                 "11", ParamDecl::GROUP_MEMBER, 0, 0, "One of the AA modes" },

    SIMPLE_PARAM("-dumpImages", "dump .tga of final frame buffer"),

    SIMPLE_PARAM("-dumpCRCs", "always dump crc file, even when test passes"),

    SIMPLE_PARAM("-dump_raw", "dump surfaces in their raw frame buffer form"),

    SIMPLE_PARAM("-crcMissOK", "report missing crc/intr values as OK, so test will pass (log will show miss)"),

    SIMPLE_PARAM("-black_image_check", "do black image check, black image will be treat as ilwaild image"),

    { "-mscontrol",  "u", (ParamDecl::PARAM_ENFORCE_RANGE |
                           ParamDecl::GROUP_START), 0, 4, "control multisampling" },
    { "-MSdisable",         "0", ParamDecl::GROUP_MEMBER, 0, 0, "Turn off multisampling, even if trace enables it" },
    { "-MSenable",          "1", ParamDecl::GROUP_MEMBER, 0, 0, "Turn on multisampling, by default just 1 sample" },
    { "-MSfreedom",         "2", ParamDecl::GROUP_MEMBER, 0, 0, "Do not override trace multisampling methods" },
    { "-MSdisableZ",        "3", ParamDecl::GROUP_MEMBER, 0, 0, "Turn off multisampling and force nonmultisampled Z" },
    { "-MSenable_disableZ", "4", ParamDecl::GROUP_MEMBER, 0, 0, "Turn on multisampling and force nonmultisampled Z" },

    { "-width", "u", (ParamDecl::ALIAS_START | ParamDecl::ALIAS_OVERRIDE_OK), 0, 0, "width for all color and Z buffers" },
    { "-w",     "u", ParamDecl::ALIAS_MEMBER, 0, 0, "width for all color and Z buffers" },

    { "-height", "u", (ParamDecl::ALIAS_START | ParamDecl::ALIAS_OVERRIDE_OK), 0, 0, "height for all color and Z buffers" },
    { "-h",      "u", ParamDecl::ALIAS_MEMBER, 0, 0, "height for all color and Z buffers" },

    { "-scrnsize", "u", (ParamDecl::PARAM_ENFORCE_RANGE |
                         ParamDecl::GROUP_START | ParamDecl::GROUP_OVERRIDE_OK), SCRNSIZE_80x60, SCRNSIZE_2048x1536, "control screen size" },
    { "-size80x60",     (const char*)SCRNSIZE_80x60,     ParamDecl::GROUP_MEMBER | ParamDecl::GROUP_MEMBER_UNSIGNED, 0, 0, "set screen size 80x160"},
    { "-size160x120",   (const char*)SCRNSIZE_160x120,   ParamDecl::GROUP_MEMBER | ParamDecl::GROUP_MEMBER_UNSIGNED, 0, 0, "set screen size 160x120"},
    { "-size320x240",   (const char*)SCRNSIZE_320x240,   ParamDecl::GROUP_MEMBER | ParamDecl::GROUP_MEMBER_UNSIGNED, 0, 0, "set screen size 320x240"},
    { "-size640x480",   (const char*)SCRNSIZE_640x480,   ParamDecl::GROUP_MEMBER | ParamDecl::GROUP_MEMBER_UNSIGNED, 0, 0, "set screen size 640x480"},
    { "-size800x600",   (const char*)SCRNSIZE_800x600,   ParamDecl::GROUP_MEMBER | ParamDecl::GROUP_MEMBER_UNSIGNED, 0, 0, "set screen size 800x600"},
    { "-size1024x768",  (const char*)SCRNSIZE_1024x768,  ParamDecl::GROUP_MEMBER | ParamDecl::GROUP_MEMBER_UNSIGNED, 0, 0, "set screen size 1024x768"},
    { "-size1280x1024", (const char*)SCRNSIZE_1280x1024, ParamDecl::GROUP_MEMBER | ParamDecl::GROUP_MEMBER_UNSIGNED, 0, 0, "set screen size 1280x1024"},
    { "-size1600x1200", (const char*)SCRNSIZE_1600x1200, ParamDecl::GROUP_MEMBER | ParamDecl::GROUP_MEMBER_UNSIGNED, 0, 0, "set screen size 1600x1200"},
    { "-size2048x1536", (const char*)SCRNSIZE_2048x1536, ParamDecl::GROUP_MEMBER | ParamDecl::GROUP_MEMBER_UNSIGNED, 0, 0, "set screen size 2048x1536"},

    UNSIGNED_PARAM("-widthC",  "width for all color buffers"),
    UNSIGNED_PARAM("-widthCA", "width for color buffer A"),
    UNSIGNED_PARAM("-widthCB", "width for color buffer B"),
    UNSIGNED_PARAM("-widthCC", "width for color buffer C"),
    UNSIGNED_PARAM("-widthCD", "width for color buffer D"),
    UNSIGNED_PARAM("-widthCE", "width for color buffer E"),
    UNSIGNED_PARAM("-widthCF", "width for color buffer F"),
    UNSIGNED_PARAM("-widthCG", "width for color buffer G"),
    UNSIGNED_PARAM("-widthCH", "width for color buffer H"),
    UNSIGNED_PARAM("-widthZ",  "width for Z buffer"),

    UNSIGNED_PARAM("-heightC",  "height for all color buffers"),
    UNSIGNED_PARAM("-heightCA", "height for color buffer A"),
    UNSIGNED_PARAM("-heightCB", "height for color buffer B"),
    UNSIGNED_PARAM("-heightCC", "height for color buffer C"),
    UNSIGNED_PARAM("-heightCD", "height for color buffer D"),
    UNSIGNED_PARAM("-heightCE", "height for color buffer E"),
    UNSIGNED_PARAM("-heightCF", "height for color buffer F"),
    UNSIGNED_PARAM("-heightCG", "height for color buffer G"),
    UNSIGNED_PARAM("-heightCH", "height for color buffer H"),
    UNSIGNED_PARAM("-heightZ",  "height for Z buffer"),

    UNSIGNED_PARAM("-depth",  "depth (# of layers) for all color and Z buffers"),
    UNSIGNED_PARAM("-depthC", "depth (# of layers) for all color buffers"),
    UNSIGNED_PARAM("-depthZ", "depth (# of layers) for Z buffer"),

    UNSIGNED_PARAM("-array_size",  "array size for all color and Z buffers"),
    UNSIGNED_PARAM("-array_sizeC", "array size for all color buffers"),
    UNSIGNED_PARAM("-array_sizeZ", "array size for Z buffer"),

    UNSIGNED_PARAM("-block_width",   "gobs in X dimension per block for all buffers (default is 1)"),
    UNSIGNED_PARAM("-block_widthC",  "gobs in X dimension per block for all color buffers (default is 1)"),
    UNSIGNED_PARAM("-block_widthCA", "gobs in X dimension per block for color buffer A (default is 1)"),
    UNSIGNED_PARAM("-block_widthCB", "gobs in X dimension per block for color buffer B (default is 1)"),
    UNSIGNED_PARAM("-block_widthCC", "gobs in X dimension per block for color buffer C (default is 1)"),
    UNSIGNED_PARAM("-block_widthCD", "gobs in X dimension per block for color buffer D (default is 1)"),
    UNSIGNED_PARAM("-block_widthCE", "gobs in X dimension per block for color buffer E (default is 1)"),
    UNSIGNED_PARAM("-block_widthCF", "gobs in X dimension per block for color buffer F (default is 1)"),
    UNSIGNED_PARAM("-block_widthCG", "gobs in X dimension per block for color buffer G (default is 1)"),
    UNSIGNED_PARAM("-block_widthCH", "gobs in X dimension per block for color buffer H (default is 1)"),
    UNSIGNED_PARAM("-block_widthZ",  "gobs in X dimension per block for Z buffer (default is 1)"),

    UNSIGNED_PARAM("-block_height",   "gobs in Y dimension per block for all buffers (default is 16)"),
    UNSIGNED_PARAM("-block_heightC",  "gobs in Y dimension per block for all color buffers (default is 16)"),
    UNSIGNED_PARAM("-block_heightCA", "gobs in Y dimension per block for color buffer A (default is 16)"),
    UNSIGNED_PARAM("-block_heightCB", "gobs in Y dimension per block for color buffer B (default is 16)"),
    UNSIGNED_PARAM("-block_heightCC", "gobs in Y dimension per block for color buffer C (default is 16)"),
    UNSIGNED_PARAM("-block_heightCD", "gobs in Y dimension per block for color buffer D (default is 16)"),
    UNSIGNED_PARAM("-block_heightCE", "gobs in Y dimension per block for color buffer E (default is 16)"),
    UNSIGNED_PARAM("-block_heightCF", "gobs in Y dimension per block for color buffer F (default is 16)"),
    UNSIGNED_PARAM("-block_heightCG", "gobs in Y dimension per block for color buffer G (default is 16)"),
    UNSIGNED_PARAM("-block_heightCH", "gobs in Y dimension per block for color buffer H (default is 16)"),
    UNSIGNED_PARAM("-block_heightZ",  "gobs in Y dimension per block for Z buffer (default is 16)"),

    UNSIGNED_PARAM("-block_depth",   "gobs in Z dimension per block for all buffers (default is 1)"),
    UNSIGNED_PARAM("-block_depthC",  "gobs in Z dimension per block for all color buffers (default is 1)"),
    UNSIGNED_PARAM("-block_depthCA", "gobs in Z dimension per block for color buffer A (default is 1)"),
    UNSIGNED_PARAM("-block_depthCB", "gobs in Z dimension per block for color buffer B (default is 1)"),
    UNSIGNED_PARAM("-block_depthCC", "gobs in Z dimension per block for color buffer C (default is 1)"),
    UNSIGNED_PARAM("-block_depthCD", "gobs in Z dimension per block for color buffer D (default is 1)"),
    UNSIGNED_PARAM("-block_depthCE", "gobs in Z dimension per block for color buffer E (default is 1)"),
    UNSIGNED_PARAM("-block_depthCF", "gobs in Z dimension per block for color buffer F (default is 1)"),
    UNSIGNED_PARAM("-block_depthCG", "gobs in Z dimension per block for color buffer G (default is 1)"),
    UNSIGNED_PARAM("-block_depthCH", "gobs in Z dimension per block for color buffer H (default is 1)"),
    UNSIGNED_PARAM("-block_depthZ",  "gobs in Z dimension per block for Z buffer (default is 1)"),

    UNSIGNED_PARAM("-block_height_wid","gobs in Y dimension per block for ClipID (default is 16)"),

    SIMPLE_PARAM("-zlwll", "Turn on Z occlusion lwlling"),
    SIMPLE_PARAM("-slwll", "Turn on stencil occlusion lwlling"),
    SIMPLE_PARAM("-skip_zc_sanity", "Skip the zlwll buffer sanity check"),
    UNSIGNED_PARAM("-zlwll_criterion", "set the Zlwll stencil criterion (0xFRRMM where F-func, RR-ref, MM-mask)"),
    UNSIGNED_PARAM("-zlwll_allocation", "do zlwll allocation in MODS. Use Zlwll ram format X)"),
    {"-zlwll_subregions",   "t", ParamDecl::PARAM_MULTI_OK, 0, 0, "set the Zlwll subregions in modes x,x,x"},

    { "-formatC", "t", (ParamDecl::GROUP_START), 1, 64, "pixel format for all color buffers" },
    { "-Z1R5G5B5",       "Z1R5G5B5",       ParamDecl::GROUP_MEMBER, 0, 0, "use Z1R5G5B5 FB format" },
    { "-O1R5G5B5",       "O1R5G5B5",       ParamDecl::GROUP_MEMBER, 0, 0, "use O1R5G5B5 FB format" },
    { "-R5G6B5",         "R5G6B5",         ParamDecl::GROUP_MEMBER, 0, 0, "use R5G6B5 FB format" },
    { "-Z8R8G8B8",       "Z8R8G8B8",       ParamDecl::GROUP_MEMBER, 0, 0, "use Z8R8G8B8 FB format" },
    { "-O8R8G8B8",       "O8R8G8B8",       ParamDecl::GROUP_MEMBER, 0, 0, "use O8R8G8B8 FB format" },
    { "-Z1A7R8G8B8",     "Z1A7R8G8B8",     ParamDecl::GROUP_MEMBER, 0, 0, "use Z1A7R8G8B8 FB format" },
    { "-O1A7R8G8B8",     "O1A7R8G8B8",     ParamDecl::GROUP_MEMBER, 0, 0, "use O1A7R8G8B8 FB format" },
    { "-A8R8G8B8",       "A8R8G8B8",       ParamDecl::GROUP_MEMBER, 0, 0, "use A8R8G8B8 FB format" },
    { "-X8R8G8B8",       "X8R8G8B8",       ParamDecl::GROUP_MEMBER, 0, 0, "use X8R8G8B8 FB format" },
    { "-R8G8B8",         "R8G8B8",         ParamDecl::GROUP_MEMBER, 0, 0, "use R8G8B8 FB format" },
    { "-B8",             "B8",             ParamDecl::GROUP_MEMBER, 0, 0, "use B8 FB format" },
    { "-G8B8",           "G8B8",           ParamDecl::GROUP_MEMBER, 0, 0, "use G8B8 FB format" },
    { "-F_W16Z16Y16X16", "F_W16Z16Y16X16", ParamDecl::GROUP_MEMBER, 0, 0, "use F_W16Z16Y16X16 FB format" },
    { "-F_W32Z32Y32X32", "F_W32Z32Y32X32", ParamDecl::GROUP_MEMBER, 0, 0, "use F_W32Z32Y32X32 FB format" },
    { "-F_X32",          "F_X32",          ParamDecl::GROUP_MEMBER, 0, 0, "use F_X32 FB format" },
    { "-Z8B8G8R8",       "Z8B8G8R8",       ParamDecl::GROUP_MEMBER, 0, 0, "use Z8B8G8R8 FB format" },
    { "-O8B8G8R8",       "O8B8G8R8",       ParamDecl::GROUP_MEMBER, 0, 0, "use O8B8G8R8 FB format" },
    { "-A8B8G8R8",       "A8B8G8R8",       ParamDecl::GROUP_MEMBER, 0, 0, "use A8B8G8R8 FB format" },

    { "-RF32_GF32_BF32_AF32",  "RF32_GF32_BF32_AF32", ParamDecl::GROUP_MEMBER, 0, 0, "use RF32_GF32_BF32_AF32 FB format" },
    { "-RS32_GS32_BS32_AS32",  "RS32_GS32_BS32_AS32", ParamDecl::GROUP_MEMBER, 0, 0, "use RS32_GS32_BS32_AS32 FB format" },
    { "-RU32_GU32_BU32_AU32",  "RU32_GU32_BU32_AU32", ParamDecl::GROUP_MEMBER, 0, 0, "use RU32_GU32_BU32_AU32 FB format" },
    { "-RF32_GF32_BF32_X32",   "RF32_GF32_BF32_X32",  ParamDecl::GROUP_MEMBER, 0, 0, "use RF32_GF32_BF32_X32 FB format" },
    { "-RS32_GS32_BS32_X32",   "RS32_GS32_BS32_X32",  ParamDecl::GROUP_MEMBER, 0, 0, "use RS32_GS32_BS32_X32 FB format" },
    { "-RU32_GU32_BU32_X32",   "RU32_GU32_BU32_X32",  ParamDecl::GROUP_MEMBER, 0, 0, "use RU32_GU32_BU32_X32 FB format" },

    { "-RF16_GF16_BF16_X16",  "RF16_GF16_BF16_X16",  ParamDecl::GROUP_MEMBER, 0, 0, "use RF16_GF16_BF16_X16 FB format" },
    { "-RF16_GF16_BF16_AF16",  "RF16_GF16_BF16_AF16",  ParamDecl::GROUP_MEMBER, 0, 0, "use RF16_GF16_BF16_AF16 FB format" },
    { "-RS16_GS16_BS16_AS16", "RS16_GS16_BS16_AS16", ParamDecl::GROUP_MEMBER, 0, 0, "use RS16_GS16_BS16_AS16 FB format" },
    { "-RU16_GU16_BU16_AU16", "RU16_GU16_BU16_AU16", ParamDecl::GROUP_MEMBER, 0, 0, "use RU16_GU16_BU16_AU16 FB format" },
    { "-R16_G16_B16_A16",     "R16_G16_B16_A16",     ParamDecl::GROUP_MEMBER, 0, 0, "use R16_G16_B16_A16 FB format" },
    { "-RN16_GN16_BN16_AN16",     "RN16_GN16_BN16_AN16",     ParamDecl::GROUP_MEMBER, 0, 0, "use RN16_GN16_BN16_AN16 FB format" },

    { "-RF32_GF32", "RF32_GF32", ParamDecl::GROUP_MEMBER, 0, 0, "use RF32_GF32 FB format" },
    { "-RS32_GS32", "RS32_GS32", ParamDecl::GROUP_MEMBER, 0, 0, "use RS32_GS32 FB format" },
    { "-RU32_GU32", "RU32_GU32", ParamDecl::GROUP_MEMBER, 0, 0, "use RU32_GU32 FB format" },

    { "-A2B10G10R10",     "A2B10G10R10",     ParamDecl::GROUP_MEMBER, 0, 0, "use A2B10G10R10 FB format" },
    { "-AU2BU10GU10RU10", "AU2BU10GU10RU10", ParamDecl::GROUP_MEMBER, 0, 0, "use AU2BU10GU10RU10 FB format" },
    { "-A2R10G10B10",     "A2R10G10B10",     ParamDecl::GROUP_MEMBER, 0, 0, "use A2R10G10B10 FB format" },

    { "-R16_G16",   "R16_G16",   ParamDecl::GROUP_MEMBER, 0, 0, "use R16_G16 FB format" },
    { "-RN16_GN16", "RN16_GN16", ParamDecl::GROUP_MEMBER, 0, 0, "use RN16_GN16 FB format" },
    { "-RS16_GS16", "RS16_GS16", ParamDecl::GROUP_MEMBER, 0, 0, "use RS16_GS16 FB format" },
    { "-RU16_GU16", "RU16_GU16", ParamDecl::GROUP_MEMBER, 0, 0, "use RU16_GU16 FB format" },
    { "-RF16_GF16", "RF16_GF16", ParamDecl::GROUP_MEMBER, 0, 0, "use RF16_GF16 FB format" },

    { "-B8G8R8A8",     "B8G8R8A8",     ParamDecl::GROUP_MEMBER, 0, 0, "use B8G8R8A8 FB format" },
    { "-X8G8R8A8",     "X8G8R8A8",     ParamDecl::GROUP_MEMBER, 0, 0, "use X8G8R8A8 FB format" },
    { "-BF10GF11RF11", "BF10GF11RF11", ParamDecl::GROUP_MEMBER, 0, 0, "use BF10GF11RF11 FB format" },
    { "-A1R5G5B5",     "A1R5G5B5",     ParamDecl::GROUP_MEMBER, 0, 0, "use A1R5G5B5 FB format" },
    { "-X1R5G5B5",     "X1R5G5B5",     ParamDecl::GROUP_MEMBER, 0, 0, "use X1R5G5B5 FB format" },
    { "-A8B8G8R8",       "A8B8G8R8",       ParamDecl::GROUP_MEMBER, 0, 0, "use A8B8G8R8 FB format" },
    { "-X8B8G8R8",       "X8B8G8R8",       ParamDecl::GROUP_MEMBER, 0, 0, "use X8B8G8R8 FB format" },
    { "-RS32",       "RS32",       ParamDecl::GROUP_MEMBER, 0, 0, "use RS32 FB format" },
    { "-RU32",       "RU32",       ParamDecl::GROUP_MEMBER, 0, 0, "use RU32 FB format" },
    { "-RF32",       "RF32",       ParamDecl::GROUP_MEMBER, 0, 0, "use RF32 FB format" },
    { "-G8R8",       "G8R8",       ParamDecl::GROUP_MEMBER, 0, 0, "use G8R8 FB format" },
    { "-GN8RN8",       "GN8RN8",       ParamDecl::GROUP_MEMBER, 0, 0, "use GN8RN8 FB format" },
    { "-GS8RS8",       "GS8RS8",       ParamDecl::GROUP_MEMBER, 0, 0, "use GS8RS8 FB format" },
    { "-GU8RU8",       "GU8RU8",       ParamDecl::GROUP_MEMBER, 0, 0, "use GU8RU8 FB format" },

    { "-R16",        "R16",         ParamDecl::GROUP_MEMBER, 0, 0, "use R16 FB format" },
    { "-RN16",       "RN16",       ParamDecl::GROUP_MEMBER, 0, 0, "use RN16 FB format" },
    { "-RS16",       "RS16",       ParamDecl::GROUP_MEMBER, 0, 0, "use RS16 FB format" },
    { "-RU16",       "RU16",       ParamDecl::GROUP_MEMBER, 0, 0, "use RU16 FB format" },
    { "-RF16",       "RF16",       ParamDecl::GROUP_MEMBER, 0, 0, "use RF16 FB format" },

    { "-A8RL8GL8BL8",       "A8RL8GL8BL8",       ParamDecl::GROUP_MEMBER, 0, 0, "use A8RL8GL8BL8 FB format" },
    { "-X8RL8GL8BL8",       "X8RL8GL8BL8",       ParamDecl::GROUP_MEMBER, 0, 0, "use X8RL8GL8BL8 FB format" },
    { "-A8BL8GL8RL8",       "A8BL8GL8RL8",       ParamDecl::GROUP_MEMBER, 0, 0, "use A8BL8GL8RL8 FB format" },
    { "-X8BL8GL8RL8",       "X8BL8GL8RL8",       ParamDecl::GROUP_MEMBER, 0, 0, "use X8BL8GL8RL8 FB format" },

    { "-A8",        "A8",        ParamDecl::GROUP_MEMBER, 0, 0, "use A8 FB format" },
    { "-R8",        "R8",        ParamDecl::GROUP_MEMBER, 0, 0, "use R8 FB format" },
    { "-RN8",       "RN8",       ParamDecl::GROUP_MEMBER, 0, 0, "use RN8 FB format" },
    { "-RS8",       "RS8",       ParamDecl::GROUP_MEMBER, 0, 0, "use RS8 FB format" },
    { "-RU8",       "RU8",       ParamDecl::GROUP_MEMBER, 0, 0, "use RU8 FB format" },

    { "-AN8BN8GN8RN8",       "AN8BN8GN8RN8",       ParamDecl::GROUP_MEMBER, 0, 0, "use AN8BN8GN8RN8 FB format" },
    { "-AS8BS8GS8RS8",       "AS8BS8GS8RS8",       ParamDecl::GROUP_MEMBER, 0, 0, "use AS8BS8GS8RS8 FB format" },
    { "-AU8BU8GU8RU8",       "AU8BU8GU8RU8",       ParamDecl::GROUP_MEMBER, 0, 0, "use AU8BU8GU8RU8 FB format" },

    { "-RF32_AF32", "RF32_AF32",    ParamDecl::GROUP_MEMBER, 0, 0, "use RF32_AF32 FB format"    },
    { "-R16_A16",   "R16_A16",      ParamDecl::GROUP_MEMBER, 0, 0, "use R16_A16 FB format"      },
    { "-RF16_AF16", "RF16_AF16",    ParamDecl::GROUP_MEMBER, 0, 0, "use RF16_AF16 FB format"    },
    { "-AF32",      "AF32",         ParamDecl::GROUP_MEMBER, 0, 0, "use AF32 FB format"         },
    { "-A8R8",      "A8R8",         ParamDecl::GROUP_MEMBER, 0, 0, "use A8R8 FB format"         },
    { "-A16",       "A16",          ParamDecl::GROUP_MEMBER, 0, 0, "use A16 FB format"          },
    { "-AF16",      "AF16",         ParamDecl::GROUP_MEMBER, 0, 0, "use AF16 FB format"         },

    { "-formatZ", "t", (ParamDecl::GROUP_START), 1, 11, "pixel format for Z buffer" },
    { "-Z24S8",         "Z24S8",         ParamDecl::GROUP_MEMBER, 0, 0, "use Z24S8 ZB format" },
    { "-X8Z24",         "X8Z24",         ParamDecl::GROUP_MEMBER, 0, 0, "use X8Z24 ZB format" },
    { "-S8Z24",         "S8Z24",         ParamDecl::GROUP_MEMBER, 0, 0, "use S8Z24 ZB format" },
    { "-V8Z24",         "V8Z24",         ParamDecl::GROUP_MEMBER, 0, 0, "use V8Z24 ZB format" },
    { "-ZF32",          "ZF32",          ParamDecl::GROUP_MEMBER, 0, 0, "use ZF32 ZB format" },
    { "-ZF32_X24S8",    "ZF32_X24S8",    ParamDecl::GROUP_MEMBER, 0, 0, "use ZF32_X24S8 ZB format" },
    { "-X8Z24_X16V8S8", "X8Z24_X16V8S8", ParamDecl::GROUP_MEMBER, 0, 0, "use X8Z24_X16V8S8 ZB format" },
    { "-ZF32_X16V8X8",  "ZF32_X16V8X8",  ParamDecl::GROUP_MEMBER, 0, 0, "use ZF32_X16V8X8 ZB format" },
    { "-ZF32_X16V8S8",  "ZF32_X16V8S8",  ParamDecl::GROUP_MEMBER, 0, 0, "use ZF32_X16V8S8 ZB format" },
    { "-Z16",           "Z16",           ParamDecl::GROUP_MEMBER, 0, 0, "use Z16 ZB format" },
    { "-S8",            "S8",            ParamDecl::GROUP_MEMBER, 0, 0, "use S8 ZB format" },

    STRING_PARAM("-formatCA", "pixel format for color buffer A"),
    STRING_PARAM("-formatCB", "pixel format for color buffer B"),
    STRING_PARAM("-formatCC", "pixel format for color buffer C"),
    STRING_PARAM("-formatCD", "pixel format for color buffer D"),
    STRING_PARAM("-formatCE", "pixel format for color buffer E"),
    STRING_PARAM("-formatCF", "pixel format for color buffer F"),
    STRING_PARAM("-formatCG", "pixel format for color buffer G"),
    STRING_PARAM("-formatCH", "pixel format for color buffer H"),

    SIMPLE_PARAM("-compress", "turn on compression for all memory regions"),
    SIMPLE_PARAM("-compressC", "turn on compression for all color buffers"),
    SIMPLE_PARAM("-compressCA", "turn on compression for color buffer A"),
    SIMPLE_PARAM("-compressCB", "turn on compression for color buffer B"),
    SIMPLE_PARAM("-compressCC", "turn on compression for color buffer C"),
    SIMPLE_PARAM("-compressCD", "turn on compression for color buffer D"),
    SIMPLE_PARAM("-compressCE", "turn on compression for color buffer E"),
    SIMPLE_PARAM("-compressCF", "turn on compression for color buffer F"),
    SIMPLE_PARAM("-compressCG", "turn on compression for color buffer G"),
    SIMPLE_PARAM("-compressCH", "turn on compression for color buffer H"),
    SIMPLE_PARAM("-compressZ", "turn on compression for the Z buffer"),

    SIMPLE_PARAM("-compress_stencil", "turn on stencil compression for the Z buffer when in S8 mode"),

    { "-zbc_modeC", "u",
        (ParamDecl::PARAM_ENFORCE_RANGE | ParamDecl::GROUP_START), 0, 1,
        "ZBC compression mode for all color buffers" },
    { "-zbc_offC", "0", ParamDecl::GROUP_MEMBER, 0, 0,
        "don't use ZBC compression for all color buffers" },
    { "-zbc_onC", "1", ParamDecl::GROUP_MEMBER, 0, 0,
        "use ZBC compression for all color buffers" },
    { "-zbcC", "1", ParamDecl::GROUP_MEMBER, 0, 0,
        "use ZBC compression for all color buffers" },

    { "-zbc_modeCA", "u",
        (ParamDecl::PARAM_ENFORCE_RANGE | ParamDecl::GROUP_START), 0, 1,
        "ZBC compression mode for color buffer A" },
    { "-zbc_offCA", "0", ParamDecl::GROUP_MEMBER, 0, 0,
        "don't use ZBC compression for color buffer A" },
    { "-zbc_onCA", "1", ParamDecl::GROUP_MEMBER, 0, 0,
        "use ZBC compression for color buffer A" },
    { "-zbcCA", "1", ParamDecl::GROUP_MEMBER, 0, 0,
        "use ZBC compression for color buffer A" },

    { "-zbc_modeCB", "u",
        (ParamDecl::PARAM_ENFORCE_RANGE | ParamDecl::GROUP_START), 0, 1,
        "ZBC compression mode for color buffer B" },
    { "-zbc_offCB", "0", ParamDecl::GROUP_MEMBER, 0, 0,
        "don't use ZBC compression for color buffer B" },
    { "-zbc_onCB", "1", ParamDecl::GROUP_MEMBER, 0, 0,
        "use ZBC compression for color buffer B" },
    { "-zbcCB", "1", ParamDecl::GROUP_MEMBER, 0, 0,
        "use ZBC compression for color buffer B" },

    { "-zbc_modeCC", "u",
        (ParamDecl::PARAM_ENFORCE_RANGE | ParamDecl::GROUP_START), 0, 1,
        "ZBC compression mode for color buffer C" },
    { "-zbc_offCC", "0", ParamDecl::GROUP_MEMBER, 0, 0,
        "don't use ZBC compression for color buffer C" },
    { "-zbc_onCC", "1", ParamDecl::GROUP_MEMBER, 0, 0,
        "use ZBC compression for color buffer C" },
    { "-zbcCC", "1", ParamDecl::GROUP_MEMBER, 0, 0,
        "use ZBC compression for color buffer C" },

    { "-zbc_modeCD", "u",
        (ParamDecl::PARAM_ENFORCE_RANGE | ParamDecl::GROUP_START), 0, 1,
        "ZBC compression mode for color buffer D" },
    { "-zbc_offCD", "0", ParamDecl::GROUP_MEMBER, 0, 0,
        "don't use ZBC compression for color buffer D" },
    { "-zbc_onCD", "1", ParamDecl::GROUP_MEMBER, 0, 0,
        "use ZBC compression for color buffer D" },
    { "-zbcCD", "1", ParamDecl::GROUP_MEMBER, 0, 0,
        "use ZBC compression for color buffer D" },

    { "-zbc_modeCE", "u",
        (ParamDecl::PARAM_ENFORCE_RANGE | ParamDecl::GROUP_START), 0, 1,
        "ZBC compression mode for color buffer E" },
    { "-zbc_offCE", "0", ParamDecl::GROUP_MEMBER, 0, 0,
        "don't use ZBC compression for color buffer E" },
    { "-zbc_onCE", "1", ParamDecl::GROUP_MEMBER, 0, 0,
        "use ZBC compression for color buffer E" },
    { "-zbcCE", "1", ParamDecl::GROUP_MEMBER, 0, 0,
        "use ZBC compression for color buffer E" },

    { "-zbc_modeCF", "u",
        (ParamDecl::PARAM_ENFORCE_RANGE | ParamDecl::GROUP_START), 0, 1,
        "ZBC compression mode for color buffer F" },
    { "-zbc_offCF", "0", ParamDecl::GROUP_MEMBER, 0, 0,
        "don't use ZBC compression for color buffer F" },
    { "-zbc_onCF", "1", ParamDecl::GROUP_MEMBER, 0, 0,
        "use ZBC compression for color buffer F" },
    { "-zbcCF", "1", ParamDecl::GROUP_MEMBER, 0, 0,
        "use ZBC compression for color buffer F" },

    { "-zbc_modeCG", "u",
        (ParamDecl::PARAM_ENFORCE_RANGE | ParamDecl::GROUP_START), 0, 1,
        "ZBC compression mode for color buffer G" },
    { "-zbc_offCG", "0", ParamDecl::GROUP_MEMBER, 0, 0,
        "don't use ZBC compression for color buffer G" },
    { "-zbc_onCG", "1", ParamDecl::GROUP_MEMBER, 0, 0,
        "use ZBC compression for color buffer G" },
    { "-zbcCG", "1", ParamDecl::GROUP_MEMBER, 0, 0,
        "use ZBC compression for color buffer G" },

    { "-zbc_modeCH", "u",
        (ParamDecl::PARAM_ENFORCE_RANGE | ParamDecl::GROUP_START), 0, 1,
        "ZBC compression mode for color buffer H" },
    { "-zbc_offCH", "0", ParamDecl::GROUP_MEMBER, 0, 0,
        "don't use ZBC compression for color buffer H" },
    { "-zbc_onCH", "1", ParamDecl::GROUP_MEMBER, 0, 0,
        "use ZBC compression for color buffer H" },
    { "-zbcCH", "1", ParamDecl::GROUP_MEMBER, 0, 0,
        "use ZBC compression for color buffer H" },

    { "-zbc_modeCZ", "u",
        (ParamDecl::PARAM_ENFORCE_RANGE | ParamDecl::GROUP_START), 0, 1,
        "ZBC compression mode for the Z buffer" },
    { "-zbc_offCZ", "0", ParamDecl::GROUP_MEMBER, 0, 0,
        "don't use ZBC compression for the Z buffer" },
    { "-zbc_onCZ", "1", ParamDecl::GROUP_MEMBER, 0, 0,
        "use ZBC compression for the Z buffer" },
    { "-zbcCZ", "1", ParamDecl::GROUP_MEMBER, 0, 0,
        "use ZBC compression for the Z buffer" },

    { "-gpu_cache_modeC", "u",
        (ParamDecl::PARAM_ENFORCE_RANGE | ParamDecl::GROUP_START), 0, 1,
        "use or don't use GPU cache for all color buffers" },
    { "-gpu_cache_offC", "0", ParamDecl::GROUP_MEMBER, 0, 0,
        "don't use GPU cache for all color buffers" },
    { "-gpu_cache_onC", "1", ParamDecl::GROUP_MEMBER, 0, 0,
        "use GPU cache for all color buffers" },
    { "-sysmem_nolwolatileC", "1",
        ParamDecl::GROUP_MEMBER, 0, 0,
        "use non-volatile memory for all color buffers" },

    { "-gpu_cache_modeCA", "u",
        (ParamDecl::PARAM_ENFORCE_RANGE | ParamDecl::GROUP_START), 0, 1,
        "use or don't use GPU cache for color buffer A" },
    { "-gpu_cache_offCA", "0", ParamDecl::GROUP_MEMBER, 0, 0,
        "don't use GPU cache for color buffer A" },
    { "-gpu_cache_onCA", "1", ParamDecl::GROUP_MEMBER, 0, 0,
        "use GPU cache for color buffer A" },
    { "-sysmem_nolwolatileCA", "1",
        ParamDecl::GROUP_MEMBER, 0, 0,
        "use non-volatile memory for color buffer A" },

    { "-gpu_cache_modeCB", "u",
        (ParamDecl::PARAM_ENFORCE_RANGE | ParamDecl::GROUP_START), 0, 1,
        "use or don't use GPU cache for color buffer B" },
    { "-gpu_cache_offCB", "0",
        ParamDecl::GROUP_MEMBER, 0, 0,
        "don't use GPU cache for color buffer B" },
    { "-gpu_cache_onCB", "1",
        ParamDecl::GROUP_MEMBER, 0, 0,
        "use GPU cache for color buffer B" },
    { "-sysmem_nolwolatileCB", "1",
        ParamDecl::GROUP_MEMBER, 0, 0,
        "use non-volatile memory for color buffer B" },

    { "-gpu_cache_modeCC", "u",
        (ParamDecl::PARAM_ENFORCE_RANGE | ParamDecl::GROUP_START), 0, 1,
        "use or don't use GPU cache for color buffer C" },
    { "-gpu_cache_offCC", "0",
        ParamDecl::GROUP_MEMBER, 0, 0,
        "don't use GPU cache for color buffer C" },
    { "-gpu_cache_onCC", "1",
        ParamDecl::GROUP_MEMBER, 0, 0,
        "use GPU cache for color buffer C" },
    { "-sysmem_nolwolatileCC", "1",
        ParamDecl::GROUP_MEMBER, 0, 0,
        "use non-volatile memory for color buffer C" },

    { "-gpu_cache_modeCD", "u",
        (ParamDecl::PARAM_ENFORCE_RANGE | ParamDecl::GROUP_START), 0, 1,
        "use or don't use GPU cache for color buffer D" },
    { "-gpu_cache_offCD", "0",
        ParamDecl::GROUP_MEMBER, 0, 0,
        "don't use GPU cache for color buffer D" },
    { "-gpu_cache_onCD", "1",
        ParamDecl::GROUP_MEMBER, 0, 0,
        "use GPU cache for color buffer D" },
    { "-sysmem_nolwolatileCD", "1",
        ParamDecl::GROUP_MEMBER, 0, 0,
        "use non-volatile memory for color buffer D" },

    { "-gpu_cache_modeCE", "u",
        (ParamDecl::PARAM_ENFORCE_RANGE | ParamDecl::GROUP_START), 0, 1,
        "use or don't use GPU cache for color buffer E" },
    { "-gpu_cache_offCE", "0",
        ParamDecl::GROUP_MEMBER, 0, 0,
        "don't use GPU cache for color buffer E" },
    { "-gpu_cache_onCE", "1",
        ParamDecl::GROUP_MEMBER, 0, 0,
        "use GPU cache for color buffer E" },
    { "-sysmem_nolwolatileCE", "1",
        ParamDecl::GROUP_MEMBER, 0, 0,
        "use non-volatile memory for color buffer E" },

    { "-gpu_cache_modeCF", "u",
        (ParamDecl::PARAM_ENFORCE_RANGE | ParamDecl::GROUP_START), 0, 1,
        "use or don't use GPU cache for color buffer F" },
    { "-gpu_cache_offCF", "0",
        ParamDecl::GROUP_MEMBER, 0, 0,
        "don't use GPU cache for color buffer F" },
    { "-gpu_cache_onCF", "1",
        ParamDecl::GROUP_MEMBER, 0, 0,
        "use GPU cache for color buffer F" },
    { "-sysmem_nolwolatileCF", "1",
        ParamDecl::GROUP_MEMBER, 0, 0,
        "use non-volatile memory for color buffer F" },

    { "-gpu_cache_modeCG", "u",
        (ParamDecl::PARAM_ENFORCE_RANGE | ParamDecl::GROUP_START), 0, 1,
        "use or don't use GPU cache for color buffer G" },
    { "-gpu_cache_offCG", "0",
        ParamDecl::GROUP_MEMBER, 0, 0,
        "don't use GPU cache for color buffer G" },
    { "-gpu_cache_onCG", "1",
        ParamDecl::GROUP_MEMBER, 0, 0,
        "use GPU cache for color buffer G" },
    { "-sysmem_nolwolatileCG", "1",
        ParamDecl::GROUP_MEMBER, 0, 0,
        "use non-volatile memory for color buffer G" },

    { "-gpu_cache_modeCH", "u",
        (ParamDecl::PARAM_ENFORCE_RANGE | ParamDecl::GROUP_START), 0, 1,
        "use or don't use GPU cache for color buffer H" },
    { "-gpu_cache_offCH", "0",
        ParamDecl::GROUP_MEMBER, 0, 0,
        "don't use GPU cache for color buffer H" },
    { "-gpu_cache_onCH", "1",
        ParamDecl::GROUP_MEMBER, 0, 0,
        "use GPU cache for color buffer H" },
    { "-sysmem_nolwolatileCH", "1",
        ParamDecl::GROUP_MEMBER, 0, 0,
        "use non-volatile memory for color buffer H" },

    { "-gpu_cache_modeZ", "u",
        (ParamDecl::PARAM_ENFORCE_RANGE | ParamDecl::GROUP_START), 0, 1,
        "use or don't use GPU cache for the Z buffer" },
    { "-gpu_cache_offZ", "0",
        ParamDecl::GROUP_MEMBER, 0, 0,
        "don't use GPU cache for the Z buffer" },
    { "-gpu_cache_onZ", "1",
        ParamDecl::GROUP_MEMBER, 0, 0,
        "use GPU cache for the Z buffer" },
    { "-sysmem_nolwolatileZ", "1",
        ParamDecl::GROUP_MEMBER, 0, 0,
        "use non-volatile memory for the Z buffer" },

    { "-gpu_p2p_cache_modeC", "u",
        (ParamDecl::PARAM_ENFORCE_RANGE | ParamDecl::GROUP_START), 0, 1,
        "use or don't use GPU cache for all color buffers in peer memory" },
    { "-gpu_p2p_cache_offC", "0", ParamDecl::GROUP_MEMBER, 0, 0,
        "don't use GPU cache for all color buffers in peer memory" },
    { "-gpu_p2p_cache_onC", "1", ParamDecl::GROUP_MEMBER, 0, 0,
        "use GPU cache for all color buffers in peer memory" },

    { "-gpu_p2p_cache_modeCA", "u",
        (ParamDecl::PARAM_ENFORCE_RANGE | ParamDecl::GROUP_START), 0, 1,
        "use or don't use GPU cache for color buffer A in peer memory" },
    { "-gpu_p2p_cache_offCA", "0", ParamDecl::GROUP_MEMBER, 0, 0,
        "don't use GPU cache for color buffer A in peer memory" },
    { "-gpu_p2p_cache_onCA", "1", ParamDecl::GROUP_MEMBER, 0, 0,
        "use GPU cache for color buffer A in peer memory" },

    { "-gpu_p2p_cache_modeCB", "u",
        (ParamDecl::PARAM_ENFORCE_RANGE | ParamDecl::GROUP_START), 0, 1,
        "use or don't use GPU cache for color buffer B in peer memory" },
    { "-gpu_p2p_cache_offCB", "0", ParamDecl::GROUP_MEMBER, 0, 0,
        "don't use GPU cache for color buffer B in peer memory" },
    { "-gpu_p2p_cache_onCB", "1", ParamDecl::GROUP_MEMBER, 0, 0,
        "use GPU cache for color buffer B in peer memory" },

    { "-gpu_p2p_cache_modeCC", "u",
        (ParamDecl::PARAM_ENFORCE_RANGE | ParamDecl::GROUP_START), 0, 1,
        "use or don't use GPU cache for color buffer C in peer memory" },
    { "-gpu_p2p_cache_offCC", "0", ParamDecl::GROUP_MEMBER, 0, 0,
        "don't use GPU cache for color buffer C in peer memory" },
    { "-gpu_p2p_cache_onCC", "1", ParamDecl::GROUP_MEMBER, 0, 0,
        "use GPU cache for color buffer C in peer memory" },

    { "-gpu_p2p_cache_modeCD", "u",
        (ParamDecl::PARAM_ENFORCE_RANGE | ParamDecl::GROUP_START), 0, 1,
        "use or don't use GPU cache for color buffer D in peer memory" },
    { "-gpu_p2p_cache_offCD", "0", ParamDecl::GROUP_MEMBER, 0, 0,
        "don't use GPU cache for color buffer D in peer memory" },
    { "-gpu_p2p_cache_onCD", "1", ParamDecl::GROUP_MEMBER, 0, 0,
        "use GPU cache for color buffer D in peer memory" },

    { "-gpu_p2p_cache_modeCE", "u",
        (ParamDecl::PARAM_ENFORCE_RANGE | ParamDecl::GROUP_START), 0, 1,
        "use or don't use GPU cache for color buffer E in peer memory" },
    { "-gpu_p2p_cache_offCE", "0", ParamDecl::GROUP_MEMBER, 0, 0,
        "don't use GPU cache for color buffer E in peer memory" },
    { "-gpu_p2p_cache_onCE", "1", ParamDecl::GROUP_MEMBER, 0, 0,
        "use GPU cache for color buffer E in peer memory" },

    { "-gpu_p2p_cache_modeCF", "u",
        (ParamDecl::PARAM_ENFORCE_RANGE | ParamDecl::GROUP_START), 0, 1,
        "use or don't use GPU cache for color buffer F in peer memory" },
    { "-gpu_p2p_cache_offCF", "0", ParamDecl::GROUP_MEMBER, 0, 0,
        "don't use GPU cache for color buffer F in peer memory" },
    { "-gpu_p2p_cache_onCF", "1", ParamDecl::GROUP_MEMBER, 0, 0,
        "use GPU cache for color buffer F in peer memory" },

    { "-gpu_p2p_cache_modeCG", "u",
        (ParamDecl::PARAM_ENFORCE_RANGE | ParamDecl::GROUP_START), 0, 1,
        "use or don't use GPU cache for color buffer G in peer memory" },
    { "-gpu_p2p_cache_offCG", "0", ParamDecl::GROUP_MEMBER, 0, 0,
        "don't use GPU cache for color buffer G in peer memory" },
    { "-gpu_p2p_cache_onCG", "1", ParamDecl::GROUP_MEMBER, 0, 0,
        "use GPU cache for color buffer G in peer memory" },

    { "-gpu_p2p_cache_modeCH", "u",
        (ParamDecl::PARAM_ENFORCE_RANGE | ParamDecl::GROUP_START), 0, 1,
        "use or don't use GPU cache for color buffer H in peer memory" },
    { "-gpu_p2p_cache_offCH", "0", ParamDecl::GROUP_MEMBER, 0, 0,
        "don't use GPU cache for color buffer H in peer memory" },
    { "-gpu_p2p_cache_onCH", "1", ParamDecl::GROUP_MEMBER, 0, 0,
        "use GPU cache for color buffer H in peer memory" },

    { "-gpu_p2p_cache_modeZ", "u",
        (ParamDecl::PARAM_ENFORCE_RANGE | ParamDecl::GROUP_START), 0, 1,
        "use or don't use GPU cache for the Z buffer in peer memory" },
    { "-gpu_p2p_cache_offZ", "0", ParamDecl::GROUP_MEMBER, 0, 0,
        "don't use GPU cache for the Z buffer in peer memory" },
    { "-gpu_p2p_cache_onZ", "1", ParamDecl::GROUP_MEMBER, 0, 0,
        "use GPU cache for the Z buffer in peer memory" },

    { "-split_gpu_cache_modeC", "u",
        (ParamDecl::PARAM_ENFORCE_RANGE | ParamDecl::GROUP_START), 0, 1,
        "use or don't use GPU cache for all color buffer split memory halves" },
    { "-split_gpu_cache_offC", "0", ParamDecl::GROUP_MEMBER, 0, 0,
        "don't use GPU cache for all color buffer split memory halves" },
    { "-split_gpu_cache_onC", "1", ParamDecl::GROUP_MEMBER, 0, 0,
        "use GPU cache for all color buffer split memory halves" },

    { "-split_gpu_cache_modeCA", "u",
        (ParamDecl::PARAM_ENFORCE_RANGE | ParamDecl::GROUP_START), 0, 1,
        "use or don't use GPU cache for color buffer A split memory half" },
    { "-split_gpu_cache_offCA", "0", ParamDecl::GROUP_MEMBER, 0, 0,
        "don't use GPU cache for color buffer A split memory half" },
    { "-split_gpu_cache_onCA", "1", ParamDecl::GROUP_MEMBER, 0, 0,
        "use GPU cache for color buffer A split memory half" },

    { "-split_gpu_cache_modeCB", "u",
        (ParamDecl::PARAM_ENFORCE_RANGE | ParamDecl::GROUP_START), 0, 1,
        "use or don't use GPU cache for color buffer B split memory half" },
    { "-split_gpu_cache_offCB", "0", ParamDecl::GROUP_MEMBER, 0, 0,
        "don't use GPU cache for color buffer B split memory half" },
    { "-split_gpu_cache_onCB", "1", ParamDecl::GROUP_MEMBER, 0, 0,
        "use GPU cache for color buffer B split memory half" },

    { "-split_gpu_cache_modeCC", "u",
        (ParamDecl::PARAM_ENFORCE_RANGE | ParamDecl::GROUP_START), 0, 1,
        "use or don't use GPU cache for color buffer C split memory half" },
    { "-split_gpu_cache_offCC", "0", ParamDecl::GROUP_MEMBER, 0, 0,
        "don't use GPU cache for color buffer C split memory half" },
    { "-split_gpu_cache_onCC", "1", ParamDecl::GROUP_MEMBER, 0, 0,
        "use GPU cache for color buffer C split memory half" },

    { "-split_gpu_cache_modeCD", "u",
        (ParamDecl::PARAM_ENFORCE_RANGE | ParamDecl::GROUP_START), 0, 1,
        "use or don't use GPU cache for color buffer D split memory half" },
    { "-split_gpu_cache_offCD", "0", ParamDecl::GROUP_MEMBER, 0, 0,
        "don't use GPU cache for color buffer D split memory half" },
    { "-split_gpu_cache_onCD", "1", ParamDecl::GROUP_MEMBER, 0, 0,
        "use GPU cache for color buffer D split memory half" },

    { "-split_gpu_cache_modeCE", "u",
        (ParamDecl::PARAM_ENFORCE_RANGE | ParamDecl::GROUP_START), 0, 1,
        "use or don't use GPU cache for color buffer E split memory half" },
    { "-split_gpu_cache_offCE", "0", ParamDecl::GROUP_MEMBER, 0, 0,
        "don't use GPU cache for color buffer E split memory half" },
    { "-split_gpu_cache_onCE", "1", ParamDecl::GROUP_MEMBER, 0, 0,
        "use GPU cache for color buffer E split memory half" },

    { "-split_gpu_cache_modeCF", "u",
        (ParamDecl::PARAM_ENFORCE_RANGE | ParamDecl::GROUP_START), 0, 1,
        "use or don't use GPU cache for color buffer F split memory half" },
    { "-split_gpu_cache_offCF", "0", ParamDecl::GROUP_MEMBER, 0, 0,
        "don't use GPU cache for color buffer F split memory half" },
    { "-split_gpu_cache_onCF", "1", ParamDecl::GROUP_MEMBER, 0, 0,
        "use GPU cache for color buffer F split memory half" },

    { "-split_gpu_cache_modeCG", "u",
        (ParamDecl::PARAM_ENFORCE_RANGE | ParamDecl::GROUP_START), 0, 1,
        "use or don't use GPU cache for color buffer G split memory half" },
    { "-split_gpu_cache_offCG", "0", ParamDecl::GROUP_MEMBER, 0, 0,
        "don't use GPU cache for color buffer G split memory half" },
    { "-split_gpu_cache_onCG", "1", ParamDecl::GROUP_MEMBER, 0, 0,
        "use GPU cache for color buffer G split memory half" },

    { "-split_gpu_cache_modeCH", "u",
        (ParamDecl::PARAM_ENFORCE_RANGE | ParamDecl::GROUP_START), 0, 1,
        "use or don't use GPU cache for color buffer H split memory half" },
    { "-split_gpu_cache_offCH", "0", ParamDecl::GROUP_MEMBER, 0, 0,
        "don't use GPU cache for color buffer H split memory half" },
    { "-split_gpu_cache_onCH", "1", ParamDecl::GROUP_MEMBER, 0, 0,
        "use GPU cache for color buffer H split memory half" },

    { "-split_gpu_cache_modeZ", "u",
        (ParamDecl::PARAM_ENFORCE_RANGE | ParamDecl::GROUP_START), 0, 1,
        "use or don't use GPU cache for the Z buffer split memory half" },
    { "-split_gpu_cache_offZ", "0", ParamDecl::GROUP_MEMBER, 0, 0,
        "don't use GPU cache for the Z buffer split memory half" },
    { "-split_gpu_cache_onZ", "1", ParamDecl::GROUP_MEMBER, 0, 0,
        "use GPU cache for the Z buffer split memory half" },

    UNSIGNED_PARAM("-comptagsZ", "number of compression tags for the Z buffer (1 or 2)"),

    UNSIGNED_PARAM("-comptag_startC", "percentage into the buffer to start compression for all color buffers (default is 0)"),
    UNSIGNED_PARAM("-comptag_startCA", "percentage into the buffer to start compression for color buffer A (default is 0)"),
    UNSIGNED_PARAM("-comptag_startCB", "percentage into the buffer to start compression for color buffer B (default is 0)"),
    UNSIGNED_PARAM("-comptag_startCC", "percentage into the buffer to start compression for color buffer C (default is 0)"),
    UNSIGNED_PARAM("-comptag_startCD", "percentage into the buffer to start compression for color buffer D (default is 0)"),
    UNSIGNED_PARAM("-comptag_startCE", "percentage into the buffer to start compression for color buffer E (default is 0)"),
    UNSIGNED_PARAM("-comptag_startCF", "percentage into the buffer to start compression for color buffer F (default is 0)"),
    UNSIGNED_PARAM("-comptag_startCG", "percentage into the buffer to start compression for color buffer G (default is 0)"),
    UNSIGNED_PARAM("-comptag_startCH", "percentage into the buffer to start compression for color buffer H (default is 0)"),
    UNSIGNED_PARAM("-comptag_startZ", "percentage into the buffer to start compression for the Z buffer (default is 0)"),

    UNSIGNED_PARAM("-comptag_covgC", "percentage of buffer to be compressed for all color buffers (default is 100)"),
    UNSIGNED_PARAM("-comptag_covgCA", "percentage of buffer to be compressed for color buffer A (default is 100)"),
    UNSIGNED_PARAM("-comptag_covgCB", "percentage of buffer to be compressed for color buffer B (default is 100)"),
    UNSIGNED_PARAM("-comptag_covgCC", "percentage of buffer to be compressed for color buffer C (default is 100)"),
    UNSIGNED_PARAM("-comptag_covgCD", "percentage of buffer to be compressed for color buffer D (default is 100)"),
    UNSIGNED_PARAM("-comptag_covgCE", "percentage of buffer to be compressed for color buffer E (default is 100)"),
    UNSIGNED_PARAM("-comptag_covgCF", "percentage of buffer to be compressed for color buffer F (default is 100)"),
    UNSIGNED_PARAM("-comptag_covgCG", "percentage of buffer to be compressed for color buffer G (default is 100)"),
    UNSIGNED_PARAM("-comptag_covgCH", "percentage of buffer to be compressed for color buffer H (default is 100)"),
    UNSIGNED_PARAM("-comptag_covgZ", "percentage of buffer to be compressed for the Z buffer (default is 100)"),

    SIMPLE_PARAM("-fastclear", "deprecated, use -gpu_clear instead"),
    SIMPLE_PARAM("-gpu_clear", "enable gpu clear; by default render buffers are cleared by cpu"),

    UNSIGNED_PARAM("-pitchCA", "force a pitch to be used for color buffer A"),
    UNSIGNED_PARAM("-pitchCB", "force a pitch to be used for color buffer B"),
    UNSIGNED_PARAM("-pitchCC", "force a pitch to be used for color buffer C"),
    UNSIGNED_PARAM("-pitchCD", "force a pitch to be used for color buffer D"),
    UNSIGNED_PARAM("-pitchCE", "force a pitch to be used for color buffer E"),
    UNSIGNED_PARAM("-pitchCF", "force a pitch to be used for color buffer F"),
    UNSIGNED_PARAM("-pitchCG", "force a pitch to be used for color buffer G"),
    UNSIGNED_PARAM("-pitchCH", "force a pitch to be used for color buffer H"),

    UNSIGNED_PARAM("-array_pitchCA", "force an array pitch to be used for color buffer A"),
    UNSIGNED_PARAM("-array_pitchCB", "force an array pitch to be used for color buffer B"),
    UNSIGNED_PARAM("-array_pitchCC", "force an array pitch to be used for color buffer C"),
    UNSIGNED_PARAM("-array_pitchCD", "force an array pitch to be used for color buffer D"),
    UNSIGNED_PARAM("-array_pitchCE", "force an array pitch to be used for color buffer E"),
    UNSIGNED_PARAM("-array_pitchCF", "force an array pitch to be used for color buffer F"),
    UNSIGNED_PARAM("-array_pitchCG", "force an array pitch to be used for color buffer G"),
    UNSIGNED_PARAM("-array_pitchCH", "force an array pitch to be used for color buffer H"),
    UNSIGNED_PARAM("-array_pitchZ", "force an array pitch to be used for the Z buffer"),

    STRING_PARAM("-append_crc_key", "append text to the crc key"),

    { "-RawImageMode", "u", (ParamDecl::PARAM_ENFORCE_RANGE |
                         ParamDecl::GROUP_START | ParamDecl::GROUP_OVERRIDE_OK), RAWSTART, RAWEND, "Read or diable raw (uncompressed) framebuffer images" },
    { "-RawImagesOff", (const char*)RAWOFF,    ParamDecl::GROUP_MEMBER | ParamDecl::GROUP_MEMBER_UNSIGNED, 0, 0, "Disable raw (uncompressed) framebuffer images"},
    { "-RawImages",    (const char*)RAWON,     ParamDecl::GROUP_MEMBER | ParamDecl::GROUP_MEMBER_UNSIGNED, 0, 0, "Read raw (uncompressed) framebuffer images"},

    SIMPLE_PARAM("-RawImagesHW", "Read Raw (uncompressed) framebuffer images on real HW"),
    SIMPLE_PARAM("-crcAllowLocalDump", "allow crc/image dumping to output directory (for GPU's that normally disallow it)"),

    SIGNED_PARAM("-woffsetx", "set the window offset in the x direction"),
    SIGNED_PARAM("-woffsety", "set the window offset in the y direction"),
    SIMPLE_PARAM("-woffset_mod", "window offset changes the image/CRC for this test"),

    SIMPLE_PARAM("-blendreduce", "set the _BLEND_REDUCE_DST_COLOR in ROP to true (only on lw41 and later)"),
    SIMPLE_PARAM("-vcaa_override_blendreduce_crc", "Override 'BLENDREDUCE' crc key generated by option -blendreduce when VCAA enabled"),
    SIMPLE_PARAM("-srgb_write", "Force SRGB_WRITE to enabled"),

    SIMPLE_PARAM("-yilw", "run the trace Y-ilwerted"),
    SIMPLE_PARAM("-yilw_mod", "Y ilwersion changes the image/CRC for this test"),

    SIMPLE_PARAM("-timer", "Time each trace run"),
    SIMPLE_PARAM("-conlwrrent", "place a jump at the end of the push buffer to repeat the test"),
    SIMPLE_PARAM("-single_method", "each method group is broken into a single method when it is sent down"),

    UNSIGNED_PARAM("-pmIgnoreAllButTriggerN", "Ignore all PM triggers except number N (1-based)"),

    { "-alias_startGeometry", "u", (ParamDecl::ALIAS_START | ParamDecl::ALIAS_OVERRIDE_OK), 0, 0, "specify from which SetBeginEnd geometry should be drawn" },
    { "-startGeometry",   "u", ParamDecl::ALIAS_MEMBER, 0, 0, "specify from which SetBeginEnd geometry should be drawn" },
    { "-beginGeometry",   "u", ParamDecl::ALIAS_MEMBER, 0, 0, "specify from which SetBeginEnd geometry should be drawn" },

    UNSIGNED_PARAM("-endGeometry","specify from which SetBeginEnd geometry should be drawn (for IKOS debugging)"),
    STRING_PARAM("-scissor","This option is obsoleted. Please try option -scissor_correct instead" ),
    STRING_PARAM("-scissor_correct","Specifies a scissor rect for acf playback X geometry string style WxH+X+Y eg 16x16+128+132" ),

    SIMPLE_PARAM("-dump_image_every_begin", "dump current/active images for every OGL/D3D Begin"),
    { "-dump_image_nth_begin", "u", ParamDecl::PARAM_MULTI_OK, 0, 0,
      "dump current/active images for the nth OGL/D3D Begin" },
    SIMPLE_PARAM("-dump_image_every_end", "dump current/active images for every OGL/D3D End"),
    { "-dump_image_nth_end", "u", ParamDecl::PARAM_MULTI_OK, 0, 0,
      "dump current/active images for the nth OGL/D3D End" },
    SIMPLE_PARAM("-dump_zlwll_every_end", "dump the whole zlwll ram for every OGL/D3D End"),
    { "-dump_zlwll_nth_end", "u", ParamDecl::PARAM_MULTI_OK, 0, 0,
      "dump the whole zlwll ram for the nth OGL/D3D End" },
    STRING_PARAM("-dump_buffer_every_begin", "dump the specified buffer for every OGL/D3D BEGIN"),
    STRING_PARAM("-dump_buffer_every_end", "dump the specified buffer for every OGL/D3D END"),
    { "-dump_buffer_nth_begin", "tu", ParamDecl::PARAM_MULTI_OK, 0, 0,
      "dump the specified buffer for the nth OGL/D3D BEGIN. Fommat <buffer_filename> <number>" },
    { "-dump_buffer_nth_end", "tu", ParamDecl::PARAM_MULTI_OK, 0, 0,
      "dump the specified buffer for the nth OGL/D3D END. Fommat <buffer_filename> <number>" },
    STRING_PARAM("-dump_image_range_begin", "dump active Ct/Zt images for BEGIN in batch range, range could be  a-b/a-/-b"),
    STRING_PARAM("-dump_image_range_end",   "dump active Ct/Zt images for END in batch range, range could be a-b/a-/-b"),
    UNSIGNED_PARAM("-dump_image_every_n_begin", "dump active Ct/Zt images for BEGIN in every n batches"),
    UNSIGNED_PARAM("-dump_image_every_n_end",   "dump active Ct/Zt images for END in every n batches"),
    SIMPLE_PARAM("-dump_all_buffer_after_test", "dump all buffers after test"),
    {"-dump_image_every_method", "uu", ParamDecl::PARAM_MULTI_OK, 0, 0,
     "dump current/active images for every specified methods in given class. Format: <class ID> <methods address>"},

    {"-dump_buffer_on_event", "tt", ParamDecl::PARAM_MULTI_OK, 0, 0, "dump specific buffer on some event, params: buffer_name event_name" },

    SIMPLE_PARAM("-log_info_every_end", "Print a log info for every OGL/D3D End"),

    PARAM_SUBDECL(conlwrrentParams),

    SIMPLE_PARAM("-add_methods", "add the ability to add methods to the push buffer"),
    UNSIGNED_PARAM("-inject_method", "specifies the address of the method to be injected in conjunction with -add_methods"),
    UNSIGNED_PARAM("-inject_method_gran", "specifies the how many methods ought to occur between nearest pairs of injected methods"),
    SIMPLE_PARAM("-ilwalidate_tcache", "Ilwalidate texture cache at begin end by sticking in SetContextDmaColorA"),
    { "-scale", "f", 0, 0, 0, "scales all geometry (x and y) by factor" },

    SIMPLE_PARAM("-allocSemaNotify", "Align the surface sufficiently (1 page) and point the Semaphore and Notifies context dma to the beginning of the surface"),

    SIMPLE_PARAM("-blend_zero_times_x_is_zero", "Enable 0*x=0 mode for FP blending"),
    SIMPLE_PARAM("-blend_allow_float_pixel_kills", "Enable early-kill optimization for FP blending"),
    UNSIGNED_PARAM("-compression_threshold", "Value for the SET_COMPRESSION_THRESHOLD perf knob"),
    UNSIGNED_PARAM("-lwmcovg_control", "Value for the SET_LWMCOVG_CONTROL perf knob"),
    SIMPLE_PARAM("-disable_raster16x4", "Disable 16x4 rasterization mode"),
    UNSIGNED_PARAM("-early_z_hysteresis", "Value for the SET_EARLY_Z_HYSTERESIS perf knob"),
    UNSIGNED_PARAM("-geometry_clip", "Value for the GEOMETRY_CLIP viewport clip control"),

     // bug 357946, options to change SET_VIEWPORT_CLIP_CONTROL fields
    { "-geom_clip", "u", (ParamDecl::PARAM_ENFORCE_RANGE | ParamDecl::GROUP_START), 0, 5, "Sets the GEOMETRY_CLIP field for SET_VIEWPORT_CLIP_CONTROL" },
    { "-geom_clip_wzero",    "0", ParamDecl::GROUP_MEMBER, 0, 0, "Sets the GEOMETRY_CLIP field for SET_VIEWPORT_CLIP_CONTROL to WZERO_CLIP" },
    { "-geom_clip_ps",       "1", ParamDecl::GROUP_MEMBER, 0, 0, "Sets the GEOMETRY_CLIP field for SET_VIEWPORT_CLIP_CONTROL to PASSTHRU" },
    { "-geom_clip_xy",       "2", ParamDecl::GROUP_MEMBER, 0, 0, "Sets the GEOMETRY_CLIP field for SET_VIEWPORT_CLIP_CONTROL to FRUSTUM_XY_CLIP" },
    { "-geom_clip_xyz",      "3", ParamDecl::GROUP_MEMBER, 0, 0, "Sets the GEOMETRY_CLIP field for SET_VIEWPORT_CLIP_CONTROL to FRUSTUM_XYZ_CLIP" },
    { "-geom_clip_no_zlwll", "4", ParamDecl::GROUP_MEMBER, 0, 0, "Sets the GEOMETRY_CLIP field for SET_VIEWPORT_CLIP_CONTROL to WZERO_CLIP_NO_Z_LWLL" },
    { "-geom_clip_zclip",    "5", ParamDecl::GROUP_MEMBER, 0, 0, "Sets the GEOMETRY_CLIP field for SET_VIEWPORT_CLIP_CONTROL to FRUSTUM_Z_CLIP" },

    { "-pixel_min_z", "u", (ParamDecl::PARAM_ENFORCE_RANGE | ParamDecl::GROUP_START), 0, 1, "Sets the PIXEL_MIN_Z field for SET_VIEWPORT_CLIP_CONTROL" },
    { "-pixel_min_z_clip",  "0", ParamDecl::GROUP_MEMBER, 0, 0, "Sets the PIXEL_MIN_Z field for SET_VIEWPORT_CLIP_CONTROL to CLIP" },
    { "-pixel_min_z_clamp", "1", ParamDecl::GROUP_MEMBER, 0, 0, "Sets the PIXEL_MIN_Z field for SET_VIEWPORT_CLIP_CONTROL to CLAMP" },

    { "-pixel_max_z", "u", (ParamDecl::PARAM_ENFORCE_RANGE | ParamDecl::GROUP_START), 0, 1, "Sets the PIXEL_MAX_Z field for SET_VIEWPORT_CLIP_CONTROL" },
    { "-pixel_max_z_clip",  "0", ParamDecl::GROUP_MEMBER, 0, 0, "Sets the PIXEL_MAX_Z field for SET_VIEWPORT_CLIP_CONTROL to CLIP" },
    { "-pixel_max_z_clamp", "1", ParamDecl::GROUP_MEMBER, 0, 0, "Sets the PIXEL_MAX_Z field for SET_VIEWPORT_CLIP_CONTROL to CLAMP" },

    UNSIGNED_PARAM("-inter_tpc_arbitration_control", "Value for the SET_INTER_TPC_ARBITRATION_CONTROL"),
    UNSIGNED_PARAM("-line_snap_grid", "Number of snap locations per pixel for lines"),
    UNSIGNED_PARAM("-mrt_segment_length", "Segment size in pixels for MRT"),
    SIMPLE_PARAM("-no_colwoys", "Indicates that thread colwoys are disabled"),
    UNSIGNED_PARAM("-non_line_snap_grid", "Number of snap locations per pixel for points and triangles"),
    UNSIGNED_PARAM("-shader_scheduling", "Value for the SET_SHADER_SCHEDULING perf knob"),
    STRING_PARAM("-skip_crc_check", "skip the crc check for all buffers with the specified name or TAG"),
    UNSIGNED_PARAM("-swath_height", "Swath height in pixels"),
    UNSIGNED_PARAM("-thread_mem_throttle", "Maximum SPA thread ID for shader thread memory"),
    UNSIGNED_PARAM("-thread_stack_throttle", "Maximum SPA thread ID for shader thread stack"),
    SIMPLE_PARAM("-thread_mem_throttle_method_hw", "Write USE_HW_MAX method instead of USE_THROTTLE_MAX method (need -thread_mem_throttle option)"),
    SIMPLE_PARAM("-thread_stack_throttle_method_hw", "Write USE_HW_MAX method instead of USE_THROTTLE_MAX method (need -thread_stack_throttle option)"),
    UNSIGNED_PARAM("-tick_control", "Value for the SET_TICK_CONTROL perf knobs"),
    UNSIGNED_PARAM("-tick_control_earlyz", "Value for the SET_TICK_CONTROL_EARLY_Z perf knob"),
    UNSIGNED_PARAM("-tick_control_latez", "Value for the SET_TICK_CONTROL perf knob"),
    UNSIGNED_PARAM("-tpc_partition_width", "TPC partition width in pixels"),
    UNSIGNED_PARAM("-tpc_partition_height", "TPC partition height in pixels"),
    UNSIGNED_PARAM("-tpc_partition_width_zonly", "TPC partition width for Z-only rendering in pixels"),
    UNSIGNED_PARAM("-tpc_partition_height_zonly", "TPC partition height for Z-only rendering in pixels"),
    UNSIGNED_PARAM("-tpc_mask_wait", "TPC mask wait packet count"),

    SIMPLE_PARAM("-zt_count_0", "Disable Zeta surface, and mods will not create it neither. Force SetZtSelect.TargetCount to zero"),
    SIMPLE_PARAM("-prog_zt_as_ct0", "Use the Z buffer as the first color target"),

    // bug 789554
    SIMPLE_PARAM("-disable_crc_chain", "Disable CRC chaining for some tests, e.g. i2m"),

    SIMPLE_PARAM("-pgm_alloc_high", "Allocate shader programs at the top of their 24-bit memory space"),

    UNSIGNED_PARAM("-suballoc_min_align", "Minimum suballoc alignment within all surfaces"),

    // Memory space properties for various stuff
    MEMORY_SPACE_PARAMS("_tex", "textures"),
    MEMORY_SPACE_PARAMS("_vtx", "vertices"),
    MEMORY_SPACE_PARAMS("_wid", "clip ID buffer"),
    MEMORY_SPACE_PARAMS("_notifier", "notifiers"),
    MEMORY_SPACE_PARAMS("_pgm", "shader programs"),
    MEMORY_SPACE_PARAMS("_const", "constant buffer"),
    MEMORY_SPACE_PARAMS_NOP2P("_header", "texture headers"),
    MEMORY_SPACE_PARAMS("_sampler", "texture samplers"),
    MEMORY_SPACE_PARAMS("_sem", "semaphores"),
    MEMORY_SPACE_PARAMS("_sem_16", "semaphores (16B aligned)"),
    MEMORY_SPACE_PARAMS("_stream", "streaming output buffers"),
    MEMORY_SPACE_PARAMS("_idx", "index buffers"),
    MEMORY_SPACE_PARAMS("_thread_mem", "shader thread memory"),
    MEMORY_SPACE_PARAMS("_thread_stack", "shader thread stack"),
    MEMORY_SPACE_PARAMS("_vp2_0", "VP2/BSP dma-context 0"),
    MEMORY_SPACE_PARAMS("_vp2_1", "VP2/BSP dma-context 1"),
    MEMORY_SPACE_PARAMS("_vp2_2", "VP2/BSP dma-context 2"),
    MEMORY_SPACE_PARAMS("_vp2_3", "VP2/BSP dma-context 3"),
    MEMORY_SPACE_PARAMS("_vp2_4", "VP2/BSP dma-context 4"),
    MEMORY_SPACE_PARAMS("_vp2_5", "VP2/BSP dma-context 5"),
    MEMORY_SPACE_PARAMS("_vp2_6", "VP2/BSP dma-context 6"),
    MEMORY_SPACE_PARAMS("_vp2_7", "VP2/BSP dma-context 7"),
    MEMORY_SPACE_PARAMS("_vp2_8", "VP2/BSP dma-context 8"),
    MEMORY_SPACE_PARAMS("_vp2_9", "VP2/BSP dma-context 9"),
    MEMORY_SPACE_PARAMS("_vp2_10", "VP2/BSP dma-context 10"),
    MEMORY_SPACE_PARAMS("_vp2_14", "VP2/BSP dma-context 14"),
    MEMORY_SPACE_PARAMS("_cipher_a", "cipher_dma source"),
    MEMORY_SPACE_PARAMS("_cipher_b", "cipher_dma destination"),
    MEMORY_SPACE_PARAMS("_cipher_c", "cipher_dma extra"),
    MEMORY_SPACE_PARAMS("_vab", "VAB"),
    MEMORY_SPACE_PARAMS("_spill_region", "GS Spill Region"),

    MEMORY_SPACE_PARAMS("_pmu_0", "PMU aperture 0"),
    MEMORY_SPACE_PARAMS("_pmu_1", "PMU aperture 1"),
    MEMORY_SPACE_PARAMS("_pmu_2", "PMU aperture 2"),
    MEMORY_SPACE_PARAMS("_pmu_3", "PMU aperture 3"),
    MEMORY_SPACE_PARAMS("_pmu_4", "PMU aperture 4"),
    MEMORY_SPACE_PARAMS("_pmu_5", "PMU aperture 5"),
    MEMORY_SPACE_PARAMS("_pmu_6", "PMU aperture 6"),
    MEMORY_SPACE_PARAMS("_pmu_7", "PMU aperture 7"),

    MEMORY_SPACE_PARAMS("_lmw", "Shader local memory window"),

    MEMORY_SPACE_PARAMS("_surf", "buffer"),

    { "-wfi_method", "u", (ParamDecl::PARAM_ENFORCE_RANGE |
                           ParamDecl::GROUP_START), WFI_POLL, WFI_INTR_NONSTALL, "How to wait for idle at the end of test" },
    { "-wfi_poll",   (const char*)WFI_POLL, ParamDecl::GROUP_MEMBER | ParamDecl::GROUP_MEMBER_UNSIGNED,
      0, 0, "wait for idle by polling chip registers" },
    { "-wfi_notify", (const char*)WFI_NOTIFY, ParamDecl::GROUP_MEMBER | ParamDecl::GROUP_MEMBER_UNSIGNED,
      0, 0, "wait for idle by polling a notifier" },
    { "-wfi_intr",   (const char*)WFI_INTR, ParamDecl::GROUP_MEMBER | ParamDecl::GROUP_MEMBER_UNSIGNED,
      0, 0, "wait for idle by sleeping until a notifier interrupt arrives" },
    { "-wfi_sleep",  (const char*)WFI_SLEEP, ParamDecl::GROUP_MEMBER | ParamDecl::GROUP_MEMBER_UNSIGNED,
      0, 0, "wait for idle by sleeping 10 seconds" },
    { "-wfi_host",  (const char*)WFI_HOST, ParamDecl::GROUP_MEMBER | ParamDecl::GROUP_MEMBER_UNSIGNED,
      0, 0, "wait for idle by host semaphore" },
    { "-wfi_intr_nonstall", (const char*)WFI_INTR_NONSTALL, ParamDecl::GROUP_MEMBER | ParamDecl::GROUP_MEMBER_UNSIGNED,
      0, 0, "wait for idle by sleeping until a nonstall interrupt arrives" },

    SIMPLE_PARAM("-semaphoreAwaken", "make Semaphores cause an awaken interrupt"),
    SIMPLE_PARAM("-notifyAwaken", "make Notify cause an awaken interrupt"),
    SIMPLE_PARAM("-testContextObjects", "enable testing of illegal context objects"),
    SIMPLE_PARAM("-testSetObject", "enable testing of illegal SetObject objects"),
    SIMPLE_PARAM("-clear_intr_on_exit", "Clear LW_PGRAPH_INTR on exit of the test"),
    UNSIGNED_PARAM("-debug_module_size", "Maximum number of bytes of each module to be printed when run with -debug. 0 means print print entire module"),
    SIMPLE_PARAM("-no_tga_gz", "do not gzip images"),

    SIMPLE_PARAM("-stream_to_color", "apply hack to send streaming output to color buffers"),
    SIMPLE_PARAM("-sem_to_ct0", "apply hack to send semaphores to color buffer A"),
    SIMPLE_PARAM("-sem_to_zt", "apply hack to send semaphores to Z buffer"),
    SIMPLE_PARAM("-notify_to_ct0", "apply hack to send notifiers to color buffer A"),
    SIMPLE_PARAM("-pitch_tex", "make layout of all textures pitch"),
    UNSIGNED_PARAM("-vs_wait", "number of clock cycles DA should wait for another vertex"),

    SIMPLE_PARAM("-compress_tex_image", "compress all render-to-texture image buffers"),
    SIMPLE_PARAM("-compress_tex_depth", "compress all render-to-texture depth buffers"),
    UNSIGNED_PARAM("-comptags_tex",     "number of compression tags for all secondary RTT buffers (1 or 2)"),
    UNSIGNED_PARAM("-comptag_covg_tex", "percentage of buffer to be compressed for all secondary RTT buffers (default is 100)"),
    UNSIGNED_PARAM("-force_class", "class to be used with SetObject"),
    { "-force_subch_class", "uu", ParamDecl::PARAM_MULTI_OK, 0, 0,
      "class to be used for the given subchannel. Format: <subchannel_num> <class>" },
    {"-force_class_to_class", "uu", ParamDecl::PARAM_MULTI_OK, 0, 0, "Force some specific class to be other class which is used with SetObject"},

    STRING_PARAM("-vp2tile0", "tiling mode for dma-context 0"),
    STRING_PARAM("-vp2tile1", "tiling mode for dma-context 1"),
    STRING_PARAM("-vp2tile2", "tiling mode for dma-context 2"),
    STRING_PARAM("-vp2tile3", "tiling mode for dma-context 3"),
    STRING_PARAM("-vp2tile4", "tiling mode for dma-context 4"),
    STRING_PARAM("-vp2tile5", "tiling mode for dma-context 5"),
    STRING_PARAM("-vp2tile6", "tiling mode for dma-context 6"),
    STRING_PARAM("-vp2tile7", "tiling mode for dma-context 7"),
    STRING_PARAM("-vp2tile8", "tiling mode for dma-context 8"),
    STRING_PARAM("-vp2tile9", "tiling mode for dma-context 9"),

    SIMPLE_PARAM("-require_session_key", "require CD to use session key"),

    SIMPLE_PARAM("-sync_scanout", "synchronize exelwtion of a trace with begining of display scanout"),
    SIMPLE_PARAM("-sync_scanout_end", "let the last frame that was scanned out during a trace exelwtion to finish when no crc check is performed on it, so it can be inspected as a whole"),

    UNSIGNED_PARAM("-phase_id_window_size", "specifies a limit for the number of in-flight phaseIDs"),
    UNSIGNED_PARAM("-phase_id_lock_phase", "indicates which phase will cause phase 1 to be locked out"),

    SIMPLE_PARAM("-block_vdp", "to be used with the other non-3d trace plahyers and -block arg"),

    { "-spill_tex2sys",    "u", (ParamDecl::PARAM_ENFORCE_RANGE |
                        ParamDecl::GROUP_START),   1,  2,  "spill textures to sytem memory if FB is full; 1=coh, 2=ncoh" },
    { "-spill_tex2coh",   "1", ParamDecl::GROUP_MEMBER,   0,  0,  "spill textures to coherent memory" },
    { "-spill_tex2ncoh",  "2", ParamDecl::GROUP_MEMBER,   0,  0,  "spill textures to non-coherent memory" },
    SIMPLE_PARAM("-force_tex_spill", "force spilling textures to sysmem even if it is used for RTT"),

    SIMPLE_PARAM("-stop_vpm_capture", "sets LW_PPM_GLOBAL_CNTRL_END_OF_TEST to V_PPM_GLOBAL_CNTRL_END_OF_TEST_INIT"),
    {"-set_shader_perfcounter_control", "t",  ParamDecl::PARAM_MULTI_OK, 0, 0,
     "set the shader performance counter control. Format: <number>:<edge>:<block>:<func>:<event>"},
    {"-set_shader_perfcounter_value", "t",  ParamDecl::PARAM_MULTI_OK, 0, 0,
     "set the shader performance counter value. Format: <number>:<value>"},
    SIMPLE_PARAM("-support_planar_quad_clip", "Write method SetPlanarQuadClip to set PRI register LW_PGRAPH_PRI_VPC_DEBUG_CLIP_SINGLE_SELECT"),

    { "-zlwll_mode", "u", (ParamDecl::PARAM_ENFORCE_RANGE | ParamDecl::GROUP_START),
        ZLWLL_REQUIRED,  ZLWLL_CTXSW_NOCTXSW,  "set zlwll alloc mode for all depth buffers" },
    { "-zlwll_required", "1", ParamDecl::GROUP_MEMBER,
        0,  0,  "all depth buffers must be lwlled" },
    { "-zlwll_optional", "2" , ParamDecl::GROUP_MEMBER,   0,  0,  "failure to allocate zlwll does not fail buffer alloc"},
    { "-zlwll_none",     "4" , ParamDecl::GROUP_MEMBER,   0,  0,  "effectively negates -zlwll"},
    { "-zlwll_ctxsw_seperate_buffer",     "5" , ParamDecl::GROUP_MEMBER,   0,  0,  "setup ctxsw zlwll in seperate buffer mode"},
    { "-zlwll_ctxsw_noctxsw",     "6" , ParamDecl::GROUP_MEMBER,   0,  0,  "setup ctxsw zlwll in no ctxsw mode"},

    UNSIGNED_PARAM("-zlwll_ctxsw_share_ch", "specify the channel to share the ctxsw zlwll buffer with"),

    SIMPLE_PARAM("-pm_ctxsw", "context switch perfmon registers"),

    { "-smpc_ctxsw_mode", "u", (ParamDecl::PARAM_ENFORCE_RANGE | ParamDecl::GROUP_START),
      LWGpuChannel::SMPC_CTXSW_MODE_NO_CTXSW, LWGpuChannel::SMPC_CTXSW_MODE_CTXSW,
      "set context switch mode for sm performance counter registers" },
    { "-smpc_no_ctxsw", (const char*)LWGpuChannel::SMPC_CTXSW_MODE_NO_CTXSW,
      ParamDecl::GROUP_MEMBER | ParamDecl::GROUP_MEMBER_UNSIGNED,
        0,  0,  "disable context switch for sm performance counter registers" },
    { "-smpc_ctxsw", (const char*)LWGpuChannel::SMPC_CTXSW_MODE_CTXSW,
      ParamDecl::GROUP_MEMBER | ParamDecl::GROUP_MEMBER_UNSIGNED,
        0,  0,  "enable context switch for sm performance counter registers" },

    { "-gfx_preemption_mode", "u", (ParamDecl::PARAM_ENFORCE_RANGE | ParamDecl::GROUP_START),
        GR_PREEMPTION_WFI,  GR_PREEMPTION_GFXP,  "set Graphics preemption mode" },
    { "-gfx_preemption_wfi",  "1", ParamDecl::GROUP_MEMBER,
        0,  0,  "standard GR wait-for-idle context switch mode" },
    { "-gfx_preemption_gfxp", "2", ParamDecl::GROUP_MEMBER,
        0,  0,  "GR full preemption context switch mode" },

    { "-compute_preemption_mode", "u", (ParamDecl::PARAM_ENFORCE_RANGE | ParamDecl::GROUP_START),
        COMPUTE_PREEMPTION_WFI,  COMPUTE_PREEMPTION_CILP,  "set Compute preemption mode" },
    { "-compute_preemption_wfi",  "1", ParamDecl::GROUP_MEMBER,
        0,  0,  "standard Compute wait-for-idle context switch mode" },
    { "-compute_preemption_cta",  "2", ParamDecl::GROUP_MEMBER,
        0,  0,  "Compute preemtion with no memory context switch mode" },
    { "-compute_preemption_cilp", "3", ParamDecl::GROUP_MEMBER,
        0,  0,  "Compute instruction level preemption context switch mode" },

    { "-compress_mode", "u", (ParamDecl::PARAM_ENFORCE_RANGE | ParamDecl::GROUP_START),
        COMPR_REQUIRED,  COMPR_NONE, "set compression alloc mode for all buffers" },
    { "-compress_required", "1" , ParamDecl::GROUP_MEMBER,
                                             0,  0, "compression must be used for buffers that request it" },
    { "-compress_optional", "2" , ParamDecl::GROUP_MEMBER,   0,  0, "allows to allocate buffer if compression was requested but not can not be provided"},
    { "-compress_none",     "3" , ParamDecl::GROUP_MEMBER,   0,  0, "effectively negates -compress* args"},

    SIMPLE_PARAM("-displayCA", "Display color buffer A"),
    SIMPLE_PARAM("-displayCB", "Display color buffer B"),
    SIMPLE_PARAM("-displayCC", "Display color buffer C"),
    SIMPLE_PARAM("-displayCD", "Display color buffer D"),
    SIMPLE_PARAM("-displayCE", "Display color buffer E"),
    SIMPLE_PARAM("-displayCF", "Display color buffer F"),
    SIMPLE_PARAM("-displayCG", "Display color buffer G"),
    SIMPLE_PARAM("-displayCH", "Display color buffer H"),

    SIMPLE_PARAM("-disable_zpass_pixel_count", "Disable Zpass pixel counting in rop"),
    SIMPLE_PARAM("-reset_ieee_clean", "Set IEEE Clean to false for all targets"),

    { "-l1_promotion", "u", (ParamDecl::GROUP_START | ParamDecl::PARAM_ENFORCE_RANGE), 0, 4, "Set texture header sector promotion field" },
    { "-l1_promotion_none",     "0", ParamDecl::GROUP_MEMBER, 0, 0, "Clear texture header sector promotion field" },
    { "-l1_promotion_2v",     "1", ParamDecl::GROUP_MEMBER, 0, 0, "Set texture header sector promotion to PROMOTE_TO_2_V" },
    { "-l1_promotion_2h",     "2", ParamDecl::GROUP_MEMBER, 0, 0, "Set texture header sector promotion to PROMOTE_TO_2_H" },
    { "-l1_promotion_all",     "3", ParamDecl::GROUP_MEMBER, 0, 0, "Set texture header sector promotion to PROMOTE_TO_4" },
    { "-l1_promotion_optimal", "4", ParamDecl::GROUP_MEMBER, 0, 0, "Set texture header sector promotion to optimal value" },

    { "-l1_promotion_vid", "u", (ParamDecl::GROUP_START | ParamDecl::PARAM_ENFORCE_RANGE), 0, 3, "Set texture header sector promotion field (only video memory)" },
    { "-l1_promotion_vid_none",     "0", ParamDecl::GROUP_MEMBER, 0, 0, "Clear texture header sector promotion field (only video memory)" },
    { "-l1_promotion_vid_2v",     "1", ParamDecl::GROUP_MEMBER, 0, 0, "Set texture header sector promotion to PROMOTE_TO_2_V (only video memory)" },
    { "-l1_promotion_vid_2h",     "2", ParamDecl::GROUP_MEMBER, 0, 0, "Set texture header sector promotion to PROMOTE_TO_2_H (only video memory)" },
    { "-l1_promotion_vid_all",     "3", ParamDecl::GROUP_MEMBER, 0, 0, "Set texture header sector promotion to PROMOTE_TO_4 (only video memory)" },

    { "-l1_promotion_coh", "u", (ParamDecl::GROUP_START | ParamDecl::PARAM_ENFORCE_RANGE), 0, 3, "Set texture header sector promotion field (only coherent memory)" },
    { "-l1_promotion_coh_none",     "0", ParamDecl::GROUP_MEMBER, 0, 0, "Clear texture header sector promotion field (only coherent memory)" },
    { "-l1_promotion_coh_2v",     "1", ParamDecl::GROUP_MEMBER, 0, 0, "Set texture header sector promotion to PROMOTE_TO_2_V (only coherent memory)" },
    { "-l1_promotion_coh_2h",     "2", ParamDecl::GROUP_MEMBER, 0, 0, "Set texture header sector promotion to PROMOTE_TO_2_H (only coherent memory)" },
    { "-l1_promotion_coh_all",     "3", ParamDecl::GROUP_MEMBER, 0, 0, "Set texture header sector promotion to PROMOTE_TO_4 (only coherent memory)" },

    { "-l1_promotion_ncoh", "u", (ParamDecl::GROUP_START | ParamDecl::PARAM_ENFORCE_RANGE), 0, 3, "Set texture header sector promotion field (only noncoherent memory)" },
    { "-l1_promotion_ncoh_none",   "0", ParamDecl::GROUP_MEMBER, 0, 0, "Clear texture header sector promotion field (only noncoherent memory)" },
    { "-l1_promotion_ncoh_2v",     "1", ParamDecl::GROUP_MEMBER, 0, 0, "Set texture header sector promotion to PROMOTE_TO_2_V (only noncoherent memory)" },
    { "-l1_promotion_ncoh_2h",     "2", ParamDecl::GROUP_MEMBER, 0, 0, "Set texture header sector promotion to PROMOTE_TO_2_H (only noncoherent memory)" },
    { "-l1_promotion_ncoh_all",     "3", ParamDecl::GROUP_MEMBER, 0, 0, "Set texture header sector promotion to PROMOTE_TO_4 (only noncoherent memory)" },

    SIMPLE_PARAM("-no_l2_flush", "disables l2 cache flush before crc check"),
    { "-scale_lmem_size", "u", (ParamDecl::GROUP_START | ParamDecl::PARAM_ENFORCE_RANGE), SCALE_LMEM_SIZE_START, SCALE_LMEM_SIZE_END, "scales lmem chunk size, default per warp" },
    { "-scale_lmem_size_per_warp", (char*)SCALE_LMEM_SIZE_PER_WARP, ParamDecl::GROUP_MEMBER | ParamDecl::GROUP_MEMBER_UNSIGNED, 0, 0, "scales lmem chunk size per warp" },
    { "-scale_lmem_size_per_sm", (char*)SCALE_LMEM_SIZE_PER_TPC, ParamDecl::GROUP_MEMBER | ParamDecl::GROUP_MEMBER_UNSIGNED, 0, 0, "scales lmem chunk size per tpc" },
    { "-scale_lmem_size_none", (char*)SCALE_LMEM_SIZE_NONE, ParamDecl::GROUP_MEMBER | ParamDecl::GROUP_MEMBER_UNSIGNED, 0, 0, "Don't scale lmem chunk size, use trace file size instead." },
    UNSIGNED_PARAM("-scale_down_lmem_by_factor", "specify the divsor value to scale down local memory size"),
    UNSIGNED_PARAM("-scale_up_lmem_by_factor", "specify the value to scale up local memory size"),
    UNSIGNED_PARAM("-set_lmem_size", "Set suggested local memory size instead of MODS callwlating, MODS will do aligning"),
    UNSIGNED_PARAM("-force_sm_count_for_lmem_size", "Forces the number of TPCs in the lmem size callwlation"),
    UNSIGNED_PARAM("-force_warp_count_for_lmem_size", "Forces the number of warps in the lmem size callwlation"),

    { "-set_da_attribute_cache_line", "u", (ParamDecl::GROUP_START | ParamDecl::PARAM_ENFORCE_RANGE), 0, 2, "Sets the line size of the DA Attribute Cache" },
    { "-set_da_attribute_cache_line_size128",   "0", ParamDecl::GROUP_MEMBER, 0, 0, "Sets the line size of the DA Attribute Cache to 128B" },
    { "-set_da_attribute_cache_line_size64",     "1", ParamDecl::GROUP_MEMBER, 0, 0, "Sets the line size of the DA Attribute Cache to 64B" },
    { "-set_da_attribute_cache_line_size32",     "2", ParamDecl::GROUP_MEMBER, 0, 0, "Sets the line size of the DA Attribute Cache to 32B" },

    { "-set_aa_alpha_ctrl_coverage", "u", (ParamDecl::GROUP_START | ParamDecl::PARAM_ENFORCE_RANGE), 0, 1, "Sets the SetAlphaToCoverageOverride method" },
    { "-set_aa_alpha_ctrl_coverage_enable", "1", ParamDecl::GROUP_MEMBER, 0, 0, "Enables SetAlphaToCoverageOverride" },
    { "-set_aa_alpha_ctrl_coverage_disable", "0", ParamDecl::GROUP_MEMBER, 0, 0, "Disables SetAlphaToCoverageOverride" },

    UNSIGNED_PARAM("-hybrid_passes", "sets the number of passes for SetHybridAAControl, default value=1"),
    { "-hybrid_centroid", "u", (ParamDecl::GROUP_START | ParamDecl::PARAM_ENFORCE_RANGE), 0, 1, "sets the centroid field of SetHybridAAControl, defaults to PER_FRAGMENT, 0=PER_FRAGMENT 1=PER_PASS"},
    { "-hybrid_centroid_fragment", "0", ParamDecl::GROUP_MEMBER, 0, 0, "sets the centroid field of SetHybridAAControl to PER_FRAGMENT"},
    { "-hybrid_centroid_pass", "1", ParamDecl::GROUP_MEMBER, 0, 0, "sets the centroid field of SetHybridAAControl to PER_PASS "},
    SIMPLE_PARAM("-hybrid_skip_crc", "skips the HYBRID_CENTROID crc key change"),

    { "-alpha_coverage_aa", "u", (ParamDecl::GROUP_START | ParamDecl::PARAM_ENFORCE_RANGE), 0, 1, "Sets the QUALIFY_BY_ANTI_ALIAS_ENABLE field for SetAlphaToCoverageOverride, default value=1" },
    { "-alpha_coverage_aa_disable", "0", ParamDecl::GROUP_MEMBER, 0, 0, "Sets the QUALIFY_BY_ANTI_ALIAS_ENABLE field for SetAlphaToCoverageOverride to DISABLE"},
    { "-alpha_coverage_aa_enable", "1", ParamDecl::GROUP_MEMBER, 0, 0, "Sets the QUALIFY_BY_ANTI_ALIAS_ENABLE field for SetAlphaToCoverageOverride to ENABLE"},

    { "-alpha_coverage_dither", "u", (ParamDecl::GROUP_START | ParamDecl::PARAM_ENFORCE_RANGE), 0, 2, "Sets the DITHER_FOOTPRINT field for SetAlphaToCoverageDitherControl, default value=1" },
    { "-alpha_coverage_dither_1X1", "0", ParamDecl::GROUP_MEMBER, 0, 0, "Sets the DITHER_FOOTPRINT field for SetAlphaToCoverageDitherControl to PIXELS_1X1"},
    { "-alpha_coverage_dither_2X2", "1", ParamDecl::GROUP_MEMBER, 0, 0, "Sets the DITHER_FOOTPRINT field for SetAlphaToCoverageDitherControl to PIXELS_2X2"},
    { "-alpha_coverage_dither_1X1_virtual", "2", ParamDecl::GROUP_MEMBER, 0, 0, "Sets the DITHER_FOOTPRINT field for SetAlphaToCoverageDitherControl to PIXELS_1X1_VIRTUAL_SAMPLES"},

    { "-alpha_coverage_psmask", "u", (ParamDecl::GROUP_START | ParamDecl::PARAM_ENFORCE_RANGE), 0, 1, "Sets the QUALIFY_BY_PS_SAMPLE_MASK_OUTPUT field for SetAlphaToCoverageOverride, default value=1" },
    {  "-alpha_coverage_psmask_disable", "0", ParamDecl::GROUP_MEMBER, 0, 0, "Sets the QUALIFY_BY_PS_SAMPLE_MASK_OUTPUT field for SetAlphaToCoverageOverride to DISABLE"},
    {  "-alpha_coverage_psmask_enable", "1", ParamDecl::GROUP_MEMBER, 0, 0, "Sets the QUALIFY_BY_PS_SAMPLE_MASK_OUTPUT field for SetAlphaToCoverageOverride to ENABLE"},

    { "-blend_s8u16s16", "u", (ParamDecl::GROUP_START | ParamDecl::PARAM_ENFORCE_RANGE), 0, 1, "Sets the SNORM8_UNORM16_SNORM16 field for SetBlendPerFormatEnable, default value=0" },
    { "-blend_s8u16s16_false", "0", ParamDecl::GROUP_MEMBER, 0, 0, "Sets the SNORM8_UNORM16_SNORM16 field for SetBlendPerFormatEnable to FALSE" },
    { "-blend_s8u16s16_true", "1", ParamDecl::GROUP_MEMBER, 0, 0, "Sets the SNORM8_UNORM16_SNORM16 field for SetBlendPerFormatEnable to TRUE" },

    { "-fp32_blend", "u", (ParamDecl::GROUP_START | ParamDecl::PARAM_ENFORCE_RANGE), 0, 1, "Sets the V field for SetFp32BlendRounding, default value=0" },
    { "-fp32_blend_truncation", "0", ParamDecl::GROUP_MEMBER, 0, 0, "Sets the V field for SetFp32BlendRounding to TRUNCATION" },
    { "-fp32_blend_rtne", "1", ParamDecl::GROUP_MEMBER, 0, 0, "Sets the V field for SetFp32BlendRounding to ROUND_TO_NEAREST_EVEN" },

    { "-vcaa_smask", "u", (ParamDecl::GROUP_START | ParamDecl::PARAM_ENFORCE_RANGE), 0, 2, "Sets the V field for SetVcaaSampleMaskInteraction, default value=0" },
    { "-vcaa_smask_aeote", "0", ParamDecl::GROUP_MEMBER, 0, 0, "Sets the V field for SetVcaaSampleMaskInteraction to ALLOW_ERRORS_ON_TRIANGLE_EDGES" },
    { "-vcaa_smask_cb", "1", ParamDecl::GROUP_MEMBER, 0, 0, "Sets the V field for SetVcaaSampleMaskInteraction to CORRECTED_BEHAVIOUR" },
    { "-vcaa_smask_fvcr", "2", ParamDecl::GROUP_MEMBER, 0, 0, "Sets the V field for SetVcaaSampleMaskInteraction to FORCE_VCAA_COVG_REPLACE" },
    SIMPLE_PARAM("-vcaa_smask_skip_crc", "skips SetVcaaSampleMaskInteraction crc key change"),

    { "-ps_smask_aa", "u", (ParamDecl::GROUP_START | ParamDecl::PARAM_ENFORCE_RANGE), 0, 1, "Sets the QualifyByAntiAliasEnable field for SetPsSampleMaskOutput, default value=0" },
    { "-ps_smask_aa_disable", "0", ParamDecl::GROUP_MEMBER, 0, 0, "Sets the QualifyByAntiAliasEnable field for SetPsSampleMaskOutput to DISABLE"},
    { "-ps_smask_aa_enable", "1", ParamDecl::GROUP_MEMBER, 0, 0, "Sets the QualifyByAntiAliasEnable field for SetPsSampleMaskOutput to ENABLE" },

    { "-insert_method", "uu", ParamDecl::PARAM_MULTI_OK, 0, 0,
      "Insert the given method at the beginning of pushbuffer and for every method <method_op> in the trace, set its data to <data> "
      "Format: <method_op> <data>" },

    { "-insert_class_method", "tuu", ParamDecl::PARAM_MULTI_OK, 0, 0,
      "For subchannel bound to specified class, insert the given method at the beginning of pushbuffer and for every method <method> in the trace, set its data to <data> "
      "Format:  <classname or classvalue> <method> <data>" },
    { "-insert_subch_method", "tuu", ParamDecl::PARAM_MULTI_OK, 0, 0,
      "For subchannel specified by name, insert the given method at the beginning of pushbuffer and for every method <method> in the trace, set its data to <data> "
      "Format:  <subchname> <method> <data>" },

    { "-set_work_distribution",    "u", (ParamDecl::PARAM_ENFORCE_RANGE | ParamDecl::GROUP_START),   1,  8,  "modify value of SetWorkDistribution method. 1=WIDE_DYNAMIC, 2=DEEP_DYNAMIC, 3=WIDE_STATIC, 4=DEEP_STATIC 5=FILL_WIDE_DYNAMIC, 6=FILL_DEEP_DYNAMIC, 7=FILL_WIDE_STATIC, 8=FILL_DEEP_STATIC" },
    { "-set_work_distribution_wide_dynamic", "1", ParamDecl::GROUP_MEMBER, 0, 0, "modify value of SetWorkDistribution method to WIDE_DYNAMIC." },
    { "-set_work_distribution_deep_dynamic", "2", ParamDecl::GROUP_MEMBER, 0, 0, "modify value of SetWorkDistribution method to DEEP_DYNAMIC." },
    { "-set_work_distribution_wide_fixed", "3", ParamDecl::GROUP_MEMBER, 0, 0, "modify value of SetWorkDistribution method to WIDE_FIXED." },
    { "-set_work_distribution_deep_fixed", "4", ParamDecl::GROUP_MEMBER, 0, 0, "modify value of SetWorkDistribution method to DEEP_FIXED." },
    { "-set_work_distribution_fill_wide_dynamic", "5", ParamDecl::GROUP_MEMBER, 0, 0, "modify value of SetWorkDistribution method to FILL_WIDE_DYNAMIC." },
    { "-set_work_distribution_fill_deep_dynamic", "6", ParamDecl::GROUP_MEMBER, 0, 0, "modify value of SetWorkDistribution method to FILL_DEEP_DYNAMIC." },
    { "-set_work_distribution_fill_wide_fixed", "7", ParamDecl::GROUP_MEMBER, 0, 0, "modify value of SetWorkDistribution method to FILL_WIDE_FIXED." },
    { "-set_work_distribution_fill_deep_fixed", "8", ParamDecl::GROUP_MEMBER, 0, 0, "modify value of SetWorkDistribution method to FILL_DEEP_FIXED." },

    SIMPLE_PARAM("-cta_reg_alloc_force","force to override CtaRegisterAllocation value in trace if -cta_reg_alloc(_thcik,_thin) is specified"),
    { "-cta_reg_alloc",    "u", (ParamDecl::PARAM_ENFORCE_RANGE |
                        ParamDecl::GROUP_START),   1,  2,  "modify value of SetCtaRegisterAllocation method. 1=thick, 2=thin" },
    { "-cta_reg_alloc_thick", "1", ParamDecl::GROUP_MEMBER,   0,  0,  "modify value of SetCtaRegisterAllocation method to THICK" },
    { "-cta_reg_alloc_thin",  "2", ParamDecl::GROUP_MEMBER,   0,  0,  "modify value of SetCtaRegisterAllocation method to THIN" },

    SIMPLE_PARAM("-disable_colwoy","disable convoy thread launching"),

    UNSIGNED_PARAM("-block_width_A", "gobs in X dimension per block for memory region A (default is 1)"),
    UNSIGNED_PARAM("-block_width_B", "gobs in X dimension per block for memory region B (default is 1)"),
    UNSIGNED_PARAM("-block_width_C", "gobs in X dimension per block for memory region C (default is 1)"),
    UNSIGNED_PARAM("-block_width_D", "gobs in X dimension per block for memory region D (default is 1)"),
    UNSIGNED_PARAM("-block_width_E", "gobs in X dimension per block for memory region E (default is 1)"),
    UNSIGNED_PARAM("-block_width_F", "gobs in X dimension per block for memory region F (default is 1)"),
    UNSIGNED_PARAM("-block_width_G", "gobs in X dimension per block for memory region G (default is 1)"),
    UNSIGNED_PARAM("-block_width_H", "gobs in X dimension per block for memory region H (default is 1)"),
    UNSIGNED_PARAM("-block_width_I", "gobs in X dimension per block for memory region I (default is 1)"),
    UNSIGNED_PARAM("-block_width_J", "gobs in X dimension per block for memory region J (default is 1)"),
    UNSIGNED_PARAM("-block_width_K", "gobs in X dimension per block for memory region K (default is 1)"),
    UNSIGNED_PARAM("-block_width_L", "gobs in X dimension per block for memory region L (default is 1)"),
    UNSIGNED_PARAM("-block_width_M", "gobs in X dimension per block for memory region M (default is 1)"),
    UNSIGNED_PARAM("-block_width_N", "gobs in X dimension per block for memory region N (default is 1)"),
    UNSIGNED_PARAM("-block_width_O", "gobs in X dimension per block for memory region O (default is 1)"),
    UNSIGNED_PARAM("-block_width_P", "gobs in X dimension per block for memory region P (default is 1)"),

    UNSIGNED_PARAM("-block_height_A", "gobs in Y dimension per block for memory region A (default is 4)"),
    UNSIGNED_PARAM("-block_height_B", "gobs in Y dimension per block for memory region B (default is 4)"),
    UNSIGNED_PARAM("-block_height_C", "gobs in Y dimension per block for memory region C (default is 4)"),
    UNSIGNED_PARAM("-block_height_D", "gobs in Y dimension per block for memory region D (default is 4)"),
    UNSIGNED_PARAM("-block_height_E", "gobs in Y dimension per block for memory region E (default is 4)"),
    UNSIGNED_PARAM("-block_height_F", "gobs in Y dimension per block for memory region F (default is 4)"),
    UNSIGNED_PARAM("-block_height_G", "gobs in Y dimension per block for memory region G (default is 4)"),
    UNSIGNED_PARAM("-block_height_H", "gobs in Y dimension per block for memory region H (default is 4)"),
    UNSIGNED_PARAM("-block_height_I", "gobs in Y dimension per block for memory region I (default is 4)"),
    UNSIGNED_PARAM("-block_height_J", "gobs in Y dimension per block for memory region J (default is 4)"),
    UNSIGNED_PARAM("-block_height_K", "gobs in Y dimension per block for memory region K (default is 4)"),
    UNSIGNED_PARAM("-block_height_L", "gobs in Y dimension per block for memory region L (default is 4)"),
    UNSIGNED_PARAM("-block_height_M", "gobs in Y dimension per block for memory region M (default is 4)"),
    UNSIGNED_PARAM("-block_height_N", "gobs in Y dimension per block for memory region N (default is 4)"),
    UNSIGNED_PARAM("-block_height_O", "gobs in Y dimension per block for memory region O (default is 4)"),
    UNSIGNED_PARAM("-block_height_P", "gobs in Y dimension per block for memory region P (default is 4)"),

    UNSIGNED_PARAM("-block_depth_A", "gobs in Z dimension per block for memory region A (default is 1)"),
    UNSIGNED_PARAM("-block_depth_B", "gobs in Z dimension per block for memory region B (default is 1)"),
    UNSIGNED_PARAM("-block_depth_C", "gobs in Z dimension per block for memory region C (default is 1)"),
    UNSIGNED_PARAM("-block_depth_D", "gobs in Z dimension per block for memory region D (default is 1)"),
    UNSIGNED_PARAM("-block_depth_E", "gobs in Z dimension per block for memory region E (default is 1)"),
    UNSIGNED_PARAM("-block_depth_F", "gobs in Z dimension per block for memory region F (default is 1)"),
    UNSIGNED_PARAM("-block_depth_G", "gobs in Z dimension per block for memory region G (default is 1)"),
    UNSIGNED_PARAM("-block_depth_H", "gobs in Z dimension per block for memory region H (default is 1)"),
    UNSIGNED_PARAM("-block_depth_I", "gobs in Z dimension per block for memory region I (default is 1)"),
    UNSIGNED_PARAM("-block_depth_J", "gobs in Z dimension per block for memory region J (default is 1)"),
    UNSIGNED_PARAM("-block_depth_K", "gobs in Z dimension per block for memory region K (default is 1)"),
    UNSIGNED_PARAM("-block_depth_L", "gobs in Z dimension per block for memory region L (default is 1)"),
    UNSIGNED_PARAM("-block_depth_M", "gobs in Z dimension per block for memory region M (default is 1)"),
    UNSIGNED_PARAM("-block_depth_N", "gobs in Z dimension per block for memory region N (default is 1)"),
    UNSIGNED_PARAM("-block_depth_O", "gobs in Z dimension per block for memory region O (default is 1)"),
    UNSIGNED_PARAM("-block_depth_P", "gobs in Z dimension per block for memory region P (default is 1)"),

    STRING_PARAM("-pte_kind", "specifies default pte kind for gmem regions"),
    STRING_PARAM("-inherit_pte_kind","Set PTE kind to inherit from <VIRTUAL|PHYSICAL> when mapping. Defaults to PHYSICAL." ),

    MEMORY_LOC_PARAMS("_gmem", "all gmem regions"),
    MEMORY_SPACE_PARAMS("_gmem_A", "memory region A"),
    MEMORY_SPACE_PARAMS("_gmem_B", "memory region B"),
    MEMORY_SPACE_PARAMS("_gmem_C", "memory region C"),
    MEMORY_SPACE_PARAMS("_gmem_D", "memory region D"),
    MEMORY_SPACE_PARAMS("_gmem_E", "memory region E"),
    MEMORY_SPACE_PARAMS("_gmem_F", "memory region F"),
    MEMORY_SPACE_PARAMS("_gmem_G", "memory region G"),
    MEMORY_SPACE_PARAMS("_gmem_H", "memory region H"),
    MEMORY_SPACE_PARAMS("_gmem_I", "memory region I"),
    MEMORY_SPACE_PARAMS("_gmem_J", "memory region J"),
    MEMORY_SPACE_PARAMS("_gmem_K", "memory region K"),
    MEMORY_SPACE_PARAMS("_gmem_L", "memory region L"),
    MEMORY_SPACE_PARAMS("_gmem_M", "memory region M"),
    MEMORY_SPACE_PARAMS("_gmem_N", "memory region N"),
    MEMORY_SPACE_PARAMS("_gmem_O", "memory region O"),
    MEMORY_SPACE_PARAMS("_gmem_P", "memory region P"),

    MEMORY_SPACE_PARAMS("_LodStat", "Texture LOD statistics"),
    MEMORY_SPACE_PARAMS("_zlwll", "Zlwll RAM buffer"),
    MEMORY_SPACE_PARAMS("_sgd", "Selfgild buffer"),

    BUFF_LOC_PARAMS_NOP2P("_dmard", "dmard temp buffer"),

    // Fermi by default uses right size
    SIMPLE_PARAM("-fermi_gob", "Use Fermi gob (i.e. 64x8B"),

    { "-vab_size",    "u", (ParamDecl::PARAM_ENFORCE_RANGE |
                            ParamDecl::GROUP_START),   0,  6,  "set VAB size" },
    { "-vab_32k",           "0", ParamDecl::GROUP_MEMBER,   0,  0,  "create  32K VAB buffer (default)" },
    { "-vab_64k",           "1", ParamDecl::GROUP_MEMBER,   0,  0,  "create  64K VAB buffer" },
    { "-vab_128k",          "2", ParamDecl::GROUP_MEMBER,   0,  0,  "create 128K VAB buffer" },
    { "-vab_256k",          "3", ParamDecl::GROUP_MEMBER,   0,  0,  "create 256K VAB buffer" },
    { "-vab_none",          "4", ParamDecl::GROUP_MEMBER,   0,  0,  "don't allocate VAB buffer, don't inject VAB methods" },
    { "-vab_cache_only_4k", "5", ParamDecl::GROUP_MEMBER,   0,  0,  "create 4K VAB buffer for L2 cache only mode" },
    { "-vab_cache_min",     "6", ParamDecl::GROUP_MEMBER,   0,  0,  "create minimum supportable VAB buffer for L2 cache only mode" },

    // SLI test params.
    UNSIGNED_PARAM("-sli_local_surfaces", "number of surfaces to be made local on each GPU (default 100)"),
    UNSIGNED_PARAM("-sli_remote_surfaces", "number of surfaces to be made remote on each GPU (default 0)"),
    UNSIGNED_PARAM("-sli_seed", "seed for the random number generator used for distributing the surfaces over the GPUs"),
    SIMPLE_PARAM("-hsli", "enables hybrid SLI crc chaining"),
    // P2P test params.
    UNSIGNED_PARAM("-p2p_local_surfaces", "number of surfaces to be made local on each GPU (default 100)"),
    UNSIGNED_PARAM("-p2p_remote_surfaces", "number of surfaces to be made remote on each GPU (default 0)"),
    UNSIGNED_PARAM("-p2p_seed", "seed for the random number generator used for distributing the surfaces over the GPUs"),

    // SIMPLE_PARAM("-p2p_tex", "puts texture data in peer memory"),
    { "-sli_scissor", "uuuu", ParamDecl::PARAM_FEWER_OK, 0, 0, "specifies how work is split between GPUs working in SLI" },
    { "-sli_surfaceclip", "uuuu", ParamDecl::PARAM_FEWER_OK, 0, 0, "Enable SLI SFR mode using surface clip: specify how to split between GPUs working in SLI. Eg '-sli_surfaceclip 1 1' will split the Surface in the middle between gpu0 and gpu1" },
    SIMPLE_PARAM("-sli_scissor_no_stitching", "turns off stitching of framebuffers scissored with -sli_scissor"),

    SIMPLE_PARAM("-optimal_block_size", "use optimal block size for buffers with blocklinear layout"),
    SIMPLE_PARAM("-nullz", "disable depth buffer"),

    SIMPLE_PARAM("-flushPriorToCRC", "try to induce a testbench flush prior to running crc code"),

    SIMPLE_PARAM("-samplemask_d3d_swizzle", "Swizzle the AA sample mask for AA 2X1_D3D and 4X2_D3D"),
    SIMPLE_PARAM("-samplemask_4x2_vc8_swizzle", "Swizzle the AA sample mask for AA 4X2_VC_8 from tesla order to fermi"),
    STRING_PARAM("-interrupt_file", "Specify the interrupt file name used by the trace. Default name is 'test.int'"),
    STRING_PARAM("-interrupt_dir", "Specify the directory the interrupt file is located. Default is the test directory"),
    SIMPLE_PARAM("-interrupt_check_ignore_order", "Check interrupt strings without considering the order."),
    SIMPLE_PARAM("-skip_intr_check", "Do NOT check the HW interrupts for a trace3d test.  Only use this option if you know what you're doing..."),
    SIMPLE_PARAM("-compare_untagged_intr", "In SMC mode, match test's and interrupt's GrIdx and also match untagged interrupts. In legacy mode this argument will have no effect"),
    SIMPLE_PARAM("-compare_all_intr", "In SMC mode, match all interrupts (untagged, same GrIdx and different GrIdx). In legacy mode this argument will have no effect"),

    TWO_ARGS_IN_RANGE("-reduce_thresh_u8", 0, 255, "sends SetReduceColorThresholdsUnorm8 with <aggressive> and <conservative> values"),
    TWO_ARGS_IN_RANGE("-reduce_thresh_fp16", 0, 255, "sends SetReduceColorThresholdsFp16 with <aggressive> and <conservative> values"),
    TWO_ARGS_IN_RANGE("-reduce_thresh_u10", 0, 255, "sends SetReduceColorThresholdsUnorm10 with <aggressive> and <conservative> values"),
    TWO_ARGS_IN_RANGE("-reduce_thresh_u16", 0, 255, "sends SetReduceColorThresholdsUnorm16 with <aggressive> and <conservative> values"),
    TWO_ARGS_IN_RANGE("-reduce_thresh_fp11", 0, 255, "sends SetReduceColorThresholdsFp11 with <aggressive> and <conservative> values"),
    TWO_ARGS_IN_RANGE("-reduce_thresh_srgb8", 0, 255, "sends SetReduceColorThresholdsSrgb8 with <aggressive> and <conservative> values"),

    { "-set_zlwll_format",  "u", (ParamDecl::PARAM_ENFORCE_RANGE |
                           ParamDecl::GROUP_START), 0, 3, "Set Zlwll internal storage format for all zlwll regions" },
    { "-set_zlwll_format_msb",   "0", ParamDecl::GROUP_MEMBER, 0, 0, "Set Zlwll internal storage format for all zlwll regions to MSB" },
    { "-set_zlwll_format_fp",    "1", ParamDecl::GROUP_MEMBER, 0, 0, "Set Zlwll internal storage format for all zlwll regions to FB" },
    { "-set_zlwll_format_ztrick","2", ParamDecl::GROUP_MEMBER, 0, 0, "Set Zlwll internal storage format for all zlwll regions to ZTRICK" },
    { "-set_zlwll_format_zf32_1","3", ParamDecl::GROUP_MEMBER, 0, 0, "Set Zlwll internal storage format for all zlwll regions to ZF32_1" },
    { "-set_zlwll_dir",  "u", (ParamDecl::PARAM_ENFORCE_RANGE |
            ParamDecl::GROUP_START), 0, 1, "Set Zlwll preferred direction for all zlwll regions"},
    { "-set_zlwll_dir_less",    "0", ParamDecl::GROUP_MEMBER, 0, 0, "Set Zlwll preferred direction to less for all zlwll regions"},
    { "-set_zlwll_dir_greater", "1", ParamDecl::GROUP_MEMBER, 0, 0, "Set Zlwll preferred direction to greater for all zlwll regions"},
    SIMPLE_PARAM("-no_pb_massage", "No pushbuffer massaging (Render target has to be color0/Z)."),
    SIMPLE_PARAM("-use_alloc_surface_for_rt_alloc_only", "Only create color/Z surfaces if they are specified via ALLOC_SURFACE command in the trace"),

    UNSIGNED_PARAM("-alloc_lwenc_rr", "-alloc_lwenc_rr <first_inst>: alloc lwenc instance in round-robin way: first_channel->first_inst specified; second_channel->first_inst+1"),
    UNSIGNED_PARAM("-alloc_lwdec_rr", "-alloc_lwdec_rr <first_inst>: alloc lwdec instance in round-robin way: first_channel->first_inst specified; second_channel->first_inst+1"),
    UNSIGNED_PARAM("-alloc_lwjpg_rr", "-alloc_lwjpg_rr <first_inst>: alloc lwjpg instance in round-robin way: first_channel->first_inst specified; second_channel->first_inst+1"),
    UNSIGNED_PARAM("-set_first_ce_instance",  "first instance of the CE to allocate"),
    { "-set_subch_ce", "ttt", ParamDecl::PARAM_MULTI_OK, 0, 0, "Set copy engine number for subchannel, format <channel name> <subchannel name> <ce number or ce name like CE0/CE1/GRCOPY>"},
    SIMPLE_PARAM("-allow_grcopy_in_ce_assignment", "Involve GrCopy in ce automatic assignment; this arg must cowork with set_first_ce_instance"),
    SIMPLE_PARAM("-enable_ecov_checking", "Enable ECover checking"),
    SIMPLE_PARAM("-enable_ecov_checking_only", "Enable ECover checking only if a valid ecov data file exists"),
    SIMPLE_PARAM("-nullEcover", "indicates meaningless ecoverage checking -- this happens sometimes when running test with certain priv registers"),
    { "-ecov_file", "t", ParamDecl::PARAM_MULTI_OK, 0, 0, "Specify the name of ecov checking file. Without this arg, mods will find test.ecov in test dir." },
    SIMPLE_PARAM("-allow_ecov_with_ctxswitch", "By default, the ecov checking will be skipped in \"-ctxswitch\" cases, and this argument will force the ecov checking even with \"-ctxswitch\""),
    SIMPLE_PARAM("-ignore_ecov_file_errors", "Ignore errors found in ECover file"),
    STRING_PARAM("-ignore_ecov_tags", "ignore these ecov tags or class names when doing ecov crc chain matching per ecov line. Format: -ignore_ecov_tags <className>:<className>:..."),
    UNSIGNED_PARAM("-spill_region", "sets GS spill region"),
    {"-viewport_clip", "uuuu", ParamDecl::PARAM_MULTI_OK, 0, 0, "X0 WIDTH Y0 HEIGHT to be used with SetViewportClip*"},
    {"-viewport_scale", "uuu", ParamDecl::PARAM_MULTI_OK, 0, 0, "X Y Z to be used with SetViewportScale*"},
    {"-viewport_offset", "uuu", ParamDecl::PARAM_MULTI_OK, 0, 0, "X Y Z to be used with SetViewportOffset*"},
    STRING_PARAM("-plugin","specifies path to a loadable library implementing the trace_3d plugin protocol, everything after this path is passed to the plugin as initialization parameters." ),
    STRING_PARAM("-name", "set the name for the test"),
    {"-nset_cta_raster", "uuu", ParamDecl::PARAM_MULTI_OK, 0, 0,
        "modify values of SetCtaRasterSize for each launch, Format: -nset_cta_raster <w1> <h1> <d1> ... -nset_cta_raster <wn> <hn> <dn> (n<30)"},
    UNSIGNED_PARAM("-max_quads_per_subtile", "set the max quads number of each subtile(Fermi only)"),

    { "-dump_images",  "u", (ParamDecl::PARAM_ENFORCE_RANGE | ParamDecl::GROUP_START), 0, 1, "Dump images" },
    { "-dump_images_on_crc_fail",   "0", ParamDecl::GROUP_MEMBER, 0, 0, "Dump all color & z images if color or z crc fail" },
    { "-dump_images_never",         "1", ParamDecl::GROUP_MEMBER, 0, 0, "Never dump images" },

    UNSIGNED_PARAM("-comptag_offset_min", "Set the compress tag offset start address for all compressible buffers, RM maintains the actual incremental offset"),
    UNSIGNED_PARAM("-comptag_offsetCA", "Explicitly set the compress tag offset for colorA, a used address causes allocation fail"),
    UNSIGNED_PARAM("-comptag_offsetCB", "Explicitly set the compress tag offset for colorB, a used address causes allocation fail"),
    UNSIGNED_PARAM("-comptag_offsetCC", "Explicitly set the compress tag offset for colorC, a used address causes allocation fail"),
    UNSIGNED_PARAM("-comptag_offsetCD", "Explicitly set the compress tag offset for colorD, a used address causes allocation fail"),
    UNSIGNED_PARAM("-comptag_offsetCE", "Explicitly set the compress tag offset for colorE, a used address causes allocation fail"),
    UNSIGNED_PARAM("-comptag_offsetCF", "Explicitly set the compress tag offset for colorF, a used address causes allocation fail"),
    UNSIGNED_PARAM("-comptag_offsetCG", "Explicitly set the compress tag offset for colorG, a used address causes allocation fail"),
    UNSIGNED_PARAM("-comptag_offsetCH", "Explicitly set the compress tag offset for colorH, a used address causes allocation fail"),
    UNSIGNED_PARAM("-comptag_offsetZ",  "Explicitly set the compress tag offset for Z buffer, a used address causes allocation fail"),
    UNSIGNED_PARAM("-loop_crc", "number of times to read and crc check final buffers"),
    SIMPLE_PARAM("-send_rt_methods", "Send pb methods related to rendertargets (normally sent by trace)"),
    SIMPLE_PARAM("-memory_save_mode", "This option is obsolete because memory save mode is always applied by default. Aggressively save memory usage for MODS."),
    SIMPLE_PARAM("-disable_memory_save_mode", "Disable memory save mode(aggressively save memory usage for MODS) which is enabled by default."),
    SIMPLE_PARAM("-no_dynamic_allocation", "Prevents ALLOC_SURFACE buffers from being dynamically allocated"),
    SIMPLE_PARAM("-zbc_skip_ltc_setup", "Prevents MODS from writing to the L2 clear table registers when ZBC is active"),
    SIMPLE_PARAM("-disable_map_to_backingstore", "Not map to backing strore even trace header file specifies it"),
    UNSIGNED_PARAM("-sli_mask", "Mask to indicate which GPU(s) are enabled to map peer buffers by another GPU(s)"),
    SIMPLE_PARAM("-ignore_channel_errors", "Ignore channel errors during status checking. DO NOT use this option unless you know what you're doing"),
    SIMPLE_PARAM("-ignore_channel_errors_for_init_methods", "Ignore channel errors when mods sends init methods but does not WFI failure due to channel errors."),
    SIMPLE_PARAM("-quick_exit", "Exit MODS as soon as the test results are recorded, without shutting down the GPUs"),
    UNSIGNED_PARAM("-printrefmismatch", "Number of lines of mismatched value to be printed in case of REF_CHECK crc failure(default 100)"),

    UNSIGNED_PARAM("-pagepool_size",  "set the size for the pagepool buffer in TOTAL_PAGES (must be <= allocate amount)"),

    UNSIGNED_PARAM("-crc_chunk_size", "Set the chunk size when doing partial CRC check, 0 or by default mods uses the whole size"),
    // These options are used to modify SPH fields for all shader files
    // In most cases MODS options should be in lower cases and connected by '_',
    // while here we have to deal with many SPH fields, it's hard to get a common
    // naming rule to keep name clear and straightforward, so I think below group
    // of options are special cases
    {"-sph_force_attr_bits",           "t", ParamDecl::PARAM_MULTI_OK, 0, 0, "Modify SPH IMAP/OMAP for all shaders, format: ##..##,##..##"},
    {"-sph_is_two_sided",              "t", ParamDecl::PARAM_MULTI_OK, 0, 0, "Tell MODS whether two sided light is enabled, used in SPH update"},
    {"-sph_MrtEnable",                 "u", ParamDecl::PARAM_MULTI_OK, 0, 0, "Modify this SPH field for all shaders"},
    {"-sph_KillsPixels",               "u", ParamDecl::PARAM_MULTI_OK, 0, 0, "Modify this SPH field for all shaders"},
    {"-sph_DoesGlobalStore",           "u", ParamDecl::PARAM_MULTI_OK, 0, 0, "Modify this SPH field for all shaders"},
    {"-sph_SassVersion",               "u", ParamDecl::PARAM_MULTI_OK, 0, 0, "Modify this SPH field for all shaders"},
    {"-sph_DoesLoadOrStore",           "u", ParamDecl::PARAM_MULTI_OK, 0, 0, "Modify this SPH field for all shaders"},
    {"-sph_DoesFp64",                  "u", ParamDecl::PARAM_MULTI_OK, 0, 0, "Modify this SPH field for all shaders"},
    {"-sph_StreamOutMask",             "u", ParamDecl::PARAM_MULTI_OK, 0, 0, "Modify this SPH field for all shaders"},
    {"-sph_ShaderLocalMemoryLowSize",  "u", ParamDecl::PARAM_MULTI_OK, 0, 0, "Modify this SPH field for all shaders"},
    {"-sph_PerPatchAttributeCount",    "u", ParamDecl::PARAM_MULTI_OK, 0, 0, "Modify this SPH field for all shaders"},
    {"-sph_ShaderLocalMemoryHighSize", "u", ParamDecl::PARAM_MULTI_OK, 0, 0, "Modify this SPH field for all shaders"},
    {"-sph_ThreadsPerInputPrimitive",  "u", ParamDecl::PARAM_MULTI_OK, 0, 0, "Modify this SPH field for all shaders"},
    {"-sph_ShaderLocalMemoryCrsSize",  "u", ParamDecl::PARAM_MULTI_OK, 0, 0, "Modify this SPH field for all shaders"},
    {"-sph_OutputTopology",            "u", ParamDecl::PARAM_MULTI_OK, 0, 0, "Modify this SPH field for all shaders"},
    {"-sph_MaxOutputVertexCount",      "u", ParamDecl::PARAM_MULTI_OK, 0, 0, "Modify this SPH field for all shaders"},
    {"-sph_StoreReqStart",             "u", ParamDecl::PARAM_MULTI_OK, 0, 0, "Modify this SPH field for all shaders"},
    {"-sph_StoreReqEnd",               "u", ParamDecl::PARAM_MULTI_OK, 0, 0, "Modify this SPH field for all shaders"},
    // This group of options are used to modify SPH fields for specified file
    {"-sph_MrtEnable_one",                 "tu", ParamDecl::PARAM_MULTI_OK, 0, 0, "Modify SPH of this shader file, see field from name"},
    {"-sph_KillsPixels_one",               "tu", ParamDecl::PARAM_MULTI_OK, 0, 0, "Modify SPH of this shader file, see field from name"},
    {"-sph_DoesGlobalStore_one",           "tu", ParamDecl::PARAM_MULTI_OK, 0, 0, "Modify SPH of this shader file, see field from name"},
    {"-sph_SassVersion_one",               "tu", ParamDecl::PARAM_MULTI_OK, 0, 0, "Modify SPH of this shader file, see field from name"},
    {"-sph_DoesLoadOrStore_one",           "tu", ParamDecl::PARAM_MULTI_OK, 0, 0, "Modify SPH of this shader file, see field from name"},
    {"-sph_DoesFp64_one",                  "tu", ParamDecl::PARAM_MULTI_OK, 0, 0, "Modify SPH of this shader file, see field from name"},
    {"-sph_StreamOutMask_one",             "tu", ParamDecl::PARAM_MULTI_OK, 0, 0, "Modify SPH of this shader file, see field from name"},
    {"-sph_ShaderLocalMemoryLowSize_one",  "tu", ParamDecl::PARAM_MULTI_OK, 0, 0, "Modify SPH of this shader file, see field from name"},
    {"-sph_PerPatchAttributeCount_one",    "tu", ParamDecl::PARAM_MULTI_OK, 0, 0, "Modify SPH of this shader file, see field from name"},
    {"-sph_ShaderLocalMemoryHighSize_one", "tu", ParamDecl::PARAM_MULTI_OK, 0, 0, "Modify SPH of this shader file, see field from name"},
    {"-sph_ThreadsPerInputPrimitive_one",  "tu", ParamDecl::PARAM_MULTI_OK, 0, 0, "Modify SPH of this shader file, see field from name"},
    {"-sph_ShaderLocalMemoryCrsSize_one",  "tu", ParamDecl::PARAM_MULTI_OK, 0, 0, "Modify SPH of this shader file, see field from name"},
    {"-sph_OutputTopology_one",            "tu", ParamDecl::PARAM_MULTI_OK, 0, 0, "Modify SPH of this shader file, see field from name"},
    {"-sph_MaxOutputVertexCount_one",      "tu", ParamDecl::PARAM_MULTI_OK, 0, 0, "Modify SPH of this shader file, see field from name"},
    {"-sph_StoreReqStart_one",             "tu", ParamDecl::PARAM_MULTI_OK, 0, 0, "Modify SPH of this shader file, see field from name"},
    {"-sph_StoreReqEnd_one",               "tu", ParamDecl::PARAM_MULTI_OK, 0, 0, "Modify SPH of this shader file, see field from name"},

    UNSIGNED_PARAM("-start_cta_grid","specify start of range of compute BeginGrid/EndGrid pairs to be sent (count starts at 0)"),
    UNSIGNED_PARAM("-end_cta_grid","specify end of range of compute BeginGrid/EndGrid pairs to be sent (count starts at 0)"),
    UNSIGNED_PARAM("-sli_sfr_subdev", "specify the subdev number need to be simulated in sfr mode, using with -sli_surfaceclip"),

    { "-map_modeC", "u",
        (ParamDecl::PARAM_ENFORCE_RANGE | ParamDecl::GROUP_START), 0, 1,
        "Memory mapping mode for all color buffers" },
    { "-map_directC", "0", ParamDecl::GROUP_MEMBER, 0, 0,
        "Use direct memory mapping for all color buffers" },
    { "-map_reflectedC", "1", ParamDecl::GROUP_MEMBER, 0, 0,
        "Use reflected memory mapping for all color buffers" },

    { "-map_modeCA", "u",
        (ParamDecl::PARAM_ENFORCE_RANGE | ParamDecl::GROUP_START), 0, 1,
        "Memory mapping mode for color buffer A" },
    { "-map_directCA", "0", ParamDecl::GROUP_MEMBER, 0, 0,
        "Use direct memory mapping for color buffer A" },
    { "-map_reflectedCA", "1", ParamDecl::GROUP_MEMBER, 0, 0,
        "Use reflected memory mapping for color buffer A" },

    { "-map_modeCB", "u",
        (ParamDecl::PARAM_ENFORCE_RANGE | ParamDecl::GROUP_START), 0, 1,
        "Memory mapping mode for color buffer B" },
    { "-map_directCB", "0", ParamDecl::GROUP_MEMBER, 0, 0,
        "Use direct memory mapping for color buffer B" },
    { "-map_reflectedCB", "1", ParamDecl::GROUP_MEMBER, 0, 0,
        "Use reflected memory mapping for color buffer B" },

    { "-map_modeCC", "u",
        (ParamDecl::PARAM_ENFORCE_RANGE | ParamDecl::GROUP_START), 0, 1,
        "Memory mapping mode for color buffer C" },
    { "-map_directCC", "0", ParamDecl::GROUP_MEMBER, 0, 0,
        "Use direct memory mapping for color buffer C" },
    { "-map_reflectedCC", "1", ParamDecl::GROUP_MEMBER, 0, 0,
        "Use reflected memory mapping for color buffer C" },

    { "-map_modeCD", "u",
        (ParamDecl::PARAM_ENFORCE_RANGE | ParamDecl::GROUP_START), 0, 1,
        "Memory mapping mode for color buffer D" },
    { "-map_directCD", "0", ParamDecl::GROUP_MEMBER, 0, 0,
        "Use direct memory mapping for color buffer D" },
    { "-map_reflectedCD", "1", ParamDecl::GROUP_MEMBER, 0, 0,
        "Use reflected memory mapping for color buffer D" },

    { "-map_modeCE", "u",
        (ParamDecl::PARAM_ENFORCE_RANGE | ParamDecl::GROUP_START), 0, 1,
        "Memory mapping mode for color buffer E" },
    { "-map_directCE", "0", ParamDecl::GROUP_MEMBER, 0, 0,
        "Use direct memory mapping for color buffer E" },
    { "-map_reflectedCE", "1", ParamDecl::GROUP_MEMBER, 0, 0,
        "Use reflected memory mapping for color buffer E" },

    { "-map_modeCF", "u",
        (ParamDecl::PARAM_ENFORCE_RANGE | ParamDecl::GROUP_START), 0, 1,
        "Memory mapping mode for color buffer F" },
    { "-map_directCF", "0", ParamDecl::GROUP_MEMBER, 0, 0,
        "Use direct memory mapping for color buffer F" },
    { "-map_reflectedCF", "1", ParamDecl::GROUP_MEMBER, 0, 0,
        "Use reflected memory mapping for color buffer F" },

    { "-map_modeCG", "u",
        (ParamDecl::PARAM_ENFORCE_RANGE | ParamDecl::GROUP_START), 0, 1,
        "Memory mapping mode for color buffer G" },
    { "-map_directCG", "0", ParamDecl::GROUP_MEMBER, 0, 0,
        "Use direct memory mapping for color buffer G" },
    { "-map_reflectedCG", "1", ParamDecl::GROUP_MEMBER, 0, 0,
        "Use reflected memory mapping for color buffer G" },

    { "-map_modeCH", "u",
        (ParamDecl::PARAM_ENFORCE_RANGE | ParamDecl::GROUP_START), 0, 1,
        "Memory mapping mode for color buffer H" },
    { "-map_directCH", "0", ParamDecl::GROUP_MEMBER, 0, 0,
        "Use direct memory mapping for color buffer H" },
    { "-map_reflectedCH", "1", ParamDecl::GROUP_MEMBER, 0, 0,
        "Use reflected memory mapping for color buffer H" },

    { "-map_modeZ", "u",
        (ParamDecl::PARAM_ENFORCE_RANGE | ParamDecl::GROUP_START), 0, 1,
        "Memory mapping mode for the Z buffer" },
    { "-map_directZ", "0", ParamDecl::GROUP_MEMBER, 0, 0,
        "Use direct memory mapping for the Z buffer" },
    { "-map_reflectedZ", "1", ParamDecl::GROUP_MEMBER, 0, 0,
        "Use reflected memory mapping for the Z buffer" },

    { "-as_width", "tu", ParamDecl::PARAM_MULTI_OK, 0, 0,
      "width for all ALLOC_SURFACE buffers with the specified name or TAG" },
    { "-as_height", "tu", ParamDecl::PARAM_MULTI_OK, 0, 0,
      "height for all ALLOC_SURFACE buffers with the specified name or TAG" },
    { "-as_depth", "tu", ParamDecl::PARAM_MULTI_OK, 0, 0,
      "depth for all ALLOC_SURFACE buffers with the specified name or TAG" },
    { "-as_pitch", "tu", ParamDecl::PARAM_MULTI_OK, 0, 0,
      "pitch for all ALLOC_SURFACE buffers with the specified name or TAG" },
    { "-as_block_width", "tu", ParamDecl::PARAM_MULTI_OK, 0, 0,
      "block width for all ALLOC_SURFACE buffers with the specified name or TAG" },
    { "-as_block_height", "tu", ParamDecl::PARAM_MULTI_OK, 0, 0,
      "block height for all ALLOC_SURFACE buffers with the specified name or TAG" },
    { "-as_block_depth", "tu", ParamDecl::PARAM_MULTI_OK, 0, 0,
      "block depth for all ALLOC_SURFACE buffers with the specified name or TAG" },
    { "-as_array_size", "tu", ParamDecl::PARAM_MULTI_OK, 0, 0,
      "array size for all ALLOC_SURFACE buffers with the specified name or TAG" },
    { "-as_phys_align", "tu", ParamDecl::PARAM_MULTI_OK, 0, 0,
      "physical address alignment for all ALLOC_SURFACE buffers with the specified name or TAG" },
    { "-as_virt_align", "tu", ParamDecl::PARAM_MULTI_OK, 0, 0,
      "virtual address alignment for all ALLOC_SURFACE buffers with the specified name or TAG" },
    { "-as_gpu_cache", "tt", ParamDecl::PARAM_MULTI_OK, 0, 0,
        "GPU cache mode for ALLOC_SURFACE buffers with the given name or TAG" },
    { "-as_p2p_gpu_cache", "tt", ParamDecl::PARAM_MULTI_OK, 0, 0,
        "P2P GPU cache mode for ALLOC_SURFACE buffers with the given name or TAG" },
    { "-as_zbc", "tt", ParamDecl::PARAM_MULTI_OK, 0, 0,
        "mode for ALLOC_SURFACE buffers with the given name or TAG" },
    { "-as_format", "tt", ParamDecl::PARAM_MULTI_OK, 0, 0,
      "surface format for all ALLOC_SURFACE buffers with the specified name or TAG" },
    { "-as_sample_mode", "tt", ParamDecl::PARAM_MULTI_OK, 0, 0,
      "AA mode for all ALLOC_SURFACE buffers with the specified name or TAG" },
    { "-as_layout", "tt", ParamDecl::PARAM_MULTI_OK, 0, 0,
      "memory layout for all ALLOC_SURFACE buffers with the specified name or TAG" },
    { "-as_compression", "tt", ParamDecl::PARAM_MULTI_OK, 0, 0,
      "compression setting for all ALLOC_SURFACE buffers with the specified name or TAG" },
    { "-as_zlwll", "tt", ParamDecl::PARAM_MULTI_OK, 0, 0,
      "zlwll setting for all ALLOC_SURFACE buffers with the specified name or TAG" },
    { "-as_aperture", "tt", ParamDecl::PARAM_MULTI_OK, 0, 0,
      "memory aperture for all ALLOC_SURFACE buffers with the specified name or TAG" },
    { "-as_pte_kind", "tt", ParamDecl::PARAM_MULTI_OK, 0, 0,
      "PTE kind for all ALLOC_SURFACE buffers with the specified name or TAG" },
    { "-as_virt_address", "tL", ParamDecl::PARAM_MULTI_OK, 0, 0,
      "virtual address for all ALLOC_SURFACE buffers with the specified name or TAG" },
    { "-as_virt_address_range", "tLL", ParamDecl::PARAM_MULTI_OK, 0, 0,
      "virtual address range for all ALLOC_SURFACE buffers with the specified name or TAG" },
    { "-as_phys_address", "tL", ParamDecl::PARAM_MULTI_OK, 0, 0,
      "physical address for all ALLOC_SURFACE buffers with the specified name or TAG" },
    { "-as_phys_address_range", "tLL", ParamDecl::PARAM_MULTI_OK, 0, 0,
      "physical address range for all ALLOC_SURFACE buffers with the specified name or TAG" },
    { "-as_page_size", "tt", ParamDecl::PARAM_MULTI_OK, 0, 0,
      "page size for all ALLOC_SURFACE buffers with the specified surface name or TAG, format <surface_name/TAG> <page_size> , <page_size> can be <SMALL>/<4KB>, <BIG>/<64KB>/<128KB> (Big Page size depends on chip Resource Manager), <HUGE>/<2MB>, <512MB>" },
    { "-as_phys_page_size", "tt", ParamDecl::PARAM_MULTI_OK, 0, 0,
      "PA alloc page size for all ALLOC_SURFACE buffers with the specified name or TAG" },
    { "-as_privileged", "tt", ParamDecl::PARAM_MULTI_OK, 0, 0,
      "privileged for all ALLOC_SURFACE buffers with the specified name or TAG" },
    { "-as_map_mode", "tt", ParamDecl::PARAM_MULTI_OK, 0, 0,
      "memory mapping mode for all ALLOC_SURFACE buffers with the specified name or TAG" },
    { "-as_size", "tu", ParamDecl::PARAM_MULTI_OK, 0, 0,
      "overrides the SIZE property of all ALLOC_SURFACE buffers with the specified name or TAG" },
    { "-as_access", "tt", ParamDecl::PARAM_MULTI_OK, 0, 0,
      "overrides the ACCESS property of all ALLOC_SURFACE buffers with the specified name or TAG" },
    { "-as_shader_access", "tt", ParamDecl::PARAM_MULTI_OK, 0, 0,
      "overrides the SHADER_ACCESS property of all ALLOC_SURFACE buffers with the specified name or TAG" },
    { "-as_fb_speed", "tt", ParamDecl::PARAM_MULTI_OK, 0, 0,
      "sets the FB_SPEED property of all ALLOC_SURFACE buffers with the specified name or TAG" },
    { "-as_contig", "t", ParamDecl::PARAM_MULTI_OK, 0, 0,
      "sets the CONTIG property of all ALLOC_SURFACE buffers with specified name or TAG" },

    { "-as_vpr", "tt", ParamDecl::PARAM_MULTI_OK, 0, 0,
      "sets the VPR property of all ALLOC_SURFACE buffers with the specified name or TAG. Format: -as_vpr <name> <ON/OFF>" },
    { "-as_upr", "tt", ParamDecl::PARAM_MULTI_OK, 0, 0,
      "sets the UPR property of all ALLOC_SURFACE buffers with the specified name or TAG. Format: -as_upr <name> <ON/OFF>" },

    { "-as_start_offset", "tL", ParamDecl::PARAM_MULTI_OK, 0, 0,
      "offsets the starting CPU virtual address relative to the starting GPU virtual address for all ALLOC_SURFACE buffers with the specified name or TAG" },
    { "-as_start_adjust", "tL", ParamDecl::PARAM_MULTI_OK, 0, 0,
      "offsets the starting GPU virtual address relative to the base of the memory allocation for all ALLOC_SURFACE buffers with the specified name or TAG" },

    { "-as_ats_map", "t", ParamDecl::PARAM_MULTI_OK, 0, 0,
      "ensures that all ALLOC_SURFACE buffers with the specified name or TAG will have an ATS mapping" },
    { "-as_no_gmmu_map", "t", ParamDecl::PARAM_MULTI_OK, 0, 0,
      "ensures that none of the ALLOC_SURFACE buffers with the specified name or TAG will have a GMMU mapping" },
    { "-as_ats_page_size", "tu", ParamDecl::PARAM_MULTI_OK, 0, 0,
      "sets the ATS page size (in KB) for all ALLOC_SURFACE buffers with the specified name or TAG" },
    { "-as_ats_read_permission", "tt", ParamDecl::PARAM_MULTI_OK, 0, 0,
      "sets the ATS read permission for all ALLOC_SURFACE buffers with the specified name or TAG" },
    { "-as_ats_write_permission", "tt", ParamDecl::PARAM_MULTI_OK, 0, 0,
      "sets the ATS write permission for all ALLOC_SURFACE buffers with the specified name or TAG" },
    { "-as_loopback_peer_id", "tu", ParamDecl::PARAM_MULTI_OK, 0, 0,
      "specifies the peer ID to be used if the surface has aperture P2P and the test is run with -sli_p2ploopback" },
    { "-as_acr1", "tt", ParamDecl::PARAM_MULTI_OK, 0, 0,
      "sets the ACR1 (WPR) property of all ALLOC_SURFACE buffers with the specified name or TAG" },
    { "-as_acr2", "tt", ParamDecl::PARAM_MULTI_OK, 0, 0,
      "sets the ACR2 (WPR) property of all ALLOC_SURFACE buffers with the specified name or TAG" },
    { "-as_map_as_peer", "t", ParamDecl::PARAM_MULTI_OK, 0, 0,
      "create a peer mapping instead of a local mapping (if SLI or P2P loopback is enabled)" },
    { "-as_peer_gpu", "tu", ParamDecl::PARAM_MULTI_OK, 0, 0,
      "sets the GPU in which to allocate physical memory for peer mapped ALLOC_SURFACE buffers with the specified name or TAG" },
    { "-as_skip_init", "t", ParamDecl::PARAM_MULTI_OK, 0, 0,
      "skip the initialization of the specified surface(s)" },
    { "-as_fla_map", "tt", ParamDecl::PARAM_MULTI_OK, 0, 0,
      "map the specified FLA export surface for all ALLOC_SURFACE buffers with the specified name or TAG" },
    { "-as_sm_count", "tu", ParamDecl::PARAM_MULTI_OK, 0, 0,
      "overrides the number of TPCs in the size callwlation for ALLOC_SURFACE buffers with the specified name or TAG and SCALE_BY_SM_COUNT" },
    { "-as_egm_alloc", "t", ParamDecl::PARAM_MULTI_OK, 0, 0,
      "alloc all ALLOC_SURFACE buffers with the specified name or TAG on EGM" },

    { "-channel_pbdma", "tu", ParamDecl::PARAM_MULTI_OK, 0, 0,
      "set pbdma number for channel with the specified name" },

    {"-crc_rectC",  "uuuu", ParamDecl::PARAM_MULTI_OK, 0, 0, "Specify area need to be checked for Cts, format: x y w h"},
    {"-crc_rectCA", "uuuu", ParamDecl::PARAM_MULTI_OK, 0, 0, "Specify area need to be checked for CtA, format: x y w h"},
    {"-crc_rectCB", "uuuu", ParamDecl::PARAM_MULTI_OK, 0, 0, "Specify area need to be checked for CtB, format: x y w h"},
    {"-crc_rectCC", "uuuu", ParamDecl::PARAM_MULTI_OK, 0, 0, "Specify area need to be checked for CtC, format: x y w h"},
    {"-crc_rectCD", "uuuu", ParamDecl::PARAM_MULTI_OK, 0, 0, "Specify area need to be checked for CtD, format: x y w h"},
    {"-crc_rectCE", "uuuu", ParamDecl::PARAM_MULTI_OK, 0, 0, "Specify area need to be checked for CtE, format: x y w h"},
    {"-crc_rectCF", "uuuu", ParamDecl::PARAM_MULTI_OK, 0, 0, "Specify area need to be checked for CtF, format: x y w h"},
    {"-crc_rectCG", "uuuu", ParamDecl::PARAM_MULTI_OK, 0, 0, "Specify area need to be checked for CtG, format: x y w h"},
    {"-crc_rectCH", "uuuu", ParamDecl::PARAM_MULTI_OK, 0, 0, "Specify area need to be checked for CtH, format: x y w h"},
    {"-crc_rectZ" , "uuuu", ParamDecl::PARAM_MULTI_OK, 0, 0, "Specify area need to be checked for Zt,  format: x y w h"},

    SIMPLE_PARAM("-force_dim_in_crc_key", "always put the width and height in the CRC profile key of a color/z surface"),
    SIMPLE_PARAM("-use_min_dim", "Use the minimum width and height of all color/z surfaces for CRC checking and image dumping"),
    UNSIGNED_PARAM("-max_map_size", "The map size in kbyte for MODS when reading back surfaces, shoulde be 128k aligned"),
    SIMPLE_PARAM("-use_trace_subchnum", "Use subchannel num given in trace to create subchannel. For ACE trace only."),

    { "-pte_kind_on_aamode_tex", "tt", ParamDecl::PARAM_MULTI_OK, 0, 0,
      "Set pte_kind for all texture buffers to specified value if its AAmode matches the one from command line"
      " format -pte_kind_on_aamode_tex <AAMode> <pte_kind>"},

    SIMPLE_PARAM("-allow_ext_texheader_disabled", "Allow Pushbuffer contains LW9297_SET_TEX_HEADER_EXTENDED_DIMENSIONS_ENABLE_FALSE method. Note this is inconsistent with the way MODS interpret texture header files"),

    STRING_PARAM("-pm_file",   "Specifies the PM resource file" ),
    STRING_PARAM("-pm_sb_file",   "Specifies the PM resource file" ),
    SIMPLE_PARAM("-pm_sync_coordinator", "Specifies the coordinator subctx" ),

    SIMPLE_PARAM("-enable_sync_event", "Enable SYNC_EVENT in test.hdr. If SYNC_EVENT is absent, internally inject a pair of EVENT_SYNC to wrap all the pushbuffer" ),

    { "-untar_method", "u", (ParamDecl::PARAM_ENFORCE_RANGE | ParamDecl::GROUP_START), 0, 1, "Choose either minimal memory usage or speed while untarring the trace file" },
    { "-untar_low_memory",     "0", ParamDecl::GROUP_MEMBER, 0, 0, "use minimal memory when untarring the trace file" },
    { "-untar_in_memory",      "1", ParamDecl::GROUP_MEMBER, 0, 0, "for speed, load entire tar file into memory" },

    SIMPLE_PARAM("-pm_ilwalidate_cache", "Ilwalidate the L1 and L2 cache before a pm trigger"),
    SIMPLE_PARAM("-check_display_underflow", "Check for display underflow at the end of a PM experiment"),

    STRING_PARAM("-buf_default_readonly", "Set buffers(non-Ct/Zt) allocated by ALLOC_SURFACE to be readonly by default"),
    STRING_PARAM("-preemptive_channel", "Set the channel to be preemptive, specify name here, Kepler or later only"),
    SIMPLE_PARAM("-preemptive_all_channels", "Set all channels to be preemptive, Kepler or later only"),

    STRING_PARAM("-trap_handler",   "Specifies the trap handler file" ),

    { "-buffer_alloc_order", "u", (ParamDecl::PARAM_ENFORCE_RANGE | ParamDecl::GROUP_START), 0, 1, "Determine which order buffer should be allocated" },
    { "-no_sort_buffer_alloc", "0", ParamDecl::GROUP_MEMBER, 0, 0, "Do not sort the buffer allocation order" },
    { "-sort_buffer_alloc", "1", ParamDecl::GROUP_MEMBER, 0, 0, "Sort the buffer allocation order so that buffers with address constraints are allocated first" },

    STRING_PARAM("-tsg_name", "Specifies the tsg name for all channes in a trace_3d test. Format: -tsg_name <name>"),
    STRING_PARAM("-pe_label", "Specifies the label name of the PE configure file in a trace_3d test. Format: -pe_label <name>"),
    STRING_PARAM("-subcontext_name", "Specifies the subctx name for all channes in a trace_3d test. Format: -subcontext_name <name>"),
    STRING_PARAM("-partition_table", "Specifies the tpc mask for one tsg. Format: -partition_table <filename>"),
    { "-subctx_cwdslot_watermark", "tt", ParamDecl::PARAM_MULTI_OK, 0, 0, "Specifies the watermark for all subctx name in one tsg name. Format: -subctx_cwdslot_watermark <tsg_name> <watermark_hex_32bitdata>,<watermark_hex_32bitdata>,..." },
    { "-subctx_veid_cwdslot_watermark", "tt", ParamDecl::PARAM_MULTI_OK, 0, 0, "Specifies the watermark for all subctx name in one tsg name. Format: -subctx_veid_cwdslot_watermark <tsg_name> <subctx_name>:<watermark_hex_32bitdata>,<subctx_name>:<watermark_hex_32bitdata>,..." },
#ifdef LW_VERIF_FEATURES
    UNSIGNED_PARAM("-subcontext_veid", "Specifies the subctx veid for all channes in a trace_3d test. Format: -subcontext_veid <veid_number>"),
#endif
    STRING_PARAM("-address_space_name", "Specifies the va space name for all channes in a trace_3d test. Format: -address_space_name <name>"),
    SIMPLE_PARAM("-extern_trace_subcontext", "Makes the local subctx declared in test.hdr extern as global. This argument is exclusive to argument -subctx_name which is used to declare global subcontext."),

    SIMPLE_PARAM("-kepler_preemption_hack", "Temoprary hack for preemption tests that MODS appends extra methods at the end to trigger preemption"),

    { "-map_region",  "uuuuu", ParamDecl::PARAM_MULTI_OK, 0, 0, "Restrict mapping of rendertargets" },
    { "-map_regionC",  "uuuuu", ParamDecl::PARAM_MULTI_OK, 0, 0, "Restrict mapping of Color surface" },
    { "-map_regionCA",  "uuuuu", ParamDecl::PARAM_MULTI_OK, 0, 0, "Restrict mapping of Color surface A" },
    { "-map_regionCB",  "uuuuu", ParamDecl::PARAM_MULTI_OK, 0, 0, "Restrict mapping of Color surface B" },
    { "-map_regionCC",  "uuuuu", ParamDecl::PARAM_MULTI_OK, 0, 0, "Restrict mapping of Color surface C" },
    { "-map_regionCD",  "uuuuu", ParamDecl::PARAM_MULTI_OK, 0, 0, "Restrict mapping of Color surface D" },
    { "-map_regionCE",  "uuuuu", ParamDecl::PARAM_MULTI_OK, 0, 0, "Restrict mapping of Color surface E" },
    { "-map_regionCF",  "uuuuu", ParamDecl::PARAM_MULTI_OK, 0, 0, "Restrict mapping of Color surface F" },
    { "-map_regionCG",  "uuuuu", ParamDecl::PARAM_MULTI_OK, 0, 0, "Restrict mapping of Color surface G" },
    { "-map_regionCH",  "uuuuu", ParamDecl::PARAM_MULTI_OK, 0, 0, "Restrict mapping of Color surface H" },
    { "-map_regionZ",  "uuuuu", ParamDecl::PARAM_MULTI_OK, 0, 0, "Restrict mapping of the Z surface" },

    UNSIGNED_PARAM("-map_region_align_kb", "Specify the alignment (in KB) of the mapped pages for -map_region arguments"),

    { "-inflate_rendertarget_and_offset_window",  "uuuu", 0, 0, 0, "Increase the rendertarget to a larger size, offset the draw region using window offset methods, and sparsify the unused memory pages" },

    { "-inflate_rendertarget_and_offset_viewport",  "uuuu", 0, 0, 0, "Increase the rendertarget to a larger size, offset the draw region using viewport offset methods, and sparsify the unused memory pages" },

    SIMPLE_PARAM("-texture_center_spoof", "Enforce 2X1_CENTER/2X2_CENTER/4X2_CENTER mode in texture header for RELOC_D command"),

    { "-define_predicate", "t", ParamDecl::PARAM_MULTI_OK, 0, 0, "specify a predicate symbol to enable/disable lines in the trace header" },

    SIMPLE_PARAM("-no_clip_id", "Prevents a ClipID buffer from being allocated."),

    { "-add_virtual_alloc",  "LL", ParamDecl::PARAM_MULTI_OK, 0, 0, "Add a virtual allocation to reserve the given address range" },

    UNSIGNED_PARAM("-elpg_mask", "Mask for enabling ELPG"),
    SIMPLE_PARAM("-disable_elpg_on_init", "ELPG is disabled on init"),
    SIMPLE_PARAM("-forbid_ill_dyn_check", "Temporary option to tell MODS to return error immediately when CHECK_DYNAMICSURFACE want to check a surface who has no check method."),

    FLOAT_PARAM("-selfgild_threshold", "Override tolerance for self-gilding tests"),

    { "-file_search_order", "u", (ParamDecl::PARAM_ENFORCE_RANGE | ParamDecl::GROUP_START), 0, 1, "specify whether to search for trace files in the archive or the filesystem first" },
    { "-search_archive_first",     "0", ParamDecl::GROUP_MEMBER, 0, 0, "search for trace files in the archive first" },
    { "-search_filesystem_first",     "1", ParamDecl::GROUP_MEMBER, 0, 0, "search for trace files in the filesystem first" },

    SIMPLE_PARAM("-decompress_in_place", "Decompress all render targets"),
    SIMPLE_PARAM("-decompress_in_placeZ", "Decompress the Z surface"),
    SIMPLE_PARAM("-flush_before_update_file", "Flush the FB before the exelwtion of every UPDATE_FILE trace command"),
    SIMPLE_PARAM("-disable_fb_flush", "Tells RM to never do FB Flushes"),
    SIMPLE_PARAM("-allow_nocpuchannel_trace", "A trace without any cpu channel is illegal by default. This option can surprass the check."),
    STRING_PARAM("-dummy_gr_channel", "Deprecated. Please use -dummy_ch_for_offload instead. Allocate a dummy graphic channel to enforce FECS ucode get loaded (bug 818386)"),
    STRING_PARAM("-dummy_ch_for_offload", "Allocate a dummy compute/graphic channel to enforce FECS ucode get loaded (bug 818386)"),
    SIMPLE_PARAM("-ignore_selfgild", "Ignore selfgild buffers"),
    SIMPLE_PARAM("-failtest_on_selfgildfail_crclead", "report failure if crc passes lead but selfgild fails"),

    SIMPLE_PARAM("-trace_profile", "Enable MODS print profile info."),

    { "-vpr_texture", "tt", ParamDecl::PARAM_MULTI_OK, 0, 0,
      "Turn on or off VPR for a named texture buffer.  "
      "format:  -vpr_texture <texture name> <ON|OFF>" },

    STRING_PARAM("-elf_name", "elf file to send cosim as the kernel"),
    STRING_PARAM("-sec_elf_name", "elf file to send cosim as a secondary elf, e.g. page tables"),
    SIMPLE_PARAM("-debug_elf", "Enable elf file debugging using kgdb and ASIM's gdb stub"),
    STRING_PARAM("-backdoorlib_path", "Path to the backdoormem library for the ASIM workflow"),
    STRING_PARAM("-cosim_args", "Extra args to pass to cosim."),

    UNSIGNED_PARAM("-amodel_cirlwlar_buffer_size", "Override the default primitive cirlwlar buffer size"),

    SIMPLE_PARAM("-vpr_channel", "set all channels for the test to VPR mode"),

    SIMPLE_PARAM("-top", "Deprecated. Use -cpu_asim/-cpu_dsim/-cpu_rtl instead"),

    { "-cpu_model", "u", (ParamDecl::PARAM_ENFORCE_RANGE | ParamDecl::GROUP_START), 0, 2, "choose cpu model to run elf" },
    { "-cpu_asim", "0", ParamDecl::GROUP_MEMBER, 0, 0, "ilwoke cosim to drive asim" },
    { "-cpu_dsim", "1", ParamDecl::GROUP_MEMBER, 0, 0, "ilwoke cosim to drive dsim" },
    { "-cpu_rtl", "2", ParamDecl::GROUP_MEMBER, 0, 0, "load exe into RAM for cpu rtl" },

    UNSIGNED_PARAM("-cpu_core", "Specify the CPU core (0-3) that the Top plugin runs on. Default 0"),

    { "-tirrzmode", "u", (ParamDecl::PARAM_ENFORCE_RANGE | ParamDecl::GROUP_START), 0, 4, "set the TIR raster mode" },
    { "-RZ1X1",     "0", ParamDecl::GROUP_MEMBER, 0, 0, "One of the TIR raster modes" },
    { "-RZ2X1_D3D", "1", ParamDecl::GROUP_MEMBER, 0, 0, "One of the TIR raster modes" },
    { "-RZ4X2_D3D", "2", ParamDecl::GROUP_MEMBER, 0, 0, "One of the TIR raster modes" },
    { "-RZ2X2",     "3", ParamDecl::GROUP_MEMBER, 0, 0, "One of the TIR raster modes" },
    { "-RZ4X4",     "4", ParamDecl::GROUP_MEMBER, 0, 0, "One of the TIR raster modes" },

    SIMPLE_PARAM( "-enable_tir", "enable the TIR rasterization"),

    { "-tir_modulation",     "u", (ParamDecl::PARAM_ENFORCE_RANGE | ParamDecl::GROUP_START), 0, 3, "configure TIR modulation" },
    { "-tir_no_modulation",  "0", ParamDecl::GROUP_MEMBER, 0, 0, "no modulation when TIR is enabled" },
    { "-tir_modulate_rgb",   "1", ParamDecl::GROUP_MEMBER, 0, 0, "modulate RGB values when TIR is enabled" },
    { "-tir_modulate_alpha", "2", ParamDecl::GROUP_MEMBER, 0, 0, "modulate alpha values when TIR is enabled" },
    { "-tir_modulate_rgba",  "3", ParamDecl::GROUP_MEMBER, 0, 0, "modulate RGBA values when TIR is enabled" },

    { "-tir_modulation_table",  "uuuu", 0, 0, 0, "Set the coefficients for the TIR modulation table" },

    { "-scg_type", "u", (ParamDecl::PARAM_ENFORCE_RANGE | ParamDecl::GROUP_START),
                         LWGpuChannel::GRAPHICS_COMPUTE0, LWGpuChannel::SCG_TYPE_END,
                         "Specify compute channel type in trace3d test; default GRAPHICS_COMPUTE0" },
    { "-scg_type_graphics_compute0",   (const char*)LWGpuChannel::GRAPHICS_COMPUTE0,
                                        ParamDecl::GROUP_MEMBER | ParamDecl::GROUP_MEMBER_UNSIGNED, 0, 0,
                                        "Specify GRAPHICS_COMPUTE0 type for all compute channels in the trace3d test" },
    { "-scg_type_compute1",  (const char*)LWGpuChannel::COMPUTE1,
                              ParamDecl::GROUP_MEMBER | ParamDecl::GROUP_MEMBER_UNSIGNED, 0, 0,
                              "Specify COMPUTE1 type for all compute channels in the trace3d test" },

    UNSIGNED_PARAM("-pbdma", "Bind all channels to the specified PBDMA. Format -pbdma <PBDMA number>"),

    SIMPLE_PARAM("-backdoor_load", "Dump raw memory contents of surface initialization and CRC checks"),
    SIMPLE_PARAM("-backdoor_crc", "Dump raw memory contents of surface initialization and CRC checks"),

    { "-backdoor_archive", "u", (ParamDecl::PARAM_ENFORCE_RANGE | ParamDecl::GROUP_START), 0, 1, "either create or read an archive of backdoor dump files" },
    { "-backdoor_archive_create", "0", ParamDecl::GROUP_MEMBER, 0, 0, "create an archive of all the raw memory dump files" },
    { "-backdoor_archive_read",   "1", ParamDecl::GROUP_MEMBER, 0, 0, "read an archive of all the raw memory dump files" },

    STRING_PARAM("-backdoor_archive_id", "Specifies the ID associated with the dump files in the backdoor archive.  Normally this is trep ID.  Required when running with -backdoor_archive_create or -backdoor_archive_read."),

    { "-raw_memory_dump_mode", "u", (ParamDecl::PARAM_ENFORCE_RANGE | ParamDecl::GROUP_START), 0, 5, "determine how to dump raw memory during chiplib trace capture" },
    { "-dump_raw_via_bar1_phys",  (const char*)DUMP_RAW_VIA_BAR1_PHYS, ParamDecl::GROUP_MEMBER | ParamDecl::GROUP_MEMBER_UNSIGNED, 0, 0, "dump raw memory via mapping BAR1 as physical memory" },
    { "-dump_raw_via_pramin",     (const char*)DUMP_RAW_VIA_PRAMIN, ParamDecl::GROUP_MEMBER | ParamDecl::GROUP_MEMBER_UNSIGNED, 0, 0, "dump raw memory via PRAMIN" },
    { "-dump_raw_via_pte_change", (const char*)DUMP_RAW_VIA_PTE_CHANGE, ParamDecl::GROUP_MEMBER | ParamDecl::GROUP_MEMBER_UNSIGNED, 0, 0, "dump raw memory via changing the PTE kind to non-swizzled pitch" },
    { "-dump_raw_mem_op_only",    (const char*)DUMP_RAW_MEM_OP_ONLY, ParamDecl::GROUP_MEMBER | ParamDecl::GROUP_MEMBER_UNSIGNED, 0, 0, "skip the raw memory dump but still put the raw mem op in the vector file" },
    { "-dump_raw_crc",            (const char*)DUMP_RAW_CRC, ParamDecl::GROUP_MEMBER | ParamDecl::GROUP_MEMBER_UNSIGNED, 0, 0, "dump raw memory via using the CRC data" },

    SIMPLE_PARAM("-skip_gpentry", "Skip sending GPENTRY commands from trace header when specified."),

    UNSIGNED_PARAM("-pri_compare_timeout",  "Overrides the timeout value of PRI_COMPARE commands in the trace header. The value passed to the argument should be in milliseconds."),

    SIMPLE_PARAM( "-zt_sparse_fail_always", "Modify the UnmappedCompare field ofall SetZtSparse methods to use FailAlways."),
    { "-use_page_poolC", "u", (ParamDecl::PARAM_ENFORCE_RANGE | ParamDecl::GROUP_START), 0, 2, "Allocate each color surface as a virtual address range that is mapped to a global pool of physical memory." },
    { "-use_small_page_poolC", "0", ParamDecl::GROUP_MEMBER, 0, 0, "Allocate each color surface as a virtual address range that is mapped to a global pool of small page physical memory." },
    { "-use_big_page_poolC",   "1", ParamDecl::GROUP_MEMBER, 0, 0, "Allocate each color surface as a virtual address range that is mapped to a global pool of big page physical memory." },

    { "-use_page_poolZ", "u", (ParamDecl::PARAM_ENFORCE_RANGE | ParamDecl::GROUP_START), 0, 2, "Allocate the Z buffer as a virtual address range that is mapped to a global pool of physical memory." },
    { "-use_small_page_poolZ", "0", ParamDecl::GROUP_MEMBER, 0, 0, "Allocate the Z buffer as a virtual address range that is mapped to a global pool of small page physical memory." },
    { "-use_big_page_poolZ",   "1", ParamDecl::GROUP_MEMBER, 0, 0, "Allocate the Z buffer as a virtual address range that is mapped to a global pool of big page physical memory." },

    UNSIGNED_PARAM("-small_page_pool_kb", "Specifies the size of the global small page physical memory that is allocated when -use_small_page_poolC or -use_small_page_poolZ are used.  Defaults to 1024 (1MB)"),
    UNSIGNED_PARAM("-big_page_pool_kb", "Specifies the size of the global big page physical memory that is allocated when -use_big_page_poolC or -use_big_page_poolZ are used.  Defaults to 1024 (1MB)"),

    UNSIGNED_PARAM("-zero_pad_log_strings", "Specifies the length to zero-pad hex numbers (explicitly starting with 0x) in error log strings"),

    SIMPLE_PARAM("-end_pmtest_after_crccheck", "Defer Policy manager EndTest() after crc check"),
    SIMPLE_PARAM("-start_policymn_after_setup", "Start Policy manager after test setup. By default, Policy manager will start before channel and surface setup"),

    SIMPLE_PARAM("-vdc_2_to_1", "Set VDC mode to 2:1."),

    SIMPLE_PARAM("-no_policy_registration", "Skip test resource(like surface and channel) registration with policy manager, but the test is still registered to trigger events"),
    SIMPLE_PARAM("-skip_test_policy_registration", "Skip test registration with policy manager; the test and its resource are invisible to policy manager"),

    { "-surface_init", "u", (ParamDecl::PARAM_ENFORCE_RANGE | ParamDecl::GROUP_START), 0, 1, "Specify which kinds of surface to be init with CE" },
    { "-surfaceinit_ce",     "0", ParamDecl::GROUP_MEMBER, 0, 0, "Initialize all sysmem surfaces with CE, not reflected writes" },
    { "-blocklinearinit_ce", "1", ParamDecl::GROUP_MEMBER, 0, 0, "Initialize blocklinear sysmem surfaces with CE, not reflected writes" },
    UNSIGNED_PARAM("-surfaceinit_ce_chunk_size", "Set the chunk size when surface is initialzied by CE if -surfaceinit_ce/-blocklinearinit_ce is specified, by default 1MB"),

    SIMPLE_PARAM("-skip_sysmem_init", "Skips initialization of sysmem surfaces (assuming they are initialized through a back door)"),

#ifndef _WIN32
    { "-compbit_test_type", "u", (ParamDecl::PARAM_ENFORCE_RANGE | ParamDecl::GROUP_START), 0, 5, "After rendering, run a CompBits test of the specified type." },
    { "-compbit_unit_test", "0", ParamDecl::GROUP_MEMBER, 0, 0, "Run CompBits unit tests after rendering." },
    { "-compbit_single_tile_test1", "1", ParamDecl::GROUP_MEMBER, 0, 0, "Run CompBits SingleTileTest1 after rendering." },
    { "-compbit_single_tile_test2", "2", ParamDecl::GROUP_MEMBER, 0, 0, "Run CompBits SingleTileTest2 after rendering." },
    { "-compbit_surf_move_test", "3", ParamDecl::GROUP_MEMBER, 0, 0, "Run CompBits SurfMoveTest after rendering." },
    { "-compbit_surf_copy_test", "4", ParamDecl::GROUP_MEMBER, 0, 0, "Run CompBits SurfCopyTest after rendering." },
    { "-compbit_check_offset_test", "5", ParamDecl::GROUP_MEMBER, 0, 0, "Run CompBits CheckOffsetTest after rendering." },

    // For normal compbits test
    UNSIGNED_PARAM("-compbit_test_offset", "Surface offset for a CompBits test"),
    // For Arch MODS internal unit tests
    SIMPLE_PARAM("-compbit_ignore_checkpoint_fail", "Continue the testing even if checkpoint failed."),
    SIMPLE_PARAM("-compbit_no_cfgchk", "Disable configuration sanity check which normally is done ahead of start of a testing."),
#endif

    STRING_PARAM("-cpu_model_test", "Allows the user to specify a CPU test and an optional set of arguments for the CPU test." ),

    STRING_PARAM("-cpu_model_test_lib", "Allows the user to specify a library path for a CPU test specified with -cpu_model_test."),

    UNSIGNED_PARAM("-lwlink_counters_linkmask",
        "Set the LWLink link mask contains links over which traffic counters need to be checked. "
        "Each link# in the link mask shall be represented by shifting, "
        "e.g. LinkMaskVale = (1 << link#1) | (1 << link#2) ..."),

    SIMPLE_PARAM("-disable_location_override_for_trace", "Disable the surface location override (e.g. -force_fb) for all trace surfaces."),

    SIMPLE_PARAM("-using_external_memory", "Use external memory"),

    SIMPLE_PARAM("-ignore_trace_phys_address", "Ignore any physical address constraints in the trace header."),

    UNSIGNED64_PARAM("-va_range_limit", "Specifies the limit for virtual address range."),

    { "-coarse_shading", "u", ParamDecl::PARAM_ENFORCE_RANGE | ParamDecl::GROUP_START, TraceChannel::COARSE_SHADING_FIRST, TraceChannel::COARSE_SHADING_LAST, "Set coarse shading" },
    { "-coarse_shading_1X2", (const char*)TraceChannel::COARSE_SHADING_1X2, ParamDecl::GROUP_MEMBER | ParamDecl::GROUP_MEMBER_UNSIGNED, 0, 0, "Set coarse shading to 1X2" },
    { "-coarse_shading_2X1", (const char*)TraceChannel::COARSE_SHADING_2X1, ParamDecl::GROUP_MEMBER | ParamDecl::GROUP_MEMBER_UNSIGNED, 0, 0, "Set coarse shading to 2X1" },
    { "-coarse_shading_2X2", (const char*)TraceChannel::COARSE_SHADING_2X2, ParamDecl::GROUP_MEMBER | ParamDecl::GROUP_MEMBER_UNSIGNED, 0, 0, "Set coarse shading to 2X2" },
    { "-coarse_shading_2X4", (const char*)TraceChannel::COARSE_SHADING_2X4, ParamDecl::GROUP_MEMBER | ParamDecl::GROUP_MEMBER_UNSIGNED, 0, 0, "Set coarse shading to 2X4" },
    { "-coarse_shading_4X2", (const char*)TraceChannel::COARSE_SHADING_4X2, ParamDecl::GROUP_MEMBER | ParamDecl::GROUP_MEMBER_UNSIGNED, 0, 0, "Set coarse shading to 4X2" },
    { "-coarse_shading_4X4", (const char*)TraceChannel::COARSE_SHADING_4X4, ParamDecl::GROUP_MEMBER | ParamDecl::GROUP_MEMBER_UNSIGNED, 0, 0, "Set coarse shading to 4X4" },

    {"-ctx_reg", "t", ParamDecl::PARAM_MULTI_OK, 0, 0, "Optional access for registers in current trace's SMC engine. Format: -ctx_reg <action>:<reg>:<data>[:optional_mask]. If you want to specify reg space or use in non-SMC mode, please combine with -ctx_priv."},
    {"-ctx_priv", "t", ParamDecl::PARAM_MULTI_OK, 0, 0, "Send a block of private options in per context register or per SMC engine scope. Format: -ctx_priv +begin <regspace> -ctx_reg <action>:<reg>:<data>[:optional_mask] -ctx_reg ... +end"},
    STRING_PARAM("-smc_engine_label", "target SMC engine for this test, exclusive with -smc_eng_name. Example: trace3d -smc_engine_label sys0 -i trace1/test.hdr"),
    STRING_PARAM("-smc_eng_name", "target SMC engine for this test, exclusive with -smc_engine_label. Example: trace3d -smc_eng_name eng_0"),
    STRING_PARAM("-smc_mem", "SMC Partition specification Hopper onwards. Exclusive with -smc_engine_label"),
    STRING_PARAM("-smc_eng", "SMC Engine specification Hopper onwards. Exclusive with -smc_engine_label"),
    STRING_PARAM("-smc_partitioning", "configure the gpu partition and smc information. Exclusive with -smc_engine_label"),
    STRING_PARAM("-smc_partitioning_sys0_only", "specified all non-floorsweeping GPC will be connected to the sys0. Exclusive with -smc_engine_label"),

    STRING_PARAM("-shared_luma_surface", "Specify shared luma surface name"),
    STRING_PARAM("-shared_chroma_surface", "Specify shared chroma surface name"),
    SIMPLE_PARAM("-share_subctx_cfg_per_smc", "Count the tsg sequence id per smc engine and make sure all tests shared this tsg are using the same -partition_table."),

    SIMPLE_PARAM("-check_event_handler_retval", "Check whether plugin event handler processes successfully or not. Return value 0 means pass and other value is for failure."),
    UNSIGNED_PARAM("-dmacopy_ce_offset",  "Specify a CE engine from CE0-LAST_CE (value in range 0-last-CE#)."),

    { "-sync_at_start_stage", "u", (ParamDecl::PARAM_ENFORCE_RANGE | ParamDecl::GROUP_START), 0, 1, "sync t3d and rtapi test at start stage" },
    { "-rtapi_start_first", "0", ParamDecl::GROUP_MEMBER, 0, 0, "rtapi tests start before t3d tests" },
    { "-t3d_start_first",   "1", ParamDecl::GROUP_MEMBER, 0, 0, "t3d tests start before rtapi test" },

    { "-sync_at_end_stage", "u", (ParamDecl::PARAM_ENFORCE_RANGE | ParamDecl::GROUP_START), 0, 1, "sync t3d and rtapi test at end stage" },
    { "-rtapi_end_first", "0", ParamDecl::GROUP_MEMBER, 0, 0, "rtapi tests end before t3d tests" },
    { "-t3d_end_first",   "1", ParamDecl::GROUP_MEMBER, 0, 0, "t3d tests end before rtapi test" },

#ifdef INCLUDE_MDIAGUTL
    { "-utl_test_script", "t", ParamDecl::PARAM_MULTI_OK, 0, 0, "Run a UTL script with scope limited to this test." },
#endif
    SIMPLE_PARAM("-set_cc_trusted_for_crc", "Temporarily set the CC trust level for the copy engine to TRUSTED during crc checks."),
    STRING_PARAM("-set_ce_prefetch_channel", "Specify an channel which needs to be marked as CE prefetch"),

    SIMPLE_PARAM("-separate_zs", "Specify the test is under separate zs mode. The default value is False(packed mode)"),
    LAST_PARAM
};

extern const ParamConstraints trace_file_constraints[] = {
    MUTUAL_EXCLUSIVE_PARAM("-ctxswTimeSlice", "-ctxswSeed0"),
    MUTUAL_EXCLUSIVE_PARAM("-ctxswTimeSlice", "-ctxswSeed1"),
    MUTUAL_EXCLUSIVE_PARAM("-ctxswTimeSlice", "-ctxswSeed2"),
    MUTUAL_EXCLUSIVE_PARAM("-ctxswTimeSlice", "-ctxswPoint"),
    MUTUAL_EXCLUSIVE_PARAM("-ctxswTimeSlice", "-ctxswGran"),
    MUTUAL_EXCLUSIVE_PARAM("-ctxswTimeSlice", "-ctxswNum"),
    MUTUAL_EXCLUSIVE_PARAM("-ctxswTimeSlice", "-ctxswSelf"),
    MUTUAL_EXCLUSIVE_PARAM("-ctxswTimeSlice", "-ctxswReset"),
    MUTUAL_EXCLUSIVE_PARAM("-block_height", "-optimal_block_size"),
    MUTUAL_EXCLUSIVE_PARAM("-flush_before_update_file", "-disable_fb_flush"),
    MUTUAL_EXCLUSIVE_PARAM("-i", "-no_trace"),
    MUTUAL_EXCLUSIVE_PARAM("-inflate_rendertarget_and_offset_window", "-map_region"),
    MUTUAL_EXCLUSIVE_PARAM("-inflate_rendertarget_and_offset_window", "-map_regionC"),
    MUTUAL_EXCLUSIVE_PARAM("-inflate_rendertarget_and_offset_window", "-map_regionCA"),
    MUTUAL_EXCLUSIVE_PARAM("-inflate_rendertarget_and_offset_window", "-map_regionCB"),
    MUTUAL_EXCLUSIVE_PARAM("-inflate_rendertarget_and_offset_window", "-map_regionCC"),
    MUTUAL_EXCLUSIVE_PARAM("-inflate_rendertarget_and_offset_window", "-map_regionCD"),
    MUTUAL_EXCLUSIVE_PARAM("-inflate_rendertarget_and_offset_window", "-map_regionCE"),
    MUTUAL_EXCLUSIVE_PARAM("-inflate_rendertarget_and_offset_window", "-map_regionCF"),
    MUTUAL_EXCLUSIVE_PARAM("-inflate_rendertarget_and_offset_window", "-map_regionCG"),
    MUTUAL_EXCLUSIVE_PARAM("-inflate_rendertarget_and_offset_window", "-map_regionCH"),
    MUTUAL_EXCLUSIVE_PARAM("-inflate_rendertarget_and_offset_window", "-map_regionZ"),
    MUTUAL_EXCLUSIVE_PARAM("-inflate_rendertarget_and_offset_viewport", "-map_region"),
    MUTUAL_EXCLUSIVE_PARAM("-inflate_rendertarget_and_offset_viewport", "-map_regionC"),
    MUTUAL_EXCLUSIVE_PARAM("-inflate_rendertarget_and_offset_viewport", "-map_regionCA"),
    MUTUAL_EXCLUSIVE_PARAM("-inflate_rendertarget_and_offset_viewport", "-map_regionCB"),
    MUTUAL_EXCLUSIVE_PARAM("-inflate_rendertarget_and_offset_viewport", "-map_regionCC"),
    MUTUAL_EXCLUSIVE_PARAM("-inflate_rendertarget_and_offset_viewport", "-map_regionCD"),
    MUTUAL_EXCLUSIVE_PARAM("-inflate_rendertarget_and_offset_viewport", "-map_regionCE"),
    MUTUAL_EXCLUSIVE_PARAM("-inflate_rendertarget_and_offset_viewport", "-map_regionCF"),
    MUTUAL_EXCLUSIVE_PARAM("-inflate_rendertarget_and_offset_viewport", "-map_regionCG"),
    MUTUAL_EXCLUSIVE_PARAM("-inflate_rendertarget_and_offset_viewport", "-map_regionCH"),
    MUTUAL_EXCLUSIVE_PARAM("-inflate_rendertarget_and_offset_viewport", "-map_regionZ"),
    MUTUAL_EXCLUSIVE_PARAM("-inflate_rendertarget_and_offset_viewport", "-inflate_rendertarget_and_offset_window"),
    MUTUAL_EXCLUSIVE_PARAM("-subcontext_name", "-extern_trace_subcontext"),
    MUTUAL_EXCLUSIVE_PARAM("-subctx_cwdslot_watermark", "-subctx_veid_cwdslot_watermark"),
    MUTUAL_EXCLUSIVE_PARAM("-smc_engine_label", "-smc_eng_name"),
    MUTUAL_EXCLUSIVE_PARAM("-smc_engine_label", "-smc_mem"),
    MUTUAL_EXCLUSIVE_PARAM("-smc_eng_name", "-smc_partitioning"),
    MUTUAL_EXCLUSIVE_PARAM("-smc_eng_name", "-smc_partitioning_sys0_only"),
    LAST_CONSTRAINT
};
