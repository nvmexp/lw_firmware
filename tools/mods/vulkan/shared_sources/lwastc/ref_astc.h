#ifndef _REF_ASTC_H
#define _REF_ASTC_H 1

#include <memory.h>
#include <assert.h>

typedef int int32_t;
typedef unsigned int uint32_t;
typedef unsigned char uint8_t;


#ifndef __GL_MIN
#define __GL_MIN(a,b) (((a)<(b))?(a):(b))
#endif

    struct ASTCBlock {
        uint8_t data[16];

		void clear()
		{
			memset(data, 0, 16);
		}
        uint32_t makeMask(int32_t x) const {
            return (uint32_t)((1<<x)-1);
        }
        uint32_t get(const int32_t base, const int32_t len) const {
            int32_t temp = base;
            return getBits(temp, len);
        }
        uint32_t getBits(int32_t &base, int32_t len) const {
            if (base < 0) {
                base = 8*sizeof(data)+base;
                uint32_t rv = getBitsRev(base, len);
                base = base - 8*sizeof(data);
                return rv;
            }
            assert(len <= 32);
            assert(base+len <= (int32_t)sizeof(data)*8);
            if (len == 0) return 0;
            uint32_t rv = 0;
            uint32_t lwrShift = 0;

            while (len) {
                int32_t byte = base / 8;
                int32_t startBit = (base & 7);
                int32_t endBit = __GL_MIN(7, startBit+len-1);
                int32_t lwrLen = endBit - startBit + 1;

                rv = rv | (((data[byte] >> startBit) & makeMask(lwrLen)) << lwrShift);

                base += lwrLen;
                len -= lwrLen;
                lwrShift += lwrLen;

                assert(len >= 0);
            }

            return rv;
        }
        uint32_t getBitsRev(int32_t &base, int32_t len) const {
            uint32_t rv = 0;
            uint32_t lwrShift = 0;

            while(len) {
                int32_t byte = base / 8;
                int32_t bit = (base & 7);

                rv |= ((data[byte] >> bit) & 1) << lwrShift;

                base--;
                len--;
                lwrShift++;
            }

            return rv;
        }
		void setBits(int32_t &base, int32_t len, uint32_t x) {
			if (base < 0) {
				base = 8*sizeof(data)+base;
				setBitsRev(base, len, x);
				base = base - 8*sizeof(data);
				return;
			}
		
			assert(len <= 32);
			assert(base+len <= (int32_t)sizeof(data)*8);
			if (len == 0) return;

			x &= makeMask(len);

			while (len) {
				int32_t byte = base / 8;
				int32_t startBit = (base & 7);
				int32_t endBit = __GL_MIN(7, startBit+len-1);
				int32_t lwrLen = endBit - startBit + 1;
				uint32_t lwrMask = makeMask(lwrLen);

				data[byte] &= ~(lwrMask << startBit);
				data[byte] |= (x & lwrMask) << startBit;

				base += lwrLen;
				len -= lwrLen;
				x >>= lwrLen;

				assert(len >= 0);
			}
		}
		void setBitsRev(int32_t &base, int32_t len, uint32_t x) {
			uint32_t lwrShift = 0;

			while(len) {
				int32_t byte = base / 8;
				int32_t bit = (base & 7);

				data[byte] &= ~(1 << bit);
				data[byte] |= ((x >> lwrShift) & 1) << bit;

				base--;
				len--;
				lwrShift++;
			}
		}
    };

namespace RefAstc {
	struct ASTCIntSeqFormat {
        int32_t bits;
        int32_t trits;
        int32_t quints;
    };

    enum ASTCIntSeqFormatNum {
        SEQ_2 = 0,
        SEQ_3,
        SEQ_4,
        SEQ_5,
        SEQ_6,
        SEQ_8,
        SEQ_10,
        SEQ_12,
        SEQ_16,
        SEQ_20,
        SEQ_24,
        SEQ_32,
        SEQ_40,
        SEQ_48,
        SEQ_64,
        SEQ_80,
        SEQ_96,
        SEQ_128,
        SEQ_160,
        SEQ_192,
        SEQ_256,
        NUM_SEQ_FORMATS,
        SEQ_ILW,
    };

    static const ASTCIntSeqFormat ASTCSeqFormat[NUM_SEQ_FORMATS] = {
       // B  T  Q
         {1, 0, 0},
         {0, 1, 0},
         {2, 0, 0},
         {0, 0, 1},
         {1, 1, 0},
         {3, 0, 0},
         {1, 0, 1},
         {2, 1, 0},
         {4, 0, 0},
         {2, 0, 1},
         {3, 1, 0},
         {5, 0, 0},
         {3, 0, 1},
         {4, 1, 0},
         {6, 0, 0},
         {4, 0, 1},
         {5, 1, 0},
         {7, 0, 0},
         {5, 0, 1},
         {6, 1, 0},
         {8, 0, 0},
    };

    // Unpacks 7-bits of quint into the 3, 5-value values
    const uint8_t ASTCQuintDecode[128][3] = {
	{ 0, 0, 0 }, 
	{ 1, 0, 0 }, 
	{ 2, 0, 0 }, 
	{ 3, 0, 0 }, 
	{ 4, 0, 0 }, 
	{ 0, 4, 0 }, 
	{ 4, 4, 0 }, 
	{ 4, 4, 4 }, 
	{ 0, 1, 0 }, 
	{ 1, 1, 0 }, 
	{ 2, 1, 0 }, 
	{ 3, 1, 0 }, 
	{ 4, 1, 0 }, 
	{ 1, 4, 0 }, 
	{ 4, 4, 1 }, 
	{ 4, 4, 4 }, 
	{ 0, 2, 0 }, 
	{ 1, 2, 0 }, 
	{ 2, 2, 0 }, 
	{ 3, 2, 0 }, 
	{ 4, 2, 0 }, 
	{ 2, 4, 0 }, 
	{ 4, 4, 2 }, 
	{ 4, 4, 4 }, 
	{ 0, 3, 0 }, 
	{ 1, 3, 0 }, 
	{ 2, 3, 0 }, 
	{ 3, 3, 0 }, 
	{ 4, 3, 0 }, 
	{ 3, 4, 0 }, 
	{ 4, 4, 3 }, 
	{ 4, 4, 4 }, 
	{ 0, 0, 1 }, 
	{ 1, 0, 1 }, 
	{ 2, 0, 1 }, 
	{ 3, 0, 1 }, 
	{ 4, 0, 1 }, 
	{ 0, 4, 1 }, 
	{ 4, 0, 4 }, 
	{ 0, 4, 4 }, 
	{ 0, 1, 1 }, 
	{ 1, 1, 1 }, 
	{ 2, 1, 1 }, 
	{ 3, 1, 1 }, 
	{ 4, 1, 1 }, 
	{ 1, 4, 1 }, 
	{ 4, 1, 4 }, 
	{ 1, 4, 4 }, 
	{ 0, 2, 1 }, 
	{ 1, 2, 1 }, 
	{ 2, 2, 1 }, 
	{ 3, 2, 1 }, 
	{ 4, 2, 1 }, 
	{ 2, 4, 1 }, 
	{ 4, 2, 4 }, 
	{ 2, 4, 4 }, 
	{ 0, 3, 1 }, 
	{ 1, 3, 1 }, 
	{ 2, 3, 1 }, 
	{ 3, 3, 1 }, 
	{ 4, 3, 1 }, 
	{ 3, 4, 1 }, 
	{ 4, 3, 4 }, 
	{ 3, 4, 4 }, 
	{ 0, 0, 2 }, 
	{ 1, 0, 2 }, 
	{ 2, 0, 2 }, 
	{ 3, 0, 2 }, 
	{ 4, 0, 2 }, 
	{ 0, 4, 2 }, 
	{ 2, 0, 4 }, 
	{ 3, 0, 4 }, 
	{ 0, 1, 2 }, 
	{ 1, 1, 2 }, 
	{ 2, 1, 2 }, 
	{ 3, 1, 2 }, 
	{ 4, 1, 2 }, 
	{ 1, 4, 2 }, 
	{ 2, 1, 4 }, 
	{ 3, 1, 4 }, 
	{ 0, 2, 2 }, 
	{ 1, 2, 2 }, 
	{ 2, 2, 2 }, 
	{ 3, 2, 2 }, 
	{ 4, 2, 2 }, 
	{ 2, 4, 2 }, 
	{ 2, 2, 4 }, 
	{ 3, 2, 4 }, 
	{ 0, 3, 2 }, 
	{ 1, 3, 2 }, 
	{ 2, 3, 2 }, 
	{ 3, 3, 2 }, 
	{ 4, 3, 2 }, 
	{ 3, 4, 2 }, 
	{ 2, 3, 4 }, 
	{ 3, 3, 4 }, 
	{ 0, 0, 3 }, 
	{ 1, 0, 3 }, 
	{ 2, 0, 3 }, 
	{ 3, 0, 3 }, 
	{ 4, 0, 3 }, 
	{ 0, 4, 3 }, 
	{ 0, 0, 4 }, 
	{ 1, 0, 4 }, 
	{ 0, 1, 3 }, 
	{ 1, 1, 3 }, 
	{ 2, 1, 3 }, 
	{ 3, 1, 3 }, 
	{ 4, 1, 3 }, 
	{ 1, 4, 3 }, 
	{ 0, 1, 4 }, 
	{ 1, 1, 4 }, 
	{ 0, 2, 3 }, 
	{ 1, 2, 3 }, 
	{ 2, 2, 3 }, 
	{ 3, 2, 3 }, 
	{ 4, 2, 3 }, 
	{ 2, 4, 3 }, 
	{ 0, 2, 4 }, 
	{ 1, 2, 4 }, 
	{ 0, 3, 3 }, 
	{ 1, 3, 3 }, 
	{ 2, 3, 3 }, 
	{ 3, 3, 3 }, 
	{ 4, 3, 3 }, 
	{ 3, 4, 3 }, 
	{ 0, 3, 4 }, 
	{ 1, 3, 4 }, 
    };

    // Unpacks 8-bits of trit into the 5, 3-value values
    static const uint8_t ASTCTritDecode[256][5] = {
	{ 0, 0, 0, 0, 0 }, 
	{ 1, 0, 0, 0, 0 }, 
	{ 2, 0, 0, 0, 0 }, 
	{ 0, 0, 2, 0, 0 }, 
	{ 0, 1, 0, 0, 0 }, 
	{ 1, 1, 0, 0, 0 }, 
	{ 2, 1, 0, 0, 0 }, 
	{ 1, 0, 2, 0, 0 }, 
	{ 0, 2, 0, 0, 0 }, 
	{ 1, 2, 0, 0, 0 }, 
	{ 2, 2, 0, 0, 0 }, 
	{ 2, 0, 2, 0, 0 }, 
	{ 0, 2, 2, 0, 0 }, 
	{ 1, 2, 2, 0, 0 }, 
	{ 2, 2, 2, 0, 0 }, 
	{ 2, 0, 2, 0, 0 }, 
	{ 0, 0, 1, 0, 0 }, 
	{ 1, 0, 1, 0, 0 }, 
	{ 2, 0, 1, 0, 0 }, 
	{ 0, 1, 2, 0, 0 }, 
	{ 0, 1, 1, 0, 0 }, 
	{ 1, 1, 1, 0, 0 }, 
	{ 2, 1, 1, 0, 0 }, 
	{ 1, 1, 2, 0, 0 }, 
	{ 0, 2, 1, 0, 0 }, 
	{ 1, 2, 1, 0, 0 }, 
	{ 2, 2, 1, 0, 0 }, 
	{ 2, 1, 2, 0, 0 }, 
	{ 0, 0, 0, 2, 2 }, 
	{ 1, 0, 0, 2, 2 }, 
	{ 2, 0, 0, 2, 2 }, 
	{ 0, 0, 2, 2, 2 }, 
	{ 0, 0, 0, 1, 0 }, 
	{ 1, 0, 0, 1, 0 }, 
	{ 2, 0, 0, 1, 0 }, 
	{ 0, 0, 2, 1, 0 }, 
	{ 0, 1, 0, 1, 0 }, 
	{ 1, 1, 0, 1, 0 }, 
	{ 2, 1, 0, 1, 0 }, 
	{ 1, 0, 2, 1, 0 }, 
	{ 0, 2, 0, 1, 0 }, 
	{ 1, 2, 0, 1, 0 }, 
	{ 2, 2, 0, 1, 0 }, 
	{ 2, 0, 2, 1, 0 }, 
	{ 0, 2, 2, 1, 0 }, 
	{ 1, 2, 2, 1, 0 }, 
	{ 2, 2, 2, 1, 0 }, 
	{ 2, 0, 2, 1, 0 }, 
	{ 0, 0, 1, 1, 0 }, 
	{ 1, 0, 1, 1, 0 }, 
	{ 2, 0, 1, 1, 0 }, 
	{ 0, 1, 2, 1, 0 }, 
	{ 0, 1, 1, 1, 0 }, 
	{ 1, 1, 1, 1, 0 }, 
	{ 2, 1, 1, 1, 0 }, 
	{ 1, 1, 2, 1, 0 }, 
	{ 0, 2, 1, 1, 0 }, 
	{ 1, 2, 1, 1, 0 }, 
	{ 2, 2, 1, 1, 0 }, 
	{ 2, 1, 2, 1, 0 }, 
	{ 0, 1, 0, 2, 2 }, 
	{ 1, 1, 0, 2, 2 }, 
	{ 2, 1, 0, 2, 2 }, 
	{ 1, 0, 2, 2, 2 }, 
	{ 0, 0, 0, 2, 0 }, 
	{ 1, 0, 0, 2, 0 }, 
	{ 2, 0, 0, 2, 0 }, 
	{ 0, 0, 2, 2, 0 }, 
	{ 0, 1, 0, 2, 0 }, 
	{ 1, 1, 0, 2, 0 }, 
	{ 2, 1, 0, 2, 0 }, 
	{ 1, 0, 2, 2, 0 }, 
	{ 0, 2, 0, 2, 0 }, 
	{ 1, 2, 0, 2, 0 }, 
	{ 2, 2, 0, 2, 0 }, 
	{ 2, 0, 2, 2, 0 }, 
	{ 0, 2, 2, 2, 0 }, 
	{ 1, 2, 2, 2, 0 }, 
	{ 2, 2, 2, 2, 0 }, 
	{ 2, 0, 2, 2, 0 }, 
	{ 0, 0, 1, 2, 0 }, 
	{ 1, 0, 1, 2, 0 }, 
	{ 2, 0, 1, 2, 0 }, 
	{ 0, 1, 2, 2, 0 }, 
	{ 0, 1, 1, 2, 0 }, 
	{ 1, 1, 1, 2, 0 }, 
	{ 2, 1, 1, 2, 0 }, 
	{ 1, 1, 2, 2, 0 }, 
	{ 0, 2, 1, 2, 0 }, 
	{ 1, 2, 1, 2, 0 }, 
	{ 2, 2, 1, 2, 0 }, 
	{ 2, 1, 2, 2, 0 }, 
	{ 0, 2, 0, 2, 2 }, 
	{ 1, 2, 0, 2, 2 }, 
	{ 2, 2, 0, 2, 2 }, 
	{ 2, 0, 2, 2, 2 }, 
	{ 0, 0, 0, 0, 2 }, 
	{ 1, 0, 0, 0, 2 }, 
	{ 2, 0, 0, 0, 2 }, 
	{ 0, 0, 2, 0, 2 }, 
	{ 0, 1, 0, 0, 2 }, 
	{ 1, 1, 0, 0, 2 }, 
	{ 2, 1, 0, 0, 2 }, 
	{ 1, 0, 2, 0, 2 }, 
	{ 0, 2, 0, 0, 2 }, 
	{ 1, 2, 0, 0, 2 }, 
	{ 2, 2, 0, 0, 2 }, 
	{ 2, 0, 2, 0, 2 }, 
	{ 0, 2, 2, 0, 2 }, 
	{ 1, 2, 2, 0, 2 }, 
	{ 2, 2, 2, 0, 2 }, 
	{ 2, 0, 2, 0, 2 }, 
	{ 0, 0, 1, 0, 2 }, 
	{ 1, 0, 1, 0, 2 }, 
	{ 2, 0, 1, 0, 2 }, 
	{ 0, 1, 2, 0, 2 }, 
	{ 0, 1, 1, 0, 2 }, 
	{ 1, 1, 1, 0, 2 }, 
	{ 2, 1, 1, 0, 2 }, 
	{ 1, 1, 2, 0, 2 }, 
	{ 0, 2, 1, 0, 2 }, 
	{ 1, 2, 1, 0, 2 }, 
	{ 2, 2, 1, 0, 2 }, 
	{ 2, 1, 2, 0, 2 }, 
	{ 0, 2, 2, 2, 2 }, 
	{ 1, 2, 2, 2, 2 }, 
	{ 2, 2, 2, 2, 2 }, 
	{ 2, 0, 2, 2, 2 }, 
	{ 0, 0, 0, 0, 1 }, 
	{ 1, 0, 0, 0, 1 }, 
	{ 2, 0, 0, 0, 1 }, 
	{ 0, 0, 2, 0, 1 }, 
	{ 0, 1, 0, 0, 1 }, 
	{ 1, 1, 0, 0, 1 }, 
	{ 2, 1, 0, 0, 1 }, 
	{ 1, 0, 2, 0, 1 }, 
	{ 0, 2, 0, 0, 1 }, 
	{ 1, 2, 0, 0, 1 }, 
	{ 2, 2, 0, 0, 1 }, 
	{ 2, 0, 2, 0, 1 }, 
	{ 0, 2, 2, 0, 1 }, 
	{ 1, 2, 2, 0, 1 }, 
	{ 2, 2, 2, 0, 1 }, 
	{ 2, 0, 2, 0, 1 }, 
	{ 0, 0, 1, 0, 1 }, 
	{ 1, 0, 1, 0, 1 }, 
	{ 2, 0, 1, 0, 1 }, 
	{ 0, 1, 2, 0, 1 }, 
	{ 0, 1, 1, 0, 1 }, 
	{ 1, 1, 1, 0, 1 }, 
	{ 2, 1, 1, 0, 1 }, 
	{ 1, 1, 2, 0, 1 }, 
	{ 0, 2, 1, 0, 1 }, 
	{ 1, 2, 1, 0, 1 }, 
	{ 2, 2, 1, 0, 1 }, 
	{ 2, 1, 2, 0, 1 }, 
	{ 0, 0, 1, 2, 2 }, 
	{ 1, 0, 1, 2, 2 }, 
	{ 2, 0, 1, 2, 2 }, 
	{ 0, 1, 2, 2, 2 }, 
	{ 0, 0, 0, 1, 1 }, 
	{ 1, 0, 0, 1, 1 }, 
	{ 2, 0, 0, 1, 1 }, 
	{ 0, 0, 2, 1, 1 }, 
	{ 0, 1, 0, 1, 1 }, 
	{ 1, 1, 0, 1, 1 }, 
	{ 2, 1, 0, 1, 1 }, 
	{ 1, 0, 2, 1, 1 }, 
	{ 0, 2, 0, 1, 1 }, 
	{ 1, 2, 0, 1, 1 }, 
	{ 2, 2, 0, 1, 1 }, 
	{ 2, 0, 2, 1, 1 }, 
	{ 0, 2, 2, 1, 1 }, 
	{ 1, 2, 2, 1, 1 }, 
	{ 2, 2, 2, 1, 1 }, 
	{ 2, 0, 2, 1, 1 }, 
	{ 0, 0, 1, 1, 1 }, 
	{ 1, 0, 1, 1, 1 }, 
	{ 2, 0, 1, 1, 1 }, 
	{ 0, 1, 2, 1, 1 }, 
	{ 0, 1, 1, 1, 1 }, 
	{ 1, 1, 1, 1, 1 }, 
	{ 2, 1, 1, 1, 1 }, 
	{ 1, 1, 2, 1, 1 }, 
	{ 0, 2, 1, 1, 1 }, 
	{ 1, 2, 1, 1, 1 }, 
	{ 2, 2, 1, 1, 1 }, 
	{ 2, 1, 2, 1, 1 }, 
	{ 0, 1, 1, 2, 2 }, 
	{ 1, 1, 1, 2, 2 }, 
	{ 2, 1, 1, 2, 2 }, 
	{ 1, 1, 2, 2, 2 }, 
	{ 0, 0, 0, 2, 1 }, 
	{ 1, 0, 0, 2, 1 }, 
	{ 2, 0, 0, 2, 1 }, 
	{ 0, 0, 2, 2, 1 }, 
	{ 0, 1, 0, 2, 1 }, 
	{ 1, 1, 0, 2, 1 }, 
	{ 2, 1, 0, 2, 1 }, 
	{ 1, 0, 2, 2, 1 }, 
	{ 0, 2, 0, 2, 1 }, 
	{ 1, 2, 0, 2, 1 }, 
	{ 2, 2, 0, 2, 1 }, 
	{ 2, 0, 2, 2, 1 }, 
	{ 0, 2, 2, 2, 1 }, 
	{ 1, 2, 2, 2, 1 }, 
	{ 2, 2, 2, 2, 1 }, 
	{ 2, 0, 2, 2, 1 }, 
	{ 0, 0, 1, 2, 1 }, 
	{ 1, 0, 1, 2, 1 }, 
	{ 2, 0, 1, 2, 1 }, 
	{ 0, 1, 2, 2, 1 }, 
	{ 0, 1, 1, 2, 1 }, 
	{ 1, 1, 1, 2, 1 }, 
	{ 2, 1, 1, 2, 1 }, 
	{ 1, 1, 2, 2, 1 }, 
	{ 0, 2, 1, 2, 1 }, 
	{ 1, 2, 1, 2, 1 }, 
	{ 2, 2, 1, 2, 1 }, 
	{ 2, 1, 2, 2, 1 }, 
	{ 0, 2, 1, 2, 2 }, 
	{ 1, 2, 1, 2, 2 }, 
	{ 2, 2, 1, 2, 2 }, 
	{ 2, 1, 2, 2, 2 }, 
	{ 0, 0, 0, 1, 2 }, 
	{ 1, 0, 0, 1, 2 }, 
	{ 2, 0, 0, 1, 2 }, 
	{ 0, 0, 2, 1, 2 }, 
	{ 0, 1, 0, 1, 2 }, 
	{ 1, 1, 0, 1, 2 }, 
	{ 2, 1, 0, 1, 2 }, 
	{ 1, 0, 2, 1, 2 }, 
	{ 0, 2, 0, 1, 2 }, 
	{ 1, 2, 0, 1, 2 }, 
	{ 2, 2, 0, 1, 2 }, 
	{ 2, 0, 2, 1, 2 }, 
	{ 0, 2, 2, 1, 2 }, 
	{ 1, 2, 2, 1, 2 }, 
	{ 2, 2, 2, 1, 2 }, 
	{ 2, 0, 2, 1, 2 }, 
	{ 0, 0, 1, 1, 2 }, 
	{ 1, 0, 1, 1, 2 }, 
	{ 2, 0, 1, 1, 2 }, 
	{ 0, 1, 2, 1, 2 }, 
	{ 0, 1, 1, 1, 2 }, 
	{ 1, 1, 1, 1, 2 }, 
	{ 2, 1, 1, 1, 2 }, 
	{ 1, 1, 2, 1, 2 }, 
	{ 0, 2, 1, 1, 2 }, 
	{ 1, 2, 1, 1, 2 }, 
	{ 2, 2, 1, 1, 2 }, 
	{ 2, 1, 2, 1, 2 }, 
	{ 0, 2, 2, 2, 2 }, 
	{ 1, 2, 2, 2, 2 }, 
	{ 2, 2, 2, 2, 2 }, 
	{ 2, 1, 2, 2, 2 }, 
    };

    static const uint8_t ASTCIndexUnquantize[12][32] = {
        {0, 64},
        {0, 32, 64},
        {0, 21, 43, 64},
		{0, 16, 32, 48, 64},
		{0, 64, 12, 52, 25, 39},
		{0, 9, 18, 27, 37, 46, 55, 64},
		{0, 64, 7, 57, 14, 50, 21, 43, 28, 36},
		{0, 64, 17, 47, 5, 59, 23, 41, 11, 53, 28, 36},
		{0, 4, 8, 12, 17, 21, 25, 29, 35, 39, 43, 47, 52, 56, 60, 64},
		{0, 64, 16, 48, 3, 61, 19, 45, 6, 58, 23, 41, 9, 55, 26, 38, 13, 51, 29, 35},
		{0, 64, 8, 56, 16, 48, 24, 40, 2, 62, 11, 53, 19, 45, 27, 37, 5, 59, 13, 51, 22, 42, 30, 34},
		{0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64}
    };

    static const uint8_t ASTCColorUnquantize[21][256] = {
	{0,255},
	{0,128,255},
	{0,85,170,255},
	{0,64,128,192,255},
	{0,255,51,204,102,153},
	{0,36,73,109,146,182,219,255},
	{0,255,28,227,56,199,84,171,113,142},
	{0,255,69,186,23,232,92,163,46,209,116,139},
	{0,17,34,51,68,85,102,119,136,153,170,187,204,221,238,255},
	{0,255,67,188,13,242,80,175,27,228,94,161,40,215,107,148,54,201,121,134},
	{0,255,33,222,66,189,99,156,11,244,44,211,77,178,110,145,22,233,55,200,88,
         167,121,134},
	{0,8,16,24,33,41,49,57,66,74,82,90,99,107,115,123,132,140,148,156,165,173,
         181,189,198,206,214,222,231,239,247,255},
	{0,255,32,223,65,190,97,158,6,249,39,216,71,184,104,151,13,242,45,210,78,
         177,110,145,19,236,52,203,84,171,117,138,26,229,58,197,91,164,123,132},
	{0,255,16,239,32,223,48,207,65,190,81,174,97,158,113,142,5,250,21,234,38,
        217,54,201,70,185,86,169,103,152,119,136,11,244,27,228,43,212,59,196,76,
        179,92,163,108,147,124,131},
	{0,4,8,12,16,20,24,28,32,36,40,44,48,52,56,60,65,69,73,77,81,85,89,93,97,
        101,105,109,113,117,121,125,130,134,138,142,146,150,154,158,162,166,170,174,
        178,182,186,190,195,199,203,207,211,215,219,223,227,231,235,239,243,247,251,
        255},
	{0,255,16,239,32,223,48,207,64,191,80,175,96,159,112,143,3,252,19,236,35,
         220,51,204,67,188,83,172,100,155,116,139,6,249,22,233,38,217,54,201,71,184,
         87,168,103,152,119,136,9,246,25,230,42,213,58,197,74,181,90,165,106,149,
         122,133,13,242,29,226,45,210,61,194,77,178,93,162,109,146,125,130},
	{0,255,8,247,16,239,24,231,32,223,40,215,48,207,56,199,64,191,72,183,80,
         175,88,167,96,159,104,151,112,143,120,135,2,253,10,245,18,237,26,229,35,
         220,43,212,51,204,59,196,67,188,75,180,83,172,91,164,99,156,107,148,115,
         140,123,132,5,250,13,242,21,234,29,226,37,218,45,210,53,202,61,194,70,185,
         78,177,86,169,94,161,102,153,110,145,118,137,126,129},
	{0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,
         52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,
         102,104,106,108,110,112,114,116,118,120,122,124,126,129,131,133,135,137,139,
         141,143,145,147,149,151,153,155,157,159,161,163,165,167,169,171,173,175,177,
         179,181,183,185,187,189,191,193,195,197,199,201,203,205,207,209,211,213,215,
         217,219,221,223,225,227,229,231,233,235,237,239,241,243,245,247,249,251,253,
         255},
	{0,255,8,247,16,239,24,231,32,223,40,215,48,207,56,199,64,191,72,183,80,175,
         88,167,96,159,104,151,112,143,120,135,1,254,9,246,17,238,25,230,33,222,41,
         214,49,206,57,198,65,190,73,182,81,174,89,166,97,158,105,150,113,142,121,
         134,3,252,11,244,19,236,27,228,35,220,43,212,51,204,59,196,67,188,75,180,83,
         172,91,164,99,156,107,148,115,140,123,132,4,251,12,243,20,235,28,227,36,219,
         44,211,52,203,60,195,68,187,76,179,84,171,92,163,100,155,108,147,116,139,124,
         131,6,249,14,241,22,233,30,225,38,217,46,209,54,201,62,193,70,185,78,177,86,
         169,94,161,102,153,110,145,118,137,126,129},
	{0,255,4,251,8,247,12,243,16,239,20,235,24,231,28,227,32,223,36,219,40,215,44,
         211,48,207,52,203,56,199,60,195,64,191,68,187,72,183,76,179,80,175,84,171,88,
         167,92,163,96,159,100,155,104,151,108,147,112,143,116,139,120,135,124,131,1,
         254,5,250,9,246,13,242,17,238,21,234,25,230,29,226,33,222,37,218,41,214,45,210,
         49,206,53,202,57,198,61,194,65,190,69,186,73,182,77,178,81,174,85,170,89,166,
         93,162,97,158,101,154,105,150,109,146,113,142,117,138,121,134,125,130,2,253,6,
         249,10,245,14,241,18,237,22,233,26,229,30,225,34,221,38,217,42,213,46,209,50,
         205,54,201,58,197,62,193,66,189,70,185,74,181,78,177,82,173,86,169,90,165,94,
         161,98,157,102,153,106,149,110,145,114,141,118,137,122,133,126,129},
	{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,
         29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,
         55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,
         81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,
         105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,
         124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,
         143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,
         162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,
         181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,
         200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,
         219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,
         238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255},
    };

    struct ASTCBlockParams {
        ASTCBlockParams() {
            errorBlock = voidExtent = dualPlane = smallBlock = false;
            indexWidth = indexHeight = numPartitions = partitionIndex = colorCompSel = -1;
            indexFormat = SEQ_ILW;
            xdim = ydim = 0;
        }
        bool errorBlock;
        bool voidExtent;
        bool dualPlane;
        bool smallBlock;
        ASTCIntSeqFormatNum indexFormat;
        int32_t indexWidth;
        int32_t indexHeight;
        int32_t xinfillmul;
        int32_t yinfillmul;
        int32_t numPartitions;
        int32_t partitionIndex;
        int32_t colorCompSel;
        int32_t xdim;
        int32_t ydim;

        int32_t cem[4];
        int32_t voidValues[4];
        // Indexed by partition, then endpoint, then component
        int32_t endpointValues[4][2*4];

        bool partError[4];

        // Indexed by plane then index in 0..indexWidth*indexHeight
        int32_t indices[2][128];
    };
	
    bool decodeASTC(const ASTCBlock *block, float *pixels, int xdim, int ydim, int zdim);
    void EncodeConstColorASTC(ASTCBlock *block, float *pixel);
    void EncodeRGBA4x4ASTC(ASTCBlock *block, float *pixels, int xdim, int ydim);

	int select_partition(int seed, int x, int y, int z, int partitioncount, int small_block);
	void DecodeIndexMode(uint32_t indexMode, ASTCBlockParams &params);
}

#endif
