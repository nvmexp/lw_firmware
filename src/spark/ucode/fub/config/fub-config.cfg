####################################################################
#
# Config file for FUB profiles
#
####################################################################

no warnings qw(bareword);
no strict qw(subs);

# Profile definitions.
# Each profile is made up of one or more categories which are exelwted
# in the order the category *definition* appears below.

#
# Define profiles for each supported chip-family.  Each profile specifies the
# features that are supported in that family which in turn dictacts the source
# files which must be built and included in the image.
#
DEFINE_PROFILE "fub-lwdec_tu10x" , qw(default fub-lwdec_tu10x wrap);
DEFINE_PROFILE "fub-sec2_tu10x" , qw(default fub-sec2_tu10x wrap);
DEFINE_PROFILE "fub-lwdec_tu116" , qw(default fub-lwdec_tu116 wrap);
DEFINE_PROFILE "fub-sec2_tu116" , qw(default fub-sec2_tu116 wrap);
DEFINE_PROFILE "fub-sec2_tu10a_pkc" , qw(default fub-sec2_tu10a_pkc wrap);
DEFINE_PROFILE "fub-sec2_ccg" , qw(default fub-sec2_ccg wrap);

# Default profile if not specified on command line with --profile.
DEFAULT_PROFILE "fub-sec2_ccg";

# XXX - not used
CATEGORY "minimal";
{
    # omit features, classes, engines, apis that require unavailable gpu's
    MINIMAL_MODE      ON;
}

CATEGORY "default";
{
    # All default enabled features, engines, classes, apis
    ENABLE_FEATURES   ALL_DEFAULT_ENABLED;
    ENABLE_ENGINES    ALL_DEFAULT_ENABLED;
    ENABLE_CLASSES    ALL_DEFAULT_ENABLED;
    ENABLE_APIS       ALL_DEFAULT_ENABLED;

    ENABLE_FEATURES   PLATFORM_FUB;
    ENABLE_FEATURES   ARCH_FALCON;

    # Disable all GPUS preparatory to having a specific set enabled
    DISABLE_CHIPS       ( ALL );
}

CATEGORY "fub-lwdec_tu10x";
{
    # If elwvar FUBCFG_GPUS is set, then use that, else default
    if ($ELW{FUBCFG_GPUS}) {
        ENABLE_CHIPS    $ELW{FUBCFG_GPUS};
    } else {
        ENABLE_CHIPS    (TU102);
    }
    ENABLE_FEATURES(
        FUBCORE_TU10X,
        FUB_BURN_SELF_REVOCATION_FUSE,
        FUB_BURN_GEFORCE_SKU_RECOVERY,
        FUB_BURN_GEFORCE_SKU_RECOVERY_GFW_REV,
    );

    # set platform, arch. For now just always use these.
    DISABLE_FEATURES(
    );
}

CATEGORY "fub-sec2_tu10x";
{
    # If elwvar FUBCFG_GPUS is set, then use that, else default
    if ($ELW{FUBCFG_GPUS}) {
        ENABLE_CHIPS    $ELW{FUBCFG_GPUS};
    } else {
        ENABLE_CHIPS    (TU102);
    }
    ENABLE_FEATURES(
        FUBCORE_TU10X,
        FUB_BURN_SELF_REVOCATION_FUSE,
        FUB_BURN_LWFLASH_REV_FOR_WP_BYPASS,
        FUB_BURN_GFW_REV_FOR_WP_BYPASS, 
    );

    # set platform, arch. For now just always use these.
    DISABLE_FEATURES(
    );
}


CATEGORY "fub-sec2_ccg";
{
    # If elwvar FUBCFG_GPUS is set, then use that, else default
    if ($ELW{FUBCFG_GPUS}) {
        ENABLE_CHIPS    $ELW{FUBCFG_GPUS};
    } else {
        ENABLE_CHIPS    (TU102);
    }
    ENABLE_FEATURES(
    );

    # set platform, arch. For now just always use these.
    DISABLE_FEATURES(
    );
}

## CATEGORY "fub-sec2_tu10x_ccg";
## {
##     # If elwvar FUBCFG_GPUS is set, then use that, else default
##     if ($ELW{FUBCFG_GPUS}) {
##         ENABLE_CHIPS    $ELW{FUBCFG_GPUS};
##     } else {
##         ENABLE_CHIPS    (TU102);
##     }
##     ENABLE_FEATURES(
##         FUBCORE_TU10X,
##         FUB_CCG,
##     );
## 
##     # set platform, arch. For now just always use these.
##     DISABLE_FEATURES(
##     );
## }


CATEGORY "fub-sec2_tu10a_pkc";
{
    # If elwvar FUBCFG_GPUS is set, then use that, else default
    if ($ELW{FUBCFG_GPUS}) {
        ENABLE_CHIPS    $ELW{FUBCFG_GPUS};
    } else {
        ENABLE_CHIPS    (TU104);
    }
    ENABLE_FEATURES(
        FUBCORE_TU10X,
        FUB_BURN_SELF_REVOCATION_FUSE,
        FUB_BURN_AUTO_QS2_AHESASC_FUSE,
        FUB_BURN_AUTO_QS2_ASB_FUSE,
        FUB_BURN_AUTO_QS2_LWFLASH_FUSE,
        FUB_BURN_AUTO_QS2_IMAGESELECT_FUSE,
        FUB_BURN_AUTO_QS2_HULK_FUSE,
        FUB_BURN_AUTO_QS2_FWSEC_FUSE,
    );

    # set platform, arch. For now just always use these.
    DISABLE_FEATURES(
    );
}

CATEGORY "fub-lwdec_tu116";
{
    # If elwvar FUBCFG_GPUS is set, then use that, else default
    if ($ELW{FUBCFG_GPUS}) {
        ENABLE_CHIPS    $ELW{FUBCFG_GPUS};
    } else {
        ENABLE_CHIPS    (TU116);
    }
    ENABLE_FEATURES(
        FUBCORE_TU116,
        FUB_BURN_ALLOW_DRAM_CHIPID_READ_HULK_LICENSE,
        FUB_BURN_REVOKE_DRAM_CHIPID_READ_HULK_LICENSE,
    );

    # set platform, arch. For now just always use these.
    DISABLE_FEATURES(
    );
}

CATEGORY "fub-sec2_tu116";
{
    # If elwvar FUBCFG_GPUS is set, then use that, else default
    if ($ELW{FUBCFG_GPUS}) {
        ENABLE_CHIPS    $ELW{FUBCFG_GPUS};
    } else {
        ENABLE_CHIPS    (TU116);
    }
    ENABLE_FEATURES(
        FUBCORE_TU116,
        FUB_BURN_ALLOW_DRAM_CHIPID_READ_HULK_LICENSE,
        FUB_BURN_REVOKE_DRAM_CHIPID_READ_HULK_LICENSE,
    );

    # set platform, arch. For now just always use these.
    DISABLE_FEATURES(
    );
}

# Look in the environment and our -D args for any special cases.
CATEGORY "wrap";
{
    1;        # must not be empty block
}

1;
