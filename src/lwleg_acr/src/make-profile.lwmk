#
# _LWRM_COPYRIGHT_BEGIN_
#
# Copyright 2013-2020 by LWPU Corporation.  All rights reserved.  All
# information contained herein is proprietary and confidential to LWPU
# Corporation.  Any use, reproduction, or disclosure without the written
# permission of LWPU Corporation is prohibited.
#
# _LWRM_COPYRIGHT_END_
#

###############################################################################
# Default build options
###############################################################################

NO_CHECK_BUILD ?= false
NO_RELEASE     ?= false
INCLUDE_DT     ?= false
FALCON_ARCH    ?= falcon5

###############################################################################
# Target inspecific paths: these are paths used by the build but not dependent
# upon the build.
###############################################################################

FALCON_SYS_INC = $(P4ROOT)/sw/tools/falcon-gcc/falcon6/6.3.2_gcc471/falcon-elf-gcc/falcon-elf/include/
ACR_SW         = $(LW_SOURCE)/uproc/tegra_acr
ACRCFG         = $(LW_SOURCE)/uproc/tegra_acr/config
LWUPROC        = $(LW_SOURCE)/uproc
RESMAN_ROOT    = $(LW_SOURCE)/drivers/resman
UPROC_LWOS_SRC = $(LWUPROC)/libs/lwos/$(LWOS_VERSION)

###############################################################################
# Set profile-specific make vars. This includes things like the target falcon
# architecture (ex. falcon4), the linker-script to use, the manual directory,
# etc ...).
###############################################################################

include $(ACR_SW)/config/acr-profiles.mk

###############################################################################
# Load common falcon make vars and host command definitions (ie. MKDIR, P4,
# COPY, etc...).
###############################################################################

include $(LWUPROC)/build/common/lwFalconArch.lwmk

override LW_TARGET_ARCH = $(FALCON_TOOLS_BUILD)
override LW_TARGET_OS   = falcon
include $(LW_SOURCE)/drivers/common/build/lwCommon.lwmk

###############################################################################
# Define the output directory paths for the ACR build and all sub-make builds.
###############################################################################

CHIPNAME  := $(subst acr_,,$(ACRCFG_PROFILE))
CHIPNAME  := $(subst pmu-,,$(CHIPNAME))
CHIPNAME  := $(subst sec2-,,$(CHIPNAME))
FALCONNAME := unknown
ifeq ($(ACR_FALCON_PMU),true)
    FALCONNAME := pmu
endif
ifeq ($(ACR_FALCON_SEC2),true)
    FALCONNAME := sec2
endif

OUTPUTDIR := _out/$(FALCONNAME)/$(CHIPNAME)

###############################################################################
# Setup acr-config make vars and ilwoke acr-config. Use acr-config's
# makefile.mk to do all the work. The makefile will generate acr-config.mk in
# the output directory and then include it.
###############################################################################

ACRSRC_ALL          :=
ACRCFG_OPTIONS      :=
ACRCFG_OUTPUTDIR    ?= $(OUTPUTDIR)/config
ACRCFG_RESMAN_ROOT  := $(RESMAN_ROOT)
ACRCFG_ACRSW_ROOT   := $(ACR_SW)/src

include $(ACR_SW)/config/makefile.mk

# include the generated list of source files
ifdef ACRCFG_INITIALIZED
  include $(ACRCFG_OUTPUTDIR)/g_sources.mk
endif

###############################################################################
# Include profile-specific make settings to account for profile-specific build
# options/requirements.
###############################################################################

-include $(ACR_SW)/config/$(ACRCFG_PROFILE).mk

###############################################################################
# Export variables used by sub-makefiles ilwoked by this makefile
###############################################################################

export LW_TARGET_ARCH
export MANUAL_PATHS
export ACR_ONLY_BO
export ACR_UNLOAD
export ACR_LOAD
export ACR_BSI_LOCK
export ACR_BSI_BOOT
export ACR_SIG_VERIF
export ACR_SKIP_SCRUB
export ACR_BUILD_ONLY
export ACR_FMODEL_BUILD
export RTOS_VERSION
export LWOS_VERSION
export ACR_SAFE_BUILD
export ACR_MMU_INDEXED
export ACR_PRI_SOURCE_ISOLATION_ENABLED
###############################################################################
# Submake Configuration
#
# This makefile builds libraries and tools that are shared with other projects.
# Many of these builds may be lwstomized based on the needs of the project
# building it. It is therefore necessary to ensure isolation between the
# projects. Isolation is also required to allow for parallelization of project
# builds.
#
# Isolation is achieved by ensuring that all build output is kept separate
# between the projects. Ideally, output could all be redirected to a path
# defined within the ACR's/project's output directory. However, the common
# lwmake rules require that each submake target's output directory be contained
# within that target's source directory. As a result, the only way to ensure
# isolation is by establishing proper namespacing within each submake target's
# local output directory.
###############################################################################

SUBMAKE_NAMESPACE := acr
SUBMAKE_OUTPUTDIR := \
  _out/$(SUBMAKE_NAMESPACE)/$(FALCON_ARCH)_$(LW_BUILD_TYPE)

###############################################################################
# RTOS Configuration
###############################################################################

include $(LWUPROC)/build/common/lwRtosVersion.lwmk

RTOS_SRC  = $(LW_RTOS_SRC)
LIB_RTOS := $(RTOS_SRC)/$(SUBMAKE_OUTPUTDIR)/$(LW_RTOS_LIB_FILENAME)

SUBMAKE_TARGETS += RTOS
$(LIB_RTOS): submake.RTOS

##############################################################################
# Additional include paths required
##############################################################################

LW_INCLUDES += $(FALCON_SYS_INC)
LW_INCLUDES += $(LW_RTOS_INCLUDES)
LW_INCLUDES += $(ACRSW)/inc
LW_INCLUDES += $(ACRSW)/inc/external
LW_INCLUDES += $(LW_SOURCE)/drivers/common/inc/swref
LW_INCLUDES += $(LW_SOURCE)/drivers/common/inc/hwref
LW_INCLUDES += $(LW_SOURCE)/uproc/libs/lwos/dev/inc
LW_INCLUDES += $(RESMAN_ROOT)/kernel/inc
LW_INCLUDES += $(RESMAN_ROOT)/arch/lwalloc/common/inc
LW_INCLUDES += $(FALCON_TOOLS)/include
LW_INCLUDES += $(UPROC_LWOS_SRC)/inc
LW_INCLUDES += $(MANUAL_PATHS)
LW_INCLUDES += $(OUTPUTDIR)
LW_INCLUDES += $(OUTPUTDIR)/config

###############################################################################
# Define the names and locations for the various images that are generated
# during the build-process (IMG_*). Also create the list of files that need
# updated with those images when the install-mode is enabled.
###############################################################################

IMG_TARGET  := $(OUTPUTDIR)/g_acruc_$(CHIPNAME)
IMG_TARGET_DBG  := $(OUTPUTDIR)/g_acruc_$(CHIPNAME)_dbg
IMG_TARGET_PROD := $(OUTPUTDIR)/g_acruc_$(CHIPNAME)_prod
IMG_ELF     := $(IMG_TARGET).out
IMG_ELF_DBG := $(IMG_TARGET_DBG).out
IMG_ELF_PROD:= $(IMG_TARGET_PROD).out
IMG_READELF := $(IMG_TARGET).readelf
IMG_SECTIONS:= $(IMG_TARGET).sections
IMG_H       := $(IMG_TARGET).h
IMG_BIN     := $(IMG_TARGET).bin
IMG_OBJDUMP := $(IMG_TARGET).objdump
IMG_NM      := $(IMG_TARGET).nm
IMG_MAP     := $(IMG_TARGET).map
IMG_DT      := $(IMG_TARGET).dt
IMG_DBGLINE := $(IMG_TARGET).dbgline
IMG_H_DBG   := $(IMG_TARGET_DBG).h
IMG_H_PROD  := $(IMG_TARGET_PROD).h
# TODO: remove acr/acrlib nomenclature
HAL_INFO    := $(OUTPUTDIR)/config/g_acr_hal.h
HAL_INFO    += $(OUTPUTDIR)/config/g_acr_private.h
HAL_INFO    += $(OUTPUTDIR)/config/g_acrlib_hal.h
HAL_INFO    += $(OUTPUTDIR)/config/g_acrlib_private.h

ifeq ("$(IS_HS_ENCRYPTED)", "true")
    RELEASE_FILES += $(IMG_ELF_PROD) $(IMG_H_DBG) $(IMG_H_PROD) $(IMG_SECTIONS) $(IMG_MAP) $(IMG_NM) $(IMG_OBJDUMP) $(IMG_READELF)
else
    RELEASE_FILES += $(IMG_H) $(IMG_NM) $(IMG_OBJDUMP) $(IMG_READELF)
endif

###############################################################################
# Application-specific compiler/linker flags
# only adding required libraries
###############################################################################

LDFLAGS += -nodefaultlibs
LDFLAGS += -lgcc -lfalcon
LDFLAGS += -T $(ACRSW)/build/$(LDSCRIPT)

# Disable jump tables, because they go to RO data section which is not covered under signature check
CFLAGS += -fno-jump-tables

ifeq ($(ACR_UNLOAD), true)
	CFLAGS += -DACR_UNLOAD_PATH
endif

# Set macro to identify which profile
ifeq ($(ACR_FALCON_PMU), true)
    CFLAGS += -DACR_FALCON_PMU
    CFLAGS += -DDMEM_APERT_ENABLED
    CFLAGS += -DLW_MISRA_COMPLIANCE_REQUIRED
endif

ifeq ($(ACR_FALCON_SEC2), true)
    CFLAGS += -DACR_FALCON_SEC2
endif

ifeq ($(ACR_LOAD), true)
	CFLAGS += -DACR_LOAD_PATH
endif

ifeq ($(ACR_BSI_LOCK), true)
	CFLAGS += -DACR_BSI_LOCK_PATH
    CFLAGS += -DACR_BSI_PHASE
endif

ifeq ($(ACR_BSI_BOOT), true)
    CFLAGS += -DACR_BSI_BOOT_PATH
    CFLAGS += -DACR_BSI_PHASE
endif

ifeq ($(ACR_ONLY_BO), true)
    CFLAGS += -DACR_ONLY_BO
endif

ifeq ($(ACR_SIG_VERIF), true)
	CFLAGS += -DACR_SIG_VERIF
endif

ifeq ($(ACR_SAFE_BUILD), true)
	CFLAGS += -DACR_SAFE_BUILD
	CFLAGS += -msafety -fno-zero-initialized-in-bss -Werror
endif

ifeq ($(ACR_MMU_INDEXED), true)
        CFLAGS += -DACR_MMU_INDEXED
endif

ifeq ($(ACR_PRI_SOURCE_ISOLATION_ENABLED), true)
	CFLAGS += -DACR_PRI_SOURCE_ISOLATION_ENABLED
endif

ifeq ($(ACR_SKIP_SCRUB), true)
	CFLAGS += -DACR_SKIP_SCRUB
endif

ifeq ($(ACR_FIXED_TRNG), true)
	CFLAGS += -DACR_FIXED_TRNG
endif

ifeq ($(ACR_BUILD_ONLY), true)
    CFLAGS += -DACR_BUILD_ONLY
endif

ifeq ($(ACR_FMODEL_BUILD), true)
    CFLAGS += -DACR_FMODEL_BUILD
endif

ifeq ($(ACR_SUB_WPR), true)
    CFLAGS += -DACR_SUB_WPR
endif

ifeq ($(SEC2_PRESENT), true)
    CFLAGS += -DSEC2_PRESENT
endif

ifeq ($(LWENC_PRESENT), true)
    CFLAGS += -DLWENC_PRESENT
endif

ifeq ($(LWDEC_PRESENT), true)
    CFLAGS += -DLWDEC_PRESENT
endif

ifeq ($(DPU_PRESENT), true)
    CFLAGS += -DDPU_PRESENT
endif

ifeq ($(LW_TARGET_OS),falcon)
  CFLAGS += -DUPROC_FALCON
else ifeq ($(LW_TARGET_OS),riscv)
  CFLAGS += -DUPROC_RISCV
endif

ifneq (,$(findstring SafeRTOS, $(RTOS_VERSION)))
    CFLAGS += -DSAFERTOS
endif

ifeq ("$(IS_HS_ENCRYPTED)", "true")
    CFLAGS += -DIS_HS_ENCRYPTED=1
else
    CFLAGS += -DIS_HS_ENCRYPTED=0
endif

ifeq ($(SSP_ENABLED), true)
RANDOM_CANARY_NS := $(shell $(PYTHON) -c 'from random import randint; print(randint(65535, 1048576))')
   CFLAGS += -DIS_SSP_ENABLED
   CFLAGS += -fstack-protector-all
   CFLAGS += -DRANDOM_CANARY_NS=$(RANDOM_CANARY_NS)
endif

ifeq ($(CAPTURE_VCAST), true)
   CFLAGS += -DIS_CAPTURE_VCAST
endif

CFLAGS          += -Wno-uninitialized -Wno-implicit -Wno-unused

###############################################################################
# Vectorcast support
###############################################################################

VC_UTILS        := $(ACRSW)/utilities/vcast/
VC_ACTION       ?= none

### export options

export   P4
export   CC
export   FALCON_TOOLS
export   FALCON_COMPILER          := $(CC)
export   CCAST_PATH               := $(ACRCFG_ACRSW_ROOT)
export   C_DEFINE_LIST            := $(subst -D,,$(filter -D%, $(CFLAGS)))
export   TESTABLE_SOURCE_DIRS     := $(subst -I,,$(filter -I%, $(CFLAGS)))

### add/remove vcast files only if elw exists

export VC_INST_TYPE ?= ASIL_B/C
export VC_INST_SRCS := $(ACRSRC_ALL)

ifneq ($(wildcard vcast_elw),)
	ACRSRC_ALL   += vcast_elw/c_cover_io.c
	LW_INCLUDES  += vcast_elw
clobber_vcast:
	$(VC_UTILS)/init.sh de

.PHONY: clobber_vcast
clobber: clobber_vcast
endif

### rules and targets

ifeq ($(VC_ACTION),init)
build:
	$(VC_UTILS)/ccast_cfg.sh
	$(VC_UTILS)/init.sh
endif

ifeq ($(VC_ACTION),add)
build:
	$(VC_UTILS)/add_file.sh $(VC_INST_SRCS)
endif

# the following WARs a bug in adding srcs using Make

ifeq ($(VC_ACTION),list)
build:
	$(ECHO) $(VC_INST_SRCS)
endif	

###############################################################################
# Make variable used to tell mkimage which changelist number to include in the
# descriptor for the c-file image.
###############################################################################

ifneq ($(LW_DVS_BLD),1)
  APP_P4_CL = $(word 2, $(shell $(PERL) -e 'chdir(qw(.)); delete $$ELW{PWD}; \
		  print `$(P4) changes -m1 "$(LW_SOURCE)/..."`;'))
else
  APP_P4_CL = $(CHANGELIST)
endif

###############################################################################
# Define a string describing the project being built.  This string is used as
# a prefix for the majority of the output from the build for tracking progress
# and sanity-checking.
###############################################################################

BUILD_PROJECT_NAME = "[$(ACRCFG_PROFILE)]"

###############################################################################
# Parse the source files
###############################################################################
PERL_PARSER := $(ACRSW)/utilities/parse_files.pl
ADD_OBJECTS = ./init/lw/mulsi.o
FILE_PARSER = $(shell $(PERL) $(PERL_PARSER) --suffix "p" $(ACRSRC_ALL))
SOURCES     = $(FILE_PARSER)

###############################################################################
# Rules for buildig the ELF image and binary files
###############################################################################

ifeq ($(VC_ACTION),none)
build: $(addsuffix .build,$(SUBDIRS)) all

all: $(IMG_ELF) sign release
	$(ECHO) "Cleaning files... $(shell $(PERL) $(PERL_PARSER) --clean $(SOURCES))"
	$(RMDIR) -rf *.p.c
endif

###############################################################################
# Sign the binary. Uses pre-build signing tool (linux only for now)
###############################################################################
SIG_GEN        = $(ACRSW)/utilities/siggen/siggen
SIG_GEN_CFG    = $(SIGGEN_CFG)
GEN_CLASS_PL   = $(ACRSW)/utilities/gen_class_os.pl
GEN_CLASS_OUT  = $(IMG_TARGET).h
SIGN_SCRIPT    = "tmpsign.sh"
SIG_SCRIPT_EXP = $(foreach CHIP,$(SIGGEN_CHIPS), \
         "$(COPY) $(RELEASE_PATH)/g_acruc_$(CHIPNAME)_$(CHIP)_sig.h $(OUTPUTDIR)/g_acruc_$(CHIPNAME)_$(CHIP)_sig.h; chmod u+w $(OUTPUTDIR)/g_acruc_$(CHIPNAME)_$(CHIP)_sig.h; $(SIG_GEN) $(SIG_GEN_CFG) $(IMG_TARGET) $(IMG_TARGET) -app $(OUTPUTDIR)/g_acruc_$(CHIPNAME)_$(CHIP)_sig.h -sig $(OUTPUTDIR)/g_acruc_$(CHIPNAME)_$(CHIP)_sig.h  -chip $(CHIP) $(if $(filter $(IS_HS_ENCRYPTED),true), -forceSign -encryptUcode -totAppFilePrefix) ;") 
		#$(RELEASE_PATH)/g_acruc_$(CHIPNAME) -totAppFilePrefixDH \
		#$(RELEASE_PATH)/g_acruc_$(CHIPNAME)) ;")

RELEASE_FILES += $(foreach CHIP,$(SIGGEN_CHIPS),"$(OUTPUTDIR)/g_acruc_$(CHIPNAME)_$(CHIP)_sig.h")

sign: $(IMG_ELF)
	$(ECHO) $(SIG_SCRIPT_EXP) >> $(SIGN_SCRIPT)

ifeq ("$(IS_HS_ENCRYPTED)", "true")
	$(ECHO) "$(PERL) $(GEN_CLASS_PL) -dump app_os_images -hdr $(IMG_H_DBG) -bin $(IMG_ELF_DBG) -chip $(CHIPNAME) " >> $(SIGN_SCRIPT)
	$(ECHO) "$(PERL) $(GEN_CLASS_PL) -dump app_os_images -hdr $(IMG_H_PROD) -bin $(IMG_ELF_PROD) -chip $(CHIPNAME) " >> $(SIGN_SCRIPT)
else
	$(ECHO) "$(PERL) $(GEN_CLASS_PL) -dump app_os_images -hdr $(IMG_H) -bin $(IMG_ELF) -chip $(CHIPNAME)" >> $(SIGN_SCRIPT)
endif

###############################################################################
# The install process is handled by a perl-script to avoid the unnecessary
# complication of host-specific process in make.
###############################################################################

RELEASE_SCRIPT = $(LW_SOURCE)/uproc/build/scripts/release-imgs-if-changed.pl

COMMA := ,
EMPTY :=
SPACE := $(EMPTY) $(EMPTY)

RELEASE_IMG_ARGS += --output-prefix $(BUILD_PROJECT_NAME)
RELEASE_IMG_ARGS += --image         $(IMG_BIN)
RELEASE_IMG_ARGS += --p4            $(P4)

RELEASE_IMG_ARGS += --release-path $(RELEASE_PATH)

RELEASE_IMG_ARGS += --release-files            \
  $(subst $(SPACE),$(COMMA),$(RELEASE_FILES))

RELEASE_FILES_HAL = $(HAL_INFO)

RELEASE_IMG_ARGS += --release-path-hal $(RELEASE_PATH_HAL)

RELEASE_IMG_ARGS += --release-files-hal        \
  $(subst $(SPACE),$(COMMA),$(RELEASE_FILES_HAL))

# unless disabled, make sure the environment is fresh before installing
ifneq ("$(NO_CHECK_BUILD)","true")
  .PHONY: checkbuild
  install: checkbuild
endif

release: $(IMG_ELF)
	$(ECHO) $(PERL) $(RELEASE_SCRIPT) $(RELEASE_IMG_ARGS)  >> $(SIGN_SCRIPT)


###############################################################################
# Rule to produce the ELF image. Building all object-files is the prerequisite
# for this rule.
###############################################################################
$(IMG_ELF): $(OBJECTS) $(ACRSW)/build/$(LDSCRIPT)
	$(ECHO) $(BUILD_PROJECT_NAME) generating $(notdir $@)
	$(CC) $(CFLAGS) $(ADD_OBJECTS) $(OBJECTS) -o $(IMG_ELF) $(LDFLAGS)
	$(ECHO) "AppVersion: $(APP_P4_CL)" > $(IMG_OBJDUMP)
	$(ECHO) "AppVersion: $(APP_P4_CL)" > $(IMG_OBJDUMP).source
	$(ECHO) "AppVersion: $(APP_P4_CL)" > $(IMG_NM)
	$(ECHO) "AppVersion: $(APP_P4_CL)" > $(IMG_READELF)
	$(OBJDUMP) -d    $(IMG_ELF) >> $(IMG_OBJDUMP)
	$(OBJDUMP) -S -d $(IMG_ELF) >> $(IMG_OBJDUMP).source
	$(DUMPEXEC) -img $(IMG_ELF) -b $(IMG_ELF)
	$(NM)      -S -n $(IMG_ELF) >> $(IMG_NM)
	$(ECHO) $(NM)      $(IMG_ELF)       > $(IMG_MAP)
	$(NM)      $(IMG_ELF)       >> $(IMG_MAP)
	$(ECHO) $(BUILD_PROJECT_NAME) generating $(notdir $(IMG_READELF))
	$(READELF) --all $(IMG_ELF) >> $(IMG_READELF)
	$(READELF) -S $(IMG_ELF) >> $(IMG_SECTIONS)
	$(ECHO) $(BUILD_PROJECT_NAME) generating $(notdir $(IMG_DBGLINE))
	$(READELF) --debug-dump=decodedline $(IMG_ELF) >> $(IMG_DBGLINE)
	$(ECHO) $(BUILD_PROJECT_NAME) The ELF name is $(IMG_ELF)

###############################################################################
# Rule for generating .dt/symdump file
###############################################################################

SYMDUMP_SCRIPT = $(LW_SOURCE)/pmu_sw/build/symdump/symdump.pl

SYMDUMP_ARGS  += $(IMG_ELF) $(IMG_DT)
SYMDUMP_ARGS  += --falcon-tools $(FALCON_TOOLS)
SYMDUMP_ARGS  += --acl          $(APP_P4_CL)

$(IMG_DT):
	-$(PERL) $(SYMDUMP_SCRIPT) $(SYMDUMP_ARGS)

ifeq ("$(INCLUDE_DT)","true")
  all: $(IMG_DT)
endif

###############################################################################
# Common/Shared Rules
###############################################################################

include $(LW_SOURCE)/drivers/common/build/lwCommonRules.lwmk

#
# The common rule for cleaning (provided by lwCommonRules.lwmk) only supports
# flat output-directory structures and also expect object-files to be suffixed
# with .obj instead of .o. Until the rule is improved, be safe and mimic the
# behavior of clobber by simply deleting the output-directory. For falcon
# builds, there is actually very little different between 'clean' and 'clobber'
# anyway.
#
clean_ucode:
	-$(RMDIR) -rf $(OUTPUTDIR)

.PHONY: clean_ucode
clean: clean_ucode
