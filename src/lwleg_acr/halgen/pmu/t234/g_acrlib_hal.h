// This file is automatically generated by acr-config - DO NOT EDIT!
//
// Provides access to ACRLIB Hal interfaces.
//
// Profile:  acr_pmu-t234_load
// Haldef:   /home/project.smadhavan_mobile/p4/sw/dev/gpu_drv/chips_a/uproc/tegra_acr/src/../config/haldefs/acrlib.def
// Template: templates/gt_eng_hal.h
//

#ifndef G_ACRLIBHAL_H
#define G_ACRLIBHAL_H

//
// Typedefs for ACRLIB public object interfaces.
//



//
// "struct" to list ACRLIB's public interfaces, eg:  pAcrlib->acrlibInit(pGpu, pAcrlib)
//




//
// Typedefs for ACRLIB HAL interfaces.
//

typedef LwBool         AcrlibIsBootstrapOwner(LwU32 falconId);
typedef ACR_STATUS     AcrlibFindRegMapping(PACR_FLCN_CONFIG pFlcnCfg, ACR_FLCN_REG_LABEL acrLabel, PACR_REG_MAPPING pMap, PFLCN_REG_TGT pTgt);
typedef void           AcrlibFlcnRegLabelWrite(PACR_FLCN_CONFIG pFlcnCfg, ACR_FLCN_REG_LABEL reglabel, LwU32 data);
typedef LwU32          AcrlibFlcnRegLabelRead(PACR_FLCN_CONFIG pFlcnCfg, ACR_FLCN_REG_LABEL reglabel);
typedef LwU32          AcrlibFlcnRegRead(PACR_FLCN_CONFIG pFlcnCfg, FLCN_REG_TGT tgt, LwU32 regOff);
typedef void           AcrlibFlcnRegWrite(PACR_FLCN_CONFIG pFlcnCfg, FLCN_REG_TGT tgt, LwU32 regOff, LwU32 data);
typedef ACR_STATUS     AcrlibGetFalconConfig(LwU32 falconId, LwU32 falconInstance, PACR_FLCN_CONFIG pFlcnCfg);
typedef ACR_STATUS     AcrlibPollForScrubbing(PACR_FLCN_CONFIG pFlcnCfg);
typedef LwBool         AcrlibIsFalconHalted(PACR_FLCN_CONFIG pFlcnCfg);
typedef ACR_STATUS     AcrlibSetupTargetRegisters(PACR_FLCN_CONFIG pFlcnCfg);
typedef void           AcrlibGetLwrrentTimeNs(PACR_TIMESTAMP pTime);
typedef LwU32          AcrlibGetElapsedTimeNs(const PACR_TIMESTAMP pTime);
typedef ACR_STATUS     AcrlibCheckTimeout(LwU32 timeoutNs, ACR_TIMESTAMP startTimeNs, LwS32* pTimeoutLeftNs);
typedef ACR_STATUS     AcrlibSetupCtxDma(PACR_FLCN_CONFIG pFlcnCfg, LwU32 ctxDma, LwBool bIsPhysical);
typedef ACR_STATUS     AcrlibIssueTargetFalconDma(LwU32 dstOff, LwU64 fbBase, LwU32 fbOff, LwU32 sizeInBytes, LwU32 regionID, LwBool bIsSync, LwBool bIsDstImem, PACR_FLCN_CONFIG pFlcnCfg);
typedef ACR_STATUS     AcrlibResetFalcon(PACR_FLCN_CONFIG pFlcnCfg, LwBool bForceFlcnOnlyReset);
typedef void           AcrlibSelwreResetFalcon(PACR_FLCN_CONFIG pFlcnCfg);
typedef ACR_STATUS     AcrlibLockFalconRegSpace(LwU32 sourceId, PACR_FLCN_CONFIG pTargetFlcnCfg, LwU32 *pTargetMaskPlmOldValue, LwU32 *pTargetMaskOldValue,LwBool setLock);
typedef LwU32          AcrlibFindFarthestImemBl(PACR_FLCN_CONFIG pFlcnCfg, LwU32 codeSizeInBytes);
typedef LwU32          AcrlibFindTotalDmemBlocks(PACR_FLCN_CONFIG pFlcnCfg);
typedef LwBool         AcrlibCheckIfUcodeFitsFalcon(PACR_FLCN_CONFIG pFlcnCfg, LwU32 ucodeSize, LwBool bIsDstImem);
typedef ACR_STATUS     AcrlibProgramRegionCfg(PACR_FLCN_CONFIG pFlcnCfg, LwBool bUseCsb, LwU32 ctxDma, LwU32 regionID);
typedef void           AcrlibSetupBootvec(PACR_FLCN_CONFIG pFlcnCfg, LwU32 bootvec);
typedef void           AcrlibSetupDmaCtl(PACR_FLCN_CONFIG pFlcnCfg, LwBool bIsCtxRequired);
typedef void           AcrlibProgramDmaBase(PACR_FLCN_CONFIG pFlcnCfg, LwU64 fbBase);
typedef void           AcrlibInitializeStackCfg(PACR_FLCN_CONFIG arg1, LwU32 arg2);


//
// struct to access ACRLIB's hal interfaces, eg:  pAcrlib->hal.acrlibReadFoo(pGpu, pAcrlib)
//

typedef struct ACRLIB_HAL_IFACES {
    LwU8 dummy; // avoid empty typedef
} ACRLIB_HAL_IFACES;


//
// macro defines to directly access ACRLIB's hal interfaces,
// eg: #define acrlibReadFoo_HAL(_pGpu, _pAcrlib) _pAcrlib->hal.acrlibReadFoo(_pGpu, _pAcrlib)
//

#define acrlibIsBootstrapOwner_HAL(_pAcrlib, _falconId)  \
        acrlibIsBootstrapOwner_GM200(_falconId)
#define acrlibFindRegMapping_HAL(_pAcrlib, _pFlcnCfg, _acrLabel, _pMap, _pTgt)  \
        acrlibFindRegMapping_GM200(_pFlcnCfg, _acrLabel, _pMap, _pTgt)
#define acrlibFlcnRegLabelWrite_HAL(_pAcrlib, _pFlcnCfg, _reglabel, _data)  \
        acrlibFlcnRegLabelWrite_GM200(_pFlcnCfg, _reglabel, _data)
#define acrlibFlcnRegLabelRead_HAL(_pAcrlib, _pFlcnCfg, _reglabel)  \
        acrlibFlcnRegLabelRead_GM200(_pFlcnCfg, _reglabel)
#define acrlibFlcnRegRead_HAL(_pAcrlib, _pFlcnCfg, _tgt, _regOff)  \
        acrlibFlcnRegRead_GM200(_pFlcnCfg, _tgt, _regOff)
#define acrlibFlcnRegWrite_HAL(_pAcrlib, _pFlcnCfg, _tgt, _regOff, _data)  \
        acrlibFlcnRegWrite_GM200(_pFlcnCfg, _tgt, _regOff, _data)
#define acrlibGetFalconConfig_HAL(_pAcrlib, _falconId, _falconInstance, _pFlcnCfg)  \
        acrlibGetFalconConfig_GM200(_falconId, _falconInstance, _pFlcnCfg)
#define acrlibPollForScrubbing_HAL(_pAcrlib, _pFlcnCfg)  \
        acrlibPollForScrubbing_GM200(_pFlcnCfg)
#define acrlibIsFalconHalted_HAL(_pAcrlib, _pFlcnCfg)  \
        acrlibIsFalconHalted_GM200(_pFlcnCfg)
#define acrlibSetupTargetRegisters_HAL(_pAcrlib, _pFlcnCfg)  \
        acrlibSetupTargetRegisters_GM200(_pFlcnCfg)
#define acrlibGetLwrrentTimeNs_HAL(_pAcrlib, _pTime)  \
        acrlibGetLwrrentTimeNs_GM200(_pTime)
#define acrlibGetElapsedTimeNs_HAL(_pAcrlib, _pTime)  \
        acrlibGetElapsedTimeNs_GM200(_pTime)
#define acrlibCheckTimeout_HAL(_pAcrlib, _timeoutNs, _startTimeNs, _pTimeoutLeftNs)  \
        acrlibCheckTimeout_GM200(_timeoutNs, _startTimeNs, _pTimeoutLeftNs)
#define acrlibSetupCtxDma_HAL(_pAcrlib, _pFlcnCfg, _ctxDma, _bIsPhysical)  \
        acrlibSetupCtxDma_GV11B(_pFlcnCfg, _ctxDma, _bIsPhysical)
#define acrlibIssueTargetFalconDma_HAL(_pAcrlib, _dstOff, _fbBase, _fbOff, _sizeInBytes, _regionID, _bIsSync, _bIsDstImem, _pFlcnCfg)  \
        acrlibIssueTargetFalconDma_GM200(_dstOff, _fbBase, _fbOff, _sizeInBytes, _regionID, _bIsSync, _bIsDstImem, _pFlcnCfg)
#define acrlibResetFalcon_HAL(_pAcrlib, _pFlcnCfg, _bForceFlcnOnlyReset)  \
        acrlibResetFalcon_GM200(_pFlcnCfg, _bForceFlcnOnlyReset)
#define acrlibSelwreResetFalcon_HAL(_pAcrlib, _pFlcnCfg)  \
        acrlibSelwreResetFalcon_STUB(_pFlcnCfg)
#define acrlibLockFalconRegSpace_HAL(_pAcrlib, _sourceId, _pTargetFlcnCfg, _pTargetMaskPlmOldValue, _pTargetMaskOldValue, _setLock)  \
        acrlibLockFalconRegSpace_T234(_sourceId, _pTargetFlcnCfg, _pTargetMaskPlmOldValue, _pTargetMaskOldValue, _setLock)
#define acrlibFindFarthestImemBl_HAL(_pAcrlib, _pFlcnCfg, _codeSizeInBytes)  \
        acrlibFindFarthestImemBl_GM200(_pFlcnCfg, _codeSizeInBytes)
#define acrlibFindTotalDmemBlocks_HAL(_pAcrlib, _pFlcnCfg)  \
        acrlibFindTotalDmemBlocks_GM200(_pFlcnCfg)
#define acrlibCheckIfUcodeFitsFalcon_HAL(_pAcrlib, _pFlcnCfg, _ucodeSize, _bIsDstImem)  \
        acrlibCheckIfUcodeFitsFalcon_GM200(_pFlcnCfg, _ucodeSize, _bIsDstImem)
#define acrlibProgramRegionCfg_HAL(_pAcrlib, _pFlcnCfg, _bUseCsb, _ctxDma, _regionID)  \
        acrlibProgramRegionCfg_GM200(_pFlcnCfg, _bUseCsb, _ctxDma, _regionID)
#define acrlibSetupBootvec_HAL(_pAcrlib, _pFlcnCfg, _bootvec)  \
        acrlibSetupBootvec_GM200(_pFlcnCfg, _bootvec)
#define acrlibSetupDmaCtl_HAL(_pAcrlib, _pFlcnCfg, _bIsCtxRequired)  \
        acrlibSetupDmaCtl_GM200(_pFlcnCfg, _bIsCtxRequired)
#define acrlibProgramDmaBase_HAL(_pAcrlib, _pFlcnCfg, _fbBase)  \
        acrlibProgramDmaBase_GM200(_pFlcnCfg, _fbBase)
#define acrlibInitializeStackCfg_HAL(_pAcrlib, _arg1, _arg2)  \
        acrlibInitializeStackCfg_STUB(_arg1, _arg2)

//
// hal function prototype defines for direct hal calls.
//

LwBool              acrlibIsBootstrapOwner_GM200(LwU32 falconId)   // T234
                        GCC_ATTRIB_SECTION("imem_acr", "acrlibIsBootstrapOwner_GM200");
ACR_STATUS          acrlibFindRegMapping_GM200(PACR_FLCN_CONFIG pFlcnCfg, ACR_FLCN_REG_LABEL acrLabel, PACR_REG_MAPPING pMap, PFLCN_REG_TGT pTgt)   // T234
                        GCC_ATTRIB_SECTION("imem_acr", "acrlibFindRegMapping_GM200");
void                acrlibFlcnRegLabelWrite_GM200(PACR_FLCN_CONFIG pFlcnCfg, ACR_FLCN_REG_LABEL reglabel, LwU32 data)   // T234
                        GCC_ATTRIB_SECTION("imem_acr", "acrlibFlcnRegLabelWrite_GM200");
LwU32               acrlibFlcnRegLabelRead_GM200(PACR_FLCN_CONFIG pFlcnCfg, ACR_FLCN_REG_LABEL reglabel)   // T234
                        GCC_ATTRIB_SECTION("imem_acr", "acrlibFlcnRegLabelRead_GM200");
LwU32               acrlibFlcnRegRead_GM200(PACR_FLCN_CONFIG pFlcnCfg, FLCN_REG_TGT tgt, LwU32 regOff)   // T234
                        GCC_ATTRIB_SECTION("imem_acr", "acrlibFlcnRegRead_GM200");
void                acrlibFlcnRegWrite_GM200(PACR_FLCN_CONFIG pFlcnCfg, FLCN_REG_TGT tgt, LwU32 regOff, LwU32 data)   // T234
                        GCC_ATTRIB_SECTION("imem_acr", "acrlibFlcnRegWrite_GM200");
ACR_STATUS          acrlibGetFalconConfig_GM200(LwU32 falconId, LwU32 falconInstance, PACR_FLCN_CONFIG pFlcnCfg)   // T234
                        GCC_ATTRIB_SECTION("imem_acr", "acrlibGetFalconConfig_GM200");
ACR_STATUS          acrlibPollForScrubbing_GM200(PACR_FLCN_CONFIG pFlcnCfg)   // T234
                        GCC_ATTRIB_SECTION("imem_acr", "acrlibPollForScrubbing_GM200");
LwBool              acrlibIsFalconHalted_GM200(PACR_FLCN_CONFIG pFlcnCfg)   // T234
                        GCC_ATTRIB_SECTION("imem_acr", "acrlibIsFalconHalted_GM200");
ACR_STATUS          acrlibSetupTargetRegisters_GM200(PACR_FLCN_CONFIG pFlcnCfg)   // T234
                        GCC_ATTRIB_SECTION("imem_acr", "acrlibSetupTargetRegisters_GM200");
void                acrlibGetLwrrentTimeNs_GM200(PACR_TIMESTAMP pTime)   // T234
                        GCC_ATTRIB_SECTION("imem_acr", "acrlibGetLwrrentTimeNs_GM200");
LwU32               acrlibGetElapsedTimeNs_GM200(const PACR_TIMESTAMP pTime)   // T234
                        GCC_ATTRIB_SECTION("imem_acr", "acrlibGetElapsedTimeNs_GM200");
ACR_STATUS          acrlibCheckTimeout_GM200(LwU32 timeoutNs, ACR_TIMESTAMP startTimeNs, LwS32* pTimeoutLeftNs)   // T234
                        GCC_ATTRIB_SECTION("imem_acr", "acrlibCheckTimeout_GM200");
ACR_STATUS          acrlibSetupCtxDma_GV11B(PACR_FLCN_CONFIG pFlcnCfg, LwU32 ctxDma, LwBool bIsPhysical)   // T234
                        GCC_ATTRIB_SECTION("imem_acr", "acrlibSetupCtxDma_GV11B");
ACR_STATUS          acrlibIssueTargetFalconDma_GM200(LwU32 dstOff, LwU64 fbBase, LwU32 fbOff, LwU32 sizeInBytes, LwU32 regionID, LwBool bIsSync, LwBool bIsDstImem, PACR_FLCN_CONFIG pFlcnCfg)   // T234
                        GCC_ATTRIB_SECTION("imem_acr", "acrlibIssueTargetFalconDma_GM200");
ACR_STATUS          acrlibResetFalcon_GM200(PACR_FLCN_CONFIG pFlcnCfg, LwBool bForceFlcnOnlyReset)   // T234
                        GCC_ATTRIB_SECTION("imem_acr", "acrlibResetFalcon_GM200");
static void         acrlibSelwreResetFalcon_STUB(PACR_FLCN_CONFIG pFlcnCfg)   // T234
                        GCC_ATTRIB_SECTION("imem_acr", "acrlibSelwreResetFalcon_STUB");
ACR_STATUS          acrlibLockFalconRegSpace_T234(LwU32 sourceId, PACR_FLCN_CONFIG pTargetFlcnCfg, LwU32 *pTargetMaskPlmOldValue, LwU32 *pTargetMaskOldValue,LwBool setLock)   // T234
                        GCC_ATTRIB_SECTION("imem_acr", "acrlibLockFalconRegSpace_T234");
LwU32               acrlibFindFarthestImemBl_GM200(PACR_FLCN_CONFIG pFlcnCfg, LwU32 codeSizeInBytes)   // T234
                        GCC_ATTRIB_SECTION("imem_acr", "acrlibFindFarthestImemBl_GM200");
LwU32               acrlibFindTotalDmemBlocks_GM200(PACR_FLCN_CONFIG pFlcnCfg)   // T234
                        GCC_ATTRIB_SECTION("imem_acr", "acrlibFindTotalDmemBlocks_GM200");
LwBool              acrlibCheckIfUcodeFitsFalcon_GM200(PACR_FLCN_CONFIG pFlcnCfg, LwU32 ucodeSize, LwBool bIsDstImem)   // T234
                        GCC_ATTRIB_SECTION("imem_acr", "acrlibCheckIfUcodeFitsFalcon_GM200");
ACR_STATUS          acrlibProgramRegionCfg_GM200(PACR_FLCN_CONFIG pFlcnCfg, LwBool bUseCsb, LwU32 ctxDma, LwU32 regionID)   // T234
                        GCC_ATTRIB_SECTION("imem_acr", "acrlibProgramRegionCfg_GM200");
void                acrlibSetupBootvec_GM200(PACR_FLCN_CONFIG pFlcnCfg, LwU32 bootvec)   // T234
                        GCC_ATTRIB_SECTION("imem_acr", "acrlibSetupBootvec_GM200");
void                acrlibSetupDmaCtl_GM200(PACR_FLCN_CONFIG pFlcnCfg, LwBool bIsCtxRequired)   // T234
                        GCC_ATTRIB_SECTION("imem_acr", "acrlibSetupDmaCtl_GM200");
void                acrlibProgramDmaBase_GM200(PACR_FLCN_CONFIG pFlcnCfg, LwU64 fbBase)   // T234
                        GCC_ATTRIB_SECTION("imem_acr", "acrlibProgramDmaBase_GM200");
static void         acrlibInitializeStackCfg_STUB(PACR_FLCN_CONFIG arg1, LwU32 arg2)   // T234
                        GCC_ATTRIB_SECTION("imem_acr", "acrlibInitializeStackCfg_STUB");

// Are there any optimized hal interfaces?
#define ACRLIB_DIRECT_HAL_CALLS            1

// Are there any non-optimized hal interfaces?
#define ACRLIB_INDIRECT_HAL_CALLS          0


//
// Inline stub function definitions.
//

// ACRLIB:hal:SELWRE_RESET_FALCON  -  T234
static LW_INLINE void acrlibSelwreResetFalcon_STUB(
    PACR_FLCN_CONFIG  pFlcnCfg
)
{
}

// ACRLIB:hal:INITIALIZE_STACK_CFG  -  T234
static LW_INLINE void acrlibInitializeStackCfg_STUB(
    PACR_FLCN_CONFIG  arg1,
    LwU32         arg2
)
{
}



//
// ACRLIB PDB properties
//



#endif  // G_ACRLIBHAL_H
