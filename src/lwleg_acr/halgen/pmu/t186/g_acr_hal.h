// This file is automatically generated by acr-config - DO NOT EDIT!
//
// Provides access to ACR Hal interfaces.
//
// Profile:  acr_pmu-t186_load
// Haldef:   /home/scratch.dgoyal_gpu/p4/sw/rel/gpu_drv/r435/CHIPSSAFETY435_35/uproc/tegra_acr/src/../config/haldefs/acr.def
// Template: templates/gt_eng_hal.h
//

#ifndef G_ACRHAL_H
#define G_ACRHAL_H

//
// Typedefs for ACR public object interfaces.
//



//
// "struct" to list ACR's public interfaces, eg:  pAcr->acrInit(pGpu, pAcr)
//




//
// Typedefs for ACR HAL interfaces.
//

typedef ACR_STATUS     AcrInit(void);
typedef void           AcrInitScpRng(void);
typedef ACR_STATUS     AcrGetRandNum(LwU32 *pRandInOut);
typedef ACR_STATUS     AcrFindWprRegions(LwU32 *pWprIndex);
typedef ACR_STATUS     AcrFindCtxDma(LwU32 *pCtxDma);
typedef ACR_STATUS     AcrPollForResetCompletion(LwU32 validIndexMap);
typedef ACR_STATUS     AcrResetEngineFalcon(LwU32 validIndexMap);
typedef ACR_STATUS     AcrSetupLSFalcon(PLSF_LSB_HEADER pLsbHeaders, LwU32 validIndexMap);
typedef ACR_STATUS     AcrPopulateDMAParameters(LwU32 wprRegIndex);
typedef ACR_STATUS     AcrReadWprHeader(void);
typedef ACR_STATUS     AcrWriteWprHeader(void);
typedef ACR_STATUS     AcrReadLsbHeader(PLSF_WPR_HEADER pWprHeader, PLSF_LSB_HEADER pLsbHeader);
typedef ACR_STATUS     AcrScrubUnusedWprWithZeroes(LwU32 nextKnownOffset, LwU32 size);
typedef ACR_STATUS     AcrSanityCheckBlData(LwU32 falconId, LwU32 blDataOffset, LwU32 blDataSize);
typedef ACR_STATUS     AcrBootstrapFalcons(void);
typedef LwU32          AcrIssueDma(LwU32 memOff, LwBool bIsImem, LwU32 fbOff, LwU32 sizeInBytes, ACR_DMA_DIRECTION dmaDirection, ACR_DMA_SYNC_TYPE dmaSync, PACR_DMA_PROP pDmaProp);
typedef ACR_STATUS     AcrCheckFuseRevocation(void);
typedef void           AcrGetFuseVersionHW(LwU32 *fuseVersion);
typedef void           AcrGetFuseVersionSW(LwU32 *fuseVersion);
typedef void           AcrCallwlateDmhash(LwU8 *pHash, LwU8 *pData, LwU32 size);
typedef ACR_STATUS     AcrVerifySignature(LwU8 *pSignature, LwU32 falconId, LwU32 binarysize, LwU32 binOffset, PLSF_LSB_HEADER pLsfHeader, LwBool bIsUcode);
typedef LwBool         AcrIsDebugModeEnabled(void);
typedef void           AcrProgramDmaBase(LwBool bIsImem, PACR_DMA_PROP pDmaProp);
typedef ACR_STATUS     AcrCopyUcodesToWpr(void);
typedef void           AcrFetchRegion(void);
typedef ACR_STATUS     AcrCheckIfBuildIsSupported(void);
typedef void           AcrMitigateNsRestartFromHs(void);
typedef ACR_STATUS     AcrWriteAcrVersionToBsiSelwreScratch(LwU32 arg1);
typedef ACR_STATUS     AcrProgramHubEncryption(void);
typedef void           AcrDisableLockdown(void);
typedef ACR_STATUS     AcrLockFalconReset(LwBool bLock);
typedef ACR_STATUS     AcrLockFalconRegSpace(PACR_FLCN_CONFIG pFlcnCfg, LwBool setTrap);
typedef ACR_STATUS     AcrLockFalconRegSpaceViaDecodeTrapCommon(void);
typedef ACR_STATUS     AcrCopyLsGrpSigToRegsForSec2(LwU32 *pArg1, LwU32 arg2);


//
// struct to access ACR's hal interfaces, eg:  pAcr->hal.acrReadFoo(pGpu, pAcr)
//

typedef struct ACR_HAL_IFACES {
    LwU8 dummy; // avoid empty typedef
} ACR_HAL_IFACES;


//
// macro defines to directly access ACR's hal interfaces,
// eg: #define acrReadFoo_HAL(_pGpu, _pAcr) _pAcr->hal.acrReadFoo(_pGpu, _pAcr)
//

#define acrInit_HAL(_pAcr)  \
        acrInit_T210()
#define acrInitScpRng_HAL(_pAcr)  \
        acrInitScpRng_T210()
#define acrGetRandNum_HAL(_pAcr, _pRandInOut)  \
        acrGetRandNum_T210(_pRandInOut)
#define acrFindWprRegions_HAL(_pAcr, _pWprIndex)  \
        acrFindWprRegions_T210(_pWprIndex)
#define acrFindCtxDma_HAL(_pAcr, _pCtxDma)  \
        acrFindCtxDma_GM200(_pCtxDma)
#define acrPollForResetCompletion_HAL(_pAcr, _validIndexMap)  \
        acrPollForResetCompletion_GM200(_validIndexMap)
#define acrResetEngineFalcon_HAL(_pAcr, _validIndexMap)  \
        acrResetEngineFalcon_GM200(_validIndexMap)
#define acrSetupLSFalcon_HAL(_pAcr, _pLsbHeaders, _validIndexMap)  \
        acrSetupLSFalcon_GM200(_pLsbHeaders, _validIndexMap)
#define acrPopulateDMAParameters_HAL(_pAcr, _wprRegIndex)  \
        acrPopulateDMAParameters_GM200(_wprRegIndex)
#define acrReadWprHeader_HAL(_pAcr)  \
        acrReadWprHeader_GM200()
#define acrWriteWprHeader_HAL(_pAcr)  \
        acrWriteWprHeader_GM200()
#define acrReadLsbHeader_HAL(_pAcr, _pWprHeader, _pLsbHeader)  \
        acrReadLsbHeader_GM200(_pWprHeader, _pLsbHeader)
#define acrScrubUnusedWprWithZeroes_HAL(_pAcr, _nextKnownOffset, _size)  \
        acrScrubUnusedWprWithZeroes_GM200(_nextKnownOffset, _size)
#define acrSanityCheckBlData_HAL(_pAcr, _falconId, _blDataOffset, _blDataSize)  \
        acrSanityCheckBlData_GM200(_falconId, _blDataOffset, _blDataSize)
#define acrBootstrapFalcons_HAL(_pAcr)  \
        acrBootstrapFalcons_GM200()
#define acrIssueDma_HAL(_pAcr, _memOff, _bIsImem, _fbOff, _sizeInBytes, _dmaDirection, _dmaSync, _pDmaProp)  \
        acrIssueDma_GM200(_memOff, _bIsImem, _fbOff, _sizeInBytes, _dmaDirection, _dmaSync, _pDmaProp)
#define acrCheckFuseRevocation_HAL(_pAcr)  \
        acrCheckFuseRevocation_STUB()
#define acrGetFuseVersionHW_HAL(_pAcr, _pFuseVersion)  \
        acrGetFuseVersionHW_STUB(_pFuseVersion)
#define acrGetFuseVersionSW_HAL(_pAcr, _pFuseVersion)  \
        acrGetFuseVersionSW_STUB(_pFuseVersion)
#define acrCallwlateDmhash_HAL(_pAcr, _pHash, _pData, _size)  \
        acrCallwlateDmhash_GM200(_pHash, _pData, _size)
#define acrVerifySignature_HAL(_pAcr, _pSignature, _falconId, _binarysize, _binOffset, _pLsfHeader, _bIsUcode)  \
        acrVerifySignature_GM200(_pSignature, _falconId, _binarysize, _binOffset, _pLsfHeader, _bIsUcode)
#define acrIsDebugModeEnabled_HAL(_pAcr)  \
        acrIsDebugModeEnabled_GM200()
#define acrProgramDmaBase_HAL(_pAcr, _bIsImem, _pDmaProp)  \
        acrProgramDmaBase_GM200(_bIsImem, _pDmaProp)
#define acrCopyUcodesToWpr_HAL(_pAcr)  \
        acrCopyUcodesToWpr_T210()
#define acrFetchRegion_HAL(_pAcr)  \
        acrFetchRegion_STUB()
#define acrCheckIfBuildIsSupported_HAL(_pAcr)  \
        acrCheckIfBuildIsSupported_T186()
#define acrMitigateNsRestartFromHs_HAL(_pAcr)  \
        acrMitigateNsRestartFromHs_T210()
#define acrWriteAcrVersionToBsiSelwreScratch_HAL(_pAcr, _arg1)  \
        acrWriteAcrVersionToBsiSelwreScratch_STUB(_arg1)
#define acrProgramHubEncryption_HAL(_pAcr)  \
        acrProgramHubEncryption_STUB()
#define acrDisableLockdown_HAL(_pAcr)  \
        acrDisableLockdown_STUB()
#define acrLockFalconReset_HAL(_pAcr, _bLock)  \
        acrLockFalconReset_STUB(_bLock)
#define acrLockFalconRegSpace_HAL(_pAcr, _pFlcnCfg, _setTrap)  \
        acrLockFalconRegSpace_STUB(_pFlcnCfg, _setTrap)
#define acrLockFalconRegSpaceViaDecodeTrapCommon_HAL(_pAcr)  \
        acrLockFalconRegSpaceViaDecodeTrapCommon_STUB()
#define acrCopyLsGrpSigToRegsForSec2_HAL(_pAcr, _pArg1, _arg2)  \
        acrCopyLsGrpSigToRegsForSec2_STUB(_pArg1, _arg2)

//
// hal function prototype defines for direct hal calls.
//

ACR_STATUS          acrInit_T210(void)   // T18X
                        GCC_ATTRIB_SECTION("imem_acr", "acrInit_T210");
void                acrInitScpRng_T210(void)   // T18X
                        GCC_ATTRIB_SECTION("imem_acr", "acrInitScpRng_T210");
ACR_STATUS          acrGetRandNum_T210(LwU32 *pRandInOut)   // T18X
                        GCC_ATTRIB_SECTION("imem_acr", "acrGetRandNum_T210");
ACR_STATUS          acrFindWprRegions_T210(LwU32 *pWprIndex)   // T18X
                        GCC_ATTRIB_SECTION("imem_acr", "acrFindWprRegions_T210");
ACR_STATUS          acrFindCtxDma_GM200(LwU32 *pCtxDma)   // T18X
                        GCC_ATTRIB_SECTION("imem_acr", "acrFindCtxDma_GM200");
ACR_STATUS          acrPollForResetCompletion_GM200(LwU32 validIndexMap)   // T18X
                        GCC_ATTRIB_SECTION("imem_acr", "acrPollForResetCompletion_GM200");
ACR_STATUS          acrResetEngineFalcon_GM200(LwU32 validIndexMap)   // T18X
                        GCC_ATTRIB_SECTION("imem_acr", "acrResetEngineFalcon_GM200");
ACR_STATUS          acrSetupLSFalcon_GM200(PLSF_LSB_HEADER pLsbHeaders, LwU32 validIndexMap)   // T18X
                        GCC_ATTRIB_SECTION("imem_acr", "acrSetupLSFalcon_GM200");
ACR_STATUS          acrPopulateDMAParameters_GM200(LwU32 wprRegIndex)   // T18X
                        GCC_ATTRIB_SECTION("imem_acr", "acrPopulateDMAParameters_GM200");
ACR_STATUS          acrReadWprHeader_GM200(void)   // T18X
                        GCC_ATTRIB_SECTION("imem_acr", "acrReadWprHeader_GM200");
ACR_STATUS          acrWriteWprHeader_GM200(void)   // T18X
                        GCC_ATTRIB_SECTION("imem_acr", "acrWriteWprHeader_GM200");
ACR_STATUS          acrReadLsbHeader_GM200(PLSF_WPR_HEADER pWprHeader, PLSF_LSB_HEADER pLsbHeader)   // T18X
                        GCC_ATTRIB_SECTION("imem_acr", "acrReadLsbHeader_GM200");
ACR_STATUS          acrScrubUnusedWprWithZeroes_GM200(LwU32 nextKnownOffset, LwU32 size)   // T18X
                        GCC_ATTRIB_SECTION("imem_acr", "acrScrubUnusedWprWithZeroes_GM200");
ACR_STATUS          acrSanityCheckBlData_GM200(LwU32 falconId, LwU32 blDataOffset, LwU32 blDataSize)   // T18X
                        GCC_ATTRIB_SECTION("imem_acr", "acrSanityCheckBlData_GM200");
ACR_STATUS          acrBootstrapFalcons_GM200(void)   // T18X
                        GCC_ATTRIB_SECTION("imem_acr", "acrBootstrapFalcons_GM200");
LwU32               acrIssueDma_GM200(LwU32 memOff, LwBool bIsImem, LwU32 fbOff, LwU32 sizeInBytes, ACR_DMA_DIRECTION dmaDirection, ACR_DMA_SYNC_TYPE dmaSync, PACR_DMA_PROP pDmaProp)   // T18X
                        GCC_ATTRIB_SECTION("imem_acr", "acrIssueDma_GM200");
static ACR_STATUS   acrCheckFuseRevocation_STUB(void)   // T18X
                        GCC_ATTRIB_SECTION("imem_acr", "acrCheckFuseRevocation_STUB");
static void         acrGetFuseVersionHW_STUB(LwU32 *fuseVersion)   // T18X
                        GCC_ATTRIB_SECTION("imem_acr", "acrGetFuseVersionHW_STUB");
static void         acrGetFuseVersionSW_STUB(LwU32 *fuseVersion)   // T18X
                        GCC_ATTRIB_SECTION("imem_acr", "acrGetFuseVersionSW_STUB");
void                acrCallwlateDmhash_GM200(LwU8 *pHash, LwU8 *pData, LwU32 size)   // T18X
                        GCC_ATTRIB_SECTION("imem_acr", "acrCallwlateDmhash_GM200");
ACR_STATUS          acrVerifySignature_GM200(LwU8 *pSignature, LwU32 falconId, LwU32 binarysize, LwU32 binOffset, PLSF_LSB_HEADER pLsfHeader, LwBool bIsUcode)   // T18X
                        GCC_ATTRIB_SECTION("imem_acr", "acrVerifySignature_GM200");
LwBool              acrIsDebugModeEnabled_GM200(void)   // T18X
                        GCC_ATTRIB_SECTION("imem_acr", "acrIsDebugModeEnabled_GM200");
void                acrProgramDmaBase_GM200(LwBool bIsImem, PACR_DMA_PROP pDmaProp)   // T18X
                        GCC_ATTRIB_SECTION("imem_acr", "acrProgramDmaBase_GM200");
ACR_STATUS          acrCopyUcodesToWpr_T210(void)   // T18X
                        GCC_ATTRIB_SECTION("imem_acr", "acrCopyUcodesToWpr_T210");
static void         acrFetchRegion_STUB(void)   // T18X
                        GCC_ATTRIB_SECTION("imem_acr", "acrFetchRegion_STUB");
ACR_STATUS          acrCheckIfBuildIsSupported_T186(void)   // T18X
                        GCC_ATTRIB_SECTION("imem_acr", "acrCheckIfBuildIsSupported_T186");
void                acrMitigateNsRestartFromHs_T210(void)   // T18X
                        GCC_ATTRIB_SECTION("imem_acr", "acrMitigateNsRestartFromHs_T210");
static ACR_STATUS   acrWriteAcrVersionToBsiSelwreScratch_STUB(LwU32 arg1)   // T18X
                        GCC_ATTRIB_SECTION("imem_acr", "acrWriteAcrVersionToBsiSelwreScratch_STUB");
static ACR_STATUS   acrProgramHubEncryption_STUB(void)   // T18X
                        GCC_ATTRIB_SECTION("imem_acr", "acrProgramHubEncryption_STUB");
static void         acrDisableLockdown_STUB(void)   // T18X
                        GCC_ATTRIB_SECTION("imem_acr", "acrDisableLockdown_STUB");
static ACR_STATUS   acrLockFalconReset_STUB(LwBool bLock)   // T18X
                        GCC_ATTRIB_SECTION("imem_acr", "acrLockFalconReset_STUB");
static ACR_STATUS   acrLockFalconRegSpace_STUB(PACR_FLCN_CONFIG pFlcnCfg, LwBool setTrap)   // T18X
                        GCC_ATTRIB_SECTION("imem_acr", "acrLockFalconRegSpace_STUB");
static ACR_STATUS   acrLockFalconRegSpaceViaDecodeTrapCommon_STUB(void)   // T18X
                        GCC_ATTRIB_SECTION("imem_acr", "acrLockFalconRegSpaceViaDecodeTrapCommon_STUB");
static ACR_STATUS   acrCopyLsGrpSigToRegsForSec2_STUB(LwU32 *pArg1, LwU32 arg2)   // T18X
                        GCC_ATTRIB_SECTION("imem_acr", "acrCopyLsGrpSigToRegsForSec2_STUB");

// Are there any optimized hal interfaces?
#define ACR_DIRECT_HAL_CALLS               1

// Are there any non-optimized hal interfaces?
#define ACR_INDIRECT_HAL_CALLS             0


//
// Inline stub function definitions.
//

// ACR:hal:CHECK_FUSE_REVOCATION  -  T18X
static LW_INLINE ACR_STATUS acrCheckFuseRevocation_STUB(void)
{
    return ACR_ERROR_BIN_NOT_SUPPORTED;
}

// ACR:hal:GET_FUSE_VERSION_HW  -  T18X
static LW_INLINE void acrGetFuseVersionHW_STUB(
    LwU32        *fuseVersion
)
{
}

// ACR:hal:GET_FUSE_VERSION_SW  -  T18X
static LW_INLINE void acrGetFuseVersionSW_STUB(
    LwU32        *fuseVersion
)
{
}

// ACR:hal:FETCH_REGION  -  T18X
static LW_INLINE void acrFetchRegion_STUB(void)
{
}

// ACR:hal:WRITE_ACR_VERSION_TO_BSI_SELWRE_SCRATCH  -  T18X
static LW_INLINE ACR_STATUS acrWriteAcrVersionToBsiSelwreScratch_STUB(
    LwU32         arg1
)
{
    return ACR_OK;
}

// ACR:hal:PROGRAM_HUB_ENCRYPTION  -  T18X
static LW_INLINE ACR_STATUS acrProgramHubEncryption_STUB(void)
{
    return ACR_ERROR_HUB_ENCRYPTION_NOT_SUPPORTED;
}

// ACR:hal:DISABLE_LOCKDOWN  -  T18X
static LW_INLINE void acrDisableLockdown_STUB(void)
{
}

// ACR:hal:LOCK_FALCON_RESET  -  T18X
static LW_INLINE ACR_STATUS acrLockFalconReset_STUB(
    LwBool        bLock
)
{
    return ACR_OK;
}

// ACR:hal:LOCK_FALCON_REG_SPACE  -  T18X
static LW_INLINE ACR_STATUS acrLockFalconRegSpace_STUB(
    PACR_FLCN_CONFIG  pFlcnCfg,
    LwBool        setTrap
)
{
    return ACR_OK;
}

// ACR:hal:LOCK_FALCON_REG_SPACE_VIA_DECODE_TRAP_COMMON  -  T18X
static LW_INLINE ACR_STATUS acrLockFalconRegSpaceViaDecodeTrapCommon_STUB(void)
{
    return ACR_OK;
}

// ACR:hal:COPY_LS_GRP_SIG_TO_REGS_FOR_SEC2  -  T18X
static LW_INLINE ACR_STATUS acrCopyLsGrpSigToRegsForSec2_STUB(
    LwU32        *pArg1,
    LwU32         arg2
)
{
    return ACR_OK;
}



//
// ACR PDB properties
//



#endif  // G_ACRHAL_H
