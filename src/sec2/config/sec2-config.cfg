####################################################################
#
# Config file for sec2-config.
#

no warnings qw(bareword);
no strict qw(subs);

#
# Profile definitions.
# Each profile is made up of one or more categories which are exelwted
# in the order the category *definition* appears below.
#

#
# Define profiles for each supported chip-family.  Each profile specifies the
# features that are supported in that family which in turn dictacts the source
# files which must be built and included in the image.
#
DEFINE_PROFILE "sec2-gp10x"                 , qw(default sec2-gp10x  wrap);
DEFINE_PROFILE "sec2-gp10x_prmods"          , qw(default sec2-gp10x_prmods  wrap);
DEFINE_PROFILE "sec2-gp10x_nouveau"         , qw(default sec2-gp10x_nouveau  wrap);
DEFINE_PROFILE "sec2-gv10x"                 , qw(default sec2-gv10x  wrap);
DEFINE_PROFILE "sec2-tu10x"                 , qw(default sec2-tu10x  wrap);
DEFINE_PROFILE "sec2-tu10x_dualcore"        , qw(default sec2-tu10x  dualcore wrap);         # share the same setting with sec2-tu10x
DEFINE_PROFILE "sec2-tu10x_prmods"          , qw(default sec2-tu10x_prmods  wrap);
DEFINE_PROFILE "sec2-tu116"                 , qw(default sec2-tu116  wrap);
DEFINE_PROFILE "sec2-tu116_dualcore"        , qw(default sec2-tu116  dualcore wrap);         # share the same setting with sec2-tu116
DEFINE_PROFILE "sec2-tu116_prmods"          , qw(default sec2-tu116_prmods  wrap);
DEFINE_PROFILE "sec2-tu10a"                 , qw(default sec2-tu10a  wrap);
DEFINE_PROFILE "sec2-ga100"                 , qw(default sec2-ga100  wrap);
DEFINE_PROFILE "sec2-ga100_nouveau"         , qw(default sec2-ga100_nouveau  wrap);
DEFINE_PROFILE "sec2-ga100_riscv_ls"        , qw(default sec2-ga100_riscv_ls  wrap);
DEFINE_PROFILE "sec2-ga100_apm"             , qw(default sec2-ga100_apm  wrap);
DEFINE_PROFILE "sec2-ga10x"                 , qw(default sec2-ga10x  wrap);
DEFINE_PROFILE "sec2-ga10x_new_wpr_blob"    , qw(default sec2-ga10x_new_wpr_blob wrap);
DEFINE_PROFILE "sec2-ga10x_boot_from_hs"    , qw(default sec2-ga10x_boot_from_hs  wrap);
DEFINE_PROFILE "sec2-ga10x_nouveau_boot_from_hs"   , qw(default sec2-ga10x_nouveau_boot_from_hs  wrap);
DEFINE_PROFILE "sec2-ga10x_apm_boot_from_hs", qw(default sec2-ga10x_apm_boot_from_hs  wrap);
DEFINE_PROFILE "sec2-ga10x_prmods"          , qw(default sec2-ga10x_prmods);
DEFINE_PROFILE "sec2-ad10x"                 , qw(default sec2-ad10x  wrap);
DEFINE_PROFILE "sec2-ad10x_boot_from_hs"    , qw(default sec2-ad10x_boot_from_hs  wrap);
DEFINE_PROFILE "sec2-ga10x_pr44_alt_img_boot_from_hs" , qw(default sec2-ga10x_pr44_alt_img_boot_from_hs);
DEFINE_PROFILE "sec2-ga10x_prmods_boot_from_hs" , qw(default sec2-ga10x_prmods_boot_from_hs);
DEFINE_PROFILE "sec2-gh100"                 , qw(default sec2-gh100  wrap);
DEFINE_PROFILE "sec2-gh20x"                 , qw(default sec2-gh20x  wrap);
DEFINE_PROFILE "sec2-g00x"                  , qw(default sec2-g00x  wrap);

# Default profile if not specified on command line with --profile.
DEFAULT_PROFILE "sec2-gp10x";

# XXX - not used
CATEGORY "minimal";
{
    # omit features, classes, engines, apis that require unavailable gpu's
    MINIMAL_MODE      ON;
}

CATEGORY "default";
{
    # All default enabled features, engines, classes, apis
    ENABLE_FEATURES   ALL_DEFAULT_ENABLED;
    ENABLE_ENGINES    ALL_DEFAULT_ENABLED;
    ENABLE_CLASSES    ALL_DEFAULT_ENABLED;
    ENABLE_APIS       ALL_DEFAULT_ENABLED;

    # set platform, arch.   for now just always use these.
    ENABLE_FEATURES   PLATFORM_SEC2;
    ENABLE_FEATURES   ARCH_FALCON;

    # Disable all GPUS preparatory to having a specific set enabled
    DISABLE_CHIPS       ( ALL );
}

CATEGORY "dualcore";
{
    ENABLE_FEATURES   DUAL_CORE;
}


#
# WARNING : Make sure to update GP10X_PRMODS profile if you are updating GP10X profile
#
CATEGORY "sec2-gp10x";
{
    # If elwvar SEC2CFG_GPUS is set, then use that, else default
    if ($ELW{SEC2CFG_GPUS}) {
        ENABLE_CHIPS    $ELW{SEC2CFG_GPUS};
    } else {
        ENABLE_CHIPS    (GP102);
    }
    ENABLE_FEATURES(
        SEC2TASK_GFE,
        SEC2JOB_TIMER,
        SEC2TASK_PR,
        SEC2TASK_VPR,
        SEC2TASK_WKRTHD,
        SEC2JOB_FAKEIDLE_TEST,
        SEC2JOB_HS_SWITCH,
        BUG_200272812_HALT_INTR_MASK_WAR,
    );
    DISABLE_FEATURES(
    );
    ENABLE_ENGINES(
        GFE,
        PR,
        VPR,
    );
}

CATEGORY "sec2-gp10x_prmods";
{
    # If elwvar SEC2CFG_GPUS is set, then use that, else default
    if ($ELW{SEC2CFG_GPUS}) {
        ENABLE_CHIPS    $ELW{SEC2CFG_GPUS};
    } else {
        ENABLE_CHIPS    (GP102);
    }
    ENABLE_FEATURES(
        SEC2TASK_GFE,
        SEC2JOB_TIMER,
        SEC2TASK_PR,
        BUG_200272812_HALT_INTR_MASK_WAR,
        SEC2TASK_VPR,
    );
    DISABLE_FEATURES(
    );
    ENABLE_ENGINES(
        GFE,
        PR,
        VPR,
    );
}

CATEGORY "sec2-gp10x_nouveau";
{
    # If elwvar SEC2CFG_GPUS is set, then use that, else default
    if ($ELW{SEC2CFG_GPUS}) {
        ENABLE_CHIPS    $ELW{SEC2CFG_GPUS};
    } else {
        ENABLE_CHIPS    (GP102);
    }
    ENABLE_FEATURES(
        SEC2TASK_ACR,
    );
    DISABLE_FEATURES(
        SEC2_INIT_HS,
    );
    ENABLE_ENGINES(
        ACR,
    );
}

CATEGORY "sec2-gv10x";
{
    # If elwvar SEC2CFG_GPUS is set, then use that, else default
    if ($ELW{SEC2CFG_GPUS}) {
        ENABLE_CHIPS    $ELW{SEC2CFG_GPUS};
    } else {
        ENABLE_CHIPS    (GV100);
    }
    ENABLE_FEATURES(
        SEC2TASK_GFE,
        SEC2JOB_TIMER,
        SEC2TASK_PR,
        BUG_200272812_HALT_INTR_MASK_WAR,
        SEC2TASK_VPR,
    );
    DISABLE_FEATURES(
    );
    ENABLE_ENGINES(
        GFE,
        VPR,
        PR,
    );
}

CATEGORY "sec2-tu10x";
{
    # If elwvar SEC2CFG_GPUS is set, then use that, else default
    if ($ELW{SEC2CFG_GPUS}) {
        ENABLE_CHIPS    $ELW{SEC2CFG_GPUS};
    } else {
        ENABLE_CHIPS    (TU102);
    }
    ENABLE_FEATURES(
        SEC2RTTIMER_FOR_OS_TICKS,
        SEC2TASK_GFE,
        SEC2JOB_TIMER,
        BUG_200272812_HALT_INTR_MASK_WAR,
        SEC2TASK_HWV, # bug 2042951 to disable this task before TU10X profile is shipped
        SEC2TASK_PR,
        SEC2TASK_VPR,
        SEC2TASK_ACR,
    );
    DISABLE_FEATURES(
    );
    ENABLE_ENGINES(
        GFE,
        HWV, # bug 2042951 to disable this engine before TU10X profile is shipped
        PR,
        VPR,
        ACR,
    );
}

CATEGORY "sec2-tu10x_prmods";
{
    # If elwvar SEC2CFG_GPUS is set, then use that, else default
    if ($ELW{SEC2CFG_GPUS}) {
        ENABLE_CHIPS    $ELW{SEC2CFG_GPUS};
    } else {
        ENABLE_CHIPS    (TU102);
    }
    ENABLE_FEATURES(
        SEC2RTTIMER_FOR_OS_TICKS,
        SEC2TASK_GFE,
        SEC2JOB_TIMER,
        BUG_200272812_HALT_INTR_MASK_WAR,
        SEC2TASK_HWV, # bug 2042951 to disable this task before TU10X profile is shipped
        SEC2TASK_PR,
        SEC2TASK_VPR,
        SEC2TASK_ACR,
    );
    DISABLE_FEATURES(
    );
    ENABLE_ENGINES(
        GFE,
        HWV, # bug 2042951 to disable this engine before TU10X profile is shipped
        PR,
        VPR,
        ACR,
    );
}

CATEGORY "sec2-tu116";
{
    # If elwvar SEC2CFG_GPUS is set, then use that, else default
    if ($ELW{SEC2CFG_GPUS}) {
        ENABLE_CHIPS    $ELW{SEC2CFG_GPUS};
    } else {
        ENABLE_CHIPS    (TU116);
    }
    ENABLE_FEATURES(
        SEC2RTTIMER_FOR_OS_TICKS,
        SEC2TASK_GFE,
        SEC2JOB_TIMER,
        BUG_200272812_HALT_INTR_MASK_WAR,
        SEC2TASK_PR,
        SEC2TASK_VPR,
        SEC2TASK_ACR,
    );
    DISABLE_FEATURES(
    );
    ENABLE_ENGINES(
        GFE,
        PR,
        VPR,
        ACR,
    );
}

CATEGORY "sec2-tu116_prmods";
{
    # If elwvar SEC2CFG_GPUS is set, then use that, else default
    if ($ELW{SEC2CFG_GPUS}) {
        ENABLE_CHIPS    $ELW{SEC2CFG_GPUS};
    } else {
        ENABLE_CHIPS    (TU116);
    }
    ENABLE_FEATURES(
        SEC2RTTIMER_FOR_OS_TICKS,
        SEC2TASK_GFE,
        SEC2JOB_TIMER,
        BUG_200272812_HALT_INTR_MASK_WAR,
        SEC2TASK_HWV, # bug 2042951 to disable this task before TU11X profile is shipped
        SEC2TASK_PR,
        SEC2TASK_VPR,
        SEC2TASK_ACR,
    );
    DISABLE_FEATURES(
    );
    ENABLE_ENGINES(
        GFE,
        HWV, # bug 2042951 to disable this engine before TU11X profile is shipped
        PR,
        VPR,
        ACR,
    );
}

CATEGORY "sec2-tu10a";
{
    # If elwvar SEC2CFG_GPUS is set, then use that, else default
    if ($ELW{SEC2CFG_GPUS}) {
        ENABLE_CHIPS    $ELW{SEC2CFG_GPUS};
    } else {
        ENABLE_CHIPS    (TU104);
    }
    ENABLE_FEATURES(
        BUG_200272812_HALT_INTR_MASK_WAR,
        SEC2TASK_ACR,
        SEC2_AUTO_PROFILE,
    );
    DISABLE_FEATURES(
        SEC2_INIT_HS,
        SEC2JOB_HS_SWITCH,
        SEC2TASK_WKRTHD,
        SEC2TASK_CHNMGMT,
        SEC2JOB_FAKEIDLE_TEST,
        SEC2JOB_RTTIMER_TEST,
        SEC2_USE_MUTEX,
    );
    ENABLE_ENGINES(
        ACR,
    );
    DISABLE_ENGINES(
        VPR,
    );
}

CATEGORY "sec2-ga100";
{
    # If elwvar SEC2CFG_GPUS is set, then use that, else default
    if ($ELW{SEC2CFG_GPUS}) {
        ENABLE_CHIPS    $ELW{SEC2CFG_GPUS};
    } else {
        ENABLE_CHIPS    (GA100);
    }
    ENABLE_FEATURES(
        SEC2RTTIMER_FOR_OS_TICKS,
        SEC2TASK_ACR,
        SEC2_INIT_HS,
        SEC2_NOTIFICATION_INTR_GFID_PROGRAMMING,
    );
    DISABLE_FEATURES(
    );
    ENABLE_ENGINES(
        ACR,
    );
}

CATEGORY "sec2-ga100_apm";
{
    # If elwvar SEC2CFG_GPUS is set, then use that, else default
    if ($ELW{SEC2CFG_GPUS}) {
        ENABLE_CHIPS    $ELW{SEC2CFG_GPUS};
    } else {
        ENABLE_CHIPS    (GA100);
    }
    ENABLE_FEATURES(
        SEC2RTTIMER_FOR_OS_TICKS,
        SEC2TASK_ACR,
        SEC2_INIT_HS,
        SEC2_NOTIFICATION_INTR_GFID_PROGRAMMING,
        SEC2TASK_APM,

        #
        # NOTE: Be careful when enabling SPDM task, as includes open-source
        # libspdm code. Releases must meet SWIPAT requirements when included.
        # See LwBug 3314381 for more info.
        #
        SEC2TASK_SPDM,
        SEC2TASK_VPR,
    );
    DISABLE_FEATURES(
    );
    ENABLE_ENGINES(
        ACR,
        APM,
        SPDM,
        VPR,
    );
}

CATEGORY "sec2-ga100_nouveau";
{
    # If elwvar SEC2CFG_GPUS is set, then use that, else default
    if ($ELW{SEC2CFG_GPUS}) {
        ENABLE_CHIPS    $ELW{SEC2CFG_GPUS};
    } else {
        ENABLE_CHIPS    (GA100);
    }
    ENABLE_FEATURES(
        SEC2TASK_ACR,
    );
    DISABLE_FEATURES(
       SEC2TASK_WKRTHD,
       SEC2JOB_HS_SWITCH,
       SEC2JOB_FAKEIDLE_TEST,
       SEC2JOB_RTTIMER_TEST,
       SEC2JOB_MSCG_TEST,
    );
    ENABLE_ENGINES(
        ACR,
    );
}

CATEGORY "sec2-ga100_riscv_ls";
{
    # If elwvar SEC2CFG_GPUS is set, then use that, else default
    if ($ELW{SEC2CFG_GPUS}) {
        ENABLE_CHIPS    $ELW{SEC2CFG_GPUS};
    } else {
        ENABLE_CHIPS    (GA100);
    }
    ENABLE_FEATURES(
        SEC2RTTIMER_FOR_OS_TICKS,
        SEC2TASK_ACR,
        SEC2_INIT_HS,
        SEC2TASK_HWV,
        SEC2_NOTIFICATION_INTR_GFID_PROGRAMMING,
    );
    DISABLE_FEATURES(
    );
    ENABLE_ENGINES(
        LSR,
        HWV, # bug 2274657 to disable this engine before GA100 profile is shipped
        ACR,
    );
}

CATEGORY "sec2-ga10x";
{
    # If elwvar SEC2CFG_GPUS is set, then use that, else default
    if ($ELW{SEC2CFG_GPUS}) {
        ENABLE_CHIPS    $ELW{SEC2CFG_GPUS};
    } else {
        ENABLE_CHIPS    (GA102);
    }
    ENABLE_FEATURES(
        SEC2RTTIMER_FOR_OS_TICKS,
        SEC2JOB_TIMER,
        SEC2TASK_HWV, # bug 200528302 to disable this task before GA10X profile is shipped
        SEC2TASK_ACR,
        SEC2_NOTIFICATION_INTR_GFID_PROGRAMMING,
        SEC2_GPC_RG_SUPPORT,
        SEC2_INIT_HS,
        SEC2_POSTED_WRITE_SUPPORT,
        SEC2TASK_VPR,
    );
    DISABLE_FEATURES(
    );
    ENABLE_ENGINES(
        HWV, # bug 200528311 to disable this engine before GA10X profile is shipped
        ACR,
        LSR,
        VPR,
    );
}

CATEGORY "sec2-ga10x_new_wpr_blob";
{
    # If elwvar SEC2CFG_GPUS is set, then use that, else default
    if ($ELW{SEC2CFG_GPUS}) {
        ENABLE_CHIPS    $ELW{SEC2CFG_GPUS};
    } else {
        ENABLE_CHIPS    (GA102);
    }
    ENABLE_FEATURES(
        SEC2RTTIMER_FOR_OS_TICKS,
        SEC2JOB_TIMER,
        SEC2TASK_ACR,
        SEC2_NOTIFICATION_INTR_GFID_PROGRAMMING,
        SEC2_GPC_RG_SUPPORT,
        SEC2_INIT_HS,
        SEC2_POSTED_WRITE_SUPPORT,
    );
    DISABLE_FEATURES(
    );
    ENABLE_ENGINES(
        ACR,
        LSR,
    );
}

CATEGORY "sec2-ga10x_boot_from_hs";
{
    # If elwvar SEC2CFG_GPUS is set, then use that, else default
    if ($ELW{SEC2CFG_GPUS}) {
        ENABLE_CHIPS    $ELW{SEC2CFG_GPUS};
    } else {
        ENABLE_CHIPS    (GA102);
    }
    ENABLE_FEATURES(
        SEC2RTTIMER_FOR_OS_TICKS,
        SEC2JOB_TIMER,
        SEC2TASK_ACR,
        SEC2_NOTIFICATION_INTR_GFID_PROGRAMMING,
        SEC2_GPC_RG_SUPPORT,
        SEC2_INIT_HS,
        SEC2_POSTED_WRITE_SUPPORT,
        SEC2TASK_VPR,
        SEC2TASK_PR,
        SEC2TASK_GFE,
        SEC2_USE_PR44,
    );
    DISABLE_FEATURES(
    );
    ENABLE_ENGINES(
        ACR,
        LSR,
        VPR,
        PR,
        GFE,
    );
}

CATEGORY "sec2-ga10x_pr44_alt_img_boot_from_hs";
{
    # If elwvar SEC2CFG_GPUS is set, then use that, else default
    if ($ELW{SEC2CFG_GPUS}) {
        ENABLE_CHIPS    $ELW{SEC2CFG_GPUS};
    } else {
        ENABLE_CHIPS    (GA102);
    }
    ENABLE_FEATURES(
        SEC2RTTIMER_FOR_OS_TICKS,
        SEC2JOB_TIMER,
        SEC2TASK_ACR,
        SEC2_NOTIFICATION_INTR_GFID_PROGRAMMING,
        SEC2_GPC_RG_SUPPORT,
        SEC2_INIT_HS,
        SEC2_POSTED_WRITE_SUPPORT,
        SEC2TASK_VPR,
        SEC2TASK_PR,
        SEC2TASK_GFE,
        SEC2_USE_PR44,
    );
    DISABLE_FEATURES(
    );
    ENABLE_ENGINES(
        ACR,
        LSR,
        VPR,
        PR,
        GFE,
    );
}

CATEGORY "sec2-ga10x_prmods_boot_from_hs";
{
    # If elwvar SEC2CFG_GPUS is set, then use that, else default
    if ($ELW{SEC2CFG_GPUS}) {
        ENABLE_CHIPS    $ELW{SEC2CFG_GPUS};
    } else {
        ENABLE_CHIPS    (GA102);
    }
    ENABLE_FEATURES(
        SEC2RTTIMER_FOR_OS_TICKS,
        SEC2JOB_TIMER,
        SEC2TASK_ACR,
        SEC2_NOTIFICATION_INTR_GFID_PROGRAMMING,
        SEC2_GPC_RG_SUPPORT,
        SEC2_INIT_HS,
        SEC2_POSTED_WRITE_SUPPORT,
        SEC2TASK_VPR,
        SEC2TASK_PR,
        SEC2TASK_GFE,
        SEC2_USE_PR44,
    );
    DISABLE_FEATURES(
    );
    ENABLE_ENGINES(
        ACR,
        LSR,
        VPR,
        PR,
        GFE,
    );
}

CATEGORY "sec2-ga10x_apm_boot_from_hs";
{
    # If elwvar SEC2CFG_GPUS is set, then use that, else default
    if ($ELW{SEC2CFG_GPUS}) {
        ENABLE_CHIPS    $ELW{SEC2CFG_GPUS};
    } else {
        ENABLE_CHIPS    (GA102);
    }
    ENABLE_FEATURES(
        SEC2RTTIMER_FOR_OS_TICKS,
        SEC2JOB_TIMER,
        SEC2TASK_ACR,
        SEC2_NOTIFICATION_INTR_GFID_PROGRAMMING,
        SEC2_GPC_RG_SUPPORT,
        SEC2_INIT_HS,
        SEC2_POSTED_WRITE_SUPPORT,
        SEC2TASK_APM,
    );
    DISABLE_FEATURES(
    );
    ENABLE_ENGINES(
        ACR,
        LSR,
        APM,
    );
}

CATEGORY "sec2-ga10x_nouveau_boot_from_hs";
{
    # If elwvar SEC2CFG_GPUS is set, then use that, else default
    if ($ELW{SEC2CFG_GPUS}) {
        ENABLE_CHIPS    $ELW{SEC2CFG_GPUS};
    } else {
        ENABLE_CHIPS    (GA102);
    }
    ENABLE_FEATURES(
        SEC2TASK_ACR,
        SEC2_POSTED_WRITE_SUPPORT,
    );
    DISABLE_FEATURES(
        SEC2TASK_WKRTHD,
        SEC2JOB_HS_SWITCH,
        SEC2JOB_FAKEIDLE_TEST,
        SEC2JOB_RTTIMER_TEST,
        SEC2JOB_MSCG_TEST,
        SEC2TASK_CHNMGMT,
    );
    ENABLE_ENGINES(
        ACR,
    );
}

CATEGORY "sec2-ga10x_prmods";
{
    # If elwvar SEC2CFG_GPUS is set, then use that, else default
    if ($ELW{SEC2CFG_GPUS}) {
        ENABLE_CHIPS    $ELW{SEC2CFG_GPUS};
    } else {
        ENABLE_CHIPS    (GA102);
    }
    ENABLE_FEATURES(
        SEC2RTTIMER_FOR_OS_TICKS,
        SEC2JOB_TIMER,
        #SEC2TASK_HWV, # bug 200528302 to disable this task before GA10X profile is shipped
        SEC2TASK_ACR,
        SEC2_NOTIFICATION_INTR_GFID_PROGRAMMING,
        SEC2_GPC_RG_SUPPORT,
        SEC2_INIT_HS,
        SEC2_POSTED_WRITE_SUPPORT,
        SEC2TASK_VPR,
        BUG_200272812_HALT_INTR_MASK_WAR,
        SEC2_USE_PR44,
    );
    DISABLE_FEATURES(
    );
    ENABLE_ENGINES(
        #HWV, # bug 200528311 to disable this engine before GA10X profile is shipped
        ACR,
        LSR,
        VPR,
        PR,
    );
}

CATEGORY "sec2-ad10x";
{
    # If elwvar SEC2CFG_GPUS is set, then use that, else default
    if ($ELW{SEC2CFG_GPUS}) {
        ENABLE_CHIPS    $ELW{SEC2CFG_GPUS};
    } else {
        ENABLE_CHIPS    (AD102);
    }
    ENABLE_FEATURES(
        SEC2RTTIMER_FOR_OS_TICKS,
        SEC2JOB_TIMER,
        SEC2TASK_ACR,
        SEC2_NOTIFICATION_INTR_GFID_PROGRAMMING,
        SEC2_GPC_RG_SUPPORT,
        SEC2_INIT_HS,
        SEC2_POSTED_WRITE_SUPPORT,
        #TODO - Disable WKRTHD and FAKEIDLE test before QS, Bug 200779459 
        SEC2TASK_WKRTHD,
        SEC2JOB_FAKEIDLE_TEST,
      # TODO: Not enabling features temporarily to test fmodel
      # SEC2TASK_VPR,
      # SEC2TASK_PR,
      # SEC2TASK_GFE,
    );
    DISABLE_FEATURES(
    );
    ENABLE_ENGINES(
        ACR,
        LSR,
      # TODO: Not enabling Engines temporarily to test fmodel
      # VPR,
      # PR,
      # GFE,
    );
}

CATEGORY "sec2-ad10x_boot_from_hs";
{
    # If elwvar SEC2CFG_GPUS is set, then use that, else default
    if ($ELW{SEC2CFG_GPUS}) {
        ENABLE_CHIPS    $ELW{SEC2CFG_GPUS};
    } else {
        ENABLE_CHIPS    (AD102);
    }
    ENABLE_FEATURES(
        SEC2RTTIMER_FOR_OS_TICKS,
        SEC2JOB_TIMER,
        SEC2TASK_ACR,
        SEC2_NOTIFICATION_INTR_GFID_PROGRAMMING,
        SEC2_GPC_RG_SUPPORT,
        SEC2_INIT_HS,
        SEC2_POSTED_WRITE_SUPPORT,
        SEC2TASK_VPR,
        #TODO - Disable WKRTHD and FAKEIDLE test before QS, Bug 200779459 
        SEC2TASK_WKRTHD,
        SEC2JOB_FAKEIDLE_TEST,
        SEC2TASK_PR,
        SEC2TASK_GFE,
    );
    DISABLE_FEATURES(
    );
    ENABLE_ENGINES(
        ACR,
        LSR,
        VPR,
        PR,
        GFE,
    );
}

CATEGORY "sec2-gh100";
{
    # If elwvar SEC2CFG_GPUS is set, then use that, else default
    if ($ELW{SEC2CFG_GPUS}) {
        ENABLE_CHIPS    $ELW{SEC2CFG_GPUS};
    } else {
        ENABLE_CHIPS    (GH100);
    }
    ENABLE_FEATURES(
        SEC2RTTIMER_FOR_OS_TICKS,
        SEC2JOB_TIMER,
        SEC2TASK_HWV, # bug 2634715 to disable this task before GH100 profile is shipped
        SEC2TASK_ACR,
        SEC2_NOTIFICATION_INTR_GFID_PROGRAMMING,
    );
    DISABLE_FEATURES(
        SEC2_INIT_HS, # bug 2634716  to re-enable this overlay before GH100 profile is shipped
        SEC2JOB_MSCG_TEST,
    );
    ENABLE_ENGINES(
        LSR,
        HWV, # bug 2634717 to disable this engine before GH100 profile is shipped
        ACR,
    );
}

CATEGORY "sec2-gh20x";
{
    # If elwvar SEC2CFG_GPUS is set, then use that, else default
    if ($ELW{SEC2CFG_GPUS}) {
        ENABLE_CHIPS    $ELW{SEC2CFG_GPUS};
    } else {
        ENABLE_CHIPS    (GH202);
    }
    ENABLE_FEATURES(
        SEC2RTTIMER_FOR_OS_TICKS,
        SEC2TASK_GFE,
        SEC2JOB_TIMER,
        SEC2TASK_HWV, # bug 2634715 to disable this task before GH20X profile is shipped
        SEC2TASK_ACR,
        SEC2_NOTIFICATION_INTR_GFID_PROGRAMMING,
    );
    DISABLE_FEATURES(
        SEC2_INIT_HS, # bug 2634716  to re-enable this overlay before GH20X profile is shipped
        SEC2JOB_MSCG_TEST,
    );
    ENABLE_ENGINES(
        GFE,
        HWV, # bug 2634717 to disable this engine before GH20X profile is shipped
        ACR,
    );
}

CATEGORY "sec2-g00x";
{
    # If elwvar SEC2CFG_GPUS is set, then use that, else default
    if ($ELW{SEC2CFG_GPUS}) {
        ENABLE_CHIPS    $ELW{SEC2CFG_GPUS};
    } else {
        ENABLE_CHIPS    (G000);
    }
    ENABLE_FEATURES(
        SEC2RTTIMER_FOR_OS_TICKS,
        SEC2JOB_TIMER,
        SEC2TASK_HWV, # bug 2634715 to disable this task before GH20X profile is shipped
        SEC2TASK_ACR,
        SEC2_NOTIFICATION_INTR_GFID_PROGRAMMING,
    );
    DISABLE_FEATURES(
        SEC2_INIT_HS, # bug 2634716  to re-enable this overlay before GH20X profile is shipped
        SEC2JOB_MSCG_TEST,
    );
    ENABLE_ENGINES(
        LSR,
        HWV, # bug 2634717 to disable this engine before GH20X profile is shipped
        ACR,
    );
}

# Look in the environment and our -D args for any special cases.
CATEGORY "wrap";
{
    1;        # must not be empty block
}

1;
