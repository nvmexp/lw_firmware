# -*- mode: perl; -*-

# VPR Hal interface definitions
# For a brief introduction to file format, see README in this directory.

my $vprHal = [

    DEFAULTS => [
        GCC_ATTRIBUTES  => 'GCC_ATTRIB_SECTION("imem_vprHs", "__FUNC__")',
        FLAGS           => ":DIRECT_HAL_CALLS",
    ],

    # HAL Interfaces
    # **************************************************************************

    HAL_INTERFACES => [

        SCRUB_REGION => [
            DESCRIPTION    => "Scrubs specified memory region",
            RETURN_TYPE    => FLCN_STATUS,
            ARGUMENTS      => 'LwU64 startAddr, LwU64 endAddr',
            STUB_RETURNS   => FLCN_ERR_NOT_SUPPORTED,
            GCC_ATTRIBUTES => 'GCC_ATTRIB_SECTION("imem_vprHs", "__FUNC__")',
            _GP10X         => [ GP10X_and_later, ],
            _STUB          => [ pre_GP10X, ],
        ],

        CLEAR_DISPLAY_BLANKING_POLICIES => [
            DESCRIPTION    => "Clear display blanking policies",
            RETURN_TYPE    => FLCN_STATUS,
            ARGUMENTS      => 'void',
            STUB_RETURNS   => FLCN_OK,
            GCC_ATTRIBUTES => 'GCC_ATTRIB_SECTION("imem_vprHs", "__FUNC__")',

            _GP10X         => [ GP10X, ],
            _GV100         => [ GV100_and_later, -GA100, ],
            _STUB          => [ pre_GP10X, GA100, ],
        ],

        IS_ALLOWED_IN_H_W_FUSE => [
            DESCRIPTION    => "Check if VPR is allowed in HW fuse",
            RETURN_TYPE    => FLCN_STATUS,
            ARGUMENTS      => 'void',
            STUB_RETURNS   => FLCN_ERR_VPR_APP_NOT_SUPPORTED_BY_HW,
            GCC_ATTRIBUTES => 'GCC_ATTRIB_SECTION("imem_vprHs", "__FUNC__")',

            _GP10X         => [ GP10X_and_later, ],
            _STUB          => [ pre_GP10X, ],
        ],

        IS_ALLOWED_IN_S_W_FUSE => [
            DESCRIPTION    => "Check if VPR is allowed in SW fuse",
            RETURN_TYPE    => FLCN_STATUS,
            ARGUMENTS      => 'void',
            STUB_RETURNS   => FLCN_ERR_VPR_APP_NOT_SUPPORTED_BY_SW,
            GCC_ATTRIBUTES => 'GCC_ATTRIB_SECTION("imem_vprHs", "__FUNC__")',

            _GP10X         => [ GP10X_thru_dVOLTA, -GP107, -GP108, ],
            _GP107         => [ GP107, GP108, USED_BY_GP10X, ],
            _TU10X         => [ TURING_and_later, ],
            _STUB          => [ pre_GP10X, ],
        ],

        IS_DISPLAY_PRESENT => [
            DESCRIPTION    => "Check if display is present",
            RETURN_TYPE    => FLCN_STATUS,
            ARGUMENTS      => 'void',
            STUB_RETURNS   => FLCN_ERR_NOT_SUPPORTED,
            GCC_ATTRIBUTES => 'GCC_ATTRIB_SECTION("imem_vprHs", "__FUNC__")',

            _GP10X         => [ GP10X_and_later, ],
            _STUB          => [ pre_GP10X, ],
        ],

        CHECK_IF_BUILD_IS_SUPPORTED => [
            DESCRIPTION    => "Check if build is supported on chip",
            RETURN_TYPE    => FLCN_STATUS,
            ARGUMENTS      => void,
            STUB_RETURNS   => FLCN_ERR_HS_CHK_CHIP_NOT_SUPPORTED,
            GCC_ATTRIBUTES => 'GCC_ATTRIB_SECTION("imem_vprHs", "__FUNC__")',

            _GP10X         => [ GP10X, ],
            _GV100         => [ GV100, ],
            _TU10X         => [ TU10X, ],
            _GA10X         => [ GA10X, -GA100, ],
            _AD10X         => [ AD10X, ],
            _STUB          => [ pre_GP10X, GA100, HOPPER_and_later, ],
        ],

        IS_DISPLAY_IP_VERSION_SUPPORTED => [
            DESCRIPTION    => "Check if display ip version is supported",
            RETURN_TYPE    => FLCN_STATUS,
            ARGUMENTS      => 'void',
            STUB_RETURNS   => FLCN_ERR_VPR_APP_DISPLAY_VERSION_NOT_SUPPORTED,
            GCC_ATTRIBUTES => 'GCC_ATTRIB_SECTION("imem_vprHs", "__FUNC__")',

            LIKE_INTERFACE => CHECK_IF_BUILD_IS_SUPPORTED,
        ],

        CHECK_IF_CLASH_WITH_CBC_RANGE => [
            DESCRIPTION    => "Check if requested vpr region clashes with cbc range",
            RETURN_TYPE    => FLCN_STATUS,
            ARGUMENTS      => 'void',
            STUB_RETURNS   => FLCN_OK,
            GCC_ATTRIBUTES => 'GCC_ATTRIB_SECTION("imem_vprHs", "__FUNC__")',

            _GP10X         => [ GP10X_thru_dVOLTA, ],
            _STUB          => [ pre_GP10X, TU10X_and_later, ],
        ],

        CHECK_IF_RUNNING_ON_FALCON_CORE => [
            DESCRIPTION    => "Check if VPR app is running on falcon core only",
            RETURN_TYPE    => FLCN_STATUS,
            ARGUMENTS      => 'void',
            STUB_RETURNS   => FLCN_OK,
            GCC_ATTRIBUTES => 'GCC_ATTRIB_SECTION("imem_vprHs", "__FUNC__")',

            _TU10X         => [ TURING, ],
            _GA10X         => [ GA10X_and_later, -GA100, ],
            _STUB          => [ pre_TU10X, GA100, ],
        ],

        GET_MAX_END_ADDRESS => [
            DESCRIPTION    => "Get vpr max end address",
            RETURN_TYPE    => FLCN_STATUS,
            ARGUMENTS      => 'LwU64 *',
            STUB_RETURNS   => FLCN_ERR_NOT_SUPPORTED,
            GCC_ATTRIBUTES => 'GCC_ATTRIB_SECTION("imem_vprHs", "__FUNC__")',

            _GP10X         => [ GP10X_and_later, -GA100, ],
            _GA100         => [ GA100, ],
            _STUB          => [ pre_GP10X, ],
        ],

        GET_MIN_START_ADDRESS => [
            DESCRIPTION    => "Get vpr min start address",
            RETURN_TYPE    => FLCN_STATUS,
            ARGUMENTS      => 'LwU64 *',
            STUB_RETURNS   => FLCN_ERR_NOT_SUPPORTED,
            GCC_ATTRIBUTES => 'GCC_ATTRIB_SECTION("imem_vprHs", "__FUNC__")',

            _GP10X         => [ GP10X_and_later, -GA100, ],
            _GA100         => [ GA100, ],
            _STUB          => [ pre_GP10X, ],
        ],

        GET_MAX_SIZE => [
            DESCRIPTION    => "Get vpr max size",
            RETURN_TYPE    => FLCN_STATUS,
            ARGUMENTS      => 'LwU64 *',
            STUB_RETURNS   => FLCN_ERR_NOT_SUPPORTED,
            GCC_ATTRIBUTES => 'GCC_ATTRIB_SECTION("imem_vprHs", "__FUNC__")',

            _GP10X         => [ GP10X_and_later, ],
            _STUB          => [ pre_GP10X, ],
        ],

        GET_LWRRENT_SIZE => [
            DESCRIPTION    => "Get vpr current size",
            RETURN_TYPE    => FLCN_STATUS,
            ARGUMENTS      => 'LwU64 *',
            STUB_RETURNS   => FLCN_ERR_NOT_SUPPORTED,
            GCC_ATTRIBUTES => 'GCC_ATTRIB_SECTION("imem_vprHs", "__FUNC__")',

            _GP10X         => [ GP10X_and_later, ],
            _STUB          => [ pre_GP10X, ],
        ],

        VALIDATE_REQUEST => [
            DESCRIPTION    => "Validate vpr request",
            RETURN_TYPE    => FLCN_STATUS,
            ARGUMENTS      => 'LwU64, LwU64',
            STUB_RETURNS   => FLCN_ERR_NOT_SUPPORTED,
            GCC_ATTRIBUTES => 'GCC_ATTRIB_SECTION("imem_vprHs", "__FUNC__")',

            _GP10X         => [ GP10X_and_later, ],
            _STUB          => [ pre_GP10X, ],
        ],

        RAISE_PRIV_LEVEL_MASKS => [
            DESCRIPTION    => "Raise required priv level masks",
            RETURN_TYPE    => FLCN_STATUS,
            ARGUMENTS      => 'VPR_PRIV_MASKS_RESTORE *, LwBool',
            STUB_RETURNS   => FLCN_ERR_NOT_SUPPORTED,
            GCC_ATTRIBUTES => 'GCC_ATTRIB_SECTION("imem_vprHs", "__FUNC__")',

            _GP10X         => [ GP10X_and_later, ],
            _STUB          => [ pre_GP10X, ],
        ],

        PROGRAM_REGION => [
            DESCRIPTION    => "Program vpr region",
            RETURN_TYPE    => FLCN_STATUS,
            ARGUMENTS      => 'LwU64, LwU64',
            STUB_RETURNS   => FLCN_ERR_NOT_SUPPORTED,
            GCC_ATTRIBUTES => 'GCC_ATTRIB_SECTION("imem_vprHs", "__FUNC__")',

            _GP10X         => [ GP10X_and_later, ],
            _STUB          => [ pre_GP10X, ],
        ],

        SET_VPR_OFFSET_IN_BYTES => [
            DESCRIPTION    => "Set the VPR Offset in bytes",
            RETURN_TYPE    => FLCN_STATUS,
            ARGUMENTS      => 'LwU64 *, LwU64',
            STUB_RETURNS   => FLCN_ERR_NOT_SUPPORTED,
            GCC_ATTRIBUTES => 'GCC_ATTRIB_SECTION("imem_vprHs", "__FUNC__")',

            _GP10X         => [ GP10X_thru_VOLTA, CHEETAH, ],
            _TU10X         => [ TU10X_and_later, ],
            _STUB          => [ pre_GP10X, ],
        ],

        GET_LWR_VPR_RANGE_IN_BYTES => [
            DESCRIPTION    => "Get the current VPR Range in bytes",
            RETURN_TYPE    => FLCN_STATUS,
            ARGUMENTS      => 'LwU64 *, LwU64 *',
            STUB_RETURNS   => FLCN_ERR_NOT_SUPPORTED,
            GCC_ATTRIBUTES => 'GCC_ATTRIB_SECTION("imem_vprHs", "__FUNC__")',

            LIKE_INTERFACE => SET_VPR_OFFSET_IN_BYTES,
        ],

        SELWRE_SCRATCH_UPDATE_RANGE => [
            DESCRIPTION    => "Update vpr range in secure scratch reg",
            RETURN_TYPE    => FLCN_STATUS,
            ARGUMENTS      => 'LwU64, LwU64',
            STUB_RETURNS   => FLCN_ERR_NOT_SUPPORTED,
            GCC_ATTRIBUTES => 'GCC_ATTRIB_SECTION("imem_vprHs", "__FUNC__")',

            _GP10X         => [ GP10X_and_later, ],
            _STUB          => [ pre_GP10X, ],
        ],

        WRITE_VPR_WPR_DATA => [
            DESCRIPTION    => "Write vpr/wpr data in MMU register",
            RETURN_TYPE    => FLCN_STATUS,
            STUB_RETURNS   => FLCN_ERR_NOT_SUPPORTED,
            ARGUMENTS      => 'LwU32, LwU32',
            GCC_ATTRIBUTES => 'GCC_ATTRIB_SECTION("imem_vprHs", "__FUNC__")',

            _GP10X         => [ GP10X_thru_VOLTA, CHEETAH, ],
            _STUB          => [ pre_GP10X, TU10X_and_later, ],
        ],

        READ_VPR_INFO => [
            DESCRIPTION    => "Read vpr info in MMU register",
            RETURN_TYPE    => FLCN_STATUS,
            ARGUMENTS      => 'LwU32, LwU32 *',
            STUB_RETURNS   => FLCN_ERR_NOT_SUPPORTED,
            GCC_ATTRIBUTES => 'GCC_ATTRIB_SECTION("imem_vprHs", "__FUNC__")',

            LIKE_INTERFACE => WRITE_VPR_WPR_DATA,
        ],

        READ_WPR_INFO => [
            DESCRIPTION    => "Read wpr info in MMU register",
            RETURN_TYPE    => FLCN_STATUS,
            ARGUMENTS      => 'LwU32, LwU32 *',
            STUB_RETURNS   => FLCN_ERR_NOT_SUPPORTED,
            GCC_ATTRIBUTES => 'GCC_ATTRIB_SECTION("imem_vprHs", "__FUNC__")',

            LIKE_INTERFACE => WRITE_VPR_WPR_DATA,
        ],

        SET_MEM_LOCK_RANGE => [
            DESCRIPTION    => "Set mem lock before scrubbing",
            RETURN_TYPE    => FLCN_STATUS,
            ARGUMENTS      => 'LwU64, LwU64',
            STUB_RETURNS   => FLCN_ERR_NOT_SUPPORTED,
            GCC_ATTRIBUTES => 'GCC_ATTRIB_SECTION("imem_vprHs", "__FUNC__")',

            _GP10X         => [ GP10X_thru_VOLTA, CHEETAH, ],
            _TU10X         => [ TU10X_and_later, ],
            _STUB          => [ pre_GP10X, ],
        ],

        RELEASE_MEMLOCK => [
            DESCRIPTION    => "Release mem lock",
            RETURN_TYPE    => FLCN_STATUS,
            ARGUMENTS      => 'void',
            STUB_RETURNS   => FLCN_ERR_NOT_SUPPORTED,
            GCC_ATTRIBUTES => 'GCC_ATTRIB_SECTION("imem_vprHs", "__FUNC__")',

            LIKE_INTERFACE => SET_MEM_LOCK_RANGE,
        ],

        LOCK_AND_SCRUB => [
            DESCRIPTION    => "Write protect region using memlock and scrub",
            RETURN_TYPE    => FLCN_STATUS,
            ARGUMENTS      => 'LwU64, LwU64',
            STUB_RETURNS   => FLCN_ERR_NOT_SUPPORTED,
            GCC_ATTRIBUTES => 'GCC_ATTRIB_SECTION("imem_vprHs", "__FUNC__")',

            _GP10X         => [ GP10X_and_later, ],
            _STUB          => [ pre_GP10X, ],
        ],

        IS_VPR_ENABLE_IN_MMU => [
            DESCRIPTION    => "Checks whether VPR is Enable in MMU",
            RETURN_TYPE    => FLCN_STATUS,
            ARGUMENTS      => void,
            STUB_RETURNS   => FLCN_ERR_NOT_SUPPORTED,
            GCC_ATTRIBUTES => 'GCC_ATTRIB_SECTION("imem_vprHs", "__FUNC__")',

            _GA100         => [ dAMPERE, AD10X, ],
            _GH20X         => [ GH20X_and_later, ],
            _STUB          => [ All, -dAMPERE, -AD10X, -GH20X_and_later, ],
        ],

        ENABLE_VPR_IN_MMU => [
            DESCRIPTION    => "Enable VPR in MMU",
            RETURN_TYPE    => FLCN_STATUS,
            ARGUMENTS      => 'LwBool',
            STUB_RETURNS   => FLCN_ERR_NOT_SUPPORTED,
            GCC_ATTRIBUTES => 'GCC_ATTRIB_SECTION("imem_vprHs", "__FUNC__")',

            _GP10X         => [ GP10X_thru_VOLTA, CHEETAH, ],
            _TU10X         => [ Turing_thru_AD10X, -tAMPERE, ],
            _GH20X         => [ GH20X_and_later, ],
            _STUB          => [ pre_GP10X, GH10X, ],
        ],

        SETUP_VPR_RANGE_IN_MMU => [
            DESCRIPTION    => "Setup VPR region in MMU",
            RETURN_TYPE    => FLCN_STATUS,
            ARGUMENTS      => 'LwU64, LwU64',
            STUB_RETURNS   => FLCN_ERR_NOT_SUPPORTED,
            GCC_ATTRIBUTES => 'GCC_ATTRIB_SECTION("imem_vprHs", "__FUNC__")',

            _GP10X         => [ GP10X_thru_VOLTA, CHEETAH, ],
            _TU10X         => [ TU10X_and_later, ],
            _STUB          => [ pre_GP10X, ],
        ],

        UPDATE_MISC_SETTINGS_IF_ENABLED => [
            DESCRIPTION    => "Update miscellaneous settings based on if VPR is enabled or not",
            RETURN_TYPE    => FLCN_STATUS,
            ARGUMENTS      => 'LwBool',
            STUB_RETURNS   => FLCN_ERR_NOT_SUPPORTED,
            GCC_ATTRIBUTES => 'GCC_ATTRIB_SECTION("imem_vprHs", "__FUNC__")',

            _GP10X         => [ GP10X_thru_VOLTA, CHEETAH, ],
            _TU10X         => [ TU10X_and_later, ],
            _STUB          => [ pre_GP10X, ],
        ],

        UPDATE_DISP_CRC => [
            DESCRIPTION    => "Update display upstream CRC if vpr is enabled",
            RETURN_TYPE    => FLCN_STATUS,
            ARGUMENTS      => 'LwBool',
            STUB_RETURNS   => FLCN_OK,
            GCC_ATTRIBUTES => 'GCC_ATTRIB_SECTION("imem_vprHs", "__FUNC__")',

            _GP10X         => [ GP10X, ],
            _STUB          => [ ALL, -GP10X, ],
        ],

        WRITE_STATUS_TO_FALCON_MAILBOX => [
            DESCRIPTION    => "Write Error Status to falcon mailbox",
            RETURN_TYPE    => FLCN_STATUS,
            ARGUMENTS      => 'FLCN_STATUS',
            STUB_RETURNS   => FLCN_ERR_NOT_SUPPORTED,
            GCC_ATTRIBUTES => 'GCC_ATTRIB_SECTION("imem_vprHs", "__FUNC__")',

            _GP10X         => [ GP10X_and_later, ],
            _STUB          => [ pre_GP10X, ],
        ],

        SETUP_CLIENT_TRUST_LEVEL => [
            DESCRIPTION    => "Set trust levels for all VPR clients",
            RETURN_TYPE    => FLCN_STATUS,
            ARGUMENTS      => void,
            STUB_RETURNS   => FLCN_ERR_NOT_SUPPORTED,
            GCC_ATTRIBUTES => 'GCC_ATTRIB_SECTION("imem_vprHs", "__FUNC__")',

            _GP10X         => [ GP10X, ],
            _GV100         => [ VOLTA, ],
            _TU10X         => [ TU10X, ],
            _GA100         => [ GA100, ],
            _GA10X         => [ AMPERE_and_later, -GA100, -AD10X, ],
            _AD10X         => [ AD10X, ],
            _STUB          => [ pre_GP10X, ],
        ],

        CHECK_CONCERNED_P_L_M => [
            DESCRIPTION    => "Check if THERM and MMU PLM are at level3",
            RETURN_TYPE    => FLCN_STATUS,
            ARGUMENTS      => void,
            STUB_RETURNS   => FLCN_OK,
            GCC_ATTRIBUTES => 'GCC_ATTRIB_SECTION("imem_vprHs", "__FUNC__")',

            _GP10X         => [ GP10X, ],
            _STUB          => [ ALL, -GP10X, ],
        ],

        CHECK_PREVIOUS_COMMAND_STATUS => [
            DESCRIPTION    => "Check Status of previous VPR request",
            RETURN_TYPE    => FLCN_STATUS,
            ARGUMENTS      => void,
            STUB_RETURNS   => FLCN_ERR_NOT_SUPPORTED,
            GCC_ATTRIBUTES => 'GCC_ATTRIB_SECTION("imem_vprHs", "__FUNC__")',

            _GP10X         => [ GP10X_and_later, ],
            _STUB          => [ pre_GP10X, ],
        ],

        BLOCK_NEW_REQUESTS => [
            DESCRIPTION    => "Block new VPR requests",
            RETURN_TYPE    => FLCN_STATUS,
            ARGUMENTS      => void,
            STUB_RETURNS   => FLCN_ERR_NOT_SUPPORTED,
            GCC_ATTRIBUTES => 'GCC_ATTRIB_SECTION("imem_vprHs", "__FUNC__")',

            LIKE_INTERFACE => CHECK_PREVIOUS_COMMAND_STATUS,
        ],

        CHECK_SCRUBBER_HANDOFF => [
            DESCRIPTION    => "Check handoff from scrubber",
            RETURN_TYPE    => FLCN_STATUS,
            ARGUMENTS      => void,
            STUB_RETURNS   => FLCN_ERR_NOT_SUPPORTED,
            GCC_ATTRIBUTES => 'GCC_ATTRIB_SECTION("imem_vprHs", "__FUNC__")',

            _GP10X         => [ GP10X_and_later, ],
            _STUB          => [ pre_GP10X, ],
        ],

        CHECK_IF_DISP_FALCON_IS_IN_L_S_MODE => [
            DESCRIPTION    => "Check if DISP falcon (DPU or GSPlite) is in LS mode",
            RETURN_TYPE    => FLCN_STATUS,
            ARGUMENTS      => void,
            STUB_RETURNS   => FLCN_ERR_NOT_SUPPORTED,
            GCC_ATTRIBUTES => 'GCC_ATTRIB_SECTION("imem_vprHs", "__FUNC__")',

            _GP10X         => [ GP10X, ],
            _GV100         => [ GV100_and_later ],
            _STUB          => [ pre_GP10X, ],
        ],

        RELEASE_HDCP_TYPE1_LOCK => [
            DESCRIPTION    => "Release HDCP22 type1 lock when VPR is freed",
            RETURN_TYPE    => FLCN_STATUS,
            ARGUMENTS      => void,
            STUB_RETURNS   => FLCN_OK,
            GCC_ATTRIBUTES => 'GCC_ATTRIB_SECTION("imem_vprHs", "__FUNC__")',

            _GP10X         => [ GP10X, ],
            _STUB          => [ ALL, -GP10X, ],
        ],

        CHECK_IF_APM_IS_SUPPORTED => [
            DESCRIPTION    => "Check if build is supported on chip",
            RETURN_TYPE    => FLCN_STATUS,
            ARGUMENTS      => void,
            STUB_RETURNS   => FLCN_ERR_HS_CHK_CHIP_NOT_SUPPORTED,
            GCC_ATTRIBUTES => 'GCC_ATTRIB_SECTION("imem_vprHs", "__FUNC__")',

            _GA100         => [ GA100, ],
            _STUB          => [ ALL, -GA100, ],
        ],

        GET_USABLE_FB_SIZE_IN_MB => [
            DESCRIPTION    => "Get vpr max end address",
            RETURN_TYPE    => FLCN_STATUS,
            ARGUMENTS      => 'LwU64 *',
            STUB_RETURNS   => FLCN_OK,
            GCC_ATTRIBUTES => 'GCC_ATTRIB_SECTION("imem_vprHs", "__FUNC__")',

            _GA100         => [ GA100, ],
            _STUB          => [ ALL, -GA100, ],
        ],

        CHECK_VPR_RANGE_WITH_ROW_REMAPPER_RESERVE_FB => [
            DESCRIPTION    => "Checks if VPR start or end address falls within row remapper range",
            RETURN_TYPE    => FLCN_STATUS,
            ARGUMENTS      => 'LwU64, LwU64',
            STUB_RETURNS   => FLCN_OK,
            GCC_ATTRIBUTES => 'GCC_ATTRIB_SECTION("imem_vprHs", "__FUNC__")',

            _GA100         => [ GA100, ],
            _STUB          => [ ALL, -GA100, ],
        ],

    ],   # HAL_INTERFACES
];

# return a reference to the Hal definition
return $vprHal;
