#
# _LWRM_COPYRIGHT_BEGIN_
#
# Copyright 2013-2021 by LWPU Corporation.  All rights reserved.  All
# information contained herein is proprietary and confidential to LWPU
# Corporation.  Any use, reproduction, or disclosure without the written
# permission of LWPU Corporation is prohibited.
#
# _LWRM_COPYRIGHT_END_
#

###############################################################################
# Default build options
###############################################################################

NO_CHECK_BUILD ?= false
NO_RELEASE     ?= false
INCLUDE_DT     ?= false
FALCON_ARCH    ?= falcon5

###############################################################################
# Target inspecific paths: these are paths used by the build but not dependent
# upon the build.
###############################################################################

LWUPROC        = $(LW_SOURCE)/uproc
ACR_SW         = $(LW_SOURCE)/uproc/acr
ACRCFG         = $(LW_SOURCE)/uproc/acr/config
LWUPROC        = $(LW_SOURCE)/uproc
RESMAN_ROOT    = $(LW_SOURCE)/drivers/resman
UPROC_LWOS_SRC = $(LWUPROC)/libs/lwos/$(LWOS_VERSION)
UPROC_LIBS     = $(LW_SOURCE)/uproc/libs
UPROC_CMN_SRC  = $(UPROC_LIBS)/cmn
LIB_CCC_REL_GH100_ROOT  = $(LWUPROC)/lwriscv/sdk/lwriscv-sdk-3.0_dev/prebuilt/acr-ahesasc-falcon-gh100
LIB_CCC_REL_GH100_INC   = $(LIB_CCC_REL_GH100_ROOT)/inc
LIB_CCC_REL_GH100_LIB   = $(LIB_CCC_REL_GH100_ROOT)/lib

###############################################################################
# Set profile-specific make vars. This includes things like the target falcon
# architecture (ex. falcon4), the linker-script to use, the manual directory,
# etc ...).
###############################################################################

include $(ACR_SW)/config/acr-profiles.mk

###############################################################################
# Load common falcon make vars and host command definitions (ie. MKDIR, P4,
# COPY, etc...).
###############################################################################

include $(LWUPROC)/build/common/lwFalconArch.lwmk
ifdef CHIP_MANUAL_PATH
    include $(CHIP_MANUAL_PATH)/lwFalconSignParams.mk
endif

override LW_TARGET_ARCH = $(FALCON_TOOLS_BUILD)
override LW_TARGET_OS   = falcon
include $(LW_SOURCE)/drivers/common/build/lwCommon.lwmk

###############################################################################
# Define the output directory paths for the ACR build and all sub-make builds.
###############################################################################

CHIPNAME  := $(subst acr_,,$(ACRCFG_PROFILE))
CHIPNAME  := $(subst pmu-,,$(CHIPNAME))
CHIPNAME  := $(subst sec2-,,$(CHIPNAME))
CHIPNAME  := $(subst gsp-,,$(CHIPNAME))
FALCONNAME := unknown
ifeq ($(ACR_UNLOAD),true)
    FALCONNAME := pmu
endif
ifeq ($(AHESASC),true)
    FALCONNAME := sec2
endif
ifeq ($(ASB),true)
   FALCONNAME := gsp
endif
ifeq ($(BSI_LOCK),true)
   FALCONNAME := sec2
endif
ifeq ($(ACR_UNLOAD_ON_SEC2),true)
   FALCONNAME := sec2
endif

OUTPUTDIR := _out/$(FALCONNAME)/$(CHIPNAME)

###############################################################################
# Setup acr-config make vars and ilwoke acr-config. Use acr-config's
# makefile.mk to do all the work. The makefile will generate acr-config.mk in
# the output directory and then include it.
###############################################################################

ACRSRC_ALL          :=
ACRCFG_OPTIONS      :=
ACRCFG_OUTPUTDIR    ?= $(OUTPUTDIR)/config
ACRCFG_RESMAN_ROOT  := $(RESMAN_ROOT)
ACRCFG_ACRSW_ROOT   := $(ACR_SW)/src

include $(ACR_SW)/config/makefile.mk

# include the generated list of source files
ifdef ACRCFG_INITIALIZED
  include $(ACRCFG_OUTPUTDIR)/g_sources.mk
endif

###############################################################################
# Generate only halgen files
###############################################################################

.PHONY : gen_only_header
gen_only_header : $(ACRCFG_OUTPUTDIR)/g_sources.mk


###############################################################################
# Include profile-specific make settings to account for profile-specific build
# options/requirements.
###############################################################################

-include $(ACR_SW)/config/$(ACRCFG_PROFILE).mk

###############################################################################
# Export variables used by sub-makefiles ilwoked by this makefile
###############################################################################

export LW_TARGET_ARCH
export MANUAL_PATHS
export ACR_UNLOAD
export BSI_LOCK
export ACR_SIG_VERIF
export ACR_SKIP_MEMRANGE
export ACR_SKIP_SCRUB
export ACR_BUILD_ONLY
export ACR_FMODEL_BUILD
export ACR_RISCV_LS
export NOUVEAU_ACR
export RTOS_VERSION
export LWOS_VERSION
export AHESASC
export ASB
export ACR_UNLOAD_ON_SEC2
export CCC_ENGINE_SEC

###############################################################################
# Submake Configuration
#
# This makefile builds libraries and tools that are shared with other projects.
# Many of these builds may be lwstomized based on the needs of the project
# building it. It is therefore necessary to ensure isolation between the
# projects. Isolation is also required to allow for parallelization of project
# builds.
#
# Isolation is achieved by ensuring that all build output is kept separate
# between the projects. Ideally, output could all be redirected to a path
# defined within the ACR's/project's output directory. However, the common
# lwmake rules require that each submake target's output directory be contained
# within that target's source directory. As a result, the only way to ensure
# isolation is by establishing proper namespacing within each submake target's
# local output directory.
###############################################################################

SUBMAKE_NAMESPACE := acr
SUBMAKE_OUTPUTDIR := \
  _out/$(SUBMAKE_NAMESPACE)/$(FALCON_ARCH)_$(LW_BUILD_TYPE)

###############################################################################
# RTOS Configuration
###############################################################################

include $(LWUPROC)/build/common/lwRtosVersion.lwmk

RTOS_SRC  = $(LW_RTOS_SRC)
LIB_RTOS := $(RTOS_SRC)/$(SUBMAKE_OUTPUTDIR)/$(LW_RTOS_LIB_FILENAME)

SUBMAKE_TARGETS += RTOS
$(LIB_RTOS): submake.RTOS

##############################################################################
# LibCCC Library
##############################################################################
ifeq ($(LIB_CCC_PRESENT), true)
  LIB_CCC := $(LIB_CCC_REL_GH100_LIB)/libCCC.a
  LIBDIRS += $(LIB_CCC_REL_GH100_LIB)
  LIBS += CCC
  CFLAGS += -DLIB_CCC_PRESENT
  CFLAGS += -DCCC_ENGINE_SEC
  CFLAGS += -DUPROC_ARCH_FALCON
  LW_INCLUDES += $(LIB_CCC_REL_GH100_INC)/libCCC
  LW_INCLUDES += $(LIB_CCC_REL_GH100_INC)/libCCC/hwref
  LW_INCLUDES += $(LIB_CCC_REL_GH100_INC)/libCCC/common
  LW_INCLUDES += $(LIB_CCC_REL_GH100_INC)/libCCC/common_crypto
  LW_INCLUDES += $(LIB_CCC_REL_GH100_INC)/libCCC/common_crypto/include
  LW_INCLUDES += $(LIB_CCC_REL_GH100_INC)/libCCC/common_crypto_private
  LW_INCLUDES += $(LIB_CCC_REL_GH100_INC)/libCCC/common_crypto_private/lwpka
endif

##############################################################################
# Additional include paths required
##############################################################################

LW_INCLUDES += $(LW_SOURCE)/uproc/cmn/inc
LW_INCLUDES += $(LW_RTOS_INCLUDES)
LW_INCLUDES += $(ACRSW)/inc
LW_INCLUDES += $(ACRSW)/inc/ampere
LW_INCLUDES += $(LW_SOURCE)/drivers/common/inc/swref
LW_INCLUDES += $(LW_SOURCE)/drivers/common/inc/hwref
LW_INCLUDES += $(LW_SOURCE)/drivers/common/inc
LW_INCLUDES += $(RESMAN_ROOT)/kernel/inc
LW_INCLUDES += $(RESMAN_ROOT)/arch/lwalloc/common/inc
LW_INCLUDES += $(FALCON_TOOLS)/include
LW_INCLUDES += $(UPROC_LWOS_SRC)/inc
LW_INCLUDES += $(UPROC_CMN_SRC)/inc
LW_INCLUDES += $(MANUAL_PATHS)
LW_INCLUDES += $(OUTPUTDIR)
LW_INCLUDES += $(ACR_SW)/inc/turing
LW_INCLUDES += $(UPROC_LIBS)/se/inc
LW_INCLUDES += $(LWUPROC)/bootloader/inc

##############################################################################
# Load lwConfig for LW DEV ID access
##############################################################################

ifeq ($(LW_VERBOSE),0)
  LWCFG_VERBOSE         = quiet
endif
include $(LW_SOURCE)/drivers/common/build/lwconfig.lwmk

###############################################################################
# Define the names and locations for the various images that are generated
# during the build-process (IMG_*). Also create the list of files that need
# updated with those images when the install-mode is enabled.
###############################################################################

IMG_TARGET      := $(OUTPUTDIR)/g_acruc_$(CHIPNAME)
IMG_TARGET_DBG  := $(OUTPUTDIR)/g_acruc_$(CHIPNAME)_dbg
IMG_TARGET_PROD := $(OUTPUTDIR)/g_acruc_$(CHIPNAME)_prod

IMG_ELF     := $(IMG_TARGET).out
IMG_ELF_DBG := $(IMG_TARGET_DBG).out
IMG_ELF_PROD:= $(IMG_TARGET_PROD).out
IMG_READELF := $(IMG_TARGET).readelf
IMG_SECTIONS:= $(IMG_TARGET).sections
IMG_H       := $(IMG_TARGET).h
IMG_H_DBG   := $(IMG_TARGET_DBG).h
IMG_H_PROD  := $(IMG_TARGET_PROD).h
IMG_BIN     := $(IMG_TARGET).bin
IMG_OBJDUMP := $(IMG_TARGET).objdump
IMG_NM      := $(IMG_TARGET).nm
IMG_MAP     := $(IMG_TARGET).map
IMG_DT      := $(IMG_TARGET).dt
IMG_DBGLINE := $(IMG_TARGET).dbgline
HAL_INFO    := $(OUTPUTDIR)/config/g_acrlib_hal.h
HAL_INFO    += $(OUTPUTDIR)/config/g_acrlib_private.h

RELEASE_FILES = $(IMG_NM) $(IMG_OBJDUMP) $(IMG_READELF)

ifeq ("$(IS_HS_ENCRYPTED)", "true")
    RELEASE_FILES += $(IMG_ELF_PROD) $(IMG_H_DBG) $(IMG_H_PROD) $(IMG_SECTIONS) $(IMG_MAP)
else
    RELEASE_FILES += $(IMG_ELF) $(IMG_H)
endif

###############################################################################
# Application-specific compiler/linker flags
# Only adding required libraries
###############################################################################

LDFLAGS += -nodefaultlibs
LDFLAGS += -lgcc -lfalcon
LDFLAGS += -T $(ACRSW)/build/$(LDSCRIPT)
LDFLAGS += $(addprefix -L,$(LIBDIRS))
LDFLAGS += $(addprefix -l,$(LIBS))

# Disable jump tables, because they go to RO data section which is not covered under signature check
CFLAGS += -fno-jump-tables

CFLAGS += -DSIG_SIZE=$(SIGNATURE_SIZE)

ifeq ($(ACR_UNLOAD), true)
    CFLAGS += -DACR_UNLOAD
    CFLAGS += -DDMEM_APERT_ENABLED
    CFLAGS += -DLW_MISRA_COMPLIANCE_REQUIRED
endif

ifeq ($(ACR_UNLOAD_ON_SEC2), true)
    CFLAGS += -DACR_UNLOAD_ON_SEC2
endif

ifeq ($(BSI_LOCK), true)
    CFLAGS += -DBSI_LOCK
    CFLAGS += -DACR_BSI_PHASE
endif

ifeq ($(ACR_SIG_VERIF), true)
    CFLAGS += -DACR_SIG_VERIF
endif

ifeq ($(ACR_SKIP_MEMRANGE), true)
    CFLAGS += -DACR_SKIP_MEMRANGE
endif

ifeq ($(ACR_SKIP_SCRUB), true)
    CFLAGS += -DACR_SKIP_SCRUB
endif

ifeq ($(ACR_FIXED_TRNG), true)
    CFLAGS += -DACR_FIXED_TRNG
endif

ifeq ($(ACR_BUILD_ONLY), true)
    CFLAGS += -DACR_BUILD_ONLY
endif

ifeq ($(ACR_FMODEL_BUILD), true)
    CFLAGS += -DACR_FMODEL_BUILD
endif

ifeq ($(ACR_RISCV_LS), true)
    CFLAGS += -DACR_RISCV_LS
endif

ifeq ($(SEC2_PRESENT), true)
    CFLAGS += -DSEC2_PRESENT
endif

ifeq ($(LWENC_PRESENT), true)
    CFLAGS += -DLWENC_PRESENT
endif

ifeq ($(LWDEC_PRESENT), true)
    CFLAGS += -DLWDEC_PRESENT
endif

ifeq ($(DPU_PRESENT), true)
    CFLAGS += -DDPU_PRESENT
endif

ifeq ($(GSP_PRESENT), true)
    CFLAGS += -DGSP_PRESENT
endif

ifeq ($(FBFALCON_PRESENT), true)
    CFLAGS += -DFBFALCON_PRESENT
endif

ifeq ($(LWDEC1_PRESENT), true)
    CFLAGS += -DLWDEC1_PRESENT
endif

ifeq ($(LWDEC_RISCV_PRESENT), true)
    CFLAGS += -DLWDEC_RISCV_PRESENT
endif

ifeq ($(LWDEC_RISCV_EB_PRESENT), true)
    CFLAGS += -DLWDEC_RISCV_EB_PRESENT
endif

ifeq ($(LWJPG_PRESENT), true)
    CFLAGS += -DLWJPG_PRESENT
endif

ifeq ($(OFA_PRESENT), true)
    CFLAGS += -DOFA_PRESENT
endif

ifeq ($(NOUVEAU_ACR), true)
    CFLAGS += -DNOUVEAU_ACR
endif

ifeq ($(UNDESIRABLE_OPTIMIZATION_FOR_BSI_RAM_SIZE), true)
    CFLAGS += -DUNDESIRABLE_OPTIMIZATION_FOR_BSI_RAM_SIZE
endif

ifeq ($(ACR_ENFORCE_LS_UCODE_ENCRYPTION), true)
    CFLAGS += -DACR_ENFORCE_LS_UCODE_ENCRYPTION
endif

ifeq ($(LW_TARGET_OS),falcon)
    CFLAGS += -DUPROC_FALCON
else ifeq ($(LW_TARGET_OS),riscv)
    CFLAGS += -DUPROC_RISCV
endif

ifneq (,$(findstring SafeRTOS, $(RTOS_VERSION)))
    CFLAGS += -DSAFERTOS
endif

ifeq ("$(IS_HS_ENCRYPTED)", "true")
    CFLAGS += -DIS_HS_ENCRYPTED=1
else
    CFLAGS += -DIS_HS_ENCRYPTED=0
endif

ifeq ($(SSP_ENABLED), true)
RANDOM_CANARY_NS := $(shell $(PYTHON) -c 'from random import randint; print(randint(65535,1048576))')
    CFLAGS += -DIS_SSP_ENABLED
    CFLAGS += -fstack-protector-all
    CFLAGS += -DRANDOM_CANARY_NS=$(RANDOM_CANARY_NS)
endif

ifeq ($(AHESASC), true)
    CFLAGS += -DAHESASC
endif

ifeq ($(ASB), true)
    CFLAGS += -DASB
endif

ifeq ($(PRI_SOURCE_ISOLATION_PLM), true)
    CFLAGS += -DPRI_SOURCE_ISOLATION_PLM
endif

ifeq ($(ACR_GSP_RM_BUILD), true)
    CFLAGS += -DACR_GSP_RM_BUILD
endif

ifeq ($(PKC_ENABLED), true)
    CFLAGS += -DPKC_ENABLED
    CFLAGS += -DFUSE_VERSION=$(SIGGEN_FUSE_VER)
    CFLAGS += -DUCODE_ID=$(SIGGEN_UCODE_ID)
    CFLAGS += -DENGINE_ID=$(SIGGEN_ENGINE_ID)
endif

ifeq ($(IS_ENHANCED_AES), true)
    CFLAGS += -DIS_ENHANCED_AES
    CFLAGS += -DFUSE_VERSION=$(SIGGEN_FUSE_VER)
    CFLAGS += -DUCODE_ID=$(SIGGEN_UCODE_ID)
    CFLAGS += -DENGINE_ID=$(SIGGEN_ENGINE_ID)
endif

ifeq ($(NEW_WPR_BLOBS), true)
    CFLAGS += -DNEW_WPR_BLOBS
endif

ifeq ($(PKC_LS_RSA3K_KEYS_GA10X), true)
    CFLAGS += -DPKC_LS_RSA3K_KEYS_GA10X
endif

ifeq ($(BOOT_FROM_HS_BUILD), true)
    CFLAGS += -DBOOT_FROM_HS_BUILD
endif

ifeq ($(AMPERE_PROTECTED_MEMORY), true)
    CFLAGS += -DAMPERE_PROTECTED_MEMORY
endif

ifeq ($(BOOT_FROM_HS_FALCON_SEC2), true)
    CFLAGS += -DBOOT_FROM_HS_FALCON_SEC2
endif

ifeq ($(BOOT_FROM_HS_FALCON_GSP), true)
    CFLAGS += -DBOOT_FROM_HS_FALCON_GSP
endif

ifeq ($(DISABLE_SE_ACCESSES), true)
    CFLAGS += -DDISABLE_SE_ACCESSES
endif

ifeq ($(ACR_MEMSETBYTE_ENABLED), true)
    CFLAGS += -DACR_MEMSETBYTE_ENABLED
endif

###############################################################################
# Make variable used to tell mkimage which changelist number to include in the
# descriptor for the c-file image.
###############################################################################

ifneq ($(LW_DVS_BLD),1)
  APP_P4_CL = $(word 2, $(shell $(PERL) -e 'chdir(qw(.)); delete $$ELW{PWD}; \
          print `$(P4) changes -m1 "$(LW_SOURCE)/..."`;'))
else
  APP_P4_CL = $(CHANGELIST)
endif

###############################################################################
# Define a string describing the project being built.  This string is used as
# a prefix for the majority of the output from the build for tracking progress
# and sanity-checking.
###############################################################################

BUILD_PROJECT_NAME = "[$(ACRCFG_PROFILE)]"

ADD_OBJECTS = mulsi.o
SOURCES     = $(ACRSRC_ALL)

###############################################################################
# Rules for buildig the ELF image and binary files
###############################################################################

build: $(addsuffix .build,$(SUBDIRS)) all

all:: $(IMG_ELF) check_ifdef check
ifeq ($(ACR_SKIP_SIGN_RELEASE), false)
all:: sign release
endif

###############################################################################
# Sign the binary. Uses pre-build signing tool (linux only for now)
###############################################################################
CFLAGS += -DACR_GM200_UCODE_BUILD_VERSION=$(ACR_GM200_UCODE_BUILD_VERSION)
CFLAGS += -DACR_GP100_UCODE_BUILD_VERSION=$(ACR_GP100_UCODE_BUILD_VERSION)
CFLAGS += -DACR_GP104_UCODE_BUILD_VERSION=$(ACR_GP104_UCODE_BUILD_VERSION)
CFLAGS += -DACR_GP106_UCODE_BUILD_VERSION=$(ACR_GP106_UCODE_BUILD_VERSION)
CFLAGS += -DACR_GP107_UCODE_BUILD_VERSION=$(ACR_GP107_UCODE_BUILD_VERSION)
CFLAGS += -DACR_GP108_UCODE_BUILD_VERSION=$(ACR_GP108_UCODE_BUILD_VERSION)
CFLAGS += -DACR_GV100_UCODE_BUILD_VERSION=$(ACR_GV100_UCODE_BUILD_VERSION)
CFLAGS += -DACR_TU102_UCODE_BUILD_VERSION=$(ACR_TU102_UCODE_BUILD_VERSION)
CFLAGS += -DACR_TU104_UCODE_BUILD_VERSION=$(ACR_TU104_UCODE_BUILD_VERSION)
CFLAGS += -DACR_TU106_UCODE_BUILD_VERSION=$(ACR_TU106_UCODE_BUILD_VERSION)
CFLAGS += -DACR_TU116_UCODE_BUILD_VERSION=$(ACR_TU116_UCODE_BUILD_VERSION)
CFLAGS += -DACR_TU117_UCODE_BUILD_VERSION=$(ACR_TU117_UCODE_BUILD_VERSION)
CFLAGS += -DACR_GA100_UCODE_BUILD_VERSION=$(ACR_GA100_UCODE_BUILD_VERSION)
CFLAGS += -DACR_GA102_UCODE_BUILD_VERSION=$(ACR_GA102_UCODE_BUILD_VERSION)
CFLAGS += -DACR_AD102_UCODE_BUILD_VERSION=$(ACR_AD102_UCODE_BUILD_VERSION)
CFLAGS += -DACR_GH100_UCODE_BUILD_VERSION=$(ACR_GH100_UCODE_BUILD_VERSION)
CFLAGS += -DACR_GH202_UCODE_BUILD_VERSION=$(ACR_GH202_UCODE_BUILD_VERSION)
CFLAGS += -DACR_G000_UCODE_BUILD_VERSION=$(ACR_G000_UCODE_BUILD_VERSION)

UCODE_BUILD_VERSIONS :=

  ifneq (,$(findstring tu10a, $(CHIPNAME)))
    UCODE_BUILD_VERSIONS := "\"ACR_TU10A_UCODE_BUILD_VERSION 0x$(ACR_TU10A_UCODE_BUILD_VERSION)\""
  endif
  ifneq (,$(findstring tu10x, $(CHIPNAME)))
    UCODE_BUILD_VERSIONS := "\"ACR_TU102_UCODE_BUILD_VERSION 0x$(ACR_TU102_UCODE_BUILD_VERSION)\;ACR_TU104_UCODE_BUILD_VERSION 0x$(ACR_TU104_UCODE_BUILD_VERSION)\;ACR_TU106_UCODE_BUILD_VERSION 0x$(ACR_TU106_UCODE_BUILD_VERSION)\""
  endif
 ifneq (,$(findstring tu116, $(CHIPNAME)))
    UCODE_BUILD_VERSIONS := "\"ACR_TU116_UCODE_BUILD_VERSION 0x$(ACR_TU116_UCODE_BUILD_VERSION)\;ACR_TU117_UCODE_BUILD_VERSION 0x$(ACR_TU117_UCODE_BUILD_VERSION)\""
  endif
  ifneq (,$(findstring ga100, $(CHIPNAME)))
    UCODE_BUILD_VERSIONS := "\"ACR_GA100_UCODE_BUILD_VERSION 0x$(ACR_GA100_UCODE_BUILD_VERSION)\""
  endif
  ifneq (,$(findstring ga10x, $(CHIPNAME)))
    UCODE_BUILD_VERSIONS := "\"ACR_GA102_UCODE_BUILD_VERSION 0x$(ACR_GA102_UCODE_BUILD_VERSION)\""
  endif
  ifneq (,$(findstring ad10x, $(CHIPNAME)))
    UCODE_BUILD_VERSIONS := "\"ACR_AD102_UCODE_BUILD_VERSION 0x$(ACR_AD102_UCODE_BUILD_VERSION)\""
  endif
  ifneq (,$(findstring gh100, $(CHIPNAME)))
    UCODE_BUILD_VERSIONS := "\"ACR_GH100_UCODE_BUILD_VERSION 0x$(ACR_GH100_UCODE_BUILD_VERSION)\""
  endif
  ifneq (,$(findstring gh20x, $(CHIPNAME)))
    UCODE_BUILD_VERSIONS := "\"ACR_GH202_UCODE_BUILD_VERSION 0x$(ACR_GH202_UCODE_BUILD_VERSION)\""
  endif
  ifneq (,$(findstring g000, $(CHIPNAME)))
    UCODE_BUILD_VERSIONS := "\"ACR_G000_UCODE_BUILD_VERSION 0x$(ACR_G000_UCODE_BUILD_VERSION)\""
  endif

SIG_GEN        = $(ACRSW)/utilities/siggen/siggen
SIG_GEN_CFG    = ../build/sign/$(SIGGEN_CFG)
GEN_CLASS_PL   = $(ACRSW)/utilities/gen_class_os.pl
GEN_CLASS_OUT  = $(IMG_TARGET).h
SIGN_SCRIPT    = "tmpsign.sh"
SIG_SCRIPT_EXP = $(foreach CHIP,$(SIGGEN_CHIPS),                                               \
         "$(COPY) $(RELEASE_PATH)/g_acruc_$(CHIPNAME)_$(CHIP)_sig.h                            \
         $(OUTPUTDIR)/g_acruc_$(CHIPNAME)_$(CHIP)_sig.h; chmod u+w                             \
         $(OUTPUTDIR)/g_acruc_$(CHIPNAME)_$(CHIP)_sig.h; $(SIG_GEN) $(SIG_GEN_CFG)             \
         $(IMG_TARGET) $(IMG_TARGET) -app $(OUTPUTDIR)/g_acruc_$(CHIPNAME)_$(CHIP)_sig.h       \
         -sig $(OUTPUTDIR)/g_acruc_$(CHIPNAME)_$(CHIP)_sig.h  -chip $(CHIP)                    \
         -fuseVer $(SIGGEN_FUSE_VER) -engineId $(SIGGEN_ENGINE_ID) -ucodeId $(SIGGEN_UCODE_ID) \
         -skipSigPatching -calcPrevNSignatures $$(($(NUM_SIG_PER_UCODE)-1))                    \
         $(if $(filter $(IS_HS_ENCRYPTED),true), -forceSign -encryptUcode -totAppFilePrefix    \
             $(RELEASE_PATH)/g_acruc_$(CHIPNAME) -totAppFilePrefixDH                           \
             $(RELEASE_PATH)/g_acruc_$(CHIPNAME)) ;")

RELEASE_FILES += $(foreach CHIP,$(SIGGEN_CHIPS),"$(OUTPUTDIR)/g_acruc_$(CHIPNAME)_$(CHIP)_sig.h")

ifeq ("$(SIGGEN_CSG_PROD_SIGNING)", "true")
    CSG_ARCHIVE = $(ACRCFG_PROFILE)_CSG_SIGNING_ARCHIVE
    CSG_DIR = $(OUTPUTDIR)/$(CSG_ARCHIVE)
    CSG_POST_SIGN_SCRIPT = "csg_post_sign.sh"
    # CSG_SIGGEN_PROD_PARAMS is same as the SIG_SCRIPT_EXP above except for some file paths. 
    CSG_SIGGEN_PROD_PARAMS = "./$(notdir $(SIG_GEN_CFG))                                             \
             $(IMG_TARGET) $(IMG_TARGET) -app $(OUTPUTDIR)/g_acruc_$(CHIPNAME)_$(SIGGEN_CHIPS)_sig.h \
             -sig $(OUTPUTDIR)/g_acruc_$(CHIPNAME)_$(SIGGEN_CHIPS)_sig.h  -chip $(SIGGEN_CHIPS)      \
             -fuseVer $(SIGGEN_FUSE_VER) -engineId $(SIGGEN_ENGINE_ID) -ucodeId $(SIGGEN_UCODE_ID)   \
             -skipSigPatching -calcPrevNSignatures $$(($(NUM_SIG_PER_UCODE)-1))                      \
             $(if $(filter $(IS_HS_ENCRYPTED),true), -forceSign -encryptUcode -totAppFilePrefix      \
                 ./release/g_acruc_$(CHIPNAME) -totAppFilePrefixDH                                   \
                 ./release/g_acruc_$(CHIPNAME))"
endif

sign:
ifeq ("$(SIGGEN_CSG_PROD_SIGNING)", "true")
	$(MKDIR) $(CSG_DIR)
	$(MKDIR) -p $(CSG_DIR)/$(OUTPUTDIR) 
	$(MKDIR) -p $(CSG_DIR)/release 
	$(ECHO) $(CSG_SIGGEN_PROD_PARAMS) > $(CSG_DIR)/siggen_params.txt
	$(ECHO) $(ACRCFG_PROFILE) > $(CSG_DIR)/profile.txt
	$(COPY) -f  $(SIG_GEN_CFG) $(CSG_DIR)/
	$(COPY) -f  $(IMG_TARGET)* $(CSG_DIR)/$(OUTPUTDIR)/
	$(COPY) -f  $(RELEASE_PATH)/g_acruc_$(CHIPNAME)_$(SIGGEN_CHIPS)_sig.h $(CSG_DIR)/$(OUTPUTDIR)/g_acruc_$(CHIPNAME)_$(SIGGEN_CHIPS)_sig.h
	/bin/chmod u+w $(CSG_DIR)/$(OUTPUTDIR)/g_acruc_$(CHIPNAME)_$(SIGGEN_CHIPS)_sig.h
	$(COPY) -f  $(RELEASE_PATH)/g_acruc_$(CHIPNAME)* $(CSG_DIR)/release/
	/bin/tar -cf $(OUTPUTDIR)/$(CSG_ARCHIVE).tar -C $(OUTPUTDIR) $(CSG_ARCHIVE)
	/bin/gzip $(OUTPUTDIR)/$(CSG_ARCHIVE).tar
ifeq ("$(IS_HS_ENCRYPTED)", "true")
	$(ECHO) "$(PERL) $(GEN_CLASS_PL) -dump app_os_images -hdr $(IMG_H_DBG) -bin $(IMG_ELF_DBG) -chip $(CHIPNAME) -version $(UCODE_BUILD_VERSIONS)" >> $(CSG_POST_SIGN_SCRIPT)
	$(ECHO) "$(PERL) $(GEN_CLASS_PL) -dump app_os_images -hdr $(IMG_H_PROD) -bin $(IMG_ELF_PROD) -chip $(CHIPNAME) -version $(UCODE_BUILD_VERSIONS)" >> $(CSG_POST_SIGN_SCRIPT)
else
	$(ECHO) "$(PERL) $(GEN_CLASS_PL) -dump app_os_images -hdr $(IMG_H) -bin $(IMG_ELF) -chip $(CHIPNAME) -version $(UCODE_BUILD_VERSIONS)" >> $(CSG_POST_SIGN_SCRIPT)
endif
else
	$(ECHO) $(SIG_SCRIPT_EXP) >> $(SIGN_SCRIPT)
ifeq ("$(IS_HS_ENCRYPTED)", "true")
	$(ECHO) "$(PERL) $(GEN_CLASS_PL) -dump app_os_images -hdr $(IMG_H_DBG) -bin $(IMG_ELF_DBG) -chip $(CHIPNAME) -version $(UCODE_BUILD_VERSIONS)" >> $(SIGN_SCRIPT)
	$(ECHO) "$(PERL) $(GEN_CLASS_PL) -dump app_os_images -hdr $(IMG_H_PROD) -bin $(IMG_ELF_PROD) -chip $(CHIPNAME) -version $(UCODE_BUILD_VERSIONS)" >> $(SIGN_SCRIPT)
else
	$(ECHO) "$(PERL) $(GEN_CLASS_PL) -dump app_os_images -hdr $(IMG_H) -bin $(IMG_ELF) -chip $(CHIPNAME) -version $(UCODE_BUILD_VERSIONS)" >> $(SIGN_SCRIPT)
endif
endif

###############################################################################
# The install process is handled by a perl-script to avoid the unnecessary
# complication of host-specific process in make.
###############################################################################

RELEASE_SCRIPT = $(LW_SOURCE)/uproc/build/scripts/release-imgs-if-changed.pl

COMMA := ,
EMPTY :=
SPACE := $(EMPTY) $(EMPTY)

RELEASE_IMG_ARGS += --output-prefix $(BUILD_PROJECT_NAME)

ifeq ("$(IS_HS_ENCRYPTED)", "true")
    RELEASE_IMG_ARGS += --image     $(IMG_ELF_PROD)
else
    RELEASE_IMG_ARGS += --image     $(IMG_ELF)
endif

RELEASE_IMG_ARGS += --p4            $(P4)

RELEASE_IMG_ARGS += --release-path $(RELEASE_PATH)

RELEASE_IMG_ARGS += --release-files            \
  $(subst $(SPACE),$(COMMA),$(RELEASE_FILES))

# unless disabled, make sure the environment is fresh before installing
ifneq ("$(NO_CHECK_BUILD)","true")
  .PHONY: checkbuild
  install: checkbuild
endif

release: $(IMG_ELF)
ifeq ("$(SIGGEN_CSG_PROD_SIGNING)", "true")
	$(ECHO) $(PERL) $(RELEASE_SCRIPT) $(RELEASE_IMG_ARGS)  >> $(CSG_POST_SIGN_SCRIPT)
else	
	$(ECHO) $(PERL) $(RELEASE_SCRIPT) $(RELEASE_IMG_ARGS)  >> $(SIGN_SCRIPT)
endif	

###############################################################################
# Check the global initialized data in nm file and fail the build if the data
# is not present in the exception list in perl script.
###############################################################################

CHECK_GLOBAL_DATA_PL = $(LWUPROC)/utilities/check_global_data.pl
EXCEPTION_LIST_PATH = $(ACR_SW)/utilities

GLOBAL_DATA_SCRIPT_ARGS += --nm-file $(IMG_NM)
GLOBAL_DATA_SCRIPT_ARGS += --nm-exception $(EXCEPTION_LIST_PATH)

check: $(IMG_ELF)
	$(PERL) $(CHECK_GLOBAL_DATA_PL) $(GLOBAL_DATA_SCRIPT_ARGS)

###############################################################################
# Run Ifdef checked script and fail the build in case wrong ifdef is used.
###############################################################################

IFDEF_CHECKER_SCRIPT       = $(LWUPROC)/utilities/ifdef_checker.pl
IFDEF_CHECKER_SCRIPT_ARGS += --dir 'acr'
IFDEF_CHECKER_SCRIPT_ARGS += --LWUPROC '$(LWUPROC)'
check_ifdef: $(IMG_ELF)
	$(PERL) $(IFDEF_CHECKER_SCRIPT) $(IFDEF_CHECKER_SCRIPT_ARGS)

###############################################################################
# Rule to produce the ELF image. Building all object-files is the prerequisite
# for this rule.
###############################################################################
$(IMG_ELF): $(OBJECTS) $(ACRSW)/build/$(LDSCRIPT)
	$(ECHO) $(BUILD_PROJECT_NAME) generating $(notdir $@)
	$(CC) $(CFLAGS) $(ADD_OBJECTS) $(OBJECTS) -o $(IMG_ELF) $(LDFLAGS)
	$(ECHO) "AppVersion: $(APP_P4_CL)" > $(IMG_OBJDUMP)
	$(ECHO) "AppVersion: $(APP_P4_CL)" > $(IMG_OBJDUMP).source
	$(ECHO) "AppVersion: $(APP_P4_CL)" > $(IMG_NM)
	$(ECHO) "AppVersion: $(APP_P4_CL)" > $(IMG_READELF)
	$(OBJDUMP) -d    $(IMG_ELF) >> $(IMG_OBJDUMP)
	$(OBJDUMP) -S -d $(IMG_ELF) >> $(IMG_OBJDUMP).source
	$(DUMPEXEC) -img $(IMG_ELF) -b $(IMG_ELF)
	$(NM)      -S -n $(IMG_ELF) >> $(IMG_NM)
	$(ECHO) $(NM)      $(IMG_ELF)       > $(IMG_MAP)
	$(NM)      $(IMG_ELF)       >> $(IMG_MAP)
	$(ECHO) $(BUILD_PROJECT_NAME) generating $(notdir $(IMG_READELF))
	$(READELF) --all $(IMG_ELF) >> $(IMG_READELF)
	$(READELF) -S $(IMG_ELF) >> $(IMG_SECTIONS)
	$(ECHO) $(BUILD_PROJECT_NAME) generating $(notdir $(IMG_DBGLINE))
	$(READELF) --debug-dump=decodedline $(IMG_ELF) >> $(IMG_DBGLINE)
	$(ECHO) $(BUILD_PROJECT_NAME) The ELF name is $(IMG_ELF)

###############################################################################
# Rule for generating .dt/symdump file
###############################################################################

SYMDUMP_SCRIPT = $(LW_SOURCE)/pmu_sw/build/symdump/symdump.pl

SYMDUMP_ARGS  += $(IMG_ELF) $(IMG_DT)
SYMDUMP_ARGS  += --falcon-tools $(FALCON_TOOLS)
SYMDUMP_ARGS  += --acl          $(APP_P4_CL)

$(IMG_DT):
	-$(PERL) $(SYMDUMP_SCRIPT) $(SYMDUMP_ARGS)

ifeq ("$(INCLUDE_DT)","true")
  all: $(IMG_DT)
endif

###############################################################################
# Common/Shared Rules
###############################################################################

include $(LW_SOURCE)/drivers/common/build/lwCommonRules.lwmk

#
# The common rule for cleaning (provided by lwCommonRules.lwmk) only supports
# flat output-directory structures and also expect object-files to be suffixed
# with .obj instead of .o. Until the rule is improved, be safe and mimic the
# behavior of clobber by simply deleting the output-directory. For falcon
# builds, there is actually very little different between 'clean' and 'clobber'
# anyway.
#
clean_ucode:
	-$(RMDIR) -rf $(OUTPUTDIR)

.PHONY: clean_ucode
clean: clean_ucode
