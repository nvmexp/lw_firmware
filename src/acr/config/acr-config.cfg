####################################################################
#
# Config file for ACR profiles
#
####################################################################

no warnings qw(bareword);
no strict qw(subs);

# Profile definitions.
# Each profile is made up of one or more categories which are exelwted
# in the order the category *definition* appears below.

#
# Define profiles for each supported chip-family.  Each profile specifies the
# features that are supported in that family which in turn dictacts the source
# files which must be built and included in the image.
#
DEFINE_PROFILE "acr_sec2-tu10x_ahesasc" , qw(default acr_sec2-tu10x_ahesasc  wrap);
DEFINE_PROFILE "acr_gsp-tu10x_asb" , qw(default acr_gsp-tu10x_asb  wrap);

DEFINE_PROFILE "acr_sec2-tu10x_fmodel_ahesasc" , qw(default acr_sec2-tu10x_fmodel_ahesasc  wrap);
DEFINE_PROFILE "acr_gsp-tu10x_fmodel_asb" , qw(default acr_gsp-tu10x_fmodel_asb  wrap);

DEFINE_PROFILE "acr_pmu-tu10x_unload" , qw(default acr_pmu-tu10x_unload  wrap);

DEFINE_PROFILE "acr_sec2-tu10x_bsi_lockdown" , qw(default acr_sec2-tu10x_bsi_lockdown  wrap);

DEFINE_PROFILE "acr_sec2-tu116_ahesasc" , qw(default acr_sec2-tu116_ahesasc  wrap);
DEFINE_PROFILE "acr_gsp-tu116_asb" , qw(default acr_gsp-tu116_asb  wrap);
DEFINE_PROFILE "acr_pmu-tu116_unload" , qw(default acr_pmu-tu116_unload  wrap);
DEFINE_PROFILE "acr_sec2-tu116_bsi_lockdown" , qw(default acr_sec2-tu116_bsi_lockdown  wrap);

DEFINE_PROFILE "acr_sec2-tu116_fmodel_ahesasc" , qw(default acr_sec2-tu116_fmodel_ahesasc  wrap);
DEFINE_PROFILE "acr_gsp-tu116_fmodel_asb" , qw(default acr_gsp-tu116_fmodel_asb  wrap);

DEFINE_PROFILE "acr_sec2-tu10a_ahesasc_pkc" , qw(default acr_sec2-tu10a_ahesasc_pkc wrap);
DEFINE_PROFILE "acr_gsp-tu10a_asb_pkc" , qw(default acr_gsp-tu10a_asb_pkc wrap);
DEFINE_PROFILE "acr_pmu-tu10a_unload_pkc" , qw(default acr_pmu-tu10a_unload_pkc wrap);

DEFINE_PROFILE "acr_sec2-ga100_ahesasc" , qw(default acr_sec2-ga100_ahesasc  wrap);
DEFINE_PROFILE "acr_sec2-ga100_ahesasc_apm" , qw(default acr_sec2-ga100_ahesasc_apm  wrap);
DEFINE_PROFILE "acr_sec2-ga100_ahesasc_gsp_rm" , qw(default acr_sec2-ga100_ahesasc_gsp_rm  wrap);
DEFINE_PROFILE "acr_gsp-ga100_asb" , qw(default acr_gsp-ga100_asb  wrap);

DEFINE_PROFILE "acr_sec2-ga100_fmodel_load" , qw(default acr_sec2-ga100_fmodel_load  wrap);
DEFINE_PROFILE "acr_sec2-ga100_fmodel_ahesasc" , qw(default acr_sec2-ga100_fmodel_ahesasc  wrap);
DEFINE_PROFILE "acr_gsp-ga100_fmodel_asb" , qw(default acr_gsp-ga100_fmodel_asb  wrap);

DEFINE_PROFILE "acr_pmu-ga100_unload" , qw(default acr_pmu-ga100_unload  wrap);
DEFINE_PROFILE "acr_sec2-ga100_unload" , qw(default acr_sec2-ga100_unload  wrap);
DEFINE_PROFILE "acr_sec2-ga100_unload_gsp_rm" , qw(default acr_sec2-ga100_unload_gsp_rm  wrap);

DEFINE_PROFILE "acr_sec2-tu10x_ahesasc_enhanced_aes" , qw(default acr_sec2-tu10x_ahesasc_enhanced_aes wrap);
DEFINE_PROFILE "acr_gsp-tu10x_asb_enhanced_aes" , qw(default acr_gsp-tu10x_asb_enhanced_aes wrap);
DEFINE_PROFILE "acr_pmu-tu10x_unload_enhanced_aes", qw(default acr_pmu-tu10x_unload_enhanced_aes wrap);

DEFINE_PROFILE "acr_sec2-ga10x_ahesasc", qw(default acr_sec2-ga10x_ahesasc wrap);
DEFINE_PROFILE "acr_gsp-ga10x_asb", qw(default acr_gsp-ga10x_asb wrap);
DEFINE_PROFILE "acr_sec2-ga10x_bsi_lockdown", qw(default acr_sec2-ga10x_bsi_lockdown wrap);
DEFINE_PROFILE "acr_pmu-ga10x_unload", qw(default acr_pmu-ga10x_unload wrap);
DEFINE_PROFILE "acr_sec2-ga10x_unload" , qw(default acr_sec2-ga10x_unload  wrap);

DEFINE_PROFILE "acr_sec2-ga10x_ahesasc_new_wpr_blobs", qw(default acr_sec2-ga10x_ahesasc_new_wpr_blobs wrap);
DEFINE_PROFILE "acr_gsp-ga10x_asb_new_wpr_blobs", qw(default acr_gsp-ga10x_asb_new_wpr_blobs wrap);
DEFINE_PROFILE "acr_sec2-ga10x_bsi_lockdown_new_wpr_blobs", qw(default acr_sec2-ga10x_bsi_lockdown_new_wpr_blobs wrap);
DEFINE_PROFILE "acr_sec2-ga10x_unload_new_wpr_blobs" , qw(default acr_sec2-ga10x_unload_new_wpr_blobs  wrap);
DEFINE_PROFILE "acr_sec2-ga10x_fmodel_ahesasc_new_wpr_blobs", qw(default acr_sec2-ga10x_fmodel_ahesasc_new_wpr_blobs wrap);
DEFINE_PROFILE "acr_gsp-ga10x_fmodel_asb_new_wpr_blobs", qw(default acr_gsp-ga10x_fmodel_asb_new_wpr_blobs wrap);

DEFINE_PROFILE "acr_sec2-ga10x_fmodel_ahesasc", qw(default acr_sec2-ga10x_fmodel_ahesasc wrap);
DEFINE_PROFILE "acr_gsp-ga10x_fmodel_asb", qw(default acr_gsp-ga10x_fmodel_asb wrap);

DEFINE_PROFILE "acr_sec2-ga10x_ahesasc_boot_from_hs", qw(default acr_sec2-ga10x_ahesasc_boot_from_hs wrap);
DEFINE_PROFILE "acr_sec2-ga10x_ahesasc_apm", qw(default acr_sec2-ga10x_ahesasc_apm wrap);
DEFINE_PROFILE "acr_sec2-ga10x_ahesasc_boot_from_hs_gsp_rm", qw(default acr_sec2-ga10x_ahesasc_boot_from_hs_gsp_rm wrap);
DEFINE_PROFILE "acr_gsp-ga10x_asb_boot_from_hs", qw(default acr_gsp-ga10x_asb_boot_from_hs wrap);
DEFINE_PROFILE "acr_sec2-ga10x_unload_boot_from_hs" , qw(default acr_sec2-ga10x_unload_boot_from_hs wrap);
DEFINE_PROFILE "acr_sec2-ga10x_unload_boot_from_hs_gsp_rm" , qw(default acr_sec2-ga10x_unload_boot_from_hs_gsp_rm wrap);

DEFINE_PROFILE "acr_sec2-ad10x_ahesasc_boot_from_hs", qw(default acr_sec2-ad10x_ahesasc_boot_from_hs wrap);
DEFINE_PROFILE "acr_gsp-ad10x_asb_boot_from_hs", qw(default acr_gsp-ad10x_asb_boot_from_hs wrap);
DEFINE_PROFILE "acr_sec2-ad10x_unload_boot_from_hs" , qw(default acr_sec2-ad10x_unload_boot_from_hs wrap);
DEFINE_PROFILE "acr_sec2-ad10x_unload_new_wpr_blobs" , qw(default acr_sec2-ad10x_unload_new_wpr_blobs  wrap);
DEFINE_PROFILE "acr_sec2-ad10x_fmodel_ahesasc_new_wpr_blobs", qw(default acr_sec2-ad10x_fmodel_ahesasc_new_wpr_blobs wrap);
DEFINE_PROFILE "acr_gsp-ad10x_fmodel_asb_new_wpr_blobs", qw(default acr_gsp-ad10x_fmodel_asb_new_wpr_blobs wrap);

DEFINE_PROFILE "acr_sec2-gh100_ahesasc", qw(default acr_sec2-gh100_ahesasc wrap);
DEFINE_PROFILE "acr_gsp-gh100_asb", qw(default acr_gsp-gh100_asb wrap);
DEFINE_PROFILE "acr_sec2-gh100_unload", qw(default acr_sec2-gh100_unload wrap);

DEFINE_PROFILE "acr_sec2-gh100_fmodel_ahesasc", qw(default acr_sec2-gh100_fmodel_ahesasc wrap);
DEFINE_PROFILE "acr_gsp-gh100_fmodel_asb", qw(default acr_gsp-gh100_fmodel_asb wrap);

DEFINE_PROFILE "acr_sec2-gh20x_ahesasc", qw(default acr_sec2-gh20x_ahesasc wrap);
DEFINE_PROFILE "acr_gsp-gh20x_asb", qw(default acr_gsp-gh20x_asb wrap);
DEFINE_PROFILE "acr_sec2-gh20x_unload", qw(default acr_sec2-gh20x_unload wrap);
DEFINE_PROFILE "acr_sec2-gh20x_fmodel_ahesasc", qw(default acr_sec2-gh20x_fmodel_ahesasc wrap);
DEFINE_PROFILE "acr_gsp-gh20x_fmodel_asb", qw(default acr_gsp-gh20x_fmodel_asb wrap);

DEFINE_PROFILE "acr_sec2-g000_ahesasc", qw(default acr_sec2-g000_ahesasc wrap);
DEFINE_PROFILE "acr_gsp-g000_asb", qw(default acr_gsp-g000_asb wrap);
DEFINE_PROFILE "acr_sec2-g000_unload", qw(default acr_sec2-g000_unload wrap);
DEFINE_PROFILE "acr_sec2-g000_fmodel_ahesasc", qw(default acr_sec2-g000_fmodel_ahesasc wrap);
DEFINE_PROFILE "acr_gsp-g000_fmodel_asb", qw(default acr_gsp-g000_fmodel_asb wrap);

#Default profile if not specified on command line with --profile.
DEFAULT_PROFILE "acr_sec2-tu10x_ahesasc";

# XXX - not used
CATEGORY "minimal";
{
    # omit features, classes, engines, apis that require unavailable gpu's
    MINIMAL_MODE      ON;
}

CATEGORY "default";
{
    # All default enabled features, engines, classes, apis
    ENABLE_FEATURES   ALL_DEFAULT_ENABLED;
    ENABLE_ENGINES    ALL_DEFAULT_ENABLED;
    ENABLE_CLASSES    ALL_DEFAULT_ENABLED;
    ENABLE_APIS       ALL_DEFAULT_ENABLED;

    # set platform, arch.   for now just always use these.
    ENABLE_FEATURES   PLATFORM_ACR;
    ENABLE_FEATURES   ARCH_FALCON;

    # Disable all GPUS preparatory to having a specific set enabled
    DISABLE_CHIPS       ( ALL );
}

CATEGORY "acr_sec2-tu10x_bsi_lockdown";
{
    # If elwvar ACRCFG_GPUS is set, then use that, else default
    if ($ELW{ACRCFG_GPUS}) {
        ENABLE_CHIPS    $ELW{ACRCFG_GPUS};
    } else {
        ENABLE_CHIPS    (TU102);
    }
    ENABLE_FEATURES(
        ACR_BSI_LOCK,
    );
    DISABLE_FEATURES(
    );
}

CATEGORY "acr_sec2-tu116_bsi_lockdown";
{
    # If elwvar ACRCFG_GPUS is set, then use that, else default
    if ($ELW{ACRCFG_GPUS}) {
        ENABLE_CHIPS    $ELW{ACRCFG_GPUS};
    } else {
        ENABLE_CHIPS    (TU116);
    }
    ENABLE_FEATURES(
        ACR_BSI_LOCK,
        ACRCORE_TU116,
    );
    DISABLE_FEATURES(
    );
}

CATEGORY "acr_sec2-ga10x_bsi_lockdown";
{
    # If elwvar ACRCFG_GPUS is set, then use that, else default
    if ($ELW{ACRCFG_GPUS}) {
        ENABLE_CHIPS    $ELW{ACRCFG_GPUS};
    } else {
        ENABLE_CHIPS    (GA102);
    }
    ENABLE_FEATURES(
        ACR_BSI_LOCK,
    );
    DISABLE_FEATURES(
    );
}

CATEGORY "acr_sec2-tu10x_ahesasc";
{
    # If elwvar ACRCFG_GPUS is set, then use that, else default
    if ($ELW{ACRCFG_GPUS}) {
        ENABLE_CHIPS    $ELW{ACRCFG_GPUS};
    } else {
        ENABLE_CHIPS    (TU102);
    }
    ENABLE_FEATURES(
        ACR_AHESASC,
        ACRCORE_TU10X,
    );
    DISABLE_FEATURES(
    );
}

CATEGORY "acr_sec2-tu10x_ahesasc_enhanced_aes";
{
    # If elwvar ACRCFG_GPUS is set, then use that, else default
    if ($ELW{ACRCFG_GPUS}) {
        ENABLE_CHIPS    $ELW{ACRCFG_GPUS};
    } else {
        ENABLE_CHIPS    (TU102);
    }
    ENABLE_FEATURES(
        ACR_AHESASC,
        ACRCORE_TU10X,
    );
    DISABLE_FEATURES(
    );
}

CATEGORY "acr_gsp-tu10x_asb";
{
    # If elwvar ACRCFG_GPUS is set, then use that, else default
    if ($ELW{ACRCFG_GPUS}) {
        ENABLE_CHIPS    $ELW{ACRCFG_GPUS};
    } else {
        ENABLE_CHIPS    (TU102);
    }
    ENABLE_FEATURES(
        ACR_ASB,
        ACRCORE_TU10X,
    );
    DISABLE_FEATURES(
    );
}

CATEGORY "acr_gsp-tu10x_asb_enhanced_aes";
{
    # If elwvar ACRCFG_GPUS is set, then use that, else default
    if ($ELW{ACRCFG_GPUS}) {
        ENABLE_CHIPS    $ELW{ACRCFG_GPUS};
    } else {
        ENABLE_CHIPS    (TU102);
    }
    ENABLE_FEATURES(
        ACR_ASB,
        ACRCORE_TU10X,
    );
    DISABLE_FEATURES(
    );
}

CATEGORY "acr_sec2-tu10x_fmodel_ahesasc";
{
    # If elwvar ACRCFG_GPUS is set, then use that, else default
    if ($ELW{ACRCFG_GPUS}) {
        ENABLE_CHIPS    $ELW{ACRCFG_GPUS};
    } else {
        ENABLE_CHIPS    (TU102);
    }
    ENABLE_FEATURES(
        ACR_AHESASC,
    );
    DISABLE_FEATURES(
    );
}

CATEGORY "acr_gsp-tu10x_fmodel_asb";
{
    # If elwvar ACRCFG_GPUS is set, then use that, else default
    if ($ELW{ACRCFG_GPUS}) {
        ENABLE_CHIPS    $ELW{ACRCFG_GPUS};
    } else {
        ENABLE_CHIPS    (TU102);
    }
    ENABLE_FEATURES(
        ACR_ASB,
    );
    DISABLE_FEATURES(
    );
}

CATEGORY "acr_sec2-tu116_ahesasc";
{
    # If elwvar ACRCFG_GPUS is set, then use that, else default
    if ($ELW{ACRCFG_GPUS}) {
        ENABLE_CHIPS    $ELW{ACRCFG_GPUS};
    } else {
        ENABLE_CHIPS    (TU116);
    }
    ENABLE_FEATURES(
        ACR_AHESASC,
        ACRCORE_TU116,
    );
    DISABLE_FEATURES(
    );
}

CATEGORY "acr_gsp-tu116_asb";
{
    # If elwvar ACRCFG_GPUS is set, then use that, else default
    if ($ELW{ACRCFG_GPUS}) {
        ENABLE_CHIPS    $ELW{ACRCFG_GPUS};
    } else {
        ENABLE_CHIPS    (TU116);
    }
    ENABLE_FEATURES(
        ACR_ASB,
        ACRCORE_TU116,
    );
    DISABLE_FEATURES(
    );
}

CATEGORY "acr_sec2-tu116_fmodel_ahesasc";
{
    # If elwvar ACRCFG_GPUS is set, then use that, else default
    if ($ELW{ACRCFG_GPUS}) {
        ENABLE_CHIPS    $ELW{ACRCFG_GPUS};
    } else {
        ENABLE_CHIPS    (TU116);
    }
    ENABLE_FEATURES(
        ACR_AHESASC,
        ACRCORE_TU116,
    );
    DISABLE_FEATURES(
    );
}

CATEGORY "acr_gsp-tu116_fmodel_asb";
{
    # If elwvar ACRCFG_GPUS is set, then use that, else default
    if ($ELW{ACRCFG_GPUS}) {
        ENABLE_CHIPS    $ELW{ACRCFG_GPUS};
    } else {
        ENABLE_CHIPS    (TU116);
    }
    ENABLE_FEATURES(
        ACR_ASB,
        ACRCORE_TU116,
    );
    DISABLE_FEATURES(
    );
}

CATEGORY "acr_sec2-tu10a_ahesasc_pkc";
{
    # If elwvar ACRCFG_GPUS is set, then use that, else default
    if ($ELW{ACRCFG_GPUS}) {
        ENABLE_CHIPS    $ELW{ACRCFG_GPUS};
    } else {
        ENABLE_CHIPS    (TU104);
    }
    ENABLE_FEATURES(
        ACR_AHESASC,
    );
    DISABLE_FEATURES(
    );
}

CATEGORY "acr_gsp-tu10a_asb_pkc";
{
    # If elwvar ACRCFG_GPUS is set, then use that, else default
    if ($ELW{ACRCFG_GPUS}) {
        ENABLE_CHIPS    $ELW{ACRCFG_GPUS};
    } else {
        ENABLE_CHIPS    (TU104);
    }
    ENABLE_FEATURES(
        ACR_ASB,
    );
    DISABLE_FEATURES(
    );
}

CATEGORY "acr_pmu-tu10a_unload_pkc";
{
    # If elwvar ACRCFG_GPUS is set, then use that, else default
    if ($ELW{ACRCFG_GPUS}) {
        ENABLE_CHIPS    $ELW{ACRCFG_GPUS};
    } else {
        ENABLE_CHIPS    (TU104);
    }
    ENABLE_FEATURES(
        ACR_UNLOAD,
    );
    DISABLE_FEATURES(
    );
}

CATEGORY "acr_sec2-ga100_ahesasc";
{
    # If elwvar ACRCFG_GPUS is set, then use that, else default
    if ($ELW{ACRCFG_GPUS}) {
        ENABLE_CHIPS    $ELW{ACRCFG_GPUS};
    } else {
        ENABLE_CHIPS    (GA100);
    }
    ENABLE_FEATURES(
        ACR_AHESASC,
    );
    DISABLE_FEATURES(
    );
}

CATEGORY "acr_sec2-ga100_ahesasc_apm";
{
    # If elwvar ACRCFG_GPUS is set, then use that, else default
    if ($ELW{ACRCFG_GPUS}) {
        ENABLE_CHIPS    $ELW{ACRCFG_GPUS};
    } else {
        ENABLE_CHIPS    (GA100);
    }
    ENABLE_FEATURES(
        ACR_AHESASC,
        ACR_APM,
    );
    DISABLE_FEATURES(
    );

    ENABLE_ENGINES(
        SHA,
    );
}

CATEGORY "acr_sec2-ga100_ahesasc_gsp_rm";
{
    # If elwvar ACRCFG_GPUS is set, then use that, else default
    if ($ELW{ACRCFG_GPUS}) {
        ENABLE_CHIPS    $ELW{ACRCFG_GPUS};
    } else {
        ENABLE_CHIPS    (GA100);
    }
    ENABLE_FEATURES(
        ACR_AHESASC,
    );
    DISABLE_FEATURES(
    );
}

CATEGORY "acr_gsp-ga100_asb";
{
    # If elwvar ACRCFG_GPUS is set, then use that, else default
    if ($ELW{ACRCFG_GPUS}) {
        ENABLE_CHIPS    $ELW{ACRCFG_GPUS};
    } else {
        ENABLE_CHIPS    (GA100);
    }
    ENABLE_FEATURES(
        ACR_ASB,
    );
    DISABLE_FEATURES(
    );
}

CATEGORY "acr_sec2-ga100_fmodel_ahesasc";
{
    # If elwvar ACRCFG_GPUS is set, then use that, else default
    if ($ELW{ACRCFG_GPUS}) {
        ENABLE_CHIPS    $ELW{ACRCFG_GPUS};
    } else {
        ENABLE_CHIPS    (GA100);
    }
    ENABLE_FEATURES(
        ACR_AHESASC,
    );
    DISABLE_FEATURES(
    );
}

CATEGORY "acr_gsp-ga100_fmodel_asb";
{
    # If elwvar ACRCFG_GPUS is set, then use that, else default
    if ($ELW{ACRCFG_GPUS}) {
        ENABLE_CHIPS    $ELW{ACRCFG_GPUS};
    } else {
        ENABLE_CHIPS    (GA100);
    }
    ENABLE_FEATURES(
        ACR_ASB,
    );
    DISABLE_FEATURES(
    );
}

CATEGORY "acr_sec2-ga10x_ahesasc";
{
    # If elwvar ACRCFG_GPUS is set, then use that, else default
    if ($ELW{ACRCFG_GPUS}) {
        ENABLE_CHIPS    $ELW{ACRCFG_GPUS};
    } else {
        ENABLE_CHIPS    (GA102);
    }
    ENABLE_FEATURES(
        ACR_AHESASC,
    );
    DISABLE_FEATURES(
    );
}

CATEGORY "acr_gsp-ga10x_asb";
{
    # If elwvar ACRCFG_GPUS is set, then use that, else default
    if ($ELW{ACRCFG_GPUS}) {
        ENABLE_CHIPS    $ELW{ACRCFG_GPUS};
    } else {
        ENABLE_CHIPS    (GA102);
    }
    ENABLE_FEATURES(
        ACR_ASB,
    );
    DISABLE_FEATURES(
    );
}

CATEGORY "acr_sec2-ga10x_fmodel_ahesasc";
{
    # If elwvar ACRCFG_GPUS is set, then use that, else default
    if ($ELW{ACRCFG_GPUS}) {
        ENABLE_CHIPS    $ELW{ACRCFG_GPUS};
    } else {
        ENABLE_CHIPS    (GA102);
    }
    ENABLE_FEATURES(
        ACR_AHESASC,
    );
    DISABLE_FEATURES(
    );
}

CATEGORY "acr_gsp-ga10x_fmodel_asb";
{
    # If elwvar ACRCFG_GPUS is set, then use that, else default
    if ($ELW{ACRCFG_GPUS}) {
        ENABLE_CHIPS    $ELW{ACRCFG_GPUS};
    } else {
        ENABLE_CHIPS    (GA102);
    }
    ENABLE_FEATURES(
        ACR_ASB,
    );
    DISABLE_FEATURES(
    );
}

CATEGORY "acr_sec2-ga10x_ahesasc_new_wpr_blobs";
{
    # If elwvar ACRCFG_GPUS is set, then use that, else default
    if ($ELW{ACRCFG_GPUS}) {
        ENABLE_CHIPS    $ELW{ACRCFG_GPUS};
    } else {
        ENABLE_CHIPS    (GA102);
    }
    ENABLE_FEATURES(
        ACR_AHESASC,
        NEW_WPR_BLOBS,
    );
    DISABLE_FEATURES(
    );

    ENABLE_ENGINES(
        SE,
        SHA,
    );
}

CATEGORY "acr_sec2-ga10x_ahesasc_boot_from_hs";
{
    # If elwvar ACRCFG_GPUS is set, then use that, else default
    if ($ELW{ACRCFG_GPUS}) {
        ENABLE_CHIPS    $ELW{ACRCFG_GPUS};
    } else {
        ENABLE_CHIPS    (GA102);
    }
    ENABLE_FEATURES(
        ACR_AHESASC,
        NEW_WPR_BLOBS,
        ACR_BOOT_FROM_HS,
    );
    DISABLE_FEATURES(
    );

    ENABLE_ENGINES(
        SE,
        SHA,
    );
}

CATEGORY "acr_sec2-ga10x_ahesasc_apm";
{
    # If elwvar ACRCFG_GPUS is set, then use that, else default
    if ($ELW{ACRCFG_GPUS}) {
        ENABLE_CHIPS    $ELW{ACRCFG_GPUS};
    } else {
        ENABLE_CHIPS    (GA102);
    }
    ENABLE_FEATURES(
        ACR_AHESASC,
        NEW_WPR_BLOBS,
        ACR_BOOT_FROM_HS,
        ACR_APM,
    );
    DISABLE_FEATURES(
    );

    ENABLE_ENGINES(
        SE,
        SHA,
    );
}

CATEGORY "acr_sec2-ga10x_ahesasc_boot_from_hs_gsp_rm";
{
    # If elwvar ACRCFG_GPUS is set, then use that, else default
    if ($ELW{ACRCFG_GPUS}) {
        ENABLE_CHIPS    $ELW{ACRCFG_GPUS};
    } else {
        ENABLE_CHIPS    (GA102);
    }
    ENABLE_FEATURES(
        ACR_AHESASC,
        NEW_WPR_BLOBS,
        ACR_BOOT_FROM_HS,
    );
    DISABLE_FEATURES(
    );

    ENABLE_ENGINES(
        SE,
        SHA,
    );
}

CATEGORY "acr_gsp-ga10x_asb_new_wpr_blobs";
{
    # If elwvar ACRCFG_GPUS is set, then use that, else default
    if ($ELW{ACRCFG_GPUS}) {
        ENABLE_CHIPS    $ELW{ACRCFG_GPUS};
    } else {
        ENABLE_CHIPS    (GA102);
    }
    ENABLE_FEATURES(
        ACR_ASB,
        NEW_WPR_BLOBS,
    );
    DISABLE_FEATURES(
    );
}

CATEGORY "acr_gsp-ga10x_asb_boot_from_hs";
{
    # If elwvar ACRCFG_GPUS is set, then use that, else default
    if ($ELW{ACRCFG_GPUS}) {
        ENABLE_CHIPS    $ELW{ACRCFG_GPUS};
    } else {
        ENABLE_CHIPS    (GA102);
    }
    ENABLE_FEATURES(
        ACR_ASB,
        NEW_WPR_BLOBS,
        ACR_BOOT_FROM_HS,
    );
    DISABLE_FEATURES(
    );
}

CATEGORY "acr_sec2-ga10x_bsi_lockdown_new_wpr_blobs";
{
    # If elwvar ACRCFG_GPUS is set, then use that, else default
    if ($ELW{ACRCFG_GPUS}) {
        ENABLE_CHIPS    $ELW{ACRCFG_GPUS};
    } else {
        ENABLE_CHIPS    (GA102);
    }
    ENABLE_FEATURES(
        ACR_BSI_LOCK,
        NEW_WPR_BLOBS,
    );
    DISABLE_FEATURES(
    );
}

CATEGORY "acr_sec2-ga10x_unload_new_wpr_blobs";
{
    # If elwvar ACRCFG_GPUS is set, then use that, else default
    if ($ELW{ACRCFG_GPUS}) {
        ENABLE_CHIPS    $ELW{ACRCFG_GPUS};
    } else {
        ENABLE_CHIPS    (GA102);
    }
    ENABLE_FEATURES(
        ACR_UNLOAD,
        NEW_WPR_BLOBS,
    );
    DISABLE_FEATURES(
    );
}

CATEGORY "acr_sec2-ga10x_unload_boot_from_hs";
{
    # If elwvar ACRCFG_GPUS is set, then use that, else default
    if ($ELW{ACRCFG_GPUS}) {
        ENABLE_CHIPS    $ELW{ACRCFG_GPUS};
    } else {
        ENABLE_CHIPS    (GA102);
    }
    ENABLE_FEATURES(
        ACR_UNLOAD,
        NEW_WPR_BLOBS,
        ACR_BOOT_FROM_HS,
    );
    DISABLE_FEATURES(
    );
}

CATEGORY "acr_sec2-ga10x_unload_boot_from_hs_gsp_rm";
{
    # If elwvar ACRCFG_GPUS is set, then use that, else default
    if ($ELW{ACRCFG_GPUS}) {
        ENABLE_CHIPS    $ELW{ACRCFG_GPUS};
    } else {
        ENABLE_CHIPS    (GA102);
    }
    ENABLE_FEATURES(
        ACR_UNLOAD,
        NEW_WPR_BLOBS,
        ACR_BOOT_FROM_HS,
    );
    DISABLE_FEATURES(
    );
}

CATEGORY "acr_sec2-ga10x_fmodel_ahesasc_new_wpr_blobs";
{
    # If elwvar ACRCFG_GPUS is set, then use that, else default
    if ($ELW{ACRCFG_GPUS}) {
        ENABLE_CHIPS    $ELW{ACRCFG_GPUS};
    } else {
        ENABLE_CHIPS    (GA102);
    }
    ENABLE_FEATURES(
        ACR_AHESASC,
        NEW_WPR_BLOBS,
    );
    DISABLE_FEATURES(
    );
}

CATEGORY "acr_gsp-ga10x_fmodel_asb_new_wpr_blobs";
{
    # If elwvar ACRCFG_GPUS is set, then use that, else default
    if ($ELW{ACRCFG_GPUS}) {
        ENABLE_CHIPS    $ELW{ACRCFG_GPUS};
    } else {
        ENABLE_CHIPS    (GA102);
    }
    ENABLE_FEATURES(
        ACR_ASB,
        NEW_WPR_BLOBS,
    );
    DISABLE_FEATURES(
    );
}

CATEGORY "acr_sec2-ad10x_ahesasc_boot_from_hs";
{
    # If elwvar ACRCFG_GPUS is set, then use that, else default
    if ($ELW{ACRCFG_GPUS}) {
        ENABLE_CHIPS    $ELW{ACRCFG_GPUS};
    } else {
        ENABLE_CHIPS    (AD102);
    }
    ENABLE_FEATURES(
        ACR_AHESASC,
        NEW_WPR_BLOBS,
        ACR_BOOT_FROM_HS,
    );
    DISABLE_FEATURES(
    );

    ENABLE_ENGINES(
        SE,
        SHA,
    );
}

CATEGORY "acr_gsp-ad10x_asb_boot_from_hs";
{
    # If elwvar ACRCFG_GPUS is set, then use that, else default
    if ($ELW{ACRCFG_GPUS}) {
        ENABLE_CHIPS    $ELW{ACRCFG_GPUS};
    } else {
        ENABLE_CHIPS    (AD102);
    }
    ENABLE_FEATURES(
        ACR_ASB,
        NEW_WPR_BLOBS,
        ACR_BOOT_FROM_HS,
    );
    DISABLE_FEATURES(
    );
}

CATEGORY "acr_sec2-ad10x_unload_boot_from_hs";
{
    # If elwvar ACRCFG_GPUS is set, then use that, else default
    if ($ELW{ACRCFG_GPUS}) {
        ENABLE_CHIPS    $ELW{ACRCFG_GPUS};
    } else {
        ENABLE_CHIPS    (AD102);
    }
    ENABLE_FEATURES(
        ACR_UNLOAD,
        NEW_WPR_BLOBS,
        ACR_BOOT_FROM_HS,
    );
    DISABLE_FEATURES(
    );
}

CATEGORY "acr_sec2-ad10x_unload_new_wpr_blobs";
{
    # If elwvar ACRCFG_GPUS is set, then use that, else default
    if ($ELW{ACRCFG_GPUS}) {
        ENABLE_CHIPS    $ELW{ACRCFG_GPUS};
    } else {
        ENABLE_CHIPS    (AD102);
    }
    ENABLE_FEATURES(
        ACR_UNLOAD,
        NEW_WPR_BLOBS,
    );
    DISABLE_FEATURES(
    );
}

CATEGORY "acr_sec2-ad10x_fmodel_ahesasc_new_wpr_blobs";
{
    # If elwvar ACRCFG_GPUS is set, then use that, else default
    if ($ELW{ACRCFG_GPUS}) {
        ENABLE_CHIPS    $ELW{ACRCFG_GPUS};
    } else {
        ENABLE_CHIPS    (AD102);
    }
    ENABLE_FEATURES(
        ACR_AHESASC,
        NEW_WPR_BLOBS,
    );
    DISABLE_FEATURES(
    );
}

CATEGORY "acr_gsp-ad10x_fmodel_asb_new_wpr_blobs";
{
    # If elwvar ACRCFG_GPUS is set, then use that, else default
    if ($ELW{ACRCFG_GPUS}) {
        ENABLE_CHIPS    $ELW{ACRCFG_GPUS};
    } else {
        ENABLE_CHIPS    (AD102);
    }
    ENABLE_FEATURES(
        ACR_ASB,
        NEW_WPR_BLOBS,
    );
    DISABLE_FEATURES(
    );
}

CATEGORY "acr_sec2-gh100_ahesasc";
{
    # If elwvar ACRCFG_GPUS is set, then use that, else default
    if ($ELW{ACRCFG_GPUS}) {
        ENABLE_CHIPS    $ELW{ACRCFG_GPUS};
    } else {
        ENABLE_CHIPS    (GH100);
    }
    ENABLE_FEATURES(
        ACR_AHESASC,
        NEW_WPR_BLOBS
    );
    DISABLE_FEATURES(
    );
    ENABLE_ENGINES(
      # For GH100 we disbale SE engine in 200637918; once LWPKA is online; we need to refactor SE access functions.
      # SE,
        SHA,
    );
}

CATEGORY "acr_gsp-gh100_asb";
{
    # If elwvar ACRCFG_GPUS is set, then use that, else default
    if ($ELW{ACRCFG_GPUS}) {
        ENABLE_CHIPS    $ELW{ACRCFG_GPUS};
    } else {
        ENABLE_CHIPS    (GH100);
    }
    ENABLE_FEATURES(
        ACR_ASB,
        NEW_WPR_BLOBS
    );
    DISABLE_FEATURES(
    );
}

CATEGORY "acr_sec2-gh100_unload";
{
    # If elwvar ACRCFG_GPUS is set, then use that, else default
    if ($ELW{ACRCFG_GPUS}) {
        ENABLE_CHIPS    $ELW{ACRCFG_GPUS};
    } else {
        ENABLE_CHIPS    (GH100);
    }
    ENABLE_FEATURES(
        ACR_UNLOAD,
        NEW_WPR_BLOBS,
    );
    DISABLE_FEATURES(
    );
}

CATEGORY "acr_sec2-gh100_fmodel_ahesasc";
{
    # If elwvar ACRCFG_GPUS is set, then use that, else default
    if ($ELW{ACRCFG_GPUS}) {
        ENABLE_CHIPS    $ELW{ACRCFG_GPUS};
    } else {
        ENABLE_CHIPS    (GH100);
    }
    ENABLE_FEATURES(
        ACR_AHESASC,
        NEW_WPR_BLOBS,
    );
    DISABLE_FEATURES(
    );
}

CATEGORY "acr_gsp-gh100_fmodel_asb";
{
    # If elwvar ACRCFG_GPUS is set, then use that, else default
    if ($ELW{ACRCFG_GPUS}) {
        ENABLE_CHIPS    $ELW{ACRCFG_GPUS};
    } else {
        ENABLE_CHIPS    (GH100);
    }
    ENABLE_FEATURES(
        ACR_ASB,
        NEW_WPR_BLOBS,
    );
    DISABLE_FEATURES(
    );
}

CATEGORY "acr_sec2-gh20x_ahesasc";
{
    # If elwvar ACRCFG_GPUS is set, then use that, else default
    if ($ELW{ACRCFG_GPUS}) {
        ENABLE_CHIPS    $ELW{ACRCFG_GPUS};
    } else {
        ENABLE_CHIPS    (GH202);
    }
    ENABLE_FEATURES(
        ACR_AHESASC,
    );
    DISABLE_FEATURES(
    );
}
CATEGORY "acr_gsp-gh20x_asb";
{
    # If elwvar ACRCFG_GPUS is set, then use that, else default
    if ($ELW{ACRCFG_GPUS}) {
        ENABLE_CHIPS    $ELW{ACRCFG_GPUS};
    } else {
        ENABLE_CHIPS    (GH202);
    }
    ENABLE_FEATURES(
        ACR_ASB,
    );
    DISABLE_FEATURES(
    );
}
CATEGORY "acr_sec2-gh20x_unload";
{
    # If elwvar ACRCFG_GPUS is set, then use that, else default
    if ($ELW{ACRCFG_GPUS}) {
        ENABLE_CHIPS    $ELW{ACRCFG_GPUS};
    } else {
        ENABLE_CHIPS    (GH202);
    }
    ENABLE_FEATURES(
        ACR_UNLOAD,
    );
    DISABLE_FEATURES(
    );
}
CATEGORY "acr_sec2-gh20x_fmodel_ahesasc";
{
    # If elwvar ACRCFG_GPUS is set, then use that, else default
    if ($ELW{ACRCFG_GPUS}) {
        ENABLE_CHIPS    $ELW{ACRCFG_GPUS};
    } else {
        ENABLE_CHIPS    (GH202);
    }
    ENABLE_FEATURES(
        ACR_AHESASC,
    );
    DISABLE_FEATURES(
    );
}
CATEGORY "acr_gsp-gh20x_fmodel_asb";
{
    # If elwvar ACRCFG_GPUS is set, then use that, else default
    if ($ELW{ACRCFG_GPUS}) {
        ENABLE_CHIPS    $ELW{ACRCFG_GPUS};
    } else {
        ENABLE_CHIPS    (GH202);
    }
    ENABLE_FEATURES(
        ACR_ASB,
    );
    DISABLE_FEATURES(
    );
}

CATEGORY "acr_sec2-g000_ahesasc";
{
    # If elwvar ACRCFG_GPUS is set, then use that, else default
    if ($ELW{ACRCFG_GPUS}) {
        ENABLE_CHIPS    $ELW{ACRCFG_GPUS};
    } else {
        ENABLE_CHIPS    (G000);
    }
    ENABLE_FEATURES(
        ACR_AHESASC,
        NEW_WPR_BLOBS,
    );
    DISABLE_FEATURES(
    );
    ENABLE_ENGINES(
      # For GH100 we disbale SE engine in 200637918; once LWPKA is online; we need to refactor SE access functions.
      # SE,
        SHA,
    );
}

CATEGORY "acr_gsp-g000_asb";
{
    # If elwvar ACRCFG_GPUS is set, then use that, else default
    if ($ELW{ACRCFG_GPUS}) {
        ENABLE_CHIPS    $ELW{ACRCFG_GPUS};
    } else {
        ENABLE_CHIPS    (G000);
    }
    ENABLE_FEATURES(
        ACR_ASB,
        NEW_WPR_BLOBS,
    );
    DISABLE_FEATURES(
    );
}

CATEGORY "acr_sec2-g000_unload";
{
    # If elwvar ACRCFG_GPUS is set, then use that, else default
    if ($ELW{ACRCFG_GPUS}) {
        ENABLE_CHIPS    $ELW{ACRCFG_GPUS};
    } else {
        ENABLE_CHIPS    (G000);
    }
    ENABLE_FEATURES(
        ACR_UNLOAD,
        NEW_WPR_BLOBS,
    );
    DISABLE_FEATURES(
    );
}

CATEGORY "acr_sec2-g000_fmodel_ahesasc";
{
    # If elwvar ACRCFG_GPUS is set, then use that, else default
    if ($ELW{ACRCFG_GPUS}) {
        ENABLE_CHIPS    $ELW{ACRCFG_GPUS};
    } else {
        ENABLE_CHIPS    (G000);
    }
    ENABLE_FEATURES(
        ACR_AHESASC,
        NEW_WPR_BLOBS,
    );
    DISABLE_FEATURES(
    );
}

CATEGORY "acr_gsp-g000_fmodel_asb";
{
    # If elwvar ACRCFG_GPUS is set, then use that, else default
    if ($ELW{ACRCFG_GPUS}) {
        ENABLE_CHIPS    $ELW{ACRCFG_GPUS};
    } else {
        ENABLE_CHIPS    (G000);
    }
    ENABLE_FEATURES(
        ACR_ASB,
        NEW_WPR_BLOBS,
    );
    DISABLE_FEATURES(
    );
}

CATEGORY "acr_pmu-tu10x_unload";
{
    # If elwvar ACRCFG_GPUS is set, then use that, else default
    if ($ELW{ACRCFG_GPUS}) {
        ENABLE_CHIPS    $ELW{ACRCFG_GPUS};
    } else {
        ENABLE_CHIPS    (TU102);
    }
    ENABLE_FEATURES(
        ACR_UNLOAD,
        ACRCORE_TU10X,
    );
    DISABLE_FEATURES(
    );
}

CATEGORY "acr_pmu-tu10x_unload_enhanced_aes";
{
    # If elwvar ACRCFG_GPUS is set, then use that, else default
    if ($ELW{ACRCFG_GPUS}) {
        ENABLE_CHIPS    $ELW{ACRCFG_GPUS};
    } else {
        ENABLE_CHIPS    (TU102);
    }
    ENABLE_FEATURES(
        ACR_UNLOAD,
        ACRCORE_TU10X,
    );
    DISABLE_FEATURES(
    );
}

CATEGORY "acr_pmu-tu116_unload";
{
    # If elwvar ACRCFG_GPUS is set, then use that, else default
    if ($ELW{ACRCFG_GPUS}) {
        ENABLE_CHIPS    $ELW{ACRCFG_GPUS};
    } else {
        ENABLE_CHIPS    (TU116);
    }
    ENABLE_FEATURES(
        ACR_UNLOAD,
        ACRCORE_TU116,
    );
    DISABLE_FEATURES(
    );
}

CATEGORY "acr_pmu-ga100_unload";
{
    # If elwvar ACRCFG_GPUS is set, then use that, else default
    if ($ELW{ACRCFG_GPUS}) {
        ENABLE_CHIPS    $ELW{ACRCFG_GPUS};
    } else {
        ENABLE_CHIPS    (GA100);
    }
    ENABLE_FEATURES(
        ACR_UNLOAD,
       );
    DISABLE_FEATURES(
    );
}

CATEGORY "acr_sec2-ga100_unload";
{
    # If elwvar ACRCFG_GPUS is set, then use that, else default
    if ($ELW{ACRCFG_GPUS}) {
        ENABLE_CHIPS    $ELW{ACRCFG_GPUS};
    } else {
        ENABLE_CHIPS    (GA100);
    }
    ENABLE_FEATURES(
        ACR_UNLOAD,
    );
    DISABLE_FEATURES(
    );
}

CATEGORY "acr_sec2-ga100_unload_gsp_rm";
{
    # If elwvar ACRCFG_GPUS is set, then use that, else default
    if ($ELW{ACRCFG_GPUS}) {
        ENABLE_CHIPS    $ELW{ACRCFG_GPUS};
    } else {
        ENABLE_CHIPS    (GA100);
    }
    ENABLE_FEATURES(
        ACR_UNLOAD,
    );
    DISABLE_FEATURES(
    );
}

CATEGORY "acr_sec2-ga10x_unload";
{
    # If elwvar ACRCFG_GPUS is set, then use that, else default
    if ($ELW{ACRCFG_GPUS}) {
        ENABLE_CHIPS    $ELW{ACRCFG_GPUS};
    } else {
        ENABLE_CHIPS    (GA102);
    }
    ENABLE_FEATURES(
        ACR_UNLOAD,
    );
    DISABLE_FEATURES(
    );
}

CATEGORY "acr_pmu-ga10x_unload";
{
    # If elwvar ACRCFG_GPUS is set, then use that, else default
    if ($ELW{ACRCFG_GPUS}) {
        ENABLE_CHIPS    $ELW{ACRCFG_GPUS};
    } else {
        ENABLE_CHIPS    (GA102);
    }
    ENABLE_FEATURES(
        ACR_UNLOAD,
    );
    DISABLE_FEATURES(
    );
}

# Look in the environment and our -D args for any special cases.
CATEGORY "wrap";
{
    1;        # must not be empty block
}

1;
