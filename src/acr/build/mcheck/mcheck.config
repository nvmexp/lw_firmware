
# A list of chips for verification.
# Unlike RM mcheck design, in rtos-flcn, all profile chips are enabled by default. 
# Only chips in \%cfg_verify_chips with a 0 are skipped.
# The errors from new added chips can be disabled by setting zero in %cfg_verify_chips
# or using %cfg_warning_chips to give warning message. 
check_hash(\%cfg_verify_chips,
# to disable some particular chips
    "gm20d"     => 0,
    "gp105"     => 0,
    "gp107f"    => 0,
    "gv100f"    => 0,
    "tu102f"    => 0,
    "gv105"     => 0,
    "ga11b"     => 0,
    "tu101"     => 0,
    "gv11b"     => 0,
    "ad102"     => 0,
    "ad103"     => 0,
    "ad104"     => 0,
    "ad106"     => 0,
    "ad107"     => 0,
    "gb100"     => 0,
    "gb102"     => 0,
    "ad10b"     => 0,
    "ig000"     => 0,
    "t256"      => 0,
    "it000"     => 0,
);

#
# Some chips can be enabled for warnings only.  This is useful for
# cases where the //hw tree takes integrates from a fluid tree,
# and RM shares the code base.
#
# This can be overridden with -G <gpulist>
#
%cfg_warning_chips = (

);

#
# Some files are excluded, mostly ucode files.  This is done
# both for speed, and to make the code coverage results more
# accurate.
#
check_hash(\%cfg_excluded_files,
    # "filename.c"   => 1,
);

#
# Exceptions for matching functions in the first pass of mcheck
# Child functions must themselves be found during the parsing
# step to be added to the list to be checked.  This covers almost
# all common code cases.  Therefore this list should stay very
# short.
#
check_hash(\%cfg_child_exceptions,
);

#
# Defines used when scanning files
#
# $cfg_scan_cpp_defines = "-DLW_VERIF_FEATURES -DDEBUG -DKDA_BUFFER_ENABLED";
$cfg_scan_cpp_defines = '';

#
# Known failues that are either acceptable (listed first) or temporary until the code can be fixed.
# Please list a bug number for things that are not on a SCS and you cannot get to now.
#
# Rules should be written as specifically as possible so new problems are not masked.
#
# Acceptable syntax:
#   "full-define,function" => 1,
#      * for all chips ignore full-define in function
#   "full-define,function,chip" => 1,
#      * for the listed chip ignore full-define in function
#   "function,chip" => "regex-pattern"
#      * for the listed chip, apply s/regex-pattern// in function.  If the result differs
#        from the original then then this define is ignored.  This is per chip lwrrently
#        as it is easy to write too broad of a rule.
#
check_exception_hash(\%cfg_known_failures,
# Examples: 
# "elpgPowerUp_GK104,[t124]" => "LW_PDISP_\\w*",
# "fifoGetPbdmaState_GF100,[gf100,gf119]" => "LW_PPBDMA_CHANNEL_\\w*",
# "LW_PGRAPH_EXCEPTION_EN_CWD_DISABLED,_dumpPgraphExceptionsState_GF100,gk104" => 1,

);

#
# [mcheck2] cfg_known_failures_disp
#   another way to set exceptions for disp registers
# 
# Syntax:
#   "disp-register-define,function" => 1,
#      * for all chips ignore full-define in function
check_hash(\%cfg_known_failures_disp,
# Example: 
# "LW_PDISP_VGA_CR_REG58_SET_DISP_OWNER,dispDispOwner_GF100" => 1,


);

