// This file is automatically generated by acr-config - DO NOT EDIT!
//
// Provides access to ACRLIB Hal interfaces.
//
// Profile:  acr-gm20b_load
// Haldef:   /home/scratch.srathod_gm204/p4_sc_sw/sw/dev/gpu_drv/chips_a/uproc/acr/src/../config/haldefs/acrlib.def
// Template: templates/gt_eng_hal.h
//

#ifndef G_ACRLIBHAL_H
#define G_ACRLIBHAL_H

//
// Typedefs for ACRLIB public object interfaces.
//



//
// "struct" to list ACRLIB's public interfaces, eg:  pAcrlib->acrlibInit(pGpu, pAcrlib)
//






//
// Typedefs for ACRLIB HAL interfaces.
//

typedef LwBool         AcrlibIsBootstrapOwner(LwU32);
typedef ACR_STATUS     AcrlibFindRegMapping(PACR_FLCN_CONFIG, ACR_FLCN_REG_LABEL, PACR_REG_MAPPING, PFLCN_REG_TGT);
typedef void           AcrlibFlcnRegLabelWrite(PACR_FLCN_CONFIG, ACR_FLCN_REG_LABEL, LwU32);
typedef LwU32          AcrlibFlcnRegLabelRead(PACR_FLCN_CONFIG, ACR_FLCN_REG_LABEL);
typedef LwU32          AcrlibFlcnRegRead(PACR_FLCN_CONFIG, FLCN_REG_TGT, LwU32);
typedef void           AcrlibFlcnRegWrite(PACR_FLCN_CONFIG, FLCN_REG_TGT, LwU32, LwU32);
typedef ACR_STATUS     AcrlibGetFalconConfig(LwU32, PACR_FLCN_CONFIG);
typedef ACR_STATUS     AcrlibPollForScrubbing(PACR_FLCN_CONFIG);
typedef LwBool         AcrlibIsFalconHalted(PACR_FLCN_CONFIG);
typedef ACR_STATUS     AcrlibSetupTargetRegisters(PACR_FLCN_CONFIG);
typedef void           AcrlibGetLwrrentTimeNs(PACR_TIMESTAMP);
typedef LwU32          AcrlibGetElapsedTimeNs(const PACR_TIMESTAMP pTime);
typedef ACR_STATUS     AcrlibCheckTimeout(LwU32, ACR_TIMESTAMP, LwS32*);
typedef ACR_STATUS     AcrlibSetupCtxDma(PACR_FLCN_CONFIG, LwBool);
typedef ACR_STATUS     AcrlibAllowVirtualFbAccess(PACR_FLCN_CONFIG);
typedef ACR_STATUS     AcrlibIssueTargetFalconDma(LwU32, LwU64, LwU32, LwU32, LwU32, LwU8, LwU8, PACR_FLCN_CONFIG);
typedef ACR_STATUS     AcrlibResetFalcon(PACR_FLCN_CONFIG, LwBool);
typedef LwU32          AcrlibFindFarthestImemBl(PACR_FLCN_CONFIG, LwU32);
typedef LwU32          AcrlibFindTotalDmemBlocks(PACR_FLCN_CONFIG);
typedef ACR_STATUS     AcrlibProgramRegionCfg(PACR_FLCN_CONFIG, LwBool, LwU32, LwU32);
typedef void           AcrlibSetupBootvec(PACR_FLCN_CONFIG, LwU32);
typedef void           AcrlibSetupDmaCtl(PACR_FLCN_CONFIG, LwBool);
typedef void           AcrlibProgramDmaBase(PACR_FLCN_CONFIG, LwU64);
typedef void           AcrlibGetLwenc2Config(PACR_FLCN_CONFIG);
typedef void           AcrlibInitializeStackCfg(PACR_FLCN_CONFIG, LwU32);


//
// struct to access ACRLIB's hal interfaces, eg:  pAcrlib->hal.acrlibReadFoo(pGpu, pAcrlib)
//

typedef struct ACRLIB_HAL_IFACES {
    LwU8 dummy; // avoid empty typedef
} ACRLIB_HAL_IFACES;


//
// Inline stub function definitions.
//

// ACRLIB:hal:GET_LWENC2_CONFIG  -  GM20B
static LW_INLINE void acrlibGetLwenc2Config_STUB(
    PACR_FLCN_CONFIG  arg1
)
{
}

// ACRLIB:hal:INITIALIZE_STACK_CFG  -  GM20B
static LW_INLINE void acrlibInitializeStackCfg_STUB(
    PACR_FLCN_CONFIG  arg1,
    LwU32         arg2
)
{
}



//
// macro defines to directly access ACRLIB's hal interfaces,
// eg: #define acrlibReadFoo_HAL(_pGpu, _pAcrlib) _pAcrlib->hal.acrlibReadFoo(_pGpu, _pAcrlib)
//

#define acrlibIsBootstrapOwner_HAL(_pAcrlib, _arg0)  \
        acrlibIsBootstrapOwner_GM200((_arg0) + (_pAcrlib - _pAcrlib) /* avoid unused warning */ )
#define acrlibFindRegMapping_HAL(_pAcrlib, _arg0, _arg1, _arg2, _arg3)  \
        acrlibFindRegMapping_GM200((_arg0) + (_pAcrlib - _pAcrlib) /* avoid unused warning */ , _arg1, _arg2, _arg3)
#define acrlibFlcnRegLabelWrite_HAL(_pAcrlib, _arg0, _arg1, _arg2)  \
        acrlibFlcnRegLabelWrite_GM200((_arg0) + (_pAcrlib - _pAcrlib) /* avoid unused warning */ , _arg1, _arg2)
#define acrlibFlcnRegLabelRead_HAL(_pAcrlib, _arg0, _arg1)  \
        acrlibFlcnRegLabelRead_GM200((_arg0) + (_pAcrlib - _pAcrlib) /* avoid unused warning */ , _arg1)
#define acrlibFlcnRegRead_HAL(_pAcrlib, _arg0, _arg1, _arg2)  \
        acrlibFlcnRegRead_GM200((_arg0) + (_pAcrlib - _pAcrlib) /* avoid unused warning */ , _arg1, _arg2)
#define acrlibFlcnRegWrite_HAL(_pAcrlib, _arg0, _arg1, _arg2, _arg3)  \
        acrlibFlcnRegWrite_GM200((_arg0) + (_pAcrlib - _pAcrlib) /* avoid unused warning */ , _arg1, _arg2, _arg3)
#define acrlibGetFalconConfig_HAL(_pAcrlib, _arg0, _arg1)  \
        acrlibGetFalconConfig_GM200((_arg0) + (_pAcrlib - _pAcrlib) /* avoid unused warning */ , _arg1)
#define acrlibPollForScrubbing_HAL(_pAcrlib, _arg0)  \
        acrlibPollForScrubbing_GM200((_arg0) + (_pAcrlib - _pAcrlib) /* avoid unused warning */ )
#define acrlibIsFalconHalted_HAL(_pAcrlib, _arg0)  \
        acrlibIsFalconHalted_GM200((_arg0) + (_pAcrlib - _pAcrlib) /* avoid unused warning */ )
#define acrlibSetupTargetRegisters_HAL(_pAcrlib, _arg0)  \
        acrlibSetupTargetRegisters_GM200((_arg0) + (_pAcrlib - _pAcrlib) /* avoid unused warning */ )
#define acrlibGetLwrrentTimeNs_HAL(_pAcrlib, _arg0)  \
        acrlibGetLwrrentTimeNs_GM200((_arg0) + (_pAcrlib - _pAcrlib) /* avoid unused warning */ )
#define acrlibGetElapsedTimeNs_HAL(_pAcrlib, _pTime)  \
        acrlibGetElapsedTimeNs_GM200((_pTime) + (_pAcrlib - _pAcrlib) /* avoid unused warning */ )
#define acrlibCheckTimeout_HAL(_pAcrlib, _arg0, _arg1, _pArg2)  \
        acrlibCheckTimeout_GM200((_arg0) + (_pAcrlib - _pAcrlib) /* avoid unused warning */ , _arg1, _pArg2)
#define acrlibSetupCtxDma_HAL(_pAcrlib, _arg0, _arg1)  \
        acrlibSetupCtxDma_GM200((_arg0) + (_pAcrlib - _pAcrlib) /* avoid unused warning */ , _arg1)
#define acrlibAllowVirtualFbAccess_HAL(_pAcrlib, _arg0)  \
        acrlibAllowVirtualFbAccess_GM200((_arg0) + (_pAcrlib - _pAcrlib) /* avoid unused warning */ )
#define acrlibIssueTargetFalconDma_HAL(_pAcrlib, _arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7)  \
        acrlibIssueTargetFalconDma_GM200((_arg0) + (_pAcrlib - _pAcrlib) /* avoid unused warning */ , _arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7)
#define acrlibResetFalcon_HAL(_pAcrlib, _arg0, _arg1)  \
        acrlibResetFalcon_GM200((_arg0) + (_pAcrlib - _pAcrlib) /* avoid unused warning */ , _arg1)
#define acrlibFindFarthestImemBl_HAL(_pAcrlib, _arg0, _arg1)  \
        acrlibFindFarthestImemBl_GM200((_arg0) + (_pAcrlib - _pAcrlib) /* avoid unused warning */ , _arg1)
#define acrlibFindTotalDmemBlocks_HAL(_pAcrlib, _arg0)  \
        acrlibFindTotalDmemBlocks_GM200((_arg0) + (_pAcrlib - _pAcrlib) /* avoid unused warning */ )
#define acrlibProgramRegionCfg_HAL(_pAcrlib, _arg0, _arg1, _arg2, _arg3)  \
        acrlibProgramRegionCfg_GM200((_arg0) + (_pAcrlib - _pAcrlib) /* avoid unused warning */ , _arg1, _arg2, _arg3)
#define acrlibSetupBootvec_HAL(_pAcrlib, _arg0, _arg1)  \
        acrlibSetupBootvec_GM200((_arg0) + (_pAcrlib - _pAcrlib) /* avoid unused warning */ , _arg1)
#define acrlibSetupDmaCtl_HAL(_pAcrlib, _arg0, _arg1)  \
        acrlibSetupDmaCtl_GM200((_arg0) + (_pAcrlib - _pAcrlib) /* avoid unused warning */ , _arg1)
#define acrlibProgramDmaBase_HAL(_pAcrlib, _arg0, _arg1)  \
        acrlibProgramDmaBase_GM200((_arg0) + (_pAcrlib - _pAcrlib) /* avoid unused warning */ , _arg1)
#define acrlibGetLwenc2Config_HAL(_pAcrlib, _arg0)  \
        acrlibGetLwenc2Config_STUB((_arg0) + (_pAcrlib - _pAcrlib) /* avoid unused warning */ )
#define acrlibInitializeStackCfg_HAL(_pAcrlib, _arg0, _arg1)  \
        acrlibInitializeStackCfg_STUB((_arg0) + (_pAcrlib - _pAcrlib) /* avoid unused warning */ , _arg1)

//
// hal function prototype defines for direct hal calls.
//

AcrlibIsBootstrapOwner             acrlibIsBootstrapOwner_GM200   // GM20B
                                       GCC_ATTRIB_SECTION("imem_acr", "acrlibIsBootstrapOwner_GM200");
AcrlibFindRegMapping               acrlibFindRegMapping_GM200   // GM20B
                                       GCC_ATTRIB_SECTION("imem_acr", "acrlibFindRegMapping_GM200");
AcrlibFlcnRegLabelWrite            acrlibFlcnRegLabelWrite_GM200   // GM20B
                                       GCC_ATTRIB_SECTION("imem_acr", "acrlibFlcnRegLabelWrite_GM200");
AcrlibFlcnRegLabelRead             acrlibFlcnRegLabelRead_GM200   // GM20B
                                       GCC_ATTRIB_SECTION("imem_acr", "acrlibFlcnRegLabelRead_GM200");
AcrlibFlcnRegRead                  acrlibFlcnRegRead_GM200   // GM20B
                                       GCC_ATTRIB_SECTION("imem_acr", "acrlibFlcnRegRead_GM200");
AcrlibFlcnRegWrite                 acrlibFlcnRegWrite_GM200   // GM20B
                                       GCC_ATTRIB_SECTION("imem_acr", "acrlibFlcnRegWrite_GM200");
AcrlibGetFalconConfig              acrlibGetFalconConfig_GM200   // GM20B
                                       GCC_ATTRIB_SECTION("imem_acr", "acrlibGetFalconConfig_GM200");
AcrlibPollForScrubbing             acrlibPollForScrubbing_GM200   // GM20B
                                       GCC_ATTRIB_SECTION("imem_acr", "acrlibPollForScrubbing_GM200");
AcrlibIsFalconHalted               acrlibIsFalconHalted_GM200   // GM20B
                                       GCC_ATTRIB_SECTION("imem_acr", "acrlibIsFalconHalted_GM200");
AcrlibSetupTargetRegisters         acrlibSetupTargetRegisters_GM200   // GM20B
                                       GCC_ATTRIB_SECTION("imem_acr", "acrlibSetupTargetRegisters_GM200");
AcrlibGetLwrrentTimeNs             acrlibGetLwrrentTimeNs_GM200   // GM20B
                                       GCC_ATTRIB_SECTION("imem_acr", "acrlibGetLwrrentTimeNs_GM200");
AcrlibGetElapsedTimeNs             acrlibGetElapsedTimeNs_GM200   // GM20B
                                       GCC_ATTRIB_SECTION("imem_acr", "acrlibGetElapsedTimeNs_GM200");
AcrlibCheckTimeout                 acrlibCheckTimeout_GM200   // GM20B
                                       GCC_ATTRIB_SECTION("imem_acr", "acrlibCheckTimeout_GM200");
AcrlibSetupCtxDma                  acrlibSetupCtxDma_GM200   // GM20B
                                       GCC_ATTRIB_SECTION("imem_acr", "acrlibSetupCtxDma_GM200");
AcrlibAllowVirtualFbAccess         acrlibAllowVirtualFbAccess_GM200   // GM20B
                                       GCC_ATTRIB_SECTION("imem_acr", "acrlibAllowVirtualFbAccess_GM200");
AcrlibIssueTargetFalconDma         acrlibIssueTargetFalconDma_GM200   // GM20B
                                       GCC_ATTRIB_SECTION("imem_acr", "acrlibIssueTargetFalconDma_GM200");
AcrlibResetFalcon                  acrlibResetFalcon_GM200   // GM20B
                                       GCC_ATTRIB_SECTION("imem_acr", "acrlibResetFalcon_GM200");
AcrlibFindFarthestImemBl           acrlibFindFarthestImemBl_GM200   // GM20B
                                       GCC_ATTRIB_SECTION("imem_acr", "acrlibFindFarthestImemBl_GM200");
AcrlibFindTotalDmemBlocks          acrlibFindTotalDmemBlocks_GM200   // GM20B
                                       GCC_ATTRIB_SECTION("imem_acr", "acrlibFindTotalDmemBlocks_GM200");
AcrlibProgramRegionCfg             acrlibProgramRegionCfg_GM200   // GM20B
                                       GCC_ATTRIB_SECTION("imem_acr", "acrlibProgramRegionCfg_GM200");
AcrlibSetupBootvec                 acrlibSetupBootvec_GM200   // GM20B
                                       GCC_ATTRIB_SECTION("imem_acr", "acrlibSetupBootvec_GM200");
AcrlibSetupDmaCtl                  acrlibSetupDmaCtl_GM200   // GM20B
                                       GCC_ATTRIB_SECTION("imem_acr", "acrlibSetupDmaCtl_GM200");
AcrlibProgramDmaBase               acrlibProgramDmaBase_GM200   // GM20B
                                       GCC_ATTRIB_SECTION("imem_acr", "acrlibProgramDmaBase_GM200");
static AcrlibGetLwenc2Config       acrlibGetLwenc2Config_STUB   // GM20B
                                       GCC_ATTRIB_SECTION("imem_acr", "acrlibGetLwenc2Config_STUB");
static AcrlibInitializeStackCfg    acrlibInitializeStackCfg_STUB   // GM20B
                                       GCC_ATTRIB_SECTION("imem_acr", "acrlibInitializeStackCfg_STUB");

// Are there any optimized hal interfaces?
#define ACRLIB_DIRECT_HAL_CALLS            1

// Are there any non-optimized hal interfaces?
#define ACRLIB_INDIRECT_HAL_CALLS          0


//
// ACRLIB PDB properties
//



#endif  // G_ACRLIBHAL_H
