// This file is automatically generated by acr-config - DO NOT EDIT!
//
// Provides access to ACRLIB Hal interfaces.
//
// Profile:  acr_pmu-gv100_unload
// Haldef:   /home/scratch.adjoshi_gpu/adjoshi_eins/sw/dev/gpu_drv/chips_a/uproc/acr/src/../config/haldefs/acrlib.def
// Template: templates/gt_eng_hal.h
//

#ifndef G_ACRLIBHAL_H
#define G_ACRLIBHAL_H

//
// Typedefs for ACRLIB public object interfaces.
//



//
// "struct" to list ACRLIB's public interfaces, eg:  pAcrlib->acrlibInit(pGpu, pAcrlib)
//




//
// Typedefs for ACRLIB HAL interfaces.
//

typedef ACR_STATUS     AcrlibFindRegMapping(PACR_FLCN_CONFIG, ACR_FLCN_REG_LABEL, PACR_REG_MAPPING, PFLCN_REG_TGT);
typedef void           AcrlibFlcnRegLabelWrite(PACR_FLCN_CONFIG, ACR_FLCN_REG_LABEL, LwU32);
typedef LwU32          AcrlibFlcnRegLabelRead(PACR_FLCN_CONFIG, ACR_FLCN_REG_LABEL);
typedef LwU32          AcrlibFlcnRegRead(PACR_FLCN_CONFIG, FLCN_REG_TGT, LwU32);
typedef void           AcrlibFlcnRegWrite(PACR_FLCN_CONFIG, FLCN_REG_TGT, LwU32, LwU32);
typedef ACR_STATUS     AcrlibGetFalconConfig(LwU32, LwU32, PACR_FLCN_CONFIG);
typedef ACR_STATUS     AcrlibPollForScrubbing(PACR_FLCN_CONFIG);
typedef LwBool         AcrlibIsFalconHalted(PACR_FLCN_CONFIG);
typedef ACR_STATUS     AcrlibSetupTargetRegisters(PACR_FLCN_CONFIG);
typedef void           AcrlibGetLwrrentTimeNs(PACR_TIMESTAMP);
typedef LwU32          AcrlibGetElapsedTimeNs(const PACR_TIMESTAMP pTime);
typedef ACR_STATUS     AcrlibCheckTimeout(LwU32, ACR_TIMESTAMP, LwS32*);
typedef ACR_STATUS     AcrlibSetupCtxDma(PACR_FLCN_CONFIG, LwU32 ctxDma, LwBool bIsPhysical);
typedef ACR_STATUS     AcrlibAllowVirtualFbAccess(PACR_FLCN_CONFIG);
typedef ACR_STATUS     AcrlibIssueTargetFalconDma(LwU32, LwU64, LwU32, LwU32, LwU32, LwU8, LwU8, PACR_FLCN_CONFIG);
typedef ACR_STATUS     AcrlibFalconOnlyReset(PACR_FLCN_CONFIG);
typedef ACR_STATUS     AcrlibIsFalconInReset(PACR_FLCN_CONFIG, LwBool *);
typedef ACR_STATUS     AcrlibPutFalconInReset(PACR_FLCN_CONFIG, LwBool);
typedef ACR_STATUS     AcrlibBringFalconOutOfReset(PACR_FLCN_CONFIG);
typedef ACR_STATUS     AcrlibResetFalcon(PACR_FLCN_CONFIG, LwBool);
typedef void           AcrlibSelwreResetFalcon(PACR_FLCN_CONFIG);
typedef LwU32          AcrlibFindFarthestImemBl(PACR_FLCN_CONFIG, LwU32);
typedef LwU32          AcrlibFindTotalDmemBlocks(PACR_FLCN_CONFIG);
typedef ACR_STATUS     AcrlibProgramRegionCfg(PACR_FLCN_CONFIG, LwBool, LwU32, LwU32);
typedef void           AcrlibSetupBootvec(PACR_FLCN_CONFIG, LwU32);
typedef void           AcrlibSetupDmaCtl(PACR_FLCN_CONFIG, LwBool);
typedef void           AcrlibProgramDmaBase(PACR_FLCN_CONFIG, LwU64);
typedef void           AcrlibGetLwenc2Config(PACR_FLCN_CONFIG);
typedef void           AcrlibGetLwdecConfig(PACR_FLCN_CONFIG);
typedef void           AcrlibInitializeStackCfg(PACR_FLCN_CONFIG, LwU32);
typedef void           AcrlibSetupSec2Registers(PACR_FLCN_CONFIG);
typedef LwBool         AcrlibShouldBootstrapFalcon(LwU32);
typedef LwBool         AcrlibCheckIfFalconIsBootstrappedWithLoader(LwU32);
typedef ACR_STATUS     AcrlibSetupTargetFalconPlms(PACR_FLCN_CONFIG);
typedef ACR_STATUS     AcrlibAllowVirtualFbAccessForFecs(PACR_FLCN_CONFIG);
typedef ACR_STATUS     AcrlibSetupFecsDmaThroughArbiter(PACR_FLCN_CONFIG, LwBool);
typedef LwBool         AcrlibIsFalconInstanceValid(LwU32, LwU32);


//
// struct to access ACRLIB's hal interfaces, eg:  pAcrlib->hal.acrlibReadFoo(pGpu, pAcrlib)
//

typedef struct ACRLIB_HAL_IFACES {
    LwU8 dummy; // avoid empty typedef
} ACRLIB_HAL_IFACES;


//
// macro defines to directly access ACRLIB's hal interfaces,
// eg: #define acrlibReadFoo_HAL(_pGpu, _pAcrlib) _pAcrlib->hal.acrlibReadFoo(_pGpu, _pAcrlib)
//

#define acrlibFindRegMapping_HAL(_pAcrlib, _arg0, _arg1, _arg2, _arg3)  \
        acrlibFindRegMapping_GM200(_arg0, _arg1, _arg2, _arg3)
#define acrlibFlcnRegLabelWrite_HAL(_pAcrlib, _arg0, _arg1, _arg2)  \
        acrlibFlcnRegLabelWrite_GM200(_arg0, _arg1, _arg2)
#define acrlibFlcnRegLabelRead_HAL(_pAcrlib, _arg0, _arg1)  \
        acrlibFlcnRegLabelRead_GM200(_arg0, _arg1)
#define acrlibFlcnRegRead_HAL(_pAcrlib, _arg0, _arg1, _arg2)  \
        acrlibFlcnRegRead_GM200(_arg0, _arg1, _arg2)
#define acrlibFlcnRegWrite_HAL(_pAcrlib, _arg0, _arg1, _arg2, _arg3)  \
        acrlibFlcnRegWrite_GM200(_arg0, _arg1, _arg2, _arg3)
#define acrlibGetFalconConfig_HAL(_pAcrlib, _arg0, _arg1, _arg2)  \
        acrlibGetFalconConfig_GV100(_arg0, _arg1, _arg2)
#define acrlibPollForScrubbing_HAL(_pAcrlib, _arg0)  \
        acrlibPollForScrubbing_GM200(_arg0)
#define acrlibIsFalconHalted_HAL(_pAcrlib, _arg0)  \
        acrlibIsFalconHalted_GM200(_arg0)
#define acrlibSetupTargetRegisters_HAL(_pAcrlib, _arg0)  \
        acrlibSetupTargetRegisters_GM200(_arg0)
#define acrlibGetLwrrentTimeNs_HAL(_pAcrlib, _arg0)  \
        acrlibGetLwrrentTimeNs_GM200(_arg0)
#define acrlibGetElapsedTimeNs_HAL(_pAcrlib, _pTime)  \
        acrlibGetElapsedTimeNs_GM200(_pTime)
#define acrlibCheckTimeout_HAL(_pAcrlib, _arg0, _arg1, _pArg2)  \
        acrlibCheckTimeout_GM200(_arg0, _arg1, _pArg2)
#define acrlibSetupCtxDma_HAL(_pAcrlib, _arg0, _ctxDma, _bIsPhysical)  \
        acrlibSetupCtxDma_GM200(_arg0, _ctxDma, _bIsPhysical)
#define acrlibAllowVirtualFbAccess_HAL(_pAcrlib, _arg0)  \
        acrlibAllowVirtualFbAccess_GM200(_arg0)
#define acrlibIssueTargetFalconDma_HAL(_pAcrlib, _arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7)  \
        acrlibIssueTargetFalconDma_GM200(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7)
#define acrlibFalconOnlyReset_HAL(_pAcrlib, _arg0)  \
        acrlibFalconOnlyReset_GM200(_arg0)
#define acrlibIsFalconInReset_HAL(_pAcrlib, _arg0, _pArg1)  \
        acrlibIsFalconInReset_GP10X(_arg0, _pArg1)
#define acrlibPutFalconInReset_HAL(_pAcrlib, _arg0, _arg1)  \
        acrlibPutFalconInReset_GP10X(_arg0, _arg1)
#define acrlibBringFalconOutOfReset_HAL(_pAcrlib, _arg0)  \
        acrlibBringFalconOutOfReset_GP10X(_arg0)
#define acrlibResetFalcon_HAL(_pAcrlib, _arg0, _arg1)  \
        acrlibResetFalcon_GM200(_arg0, _arg1)
#define acrlibSelwreResetFalcon_HAL(_pAcrlib, _arg0)  \
        acrlibSelwreResetFalcon_GP10X(_arg0)
#define acrlibFindFarthestImemBl_HAL(_pAcrlib, _arg0, _arg1)  \
        acrlibFindFarthestImemBl_GM200(_arg0, _arg1)
#define acrlibFindTotalDmemBlocks_HAL(_pAcrlib, _arg0)  \
        acrlibFindTotalDmemBlocks_GM200(_arg0)
#define acrlibProgramRegionCfg_HAL(_pAcrlib, _arg0, _arg1, _arg2, _arg3)  \
        acrlibProgramRegionCfg_GM200(_arg0, _arg1, _arg2, _arg3)
#define acrlibSetupBootvec_HAL(_pAcrlib, _arg0, _arg1)  \
        acrlibSetupBootvec_GM200(_arg0, _arg1)
#define acrlibSetupDmaCtl_HAL(_pAcrlib, _arg0, _arg1)  \
        acrlibSetupDmaCtl_GM200(_arg0, _arg1)
#define acrlibProgramDmaBase_HAL(_pAcrlib, _arg0, _arg1)  \
        acrlibProgramDmaBase_GP100(_arg0, _arg1)
#define acrlibGetLwenc2Config_HAL(_pAcrlib, _arg0)  \
        acrlibGetLwenc2Config_STUB(_arg0)
#define acrlibGetLwdecConfig_HAL(_pAcrlib, _arg0)  \
        acrlibGetLwdecConfig_GM200(_arg0)
#define acrlibInitializeStackCfg_HAL(_pAcrlib, _arg0, _arg1)  \
        acrlibInitializeStackCfg_STUB(_arg0, _arg1)
#define acrlibSetupSec2Registers_HAL(_pAcrlib, _arg0)  \
        acrlibSetupSec2Registers_GP10X(_arg0)
#define acrlibShouldBootstrapFalcon_HAL(_pAcrlib, _arg0)  \
        acrlibShouldBootstrapFalcon_GP10X(_arg0)
#define acrlibCheckIfFalconIsBootstrappedWithLoader_HAL(_pAcrlib, _arg0)  \
        acrlibCheckIfFalconIsBootstrappedWithLoader_GP10X(_arg0)
#define acrlibSetupTargetFalconPlms_HAL(_pAcrlib, _arg0)  \
        acrlibSetupTargetFalconPlms_STUB(_arg0)
#define acrlibAllowVirtualFbAccessForFecs_HAL(_pAcrlib, _arg0)  \
        acrlibAllowVirtualFbAccessForFecs_GM200(_arg0)
#define acrlibSetupFecsDmaThroughArbiter_HAL(_pAcrlib, _arg0, _arg1)  \
        acrlibSetupFecsDmaThroughArbiter_GM200(_arg0, _arg1)
#define acrlibIsFalconInstanceValid_HAL(_pAcrlib, _arg0, _arg1)  \
        acrlibIsFalconInstanceValid_STUB(_arg0, _arg1)

//
// hal function prototype defines for direct hal calls.
//

AcrlibFindRegMapping               acrlibFindRegMapping_GM200   // GV10X
                                       GCC_ATTRIB_SECTION("imem_acr", "acrlibFindRegMapping_GM200");
AcrlibFlcnRegLabelWrite            acrlibFlcnRegLabelWrite_GM200   // GV10X
                                       GCC_ATTRIB_SECTION("imem_acr", "acrlibFlcnRegLabelWrite_GM200");
AcrlibFlcnRegLabelRead             acrlibFlcnRegLabelRead_GM200   // GV10X
                                       GCC_ATTRIB_SECTION("imem_acr", "acrlibFlcnRegLabelRead_GM200");
AcrlibFlcnRegRead                  acrlibFlcnRegRead_GM200   // GV10X
                                       GCC_ATTRIB_SECTION("imem_acr", "acrlibFlcnRegRead_GM200");
AcrlibFlcnRegWrite                 acrlibFlcnRegWrite_GM200   // GV10X
                                       GCC_ATTRIB_SECTION("imem_acr", "acrlibFlcnRegWrite_GM200");
AcrlibGetFalconConfig              acrlibGetFalconConfig_GV100   // GV10X, implicitly by _TU10X
                                       GCC_ATTRIB_SECTION("imem_acr", "acrlibGetFalconConfig_GV100");
AcrlibPollForScrubbing             acrlibPollForScrubbing_GM200   // GV10X
                                       GCC_ATTRIB_SECTION("imem_acr", "acrlibPollForScrubbing_GM200");
AcrlibIsFalconHalted               acrlibIsFalconHalted_GM200   // GV10X
                                       GCC_ATTRIB_SECTION("imem_acr", "acrlibIsFalconHalted_GM200");
AcrlibSetupTargetRegisters         acrlibSetupTargetRegisters_GM200   // GV10X
                                       GCC_ATTRIB_SECTION("imem_acr", "acrlibSetupTargetRegisters_GM200");
AcrlibGetLwrrentTimeNs             acrlibGetLwrrentTimeNs_GM200   // GV10X
                                       GCC_ATTRIB_SECTION("imem_acr", "acrlibGetLwrrentTimeNs_GM200");
AcrlibGetElapsedTimeNs             acrlibGetElapsedTimeNs_GM200   // GV10X
                                       GCC_ATTRIB_SECTION("imem_acr", "acrlibGetElapsedTimeNs_GM200");
AcrlibCheckTimeout                 acrlibCheckTimeout_GM200   // GV10X
                                       GCC_ATTRIB_SECTION("imem_acr", "acrlibCheckTimeout_GM200");
AcrlibSetupCtxDma                  acrlibSetupCtxDma_GM200   // GV10X
                                       GCC_ATTRIB_SECTION("imem_acr", "acrlibSetupCtxDma_GM200");
AcrlibAllowVirtualFbAccess         acrlibAllowVirtualFbAccess_GM200   // GV10X
                                       GCC_ATTRIB_SECTION("imem_acr", "acrlibAllowVirtualFbAccess_GM200");
AcrlibIssueTargetFalconDma         acrlibIssueTargetFalconDma_GM200   // GV10X
                                       GCC_ATTRIB_SECTION("imem_acr", "acrlibIssueTargetFalconDma_GM200");
AcrlibFalconOnlyReset              acrlibFalconOnlyReset_GM200   // GV10X
                                       GCC_ATTRIB_SECTION("imem_acr", "acrlibFalconOnlyReset_GM200");
AcrlibIsFalconInReset              acrlibIsFalconInReset_GP10X   // GV10X
                                       GCC_ATTRIB_SECTION("imem_acr", "acrlibIsFalconInReset_GP10X");
AcrlibPutFalconInReset             acrlibPutFalconInReset_GP10X   // GV10X
                                       GCC_ATTRIB_SECTION("imem_acr", "acrlibPutFalconInReset_GP10X");
AcrlibBringFalconOutOfReset        acrlibBringFalconOutOfReset_GP10X   // GV10X
                                       GCC_ATTRIB_SECTION("imem_acr", "acrlibBringFalconOutOfReset_GP10X");
AcrlibResetFalcon                  acrlibResetFalcon_GM200   // GV10X
                                       GCC_ATTRIB_SECTION("imem_acr", "acrlibResetFalcon_GM200");
AcrlibSelwreResetFalcon            acrlibSelwreResetFalcon_GP10X   // GV10X
                                       GCC_ATTRIB_SECTION("imem_acr", "acrlibSelwreResetFalcon_GP10X");
AcrlibFindFarthestImemBl           acrlibFindFarthestImemBl_GM200   // GV10X
                                       GCC_ATTRIB_SECTION("imem_acr", "acrlibFindFarthestImemBl_GM200");
AcrlibFindTotalDmemBlocks          acrlibFindTotalDmemBlocks_GM200   // GV10X
                                       GCC_ATTRIB_SECTION("imem_acr", "acrlibFindTotalDmemBlocks_GM200");
AcrlibProgramRegionCfg             acrlibProgramRegionCfg_GM200   // GV10X
                                       GCC_ATTRIB_SECTION("imem_acr", "acrlibProgramRegionCfg_GM200");
AcrlibSetupBootvec                 acrlibSetupBootvec_GM200   // GV10X
                                       GCC_ATTRIB_SECTION("imem_acr", "acrlibSetupBootvec_GM200");
AcrlibSetupDmaCtl                  acrlibSetupDmaCtl_GM200   // GV10X
                                       GCC_ATTRIB_SECTION("imem_acr", "acrlibSetupDmaCtl_GM200");
AcrlibProgramDmaBase               acrlibProgramDmaBase_GP100   // GV10X
                                       GCC_ATTRIB_SECTION("imem_acr", "acrlibProgramDmaBase_GP100");
static AcrlibGetLwenc2Config       acrlibGetLwenc2Config_STUB   // GV10X
                                       GCC_ATTRIB_SECTION("imem_acr", "acrlibGetLwenc2Config_STUB");
AcrlibGetLwdecConfig               acrlibGetLwdecConfig_GM200   // GV10X
                                       GCC_ATTRIB_SECTION("imem_acr", "acrlibGetLwdecConfig_GM200");
static AcrlibInitializeStackCfg    acrlibInitializeStackCfg_STUB   // GV10X
                                       GCC_ATTRIB_SECTION("imem_acr", "acrlibInitializeStackCfg_STUB");
AcrlibSetupSec2Registers           acrlibSetupSec2Registers_GP10X   // GV10X
                                       GCC_ATTRIB_SECTION("imem_acr", "acrlibSetupSec2Registers_GP10X");
AcrlibShouldBootstrapFalcon        acrlibShouldBootstrapFalcon_GP10X   // GV10X
                                       GCC_ATTRIB_SECTION("imem_acr", "acrlibShouldBootstrapFalcon_GP10X");
AcrlibCheckIfFalconIsBootstrappedWithLoader   acrlibCheckIfFalconIsBootstrappedWithLoader_GP10X   // GV10X
                                       GCC_ATTRIB_SECTION("imem_acr", "acrlibCheckIfFalconIsBootstrappedWithLoader_GP10X");
static AcrlibSetupTargetFalconPlms   acrlibSetupTargetFalconPlms_STUB   // GV10X
                                       GCC_ATTRIB_SECTION("imem_acr", "acrlibSetupTargetFalconPlms_STUB");
AcrlibAllowVirtualFbAccessForFecs    acrlibAllowVirtualFbAccessForFecs_GM200   // GV10X
                                       GCC_ATTRIB_SECTION("imem_acr", "acrlibAllowVirtualFbAccessForFecs_GM200");
AcrlibSetupFecsDmaThroughArbiter          acrlibSetupFecsDmaThroughArbiter_GM200   // GV10X
                                       GCC_ATTRIB_SECTION("imem_acr", "acrlibSetupFecsDmaThroughArbiter_GM200");
static AcrlibIsFalconInstanceValid   acrlibIsFalconInstanceValid_STUB   // GV10X
                                       GCC_ATTRIB_SECTION("imem_acr", "acrlibIsFalconInstanceValid_STUB");

// Are there any optimized hal interfaces?
#define ACRLIB_DIRECT_HAL_CALLS            1

// Are there any non-optimized hal interfaces?
#define ACRLIB_INDIRECT_HAL_CALLS          0


//
// Inline stub function definitions.
//

// ACRLIB:hal:GET_LWENC2_CONFIG  -  GV10X
static LW_INLINE void acrlibGetLwenc2Config_STUB(
    PACR_FLCN_CONFIG  arg1
)
{
}

// ACRLIB:hal:INITIALIZE_STACK_CFG  -  GV10X
static LW_INLINE void acrlibInitializeStackCfg_STUB(
    PACR_FLCN_CONFIG  arg1,
    LwU32         arg2
)
{
}

// ACRLIB:hal:SETUP_TARGET_FALCON_PLMS  -  GV10X
static LW_INLINE ACR_STATUS acrlibSetupTargetFalconPlms_STUB(
    PACR_FLCN_CONFIG  arg1
)
{
    return ACR_OK;
}

// ACRLIB:hal:IS_FALCON_INSTANCE_VALID  -  GV10X
static LW_INLINE LwBool acrlibIsFalconInstanceValid_STUB(
    LwU32         arg1,
    LwU32         arg2
)
{
    return LW_TRUE;
}

//
// ACRLIB PDB properties
//



#endif  // G_ACRLIBHAL_H
