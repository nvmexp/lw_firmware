// This file is automatically generated by acr-config - DO NOT EDIT!
//
// Private HAL support for ACRLIB.
//
// Profile:  acr_pmu-gp10b_load
// Haldef:   /home/scratch.nkuo_kepler/code/sw/dev/gpu_drv/chips_a/uproc/acr/src/../config/haldefs/acrlib.def
// Template: templates/gt_eng_private.h
//

#ifndef G_ACRLIB_PRIVATE_H
#define G_ACRLIB_PRIVATE_H

#include "g_acrlib_hal.h"

                                               // ACRLIB:IS_BOOTSTRAP_OWNER
AcrlibIsBootstrapOwner             acrlibIsBootstrapOwner_GM200   // GP10B
                                       GCC_ATTRIB_SECTION("imem_acr", "acrlibIsBootstrapOwner_GM200");

                                               // ACRLIB:FIND_REG_MAPPING
AcrlibFindRegMapping               acrlibFindRegMapping_GM200   // GP10B
                                       GCC_ATTRIB_SECTION("imem_acr", "acrlibFindRegMapping_GM200");

                                               // ACRLIB:FLCN_REG_LABEL_WRITE
AcrlibFlcnRegLabelWrite            acrlibFlcnRegLabelWrite_GM200   // GP10B
                                       GCC_ATTRIB_SECTION("imem_acr", "acrlibFlcnRegLabelWrite_GM200");

                                               // ACRLIB:FLCN_REG_LABEL_READ
AcrlibFlcnRegLabelRead             acrlibFlcnRegLabelRead_GM200   // GP10B
                                       GCC_ATTRIB_SECTION("imem_acr", "acrlibFlcnRegLabelRead_GM200");

                                               // ACRLIB:FLCN_REG_READ
AcrlibFlcnRegRead                  acrlibFlcnRegRead_GM200   // GP10B
                                       GCC_ATTRIB_SECTION("imem_acr", "acrlibFlcnRegRead_GM200");

                                               // ACRLIB:FLCN_REG_WRITE
AcrlibFlcnRegWrite                 acrlibFlcnRegWrite_GM200   // GP10B
                                       GCC_ATTRIB_SECTION("imem_acr", "acrlibFlcnRegWrite_GM200");

                                               // ACRLIB:GET_FALCON_CONFIG
AcrlibGetFalconConfig              acrlibGetFalconConfig_GM200   // GP10B
                                       GCC_ATTRIB_SECTION("imem_acr", "acrlibGetFalconConfig_GM200");
AcrlibGetFalconConfig              acrlibGetFalconConfig_GP10X 
                                       GCC_ATTRIB_SECTION("imem_acr", "acrlibGetFalconConfig_GP10X");

                                               // ACRLIB:POLL_FOR_SCRUBBING
AcrlibPollForScrubbing             acrlibPollForScrubbing_GM200   // GP10B
                                       GCC_ATTRIB_SECTION("imem_acr", "acrlibPollForScrubbing_GM200");

                                               // ACRLIB:IS_FALCON_HALTED
AcrlibIsFalconHalted               acrlibIsFalconHalted_GM200   // GP10B
                                       GCC_ATTRIB_SECTION("imem_acr", "acrlibIsFalconHalted_GM200");

                                               // ACRLIB:SETUP_TARGET_REGISTERS
AcrlibSetupTargetRegisters         acrlibSetupTargetRegisters_GM200   // GP10B
                                       GCC_ATTRIB_SECTION("imem_acr", "acrlibSetupTargetRegisters_GM200");

                                               // ACRLIB:GET_LWRRENT_TIME_NS
AcrlibGetLwrrentTimeNs             acrlibGetLwrrentTimeNs_GM200   // GP10B
                                       GCC_ATTRIB_SECTION("imem_acr", "acrlibGetLwrrentTimeNs_GM200");

                                               // ACRLIB:GET_ELAPSED_TIME_NS
AcrlibGetElapsedTimeNs             acrlibGetElapsedTimeNs_GM200   // GP10B
                                       GCC_ATTRIB_SECTION("imem_acr", "acrlibGetElapsedTimeNs_GM200");

                                               // ACRLIB:CHECK_TIMEOUT
AcrlibCheckTimeout                 acrlibCheckTimeout_GM200   // GP10B
                                       GCC_ATTRIB_SECTION("imem_acr", "acrlibCheckTimeout_GM200");

                                               // ACRLIB:SETUP_CTX_DMA
AcrlibSetupCtxDma                  acrlibSetupCtxDma_GM200   // GP10B
                                       GCC_ATTRIB_SECTION("imem_acr", "acrlibSetupCtxDma_GM200");

                                               // ACRLIB:ALLOW_VIRTUAL_FB_ACCESS
AcrlibAllowVirtualFbAccess         acrlibAllowVirtualFbAccess_GM200   // GP10B
                                       GCC_ATTRIB_SECTION("imem_acr", "acrlibAllowVirtualFbAccess_GM200");

                                               // ACRLIB:ISSUE_TARGET_FALCON_DMA
AcrlibIssueTargetFalconDma         acrlibIssueTargetFalconDma_GM200   // GP10B
                                       GCC_ATTRIB_SECTION("imem_acr", "acrlibIssueTargetFalconDma_GM200");

                                               // ACRLIB:FALCON_ONLY_RESET
AcrlibFalconOnlyReset              acrlibFalconOnlyReset_GM200   // GP10B
                                       GCC_ATTRIB_SECTION("imem_acr", "acrlibFalconOnlyReset_GM200");

                                               // ACRLIB:IS_FALCON_IN_RESET
AcrlibIsFalconInReset              acrlibIsFalconInReset_GM200   // GP10B
                                       GCC_ATTRIB_SECTION("imem_acr", "acrlibIsFalconInReset_GM200");
AcrlibIsFalconInReset              acrlibIsFalconInReset_GP10X 
                                       GCC_ATTRIB_SECTION("imem_acr", "acrlibIsFalconInReset_GP10X");

                                               // ACRLIB:PUT_FALCON_IN_RESET
AcrlibPutFalconInReset             acrlibPutFalconInReset_GM200   // GP10B
                                       GCC_ATTRIB_SECTION("imem_acr", "acrlibPutFalconInReset_GM200");
AcrlibPutFalconInReset             acrlibPutFalconInReset_GP10X 
                                       GCC_ATTRIB_SECTION("imem_acr", "acrlibPutFalconInReset_GP10X");

                                               // ACRLIB:BRING_FALCON_OUT_OF_RESET
AcrlibBringFalconOutOfReset        acrlibBringFalconOutOfReset_GM200   // GP10B
                                       GCC_ATTRIB_SECTION("imem_acr", "acrlibBringFalconOutOfReset_GM200");
AcrlibBringFalconOutOfReset        acrlibBringFalconOutOfReset_GP10X 
                                       GCC_ATTRIB_SECTION("imem_acr", "acrlibBringFalconOutOfReset_GP10X");

                                               // ACRLIB:RESET_FALCON
AcrlibResetFalcon                  acrlibResetFalcon_GM200   // GP10B
                                       GCC_ATTRIB_SECTION("imem_acr", "acrlibResetFalcon_GM200");

                                               // ACRLIB:SELWRE_RESET_FALCON
AcrlibSelwreResetFalcon            acrlibSelwreResetFalcon_GP10X 
                                       GCC_ATTRIB_SECTION("imem_acr", "acrlibSelwreResetFalcon_GP10X");
static AcrlibSelwreResetFalcon     acrlibSelwreResetFalcon_STUB   // GP10B
                                       GCC_ATTRIB_SECTION("imem_acr", "acrlibSelwreResetFalcon_STUB");

                                               // ACRLIB:FIND_FARTHEST_IMEM_BL
AcrlibFindFarthestImemBl           acrlibFindFarthestImemBl_GM200   // GP10B
                                       GCC_ATTRIB_SECTION("imem_acr", "acrlibFindFarthestImemBl_GM200");

                                               // ACRLIB:FIND_TOTAL_DMEM_BLOCKS
AcrlibFindTotalDmemBlocks          acrlibFindTotalDmemBlocks_GM200   // GP10B
                                       GCC_ATTRIB_SECTION("imem_acr", "acrlibFindTotalDmemBlocks_GM200");

                                               // ACRLIB:PROGRAM_REGION_CFG
AcrlibProgramRegionCfg             acrlibProgramRegionCfg_GM200   // GP10B
                                       GCC_ATTRIB_SECTION("imem_acr", "acrlibProgramRegionCfg_GM200");

                                               // ACRLIB:SETUP_BOOTVEC
AcrlibSetupBootvec                 acrlibSetupBootvec_GM200   // GP10B
                                       GCC_ATTRIB_SECTION("imem_acr", "acrlibSetupBootvec_GM200");

                                               // ACRLIB:SETUP_DMA_CTL
AcrlibSetupDmaCtl                  acrlibSetupDmaCtl_GM200   // GP10B
                                       GCC_ATTRIB_SECTION("imem_acr", "acrlibSetupDmaCtl_GM200");

                                               // ACRLIB:PROGRAM_DMA_BASE
AcrlibProgramDmaBase               acrlibProgramDmaBase_GM200   // GP10B
                                       GCC_ATTRIB_SECTION("imem_acr", "acrlibProgramDmaBase_GM200");
AcrlibProgramDmaBase               acrlibProgramDmaBase_GP100 
                                       GCC_ATTRIB_SECTION("imem_acr", "acrlibProgramDmaBase_GP100");

                                               // ACRLIB:GET_LWENC2_CONFIG
AcrlibGetLwenc2Config              acrlibGetLwenc2Config_GP100 
                                       GCC_ATTRIB_SECTION("imem_acr", "acrlibGetLwenc2Config_GP100");
static AcrlibGetLwenc2Config       acrlibGetLwenc2Config_STUB   // GP10B
                                       GCC_ATTRIB_SECTION("imem_acr", "acrlibGetLwenc2Config_STUB");

                                               // ACRLIB:GET_LWDEC_CONFIG
AcrlibGetLwdecConfig               acrlibGetLwdecConfig_GM200   // GP100
                                       GCC_ATTRIB_SECTION("imem_acr", "acrlibGetLwdecConfig_GM200");

                                               // ACRLIB:INITIALIZE_STACK_CFG
AcrlibInitializeStackCfg           acrlibInitializeStackCfg_GP100 
                                       GCC_ATTRIB_SECTION("imem_acr", "acrlibInitializeStackCfg_GP100");
static AcrlibInitializeStackCfg    acrlibInitializeStackCfg_STUB   // GP10B
                                       GCC_ATTRIB_SECTION("imem_acr", "acrlibInitializeStackCfg_STUB");

                                               // ACRLIB:SETUP_SEC2_REGISTERS
AcrlibSetupSec2Registers           acrlibSetupSec2Registers_GP10X 
                                       GCC_ATTRIB_SECTION("imem_acr", "acrlibSetupSec2Registers_GP10X");
static AcrlibSetupSec2Registers    acrlibSetupSec2Registers_STUB   // GP10B
                                       GCC_ATTRIB_SECTION("imem_acr", "acrlibSetupSec2Registers_STUB");

                                               // ACRLIB:SHOULD_BOOTSTRAP_FALCON
AcrlibShouldBootstrapFalcon        acrlibShouldBootstrapFalcon_GP10X 
                                       GCC_ATTRIB_SECTION("imem_acr", "acrlibShouldBootstrapFalcon_GP10X");
static AcrlibShouldBootstrapFalcon   acrlibShouldBootstrapFalcon_STUB   // GP10B
                                       GCC_ATTRIB_SECTION("imem_acr", "acrlibShouldBootstrapFalcon_STUB");




#if defined(ACRCFG_OBJ_SETUP_ALL)    // for use by hal init only

//
// ACRLIB's object-level interface functions
//


//
// ACRLIB's object-level _STUB and _MISSING interface routines
//



//
// Initialize ACRLIB's object-level interfaces
//
static void
acrlibSetPropertiesSpecial
(
    POBJGPU       pGpu,
    POBJACRLIB    pAcrlib
)
{

}



#endif  // ACRCFG_OBJ_SETUP_ALL

#if defined(ACRCFG_ENGINE_SETUP)    // for use by hal init only

//
// per-GPU functions to setup ACRLIB interface function pointers
//

#if defined(ACRCFG_HAL_SETUP_GP10B)

static void     acrlibHalIfacesSetup_GP10B(ACRLIB_HAL_IFACES *) 
                    GCC_ATTRIB_SECTION("imem_acr", "acrlibHalIfacesSetup_GP10B");

static void acrlibHalIfacesSetup_GP10B(ACRLIB_HAL_IFACES *pAcrlibHal)
{

    // GP10B's ACRLIB hal interface function pointer block
    static const ACRLIB_HAL_IFACES acrlibHalIfacesInitStruct_GP10B =
    {

        0 // avoid empty typedef
    };  // acrlibHalIfacesInitStruct_GP10B

    // init GP10B's ACRLIB function ptrs using the init struct above
    *pAcrlibHal = acrlibHalIfacesInitStruct_GP10B;
}

#endif  // GP10X or GP10B



#endif  // ACRCFG_ENGINE_SETUP

// Were any _MOCK interfaces generated into g_acrlib_private.h ?
#define ACRLIB_MOCK_FUNCTIONS_GENERATED    0


#endif  // G_ACRLIB_PRIVATE_H
