
# A list of chips for verification.
# Unlike RM mcheck design, in rtos-flcn, all profile chips are enabled by default.
# Only chips in \%cfg_verify_chips with a 0 are skipped.
# The errors from new added chips can be disabled by setting zero in %cfg_verify_chips
# or using %cfg_warning_chips to give warning message.
check_hash(\%cfg_verify_chips,
# to disable some particular chips
    "t186"      => 0,   # ucode doesn't access cheetah registers, skip it
    "t194"      => 0,   # ucode doesn't access cheetah registers, skip it
    "t210"      => 0,   # ucode doesn't access cheetah registers, skip it
    "t234"      => 0,   # ucode doesn't access cheetah registers, skip it
    "t239"      => 0,   # ucode doesn't access cheetah registers, skip it
    "t256"      => 0,   # ucode doesn't access cheetah registers, skip it
    "it000"     => 0,   # ucode doesn't access cheetah registers, skip it
    "t234d"     => 0,
    "gp107f"    => 0,   # ~2849 errors
    "gv100f"    => 0,   # ~2737 errors
    "tu102f"    => 0,
    "tu101"     => 0,
    "ga101"     => 0,
    "ga102f"    => 0,
    "ga10f"     => 0,   # for PMU, only real differences between GA10B and GA10F are a couple of things like num of GPCs, but there's a lot of unused registers noise that we want to skip
    "ga11b"     => 0,
    "ad103"     => 0,
    "ad104"     => 0,
    "ad106"     => 0,
    "ad107"     => 0,
    "ad102f"    => 0,
    "ad10b"     => 0,
    "gb102"     => 0,
    "ig000"     => 0,
);

#
# These two hashs allow mcheck to automatically create manual
# snapshots from <chip>/net/netlist.h.  This is typically used
# for chips once they stabalize in emulation but still are in
# emulation.  Once they tape out, we should be able to remove
# them and lower the mcheck runtime.
#
# We only run snapshots on the chips_a/chips_hw branch as that is where emulation
# takes place.
#
if ((fastgetcwd =~ /chips_a/) || (fastgetcwd =~ /chips_hw/))
{
    # [mcheck2] current not support COMPAT_IGNORE_ADDED_ALL
    #   use constant COMPAT_ENABLED => 0x01;
    #   use constant COMPAT_IGNORE_PROD => 0x02;
    #   use constant COMPAT_IGNORE_ADDED_BITFIELDS => 0x04;
    #   use constant COMPAT_IGNORE_ADDED_ALL => 0x08;
    %cfg_enforce_emulation_compat = (
        # Syntax: "chip" => flag1 | flag2,
        # "gv100" => COMPAT_ENABLED | COMPAT_IGNORE_PROD | COMPAT_IGNORE_ADDED_BITFIELDS, (example usage, do not delete)
        "gh100" => COMPAT_ENABLED | COMPAT_IGNORE_PROD | COMPAT_IGNORE_ADDED_BITFIELDS,
    );

    # list any emulation netlists to skip in the cfg_enforce_emulation_compat pass
    %cfg_emulation_netlist_skip = (
        # Syntax: "chip" => "net_id1,net_id2",
        # "gv100" => "7,10", (example usage, do not delete)
    );
}

#
# Some chips can be enabled for warnings only.  This is useful for
# cases where the //hw tree takes integrates from a fluid tree,
# and RM shares the code base.
#
# This can be overridden with -G <gpulist>
#
%cfg_warning_chips = (
);

#
# Some files are excluded, mostly ucode files.  This is done
# both for speed, and to make the code coverage results more
# accurate.
#
check_hash(\%cfg_excluded_files,
    # "filename.c"   => 1,
);

#
# Exceptions for matching functions in the first pass of mcheck
# Child functions must themselves be found during the parsing
# step to be added to the list to be checked.  This covers almost
# all common code cases.  Therefore this list should stay very
# short.
#
check_hash(\%cfg_child_exceptions,
);

# used by --reglist to figure out and recognize register read/write operations
check_hash(\%cfg_regop_read,
    # REG_RD32
    'REG_RD.+'        => 1,
);

check_hash(\%cfg_regop_write,
    # REG_WR32
    # REG_WR32_STALL
    'REG_WR.+'        => 1,
);


#
# Defines used when scanning files
#
$cfg_scan_cpp_defines = '';

# We hit a mystery bug that RM header path is not available at branch promotion
# while DVS Build Definition does have the path.  One possible WAR is to enable
# RM header access only on chips_a and chips_hw.  Bug 2437854.
if ((fastgetcwd =~ /chips_a/) || (fastgetcwd =~ /chips_hw/))
{
    #
    # Extra headers included when scanning files.
    #
    # The file path base on LW_ROOT.  This is useful when there are additional register
    # macros defined outside the major headers.
    #
    %cfg_scan_cpp_imacros = (
        # RM_PMU_LW_TEMP_EXTRACT_FROM_REG_***() macros
        # e.g. RM_PMU_LW_TEMP_EXTRACT_FROM_REG_VAL(d,r,f,v) => ((LwTemp)(DRF_VAL_SIGNED(d, r, f, v) << 3))
        "drivers/resman/arch/lwalloc/common/inc/pmu/pmuiftherm.h" => 1,
    );
}


#
# Known failues that are either acceptable (listed first) or temporary until the code can be fixed.
# Please list a bug number for things that are not on a SCS and you cannot get to now.
#
# Rules should be written as specifically as possible so new problems are not masked.
#
# Acceptable syntax:
#   "full-define,function" => 1,
#      * for all chips ignore full-define in function
#   "full-define,function,chip" => 1,
#      * for the listed chip ignore full-define in function
#   "function,chip" => "regex-pattern"
#      * for the listed chip, apply s/regex-pattern// in function.  If the result differs
#        from the original then then this define is ignored.  This is per chip lwrrently
#        as it is easy to write too broad of a rule.
#
check_exception_hash(\%cfg_known_failures,
# Examples:
# 'elpgPowerUp_GK104,[t124]' => 'LW_PDISP_\\w*',
# 'mfifoGetPbdmaState_GF100,[gf100,gf119]' => 'LW_PPBDMA_CHANNEL_\\w*',
# 'LW_PGRAPH_EXCEPTION_EN_CWD_DISABLED,_dumpPgraphExceptionsState_GF100,gp102' => 1,

    ## PASCAL+ exceptions (to be reviewed).
    'diSeqPllPowerdownPll16g_GP10X,[gp102,gp104,gp106,gp108]' => 'LW_PVTRIM_SYS_SPPLL_CFG_EN_LCKDET\\w*',
    'diSeqPllPowerupPll16g_GP10X,[gp102,gp104,gp106,gp108]' => 'LW_PVTRIM_SYS_SPPLL_CFG_EN_LCKDET\\w*',

    ## Difference in TU101/TU104 manuals, Bug 200278488
    'clkAdcPowerOn_GV10X,[tu102,tu104,tu106,tu116,tu117]' => 'LW_PTRIM_SYS_NAFLL_SYSNAFLL_LWVDD_ADC_BACKUP_CTRL_\\w*',
    'clkAdcEnable_GV10X,[tu102,tu104,tu106,tu116,tu117]' => 'LW_PTRIM_SYS_NAFLL_SYSNAFLL_LWVDD_ADC_BACKUP_CTRL_\\w*',

    ## Bug 200340522 _HBM_TEST_I1500 registers are present on only GPUs having HBM.
    'fbHBMSiteTempGet_GV10X,[tu102,tu104,tu106,tu116,tu117]' => 'LW_PFB_FBPA_\\w*',

    # Bug 1904262, _PTRIM_FBPA_ registers deprecated as _PFB_FBPA_ registers exist
    "_diSeqMemPllAction_GM10X,[tu102,tu104,tu106,tu116,tu117]" => "(LW_PTRIM_FBPA_BCAST_\\w+)",

    #Bug 1852433, _DRAMDIV4_REC_CLK_CMD0_CNTR_PA0 replaced with _DRAMPA_CLK0
    #Bug 200374319, source enum update for LWDCLK, UTILSCLK, GPCCLK
    "clkCntrDomInfoGet_GV10X,[tu102,tu104,tu106,tu116,tu117]" => "(LW_PTRIM_FBPA_BCAST_FR_CLK_CNTR_NCLTCCLK_CFG_SOURCE_DRAMDIV4_REC_CLK_CMD0_CNTR_PA0|LW_PTRIM_SYS_NAFLL_FR_CLK_CNTR_LWDCLK_CFG_SOURCE_LWDCLK_NOBG|LW_PTRIM_SYS_FR_CLK_CNTR_UTILS_XTAL_CFG_SOURCE_UTILSCLK|LW_PTRIM_GPC_BCAST_FR_CLK_CNTR_NCGPCCLK_CFG_SOURCE_GPCCLK_NOBG_PROBE_OUT|LW_PTRIM_GPC_FR_CLK_CNTR_NCGPCCLK_CFG_SOURCE_GPCCLK_NOBG_PROBE_OUT)",

    # Bug 200566827
    "pgGc6ExitSeq_GA10X,[ga102, ga103, ga104, ga106, ga107]" => "LW_XVE_PRIV_XV_0_CYA_CFG_DL_UP\\w*|LW_XVE_PRIV_XV_0_CYA_RESET_CFG\\w*",

    # Bug 3386666 - Add temporary mcheck exception for LW_PTRIM_SYS_NAFLL_SYSNAFLL_LWVDD_ADC_CTRL_2_ADC_CTRL_COARSE_OFFSET (Remove after netlist support is deprecated)
    "clkAdcCalProgram_GA100,[gh100,gh100\@net22,gh100\@net23,gh100\@net24,gh100\@net26]" => "LW_PTRIM_SYS_NAFLL_SYSNAFLL_LWVDD_ADC_CTRL_2_ADC_CTRL_COARSE_OFFSET",
    "clkAdcCalProgram_AD10X,[gh100,gh100\@net22,gh100\@net23,gh100\@net24,gh100\@net26]" => "LW_PTRIM_SYS_NAFLL_SYSNAFLL_LWVDD_ADC_CTRL_2_ADC_CTRL_COARSE_\\w*",

    # Bug 200778496 - Add temporaty mcheck exception for LW_FUSE_OPT_ADC_CAL_SENSE_VCM_COARSE_CALIBRATION_DATA
    "fuseStateGet_AD10X,[gh100,gh100\@net22,gh100\@net23,gh100\@net24,gh100\@net26]" => "LW_FUSE_OPT_ADC_CAL_SENSE_VCM_COARSE_CALIBRATION_DATA",

);

#
# [mcheck2] cfg_known_failures_disp
#   another way to set exceptions for disp registers
#
# Syntax:
#   "disp-register-define,function" => 1,
#      * for all chips ignore full-define in function
check_hash(\%cfg_known_failures_disp,
# Example:
# "LW_PDISP_VGA_CR_REG58_SET_DISP_OWNER,dispDispOwner_GF100" => 1,

);



