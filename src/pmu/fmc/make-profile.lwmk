#
# _LWRM_COPYRIGHT_BEGIN_
#
# Copyright 2021-2022 by LWPU Corporation.  All rights reserved.  All
# information contained herein is proprietary and confidential to LWPU
# Corporation.  Any use, reproduction, or disclosure without the written
# permission of LWPU Corporation is prohibited.
#
# _LWRM_COPYRIGHT_END_
#

# Parameters to the makefile
PROD_SIGN ?= 1
AUTOMATE_CSG_SUBMIT ?= 0
PARTITIONS_DRY_RUN_BUILD ?= 0
# End parameters

ifeq ($(PARTITIONS_DRY_RUN_BUILD),1)
  ifeq ($(PROD_SIGN),1)
    $(error Cannot do prod signing on a partitions build dry run)
  endif
endif

ifeq ($(AUTOMATE_CSG_SUBMIT),1)
  ifeq ($(PROD_SIGN),0)
    $(error Cannot automate CSG submit for non-prod build)
  endif
endif

override LW_TARGET_OS   := riscv
override LW_BUILD_TYPE  := release
override LW_TARGET_ARCH := lwriscv

# To make sure we can link against liblwriscv (see lwRiscvCommon.lwmk)
# TODO: we don't actually need floating-point support here.
# Worth it to get LWRISCV_HAS_ABI and LWRISCV_HAS_ARCH changed to
# remove float support?
FPU_SUPPORTED     := true

# Common ucode build settings
# Note: lwCommon sets OUTPUTDIR, but we avoid using it (at least for now)
# b.c. we have a custom dir structure.
include $(LW_SOURCE)/drivers/common/build/lwCommon.lwmk
include $(FW_ROOT)/config/profiles.mk

ifneq ($(LW_DVS_BLD),1)
  APP_P4_CL = $(word 2, $(shell $(PERL) -e 'chdir(qw(..)); delete $$ELW{PWD}; \
                print `$(P4) changes -m1 "$(LW_SOURCE)/..."`;'))
else
  APP_P4_CL = $(CHANGELIST)
endif

PROFILE_BASE_NAME := $(subst _inst,,$(PROFILE))

PMU_PROJ          := $(subst pmu_,,$(PROFILE_BASE_NAME))

UPROC_ARCH        := $(LW_TARGET_ARCH)
RTOS_VERSION      := SafeRTOSv8.4.0-lw1.0
LWOS_VERSION      := dev
MEMMAP_PATH       := $(LW_SOURCE)/drivers/resman/arch/lwalloc/common/inc/pmu/
LW_PROJ           := $(PMU_PROJ)

# Extra defines
ACR_CMN_SRC       := $(LW_SOURCE)/uproc/tegra_acr

LW_ENGINE_MANUALS := $(MANUAL_PATHS)

# liblwriscv paths
LWRISCVX_SDK_ROOT ?= $(LW_SOURCE)/uproc/lwriscv/sdk/$(LWRISCV_SDK_VERSION)
#LWRISCVX_SDK_ROOT ?= $(LW_SOURCE)/../../../lwriscv/release/$(LWRISCV_SDK_VERSION)
LWRISCVX_SDK_PREBUILT := $(LWRISCVX_SDK_ROOT)/prebuilt/$(LWRISCV_SDK_PROFILE)

SIGGEN            := $(LWRISCVX_SDK_ROOT)/tools/siggen_manifest
#XXD              ?= /usr/bin/xxd
XXD               ?= $(PERL) xxd.pl
# Make sure /bin/ is added to PATH so that tar can find gzip
TAR               ?= PATH=/bin/:$$PATH /bin/tar
UNZIP             ?= /usr/bin/unzip

# it must be built at this time
BUILD_DIR         := _out/$(PROFILE)
INSTALL_DIR       := $(BUILD_DIR)/staging

BUILD_DIR_SK      := $(FW_ROOT)/$(BUILD_DIR)/sk
INSTALL_DIR_SK    := $(FW_ROOT)/$(INSTALL_DIR)

# MMINTS-TODO: figure out how to build without using full paths here
BUILD_DIR_PART    := $(FW_ROOT)/$(BUILD_DIR)
INSTALL_DIR_PART  := $(FW_ROOT)/$(INSTALL_DIR)

CHIP_PROFILE      := $(firstword $(subst _, ,$(subst pmu,,$(PROFILE))))
RELEASE_DIR       := $(LW_SOURCE)/drivers/resman/kernel/inc/fmc/monitor/bin/pmu/$(CHIP_PROFILE)
BUILD_SCRIPTS     := $(LW_SOURCE)/uproc/build/scripts

# CSG settings for prod signing
CSG_TAR_DIR           = $(INSTALL_DIR)
CSG_ARCHIVE          ?= $(SEPKERNCFG_PROFILE)_CSG_SIGNING_ARCHIVE
CSG_TAR              ?= $(CSG_TAR_DIR)/$(CSG_ARCHIVE).tgz
CSG_RESULT_PACKAGE   ?= $(PROFILE)_CSG_RES.zip
CSG_POST_SIGN_SCRIPT ?= $(CSG_TAR_DIR)/csg_post_sign.sh

# LIBLWRISCV/libCCC configuration
LWRISCVX_PREBUILT_INC_DIR  := $(LWRISCVX_SDK_PREBUILT)/inc
LWRISCVX_PREBUILT_LIB_DIR  := $(LWRISCVX_SDK_PREBUILT)/lib
LIBLWRISCV_CONFIG_H        := $(LWRISCVX_PREBUILT_INC_DIR)/liblwriscv/g_lwriscv_config.h
LIBLWRISCV_CONFIG_MK       := $(LWRISCVX_SDK_PREBUILT)/g_lwriscv_config.mk

# Manifest
ifeq ($(MANIFEST_PROFILE_OVERRIDE),)
  MANIFEST_PROFILE := $(PROFILE_BASE_NAME)
else
  MANIFEST_PROFILE := $(MANIFEST_PROFILE_OVERRIDE)
endif
MANIFEST_SRC               := $(FW_ROOT)/manifests/manifest_$(MANIFEST_PROFILE).c

TARGET_PARTITIONS_PREFIX   := $(INSTALL_DIR)/g_partitions_$(PROFILE)

# Target file names
TARGET_SK_NAME             := g_sepkern_main_$(PROFILE)
TARGET_SK_PREFIX           := $(FW_ROOT)/$(INSTALL_DIR)/$(TARGET_SK_NAME)

TARGET_SK_OUT_NAME         := g_sepkern_$(PROFILE)
TARGET_SK_OUT_PREFIX       := $(INSTALL_DIR)/$(TARGET_SK_OUT_NAME)

TARGET_MANIFEST_PREFIX     := $(INSTALL_DIR)/g_sepkern_$(PROFILE)_manifest

TARGET_MANIFEST_BIN        := $(TARGET_MANIFEST_PREFIX).bin
TARGET_MANIFEST_HEX        := $(TARGET_MANIFEST_PREFIX).hex
TARGET_MANIFEST_OBJ        := $(TARGET_MANIFEST_PREFIX).o

TARGET_SK_ELF              := $(TARGET_SK_OUT_PREFIX).elf
TARGET_SK_OBJDUMP          := $(TARGET_SK_OUT_PREFIX).objdump
TARGET_SK_READELF          := $(TARGET_SK_OUT_PREFIX).readelf
TARGET_SK_NM               := $(TARGET_SK_OUT_PREFIX).nm
TARGET_SK_TEXT             := $(TARGET_SK_PREFIX)_image.text
TARGET_SK_DATA             := $(TARGET_SK_PREFIX)_image.data

TARGET_PARTITIONS_ELF      := $(TARGET_PARTITIONS_PREFIX).elf
TARGET_PARTITIONS_OBJDUMP  := $(TARGET_PARTITIONS_PREFIX).objdump
TARGET_PARTITIONS_READELF  := $(TARGET_PARTITIONS_PREFIX).readelf
TARGET_PARTITIONS_NM       := $(TARGET_PARTITIONS_PREFIX).nm
TARGET_PARTITIONS_TEXT     := $(TARGET_PARTITIONS_PREFIX).text
TARGET_PARTITIONS_DATA     := $(TARGET_PARTITIONS_PREFIX).data
TARGET_PARTITIONS_COMB_BIN := $(TARGET_PARTITIONS_PREFIX).bin

TARGET_FINAL_PREFIX        := g_sepkern_$(PROFILE)
TARGET_FINAL_PREFIX_PATH   := $(INSTALL_DIR)/$(TARGET_FINAL_PREFIX)

TARGET_FINAL_TEXT          := $(TARGET_FINAL_PREFIX_PATH)_image.text
TARGET_FINAL_DATA          := $(TARGET_FINAL_PREFIX_PATH)_image.data


# Final output files - these are used in PMU build (or runtime mf_sk patching in RM)
# MMINTS-TODO: right now this matches legacy inconsistent naming, might want to change in the future!
# Only use _BASE_ values with PROFILE_SUFFIX! Just a silly hack to match legacy naming

ifeq ($(USE_PL0_CONFIG),true)
  PROFILE_SUFFIX := _inst
else
  PROFILE_SUFFIX :=
endif

TARGET_BASE_PREFIX         := g_sepkern_$(PROFILE_BASE_NAME)
TARGET_BASE_PREFIX_PATH    := $(INSTALL_DIR)/$(TARGET_BASE_PREFIX)
TARGET_FINAL_MANIFEST      := $(TARGET_BASE_PREFIX_PATH)_manifest$(PROFILE_SUFFIX).bin
TARGET_FINAL_MANIFEST_HEX  := $(TARGET_BASE_PREFIX_PATH)_manifest$(PROFILE_SUFFIX).hex

TARGET_ENC_TEXT_DEBUG      := $(TARGET_FINAL_PREFIX_PATH)_debug_image.text.encrypt.bin
TARGET_ENC_TEXT_PROD       := $(TARGET_FINAL_TEXT).encrypt.bin
TARGET_ENC_DATA_DEBUG      := $(TARGET_FINAL_PREFIX_PATH)_debug_image.data.encrypt.bin
TARGET_ENC_DATA_PROD       := $(TARGET_FINAL_DATA).encrypt.bin
TARGET_ENC_MANIFEST_DEBUG  := $(TARGET_BASE_PREFIX_PATH)_manifest$(PROFILE_SUFFIX).bin_dbg_enc.bin
TARGET_ENC_MANIFEST_PROD   := $(TARGET_BASE_PREFIX_PATH)_manifest$(PROFILE_SUFFIX).bin_prd_enc.bin
TARGET_IMAGE_DEBUG         := $(TARGET_BASE_PREFIX_PATH)_signed_sk_mf$(PROFILE_SUFFIX)_img.bin_dbg_enc.bin
TARGET_IMAGE_PROD          := $(TARGET_BASE_PREFIX_PATH)_signed_sk_mf$(PROFILE_SUFFIX)_img.bin_prd_enc.bin
TARGET_DESC_DEBUG          := $(TARGET_BASE_PREFIX_PATH)_signed_sk_mf$(PROFILE_SUFFIX)_desc.bin_dbg_enc.bin
TARGET_DESC_PROD           := $(TARGET_BASE_PREFIX_PATH)_signed_sk_mf$(PROFILE_SUFFIX)_desc.bin_prd_enc.bin

TARGET_IMAGES :=
ifeq ($(PARTITIONS_DRY_RUN_BUILD),0)
  # If not doing partitions build dry run, add SK-dependent files to release
  TARGET_IMAGES += $(TARGET_SK_ELF) $(TARGET_SK_OBJDUMP) $(TARGET_SK_READELF) $(TARGET_SK_NM)
  TARGET_IMAGES += $(TARGET_ENC_TEXT_DEBUG) $(TARGET_ENC_DATA_DEBUG) $(TARGET_ENC_MANIFEST_DEBUG) $(TARGET_IMAGE_DEBUG) $(TARGET_DESC_DEBUG)
endif
TARGET_IMAGES += $(TARGET_FINAL_MANIFEST_HEX)
TARGET_IMAGES += $(TARGET_PARTITIONS_ELF) $(TARGET_PARTITIONS_OBJDUMP) $(TARGET_PARTITIONS_READELF) $(TARGET_PARTITIONS_NM)
TARGET_IMAGES += $(TARGET_PARTITIONS_COMB_BIN)

CSG_TARGET_IMAGES := $(TARGET_ENC_TEXT_PROD) $(TARGET_ENC_DATA_PROD) $(TARGET_ENC_MANIFEST_PROD) $(TARGET_IMAGE_PROD) $(TARGET_DESC_PROD)

ifeq ($(AUTOMATE_CSG_SUBMIT),1)
  ifeq ($(PROD_SIGN),1)
    TARGET_IMAGES += $(CSG_TARGET_IMAGES)
  endif
endif

include $(LIBLWRISCV_CONFIG_MK)

# rely on (given) variables and prebuilt liblwriscv

# vars are filled later
EXTRA_CFLAGS ?=
EXTRA_LDFLAGS ?=
EXTRA_ASFLAGS ?=

# Stub to satisfy lwCommon.lwmk
.PHONY: show_config
show_config:

default: build
.PHONY: default build clobber

LDSCRIPT_DEFINES ?=
GNATPREP_DEFINES :=

ifeq ($(USE_PL0_CONFIG),true)
  EXTRA_CFLAGS += -DUSE_PL0_CONFIG=1
  GNATPREP_DEFINES += -DUSE_PL0_CONFIG=True
else
  EXTRA_CFLAGS += -DUSE_PL0_CONFIG=0
  GNATPREP_DEFINES += -DUSE_PL0_CONFIG=False
endif

EXTRA_CFLAGS += -fno-jump-tables

EXTRA_CFLAGS += -DLWRISCV_MMODE_REGS_RO

###############################################################################
# The install process is handled by a perl-script to avoid the unnecessary
# complication of host-specific process in make.
###############################################################################

RELEASE_SCRIPT = $(BUILD_SCRIPTS)/release-imgs-if-changed.pl

COMMA := ,
EMPTY :=
SPACE := $(EMPTY) $(EMPTY)

ifeq ($(PARTITIONS_DRY_RUN_BUILD),0)
  # Since encryption uses random IV, this essentially forces release always.
  RELEASE_IMG_CHECK := --image $(TARGET_ENC_TEXT_DEBUG)
  # Also force installation just in case
  RELEASE_IMG_ARGS += --force
else
  RELEASE_IMG_CHECK := --image $(TARGET_PARTITIONS_COMB_BIN)
endif

RELEASE_CSG_IMG_CHECK := --image $(TARGET_ENC_TEXT_PROD)

RELEASE_IMG_ARGS += --p4 $(P4)

RELEASE_PATH = $(RELEASE_DIR)

RELEASE_IMG_ARGS += --release-path $(RELEASE_PATH)

RELEASE_IMG_TARGET_ARGS := --release-files            \
  $(subst $(SPACE),$(COMMA),$(strip $(TARGET_IMAGES)))

RELEASE_IMG_CSG_TARGET_ARGS := --release-files        \
  $(subst $(SPACE),$(COMMA),$(strip $(CSG_TARGET_IMAGES)))

build: $(TARGET_IMAGES) $(RELEASE_PATH)
	$(PERL) $(RELEASE_SCRIPT) $(RELEASE_IMG_CHECK) $(RELEASE_IMG_ARGS) $(RELEASE_IMG_TARGET_ARGS)

clobber:
	$(RM) -r $(BUILD_DIR)

RVMKIMG_PARAMS_DEBUG := \
    --monitorCode       $(TARGET_ENC_TEXT_DEBUG)     \
    --monitorData       $(TARGET_ENC_DATA_DEBUG)     \
    --manifest          $(TARGET_ENC_MANIFEST_DEBUG) \
    --outFilePrefix     $(TARGET_FINAL_PREFIX)       \
    --outDir            $(INSTALL_DIR)               \
    --useMonitor
RVMKIMG_DEPS_DEBUG := $(TARGET_ENC_TEXT_DEBUG) $(TARGET_ENC_DATA_DEBUG) $(TARGET_ENC_MANIFEST_DEBUG)

RVMKIMG_PARAMS_PROD := \
    --monitorCode       $(TARGET_ENC_TEXT_PROD)      \
    --monitorData       $(TARGET_ENC_DATA_PROD)      \
    --manifest          $(TARGET_ENC_MANIFEST_PROD)  \
    --outFilePrefix     $(TARGET_FINAL_PREFIX)       \
    --outDir            $(INSTALL_DIR)               \
    --useMonitor
RVMKIMG_DEPS_PROD := $(TARGET_ENC_TEXT_PROD) $(TARGET_ENC_DATA_PROD) $(TARGET_ENC_MANIFEST_PROD)

ifeq ($(PARTITIONS_DRY_RUN_BUILD),0)
$(TARGET_IMAGE_DEBUG) $(TARGET_DESC_DEBUG) &: $(RVMKIMG_DEPS_DEBUG)
	$(ECHO) generating $(notdir $(TARGET_IMAGE_DEBUG))
	$(PERL) $(BUILD_SCRIPTS)/mkimage/rvmkimg.pl $(RVMKIMG_PARAMS_DEBUG)
	$(MOVE) $(INSTALL_DIR)/$(TARGET_FINAL_PREFIX)_image.bin $(TARGET_IMAGE_DEBUG)
	$(MOVE) $(INSTALL_DIR)/$(TARGET_FINAL_PREFIX)_desc.bin $(TARGET_DESC_DEBUG)
endif

ifeq ($(AUTOMATE_CSG_SUBMIT),1)
  ifeq ($(PROD_SIGN),1)
    CSG_ELW = prod
  else
    CSG_ELW = dev
  endif

  # MMINTS-TODO: this python will only work on LSF! Change this once automation supports python3.3, which is the latest version in //sw/tools/linux/python/
  PYTHON3 ?= /home/utils/Python/3.9/3.9.5-20210517/bin/python3
  # MMINTS-TODO: the automation path may change soon!
  CSG_AUTOMATION_PATH ?= $(P4ROOT)/sw/pvt/dknobloch/automation

  $(CSG_RESULT_PACKAGE): $(CSG_TAR)
	$(PYTHON3) $(CSG_AUTOMATION_PATH)/fwsSubmitPeregrine.py --elw $(CSG_ELW) --description PMU --changelist $(APP_P4_CL) --package $(CSG_TAR) --waitForRes $(CSG_RESULT_PACKAGE)

  $(RVMKIMG_DEPS_PROD) &: $(CSG_RESULT_PACKAGE) $(CSG_POST_SIGN_SCRIPT)
	$(UNZIP) -o $(CSG_RESULT_PACKAGE) '_out/*'
	$(RM) $(CSG_RESULT_PACKAGE)
	/bin/bash $(CSG_POST_SIGN_SCRIPT)

  $(TARGET_IMAGE_PROD) $(TARGET_DESC_PROD) &: $(RVMKIMG_DEPS_PROD)
	$(ECHO) generating $(notdir $(TARGET_IMAGE_PROD))

  CSG_RELEASE_CMD :=
else
  CSG_RELEASE_CMD := $(PERL) $(RELEASE_SCRIPT) $(RELEASE_CSG_IMG_CHECK) $(RELEASE_IMG_ARGS) $(RELEASE_IMG_CSG_TARGET_ARGS)
endif

# Rules to create partitions
define add-part =
$(info adding partition rule: $(1))
install.partitions: install.part_$(1)
install.part_$(1): $(INSTALL_DIR_PART)/.keep
	$$(MAKE) -f make-partition.lwmk PART_DIR=$(1) install
.PHONY: install.part_$(1)
endef
$(foreach c,$(sort $(PARTITIONS)),$(eval $(call add-part,$(c))))
.PHONY: install.partitions

### SK - Spark SK + policies
SEPKERN_ROOT         := $(LWRISCVX_SDK_ROOT)/monitor/sepkern
SEPKERN_INSTALL_DIR  := $(INSTALL_DIR_SK)
SEPKERN_POLICY_PATH  := $(INSTALL_DIR_SK)/policies

INSTALL_DIR_POLICIES := $(SEPKERN_POLICY_PATH)

# Policies
ifeq ($(POLICIES_PROFILE_OVERRIDE),)
  POLICIES_PROFILE := $(PROFILE_BASE_NAME)
else
  POLICIES_PROFILE := $(POLICIES_PROFILE_OVERRIDE)
endif
POLICY_FILE_IN       := policies/policy_$(POLICIES_PROFILE).ads.in
POLICY_FILE          := $(INSTALL_DIR_POLICIES)/policy_$(POLICIES_PROFILE).ads

# MMINTS-TODO: sync this up with sepkern/config/config.mk!
#GNAT_COMMUNITY_PATH ?= $(LW_TOOLS)/riscv/adacore/gnat_community/linux/target_riscv/20200818
GNAT_PRO_PATH        ?= $(LW_TOOLS)/adacore/gnat_pro_ada/linux/gnat_pro_ent_ada/target_riscv/20200209
SPARK_PRO_PATH       ?= $(LW_TOOLS)/adacore/gnat_pro_ada/linux/spark_pro/20200212

GNAT_PATH            ?= $(GNAT_PRO_PATH)
GNATPREP             := $(GNAT_PATH)/bin/riscv64-elf-gnatprep

$(TARGET_SK_OBJDUMP) $(TARGET_SK_READELF) $(TARGET_SK_TEXT) $(TARGET_SK_DATA): $(TARGET_SK_ELF)

$(TARGET_SK_ELF): install.sk

install.sk: build.sk

SK_BUILD_ARGS=POLICY_PATH=$(SEPKERN_POLICY_PATH)
SK_BUILD_ARGS+=POLICY_FILE_NAME=policy_$(POLICIES_PROFILE).ads PARTITION_COUNT=$(SK_PARTITION_COUNT)
SK_BUILD_ARGS+=TARGET_NAME=$(TARGET_SK_NAME)

# If not PL0 build, we need SK to set PLMs
ifneq ($(USE_PL0_CONFIG),true)
  SK_BUILD_ARGS+=PLM_LIST_FILE_NAME=$(PLM_LIST_FILE)
endif

build.sk: $(BUILD_DIR_SK)/.keep $(INSTALL_DIR_SK)/.keep $(POLICY_FILE)
	$(ECHO) Building SK...
	$(MAKE) -C $(SEPKERN_ROOT) ENGINE=$(ENGINE) CHIP=$(PROJ) INSTALL_PATH=$(INSTALL_DIR_SK) BUILD_PATH=$(BUILD_DIR_SK) OUTPUT_PATH=$(BUILD_DIR_SK) $(SK_BUILD_ARGS) install
	$(MOVE) $(TARGET_SK_PREFIX).elf $(TARGET_SK_ELF)
.PHONY: build.sk install.sk

# Rules to create directories
DIRS_TO_CREATE:= $(filter INSTALL_DIR%,$(.VARIABLES)) $(filter BUILD_DIR%,$(.VARIABLES)) RELEASE_DIR
define add-dir =
$(info adding dir rule: $(1))
$(1)/.keep:
	$(MKDIR) $(1)
	$(ECHO) keep > $(1)/.keep
endef
$(foreach c,$(sort $(foreach d,$(DIRS_TO_CREATE),$($(d)))),$(eval $(call add-dir,$(c))))

$(INSTALL_DIR_PART)/.keep: $(BUILD_DIR_PART)/.keep

##################### Signing and final image generation
$(TARGET_FINAL_TEXT): $(TARGET_SK_TEXT) $(TARGET_PARTITIONS_TEXT) $(INSTALL_DIR)/.keep
	$(CAT) $(TARGET_SK_TEXT) $(TARGET_PARTITIONS_TEXT) > $@

$(TARGET_FINAL_DATA): $(TARGET_SK_DATA) $(TARGET_PARTITIONS_DATA) $(INSTALL_DIR)/.keep
	$(CAT) $(TARGET_SK_DATA) $(TARGET_PARTITIONS_DATA) > $@

ifneq ($(TARGET_FINAL_MANIFEST),$(TARGET_MANIFEST_BIN))
  $(TARGET_FINAL_MANIFEST): $(TARGET_MANIFEST_BIN) $(INSTALL_DIR)/.keep
	  $(CAT) $(TARGET_MANIFEST_BIN) > $@
endif

ifneq ($(TARGET_FINAL_MANIFEST_HEX),$(TARGET_MANIFEST_HEX))
  $(TARGET_FINAL_MANIFEST_HEX): $(TARGET_MANIFEST_HEX) $(INSTALL_DIR)/.keep
	  $(CAT) $(TARGET_MANIFEST_HEX) > $@
endif

ifeq ($(PARTITIONS_DRY_RUN_BUILD),0)
$(TARGET_ENC_TEXT_DEBUG) $(TARGET_ENC_DATA_DEBUG) $(TARGET_ENC_MANIFEST_DEBUG) $(CSG_TAR) $(CSG_POST_SIGN_SCRIPT) &: $(TARGET_FINAL_TEXT) $(TARGET_FINAL_DATA) $(TARGET_FINAL_MANIFEST)
	$(ECHO) "Generating debug-signed/encrypted build"
	$(SIGGEN) -manifest $(TARGET_FINAL_MANIFEST) -code $(TARGET_FINAL_TEXT) -data $(TARGET_FINAL_DATA) -chip $(SIGGEN_CHIP) -mode 0
	$(MOVE) $(addsuffix .encrypt.bin.out.bin,$(TARGET_FINAL_MANIFEST)) $(TARGET_ENC_MANIFEST_DEBUG)
	$(RM) $(addsuffix .encrypt.bin.sig.bin,$(TARGET_FINAL_MANIFEST))
	$(RM) $(addsuffix .encrypt.bin,$(TARGET_FINAL_MANIFEST))
	$(MOVE) $(addsuffix .encrypt.bin,$(TARGET_FINAL_TEXT)) $(TARGET_ENC_TEXT_DEBUG)
	$(MOVE) $(addsuffix .encrypt.bin,$(TARGET_FINAL_DATA)) $(TARGET_ENC_DATA_DEBUG)
	$(ECHO) "Generating files for prod-signed/encrypted build"
	$(MKDIR) $(CSG_TAR_DIR)/$(CSG_ARCHIVE)
	$(MKDIR) $(CSG_TAR_DIR)/$(CSG_ARCHIVE)/_out/$(PROFILE)/staging
	$(ECHO) "-manifest $(subst $(FW_ROOT)/,,$(TARGET_FINAL_MANIFEST)) -code $(subst $(FW_ROOT)/,,$(TARGET_FINAL_TEXT)) -data $(subst $(FW_ROOT)/,,$(TARGET_FINAL_DATA)) -chip $(SIGGEN_CHIP) -mode $(PROD_SIGN)" > $(CSG_TAR_DIR)/$(CSG_ARCHIVE)/siggen_params.txt
	$(ECHO) $(CSG_SIGNING_PROFILE) > $(CSG_TAR_DIR)/$(CSG_ARCHIVE)/profile.txt
	$(COPY) $(TARGET_FINAL_TEXT) $(TARGET_FINAL_DATA) $(TARGET_FINAL_MANIFEST) $(CSG_TAR_DIR)/$(CSG_ARCHIVE)/_out/$(PROFILE)/staging/
	$(ECHO) $(PATH)
	$(TAR) -czf $(CSG_TAR) -C $(CSG_TAR_DIR) $(CSG_ARCHIVE)
	$(ECHO) '#!/bin/bash' > $(CSG_POST_SIGN_SCRIPT)
	$(ECHO) "$(MKDIR) $(INSTALL_DIR)" >> $(CSG_POST_SIGN_SCRIPT)
	$(ECHO) "$(MOVE) $(addsuffix .encrypt.bin.out.bin,$(TARGET_FINAL_MANIFEST)) $(TARGET_ENC_MANIFEST_PROD);" >> $(CSG_POST_SIGN_SCRIPT)
	$(ECHO) "$(PERL) $(BUILD_SCRIPTS)/mkimage/rvmkimg.pl $(RVMKIMG_PARAMS_PROD);" >> $(CSG_POST_SIGN_SCRIPT)
	$(ECHO) "$(MOVE) $(INSTALL_DIR)/$(TARGET_FINAL_PREFIX)_image.bin $(TARGET_IMAGE_PROD);" >> $(CSG_POST_SIGN_SCRIPT)
	$(ECHO) "$(MOVE) $(INSTALL_DIR)/$(TARGET_FINAL_PREFIX)_desc.bin $(TARGET_DESC_PROD);" >> $(CSG_POST_SIGN_SCRIPT)
	$(ECHO) "$(CSG_RELEASE_CMD)" >> $(CSG_POST_SIGN_SCRIPT)
	$(ECHO) "Saved CSG package as $(CSG_TAR), post-sign script is $(CSG_POST_SIGN_SCRIPT)"
	$(ECHO) ""
endif

##################### linking settings
LIBS :=
# add partition libraries
LIBS += $(addprefix part_,$(PARTITIONS))
# Add risc-v sdk
LIBS += lwriscv

ifeq ($(USE_LIBCCC),true)
LIBS += CCC
endif

SUBMAKE_TARGETS :=
LIB_SRC_DIRS :=
LINK_DEPS :=
LIB_FLAGS :=

CMN_SIZE_FLAGS := -DSEPKERN_IMEM_LIMIT=0x1000 -DSEPKERN_DMEM_LIMIT=0x1000 \
                  -DLIBLWRISCV_IMEM_SIZE=$(LIBLWRISCV_IMEM_SIZE) -DLIBLWRISCV_DMEM_RO_SIZE=$(LIBLWRISCV_DMEM_RO_SIZE) \
                  -DPMU_IMEM_SIZE=$(LWRISCV_IMEM_SIZE) -DPMU_DMEM_SIZE=$(LWRISCV_DMEM_SIZE) \
                  -DDEBUG_BUFFER_SIZE=$(DEBUG_BUFFER_SIZE)
LDSCRIPT_DEFINES += $(CMN_SIZE_FLAGS)
EXTRA_CFLAGS     += $(CMN_SIZE_FLAGS)
EXTRA_ASFLAGS    += $(CMN_SIZE_FLAGS)
GNATPREP_DEFINES += $(subst 0x,,$(CMN_SIZE_FLAGS))

##################### Submake settings
SUBMAKE_NAMESPACE   := pmu_fmc
SUBMAKE_OUTPUTDIR   := _out/$(SUBMAKE_NAMESPACE)/$(LW_PROJ)$(PROFILE_SUFFIX)_$(UPROC_ARCH)_$(LW_BUILD_TYPE)
SUBMAKE_CFLAGS      :=

PMUCFG_PROFILE ?= pmu-$(PMU_PROJ)

###############################################################################
# Uproc CheetAh ACR Library
###############################################################################

ifeq ($(LIB_TEGRA_ACR),true)
    # Also used as a general check for ACR build here

    LIB_ACR_CMN := $(ACR_CMN_SRC)/$(SUBMAKE_OUTPUTDIR)/libAcrCmn.a
    SUBMAKE_TARGETS += ACR_CMN

    $(LIB_ACR_CMN): build.submake.ACR_CMN ;

    LIB_SRC_DIRS += $(ACR_CMN_SRC)
    LIBS         += AcrCmn

    LINK_DEPS += $(LIB_ACR_CMN)

    TEGRA_ACR_FLAGS := -DPMU_TEGRA_ACR_PARTITION \
                       -DTEGRA_ACR_IMEM_SIZE=$(TEGRA_ACR_IMEM_SIZE) -DTEGRA_ACR_DMEM_SIZE=$(TEGRA_ACR_DMEM_SIZE) \
                       -DTEGRA_ACR_DMEM_RO_SIZE=$(TEGRA_ACR_DMEM_RO_SIZE)

    LDSCRIPT_DEFINES += $(TEGRA_ACR_FLAGS)
    EXTRA_CFLAGS     += $(TEGRA_ACR_FLAGS)
    EXTRA_ASFLAGS    += $(TEGRA_ACR_FLAGS)
    GNATPREP_DEFINES += $(subst 0x,,$(TEGRA_ACR_FLAGS))

    SUBMAKE_CFLAGS += -DPMU_RTOS -DUPROC_RISCV -DPMU_TEGRA_ACR_PARTITION -DPMU_BAREMODE_PARTITION -DLWRISCV_MMODE_REGS_RO
    SUBMAKE_CFLAGS += -fstack-protector-all # ACR submake should always have stack protector!
    SUBMAKE_CFLAGS += -include $(FW_ROOT)/partitions/tegra_acr/config/tegra_acr_part.h
endif

#####################  Manifest

# Needed to placate build errors in liblwriscv. Not actually useful.
ifndef LWRISCV_APP_IMEM_LIMIT
  EXTRA_CFLAGS += -DLWRISCV_APP_IMEM_LIMIT=$(LWRISCV_IMEM_SIZE)-0x1000
endif
ifndef LWRISCV_APP_DMEM_LIMIT
  EXTRA_CFLAGS += -DLWRISCV_APP_DMEM_LIMIT=$(LWRISCV_DMEM_SIZE)-0x1000
endif

manifest: $(TARGET_MANIFEST_BIN) $(TARGET_MANIFEST_HEX)
.PHONY: manifest

$(TARGET_MANIFEST_BIN): $(MANIFEST_SRC) $(INSTALL_DIR)/.keep
	$(ECHO) compiling manifest
	$(CC) $(CFLAGS) $(MANIFEST_SRC) $(INCLUDES) -I$(LWRISCVX_SDK_ROOT)/inc/lwpu-sdk -Wno-sign-colwersion -include $(LIBLWRISCV_CONFIG_H) -c -o $(TARGET_MANIFEST_OBJ)
	$(OBJCOPY) -O binary -j .rodata.manifest $(TARGET_MANIFEST_OBJ) $(TARGET_MANIFEST_BIN)

$(TARGET_MANIFEST_HEX): $(TARGET_MANIFEST_BIN)
	$(ECHO) "AppVersion: $(APP_P4_CL)" > $@
ifeq ($(PARTITIONS_DRY_RUN_BUILD),1)
	$(ECHO) "(PARTITIONS DRY RUN BUILD)" >> $@
endif
	$(XXD) $(TARGET_MANIFEST_BIN) >> $@


##################### Policies

$(POLICY_FILE): $(POLICY_FILE_IN) $(INSTALL_DIR_POLICIES)/.keep
	$(GNATPREP) -c $(GNATPREP_DEFINES) $< $@

###############################################################################
# Link the target
###############################################################################

LIBDIRS := $(addsuffix /$(SUBMAKE_OUTPUTDIR),$(LIB_SRC_DIRS))
LIBDIRS += $(LWRISCVX_PREBUILT_LIB_DIR) $(INSTALL_DIR_PART)

LIB_FLAGS += $(addprefix -L,$(LIBDIRS))
LIB_FLAGS += $(addprefix -l,$(LIBS))

LDSCRIPT_IN := $(FW_ROOT)/build/ldscript.ld.in
LDSCRIPT    := $(INSTALL_DIR)/ldscript.ld

### Those flags and includes are for manifest and submake processing.

# lwriscv copy of lwpu sdk.
# NOTE: DO NOT ADD LWRISCV lwpu-sdk HERE!
# This is disabled to allow partitions to use main sdk instead
# and avoid conflicts (lwriscv sdk often lags behind main, if mixing
# happens this can cause build failures).
# -Ilwidia-sdk is added explicitly to targets that need it.
#INCLUDES += $(LWRISCVX_SDK_ROOT)/inc/lwpu-sdk

# Add liblwriscv to include path
INCLUDES += $(LWRISCVX_PREBUILT_INC_DIR)
# Add LWRISCV SDK to include path
INCLUDES += $(LWRISCVX_SDK_ROOT)/inc
# Add chip headers to include path
INCLUDES += $(LW_ENGINE_MANUALS)
INCLUDES := $(addprefix -I,$(INCLUDES))

EXTRA_CFLAGS += $(INCLUDES)
# Don't put uninitialized global variables in common place, keep them in partition's bss
EXTRA_CFLAGS += -fno-common
# EXTRA_CFLAGS += $(SUBMAKE_CFLAGS) # DO NOT DO THAT HERE! This can cause issues with stuff like fstack-protector!

EXTRA_ASFLAGS += $(INCLUDES)

#EXTRA_LDFLAGS += -Wl,--print-gc-sections # Can be helpful sometimes, but not using right now
EXTRA_LDFLAGS += -Wl,--print-memory-usage
EXTRA_LDFLAGS += -Wl,-Map=$(INSTALL_DIR)/g_link.log
EXTRA_LDFLAGS += -Wl,--orphan-handling=error # necessary for ld script validation!
EXTRA_LDFLAGS += -Wl,--start-group $(LIB_FLAGS) -Wl,--end-group
EXTRA_LDFLAGS += -nostdlib -nostartfiles -T$(LDSCRIPT)

# Actually finalize CFLAGS, ASFLAGS, LDFLAGS
include $(LWRISCVX_SDK_ROOT)/build/build_flags.mk


$(LDSCRIPT): $(LDSCRIPT_IN) $(INSTALL_DIR)/.keep
	$(CPP) -x c -P -o $@ $(LDSCRIPT_DEFINES) $(INCLUDES) -include $(LIBLWRISCV_CONFIG_H) $(LDSCRIPT_IN)

$(TARGET_PARTITIONS_ELF): install.partitions $(LDSCRIPT) $(LINK_DEPS)
	$(CC) $(CFLAGS) $(LDFLAGS) -o $(TARGET_PARTITIONS_ELF)

link.partitions: $(TARGET_PARTITIONS_ELF)
.PHONY: link.partitions

# Pull out code and data sections into the code and data portions of final image
$(TARGET_PARTITIONS_TEXT) : $(TARGET_PARTITIONS_ELF)
	$(OBJCOPY) -O binary -j '.partition_*code' $^ $@

$(TARGET_PARTITIONS_DATA) : $(TARGET_PARTITIONS_ELF)
	$(OBJCOPY) -O binary -j '.partition_*data' $^ $@

# Generate combined image - not actually used for anything except for dry run
# build release checks.
$(TARGET_PARTITIONS_COMB_BIN) : $(TARGET_MANIFEST_BIN) $(TARGET_PARTITIONS_TEXT) $(TARGET_PARTITIONS_DATA)
	$(CAT) $(TARGET_MANIFEST_BIN) $(TARGET_PARTITIONS_TEXT) $(TARGET_PARTITIONS_DATA) > $@

###############################################################################
# Export variables used by sub-makefiles ilwoked by this makefile
###############################################################################

export PMUCFG_PROFILE
export FPU_SUPPORTED
export LW_TARGET_OS
export LW_BUILD_TYPE
export LW_TARGET_ARCH
export UPROC_ARCH
export RTOS_VERSION
export LWOS_VERSION
export MEMMAP_PATH
export LW_PROJ
export ACR_CMN_SRC
export LWRISCV_SDK_VERSION
export LWRISCVX_SDK_ROOT
export LWRISCVX_SDK_PREBUILT
export BUILD_DIR_PART
export INSTALL_DIR_PART
export PROJ
export ARCH
export FW_ROOT
export LWRISCVX_SDK_ROOT
export LWRISCVX_PREBUILT_INC_DIR
export LWRISCVX_PREBUILT_LIB_DIR
export LIBLWRISCV_CONFIG_H
export LIBLWRISCV_CONFIG_MK
export MANUAL_PATHS
export LW_ENGINE_MANUALS
export LW_MANUALS_ROOT
export EXTRA_CFLAGS
export EXTRA_ASFLAGS
export SUBMAKE_CFLAGS

###############################################################################
# Define a utility macro for ilwoking make (submake) on any external libraries
# or utilities that this build depends upon. The macro will establish the
# targets and dependencies between the builds, override the output directory
# of the submake build, and pass any other (optional) make arguments to the
# submake build.
#
# Arguments:
#     $(1) - name of the submake build
###############################################################################

define SUBMAKE_DEFINITION
  .PHONY: build.submake.$(1) clobber.submake.$(1)

  build: build.submake.$(1)
  clobber: clobber.submake.$(1)

  $(1)_MAKE_ARGS ?=

  build.submake.$(1) clobber.submake.$(1):
	  @$$(MAKE) -C $$($(1)_SRC) -f makefile.lwmk \
        OUTPUTDIR=$$(SUBMAKE_OUTPUTDIR)          \
        LW_TARGET_ARCH=$$(LW_TARGET_ARCH)        \
        $$($(1)_MAKE_ARGS)                       \
        $$(MAKECMDGOALS)
endef

###############################################################################
# Create the target/rule definitions for each submake target
###############################################################################

$(foreach target, $(SUBMAKE_TARGETS), \
  $(eval $(call SUBMAKE_DEFINITION,$(strip $(target)))))

# Generic objdump etc rules

%.readelf: %.elf
	$(ECHO) "AppVersion: $(APP_P4_CL)" > $@
ifeq ($(PARTITIONS_DRY_RUN_BUILD),1)
	$(ECHO) "(PARTITIONS DRY RUN BUILD)" >> $@
endif
	$(READELF) --all $^ >> $@

%.objdump: %.elf
	$(ECHO) "AppVersion: $(APP_P4_CL)" > $@
ifeq ($(PARTITIONS_DRY_RUN_BUILD),1)
	$(ECHO) "(PARTITIONS DRY RUN BUILD)" >> $@
endif
	$(OBJDUMP) -S $^ >> $@

%.nm: %.elf
	$(ECHO) "AppVersion: $(APP_P4_CL)" > $@
ifeq ($(PARTITIONS_DRY_RUN_BUILD),1)
	$(ECHO) "(PARTITIONS DRY RUN BUILD)" >> $@
endif
	$(NM) -S -n $^ >> $@

