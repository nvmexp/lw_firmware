####################################################################
#
# Config file for pmu-config.
#

no warnings qw(bareword);
no strict qw(subs);

#
# Profile definitions.
# Each profile is made up of one or more categories which are exelwted
# in the order the category *definition* appears below.
#

#
# Define profiles for each supported chip-family.  Each profile specifies the
# features that are supported in that family which in turn dictacts the source
# files which must be built and included in the image.
#
# The order of DEFINE_PROFILE macro decides the sequence used in range operator
# '...' in profile pattern lists in Features.pm and other script files.
#
DEFINE_PROFILE "pmu-gm10x" , qw(default pmu-gm10x  wrap);
DEFINE_PROFILE "pmu-gm20x" , qw(default pmu-gm20x  wrap);
DEFINE_PROFILE "pmu-gp100" , qw(default pmu-gp100  wrap);
DEFINE_PROFILE "pmu-gp10x" , qw(default pmu-gp10x  wrap);
DEFINE_PROFILE "pmu-gv10x" , qw(default pmu-gv10x  wrap);
DEFINE_PROFILE "pmu-gv11b" , qw(default pmu-gv11b  wrap);
DEFINE_PROFILE "pmu-tu10x" , qw(default pmu-tu10x  wrap);
DEFINE_PROFILE "pmu-ga100" , qw(default pmu-ga100  wrap);
DEFINE_PROFILE "pmu-ga10x_riscv" , qw(default pmu-ga10x_riscv  wrap);
DEFINE_PROFILE "pmu-ga10x_selfinit_riscv" , qw(default pmu-ga10x_selfinit_riscv  wrap);
DEFINE_PROFILE "pmu-ga10b" , qw(default pmu-ga10b  wrap);
DEFINE_PROFILE "pmu-ga10b_riscv" , qw(default pmu-ga10b_riscv  wrap);
DEFINE_PROFILE "pmu-ga10f_riscv" , qw(default pmu-ga10f_riscv  wrap);
DEFINE_PROFILE "pmu-ga11b_riscv" , qw(default pmu-ga11b_riscv  wrap);
DEFINE_PROFILE "pmu-ad10x_riscv" , qw(default pmu-ad10x_riscv  wrap);
DEFINE_PROFILE "pmu-ad10b_riscv" , qw(default pmu-ad10b_riscv  wrap);
DEFINE_PROFILE "pmu-gh100" , qw(default pmu-gh100  wrap);
DEFINE_PROFILE "pmu-gh100_riscv" , qw(default pmu-gh100_riscv  wrap);
DEFINE_PROFILE "pmu-gh20x" , qw(default pmu-gh20x  wrap);
DEFINE_PROFILE "pmu-gh20x_riscv" , qw(default pmu-gh20x_riscv  wrap);
DEFINE_PROFILE "pmu-gb100_riscv" , qw(default pmu-gb100_riscv  wrap);
DEFINE_PROFILE "pmu-g00x_riscv" , qw(default pmu-g00x_riscv  wrap);

# Default profile if not specified on command line with --profile.
DEFAULT_PROFILE "pmu-gm10x";


CATEGORY "default";
{
    # All default enabled features, engines, classes, apis
    ENABLE_FEATURES   ALL_DEFAULT_ENABLED;
    ENABLE_ENGINES    ALL_DEFAULT_ENABLED;
    ENABLE_CLASSES    ALL_DEFAULT_ENABLED;
    ENABLE_APIS       ALL_DEFAULT_ENABLED;

    # set platform, arch.   for now just always use these.
    ENABLE_FEATURES   PLATFORM_PMU;

    # disable features and engines when they are not supported by any GPUs
    MINIMAL_MODE      ON;

    # Disable all GPUS preparatory to having a specific set enabled
    DISABLE_CHIPS       ( ALL );
}

CATEGORY "pmu-gm10x";
{
    # If elwvar PMUCFG_GPUS is set, then use that, else default
    if ($ELW{PMUCFG_GPUS}) {
        ENABLE_CHIPS    $ELW{PMUCFG_GPUS};
    } else {
        ENABLE_CHIPS     (GM108);
    }
}

CATEGORY "pmu-gm20x";
{
    # If elwvar PMUCFG_GPUS is set, then use that, else default
    if ($ELW{PMUCFG_GPUS}) {
        ENABLE_CHIPS    $ELW{PMUCFG_GPUS};
    } else {
        ENABLE_CHIPS    (GM200);
    }
}

CATEGORY "pmu-gp100";
{
    # If elwvar PMUCFG_GPUS is set, then use that, else default
    if ($ELW{PMUCFG_GPUS}) {
        ENABLE_CHIPS    $ELW{PMUCFG_GPUS};
    } else {
        ENABLE_CHIPS    (GP100);
    }
}

CATEGORY "pmu-gp10x";
{
    # If elwvar PMUCFG_GPUS is set, then use that, else default
    if ($ELW{PMUCFG_GPUS}) {
        ENABLE_CHIPS    $ELW{PMUCFG_GPUS};
    } else {
        ENABLE_CHIPS    (GP104);
    }
}

CATEGORY "pmu-gv10x";
{
    # If elwvar PMUCFG_GPUS is set, then use that, else default
    if ($ELW{PMUCFG_GPUS}) {
        ENABLE_CHIPS    $ELW{PMUCFG_GPUS};
    } else {
        ENABLE_CHIPS    (GV100);
    }
}

CATEGORY "pmu-gv11b";
{
    # If elwvar PMUCFG_GPUS is set, then use that, else default
    if ($ELW{PMUCFG_GPUS}) {
        ENABLE_CHIPS    $ELW{PMUCFG_GPUS};
    } else {
        ENABLE_CHIPS     (gv11b);
    }
    DISABLE_ENGINES(GCX, ECID, THERM, PMGR);
    ENABLE_ENGINES(MS)
}

CATEGORY "pmu-tu10x";
{
    # If elwvar PMUCFG_GPUS is set, then use that, else default
    if ($ELW{PMUCFG_GPUS}) {
        ENABLE_CHIPS    $ELW{PMUCFG_GPUS};
    } else {
        ENABLE_CHIPS    (TU102);
    }
}

CATEGORY "pmu-ga100";
{
    # If elwvar PMUCFG_GPUS is set, then use that, else default
    if ($ELW{PMUCFG_GPUS}) {
        ENABLE_CHIPS    $ELW{PMUCFG_GPUS};
    } else {
        ENABLE_CHIPS    (GA100);
    }
}

CATEGORY "pmu-ga10x_riscv";
{
    # If elwvar PMUCFG_GPUS is set, then use that, else default
    if ($ELW{PMUCFG_GPUS}) {
        ENABLE_CHIPS    $ELW{PMUCFG_GPUS};
    } else {
        ENABLE_CHIPS    (GA102);
    }
}

CATEGORY "pmu-ga10x_selfinit_riscv";
{
    # If elwvar PMUCFG_GPUS is set, then use that, else default
    if ($ELW{PMUCFG_GPUS}) {
        ENABLE_CHIPS    $ELW{PMUCFG_GPUS};
    } else {
        ENABLE_CHIPS    (GA102);
    }
}

CATEGORY "pmu-ga10b";
{
    # If elwvar PMUCFG_GPUS is set, then use that, else default
    if ($ELW{PMUCFG_GPUS}) {
        ENABLE_CHIPS    $ELW{PMUCFG_GPUS};
    } else {
        ENABLE_CHIPS    (GA10B);
    }
    DISABLE_ENGINES(BIF, DISP);
}

CATEGORY "pmu-ga10b_riscv";
{
    # If elwvar PMUCFG_GPUS is set, then use that, else default
    if ($ELW{PMUCFG_GPUS}) {
        ENABLE_CHIPS    $ELW{PMUCFG_GPUS};
    } else {
        ENABLE_CHIPS    (GA10B);
    }
    DISABLE_ENGINES(BIF, DISP);
}

CATEGORY "pmu-ga10f_riscv";
{
    # If elwvar PMUCFG_GPUS is set, then use that, else default
    if ($ELW{PMUCFG_GPUS}) {
        ENABLE_CHIPS    $ELW{PMUCFG_GPUS};
    } else {
        ENABLE_CHIPS    (GA10F);
    }
    DISABLE_ENGINES(BIF, DISP);
}

CATEGORY "pmu-ga11b_riscv";
{
    # If elwvar PMUCFG_GPUS is set, then use that, else default
    if ($ELW{PMUCFG_GPUS}) {
        ENABLE_CHIPS    $ELW{PMUCFG_GPUS};
    } else {
        ENABLE_CHIPS    (GA11B);
    }
    DISABLE_ENGINES(BIF, DISP);
}

CATEGORY "pmu-ad10x_riscv";
{
    # If elwvar PMUCFG_GPUS is set, then use that, else default
    if ($ELW{PMUCFG_GPUS}) {
        ENABLE_CHIPS    $ELW{PMUCFG_GPUS};
    } else {
        ENABLE_CHIPS    (AD102);
    }
}

CATEGORY "pmu-ad10b_riscv";
{
    # If elwvar PMUCFG_GPUS is set, then use that, else default
    if ($ELW{PMUCFG_GPUS}) {
        ENABLE_CHIPS    $ELW{PMUCFG_GPUS};
    } else {
        ENABLE_CHIPS    (AD10B);
    }
}

CATEGORY "pmu-gh100";
{
    # If elwvar PMUCFG_GPUS is set, then use that, else default
    if ($ELW{PMUCFG_GPUS}) {
        ENABLE_CHIPS    $ELW{PMUCFG_GPUS};
    } else {
        ENABLE_CHIPS    (GH100);
    }
}

CATEGORY "pmu-gh100_riscv";
{
    # If elwvar PMUCFG_GPUS is set, then use that, else default
    if ($ELW{PMUCFG_GPUS}) {
        ENABLE_CHIPS    $ELW{PMUCFG_GPUS};
    } else {
        ENABLE_CHIPS    (GH100);
    }
}

CATEGORY "pmu-gh20x";
{
    # If elwvar PMUCFG_GPUS is set, then use that, else default
    if ($ELW{PMUCFG_GPUS}) {
       ENABLE_CHIPS    $ELW{PMUCFG_GPUS};
    } else {
        ENABLE_CHIPS    (GH202);
    }
}

CATEGORY "pmu-gh20x_riscv";
{
    # If elwvar PMUCFG_GPUS is set, then use that, else default
    if ($ELW{PMUCFG_GPUS}) {
       ENABLE_CHIPS    $ELW{PMUCFG_GPUS};
    } else {
        ENABLE_CHIPS    (GH202);
    }
}

CATEGORY "pmu-gb100_riscv";
{
    # If elwvar PMUCFG_GPUS is set, then use that, else default
    if ($ELW{PMUCFG_GPUS}) {
        ENABLE_CHIPS    $ELW{PMUCFG_GPUS};
    } else {
        ENABLE_CHIPS    (GB100);
    }
}

CATEGORY "pmu-g00x_riscv";
{
    # If elwvar PMUCFG_GPUS is set, then use that, else default
    if ($ELW{PMUCFG_GPUS}) {
        ENABLE_CHIPS    $ELW{PMUCFG_GPUS};
    } else {
        ENABLE_CHIPS    (G000);
    }
}

# Look in the environment and our -D args for any special cases.
CATEGORY "wrap";
{
    1;        # must not be empty block
}

1;
