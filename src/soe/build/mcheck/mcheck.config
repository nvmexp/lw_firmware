
# A list of chips for verification.
# Unlike RM mcheck design, in rtos-flcn, all profile chips are enabled by default.
# Only chips in \%cfg_verify_chips with a 0 are skipped.
# The errors from new added chips can be disabled by setting zero in %cfg_verify_chips
# or using %cfg_warning_chips to give warning message.
check_hash(\%cfg_verify_chips,
# to disable some particular chips
    "gp107f"    => 0,
    "gv100f"    => 0,
    "tu102f"    => 0,
    "gv11b"     => 0,
    "tu101"     => 0,
    "ga11b"     => 0,
    "ad102"     => 0,
    "ad103"     => 0,
    "ad104"     => 0,
    "ad106"     => 0,
    "ad107"     => 0,
    "gb100"     => 0,
    "gb102"     => 0,
    "ad10b"     => 0,
    "ig000"     => 0,
    "t256"      => 0,
    "it000"     => 0,
);

#
# These two hashs allow mcheck to automatically create manual
# snapshots from <chip>/net/netlist.h.  This is typically used
# for chips once they stabalize in emulation but still are in
# emulation.  Once they tape out, we should be able to remove
# them and lower the mcheck runtime.
#
# We only run snapshots on the chips_a/chips_hw branch as that is where emulation
# takes place.
#
if ((fastgetcwd =~ /chips_a/) || (fastgetcwd =~ /chips_hw/))
{
    # [mcheck2] current not support COMPAT_IGNORE_ADDED_ALL
    #   use constant COMPAT_ENABLED => 0x01;
    #   use constant COMPAT_IGNORE_PROD => 0x02;
    #   use constant COMPAT_IGNORE_ADDED_BITFIELDS => 0x04;
    #   use constant COMPAT_IGNORE_ADDED_ALL => 0x08;
    %cfg_enforce_emulation_compat = (
        "tu102" => COMPAT_ENABLED | COMPAT_IGNORE_PROD | COMPAT_IGNORE_ADDED_BITFIELDS,
        "gh100" => COMPAT_ENABLED | COMPAT_IGNORE_PROD | COMPAT_IGNORE_ADDED_BITFIELDS,
    );

    # list any emulation netlists to skip in the cfg_enforce_emulation_compat pass
    %cfg_emulation_netlist_skip = (
    );
}

#
# Some chips can be enabled for warnings only.  This is useful for
# cases where the //hw tree takes integrates from a fluid tree,
# and RM shares the code base.
#
# This can be overridden with -G <gpulist>
#
%cfg_warning_chips = (

);

#
# Some files are excluded, mostly ucode files.  This is done
# both for speed, and to make the code coverage results more
# accurate.
#
check_hash(\%cfg_excluded_files,
    # "filename.c"   => 1,
);

#
# Exceptions for matching functions in the first pass of mcheck
# Child functions must themselves be found during the parsing
# step to be added to the list to be checked.  This covers almost
# all common code cases.  Therefore this list should stay very
# short.
#
check_hash(\%cfg_child_exceptions,
);

# used by --reglist to figure out and recognize register read/write operations
check_hash(\%cfg_regop_read,
    # REG_RD32
    'REG_RD.+'        => 1,
);

check_hash(\%cfg_regop_write,
    # REG_WR32
    # REG_WR32_STALL
    'REG_WR.+'        => 1,
);

#
# Defines used when scanning files
#
# $cfg_scan_cpp_defines = "-DLW_VERIF_FEATURES -DDEBUG -DKDA_BUFFER_ENABLED";
$cfg_scan_cpp_defines = '';

#
# Known failues that are either acceptable (listed first) or temporary until the code can be fixed.
# Please list a bug number for things that are not on a SCS and you cannot get to now.
#
# Rules should be written as specifically as possible so new problems are not masked.
#
# Acceptable syntax:
#   "full-define,function" => 1,
#      * for all chips ignore full-define in function
#   "full-define,function,chip" => 1,
#      * for the listed chip ignore full-define in function
#   "function,chip" => "regex-pattern"
#      * for the listed chip, apply s/regex-pattern// in function.  If the result differs
#        from the original then then this define is ignored.  This is per chip lwrrently
#        as it is easy to write too broad of a rule.
#
check_exception_hash(\%cfg_known_failures,
# Examples:
# "elpgPowerUp_GK104,[t124]" => "LW_PDISP_\\w*",
# "fifoGetPbdmaState_GF100,[gf100,gf119]" => "LW_PPBDMA_CHANNEL_\\w*",
# "LW_PGRAPH_EXCEPTION_EN_CWD_DISABLED,_dumpPgraphExceptionsState_GF100,gk104" => 1,

    # Bug 200253953
    'vprIsAllowedInSWFuse_GP10X,[gp107,gp108]' => 'LW_FUSE_SPARE_BIT_13',
    'vprIsAllowedInSWFuse_GP107,[gp107,gp108]' => 'LW_FUSE_SPARE_BIT_13',

    # Bug 2000812, 200350138
    'icCmdQueueIntrClear_GP10X,[tu102\@net9,tu102,tu102\@net11,tu102\@net12,tu102\@net13,tu104,tu106,tu116,tu117]'    => 'LW_CSEC_CMD_HEAD_INTRSTAT',
    'soeReadCmdQueueHead_GP10X,[tu102\@net9,tu102,tu102\@net11,tu102\@net12,tu102\@net13,tu104,tu106,tu116,tu117]'   => 'LW_CSEC_QUEUE_HEAD',
    'soeWriteCmdQueueHead_GP10X,[tu102\@net9,tu102,tu102\@net11,tu102\@net12,tu102\@net13,tu104,tu106,tu116,tu117]'  => 'LW_CSEC_QUEUE_HEAD',
    'soeWriteCmdQueueTail_GP10X,[tu102\@net9,tu102,tu102\@net11,tu102\@net12,tu102\@net13,tu104,tu106,tu116,tu117]'  => 'LW_CSEC_QUEUE_TAIL',
    'soeReadCmdQueueTail_GP10X,[tu102\@net9,tu102,tu102\@net11,tu102\@net12,tu102\@net13,tu104,tu106,tu116,tu117]'   => 'LW_CSEC_QUEUE_TAIL',
    'soeQueueRmHeadGet_GP10X,[tu102\@net9,tu102,tu102\@net11,tu102\@net12,tu102\@net13,tu104,tu106,tu116,tu117]'     => 'LW_CSEC_MSGQ_HEAD',
    'soeQueueRmHeadSet_GP10X,[tu102\@net9,tu102,tu102\@net11,tu102\@net12,tu102\@net13,tu104,tu106,tu116,tu117]'     => 'LW_CSEC_MSGQ_HEAD',
    'soeQueueRmTailGet_GP10X,[tu102\@net9,tu102,tu102\@net11,tu102\@net12,tu102\@net13,tu104,tu106,tu116,tu117]'     => 'LW_CSEC_MSGQ_TAIL',
    'soeQueueRmInit_GP10X,[tu102\@net9,tu102,tu102\@net11,tu102\@net12,tu102\@net13,tu104,tu106,tu116,tu117]'        => 'LW_CSEC_MSGQ_\\w*',
    'vprRaisePrivLevelMasks_GP10X,[tu102\@net9,tu102,tu102\@net11,tu102\@net12,tu102\@net13,tu102\@net15,tu102\@net16,tu104,tu106,tu116,tu117]' => 1,
    'prCheckDependentBinMilwersion_TU10X,[tu102,tu102\@net17,tu102\@net18,tu102\@net19,tu102\@net21,tu104,tu106,tu116,tu117,ga100,ga102]' => 'LW_PGC6_AON_SELWRE_SCRATCH_GROUP_04\\w*',

    'gfeReadDeviceInfo_GP10X,[g000,tu102,tu104,tu106,tu116,tu117,ga100,ga102]' => 'LW_FUSE_\\w*',
    'soeHsPreCheckCommon_GP10X,[g000,tu102,tu104,tu106,tu116,tu117,ga100,ga102]' => 'LW_FUSE_OPT_PRIV_SEC_EN',
    'soeDisallowDevVersionHS_TU10X,[g000,tu102,tu104,tu106,tu116,tu117,ga100,ga102]' => 'LW_FUSE_OPT_FUSE_UCODE_PR_VPR_REV',
    'soeGetHWFuseVersionHS_TU10X,[g000,tu102,tu104,tu106,tu116,tu117,ga100,ga102]' => 'LW_FUSE_OPT_FUSE_UCODE_SOE_REV',
    'soeEnsureConsistentFalconsProdModeHS_GV10X,[g000,tu102,tu104,tu106,tu116,tu117,ga100,ga102]' => 'LW_FUSE_\\w*',
    'vprIsAllowedInHWFuse_GP10X,[g000,tu102,tu104,tu106,tu116,tu117,ga100,ga102]' => 'LW_FUSE_OPT_VPR_ENABLED',
    'vprIsDisplayPresent_GP10X,[g000,tu102,tu104,tu106,tu116,tu117,ga100,ga102]' => 'LW_FUSE_STATUS_OPT_DISPLAY',
    'vprIsAllowedInSWFuse_TU10X,[g000,tu102,tu104,tu106,tu116,tu117,ga100,ga102]' => 'LW_FUSE_OPT_SW_VPR_ENABLED',
    'prHsPreCheck_GP10X,[g000,tu102,tu104,tu106,tu116,tu117,ga100,ga102]' => 'LW_FUSE_\\w*',


    'LW_PGC6_BSI_CTRL_PRIV_LEVEL_MASK_WRITE_PROTECTION,vprRaisePrivLevelMasks_GP10X'=>1,
    'LW_PDISP_SELWRE_SCRATCH_0,soeHdcpType1LockHs_GP10X' => 1,
    'LW_PDISP_SELWRE_WR_SCRATCH_0,soeHdcpType1LockHs_GP10X' => 1,
    'LW_PDISP_DSI_EVENT_FRC_HDCP,soeHdcpType1LockHs_GP10X' => 1,
    'LW_PDISP_DSI_EVENT_FRC_HDCP_TYPE1_LOCK_ASSERT,soeHdcpType1LockHs_GP10X' => 1,
    'LW_PDISP_DSI_EVENT_FRC_HDCP_TYPE1_LOCK,soeHdcpType1LockHs_GP10X' => 1,

);

#
# [mcheck2] cfg_known_failures_disp
#   another way to set exceptions for disp registers
#
# Syntax:
#   "disp-register-define,function" => 1,
#      * for all chips ignore full-define in function
check_hash(\%cfg_known_failures_disp,
# Example:
# "LW_PDISP_VGA_CR_REG58_SET_DISP_OWNER,dispDispOwner_GF100" => 1,


);
