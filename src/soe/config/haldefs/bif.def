# -*- mode: perl; -*-

# Bus Interface(BIF) SOE Hal interface definitions
# For a brief introduction to file format, see README in this directory.

my $bifHal = [

    # defaults for BIF for all interfaces below
    DEFAULTS => [
        GCC_ATTRIBUTES  => 'GCC_ATTRIB_SECTION("imem_resident", "__FUNC__")',
        FLAGS           => ":DIRECT_HAL_CALLS",
    ],

    # HAL Interfaces
    # **************************************************************************

    HAL_INTERFACES => [

        SET_EOM_PARAMETERS => [
            DESCRIPTION    => "Set the EOM Phy register",
            RETURN_TYPE    => FLCN_STATUS,
            ARGUMENTS      => "LwU8 eomMode, LwU8 eomNblks, LwU8 eomNerrs, LwU8 eomBerEyeSel",
            GCC_ATTRIBUTES => 'GCC_ATTRIB_SECTION("imem_bif", "__FUNC__")',
            STUB_RETURNS   => FLCN_ERR_NOT_SUPPORTED,

            _LR10         => [ TU102, ],
            _LS10         => [ ALL, -TU102 ],
        ],

        GET_UPHY_DLN_CFG_SPACE => [
            DESCRIPTION    => "Get PEX UPHY DLN register values",
            RETURN_TYPE    => FLCN_STATUS,
            ARGUMENTS      => "LwU32 regAddress, LwU32 laneSelectMask",
            GCC_ATTRIBUTES => 'GCC_ATTRIB_SECTION("imem_bif", "__FUNC__")',
            STUB_RETURNS   => FLCN_ERR_NOT_SUPPORTED,

            LIKE_INTERFACE  => SET_EOM_PARAMETERS,
        ],

        SET_PCIE_LINK_SPEED => [
            DESCRIPTION    => "Set PCIE link speed",
            RETURN_TYPE    => FLCN_STATUS,
            ARGUMENTS      => "LwU32 linkSpeed",
            GCC_ATTRIBUTES => 'GCC_ATTRIB_SECTION("imem_bif", "__FUNC__")',
            STUB_RETURNS   => FLCN_ERR_NOT_SUPPORTED,

            LIKE_INTERFACE  => SET_EOM_PARAMETERS,

        ],

        GET_PCIE_SPEED_WIDTH => [
            DESCRIPTION    => "Get PCIE link speed and width",
            RETURN_TYPE    => FLCN_STATUS,
            ARGUMENTS      => "LwU32 *pSpeed, LwU32 *pWidth",
            GCC_ATTRIBUTES => 'GCC_ATTRIB_SECTION("imem_bif", "__FUNC__")',
            STUB_RETURNS   => FLCN_ERR_NOT_SUPPORTED,

            _LR10         => [ TU102, ],
            _STUB         => [ ALL, -TU102 ],
        ],

        GET_PCIE_FATAL_NON_FATAL_UNSUPP_REQ_COUNT => [
            DESCRIPTION     => "Get PCIe link fatal, non-fatal and unsupported req count",
            RETURN_TYPE     => void,
            ARGUMENTS       => "LwU32 *pFatalCount, LwU32 *pNonFatalCount, LwU32 *pUnsuppReqCount",
            GCC_ATTRIBUTES => 'GCC_ATTRIB_SECTION("imem_bif", "__FUNC__")',
            STUB_RETURNS   => void,

            LIKE_INTERFACE  => GET_PCIE_SPEED_WIDTH,
        ],

        GET_PCIE_CORRECTABLE_ERROR_COUNT  => [
            DESCRIPTION     => "Get PCIe link correctable error count",
            RETURN_TYPE     => void,
            ARGUMENTS       => "LwU32 *pCorrErrCount",
            GCC_ATTRIBUTES => 'GCC_ATTRIB_SECTION("imem_bif", "__FUNC__")',
            STUB_RETURNS   => void,

            LIKE_INTERFACE  => GET_PCIE_SPEED_WIDTH,
        ],

        GET_PCIE_L0_TO_RECOVERY_COUNT  => [
            DESCRIPTION     => "Get PCIe link L0 to recovery count",
            RETURN_TYPE     => void,
            ARGUMENTS       => "LwU32 *pL0ToRecCount",
            GCC_ATTRIBUTES => 'GCC_ATTRIB_SECTION("imem_bif", "__FUNC__")',
            STUB_RETURNS   => void,

            LIKE_INTERFACE  => GET_PCIE_SPEED_WIDTH,
        ],

        GET_PCIE_REPLAY_COUNT  => [
            DESCRIPTION     => "Get PCIe link replay count",
            RETURN_TYPE     => void,
            ARGUMENTS       => "LwU32 *pReplayCount",
            GCC_ATTRIBUTES => 'GCC_ATTRIB_SECTION("imem_bif", "__FUNC__")',
            STUB_RETURNS   => void,

            LIKE_INTERFACE  => GET_PCIE_SPEED_WIDTH,
        ],

        GET_PCIE_REPLAY_ROLLOVER_COUNT  => [
            DESCRIPTION     => "Get PCIe link replay rollover count",
            RETURN_TYPE     => void,
            ARGUMENTS       => "LwU32 *pReplayRolloverCount",
            GCC_ATTRIBUTES => 'GCC_ATTRIB_SECTION("imem_bif", "__FUNC__")',
            STUB_RETURNS   => void,

            LIKE_INTERFACE  => GET_PCIE_SPEED_WIDTH,
        ],

        GET_PCIE_NAKS_RCVD_COUNT  => [
            DESCRIPTION     => "Get PCIe link NAKS received count",
            RETURN_TYPE     => void,
            ARGUMENTS       => "LwU32 *pNaksRcvdCount",
            GCC_ATTRIBUTES => 'GCC_ATTRIB_SECTION("imem_bif", "__FUNC__")',
            STUB_RETURNS   => void,

            LIKE_INTERFACE  => GET_PCIE_SPEED_WIDTH,
        ],

        GET_PCIE_NAKS_SENT_COUNT  => [
            DESCRIPTION     => "Get PCIe link NAKS sent count",
            RETURN_TYPE     => void,
            ARGUMENTS       => "LwU32 *pNaksSentCount",
            GCC_ATTRIBUTES => 'GCC_ATTRIB_SECTION("imem_bif", "__FUNC__")',
            STUB_RETURNS   => void,

            LIKE_INTERFACE  => GET_PCIE_SPEED_WIDTH,
        ],

        GET_PCIE_CONFIG_SPACE_IDS  => [
            DESCRIPTION     => "Get PCIe config space Ids",
            RETURN_TYPE     => void,
            ARGUMENTS       => "LwU16 *pVendorId, LwU16 *pDevId, LwU16 *pSubVendorId, LwU16 *pSubId",
            GCC_ATTRIBUTES => 'GCC_ATTRIB_SECTION("imem_bif", "__FUNC__")',

            _LR10         => [ TU102, ],
            _STUB         => [ ALL, -TU102 ],
        ],

        SETUP_PROD_VALUES => [
            DESCRIPTION    => "Setup Prod values for XVE/XP that require L2 privileges",
            RETURN_TYPE    => void,
            ARGUMENTS      => void,
            GCC_ATTRIBUTES => 'GCC_ATTRIB_SECTION("imem_init", "__FUNC__")',
            STUB_RETURNS   => void,

            _LR10         => [ TU102, ],
            _STUB         => [ ALL, -TU102 ],
        ],

        GET_EOM_STATUS => [
            DESCRIPTION      => "Run EOM sequence and fill the output buffer with EOM status",
            RETURN_TYPE      => FLCN_STATUS,
            ARGUMENTS        => "LwU8 eomMode, LwU8 eomNblks, LwU8 eomNerrs, LwU8 eomBerEyeSel, LwU32 laneMask, RM_FLCN_U64 dmaHandle",
            GCC_ATTRIBUTES => 'GCC_ATTRIB_SECTION("imem_bif", "__FUNC__")',
            STUB_RETURNS     => FLCN_ERR_NOT_SUPPORTED,

            LIKE_INTERFACE  => SET_EOM_PARAMETERS,
        ],

        DO_LANE_SELECT => [
            DESCRIPTION      => "Select requested PEX lanes",
            RETURN_TYPE      => FLCN_STATUS,
            ARGUMENTS        => "LwU32 laneMask",
            STUB_RETURNS     => FLCN_ERR_NOT_SUPPORTED,
            GCC_ATTRIBUTES => 'GCC_ATTRIB_SECTION("imem_bif", "__FUNC__")',

            LIKE_INTERFACE   => SET_EOM_PARAMETERS,
        ],

        POLL_EOM_DONE_STATUS => [
            DESCRIPTION      => "Poll EOM done status for requested lanes",
            RETURN_TYPE      => FLCN_STATUS,
            ARGUMENTS        => "LwU8 numRequestedLanes, LwU8 firstLaneFromLsb, LwBool bEomDoneStatus, LwU32 timeoutNs",
            STUB_RETURNS     => FLCN_ERR_NOT_SUPPORTED,
            GCC_ATTRIBUTES => 'GCC_ATTRIB_SECTION("imem_bif", "__FUNC__")',

            LIKE_INTERFACE   => SET_EOM_PARAMETERS,
        ],

        INIT_MARGINING_INTR => [
            DESCRIPTION      => "Enable/Disable lane margining interrupts to SOE",
            RETURN_TYPE      => void,
            ARGUMENTS        => "",
            GCC_ATTRIBUTES => 'GCC_ATTRIB_SECTION("imem_init", "__FUNC__")',

            _LS10           => [ GH100, ],
            _STUB           => [ ALL, -GH100, ],
        ],

        DO_LANE_MARGINING => [
            DESCRIPTION      => "Perform actual step margining",
            RETURN_TYPE      => FLCN_STATUS,
            ARGUMENTS        => "LwU8 laneNum",
            FLAGS            => ":STUB_ASSERT",
            STUB_RETURNS     => FLCN_ERR_NOT_SUPPORTED,
            GCC_ATTRIBUTES   => 'GCC_ATTRIB_SECTION("imem_bif", "__FUNC__")',

            LIKE_INTERFACE   => INIT_MARGINING_INTR,
        ],

        HANDLE_MARGINING_READY_INTR => [
            DESCRIPTION      => "Handle Margining-ready interrupt",
            RETURN_TYPE      => void,
            ARGUMENTS        => "LwU32 regVal",
            FLAGS            => ":STUB_ASSERT",
            GCC_ATTRIBUTES   => 'GCC_ATTRIB_SECTION("imem_bif", "__FUNC__")',

            LIKE_INTERFACE   => INIT_MARGINING_INTR,
        ],

        HANDLE_MARGINING_ABORT_INTR => [
            DESCRIPTION      => "Handle Margining-abort interrupt",
            RETURN_TYPE      => void,
            ARGUMENTS        => "LwU32 regVal",
            FLAGS            => ":STUB_ASSERT",
            GCC_ATTRIBUTES   => 'GCC_ATTRIB_SECTION("imem_bif", "__FUNC__")',

            LIKE_INTERFACE   => INIT_MARGINING_INTR,
        ],

        HANDLE_MARGIN_COMMAND_INTR => [
            DESCRIPTION      => "Handle lane specific Margining interrupt",
            RETURN_TYPE      => FLCN_STATUS,
            ARGUMENTS        => "LwU32 regVal",
            FLAGS            => ":STUB_ASSERT",
            STUB_RETURNS     => FLCN_ERR_NOT_SUPPORTED,
            GCC_ATTRIBUTES   => 'GCC_ATTRIB_SECTION("imem_bif", "__FUNC__")',

            LIKE_INTERFACE   => INIT_MARGINING_INTR,
        ],

        UPDATE_MARGINING_STATUS => [
            DESCRIPTION      => "Update Margining status register",
            RETURN_TYPE      => void,
            ARGUMENTS        => "LwU8 laneNum, LwU8 marginType, LwU8 rcvrNum, LwU8 usageModel, LwU8 marginPayload",
            FLAGS            => ":STUB_ASSERT",
            GCC_ATTRIBUTES   => 'GCC_ATTRIB_SECTION("imem_bif", "__FUNC__")',

            LIKE_INTERFACE   => INIT_MARGINING_INTR,
        ],

        START_STEP_MARGINING => [
            DESCRIPTION      => "Start step margining",
            RETURN_TYPE      => FLCN_STATUS,
            ARGUMENTS        => "LwU8 marginType, LwU8 marginOffset, LwU32 laneSelectMask",
            FLAGS            => ":STUB_ASSERT",
            STUB_RETURNS     => FLCN_ERR_NOT_SUPPORTED,
            GCC_ATTRIBUTES   => 'GCC_ATTRIB_SECTION("imem_bif", "__FUNC__")',

            LIKE_INTERFACE   => INIT_MARGINING_INTR,
        ],

        STOP_STEP_MARGINING => [
            DESCRIPTION      => "Stop step margining",
            RETURN_TYPE      => void,
            ARGUMENTS        => "LwU32 laneSelectMask, LwBool bResetErrorCount",
            FLAGS            => ":STUB_ASSERT",
            GCC_ATTRIBUTES   => 'GCC_ATTRIB_SECTION("imem_bif", "__FUNC__")',

            LIKE_INTERFACE   => INIT_MARGINING_INTR,
        ],

        GET_MARGINING_ERROR_COUNT => [
            DESCRIPTION      => "Get error count for this margining request",
            RETURN_TYPE      => FLCN_STATUS,
            ARGUMENTS        => "LwU32 laneSelectMask, LwU8 *pErrorCount",
            FLAGS            => ":STUB_ASSERT",
            STUB_RETURNS     => FLCN_ERR_NOT_SUPPORTED,
            GCC_ATTRIBUTES   => 'GCC_ATTRIB_SECTION("imem_bif", "__FUNC__")',

            LIKE_INTERFACE   => INIT_MARGINING_INTR,
        ],

        CLEAR_ERROR_LOG => [
            DESCRIPTION      => "Handles Clear Error Log command during Step Margining",
            RETURN_TYPE      => FLCN_STATUS,
            ARGUMENTS        => "LwU8 laneNum",
            FLAGS            => ":STUB_ASSERT",
            STUB_RETURNS     => FLCN_ERR_NOT_SUPPORTED,
            GCC_ATTRIBUTES   => 'GCC_ATTRIB_SECTION("imem_bif", "__FUNC__")',

            LIKE_INTERFACE   => INIT_MARGINING_INTR,
        ],

        SERVICE_MARGINING_INTR => [
            DESCRIPTION      => "ISR routine for handling Margining interrupts",
            RETURN_TYPE      => FLCN_STATUS,
            ARGUMENTS        => "",
            FLAGS            => ":STUB_ASSERT",
            STUB_RETURNS     => FLCN_ERR_NOT_SUPPORTED,
            GCC_ATTRIBUTES   => 'GCC_ATTRIB_SECTION("imem_bif", "__FUNC__")',

            LIKE_INTERFACE   => INIT_MARGINING_INTR,
        ],

        SERVICE_LANE_MARGINING_INTERRUPTS => [
            DESCRIPTION      => "ISR routine for handling Margining interrupts",
            RETURN_TYPE      => void,
            ARGUMENTS        => "",
            FLAGS            => ":STUB_ASSERT",
            GCC_ATTRIBUTES   => 'GCC_ATTRIB_SECTION("imem_bif", "__FUNC__")',

            LIKE_INTERFACE   => INIT_MARGINING_INTR,
        ],

        ENABLE_MARGIN_ERROR_COUNTING => [
            DESCRIPTION      => "Enable or disable error counting during margining",
            RETURN_TYPE      => FLCN_STATUS,
            ARGUMENTS        => "LwU8 laneNum, LwBool enableErrorCounting",
            FLAGS            => ":STUB_ASSERT",
            STUB_RETURNS     => FLCN_ERR_NOT_SUPPORTED,
            GCC_ATTRIBUTES   => 'GCC_ATTRIB_SECTION("imem_bif", "__FUNC__")',

            LIKE_INTERFACE   => INIT_MARGINING_INTR,
        ],

        HANDLE_ERROR_COUNT_EXCD_INTR => [
            DESCRIPTION      => "Handle Margining error-count-exceeded interrupt",
            RETURN_TYPE      => FLCN_STATUS,
            ARGUMENTS        => "LwU32 regVal",
            FLAGS            => ":STUB_ASSERT",
            STUB_RETURNS     => FLCN_ERR_NOT_SUPPORTED,
            GCC_ATTRIBUTES   => 'GCC_ATTRIB_SECTION("imem_bif", "__FUNC__")',

            LIKE_INTERFACE   => INIT_MARGINING_INTR,
        ],

        UPDATE_STEP_MARGINING_EXEC_STATUS => [
            DESCRIPTION      => "Update step margining exelwtion status",
            RETURN_TYPE      => FLCN_STATUS,
            ARGUMENTS        => "LwU8 laneNum, LwU8 execStatus",
            FLAGS            => ":STUB_ASSERT",
            STUB_RETURNS     => FLCN_ERR_NOT_SUPPORTED,
            GCC_ATTRIBUTES   => 'GCC_ATTRIB_SECTION("imem_bif", "__FUNC__")',

            LIKE_INTERFACE   => INIT_MARGINING_INTR,
        ],

        MARGINING_ENABLED => [
            DESCRIPTION      => "Check if Lane Margining is enabled from fuse, SW etc.",
            RETURN_TYPE      => LwBool,
            ARGUMENTS        => "",
            FLAGS            => ":STUB_ASSERT",
            STUB_RETURNS     => LW_TRUE,
            GCC_ATTRIBUTES   => 'GCC_ATTRIB_SECTION("imem_bif", "__FUNC__")',

            LIKE_INTERFACE   => INIT_MARGINING_INTR,
        ],

        HANDLE_REPORT_MARGINING_COMMAND => [
            DESCRIPTION      => "Handle report margining command",
            RETURN_TYPE      => void,
            ARGUMENTS        => "LwU8 laneNum, LwU8 marginType, LwU8 rcvrNum, LwU8 usageModel, LwU8 marginPayload",
            FLAGS            => ":STUB_ASSERT",
            GCC_ATTRIBUTES   => 'GCC_ATTRIB_SECTION("imem_bif", "__FUNC__")',

            LIKE_INTERFACE   => INIT_MARGINING_INTR,
        ],

        ],   # HAL_INTERFACES
];

# return a reference to the Hal definition
return $bifHal;
