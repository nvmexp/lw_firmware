// This file is automatically generated by chip-config - DO NOT EDIT!
//
// SOE app generated #defines such as IsG84(),
// SOECFG_FEATURE_ENABLED_STATUS(), etc.
//
// Only for use within soe applications.
//
// Profile:  {{$PROFILE}}
// Template: {{$TEMPLATE_FILE}}
//
// Chips:    {{ CHIP_LIST() }}
//

#ifndef G_{{$XXCFG}}_PRIVATE_H
#define G_{{$XXCFG}}_PRIVATE_H

//
// Macros to help with enabling or disabling code based on whether
// a feature (or chip or engine or ...) is enabled or not.
// Also have SOECFG_CHIP_ENABLED(), SOECFG_FEATURE_ENABLED(), etc
// from {{$XXCONFIG_H_FILE}}.
//
// NOTE: these definitions are "flat" (ie they don't use some more general
//       SOECFG_ENABLED(CHIP,X) form because the pre-processor would re-evaluate
//       the expansion of the item (gpu, feature, class, api).  For classes,
//       at least, this is a problem since we would end up with class number
//       instead of its name...

// hack: MSVC is not C99 compliant
#ifdef LW_WINDOWS
#define __func__ __FUNCTION__
#endif

// GPU's
#define SOECFG_CHIP_ENABLED_STATUS(W)   (SOECFG_CHIP_##W ? {{$STATUS_OK}} : {{$STATUS_ERROR}})
#define SOECFG_GPU_ENABLED_OR_BAIL(W)                \
     do {                                           \
         if ( ! SOECFG_CHIP_##W)                      \
         {                                          \
             DBG_PRINTF((DBG_MODULE_GLOBAL, DBG_LEVEL_ERRORS, "SOE: %s: CHIP " #W " not enabled, bailing\n", __func__)); \
             return {{$STATUS_ERROR}};           \
         }                                          \
     } while (LW_FALSE)
#define SOECFG_CHIP_ENABLED_OR_ASSERT_AND_BAIL(W)     \
     do {                                           \
         if ( ! SOECFG_CHIP_##W)                      \
         {                                          \
             DBG_PRINTF((DBG_MODULE_GLOBAL, DBG_LEVEL_ERRORS, "SOE: %s: CHIP " #W " not enabled, assert and bail\n", __func__)); \
             {{$ASSERT}}(SOECFG_CHIP_##W);                        \
             return {{$STATUS_ERROR}};           \
         }                                          \
     } while (LW_FALSE)
#define SOECFG_CHIP_ENABLED_OR_GOTO(W,L)  \
    do {                                 \
        if (! SOECFG_CHIP_##W)            \
        {                                \
            goto L;                      \
        }                                \
    } while (LW_FALSE)
#define SOECFG_CHIP_ENABLED_OR_BREAK(W)   \
    {                                    \
        if (! SOECFG_CHIP_##W)            \
        {                                \
            break;                       \
        }                                \
    }

// FEATURE's
#define SOECFG_FEATURE_ENABLED_STATUS(W)   (SOECFG_FEATURE_##W ? {{$STATUS_OK}} : {{$STATUS_ERROR}})
#define SOECFG_FEATURE_ENABLED_OR_BAIL(W)            \
     do {                                           \
         if ( ! SOECFG_FEATURE_##W)                  \
         {                                          \
             DBG_PRINTF((DBG_MODULE_GLOBAL, DBG_LEVEL_ERRORS, "SOE: %s: FEATURE " #W " not enabled, bailing\n", __func__)); \
             return {{$STATUS_ERROR}};           \
         }                                          \
     } while (LW_FALSE)
#define SOECFG_FEATURE_ENABLED_OR_ASSERT_AND_BAIL(W) \
     do {                                           \
         if ( ! SOECFG_FEATURE_##W)                  \
         {                                          \
             DBG_PRINTF((DBG_MODULE_GLOBAL, DBG_LEVEL_ERRORS, "SOE: %s: FEATURE " #W " not enabled, assert and bail\n", __func__)); \
             {{$ASSERT}}(SOECFG_FEATURE_##W);          \
             return {{$STATUS_ERROR}};           \
         }                                          \
     } while (LW_FALSE)
#define SOECFG_FEATURE_ENABLED_OR_GOTO(W,L)  \
    do {                                     \
        if (! SOECFG_FEATURE_##W)            \
        {                                    \
            goto L;                          \
        }                                    \
    } while (LW_FALSE)
#define SOECFG_FEATURE_ENABLED_OR_BREAK(W)   \
    {                                        \
        if (! SOECFG_FEATURE_##W)            \
        {                                    \
            break;                           \
        }                                    \
    }

// ENGINE's
#define SOECFG_ENGINE_ENABLED_STATUS(W)   (SOECFG_ENGINE_##W ? {{$STATUS_OK}} : {{$STATUS_ERROR}})
#define SOECFG_ENGINE_ENABLED_OR_BAIL(W)             \
     do {                                           \
         if ( ! SOECFG_ENGINE_##W)                   \
         {                                          \
             DBG_PRINTF((DBG_MODULE_GLOBAL, DBG_LEVEL_ERRORS, "SOE: %s: ENGINE " #W " not enabled, bailing\n", __func__)); \
             return {{$STATUS_ERROR}};           \
         }                                          \
     } while (LW_FALSE)
#define SOECFG_ENGINE_ENABLED_OR_ASSERT_AND_BAIL(W)  \
     do {                                           \
         if ( ! SOECFG_ENGINE_##W)                   \
         {                                          \
             DBG_PRINTF((DBG_MODULE_GLOBAL, DBG_LEVEL_ERRORS, "SOE: %s: ENGINE " #W " not enabled, assert and bail\n", __func__)); \
             {{$ASSERT}}(SOECFG_ENGINE_##W);           \
             return {{$STATUS_ERROR}};           \
         }                                          \
     } while (LW_FALSE)
#define SOECFG_ENGINE_ENABLED_OR_GOTO(W,L)  \
    do {                                    \
        if (! SOECFG_ENGINE_##W)            \
        {                                   \
            goto L;                         \
        }                                   \
    } while (LW_FALSE)
#define SOECFG_ENGINE_ENABLED_OR_BREAK(W)   \
    {                                       \
        if (! SOECFG_ENGINE_##W)            \
        {                                   \
            break;                          \
        }                                   \
    }

// CLASS's
#define SOECFG_CLASS_ENABLED_STATUS(W)   (SOECFG_CLASS_##W ? {{$STATUS_OK}} : {{$STATUS_ERROR}})
#define SOECFG_CLASS_ENABLED_OR_BAIL(W)              \
     do {                                           \
         if ( ! SOECFG_CLASS_##W)                    \
         {                                          \
             DBG_PRINTF((DBG_MODULE_GLOBAL, DBG_LEVEL_ERRORS, "SOE: %s: CLASS " #W " not enabled, bailing\n", __func__)); \
             return {{$STATUS_ERROR}};           \
         }                                          \
     } while (LW_FALSE)
#define SOECFG_CLASS_ENABLED_OR_ASSERT_AND_BAIL(W)   \
     do {                                           \
         if ( ! SOECFG_CLASS_##W)                    \
         {                                          \
             DBG_PRINTF((DBG_MODULE_GLOBAL, DBG_LEVEL_ERRORS, "SOE: %s: CLASS " #W " not enabled, assert and bail\n", __func__)); \
             {{$ASSERT}}(SOECFG_CLASS_##W);            \
             return {{$STATUS_ERROR}};           \
         }                                          \
     } while (LW_FALSE)
#define SOECFG_CLASS_ENABLED_OR_GOTO(W,L)  \
    do {                                   \
        if (! SOECFG_CLASS_##W)            \
        {                                  \
            goto L;                        \
        }                                  \
    } while (LW_FALSE)
#define SOECFG_CLASS_ENABLED_OR_BREAK(W)   \
    {                                      \
        if (! SOECFG_CLASS_##W)            \
        {                                  \
            break;                         \
        }                                  \
    }

// API's
#define SOECFG_API_ENABLED_STATUS(W)   (SOECFG_API_##W ? {{$STATUS_OK}} : {{$STATUS_ERROR}})
#define SOECFG_API_ENABLED_OR_BAIL(W)                \
     do {                                           \
         if ( ! SOECFG_API_##W)                      \
         {                                          \
             DBG_PRINTF((DBG_MODULE_GLOBAL, DBG_LEVEL_ERRORS, "SOE: %s: API " #W " not enabled, bailing\n", __func__)); \
             return {{$STATUS_ERROR}};           \
         }                                          \
     } while (LW_FALSE)
#define SOECFG_API_ENABLED_OR_ASSERT_AND_BAIL(W)     \
     do {                                           \
         if ( ! SOECFG_API_##W)                      \
         {                                          \
             DBG_PRINTF((DBG_MODULE_GLOBAL, DBG_LEVEL_ERRORS, "SOE: %s: API " #W " not enabled, assert and bail\n", __func__)); \
             {{$ASSERT}}(SOECFG_API_##W);              \
             return {{$STATUS_ERROR}};           \
         }                                          \
     } while (LW_FALSE)
#define SOECFG_API_ENABLED_OR_GOTO(W,L)  \
    do {                                 \
        if (! SOECFG_API_##W)            \
        {                                \
            goto L;                      \
        }                                \
    } while (LW_FALSE)
#define SOECFG_API_ENABLED_OR_BREAK(W)   \
    {                                    \
        if (! SOECFG_API_##W)            \
        {                                \
            break;                       \
        }                                \
    }


#endif  // G_{{$XXCFG}}_PRIVATE_H
