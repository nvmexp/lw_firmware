#
# _LWRM_COPYRIGHT_BEGIN_
#
# Copyright 2011-2019 by LWPU Corporation.  All rights reserved.  All
# information contained herein is proprietary and confidential to LWPU
# Corporation.  Any use, reproduction, or disclosure without the written
# permission of LWPU Corporation is prohibited.
#
# _LWRM_COPYRIGHT_END_
#

#
# Top-level BL makefile. This makefile is responsible for building the BL
# binary including projects it depends on (RTOS, bootloader, etc ...) across
# all BL config-profiles.
#

all: build

###############################################################################
# Serialize per-profile builds (this does not prevent parallel building within
# each profile). It should be possible to remove this line but doing so may not
# translate to any appreciable speedup and it also makes a mess of the output.
# It is also known to crash intermittently.
###############################################################################

.NOTPARALLEL:

###############################################################################
# By default, this makefile will attempt to build all BLCFG profiles. If this
# behavior is undesired, the user may override it using the following make-var.
# By setting the value to "true" only the default BLCFG profile will be built
# when this makefile is ilwoked.
###############################################################################

BLCFG_PROFILE_DEFAULT_ONLY ?= "false"

###############################################################################
# Set BLCFG_PROFILES to the list of BLCFG profiles to build. The value is set
# in one of three ways depending on defaults and user-overrides (if any).
#
# 1. Sourcing bl-profiles.mk to get the full list of profiles (default)
# 2. If BLCFG_PROFILE_DEFAULT_ONLY is defined and set to "true", build only
#    the default BLCFG profile. See above for more information.
# 3. If BLCFG_PROFILE is set on the command-line or as an elwvar, build that
#    profile only.
#
# Setting BLCFG_PROFILES in the shell or on the command-line will override the
# profile(s) returned by the first two options above. BLCFG_PROFILE trumps 
# everything.
###############################################################################

BLCFG_PROFILES ?=

ifndef BLCFG_PROFILE
  ifeq ("$(strip $(BLCFG_PROFILES))", "")
    ifneq ("$(BLCFG_PROFILE_DEFAULT_ONLY)","true")
      include $(LW_SOURCE)/uproc/bootloader/config/bl-profiles.mk
      override BLCFG_PROFILES = $(BLCFG_PROFILES_ALL)
    else
      override BLCFG_PROFILES = fecs_bl_gm10x
    endif
  endif
else
  BLCFG_PROFILES = $(BLCFG_PROFILE)
endif

###############################################################################
# Create submake build/clean/clobber targets for profiles being built.
###############################################################################

PROFILES.build   = $(BLCFG_PROFILES:=.build)
PROFILES.clean   = $(BLCFG_PROFILES:=.clean)
PROFILES.clobber = $(BLCFG_PROFILES:=.clobber)

###############################################################################
# Targets/Rules
###############################################################################

.PHONY: PROFILES.build   build
.PHONY: PROFILES.clean   clean
.PHONY: PROFILES.clobber clobber

build::   $(PROFILES.build)
clean::   $(PROFILES.clean)
clobber:: $(PROFILES.clobber)

$(PROFILES.build):
	$(MAKE) -f make-profile.lwmk BLCFG_PROFILE=$(basename $@) -$(MAKEFLAGS) build

$(PROFILES.clean):
	$(MAKE) -f make-profile.lwmk BLCFG_PROFILE=$(basename $@) -$(MAKEFLAGS) clean

$(PROFILES.clobber):
	$(MAKE) -f make-profile.lwmk BLCFG_PROFILE=$(basename $@) -$(MAKEFLAGS) clobber

