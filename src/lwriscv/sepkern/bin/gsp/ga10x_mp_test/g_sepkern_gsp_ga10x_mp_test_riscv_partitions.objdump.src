
/home/mkulikowski/p4-chips_a/sw/lwriscv/main/tests/sepkern-gsp/_out/ga10x_gsp/partitions/g_sepkern_gsp_ga10x_mp_test_riscv_partitions.elf:     file format elf64-littleriscv


Disassembly of section .partition_shared_code:

0000000000101000 <digits.1072-0x150>:
  101000:	05be                	slli	a1,a1,0xf
  101002:	0000                	unimp
  101004:	05ca                	slli	a1,a1,0x12
  101006:	0000                	unimp
  101008:	05ca                	slli	a1,a1,0x12
  10100a:	0000                	unimp
  10100c:	05ca                	slli	a1,a1,0x12
  10100e:	0000                	unimp
  101010:	05ca                	slli	a1,a1,0x12
  101012:	0000                	unimp
  101014:	05ca                	slli	a1,a1,0x12
  101016:	0000                	unimp
  101018:	05ca                	slli	a1,a1,0x12
  10101a:	0000                	unimp
  10101c:	05ca                	slli	a1,a1,0x12
  10101e:	0000                	unimp
  101020:	05ca                	slli	a1,a1,0x12
  101022:	0000                	unimp
  101024:	05ca                	slli	a1,a1,0x12
  101026:	0000                	unimp
  101028:	05ca                	slli	a1,a1,0x12
  10102a:	0000                	unimp
  10102c:	05ca                	slli	a1,a1,0x12
  10102e:	0000                	unimp
  101030:	05ca                	slli	a1,a1,0x12
  101032:	0000                	unimp
  101034:	05ca                	slli	a1,a1,0x12
  101036:	0000                	unimp
  101038:	05ca                	slli	a1,a1,0x12
  10103a:	0000                	unimp
  10103c:	05ca                	slli	a1,a1,0x12
  10103e:	0000                	unimp
  101040:	05ca                	slli	a1,a1,0x12
  101042:	0000                	unimp
  101044:	05ca                	slli	a1,a1,0x12
  101046:	0000                	unimp
  101048:	05ca                	slli	a1,a1,0x12
  10104a:	0000                	unimp
  10104c:	05ca                	slli	a1,a1,0x12
  10104e:	0000                	unimp
  101050:	05ca                	slli	a1,a1,0x12
  101052:	0000                	unimp
  101054:	05ca                	slli	a1,a1,0x12
  101056:	0000                	unimp
  101058:	05ca                	slli	a1,a1,0x12
  10105a:	0000                	unimp
  10105c:	05ca                	slli	a1,a1,0x12
  10105e:	0000                	unimp
  101060:	05ca                	slli	a1,a1,0x12
  101062:	0000                	unimp
  101064:	05ca                	slli	a1,a1,0x12
  101066:	0000                	unimp
  101068:	05ca                	slli	a1,a1,0x12
  10106a:	0000                	unimp
  10106c:	05ca                	slli	a1,a1,0x12
  10106e:	0000                	unimp
  101070:	05ca                	slli	a1,a1,0x12
  101072:	0000                	unimp
  101074:	05ca                	slli	a1,a1,0x12
  101076:	0000                	unimp
  101078:	05ca                	slli	a1,a1,0x12
  10107a:	0000                	unimp
  10107c:	05ca                	slli	a1,a1,0x12
  10107e:	0000                	unimp
  101080:	05ca                	slli	a1,a1,0x12
  101082:	0000                	unimp
  101084:	05ca                	slli	a1,a1,0x12
  101086:	0000                	unimp
  101088:	05ca                	slli	a1,a1,0x12
  10108a:	0000                	unimp
  10108c:	05ca                	slli	a1,a1,0x12
  10108e:	0000                	unimp
  101090:	05ca                	slli	a1,a1,0x12
  101092:	0000                	unimp
  101094:	05ca                	slli	a1,a1,0x12
  101096:	0000                	unimp
  101098:	05ca                	slli	a1,a1,0x12
  10109a:	0000                	unimp
  10109c:	05ca                	slli	a1,a1,0x12
  10109e:	0000                	unimp
  1010a0:	05ca                	slli	a1,a1,0x12
  1010a2:	0000                	unimp
  1010a4:	05ca                	slli	a1,a1,0x12
  1010a6:	0000                	unimp
  1010a8:	05ca                	slli	a1,a1,0x12
  1010aa:	0000                	unimp
  1010ac:	05ca                	slli	a1,a1,0x12
  1010ae:	0000                	unimp
  1010b0:	05ca                	slli	a1,a1,0x12
  1010b2:	0000                	unimp
  1010b4:	05ca                	slli	a1,a1,0x12
  1010b6:	0000                	unimp
  1010b8:	05ca                	slli	a1,a1,0x12
  1010ba:	0000                	unimp
  1010bc:	05ca                	slli	a1,a1,0x12
  1010be:	0000                	unimp
  1010c0:	05ca                	slli	a1,a1,0x12
  1010c2:	0000                	unimp
  1010c4:	05ca                	slli	a1,a1,0x12
  1010c6:	0000                	unimp
  1010c8:	05ca                	slli	a1,a1,0x12
  1010ca:	0000                	unimp
  1010cc:	04f6                	slli	s1,s1,0x1d
  1010ce:	0000                	unimp
  1010d0:	05ca                	slli	a1,a1,0x12
  1010d2:	0000                	unimp
  1010d4:	05ca                	slli	a1,a1,0x12
  1010d6:	0000                	unimp
  1010d8:	05ca                	slli	a1,a1,0x12
  1010da:	0000                	unimp
  1010dc:	05ca                	slli	a1,a1,0x12
  1010de:	0000                	unimp
  1010e0:	05ca                	slli	a1,a1,0x12
  1010e2:	0000                	unimp
  1010e4:	05ca                	slli	a1,a1,0x12
  1010e6:	0000                	unimp
  1010e8:	05ca                	slli	a1,a1,0x12
  1010ea:	0000                	unimp
  1010ec:	05ca                	slli	a1,a1,0x12
  1010ee:	0000                	unimp
  1010f0:	05ca                	slli	a1,a1,0x12
  1010f2:	0000                	unimp
  1010f4:	05ca                	slli	a1,a1,0x12
  1010f6:	0000                	unimp
  1010f8:	05aa                	slli	a1,a1,0xa
  1010fa:	0000                	unimp
  1010fc:	04fc                	addi	a5,sp,588
  1010fe:	0000                	unimp
  101100:	05ca                	slli	a1,a1,0x12
  101102:	0000                	unimp
  101104:	05ca                	slli	a1,a1,0x12
  101106:	0000                	unimp
  101108:	05ca                	slli	a1,a1,0x12
  10110a:	0000                	unimp
  10110c:	05ca                	slli	a1,a1,0x12
  10110e:	0000                	unimp
  101110:	04fc                	addi	a5,sp,588
  101112:	0000                	unimp
  101114:	05ca                	slli	a1,a1,0x12
  101116:	0000                	unimp
  101118:	05ca                	slli	a1,a1,0x12
  10111a:	0000                	unimp
  10111c:	05ca                	slli	a1,a1,0x12
  10111e:	0000                	unimp
  101120:	05ca                	slli	a1,a1,0x12
  101122:	0000                	unimp
  101124:	05ca                	slli	a1,a1,0x12
  101126:	0000                	unimp
  101128:	053e                	slli	a0,a0,0xf
  10112a:	0000                	unimp
  10112c:	04f6                	slli	s1,s1,0x1d
  10112e:	0000                	unimp
  101130:	05ca                	slli	a1,a1,0x12
  101132:	0000                	unimp
  101134:	05ca                	slli	a1,a1,0x12
  101136:	0000                	unimp
  101138:	0582                	c.slli64	a1
  10113a:	0000                	unimp
  10113c:	05ca                	slli	a1,a1,0x12
  10113e:	0000                	unimp
  101140:	0502                	c.slli64	a0
  101142:	0000                	unimp
  101144:	05ca                	slli	a1,a1,0x12
  101146:	0000                	unimp
  101148:	05ca                	slli	a1,a1,0x12
  10114a:	0000                	unimp
  10114c:	04f6                	slli	s1,s1,0x1d
	...

0000000000101150 <digits.1072>:
  101150:	3130 3332 3534 3736 3938 6261 6463 6665     0123456789abcdef
  101160:	6867 6a69 6c6b 6e6d 706f 7271 7473 7675     ghijklmnopqrstuv
  101170:	7877 7a79 0000                              wxyz..

0000000000101176 <printBufferIsFull>:
static bool printBufferIsFull(void)
{
    uint32_t wo;

    // Optimized modulo operation
    wo = printBuffer.writeOffset + 1;
  101176:	00080697          	auipc	a3,0x80
  10117a:	e8a68693          	addi	a3,a3,-374 # 181000 <__partition_shared_data_start>
  10117e:	42dc                	lw	a5,4(a3)
  101180:	2785                	addiw	a5,a5,1
  101182:	0007871b          	sext.w	a4,a5
    if (wo >= printBuffer.bufferSize)
  101186:	4694                	lw	a3,8(a3)
  101188:	00d76463          	bltu	a4,a3,101190 <printBufferIsFull+0x1a>
    {
        wo -= printBuffer.bufferSize;
  10118c:	40d7873b          	subw	a4,a5,a3
    {
        printBuffer.readOffset = priRead(ENGINE_REG(_QUEUE_HEAD(printBufferQueue)));
    }
#endif
#if LWRISCV_CONFIG_DEBUG_PRINT_METADATA_IN_BUFFER
    printBuffer.readOffset = printBufferTarget->readOffset;
  101190:	00080797          	auipc	a5,0x80
  101194:	e8078793          	addi	a5,a5,-384 # 181010 <printBufferTarget>
  101198:	639c                	ld	a5,0(a5)
  10119a:	4388                	lw	a0,0(a5)
  10119c:	2501                	sext.w	a0,a0
  10119e:	00080797          	auipc	a5,0x80
  1011a2:	e6a7a123          	sw	a0,-414(a5) # 181000 <__partition_shared_data_start>
#endif

    return printBuffer.readOffset == wo;
  1011a6:	8d19                	sub	a0,a0,a4
}
  1011a8:	00153513          	seqz	a0,a0
  1011ac:	8082                	ret

00000000001011ae <debugLogsFlush>:

// Lightweight fence, may not be coherent with rest of the system

static inline void riscvLwfenceIO(void)
{
    __asm__ volatile ("csrrw zero, %0, zero" : : "i"(LW_RISCV_CSR_LWFENCEIO));
  1011ae:	80001073          	csrw	0x800,zero
    priWrite(ENGINE_REG(_QUEUE_TAIL(printBufferQueue)),
             printBuffer.writeOffset);
#endif

#if LWRISCV_CONFIG_DEBUG_PRINT_METADATA_IN_BUFFER
    printBufferTarget->writeOffset = printBuffer.writeOffset;
  1011b2:	00080797          	auipc	a5,0x80
  1011b6:	e5e78793          	addi	a5,a5,-418 # 181010 <printBufferTarget>
  1011ba:	639c                	ld	a5,0(a5)
  1011bc:	00080717          	auipc	a4,0x80
  1011c0:	e4470713          	addi	a4,a4,-444 # 181000 <__partition_shared_data_start>
  1011c4:	4358                	lw	a4,4(a4)
  1011c6:	c3d8                	sw	a4,4(a5)
        localWrite(LW_PRGNLCL_FALCON_IRQSSET, DRF_DEF(_PRGNLCL, _FALCON_IRQSSET, _SWGEN0, _SET));
    else
        localWrite(LW_PRGNLCL_FALCON_IRQSSET, DRF_DEF(_PRGNLCL, _FALCON_IRQSSET, _SWGEN1, _SET));
#endif
#endif //LWRISCV_PLATFORM_IS_CMOD
}
  1011c8:	8082                	ret

00000000001011ca <debugPutchar>:

static void debugPutchar(int ch, void *pArg)
{
  1011ca:	1141                	addi	sp,sp,-16
  1011cc:	e406                	sd	ra,8(sp)
  1011ce:	e022                	sd	s0,0(sp)
  1011d0:	842a                	mv	s0,a0
    // If buffer is full, notify client RM and stall GSP
    if (printBufferIsFull())
  1011d2:	fa5ff0ef          	jal	ra,101176 <printBufferIsFull>
  1011d6:	e531                	bnez	a0,101222 <debugPutchar+0x58>
        {
        } while (printBufferIsFull());
    }

    // Replace newline with null char for ease of displaying debug logs
    if (ch == '\n')
  1011d8:	47a9                	li	a5,10
  1011da:	04f40a63          	beq	s0,a5,10122e <debugPutchar+0x64>
    {
        ch = '\0';
    }

    printBufferData[printBuffer.writeOffset] = (uint8_t)ch;
  1011de:	00080717          	auipc	a4,0x80
  1011e2:	e2270713          	addi	a4,a4,-478 # 181000 <__partition_shared_data_start>
  1011e6:	435c                	lw	a5,4(a4)
  1011e8:	02079613          	slli	a2,a5,0x20
  1011ec:	9201                	srli	a2,a2,0x20
  1011ee:	00080697          	auipc	a3,0x80
  1011f2:	e2a68693          	addi	a3,a3,-470 # 181018 <printBufferData>
  1011f6:	6294                	ld	a3,0(a3)
  1011f8:	96b2                	add	a3,a3,a2
  1011fa:	0ff47413          	andi	s0,s0,255
  1011fe:	00868023          	sb	s0,0(a3)

    // Optimized modulo operation
    printBuffer.writeOffset = printBuffer.writeOffset + 1;
  101202:	2785                	addiw	a5,a5,1
  101204:	0007869b          	sext.w	a3,a5
  101208:	c35c                	sw	a5,4(a4)
    if (printBuffer.writeOffset >= printBuffer.bufferSize)
  10120a:	4718                	lw	a4,8(a4)
  10120c:	00e6e763          	bltu	a3,a4,10121a <debugPutchar+0x50>
    {
        printBuffer.writeOffset -= printBuffer.bufferSize;
  101210:	9f99                	subw	a5,a5,a4
  101212:	00080717          	auipc	a4,0x80
  101216:	def72923          	sw	a5,-526(a4) # 181004 <__partition_shared_data_start+0x4>
    }
}
  10121a:	60a2                	ld	ra,8(sp)
  10121c:	6402                	ld	s0,0(sp)
  10121e:	0141                	addi	sp,sp,16
  101220:	8082                	ret
        debugLogsFlush();
  101222:	f8dff0ef          	jal	ra,1011ae <debugLogsFlush>
        } while (printBufferIsFull());
  101226:	f51ff0ef          	jal	ra,101176 <printBufferIsFull>
  10122a:	fd75                	bnez	a0,101226 <debugPutchar+0x5c>
  10122c:	b775                	j	1011d8 <debugPutchar+0xe>
        ch = '\0';
  10122e:	4401                	li	s0,0
  101230:	b77d                	j	1011de <debugPutchar+0x14>

0000000000101232 <printInit>:

bool printInit(void *pBuffer, uint16_t bufferSize, uint8_t queueNo, uint8_t swgenNo)
{
    if (bufferSize & 0x7)
  101232:	0075f793          	andi	a5,a1,7
  101236:	e7b5                	bnez	a5,1012a2 <printInit+0x70>
    {
        return false;
    }

    if (bufferSize < sizeof(printBuffer) + 16)
  101238:	0005879b          	sext.w	a5,a1
  10123c:	477d                	li	a4,31
  10123e:	06f77463          	bleu	a5,a4,1012a6 <printInit+0x74>
    {
        return false;
    }

    if ((uintptr_t)pBuffer & 0x7)
  101242:	00757793          	andi	a5,a0,7
  101246:	e3b5                	bnez	a5,1012aa <printInit+0x78>
    }

    printBufferInterrupt = swgenNo;
#endif

    printBufferData = pBuffer;
  101248:	00080797          	auipc	a5,0x80
  10124c:	dca7b823          	sd	a0,-560(a5) # 181018 <printBufferData>
    printBuffer.readOffset = 0;
  101250:	00080717          	auipc	a4,0x80
  101254:	db070713          	addi	a4,a4,-592 # 181000 <__partition_shared_data_start>
  101258:	00072023          	sw	zero,0(a4)
    printBuffer.writeOffset = 0;
  10125c:	00072223          	sw	zero,4(a4)
    printBuffer.bufferSize = (uint32_t)bufferSize - (uint32_t)sizeof(printBuffer);
  101260:	ff05869b          	addiw	a3,a1,-16
  101264:	c714                	sw	a3,8(a4)
    printBuffer.magic = LWRISCV_DEBUG_BUFFER_MAGIC;
  101266:	f007c7b7          	lui	a5,0xf007c
  10126a:	a117879b          	addiw	a5,a5,-1519
  10126e:	c75c                	sw	a5,12(a4)

    // Let last character be always null char for ease of displaying debug logs
    printBufferData[printBuffer.bufferSize] = '\0';
  101270:	02069713          	slli	a4,a3,0x20
  101274:	9301                	srli	a4,a4,0x20
  101276:	972a                	add	a4,a4,a0
  101278:	00070023          	sb	zero,0(a4)
        bar0Write(ENGINE_REG(_QUEUE_TAIL(queueNo)), printBuffer.writeOffset);
    }
#endif

#if LWRISCV_CONFIG_DEBUG_PRINT_METADATA_IN_BUFFER
    printBufferTarget = (volatile LWRISCV_DEBUG_BUFFER *)(((uint8_t*)pBuffer) + bufferSize - sizeof(LWRISCV_DEBUG_BUFFER));
  10127c:	15c1                	addi	a1,a1,-16
  10127e:	952e                	add	a0,a0,a1
  101280:	00080717          	auipc	a4,0x80
  101284:	d8a73823          	sd	a0,-624(a4) # 181010 <printBufferTarget>
    printBufferTarget->readOffset = printBuffer.readOffset;
  101288:	00052023          	sw	zero,0(a0)
    printBufferTarget->writeOffset = printBuffer.writeOffset;
  10128c:	00052223          	sw	zero,4(a0)
    printBufferTarget->bufferSize = printBuffer.bufferSize;
  101290:	c514                	sw	a3,8(a0)
    printBufferTarget->magic = printBuffer.magic;
  101292:	c55c                	sw	a5,12(a0)
#endif

    bPrintEnabled = true;
  101294:	4785                	li	a5,1
  101296:	00080717          	auipc	a4,0x80
  10129a:	d8f70523          	sb	a5,-630(a4) # 181020 <bPrintEnabled>

    return true;
  10129e:	4505                	li	a0,1
  1012a0:	8082                	ret
        return false;
  1012a2:	4501                	li	a0,0
  1012a4:	8082                	ret
        return false;
  1012a6:	4501                	li	a0,0
  1012a8:	8082                	ret
        return false;
  1012aa:	4501                	li	a0,0
}
  1012ac:	8082                	ret

00000000001012ae <printf>:
        debugLogsFlush();
    }
}

int printf(const char *pFmt, ...)
{
  1012ae:	711d                	addi	sp,sp,-96
  1012b0:	ec06                	sd	ra,24(sp)
  1012b2:	f42e                	sd	a1,40(sp)
  1012b4:	f832                	sd	a2,48(sp)
  1012b6:	fc36                	sd	a3,56(sp)
  1012b8:	e0ba                	sd	a4,64(sp)
  1012ba:	e4be                	sd	a5,72(sp)
  1012bc:	e8c2                	sd	a6,80(sp)
  1012be:	ecc6                	sd	a7,88(sp)
    va_list ap;

    va_start(ap, pFmt);
  1012c0:	103c                	addi	a5,sp,40
  1012c2:	e43e                	sd	a5,8(sp)

    if (bPrintEnabled)
  1012c4:	00080797          	auipc	a5,0x80
  1012c8:	d5c7c783          	lbu	a5,-676(a5) # 181020 <bPrintEnabled>
  1012cc:	e789                	bnez	a5,1012d6 <printf+0x28>
        debugLogsFlush();
    }
    va_end(ap);

    return 0;
}
  1012ce:	4501                	li	a0,0
  1012d0:	60e2                	ld	ra,24(sp)
  1012d2:	6125                	addi	sp,sp,96
  1012d4:	8082                	ret
  1012d6:	862a                	mv	a2,a0
        vprintfmt(debugPutchar, 0, pFmt, ap);
  1012d8:	66a2                	ld	a3,8(sp)
  1012da:	4581                	li	a1,0
  1012dc:	00000517          	auipc	a0,0x0
  1012e0:	eee50513          	addi	a0,a0,-274 # 1011ca <debugPutchar>
  1012e4:	138000ef          	jal	ra,10141c <vprintfmt>
        debugLogsFlush();
  1012e8:	ec7ff0ef          	jal	ra,1011ae <debugLogsFlush>
  1012ec:	b7cd                	j	1012ce <printf+0x20>

00000000001012ee <s_printNum>:
#define PRINTNUM_MAX_LEN 64

static int s_printNum(void (*putch)(int, void*), void *putdat,
                    unsigned long long n, int sign, int pad,
                    int alternate_form, unsigned radix, char padchar)
{
  1012ee:	7135                	addi	sp,sp,-160
  1012f0:	ed06                	sd	ra,152(sp)
  1012f2:	e922                	sd	s0,144(sp)
  1012f4:	e526                	sd	s1,136(sp)
  1012f6:	e14a                	sd	s2,128(sp)
  1012f8:	fcce                	sd	s3,120(sp)
  1012fa:	f8d2                	sd	s4,112(sp)
  1012fc:	f4d6                	sd	s5,104(sp)
  1012fe:	f0da                	sd	s6,96(sp)
  101300:	ecde                	sd	s7,88(sp)
  101302:	e8e2                	sd	s8,80(sp)
  101304:	e4e6                	sd	s9,72(sp)
  101306:	e0ea                	sd	s10,64(sp)
  101308:	8a2a                	mv	s4,a0
  10130a:	8aae                	mv	s5,a1
  10130c:	89b2                	mv	s3,a2
  10130e:	8cb6                	mv	s9,a3
  101310:	8c3e                	mv	s8,a5
  101312:	8442                	mv	s0,a6
  101314:	8bc6                	mv	s7,a7
    static const char digits[] = "0123456789abcdefghijklmnopqrstuvwxyz";
    int len = 0;
    int total;
    unsigned long long x = n;
  101316:	87b2                	mv	a5,a2
    int len = 0;
  101318:	4681                	li	a3,0
  10131a:	a019                	j	101320 <s_printNum+0x32>

    // callwlate length
    do
    {
        x /= radix;
  10131c:	87b2                	mv	a5,a2
        len++;
  10131e:	86ca                	mv	a3,s2
        x /= radix;
  101320:	02041493          	slli	s1,s0,0x20
  101324:	9081                	srli	s1,s1,0x20
  101326:	0297d633          	divu	a2,a5,s1
        len++;
  10132a:	0016891b          	addiw	s2,a3,1
    } while (x > 0);
  10132e:	fe97f7e3          	bleu	s1,a5,10131c <s_printNum+0x2e>

    if (sign < 0)
  101332:	020cc063          	bltz	s9,101352 <s_printNum+0x64>
    {
        len++;
    }

    if (alternate_form)
  101336:	000c0863          	beqz	s8,101346 <s_printNum+0x58>
    {
        if (radix == 8)
  10133a:	47a1                	li	a5,8
  10133c:	00f40e63          	beq	s0,a5,101358 <s_printNum+0x6a>
        {
            len++;
        } else if (radix == 16)
  101340:	47c1                	li	a5,16
  101342:	00f40d63          	beq	s0,a5,10135c <s_printNum+0x6e>
        {
            len += 2;
        }
    }

    if (len > pad)
  101346:	05274663          	blt	a4,s2,101392 <s_printNum+0xa4>
        pad = 0;
    }
    else
    {
        total = pad;
        pad -= len;
  10134a:	412707bb          	subw	a5,a4,s2
        total = pad;
  10134e:	8b3a                	mv	s6,a4
  101350:	a821                	j	101368 <s_printNum+0x7a>
        len++;
  101352:	0026891b          	addiw	s2,a3,2
  101356:	b7c5                	j	101336 <s_printNum+0x48>
            len++;
  101358:	2905                	addiw	s2,s2,1
  10135a:	b7f5                	j	101346 <s_printNum+0x58>
            len += 2;
  10135c:	2909                	addiw	s2,s2,2
  10135e:	b7e5                	j	101346 <s_printNum+0x58>
    }

    // pad
    while (pad--)
    {
        putch(padchar, putdat);
  101360:	85d6                	mv	a1,s5
  101362:	855e                	mv	a0,s7
  101364:	9a02                	jalr	s4
    while (pad--)
  101366:	87ea                	mv	a5,s10
  101368:	fff78d1b          	addiw	s10,a5,-1
  10136c:	fbf5                	bnez	a5,101360 <s_printNum+0x72>
    }

    // write sign
    if (sign < 0)
  10136e:	020cc563          	bltz	s9,101398 <s_printNum+0xaa>
        putch('-', putdat);
        len--;
    }

    // prefix '0x' (hex-values) or '0' (octal-values)
    if (alternate_form)
  101372:	000c0863          	beqz	s8,101382 <s_printNum+0x94>
    {
        if (radix == 8)
  101376:	47a1                	li	a5,8
  101378:	02f40663          	beq	s0,a5,1013a4 <s_printNum+0xb6>
        {
            putch('0', putdat);
            len--;
        } else if (radix == 16)
  10137c:	47c1                	li	a5,16
  10137e:	02f40963          	beq	s0,a5,1013b0 <s_printNum+0xc2>
            len -= 2;
        }
    }

    // write integer
    if (len > PRINTNUM_MAX_LEN)
  101382:	04000793          	li	a5,64
  101386:	0127d463          	ble	s2,a5,10138e <s_printNum+0xa0>
    {
        len = PRINTNUM_MAX_LEN;
  10138a:	04000913          	li	s2,64
    {
        char num[PRINTNUM_MAX_LEN];
        int i;

        x = n;
        i = len;
  10138e:	844a                	mv	s0,s2
        while (i--)
  101390:	a891                	j	1013e4 <s_printNum+0xf6>
        total = len;
  101392:	8b4a                	mv	s6,s2
        pad = 0;
  101394:	4781                	li	a5,0
  101396:	bfc9                	j	101368 <s_printNum+0x7a>
        putch('-', putdat);
  101398:	85d6                	mv	a1,s5
  10139a:	02d00513          	li	a0,45
  10139e:	9a02                	jalr	s4
        len--;
  1013a0:	397d                	addiw	s2,s2,-1
  1013a2:	bfc1                	j	101372 <s_printNum+0x84>
            putch('0', putdat);
  1013a4:	85d6                	mv	a1,s5
  1013a6:	03000513          	li	a0,48
  1013aa:	9a02                	jalr	s4
            len--;
  1013ac:	397d                	addiw	s2,s2,-1
  1013ae:	bfd1                	j	101382 <s_printNum+0x94>
            putch('0', putdat);
  1013b0:	85d6                	mv	a1,s5
  1013b2:	03000513          	li	a0,48
  1013b6:	9a02                	jalr	s4
            putch('x', putdat);
  1013b8:	85d6                	mv	a1,s5
  1013ba:	07800513          	li	a0,120
  1013be:	9a02                	jalr	s4
            len -= 2;
  1013c0:	3979                	addiw	s2,s2,-2
  1013c2:	b7c1                	j	101382 <s_printNum+0x94>
        {
            num[i] = digits[x % radix];
  1013c4:	0299f733          	remu	a4,s3,s1
  1013c8:	00000797          	auipc	a5,0x0
  1013cc:	d8878793          	addi	a5,a5,-632 # 101150 <digits.1072>
  1013d0:	97ba                	add	a5,a5,a4
  1013d2:	0007c703          	lbu	a4,0(a5)
  1013d6:	009c                	addi	a5,sp,64
  1013d8:	97b6                	add	a5,a5,a3
  1013da:	fce78023          	sb	a4,-64(a5)
            x /= radix;
  1013de:	0299d9b3          	divu	s3,s3,s1
        while (i--)
  1013e2:	8436                	mv	s0,a3
  1013e4:	fff4069b          	addiw	a3,s0,-1
  1013e8:	fc71                	bnez	s0,1013c4 <s_printNum+0xd6>
        }
        for (i=0; i<len; ++i)
  1013ea:	01245a63          	ble	s2,s0,1013fe <s_printNum+0x110>
        {
            putch(num[i], putdat);
  1013ee:	009c                	addi	a5,sp,64
  1013f0:	97a2                	add	a5,a5,s0
  1013f2:	85d6                	mv	a1,s5
  1013f4:	fc07c503          	lbu	a0,-64(a5)
  1013f8:	9a02                	jalr	s4
        for (i=0; i<len; ++i)
  1013fa:	2405                	addiw	s0,s0,1
  1013fc:	b7fd                	j	1013ea <s_printNum+0xfc>
        }
    }

    return total;
}
  1013fe:	855a                	mv	a0,s6
  101400:	60ea                	ld	ra,152(sp)
  101402:	644a                	ld	s0,144(sp)
  101404:	64aa                	ld	s1,136(sp)
  101406:	690a                	ld	s2,128(sp)
  101408:	79e6                	ld	s3,120(sp)
  10140a:	7a46                	ld	s4,112(sp)
  10140c:	7aa6                	ld	s5,104(sp)
  10140e:	7b06                	ld	s6,96(sp)
  101410:	6be6                	ld	s7,88(sp)
  101412:	6c46                	ld	s8,80(sp)
  101414:	6ca6                	ld	s9,72(sp)
  101416:	6d06                	ld	s10,64(sp)
  101418:	610d                	addi	sp,sp,160
  10141a:	8082                	ret

000000000010141c <vprintfmt>:

int vprintfmt(void (*putch)(int, void*), void *putdat,
              const char* pFormat, va_list ap)
{
  10141c:	711d                	addi	sp,sp,-96
  10141e:	ec86                	sd	ra,88(sp)
  101420:	e8a2                	sd	s0,80(sp)
  101422:	e4a6                	sd	s1,72(sp)
  101424:	e0ca                	sd	s2,64(sp)
  101426:	fc4e                	sd	s3,56(sp)
  101428:	f852                	sd	s4,48(sp)
  10142a:	f456                	sd	s5,40(sp)
  10142c:	f05a                	sd	s6,32(sp)
  10142e:	ec5e                	sd	s7,24(sp)
  101430:	89aa                	mv	s3,a0
  101432:	892e                	mv	s2,a1
  101434:	8b32                	mv	s6,a2
  101436:	e436                	sd	a3,8(sp)
    const char* f = pFormat;
    int total = 0; // total chars written
    char padchar = ' ';
  101438:	02000a13          	li	s4,32
    int total = 0; // total chars written
  10143c:	4401                	li	s0,0
  10143e:	aa51                	j	1015d2 <vprintfmt+0x1b6>
            int longint = 0;
            int sign = 0;
            int base = 0;
            int alternate_form = 0;

            if (*arg == '#')
  101440:	001b4703          	lbu	a4,1(s6)
  101444:	02300793          	li	a5,35
  101448:	02f70f63          	beq	a4,a5,101486 <vprintfmt+0x6a>
            const char* arg = f;
  10144c:	85a6                	mv	a1,s1
            int alternate_form = 0;
  10144e:	4781                	li	a5,0
                alternate_form = 1;
                arg++;
            }

            // support for %0N zero-padding
            if (*arg == '0')
  101450:	0005c683          	lbu	a3,0(a1)
  101454:	03000713          	li	a4,48
  101458:	02e68b63          	beq	a3,a4,10148e <vprintfmt+0x72>
            {
                padchar = '0';
  10145c:	4701                	li	a4,0
                arg++;
            }

            while ((*arg >= '0') && (*arg <= '9'))
  10145e:	0005c683          	lbu	a3,0(a1)
  101462:	fd06861b          	addiw	a2,a3,-48
  101466:	0ff67613          	andi	a2,a2,255
  10146a:	4525                	li	a0,9
  10146c:	02c56563          	bltu	a0,a2,101496 <vprintfmt+0x7a>
            {
                pad *= 10;
  101470:	0027161b          	slliw	a2,a4,0x2
  101474:	9f31                	addw	a4,a4,a2
  101476:	0017161b          	slliw	a2,a4,0x1
                pad += (*(arg++)) - '0';
  10147a:	0585                	addi	a1,a1,1
  10147c:	fd06869b          	addiw	a3,a3,-48
  101480:	00d6073b          	addw	a4,a2,a3
  101484:	bfe9                	j	10145e <vprintfmt+0x42>
                arg++;
  101486:	002b0593          	addi	a1,s6,2
                alternate_form = 1;
  10148a:	4785                	li	a5,1
  10148c:	b7d1                	j	101450 <vprintfmt+0x34>
                arg++;
  10148e:	0585                	addi	a1,a1,1
                padchar = '0';
  101490:	03000a13          	li	s4,48
  101494:	b7e1                	j	10145c <vprintfmt+0x40>
            }

            if (*arg == 'p')
  101496:	07000613          	li	a2,112
  10149a:	02c68d63          	beq	a3,a2,1014d4 <vprintfmt+0xb8>
            int longint = 0;
  10149e:	4501                	li	a0,0
                // %p == %#lx
                alternate_form = 1;
                longint = 1;
            }

            if (*arg == 'l')
  1014a0:	06c00613          	li	a2,108
  1014a4:	02c68b63          	beq	a3,a2,1014da <vprintfmt+0xbe>
                    arg++;
                    longint = 2;
                }
            }

            switch (*(arg++))
  1014a8:	00158b13          	addi	s6,a1,1
  1014ac:	0005c683          	lbu	a3,0(a1)
  1014b0:	fdb6869b          	addiw	a3,a3,-37
  1014b4:	0ff6f593          	andi	a1,a3,255
  1014b8:	05300613          	li	a2,83
  1014bc:	10b66763          	bltu	a2,a1,1015ca <vprintfmt+0x1ae>
  1014c0:	00259693          	slli	a3,a1,0x2
  1014c4:	00000617          	auipc	a2,0x0
  1014c8:	b3c60613          	addi	a2,a2,-1220 # 101000 <__fmc_imem_size+0xfe000>
  1014cc:	96b2                	add	a3,a3,a2
  1014ce:	4294                	lw	a3,0(a3)
  1014d0:	96b2                	add	a3,a3,a2
  1014d2:	8682                	jr	a3
                alternate_form = 1;
  1014d4:	4785                	li	a5,1
                longint = 1;
  1014d6:	4505                	li	a0,1
  1014d8:	b7e1                	j	1014a0 <vprintfmt+0x84>
                arg++;
  1014da:	00158513          	addi	a0,a1,1
                if (*(arg) == 'l')
  1014de:	0015c603          	lbu	a2,1(a1)
  1014e2:	06c00693          	li	a3,108
  1014e6:	00d60563          	beq	a2,a3,1014f0 <vprintfmt+0xd4>
                arg++;
  1014ea:	85aa                	mv	a1,a0
                longint = 1;
  1014ec:	4505                	li	a0,1
  1014ee:	bf6d                	j	1014a8 <vprintfmt+0x8c>
                    arg++;
  1014f0:	0589                	addi	a1,a1,2
                    longint = 2;
  1014f2:	4509                	li	a0,2
  1014f4:	bf55                	j	1014a8 <vprintfmt+0x8c>
            int base = 0;
  1014f6:	4801                	li	a6,0
            int sign = 0;
  1014f8:	4681                	li	a3,0
  1014fa:	a031                	j	101506 <vprintfmt+0xea>
            {
            case 'i':
            case 'd':
                sign = 1;
            case 'u':
                base = 10;
  1014fc:	4829                	li	a6,10
                sign = 1;
  1014fe:	4685                	li	a3,1
  101500:	a019                	j	101506 <vprintfmt+0xea>
                base = 10;
  101502:	4829                	li	a6,10
            int sign = 0;
  101504:	4681                	li	a3,0
            case 'x':
            case 'X':
                {
                    unsigned long long val;

                    if (!base)
  101506:	02080f63          	beqz	a6,101544 <vprintfmt+0x128>
                        base = 16;

                    if (longint == 2)
  10150a:	4609                	li	a2,2
  10150c:	02c50e63          	beq	a0,a2,101548 <vprintfmt+0x12c>
                        {
                            sign = -1;
                            tmp = -tmp;
                        }
                        val = (unsigned long long int)tmp;
                    } else if (longint == 1)
  101510:	4605                	li	a2,1
  101512:	04c50763          	beq	a0,a2,101560 <vprintfmt+0x144>
                            tmp = -tmp;
                        }
                        val = (unsigned long int)tmp;
                    } else
                    {
                        int tmp = va_arg(ap, int);
  101516:	6622                	ld	a2,8(sp)
  101518:	00860593          	addi	a1,a2,8
  10151c:	e42e                	sd	a1,8(sp)
  10151e:	4210                	lw	a2,0(a2)
                        if ((sign) && (tmp < 0))
  101520:	c299                	beqz	a3,101526 <vprintfmt+0x10a>
  101522:	04064b63          	bltz	a2,101578 <vprintfmt+0x15c>
                        {
                            sign = -1;
                            tmp = -tmp;
                        }
                        val = (unsigned int)tmp;
  101526:	1602                	slli	a2,a2,0x20
  101528:	9201                	srli	a2,a2,0x20
                    }

                    wrote = s_printNum(putch, putdat, val, sign, pad,
  10152a:	88d2                	mv	a7,s4
  10152c:	85ca                	mv	a1,s2
  10152e:	854e                	mv	a0,s3
  101530:	dbfff0ef          	jal	ra,1012ee <s_printNum>
  101534:	8aaa                	mv	s5,a0
                // unsupported, just return with whatever already printed
                wrote = -1;
                break;
            }

            if (wrote >= 0)
  101536:	0a0adb63          	bgez	s5,1015ec <vprintfmt+0x1d0>
  10153a:	8b26                	mv	s6,s1
  10153c:	a845                	j	1015ec <vprintfmt+0x1d0>
            int sign = 0;
  10153e:	4681                	li	a3,0
                    base = 8;
  101540:	4821                	li	a6,8
  101542:	b7e1                	j	10150a <vprintfmt+0xee>
                        base = 16;
  101544:	4841                	li	a6,16
  101546:	b7d1                	j	10150a <vprintfmt+0xee>
                        long long int tmp = va_arg(ap, long long int);
  101548:	6622                	ld	a2,8(sp)
  10154a:	00860593          	addi	a1,a2,8
  10154e:	e42e                	sd	a1,8(sp)
  101550:	6210                	ld	a2,0(a2)
                        if ((sign) && (tmp < 0))
  101552:	dee1                	beqz	a3,10152a <vprintfmt+0x10e>
  101554:	fc065be3          	bgez	a2,10152a <vprintfmt+0x10e>
                            tmp = -tmp;
  101558:	40c00633          	neg	a2,a2
                            sign = -1;
  10155c:	56fd                	li	a3,-1
                        val = (unsigned long long int)tmp;
  10155e:	b7f1                	j	10152a <vprintfmt+0x10e>
                        long int tmp = va_arg(ap, long int);
  101560:	6622                	ld	a2,8(sp)
  101562:	00860593          	addi	a1,a2,8
  101566:	e42e                	sd	a1,8(sp)
  101568:	6210                	ld	a2,0(a2)
                        if ((sign) && (tmp < 0))
  10156a:	d2e1                	beqz	a3,10152a <vprintfmt+0x10e>
  10156c:	fa065fe3          	bgez	a2,10152a <vprintfmt+0x10e>
                            tmp = -tmp;
  101570:	40c00633          	neg	a2,a2
                            sign = -1;
  101574:	56fd                	li	a3,-1
                        val = (unsigned long int)tmp;
  101576:	bf55                	j	10152a <vprintfmt+0x10e>
                            tmp = -tmp;
  101578:	40c0063b          	negw	a2,a2
  10157c:	2601                	sext.w	a2,a2
                            sign = -1;
  10157e:	56fd                	li	a3,-1
  101580:	b75d                	j	101526 <vprintfmt+0x10a>
                    char* val = va_arg(ap, char *);
  101582:	67a2                	ld	a5,8(sp)
  101584:	00878713          	addi	a4,a5,8
  101588:	e43a                	sd	a4,8(sp)
  10158a:	0007bb83          	ld	s7,0(a5)
                    wrote = 0;
  10158e:	4a81                	li	s5,0
                    while (val[wrote])
  101590:	a021                	j	101598 <vprintfmt+0x17c>
                        putch(val[wrote], putdat);
  101592:	85ca                	mv	a1,s2
  101594:	9982                	jalr	s3
                        wrote++;
  101596:	2a85                	addiw	s5,s5,1
                    while (val[wrote])
  101598:	015b87b3          	add	a5,s7,s5
  10159c:	0007c503          	lbu	a0,0(a5)
  1015a0:	f96d                	bnez	a0,101592 <vprintfmt+0x176>
                    if (wrote == 0)
  1015a2:	f80a9ae3          	bnez	s5,101536 <vprintfmt+0x11a>
                        wrote = -2;
  1015a6:	5af9                	li	s5,-2
  1015a8:	a091                	j	1015ec <vprintfmt+0x1d0>
                    char val = (char)va_arg(ap, unsigned);
  1015aa:	67a2                	ld	a5,8(sp)
  1015ac:	00878713          	addi	a4,a5,8
  1015b0:	e43a                	sd	a4,8(sp)
                    putch(val, putdat);
  1015b2:	85ca                	mv	a1,s2
  1015b4:	0007c503          	lbu	a0,0(a5)
  1015b8:	9982                	jalr	s3
                    wrote = 1;
  1015ba:	4a85                	li	s5,1
  1015bc:	a805                	j	1015ec <vprintfmt+0x1d0>
                putch('%', putdat);
  1015be:	85ca                	mv	a1,s2
  1015c0:	02500513          	li	a0,37
  1015c4:	9982                	jalr	s3
                wrote = 1;
  1015c6:	4a85                	li	s5,1
  1015c8:	a015                	j	1015ec <vprintfmt+0x1d0>
                wrote = -1;
  1015ca:	5afd                	li	s5,-1
  1015cc:	b7ad                	j	101536 <vprintfmt+0x11a>
        if (wrote == -2)
        {
            wrote = 0;
        }

        total += wrote;
  1015ce:	0154043b          	addw	s0,s0,s5
        char lwr = *(f++);
  1015d2:	001b0493          	addi	s1,s6,1
  1015d6:	000b4503          	lbu	a0,0(s6)
        if (lwr == '\0')
  1015da:	c10d                	beqz	a0,1015fc <vprintfmt+0x1e0>
        if (lwr != '%')
  1015dc:	02500793          	li	a5,37
  1015e0:	e6f500e3          	beq	a0,a5,101440 <vprintfmt+0x24>
            putch(lwr, putdat);
  1015e4:	85ca                	mv	a1,s2
  1015e6:	9982                	jalr	s3
        char lwr = *(f++);
  1015e8:	8b26                	mv	s6,s1
            wrote = 1;
  1015ea:	4a85                	li	s5,1
        if (wrote == -1)
  1015ec:	57fd                	li	a5,-1
  1015ee:	00fa8763          	beq	s5,a5,1015fc <vprintfmt+0x1e0>
        if (wrote == -2)
  1015f2:	57f9                	li	a5,-2
  1015f4:	fcfa9de3          	bne	s5,a5,1015ce <vprintfmt+0x1b2>
            wrote = 0;
  1015f8:	4a81                	li	s5,0
  1015fa:	bfd1                	j	1015ce <vprintfmt+0x1b2>
    }

    return total;
}
  1015fc:	8522                	mv	a0,s0
  1015fe:	60e6                	ld	ra,88(sp)
  101600:	6446                	ld	s0,80(sp)
  101602:	64a6                	ld	s1,72(sp)
  101604:	6906                	ld	s2,64(sp)
  101606:	79e2                	ld	s3,56(sp)
  101608:	7a42                	ld	s4,48(sp)
  10160a:	7aa2                	ld	s5,40(sp)
  10160c:	7b02                	ld	s6,32(sp)
  10160e:	6be2                	ld	s7,24(sp)
  101610:	6125                	addi	sp,sp,96
  101612:	8082                	ret
	...

Disassembly of section .partition_hs_code:

0000000000102000 <partition_1_startup>:
  102000:	00000297          	auipc	t0,0x0
  102004:	01c28293          	addi	t0,t0,28 # 10201c <partition_1_trap_handler>
  102008:	10529073          	csrw	stvec,t0
  10200c:	00080117          	auipc	sp,0x80
  102010:	1f410113          	addi	sp,sp,500 # 182200 <_partition_1_stack_top>
  102014:	04e000ef          	jal	ra,102062 <partition_1_main>

0000000000102018 <_end>:
  102018:	a001                	j	102018 <_end>
	...

000000000010201c <partition_1_trap_handler>:
           ret.error, ret.value);
    sbicall0(SBI_EXTENSION_SHUTDOWN, SBI_LWFUNC_FIRST);
}

void partition_1_trap_handler(void) 
{
  10201c:	1101                	addi	sp,sp,-32
  10201e:	ec06                	sd	ra,24(sp)
  102020:	e822                	sd	s0,16(sp)
  102022:	e426                	sd	s1,8(sp)
    printf("In Partition 1 trap handler at %p, cause 0x%llx val 0x%llx\n",
           csr_read(LW_RISCV_CSR_SEPC),
  102024:	141025f3          	csrr	a1,sepc
           csr_read(LW_RISCV_CSR_SCAUSE),
  102028:	14202673          	csrr	a2,scause
           csr_read(LW_RISCV_CSR_STVAL));
  10202c:	143026f3          	csrr	a3,stval
    printf("In Partition 1 trap handler at %p, cause 0x%llx val 0x%llx\n",
  102030:	00000517          	auipc	a0,0x0
  102034:	11850513          	addi	a0,a0,280 # 102148 <partition_1_main+0xe6>
  102038:	a76ff0ef          	jal	ra,1012ae <printf>

    printf("Shutting down\n");
  10203c:	00000517          	auipc	a0,0x0
  102040:	14c50513          	addi	a0,a0,332 # 102188 <partition_1_main+0x126>
  102044:	a6aff0ef          	jal	ra,1012ae <printf>
  "mv tp, s1\n" \
  "mv gp, s0\n" \

SBICALL SBI_RETURN_VALUE sbicall0( int32_t extension, int32_t function )
{
    register int32_t a7 __asm__( "a7" ) = extension;
  102048:	48a1                	li	a7,8
    register int32_t a6 __asm__( "a6" ) = function;
  10204a:	4801                	li	a6,0
    register uint64_t a1 __asm__( "a1" );
    register uint64_t a0 __asm__( "a0" );
    __asm__ volatile (SBICALL_BODY
  10204c:	840e                	mv	s0,gp
  10204e:	8492                	mv	s1,tp
  102050:	00000073          	ecall
  102054:	8226                	mv	tp,s1
  102056:	81a2                	mv	gp,s0
    sbicall0(SBI_EXTENSION_SHUTDOWN, SBI_LWFUNC_FIRST);

    return;
}
  102058:	60e2                	ld	ra,24(sp)
  10205a:	6442                	ld	s0,16(sp)
  10205c:	64a2                	ld	s1,8(sp)
  10205e:	6105                	addi	sp,sp,32
  102060:	8082                	ret

0000000000102062 <partition_1_main>:
{
  102062:	1101                	addi	sp,sp,-32
  102064:	ec06                	sd	ra,24(sp)
  102066:	e822                	sd	s0,16(sp)
  102068:	e426                	sd	s1,8(sp)
    measurements.time    = csr_read(LW_RISCV_CSR_HPMCOUNTER_TIME);
  10206a:	c01027f3          	rdtime	a5
  10206e:	0007f517          	auipc	a0,0x7f
  102072:	fba50513          	addi	a0,a0,-70 # 181028 <measurements>
  102076:	e11c                	sd	a5,0(a0)
    measurements.instret = csr_read(LW_RISCV_CSR_HPMCOUNTER_INSTRET);
  102078:	c02027f3          	rdinstret	a5
  10207c:	e51c                	sd	a5,8(a0)
    measurements.cycle   = csr_read(LW_RISCV_CSR_HPMCOUNTER_CYCLE);
  10207e:	c00027f3          	rdcycle	a5
  102082:	e91c                	sd	a5,16(a0)
    return (SBI_RETURN_VALUE) { .error = a0, .value = (int64_t)a1 };
}

SBICALL SBI_RETURN_VALUE sbicall6( int32_t extension, int32_t function, uint64_t arg0, uint64_t arg1, uint64_t arg2, uint64_t arg3, uint64_t arg4, uint64_t arg5 )
{
    register int32_t a7 __asm__( "a7" ) = extension;
  102084:	090008b7          	lui	a7,0x9000
  102088:	1eb8889b          	addiw	a7,a7,491
    register int32_t a6 __asm__( "a6" ) = function;
  10208c:	4801                	li	a6,0
    register uint64_t a5 __asm__( "a5" ) = arg5;
  10208e:	4781                	li	a5,0
    register uint64_t a4 __asm__( "a4" ) = arg4;
  102090:	4701                	li	a4,0
    register uint64_t a3 __asm__( "a3" ) = arg3;
  102092:	4681                	li	a3,0
    register uint64_t a2 __asm__( "a2" ) = arg2;
  102094:	4601                	li	a2,0
    register uint64_t a1 __asm__( "a1" ) = arg1;
  102096:	4581                	li	a1,0
    register uint64_t a0 __asm__( "a0" ) = arg0;
  102098:	0007f317          	auipc	t1,0x7f
  10209c:	f6830313          	addi	t1,t1,-152 # 181000 <__partition_shared_data_start>
  1020a0:	40650533          	sub	a0,a0,t1
    __asm__ volatile (SBICALL_BODY
  1020a4:	840e                	mv	s0,gp
  1020a6:	8492                	mv	s1,tp
  1020a8:	00000073          	ecall
  1020ac:	8226                	mv	tp,s1
  1020ae:	81a2                	mv	gp,s0
    printf("Partition 1 critical error: returned from SBI call. Error: 0x%llx, value: 0x%llx. Shutting down\n",
  1020b0:	862e                	mv	a2,a1
  1020b2:	85aa                	mv	a1,a0
  1020b4:	00000517          	auipc	a0,0x0
  1020b8:	02c50513          	addi	a0,a0,44 # 1020e0 <partition_1_main+0x7e>
  1020bc:	9f2ff0ef          	jal	ra,1012ae <printf>
    register int32_t a7 __asm__( "a7" ) = extension;
  1020c0:	48a1                	li	a7,8
    register int32_t a6 __asm__( "a6" ) = function;
  1020c2:	4801                	li	a6,0
    __asm__ volatile (SBICALL_BODY
  1020c4:	840e                	mv	s0,gp
  1020c6:	8492                	mv	s1,tp
  1020c8:	00000073          	ecall
  1020cc:	8226                	mv	tp,s1
  1020ce:	81a2                	mv	gp,s0
}
  1020d0:	60e2                	ld	ra,24(sp)
  1020d2:	6442                	ld	s0,16(sp)
  1020d4:	64a2                	ld	s1,8(sp)
  1020d6:	6105                	addi	sp,sp,32
  1020d8:	8082                	ret
  1020da:	0000                	unimp
  1020dc:	0000                	unimp
  1020de:	0000                	unimp
  1020e0:	6150                	ld	a2,128(a0)
  1020e2:	7472                	ld	s0,312(sp)
  1020e4:	7469                	lui	s0,0xffffa
  1020e6:	6f69                	lui	t5,0x1a
  1020e8:	206e                	fld	ft0,216(sp)
  1020ea:	2031                	0x2031
  1020ec:	74697263          	bleu	t1,s2,102830 <partition_1_main+0x7ce>
  1020f0:	6369                	lui	t1,0x1a
  1020f2:	6c61                	lui	s8,0x18
  1020f4:	6520                	ld	s0,72(a0)
  1020f6:	7272                	ld	tp,312(sp)
  1020f8:	203a726f          	jal	tp,1a9afa <_partition_0_stack_top+0x266ea>
  1020fc:	6572                	ld	a0,280(sp)
  1020fe:	7574                	ld	a3,232(a0)
  102100:	6e72                	ld	t3,280(sp)
  102102:	6465                	lui	s0,0x19
  102104:	6620                	ld	s0,72(a2)
  102106:	6f72                	ld	t5,280(sp)
  102108:	206d                	0x206d
  10210a:	20494253          	0x20494253
  10210e:	6c6c6163          	bltu	s8,t1,1027d0 <partition_1_main+0x76e>
  102112:	202e                	fld	ft0,200(sp)
  102114:	7245                	lui	tp,0xffff1
  102116:	6f72                	ld	t5,280(sp)
  102118:	3a72                	fld	fs4,312(sp)
  10211a:	3020                	fld	fs0,96(s0)
  10211c:	2578                	fld	fa4,200(a0)
  10211e:	6c6c                	ld	a1,216(s0)
  102120:	2c78                	fld	fa4,216(s0)
  102122:	7620                	ld	s0,104(a2)
  102124:	6c61                	lui	s8,0x18
  102126:	6575                	lui	a0,0x1d
  102128:	203a                	fld	ft0,392(sp)
  10212a:	7830                	ld	a2,112(s0)
  10212c:	6c25                	lui	s8,0x9
  10212e:	786c                	ld	a1,240(s0)
  102130:	202e                	fld	ft0,200(sp)
  102132:	74756853          	0x74756853
  102136:	6974                	ld	a3,208(a0)
  102138:	676e                	ld	a4,216(sp)
  10213a:	6420                	ld	s0,72(s0)
  10213c:	0a6e776f          	jal	a4,1e91e2 <_partition_0_stack_top+0x65dd2>
	...
  102148:	6e49                	lui	t3,0x12
  10214a:	5020                	lw	s0,96(s0)
  10214c:	7261                	lui	tp,0xffff8
  10214e:	6974                	ld	a3,208(a0)
  102150:	6974                	ld	a3,208(a0)
  102152:	31206e6f          	jal	t3,108464 <partition_0_init+0x53ea>
  102156:	7420                	ld	s0,104(s0)
  102158:	6172                	ld	sp,280(sp)
  10215a:	2070                	fld	fa2,192(s0)
  10215c:	6168                	ld	a0,192(a0)
  10215e:	646e                	ld	s0,216(sp)
  102160:	656c                	ld	a1,200(a0)
  102162:	2072                	fld	ft0,280(sp)
  102164:	7461                	lui	s0,0xffff8
  102166:	2520                	fld	fs0,72(a0)
  102168:	2c70                	fld	fa2,216(s0)
  10216a:	6320                	ld	s0,64(a4)
  10216c:	7561                	lui	a0,0xffff8
  10216e:	30206573          	csrrsi	a0,medeleg,0
  102172:	2578                	fld	fa4,200(a0)
  102174:	6c6c                	ld	a1,216(s0)
  102176:	2078                	fld	fa4,192(s0)
  102178:	6176                	ld	sp,344(sp)
  10217a:	206c                	fld	fa1,192(s0)
  10217c:	7830                	ld	a2,112(s0)
  10217e:	6c25                	lui	s8,0x9
  102180:	786c                	ld	a1,240(s0)
  102182:	000a                	c.slli	zero,0x2
  102184:	0000                	unimp
  102186:	0000                	unimp
  102188:	74756853          	0x74756853
  10218c:	6974                	ld	a3,208(a0)
  10218e:	676e                	ld	a4,216(sp)
  102190:	6420                	ld	s0,72(s0)
  102192:	0a6e776f          	jal	a4,1e9238 <_partition_0_stack_top+0x65e28>
	...

Disassembly of section .partition_rtos_code:

0000000000103000 <partition_0_startup>:
  103000:	00000297          	auipc	t0,0x0
  103004:	01c28293          	addi	t0,t0,28 # 10301c <partition_0_trap_handler>
  103008:	10529073          	csrw	stvec,t0
  10300c:	00080117          	auipc	sp,0x80
  103010:	40410113          	addi	sp,sp,1028 # 183410 <_partition_0_stack_top>
  103014:	066000ef          	jal	ra,10307a <partition_0_init>

0000000000103018 <_end>:
  103018:	a001                	j	103018 <_end>
	...

000000000010301c <partition_0_trap_handler>:
        while (1)
            ;
}

void partition_0_trap_handler(void) 
{
  10301c:	1141                	addi	sp,sp,-16
  10301e:	e406                	sd	ra,8(sp)
    printf("In Partition 0 trap handler at %p, cause 0x%llx val 0x%llx\n",
           csr_read(LW_RISCV_CSR_SEPC),
  103020:	141025f3          	csrr	a1,sepc
           csr_read(LW_RISCV_CSR_SCAUSE),
  103024:	14202673          	csrr	a2,scause
           csr_read(LW_RISCV_CSR_STVAL));
  103028:	143026f3          	csrr	a3,stval
    printf("In Partition 0 trap handler at %p, cause 0x%llx val 0x%llx\n",
  10302c:	00000517          	auipc	a0,0x0
  103030:	43450513          	addi	a0,a0,1076 # 103460 <partition_0_init+0x3e6>
  103034:	a7afe0ef          	jal	ra,1012ae <printf>
    printf("Entering ICD\n");
  103038:	00000517          	auipc	a0,0x0
  10303c:	46850513          	addi	a0,a0,1128 # 1034a0 <partition_0_init+0x426>
  103040:	a6efe0ef          	jal	ra,1012ae <printf>

static inline void localWrite(uint32_t addr, uint32_t val)
{
    volatile uint32_t *pReg = (volatile uint32_t*)((uintptr_t)addr);

    *pReg = val;
  103044:	012817b7          	lui	a5,0x1281
  103048:	3c07a823          	sw	zero,976(a5) # 12813d0 <_partition_0_stack_top+0x10fdfc0>
  10304c:	bfe5                	j	103044 <partition_0_trap_handler+0x28>

000000000010304e <_selwrityInitCorePrivilege>:
    data64 = csr_read(LW_RISCV_CSR_SSPM);
  10304e:	5d9027f3          	csrr	a5,0x5d9
    data64 = FLD_SET_DRF64(_RISCV_CSR, _SSPM, _UPLM, _LEVEL2, data64);
  103052:	9bc1                	andi	a5,a5,-16
  103054:	0057e793          	ori	a5,a5,5
    csr_write(LW_RISCV_CSR_SSPM, data64);
  103058:	5d979073          	csrw	0x5d9,a5
    data64 = csr_read(LW_RISCV_CSR_SRSP);
  10305c:	5da027f3          	csrr	a5,0x5da
    data64 = FLD_SET_DRF64(_RISCV_CSR, _SRSP, _SRPL, _LEVEL2, data64);
  103060:	9bcd                	andi	a5,a5,-13
  103062:	0087e793          	ori	a5,a5,8
    csr_write(LW_RISCV_CSR_SRSP, data64);
  103066:	5da79073          	csrw	0x5da,a5
    data64 = csr_read(LW_RISCV_CSR_RSP);
  10306a:	89a027f3          	csrr	a5,0x89a
    data64 = FLD_SET_DRF64(_RISCV_CSR, _RSP, _URPL, _LEVEL2, data64);
  10306e:	9bf1                	andi	a5,a5,-4
  103070:	0027e793          	ori	a5,a5,2
    csr_write(LW_RISCV_CSR_RSP, data64);
  103074:	89a79073          	csrw	0x89a,a5
}
  103078:	8082                	ret

000000000010307a <partition_0_init>:
{
  10307a:	711d                	addi	sp,sp,-96
  10307c:	ec86                	sd	ra,88(sp)
  10307e:	e8a2                	sd	s0,80(sp)
  103080:	e4a6                	sd	s1,72(sp)
  103082:	e0ca                	sd	s2,64(sp)
  103084:	fc4e                	sd	s3,56(sp)
  103086:	f852                	sd	s4,48(sp)
  103088:	f456                	sd	s5,40(sp)
  10308a:	f05a                	sd	s6,32(sp)
  10308c:	ec5e                	sd	s7,24(sp)
  10308e:	e862                	sd	s8,16(sp)
  103090:	e466                	sd	s9,8(sp)
  103092:	e06a                	sd	s10,0(sp)
  103094:	8c3e                	mv	s8,a5
    if (partition_0_started)
  103096:	00080797          	auipc	a5,0x80
  10309a:	f6a7c783          	lbu	a5,-150(a5) # 183000 <partition_0_started>
  10309e:	cf81                	beqz	a5,1030b6 <partition_0_init+0x3c>
        printf("We should never enter partition 0 init trampoline twice. Entering ICD. \n");
  1030a0:	00000517          	auipc	a0,0x0
  1030a4:	1a050513          	addi	a0,a0,416 # 103240 <partition_0_init+0x1c6>
  1030a8:	a06fe0ef          	jal	ra,1012ae <printf>
  1030ac:	012817b7          	lui	a5,0x1281
  1030b0:	3c07a823          	sw	zero,976(a5) # 12813d0 <_partition_0_stack_top+0x10fdfc0>
  1030b4:	bfe5                	j	1030ac <partition_0_init+0x32>
  1030b6:	89aa                	mv	s3,a0
  1030b8:	8a2e                	mv	s4,a1
  1030ba:	8ab2                	mv	s5,a2
  1030bc:	8b36                	mv	s6,a3
  1030be:	8bba                	mv	s7,a4
  1030c0:	8cc2                	mv	s9,a6
  1030c2:	8d46                	mv	s10,a7
    partition_0_started = true;
  1030c4:	4785                	li	a5,1
  1030c6:	00080717          	auipc	a4,0x80
  1030ca:	f2f70d23          	sb	a5,-198(a4) # 183000 <partition_0_started>
    return *pReg;
  1030ce:	012807b7          	lui	a5,0x1280
  1030d2:	2787a783          	lw	a5,632(a5) # 1280278 <_partition_0_stack_top+0x10fce68>
    dmemSize = DRF_VAL(_PRGNLCL, _FALCON_HWCFG3, _DMEM_TOTAL_SIZE, dmemSize) << 8;
  1030d6:	0107d79b          	srliw	a5,a5,0x10
  1030da:	0087971b          	slliw	a4,a5,0x8
  1030de:	00100937          	lui	s2,0x100
  1030e2:	f0090793          	addi	a5,s2,-256 # fff00 <__fmc_imem_size+0xfcf00>
  1030e6:	8ff9                	and	a5,a5,a4
  1030e8:	2781                	sext.w	a5,a5
    printInit((uint8_t*)LW_RISCV_AMAP_DMEM_START + dmemSize - 0x1000, 0x1000, 7, 1);
  1030ea:	777d                	lui	a4,0xfffff
  1030ec:	97ba                	add	a5,a5,a4
  1030ee:	4685                	li	a3,1
  1030f0:	461d                	li	a2,7
  1030f2:	6585                	lui	a1,0x1
  1030f4:	00180537          	lui	a0,0x180
  1030f8:	953e                	add	a0,a0,a5
  1030fa:	938fe0ef          	jal	ra,101232 <printInit>
    printf("Hello from Partition 0 trampoline!\n");
  1030fe:	00000517          	auipc	a0,0x0
  103102:	19250513          	addi	a0,a0,402 # 103290 <partition_0_init+0x216>
  103106:	9a8fe0ef          	jal	ra,1012ae <printf>
    printf("Printing initial arguments set by SK: \n");
  10310a:	00000517          	auipc	a0,0x0
  10310e:	1ae50513          	addi	a0,a0,430 # 1032b8 <partition_0_init+0x23e>
  103112:	99cfe0ef          	jal	ra,1012ae <printf>
    printf("a0 - SBI Version: 0x%llX \n",  sbiVersion); 
  103116:	85ce                	mv	a1,s3
  103118:	00000517          	auipc	a0,0x0
  10311c:	1c850513          	addi	a0,a0,456 # 1032e0 <partition_0_init+0x266>
  103120:	98efe0ef          	jal	ra,1012ae <printf>
    printf("a1 - misa: 0x%llX \n",         misa);
  103124:	85d2                	mv	a1,s4
  103126:	00000517          	auipc	a0,0x0
  10312a:	1da50513          	addi	a0,a0,474 # 103300 <partition_0_init+0x286>
  10312e:	980fe0ef          	jal	ra,1012ae <printf>
    printf("a2 - marchid: 0x%llX \n",      marchId);
  103132:	85d6                	mv	a1,s5
  103134:	00000517          	auipc	a0,0x0
  103138:	1e450513          	addi	a0,a0,484 # 103318 <partition_0_init+0x29e>
  10313c:	972fe0ef          	jal	ra,1012ae <printf>
    printf("a3 - mimpd: 0x%llX \n",        mimpd);
  103140:	85da                	mv	a1,s6
  103142:	00000517          	auipc	a0,0x0
  103146:	1ee50513          	addi	a0,a0,494 # 103330 <partition_0_init+0x2b6>
  10314a:	964fe0ef          	jal	ra,1012ae <printf>
    printf("a4 - mvendorid: 0x%llX \n",    mvendorid);
  10314e:	85de                	mv	a1,s7
  103150:	00000517          	auipc	a0,0x0
  103154:	1f850513          	addi	a0,a0,504 # 103348 <partition_0_init+0x2ce>
  103158:	956fe0ef          	jal	ra,1012ae <printf>
    printf("a5 - mfetchattr: 0x%llX \n",   mfetchattr);
  10315c:	85e2                	mv	a1,s8
  10315e:	00000517          	auipc	a0,0x0
  103162:	20a50513          	addi	a0,a0,522 # 103368 <partition_0_init+0x2ee>
  103166:	948fe0ef          	jal	ra,1012ae <printf>
    printf("a6 - mldstattr: 0x%llX \n",    mldstattr);
  10316a:	85e6                	mv	a1,s9
  10316c:	00000517          	auipc	a0,0x0
  103170:	21c50513          	addi	a0,a0,540 # 103388 <partition_0_init+0x30e>
  103174:	93afe0ef          	jal	ra,1012ae <printf>
    printf("a7 - always zero: 0x%llX; \n", zero);
  103178:	85ea                	mv	a1,s10
  10317a:	00000517          	auipc	a0,0x0
  10317e:	22e50513          	addi	a0,a0,558 # 1033a8 <partition_0_init+0x32e>
  103182:	92cfe0ef          	jal	ra,1012ae <printf>
    printf("And now switch to bootloader.\n");
  103186:	00000517          	auipc	a0,0x0
  10318a:	24250513          	addi	a0,a0,578 # 1033c8 <partition_0_init+0x34e>
  10318e:	920fe0ef          	jal	ra,1012ae <printf>
        fmcSize = (uint64_t)&__fmc_dmem_size + (uint64_t)&__fmc_imem_size +
  103192:	fff00497          	auipc	s1,0xfff00
  103196:	9ee48493          	addi	s1,s1,-1554 # 2b80 <__fmc_dmem_size+0x680>
  10319a:	fff00797          	auipc	a5,0xfff00
  10319e:	fe678793          	addi	a5,a5,-26 # 3180 <__fmc_imem_size+0x180>
        fmcSize = LW_ALIGN_UP(fmcSize, 0x1000U);
  1031a2:	94be                	add	s1,s1,a5
  1031a4:	6785                	lui	a5,0x1
  1031a6:	17fd                	addi	a5,a5,-1
  1031a8:	94be                	add	s1,s1,a5
  1031aa:	fff90793          	addi	a5,s2,-1
  1031ae:	07b2                	slli	a5,a5,0xc
  1031b0:	8cfd                	and	s1,s1,a5
  1031b2:	01281737          	lui	a4,0x1281
  1031b6:	67472783          	lw	a5,1652(a4) # 1281674 <_partition_0_stack_top+0x10fe264>
        partitionOffset  = ((uint64_t)localRead(LW_PRGNLCL_RISCV_BCR_DMAADDR_PKCPARAM_HI)) << 32;
  1031ba:	02079693          	slli	a3,a5,0x20
  1031be:	67072783          	lw	a5,1648(a4)
        partitionOffset |= localRead(LW_PRGNLCL_RISCV_BCR_DMAADDR_PKCPARAM_LO);
  1031c2:	1782                	slli	a5,a5,0x20
  1031c4:	9381                	srli	a5,a5,0x20
  1031c6:	8fd5                	or	a5,a5,a3
        partitionOffset <<= 8;
  1031c8:	07a2                	slli	a5,a5,0x8
        partitionOffset += fmcSize;
  1031ca:	94be                	add	s1,s1,a5
  1031cc:	66c72783          	lw	a5,1644(a4)
  1031d0:	8b8d                	andi	a5,a5,3
  1031d2:	cb89                	beqz	a5,1031e4 <partition_0_init+0x16a>
  1031d4:	4709                	li	a4,2
  1031d6:	00f76b63          	bltu	a4,a5,1031ec <partition_0_init+0x172>
                partitionOffset += LW_RISCV_AMAP_SYSGPA_START;
  1031da:	c0300793          	li	a5,-1021
  1031de:	17d6                	slli	a5,a5,0x35
  1031e0:	94be                	add	s1,s1,a5
            break;
  1031e2:	a029                	j	1031ec <partition_0_init+0x172>
                partitionOffset += LW_RISCV_AMAP_FBGPA_START;
  1031e4:	30300793          	li	a5,771
  1031e8:	17d6                	slli	a5,a5,0x35
  1031ea:	94be                	add	s1,s1,a5
        printf("Configuring core privileges...\n");
  1031ec:	00000517          	auipc	a0,0x0
  1031f0:	1fc50513          	addi	a0,a0,508 # 1033e8 <partition_0_init+0x36e>
  1031f4:	8bafe0ef          	jal	ra,1012ae <printf>
        _selwrityInitCorePrivilege();
  1031f8:	e57ff0ef          	jal	ra,10304e <_selwrityInitCorePrivilege>
        printf("Jumping to bootloader at %p\n", partitionOffset);
  1031fc:	85a6                	mv	a1,s1
  1031fe:	00000517          	auipc	a0,0x0
  103202:	20a50513          	addi	a0,a0,522 # 103408 <partition_0_init+0x38e>
  103206:	8a8fe0ef          	jal	ra,1012ae <printf>
    __asm__ volatile ("csrrw zero, %0, zero" : : "i"(LW_RISCV_CSR_LWFENCEMEM));
}

static inline void riscvLwfenceRWIO(void)
{
    __asm__ volatile ("csrrw zero, %0, zero" : : "i"(LW_RISCV_CSR_LWFENCEALL));
  10320a:	80201073          	csrw	0x802,zero
        bld(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
  10320e:	88ea                	mv	a7,s10
  103210:	8866                	mv	a6,s9
  103212:	87e2                	mv	a5,s8
  103214:	875e                	mv	a4,s7
  103216:	86da                	mv	a3,s6
  103218:	8656                	mv	a2,s5
  10321a:	85d2                	mv	a1,s4
  10321c:	854e                	mv	a0,s3
  10321e:	9482                	jalr	s1
        printf("We should never reach this in partition 0 code.\n");
  103220:	00000517          	auipc	a0,0x0
  103224:	20850513          	addi	a0,a0,520 # 103428 <partition_0_init+0x3ae>
  103228:	886fe0ef          	jal	ra,1012ae <printf>
    register int32_t a7 __asm__( "a7" ) = extension;
  10322c:	48a1                	li	a7,8
    register int32_t a6 __asm__( "a6" ) = function;
  10322e:	4801                	li	a6,0
    __asm__ volatile (SBICALL_BODY
  103230:	840e                	mv	s0,gp
  103232:	8492                	mv	s1,tp
  103234:	00000073          	ecall
  103238:	8226                	mv	tp,s1
  10323a:	81a2                	mv	gp,s0
            ;
  10323c:	a001                	j	10323c <partition_0_init+0x1c2>
  10323e:	0000                	unimp
  103240:	73206557          	0x73206557
  103244:	6f68                	ld	a0,216(a4)
  103246:	6c75                	lui	s8,0x1d
  103248:	2064                	fld	fs1,192(s0)
  10324a:	656e                	ld	a0,216(sp)
  10324c:	6576                	ld	a0,344(sp)
  10324e:	2072                	fld	ft0,280(sp)
  103250:	6e65                	lui	t3,0x19
  103252:	6574                	ld	a3,200(a0)
  103254:	2072                	fld	ft0,280(sp)
  103256:	6170                	ld	a2,192(a0)
  103258:	7472                	ld	s0,312(sp)
  10325a:	7469                	lui	s0,0xffffa
  10325c:	6f69                	lui	t5,0x1a
  10325e:	206e                	fld	ft0,216(sp)
  103260:	2030                	fld	fa2,64(s0)
  103262:	6e69                	lui	t3,0x1a
  103264:	7469                	lui	s0,0xffffa
  103266:	7420                	ld	s0,104(s0)
  103268:	6172                	ld	sp,280(sp)
  10326a:	706d                	c.lui	zero,0xffffb
  10326c:	6e696c6f          	jal	s8,199952 <_partition_0_stack_top+0x16542>
  103270:	2065                	0x2065
  103272:	7774                	ld	a3,232(a4)
  103274:	6369                	lui	t1,0x1a
  103276:	2e65                	addiw	t3,t3,25
  103278:	4520                	lw	s0,72(a0)
  10327a:	746e                	ld	s0,248(sp)
  10327c:	7265                	lui	tp,0xffff9
  10327e:	6e69                	lui	t3,0x1a
  103280:	43492067          	0x43492067
  103284:	2e44                	fld	fs1,152(a2)
  103286:	0a20                	addi	s0,sp,280
	...
  103290:	6548                	ld	a0,136(a0)
  103292:	6c6c                	ld	a1,216(s0)
  103294:	7266206f          	j	1659ba <partition_0_init+0x62940>
  103298:	50206d6f          	jal	s10,10979a <partition_0_init+0x6720>
  10329c:	7261                	lui	tp,0xffff8
  10329e:	6974                	ld	a3,208(a0)
  1032a0:	6974                	ld	a3,208(a0)
  1032a2:	30206e6f          	jal	t3,1095a4 <partition_0_init+0x652a>
  1032a6:	7420                	ld	s0,104(s0)
  1032a8:	6172                	ld	sp,280(sp)
  1032aa:	706d                	c.lui	zero,0xffffb
  1032ac:	6e696c6f          	jal	s8,199992 <_partition_0_stack_top+0x16582>
  1032b0:	2165                	addiw	sp,sp,25
  1032b2:	000a                	c.slli	zero,0x2
  1032b4:	0000                	unimp
  1032b6:	0000                	unimp
  1032b8:	7250                	ld	a2,160(a2)
  1032ba:	6e69                	lui	t3,0x1a
  1032bc:	6974                	ld	a3,208(a0)
  1032be:	676e                	ld	a4,216(sp)
  1032c0:	6920                	ld	s0,80(a0)
  1032c2:	696e                	ld	s2,216(sp)
  1032c4:	6974                	ld	a3,208(a0)
  1032c6:	6c61                	lui	s8,0x18
  1032c8:	6120                	ld	s0,64(a0)
  1032ca:	6772                	ld	a4,280(sp)
  1032cc:	6d75                	lui	s10,0x1d
  1032ce:	6e65                	lui	t3,0x19
  1032d0:	7374                	ld	a3,224(a4)
  1032d2:	7320                	ld	s0,96(a4)
  1032d4:	7465                	lui	s0,0xffff9
  1032d6:	6220                	ld	s0,64(a2)
  1032d8:	2079                	0x2079
  1032da:	203a4b53          	0x203a4b53
  1032de:	000a                	c.slli	zero,0x2
  1032e0:	3061                	0x3061
  1032e2:	2d20                	fld	fs0,88(a0)
  1032e4:	5320                	lw	s0,96(a4)
  1032e6:	4942                	lw	s2,16(sp)
  1032e8:	5620                	lw	s0,104(a2)
  1032ea:	7265                	lui	tp,0xffff9
  1032ec:	6e6f6973          	csrrsi	s2,0x6e6,30
  1032f0:	203a                	fld	ft0,392(sp)
  1032f2:	7830                	ld	a2,112(s0)
  1032f4:	6c25                	lui	s8,0x9
  1032f6:	586c                	lw	a1,116(s0)
  1032f8:	0a20                	addi	s0,sp,280
  1032fa:	0000                	unimp
  1032fc:	0000                	unimp
  1032fe:	0000                	unimp
  103300:	3161                	addiw	sp,sp,-8
  103302:	2d20                	fld	fs0,88(a0)
  103304:	6d20                	ld	s0,88(a0)
  103306:	7369                	lui	t1,0xffffa
  103308:	3a61                	addiw	s4,s4,-8
  10330a:	3020                	fld	fs0,96(s0)
  10330c:	2578                	fld	fa4,200(a0)
  10330e:	6c6c                	ld	a1,216(s0)
  103310:	2058                	fld	fa4,128(s0)
  103312:	000a                	c.slli	zero,0x2
  103314:	0000                	unimp
  103316:	0000                	unimp
  103318:	3261                	addiw	tp,tp,-8
  10331a:	2d20                	fld	fs0,88(a0)
  10331c:	6d20                	ld	s0,88(a0)
  10331e:	7261                	lui	tp,0xffff8
  103320:	64696863          	bltu	s2,t1,103970 <partition_0_init+0x8f6>
  103324:	203a                	fld	ft0,392(sp)
  103326:	7830                	ld	a2,112(s0)
  103328:	6c25                	lui	s8,0x9
  10332a:	586c                	lw	a1,116(s0)
  10332c:	0a20                	addi	s0,sp,280
  10332e:	0000                	unimp
  103330:	3361                	addiw	t1,t1,-8
  103332:	2d20                	fld	fs0,88(a0)
  103334:	6d20                	ld	s0,88(a0)
  103336:	6d69                	lui	s10,0x1a
  103338:	6470                	ld	a2,200(s0)
  10333a:	203a                	fld	ft0,392(sp)
  10333c:	7830                	ld	a2,112(s0)
  10333e:	6c25                	lui	s8,0x9
  103340:	586c                	lw	a1,116(s0)
  103342:	0a20                	addi	s0,sp,280
  103344:	0000                	unimp
  103346:	0000                	unimp
  103348:	3461                	addiw	s0,s0,-8
  10334a:	2d20                	fld	fs0,88(a0)
  10334c:	6d20                	ld	s0,88(a0)
  10334e:	6576                	ld	a0,344(sp)
  103350:	646e                	ld	s0,216(sp)
  103352:	6469726f          	jal	tp,19a998 <_partition_0_stack_top+0x17588>
  103356:	203a                	fld	ft0,392(sp)
  103358:	7830                	ld	a2,112(s0)
  10335a:	6c25                	lui	s8,0x9
  10335c:	586c                	lw	a1,116(s0)
  10335e:	0a20                	addi	s0,sp,280
	...
  103368:	3561                	addiw	a0,a0,-8
  10336a:	2d20                	fld	fs0,88(a0)
  10336c:	6d20                	ld	s0,88(a0)
  10336e:	6566                	ld	a0,88(sp)
  103370:	6374                	ld	a3,192(a4)
  103372:	6168                	ld	a0,192(a0)
  103374:	7474                	ld	a3,232(s0)
  103376:	3a72                	fld	fs4,312(sp)
  103378:	3020                	fld	fs0,96(s0)
  10337a:	2578                	fld	fa4,200(a0)
  10337c:	6c6c                	ld	a1,216(s0)
  10337e:	2058                	fld	fa4,128(s0)
  103380:	000a                	c.slli	zero,0x2
  103382:	0000                	unimp
  103384:	0000                	unimp
  103386:	0000                	unimp
  103388:	3661                	addiw	a2,a2,-8
  10338a:	2d20                	fld	fs0,88(a0)
  10338c:	6d20                	ld	s0,88(a0)
  10338e:	646c                	ld	a1,200(s0)
  103390:	74617473          	csrrci	s0,0x746,2
  103394:	7274                	ld	a3,224(a2)
  103396:	203a                	fld	ft0,392(sp)
  103398:	7830                	ld	a2,112(s0)
  10339a:	6c25                	lui	s8,0x9
  10339c:	586c                	lw	a1,116(s0)
  10339e:	0a20                	addi	s0,sp,280
	...
  1033a8:	3761                	addiw	a4,a4,-8
  1033aa:	2d20                	fld	fs0,88(a0)
  1033ac:	6120                	ld	s0,64(a0)
  1033ae:	776c                	ld	a1,232(a4)
  1033b0:	7961                	lui	s2,0xffff8
  1033b2:	657a2073          	csrs	0x657,s4
  1033b6:	6f72                	ld	t5,280(sp)
  1033b8:	203a                	fld	ft0,392(sp)
  1033ba:	7830                	ld	a2,112(s0)
  1033bc:	6c25                	lui	s8,0x9
  1033be:	586c                	lw	a1,116(s0)
  1033c0:	000a203b          	0xa203b
  1033c4:	0000                	unimp
  1033c6:	0000                	unimp
  1033c8:	6e41                	lui	t3,0x10
  1033ca:	2064                	fld	fs1,192(s0)
  1033cc:	6f6e                	ld	t5,216(sp)
  1033ce:	77732077          	0x77732077
  1033d2:	7469                	lui	s0,0xffffa
  1033d4:	74206863          	bltu	zero,sp,103b24 <partition_0_init+0xaaa>
  1033d8:	6f62206f          	j	125ace <partition_0_init+0x22a54>
  1033dc:	6f6c746f          	jal	s0,1caad2 <_partition_0_stack_top+0x476c2>
  1033e0:	6461                	lui	s0,0x18
  1033e2:	7265                	lui	tp,0xffff9
  1033e4:	0a2e                	slli	s4,s4,0xb
  1033e6:	0000                	unimp
  1033e8:	666e6f43          	fmadd.q	ft10,ft8,ft6,fa2,unknown
  1033ec:	6769                	lui	a4,0x1a
  1033ee:	7275                	lui	tp,0xffffd
  1033f0:	6e69                	lui	t3,0x1a
  1033f2:	6f632067          	0x6f632067
  1033f6:	6572                	ld	a0,280(sp)
  1033f8:	7020                	ld	s0,96(s0)
  1033fa:	6972                	ld	s2,280(sp)
  1033fc:	6976                	ld	s2,344(sp)
  1033fe:	656c                	ld	a1,200(a0)
  103400:	2e736567          	0x2e736567
  103404:	2e2e                	fld	ft8,200(sp)
  103406:	000a                	c.slli	zero,0x2
  103408:	754a                	ld	a0,176(sp)
  10340a:	706d                	c.lui	zero,0xffffb
  10340c:	6e69                	lui	t3,0x1a
  10340e:	6f742067          	0x6f742067
  103412:	6220                	ld	s0,64(a2)
  103414:	6c746f6f          	jal	t5,14a2da <partition_0_init+0x47260>
  103418:	6564616f          	jal	sp,149a6e <partition_0_init+0x469f4>
  10341c:	2072                	fld	ft0,280(sp)
  10341e:	7461                	lui	s0,0xffff8
  103420:	2520                	fld	fs0,72(a0)
  103422:	0a70                	addi	a2,sp,284
  103424:	0000                	unimp
  103426:	0000                	unimp
  103428:	73206557          	0x73206557
  10342c:	6f68                	ld	a0,216(a4)
  10342e:	6c75                	lui	s8,0x1d
  103430:	2064                	fld	fs1,192(s0)
  103432:	656e                	ld	a0,216(sp)
  103434:	6576                	ld	a0,344(sp)
  103436:	2072                	fld	ft0,280(sp)
  103438:	6572                	ld	a0,280(sp)
  10343a:	6361                	lui	t1,0x18
  10343c:	2068                	fld	fa0,192(s0)
  10343e:	6874                	ld	a3,208(s0)
  103440:	7369                	lui	t1,0xffffa
  103442:	6920                	ld	s0,80(a0)
  103444:	206e                	fld	ft0,216(sp)
  103446:	6170                	ld	a2,192(a0)
  103448:	7472                	ld	s0,312(sp)
  10344a:	7469                	lui	s0,0xffffa
  10344c:	6f69                	lui	t5,0x1a
  10344e:	206e                	fld	ft0,216(sp)
  103450:	2030                	fld	fa2,64(s0)
  103452:	65646f63          	bltu	s0,s6,103ab0 <partition_0_init+0xa36>
  103456:	0a2e                	slli	s4,s4,0xb
	...
  103460:	6e49                	lui	t3,0x12
  103462:	5020                	lw	s0,96(s0)
  103464:	7261                	lui	tp,0xffff8
  103466:	6974                	ld	a3,208(a0)
  103468:	6974                	ld	a3,208(a0)
  10346a:	30206e6f          	jal	t3,10976c <partition_0_init+0x66f2>
  10346e:	7420                	ld	s0,104(s0)
  103470:	6172                	ld	sp,280(sp)
  103472:	2070                	fld	fa2,192(s0)
  103474:	6168                	ld	a0,192(a0)
  103476:	646e                	ld	s0,216(sp)
  103478:	656c                	ld	a1,200(a0)
  10347a:	2072                	fld	ft0,280(sp)
  10347c:	7461                	lui	s0,0xffff8
  10347e:	2520                	fld	fs0,72(a0)
  103480:	2c70                	fld	fa2,216(s0)
  103482:	6320                	ld	s0,64(a4)
  103484:	7561                	lui	a0,0xffff8
  103486:	30206573          	csrrsi	a0,medeleg,0
  10348a:	2578                	fld	fa4,200(a0)
  10348c:	6c6c                	ld	a1,216(s0)
  10348e:	2078                	fld	fa4,192(s0)
  103490:	6176                	ld	sp,344(sp)
  103492:	206c                	fld	fa1,192(s0)
  103494:	7830                	ld	a2,112(s0)
  103496:	6c25                	lui	s8,0x9
  103498:	786c                	ld	a1,240(s0)
  10349a:	000a                	c.slli	zero,0x2
  10349c:	0000                	unimp
  10349e:	0000                	unimp
  1034a0:	6e45                	lui	t3,0x11
  1034a2:	6574                	ld	a3,200(a0)
  1034a4:	6972                	ld	s2,280(sp)
  1034a6:	676e                	ld	a4,216(sp)
  1034a8:	4920                	lw	s0,80(a0)
  1034aa:	000a4443          	fmadd.s	fs0,fs4,ft0,ft0,rmm
	...
