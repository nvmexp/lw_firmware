/* _LWRM_COPYRIGHT_BEGIN_
 *
 * Copyright 2019-2020 by LWPU Corporation.  All rights reserved.  All
 * information contained herein is proprietary and confidential to LWPU
 * Corporation.  Any use, reproduction, or disclosure without the written
 * permission of LWPU Corporation is prohibited.
 *
 * _LWRM_COPYRIGHT_END_
 */
#ifndef LIBOS_SYSCALLS_H_
#define LIBOS_SYSCALLS_H_
#include "libos-config.h"
#include "../kernel/lwriscv.h"

#define ROUND_POWER_2()

typedef enum {
    LIBOS_SYSCALL_TASK_PORT_SEND_RECV_WAIT,
    LIBOS_SYSCALL_TASK_YIELD,
#if LIBOS_FEATURE_PARTITION_SWITCH 
#   if  LIBOS_LWRISCV >= LIBOS_LWRISCV_2_0
        LIBOS_SYSCALL_SWITCH_TO,
#   else
        LIBOS_SYSCALL_PROCESSOR_SUSPEND,
#   endif
#endif
    LIBOS_SYSCALL_DCACHE_ILWALIDATE,
    LIBOS_SYSCALL_SHUTTLE_RESET,
    LIBOS_SYSCALL_TASK_DMA_COPY,
    LIBOS_SYSCALL_TASK_DMA_FLUSH,
#if LIBOS_FEATURE_PAGING
    LIBOS_SYSCALL_INIT_REGISTER_PAGETABLES,
#else
    LIBOS_SYSCALL_BOOTSTRAP_MMAP,
#endif
#if LIBOS_CONFIG_PROFILER_SAVE_ON_SUSPEND
    LIBOS_SYSCALL_PROFILER_ENABLE,
#endif
#if LIBOS_CONFIG_EXTERNAL_INTERRUPT
    LIBOS_SYSCALL_INTERRUPT_ARM_EXTERNAL,
#endif
    LIBOS_SYSCALL_TASK_CRITICAL_SECTION_ENTER,
    LIBOS_SYSCALL_TASK_CRITICAL_SECTION_LEAVE,
#if LIBOS_FEATURE_SHUTDOWN
    LIBOS_SYSCALL_SHUTDOWN,
#endif
#if LIBOS_FEATURE_TIMERS
    LIBOS_SYSCALL_TIMER_SET,
#endif
#if LIBOS_LWRISCV >= LIBOS_LWRISCV_2_0
    LIBOS_SYSCALL_GDMA_TRANSFER,
    LIBOS_SYSCALL_GDMA_FLUSH,
#endif
    LIBOS_SYSCALL_LOCK_RELEASE,
    LIBOS_SYSCALL_LIMIT,

    // These syscalls are special in that they always fail and kill the task
    // They are treated as invalid syscalls by the RTOS 
    LIBOS_SYSCALL_TASK_PANIC,
    LIBOS_SYSCALL_TASK_EXIT
} libos_syscall_id_t;

typedef enum {
#if LIBOS_LWRISCV >= LIBOS_LWRISCV_2_0 && LIBOS_FEATURE_PARTITION_SWITCH
    LIBOS_DAEMON_SWITCH_TO,
#else
    LIBOS_DAEMON_SUSPEND_PROCESSOR,
#endif
} libos_daemon_port_id_t;

#define LIBOS_REG_IOCTL_A0        RISCV_A0
#define LIBOS_REG_IOCTL_STATUS_A0 RISCV_A0

#define LIBOS_REG_IOCTL_PORT_WAIT_ID          RISCV_T1
#define LIBOS_REG_IOCTL_PORT_WAIT_TIMEOUT     RISCV_T2
#define LIBOS_REG_IOCTL_PORT_WAIT_OUT_SHUTTLE RISCV_A6
#define LIBOS_REG_IOCTL_PORT_WAIT_RECV_SIZE   RISCV_A4
#define LIBOS_REG_IOCTL_PORT_WAIT_REMOTE_TASK RISCV_A5

//
// LIBOS_SYSCALL_MEMORY_QUERY register layout for argument handling.
//
#define LIBOS_REG_IOCTL_MEMORY_QUERY_ACCESS_PERMS    RISCV_A1 /* out */
#define LIBOS_REG_IOCTL_MEMORY_QUERY_ALLOCATION_BASE RISCV_A2 /* out */
#define LIBOS_REG_IOCTL_MEMORY_QUERY_ALLOCATION_SIZE RISCV_A3 /* out */
#define LIBOS_REG_IOCTL_MEMORY_QUERY_APERTURE        RISCV_A4 /* out */
#define LIBOS_REG_IOCTL_MEMORY_QUERY_PHYSICAL_OFFSET RISCV_A5 /* out */

//
// LIBOS_SYSCALL_MEMORY_QUERY access values.
//
#define LIBOS_MEMORY_ACCESS_MASK_READ    U(1)
#define LIBOS_MEMORY_ACCESS_MASK_WRITE   U(2)
#define LIBOS_MEMORY_ACCESS_MASK_EXELWTE U(4)

//
// LIBOS_SYSCALL_MEMORY_QUERY aperture values.
//
#define LIBOS_MEMORY_APERTURE_FB     U(0)
#define LIBOS_MEMORY_APERTURE_SYSCOH U(1)
#define LIBOS_MEMORY_APERTURE_MMIO   U(2)

#endif
