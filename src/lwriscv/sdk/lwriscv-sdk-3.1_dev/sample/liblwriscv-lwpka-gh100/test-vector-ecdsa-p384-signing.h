/* _LWRM_COPYRIGHT_BEGIN_
 *
 * Copyright 2020 by LWPU Corporation.  All rights reserved.  All
 * information contained herein is proprietary and confidential to LWPU
 * Corporation.  Any use, reproduction, or disclosure without the written
 * permission of LWPU Corporation is prohibited.
 *
 * _LWRM_COPYRIGHT_END_
 */

#ifndef TESTVECTORECDSAP384SIGNING_H
#define TESTVECTORECDSAP384SIGNING_H

#define SIZE_IN_BYTES_ECDSA_P384 48

#if 1
    /* Test vector obtained from : https://csrc.nist.gov/CSRC/media/Projects/Cryptographic-Algorithm-Validation-Program/dolwments/dss/186-4ecdsatestvectors.zip (See file SigGen.txt, and the first one under "[P-384,SHA-384]".
       Should give a PASS. */

    /*
        All values are in BIG ENDIAN.

        --------------
        Message input:
        --------------
        Hex Msg (MESSAGE TO BE SIGNED) = 6b45d88037392e1371d9fd1cd174e9c1838d11c3d6133dc17e65fa0c485dcca9f52d41b60161246039e42ec784d49400bffdb51459f5de654091301a09378f93464d52118b48d44b30d781eb1dbed09da11fb4c818dbd442d161aba4b9edc79f05e4b7e401651395b53bd8b5bd3f2aaa6a00877fa9b45cadb8e648550b4c6cbe
        MsgHash (SHA-384 HASH OF ABOVE MESSAGE) = 31a452d6164d904bb5724c878280231eae705c29ce9d4bc7d58e020e1085f17eebcc1a38f0ed0bf2b344d81fbd896825
        Tool used to get hash of hex message : https://emn178.github.io/online-tools/sha384.html (Make sure to select 'Hex' from input type dropdown)

        ----------
        Key input:
        ----------
        d (PRIVATE KEY) = 201b432d8df14324182d6261db3e4b3f46a8284482d52e370da41e6cbdf45ec2952f5db7ccbce3bc29449f4fb080ac97

        Public key (not used for signing):
        Qx (PUBLIC KEY X COORDINATE) = c2b47944fb5de342d03285880177ca5f7d0f2fcad7678cce4229d6e1932fcac11bfc3c3e97d942a3c56bf34123013dbf
        Qy (PUBLIC KEY Y COORDINATE) = 37257906a8223866eda0743c519616a76a758ae58aee81c5fd35fbf3a855b7754a36d4a0672df95d6c44a81cf7620c2d

        --------------
        Random number: (picked for colwenience and to compare with final result)
        --------------
        k (RANDOM K FACTOR FOR SIGNING) = dcedabf85978e090f733c6e16646fa34df9ded6e5ce28c6676a00f58a25283db8885e16ce5bf97f917c81e1f25c9c771

        -------
        Output:
        -------
        R (SIGNATURE COMPONENT R) = 50835a9251bad008106177ef004b091a1e4235cd0da84fff54542b0ed755c1d6f251609d14ecf18f9e1ddfe69b946e32
        S (SIGNATURE COMPONENT S) = 0475f3d30c6463b646e8d3bf2455830314611cbde404be518b14464fdb195fdcc92eb222e61f426a4a592c00a6a89721
    */

    uint8_t msgHash[SIZE_IN_BYTES_ECDSA_P384] = {
        0x31, 0xa4, 0x52, 0xd6, 0x16, 0x4d, 0x90, 0x4b, 0xb5, 0x72, 0x4c, 0x87, 0x82, 0x80, 0x23, 0x1e,
        0xae, 0x70, 0x5c, 0x29, 0xce, 0x9d, 0x4b, 0xc7, 0xd5, 0x8e, 0x02, 0x0e, 0x10, 0x85, 0xf1, 0x7e,
        0xeb, 0xcc, 0x1a, 0x38, 0xf0, 0xed, 0x0b, 0xf2, 0xb3, 0x44, 0xd8, 0x1f, 0xbd, 0x89, 0x68, 0x25,
    };

    uint8_t privateKey[SIZE_IN_BYTES_ECDSA_P384] = {
        0x20, 0x1b, 0x43, 0x2d, 0x8d, 0xf1, 0x43, 0x24, 0x18, 0x2d, 0x62, 0x61, 0xdb, 0x3e, 0x4b, 0x3f,
        0x46, 0xa8, 0x28, 0x44, 0x82, 0xd5, 0x2e, 0x37, 0x0d, 0xa4, 0x1e, 0x6c, 0xbd, 0xf4, 0x5e, 0xc2,
        0x95, 0x2f, 0x5d, 0xb7, 0xcc, 0xbc, 0xe3, 0xbc, 0x29, 0x44, 0x9f, 0x4f, 0xb0, 0x80, 0xac, 0x97,
    };

/*
    uint8_t Qx[SIZE_IN_BYTES_ECDSA_P384] = {
        0xc2, 0xb4, 0x79, 0x44, 0xfb, 0x5d, 0xe3, 0x42, 0xd0, 0x32, 0x85, 0x88, 0x01, 0x77, 0xca, 0x5f,
        0x7d, 0x0f, 0x2f, 0xca, 0xd7, 0x67, 0x8c, 0xce, 0x42, 0x29, 0xd6, 0xe1, 0x93, 0x2f, 0xca, 0xc1,
        0x1b, 0xfc, 0x3c, 0x3e, 0x97, 0xd9, 0x42, 0xa3, 0xc5, 0x6b, 0xf3, 0x41, 0x23, 0x01, 0x3d, 0xbf,
    };

    uint8_t Qy[SIZE_IN_BYTES_ECDSA_P384] = {
        0x37, 0x25, 0x79, 0x06, 0xa8, 0x22, 0x38, 0x66, 0xed, 0xa0, 0x74, 0x3c, 0x51, 0x96, 0x16, 0xa7,
        0x6a, 0x75, 0x8a, 0xe5, 0x8a, 0xee, 0x81, 0xc5, 0xfd, 0x35, 0xfb, 0xf3, 0xa8, 0x55, 0xb7, 0x75,
        0x4a, 0x36, 0xd4, 0xa0, 0x67, 0x2d, 0xf9, 0x5d, 0x6c, 0x44, 0xa8, 0x1c, 0xf7, 0x62, 0x0c, 0x2d,
    };
*/

    uint8_t randNum[SIZE_IN_BYTES_ECDSA_P384] = {
        0xdc, 0xed, 0xab, 0xf8, 0x59, 0x78, 0xe0, 0x90, 0xf7, 0x33, 0xc6, 0xe1, 0x66, 0x46, 0xfa, 0x34,
        0xdf, 0x9d, 0xed, 0x6e, 0x5c, 0xe2, 0x8c, 0x66, 0x76, 0xa0, 0x0f, 0x58, 0xa2, 0x52, 0x83, 0xdb,
        0x88, 0x85, 0xe1, 0x6c, 0xe5, 0xbf, 0x97, 0xf9, 0x17, 0xc8, 0x1e, 0x1f, 0x25, 0xc9, 0xc7, 0x71,
    };

    uint8_t R[SIZE_IN_BYTES_ECDSA_P384] = {
        0x50, 0x83, 0x5a, 0x92, 0x51, 0xba, 0xd0, 0x08, 0x10, 0x61, 0x77, 0xef, 0x00, 0x4b, 0x09, 0x1a,
        0x1e, 0x42, 0x35, 0xcd, 0x0d, 0xa8, 0x4f, 0xff, 0x54, 0x54, 0x2b, 0x0e, 0xd7, 0x55, 0xc1, 0xd6,
        0xf2, 0x51, 0x60, 0x9d, 0x14, 0xec, 0xf1, 0x8f, 0x9e, 0x1d, 0xdf, 0xe6, 0x9b, 0x94, 0x6e, 0x32,
    };

    uint8_t S[SIZE_IN_BYTES_ECDSA_P384] = {
        0x04, 0x75, 0xf3, 0xd3, 0x0c, 0x64, 0x63, 0xb6, 0x46, 0xe8, 0xd3, 0xbf, 0x24, 0x55, 0x83, 0x03,
        0x14, 0x61, 0x1c, 0xbd, 0xe4, 0x04, 0xbe, 0x51, 0x8b, 0x14, 0x46, 0x4f, 0xdb, 0x19, 0x5f, 0xdc,
        0xc9, 0x2e, 0xb2, 0x22, 0xe6, 0x1f, 0x42, 0x6a, 0x4a, 0x59, 0x2c, 0x00, 0xa6, 0xa8, 0x97, 0x21,
    };
#endif

/* More test vectors can be added here if needed */

#endif // TESTVECTORECDSAP384SIGNING_H
