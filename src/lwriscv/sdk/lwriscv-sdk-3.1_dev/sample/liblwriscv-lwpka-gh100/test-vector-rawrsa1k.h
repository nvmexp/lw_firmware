/* _LWRM_COPYRIGHT_BEGIN_
 *
 * Copyright 2021 by LWPU Corporation.  All rights reserved.  All
 * information contained herein is proprietary and confidential to LWPU
 * Corporation.  Any use, reproduction, or disclosure without the written
 * permission of LWPU Corporation is prohibited.
 *
 * _LWRM_COPYRIGHT_END_
 */

#ifndef TESTVECTOR_RAWRSA1K_COMMON_H
#define TESTVECTOR_RAWRSA1K_COMMON_H

#define CRYPTO_RSA1K_SIG_SIZE       128

#define BIG_ENDIAN_SIGNATURE        0b00000001
#define BIG_ENDIAN_MODULUS          0b00000010
#define BIG_ENDIAN_EXPONENT         0b00000100

#define LITTLE_ENDIAN_SIGNATURE     0b00000000
#define LITTLE_ENDIAN_MODULUS       LITTLE_ENDIAN_SIGNATURE
#define LITTLE_ENDIAN_EXPONENT      LITTLE_ENDIAN_SIGNATURE

/* Test vector obtained from : https://csrc.nist.gov/CSRC/media/Projects/Cryptographic-Algorithm-Validation-Program/dolwments/dss/186-2rsatestvectors.zip (See file SigVer15_186-3.txt). */

/* 
 * SHAAlg = SHA1
 * n = a8d68acd413c5e195d5ef04e1b4faaf242365cb450196755e92e1215ba59802aafbadbf2564dd550956abb54f8b1c917844e5f36195d1088c600e07cada5c080ede679f50b3de32cf4026e514542495c54b1903768791aae9e36f082cd38e941ada89baecada61ab0dd37ad536bcb0a0946271594836e92ab5517301d45176b5
 * e = 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010001
 * d = 252c4956ac328ba04789bfdc5e90819981a100f3b540069ba8719b8b3ba27980cc7c96710a75ec0da83c1ddf353b45845f3db7224cdecbe5653cebb01fb66305d42e617e8a51514c6d2fb6b3cbe3ad9478ab7acb575f854ec9c9576a70c63934921c39662b32b8c93fb660f64f50e5481892a8ef4b92a64774995f2a0fbd64b9
 * Msg = 4ff6c9e7f9f03abd3e114a788fd51318feda52b6509c1b685483cb6574213f6a8ab4435cf5f34d2eeb076c0510d77b9a48889ae0ca44dfe8773b480169e8f423ce96938ef7221caeac02be42c38618bdf15eacecdf5d91da807d69f1a3229361c4a3a2c628060d05290b2776ce6d52499e647022b66e9b071a4f167c495683ec
 * S = 6466b9759635fbb2a3e8cb7d2a6192ea7da6033b76dd578b76ca468fcb9215f8138966f9aaa3e82246d15bb271a269eda087e63812406407ca12cb085ae82ceebcf28eb44f6608549fbf6383882c864688665a1b5a2d748496b36f8b935f676339fc61e9bc0c3a5a58141226f300cf29c4371047d530a4776809f572b88ecdfe
 * SaltVal = 00
 * Result = P
 *
 * Mod-exp expected result = 0001ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff003021300906052b0e03021a05000414c078e93da54c510d0ac19a4963d198c872f9d853
 * For expected result use: https://www.boxentriq.com/code-breaking/modular-exponentiation
 * n = Modulus
 * S = Signature
 * e = Exponent
 */
 
/* SIGNATURE in BIG ENDIAN format */
unsigned char signature_arr[CRYPTO_RSA1K_SIG_SIZE] = {
    0x64, 0x66, 0xb9, 0x75, 0x96, 0x35, 0xfb, 0xb2, 0xa3, 0xe8, 0xcb, 0x7d, 0x2a, 0x61, 0x92, 0xea,
    0x7d, 0xa6, 0x03, 0x3b, 0x76, 0xdd, 0x57, 0x8b, 0x76, 0xca, 0x46, 0x8f, 0xcb, 0x92, 0x15, 0xf8,
    0x13, 0x89, 0x66, 0xf9, 0xaa, 0xa3, 0xe8, 0x22, 0x46, 0xd1, 0x5b, 0xb2, 0x71, 0xa2, 0x69, 0xed,
    0xa0, 0x87, 0xe6, 0x38, 0x12, 0x40, 0x64, 0x07, 0xca, 0x12, 0xcb, 0x08, 0x5a, 0xe8, 0x2c, 0xee,
    0xbc, 0xf2, 0x8e, 0xb4, 0x4f, 0x66, 0x08, 0x54, 0x9f, 0xbf, 0x63, 0x83, 0x88, 0x2c, 0x86, 0x46,
    0x88, 0x66, 0x5a, 0x1b, 0x5a, 0x2d, 0x74, 0x84, 0x96, 0xb3, 0x6f, 0x8b, 0x93, 0x5f, 0x67, 0x63,
    0x39, 0xfc, 0x61, 0xe9, 0xbc, 0x0c, 0x3a, 0x5a, 0x58, 0x14, 0x12, 0x26, 0xf3, 0x00, 0xcf, 0x29,
    0xc4, 0x37, 0x10, 0x47, 0xd5, 0x30, 0xa4, 0x77, 0x68, 0x09, 0xf5, 0x72, 0xb8, 0x8e, 0xcd, 0xfe
};

/* MODULUS in BIG ENDIAN format */
unsigned char modulus_arr[CRYPTO_RSA1K_SIG_SIZE] = {
    0xa8, 0xd6, 0x8a, 0xcd, 0x41, 0x3c, 0x5e, 0x19, 0x5d, 0x5e, 0xf0, 0x4e, 0x1b, 0x4f, 0xaa, 0xf2,
    0x42, 0x36, 0x5c, 0xb4, 0x50, 0x19, 0x67, 0x55, 0xe9, 0x2e, 0x12, 0x15, 0xba, 0x59, 0x80, 0x2a,
    0xaf, 0xba, 0xdb, 0xf2, 0x56, 0x4d, 0xd5, 0x50, 0x95, 0x6a, 0xbb, 0x54, 0xf8, 0xb1, 0xc9, 0x17,
    0x84, 0x4e, 0x5f, 0x36, 0x19, 0x5d, 0x10, 0x88, 0xc6, 0x00, 0xe0, 0x7c, 0xad, 0xa5, 0xc0, 0x80,
    0xed, 0xe6, 0x79, 0xf5, 0x0b, 0x3d, 0xe3, 0x2c, 0xf4, 0x02, 0x6e, 0x51, 0x45, 0x42, 0x49, 0x5c,
    0x54, 0xb1, 0x90, 0x37, 0x68, 0x79, 0x1a, 0xae, 0x9e, 0x36, 0xf0, 0x82, 0xcd, 0x38, 0xe9, 0x41,
    0xad, 0xa8, 0x9b, 0xae, 0xca, 0xda, 0x61, 0xab, 0x0d, 0xd3, 0x7a, 0xd5, 0x36, 0xbc, 0xb0, 0xa0,
    0x94, 0x62, 0x71, 0x59, 0x48, 0x36, 0xe9, 0x2a, 0xb5, 0x51, 0x73, 0x01, 0xd4, 0x51, 0x76, 0xb5
};

/* EXPECTED RESULT in BIG ENDIAN format */
unsigned char expected_result[CRYPTO_RSA1K_SIG_SIZE] = {
    0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x30, 0x21, 0x30,
    0x09, 0x06, 0x05, 0x2b, 0x0e, 0x03, 0x02, 0x1a, 0x05, 0x00, 0x04, 0x14, 0xc0, 0x78, 0xe9, 0x3d,
    0xa5, 0x4c, 0x51, 0x0d, 0x0a, 0xc1, 0x9a, 0x49, 0x63, 0xd1, 0x98, 0xc8, 0x72, 0xf9, 0xd8, 0x53
};

/* EXPONENT in BIG ENDIAN format */
uint8_t pub_exp_arr[4U] = { 0x00, 0x01, 0x00, 0x01 };

uint8_t flags = BIG_ENDIAN_SIGNATURE | BIG_ENDIAN_MODULUS | BIG_ENDIAN_EXPONENT;

#endif // TESTVECTOR_RAWRSA1K_COMMON_H
