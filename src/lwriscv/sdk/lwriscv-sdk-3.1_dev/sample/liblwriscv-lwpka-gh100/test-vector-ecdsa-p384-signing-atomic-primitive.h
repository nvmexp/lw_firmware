/* _LWRM_COPYRIGHT_BEGIN_
 *
 * Copyright 2020 by LWPU Corporation.  All rights reserved.  All
 * information contained herein is proprietary and confidential to LWPU
 * Corporation.  Any use, reproduction, or disclosure without the written
 * permission of LWPU Corporation is prohibited.
 *
 * _LWRM_COPYRIGHT_END_
 */

#ifndef TESTVECTORECDSAP384SIGNINGATOMICPRIMITIVE_H
#define TESTVECTORECDSAP384SIGNINGATOMICPRIMITIVE_H

#include "ecdsa_atomic_primitive.h"

#define SIZE_IN_BYTES_ECDSA_P384 48

#if 1
    /*
        All values are in BIG ENDIAN.

        --------------
        Message input:
        --------------
        Message = "Hello"
        MsgHash (SHA-384 HASH OF ABOVE MESSAGE) = 3519fe5ad2c596efe3e276a6f351b8fc0b03db861782490d45f7598ebd0ab5fd5520ed102f38c4a5ec834e98668035fc
        Tool used to get hash of hex message : https://emn178.github.io/online-tools/sha384.html

        ----------
        Key input:
        ----------
        d (PRIVATE KEY) = 201b432d8df14324182d6261db3e4b3f46a8284482d52e370da41e6cbdf45ec2952f5db7ccbce3bc29449f4fb080ac97

        Public key (not used for signing):
        Qx (PUBLIC KEY X COORDINATE) = c2b47944fb5de342d03285880177ca5f7d0f2fcad7678cce4229d6e1932fcac11bfc3c3e97d942a3c56bf34123013dbf
        Qy (PUBLIC KEY Y COORDINATE) = 37257906a8223866eda0743c519616a76a758ae58aee81c5fd35fbf3a855b7754a36d4a0672df95d6c44a81cf7620c2d
    */

    char*   message = "Hello";

    uint8_t msgHash[SIZE_IN_BYTES_ECDSA_P384] = {
        0x35, 0x19, 0xfe, 0x5a, 0xd2, 0xc5, 0x96, 0xef, 0xe3, 0xe2, 0x76, 0xa6, 0xf3, 0x51, 0xb8, 0xfc,
        0x0b, 0x03, 0xdb, 0x86, 0x17, 0x82, 0x49, 0x0d, 0x45, 0xf7, 0x59, 0x8e, 0xbd, 0x0a, 0xb5, 0xfd,
        0x55, 0x20, 0xed, 0x10, 0x2f, 0x38, 0xc4, 0xa5, 0xec, 0x83, 0x4e, 0x98, 0x66, 0x80, 0x35, 0xfc,
    };

#ifdef TEST_KEY_INSERTION
    uint8_t privateKey[SIZE_IN_BYTES_ECDSA_P384] = {
        0x20, 0x1b, 0x43, 0x2d, 0x8d, 0xf1, 0x43, 0x24, 0x18, 0x2d, 0x62, 0x61, 0xdb, 0x3e, 0x4b, 0x3f,
        0x46, 0xa8, 0x28, 0x44, 0x82, 0xd5, 0x2e, 0x37, 0x0d, 0xa4, 0x1e, 0x6c, 0xbd, 0xf4, 0x5e, 0xc2,
        0x95, 0x2f, 0x5d, 0xb7, 0xcc, 0xbc, 0xe3, 0xbc, 0x29, 0x44, 0x9f, 0x4f, 0xb0, 0x80, 0xac, 0x97,
    };

    uint8_t Qx[SIZE_IN_BYTES_ECDSA_P384] = {
        0xc2, 0xb4, 0x79, 0x44, 0xfb, 0x5d, 0xe3, 0x42, 0xd0, 0x32, 0x85, 0x88, 0x01, 0x77, 0xca, 0x5f,
        0x7d, 0x0f, 0x2f, 0xca, 0xd7, 0x67, 0x8c, 0xce, 0x42, 0x29, 0xd6, 0xe1, 0x93, 0x2f, 0xca, 0xc1,
        0x1b, 0xfc, 0x3c, 0x3e, 0x97, 0xd9, 0x42, 0xa3, 0xc5, 0x6b, 0xf3, 0x41, 0x23, 0x01, 0x3d, 0xbf,
    };

    uint8_t Qy[SIZE_IN_BYTES_ECDSA_P384] = {
        0x37, 0x25, 0x79, 0x06, 0xa8, 0x22, 0x38, 0x66, 0xed, 0xa0, 0x74, 0x3c, 0x51, 0x96, 0x16, 0xa7,
        0x6a, 0x75, 0x8a, 0xe5, 0x8a, 0xee, 0x81, 0xc5, 0xfd, 0x35, 0xfb, 0xf3, 0xa8, 0x55, 0xb7, 0x75,
        0x4a, 0x36, 0xd4, 0xa0, 0x67, 0x2d, 0xf9, 0x5d, 0x6c, 0x44, 0xa8, 0x1c, 0xf7, 0x62, 0x0c, 0x2d,
    };
#endif // TEST_KEY_INSERTION
#endif

/* More test vectors can be added here if needed */

#endif // TESTVECTORECDSAP384SIGNINGATOMICPRIMITIVE_H
