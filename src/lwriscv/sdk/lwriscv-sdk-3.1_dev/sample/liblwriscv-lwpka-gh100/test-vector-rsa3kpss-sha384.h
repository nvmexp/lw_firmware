/* _LWRM_COPYRIGHT_BEGIN_
 *
 * Copyright 2020 by LWPU Corporation.  All rights reserved.  All
 * information contained herein is proprietary and confidential to LWPU
 * Corporation.  Any use, reproduction, or disclosure without the written
 * permission of LWPU Corporation is prohibited.
 *
 * _LWRM_COPYRIGHT_END_
 */

#ifndef TESTVECTOR_RSA3KPSS_SHA384_H
#define TESTVECTOR_RSA3KPSS_SHA384_H

#include "test-vector-rsa3kpss-common.h"

#if 1
    /* Test vector obtained from : https://csrc.nist.gov/CSRC/media/Projects/Cryptographic-Algorithm-Validation-Program/dolwments/dss/186-3rsatestvectors.zip (See file SigGenPSS_186-3.txt).
       Should give a PASS. */

    /*
        n = a7a1882a7fb896786034d07fb1b9f6327c27bdd7ce6fe39c285ae3b6c34259adc0dc4f7b9c7dec3ca4a20d3407339eedd7a12a421da18f5954673cac2ff059156ecc73c6861ec761e6a0f2a5a033a6768c6a42d8b459e1b4932349e84efd92df59b45935f3d0e30817c66201aa99d07ae36c5d74f408d69cc08f044151ff4960e531360cb19077833adf7bce77ecfaa133c0ccc63c93b856814569e0b9884ee554061b9a20ab46c38263c094dae791aa61a17f8d16f0e85b7e5ce3b067ece89e20bc4e8f1ae814b276d234e04f4e766f501da74ea7e3817c24ea35d016676cece652b823b051625573ca92757fc720d254ecf1dcbbfd21d98307561ecaab545480c7c52ad7e9fa6b597f5fe550559c2fe923205ac1761a99737ca02d7b19822e008a8969349c87fb874c81620e38f613c8521f0381fe5ba55b74827dad3e1cf2aa29c6933629f2b286ad11be88fa6436e7e3f64a75e3595290dc0d1cd5eee7aaac54959cc53bd5a934a365e72dd81a2bd4fb9a67821bffedf2ef2bd94913de8b

        e = 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001415a7

        d = 073a5fc4cd642f6113dffc4f84035cee3a2b8acc549703751a1d6a5eaa13487229a58ef7d7a522bb9f4f25510f1aa0f74c6a8fc8a5c5be8b91a674ede50e92f7e34a90a3c9da999fffb1d695e4588f451256c163484c151350cb9c7825a7d910845ee5cf826fecf9a7c0fbbbba22bb4a531c131d2e7761ba898f002ebef8ab87218511f81d3266e1ec07a7ca8622514c6dfdc86c67679a2c8f5f031de9a0c22b5a88060b46ee0c64d3b9af3c0a379bcd9c6a1b51cf6480456d3fd6def94cd2a6c171dd3f010e3c9d662bc857208248c94ebcb9fd997b9ff4a7e5fd95558569906525e741d78344f6f6cfdbd59d4faa52ee3fa964fb7cccb2d6be1935d211fe1498217716273939a946081fd8509913fd47747c5c2f03efd4d6fc9c6fcfd8402e9f40a0a5b3de3ca2b3c0fac9456938faa6cf2c20e3912e5981c9876d8ca1ff29b87a15eeae0ccce3f8a8f1e405091c083b98bcc5fe0d0deaae33c67c0394437f0eccb385b7efb17aeebba8afaecca30a2f63eac8f0ac8f1eacad85bbcaf3960b

        SHAAlg = SHA384

        Msg = 9221f0fe9115843554d5685d9fe69dc49e95ceb5793986e428b8a10b894c01d6af8782fd7d952faf74c2b637ca3b19dabc19a7fe259b2b924eb363a908c5b368f8ab1b2333fc67c30b8ea56b2839dc5bdadefb14ada810bc3e92bac54e2ae1ca1594a4b9d8d19337be421f40e0674e0e9fedb43d3ae89e2ca05d90a68203f2c2

        S = 9687115be478e4b642cd369392b9dd0f3576e704af7218b1f94d7f8fe7f07073e3e8e1186fa768977d6b514e513459f2373df6ec52e3de9bd83fcc5cc3e6b97f8b3fb534163c64f5267620700e9d8c52b3df61a7c3748ef159d6b390895afa3af59109a5478d016d96c49f68dfc735ba2aafd5012c13515ed6644f0d4109c45556e14a3821e1aa24beb8a81a48da27f131de84f7ba51581d81b8ff31ba92b8a1fde867f07e32e6c2709253448174dd31324dbc32b05f07587f76a9997decb80f38d8c13d0f6eb3c10e3d96a2293f7464f1e04602ef6e84c2d0245d7db256a67d132a47cae9abe06b61a8968f50a1749995dc15ef0dcb1d5f5959e4d454c8547bbb4d195698f484617bfd122acaae2d0e8c76d28b24005ab03caa781ea97b1c4d9396a16f7998eee7ddd9de4cabe57032d9438a5d99c6b34a956122350263c7e998bc61dec91381012e686d079e39e96b1ea4bfdb7cdf630ddb422c6b580e5506c9cc3d6c100f2041d17ceaaaa54589249f04a1370ffa3bf3ff1adeb890688698

        SaltVal = 61a762f8968d5f367e2dbcacb4021653dc75437d9000e3169d943729703837a5cbf4de62bdedc95fd0d1004e84751452
    */

    /* SIGNATURE in BIG ENDIAN format */
    unsigned char signature[CRYPTO_RSA3K_SIG_SIZE] = {
            0x96, 0x87, 0x11, 0x5b, 0xe4, 0x78, 0xe4, 0xb6, 0x42, 0xcd, 0x36, 0x93, 0x92, 0xb9, 0xdd, 0x0f,
            0x35, 0x76, 0xe7, 0x04, 0xaf, 0x72, 0x18, 0xb1, 0xf9, 0x4d, 0x7f, 0x8f, 0xe7, 0xf0, 0x70, 0x73,
            0xe3, 0xe8, 0xe1, 0x18, 0x6f, 0xa7, 0x68, 0x97, 0x7d, 0x6b, 0x51, 0x4e, 0x51, 0x34, 0x59, 0xf2,
            0x37, 0x3d, 0xf6, 0xec, 0x52, 0xe3, 0xde, 0x9b, 0xd8, 0x3f, 0xcc, 0x5c, 0xc3, 0xe6, 0xb9, 0x7f,
            0x8b, 0x3f, 0xb5, 0x34, 0x16, 0x3c, 0x64, 0xf5, 0x26, 0x76, 0x20, 0x70, 0x0e, 0x9d, 0x8c, 0x52,
            0xb3, 0xdf, 0x61, 0xa7, 0xc3, 0x74, 0x8e, 0xf1, 0x59, 0xd6, 0xb3, 0x90, 0x89, 0x5a, 0xfa, 0x3a,
            0xf5, 0x91, 0x09, 0xa5, 0x47, 0x8d, 0x01, 0x6d, 0x96, 0xc4, 0x9f, 0x68, 0xdf, 0xc7, 0x35, 0xba,
            0x2a, 0xaf, 0xd5, 0x01, 0x2c, 0x13, 0x51, 0x5e, 0xd6, 0x64, 0x4f, 0x0d, 0x41, 0x09, 0xc4, 0x55,
            0x56, 0xe1, 0x4a, 0x38, 0x21, 0xe1, 0xaa, 0x24, 0xbe, 0xb8, 0xa8, 0x1a, 0x48, 0xda, 0x27, 0xf1,
            0x31, 0xde, 0x84, 0xf7, 0xba, 0x51, 0x58, 0x1d, 0x81, 0xb8, 0xff, 0x31, 0xba, 0x92, 0xb8, 0xa1,
            0xfd, 0xe8, 0x67, 0xf0, 0x7e, 0x32, 0xe6, 0xc2, 0x70, 0x92, 0x53, 0x44, 0x81, 0x74, 0xdd, 0x31,
            0x32, 0x4d, 0xbc, 0x32, 0xb0, 0x5f, 0x07, 0x58, 0x7f, 0x76, 0xa9, 0x99, 0x7d, 0xec, 0xb8, 0x0f,
            0x38, 0xd8, 0xc1, 0x3d, 0x0f, 0x6e, 0xb3, 0xc1, 0x0e, 0x3d, 0x96, 0xa2, 0x29, 0x3f, 0x74, 0x64,
            0xf1, 0xe0, 0x46, 0x02, 0xef, 0x6e, 0x84, 0xc2, 0xd0, 0x24, 0x5d, 0x7d, 0xb2, 0x56, 0xa6, 0x7d,
            0x13, 0x2a, 0x47, 0xca, 0xe9, 0xab, 0xe0, 0x6b, 0x61, 0xa8, 0x96, 0x8f, 0x50, 0xa1, 0x74, 0x99,
            0x95, 0xdc, 0x15, 0xef, 0x0d, 0xcb, 0x1d, 0x5f, 0x59, 0x59, 0xe4, 0xd4, 0x54, 0xc8, 0x54, 0x7b,
            0xbb, 0x4d, 0x19, 0x56, 0x98, 0xf4, 0x84, 0x61, 0x7b, 0xfd, 0x12, 0x2a, 0xca, 0xae, 0x2d, 0x0e,
            0x8c, 0x76, 0xd2, 0x8b, 0x24, 0x00, 0x5a, 0xb0, 0x3c, 0xaa, 0x78, 0x1e, 0xa9, 0x7b, 0x1c, 0x4d,
            0x93, 0x96, 0xa1, 0x6f, 0x79, 0x98, 0xee, 0xe7, 0xdd, 0xd9, 0xde, 0x4c, 0xab, 0xe5, 0x70, 0x32,
            0xd9, 0x43, 0x8a, 0x5d, 0x99, 0xc6, 0xb3, 0x4a, 0x95, 0x61, 0x22, 0x35, 0x02, 0x63, 0xc7, 0xe9,
            0x98, 0xbc, 0x61, 0xde, 0xc9, 0x13, 0x81, 0x01, 0x2e, 0x68, 0x6d, 0x07, 0x9e, 0x39, 0xe9, 0x6b,
            0x1e, 0xa4, 0xbf, 0xdb, 0x7c, 0xdf, 0x63, 0x0d, 0xdb, 0x42, 0x2c, 0x6b, 0x58, 0x0e, 0x55, 0x06,
            0xc9, 0xcc, 0x3d, 0x6c, 0x10, 0x0f, 0x20, 0x41, 0xd1, 0x7c, 0xea, 0xaa, 0xa5, 0x45, 0x89, 0x24,
            0x9f, 0x04, 0xa1, 0x37, 0x0f, 0xfa, 0x3b, 0xf3, 0xff, 0x1a, 0xde, 0xb8, 0x90, 0x68, 0x86, 0x98,
    };

    /* MODULUS in BIG ENDIAN format */
    unsigned char modulus[CRYPTO_RSA3K_SIG_SIZE] = {
            0xa7, 0xa1, 0x88, 0x2a, 0x7f, 0xb8, 0x96, 0x78, 0x60, 0x34, 0xd0, 0x7f, 0xb1, 0xb9, 0xf6, 0x32,
            0x7c, 0x27, 0xbd, 0xd7, 0xce, 0x6f, 0xe3, 0x9c, 0x28, 0x5a, 0xe3, 0xb6, 0xc3, 0x42, 0x59, 0xad,
            0xc0, 0xdc, 0x4f, 0x7b, 0x9c, 0x7d, 0xec, 0x3c, 0xa4, 0xa2, 0x0d, 0x34, 0x07, 0x33, 0x9e, 0xed,
            0xd7, 0xa1, 0x2a, 0x42, 0x1d, 0xa1, 0x8f, 0x59, 0x54, 0x67, 0x3c, 0xac, 0x2f, 0xf0, 0x59, 0x15,
            0x6e, 0xcc, 0x73, 0xc6, 0x86, 0x1e, 0xc7, 0x61, 0xe6, 0xa0, 0xf2, 0xa5, 0xa0, 0x33, 0xa6, 0x76,
            0x8c, 0x6a, 0x42, 0xd8, 0xb4, 0x59, 0xe1, 0xb4, 0x93, 0x23, 0x49, 0xe8, 0x4e, 0xfd, 0x92, 0xdf,
            0x59, 0xb4, 0x59, 0x35, 0xf3, 0xd0, 0xe3, 0x08, 0x17, 0xc6, 0x62, 0x01, 0xaa, 0x99, 0xd0, 0x7a,
            0xe3, 0x6c, 0x5d, 0x74, 0xf4, 0x08, 0xd6, 0x9c, 0xc0, 0x8f, 0x04, 0x41, 0x51, 0xff, 0x49, 0x60,
            0xe5, 0x31, 0x36, 0x0c, 0xb1, 0x90, 0x77, 0x83, 0x3a, 0xdf, 0x7b, 0xce, 0x77, 0xec, 0xfa, 0xa1,
            0x33, 0xc0, 0xcc, 0xc6, 0x3c, 0x93, 0xb8, 0x56, 0x81, 0x45, 0x69, 0xe0, 0xb9, 0x88, 0x4e, 0xe5,
            0x54, 0x06, 0x1b, 0x9a, 0x20, 0xab, 0x46, 0xc3, 0x82, 0x63, 0xc0, 0x94, 0xda, 0xe7, 0x91, 0xaa,
            0x61, 0xa1, 0x7f, 0x8d, 0x16, 0xf0, 0xe8, 0x5b, 0x7e, 0x5c, 0xe3, 0xb0, 0x67, 0xec, 0xe8, 0x9e,
            0x20, 0xbc, 0x4e, 0x8f, 0x1a, 0xe8, 0x14, 0xb2, 0x76, 0xd2, 0x34, 0xe0, 0x4f, 0x4e, 0x76, 0x6f,
            0x50, 0x1d, 0xa7, 0x4e, 0xa7, 0xe3, 0x81, 0x7c, 0x24, 0xea, 0x35, 0xd0, 0x16, 0x67, 0x6c, 0xec,
            0xe6, 0x52, 0xb8, 0x23, 0xb0, 0x51, 0x62, 0x55, 0x73, 0xca, 0x92, 0x75, 0x7f, 0xc7, 0x20, 0xd2,
            0x54, 0xec, 0xf1, 0xdc, 0xbb, 0xfd, 0x21, 0xd9, 0x83, 0x07, 0x56, 0x1e, 0xca, 0xab, 0x54, 0x54,
            0x80, 0xc7, 0xc5, 0x2a, 0xd7, 0xe9, 0xfa, 0x6b, 0x59, 0x7f, 0x5f, 0xe5, 0x50, 0x55, 0x9c, 0x2f,
            0xe9, 0x23, 0x20, 0x5a, 0xc1, 0x76, 0x1a, 0x99, 0x73, 0x7c, 0xa0, 0x2d, 0x7b, 0x19, 0x82, 0x2e,
            0x00, 0x8a, 0x89, 0x69, 0x34, 0x9c, 0x87, 0xfb, 0x87, 0x4c, 0x81, 0x62, 0x0e, 0x38, 0xf6, 0x13,
            0xc8, 0x52, 0x1f, 0x03, 0x81, 0xfe, 0x5b, 0xa5, 0x5b, 0x74, 0x82, 0x7d, 0xad, 0x3e, 0x1c, 0xf2,
            0xaa, 0x29, 0xc6, 0x93, 0x36, 0x29, 0xf2, 0xb2, 0x86, 0xad, 0x11, 0xbe, 0x88, 0xfa, 0x64, 0x36,
            0xe7, 0xe3, 0xf6, 0x4a, 0x75, 0xe3, 0x59, 0x52, 0x90, 0xdc, 0x0d, 0x1c, 0xd5, 0xee, 0xe7, 0xaa,
            0xac, 0x54, 0x95, 0x9c, 0xc5, 0x3b, 0xd5, 0xa9, 0x34, 0xa3, 0x65, 0xe7, 0x2d, 0xd8, 0x1a, 0x2b,
            0xd4, 0xfb, 0x9a, 0x67, 0x82, 0x1b, 0xff, 0xed, 0xf2, 0xef, 0x2b, 0xd9, 0x49, 0x13, 0xde, 0x8b, 
    };

    /* EXPONENT in BIG ENDIAN format */
	uint8_t pub_exp[4U] = { 0x00, 0x14, 0x15, 0xa7 };

    /* SHA384 HASH in BIG ENDIAN format */
    unsigned char hash[SHA384_HASH_BYTE_SIZE] = {
            0x21, 0xc0, 0x31, 0x6d, 0xf6, 0x36, 0x3e, 0x99, 0xbd, 0x8f, 0x20, 0xa0, 0x7f, 0x5d, 0xeb, 0x2c,
            0x49, 0x3a, 0xe3, 0x24, 0x3c, 0x44, 0x2f, 0x04, 0x77, 0x13, 0xa4, 0x48, 0xad, 0x90, 0x38, 0xa8,
            0xe6, 0x21, 0x9f, 0x31, 0x67, 0x1a, 0x4a, 0x1a, 0xb3, 0x62, 0x89, 0x3c, 0xc7, 0xf9, 0xe3, 0x21,
    };

    uint8_t flags = BIG_ENDIAN_SIGNATURE | BIG_ENDIAN_MODULUS | BIG_ENDIAN_EXPONENT | BIG_ENDIAN_SHA_HASH;

    uint8_t saltLen = 48;
#endif


#if 0
    /* Test vector obtained from : https://csrc.nist.gov/CSRC/media/Projects/Cryptographic-Algorithm-Validation-Program/dolwments/dss/186-3rsatestvectors.zip (See file SigGenPSS_186-3.txt).
       Should give a PASS. */

    /*
        n = a7a1882a7fb896786034d07fb1b9f6327c27bdd7ce6fe39c285ae3b6c34259adc0dc4f7b9c7dec3ca4a20d3407339eedd7a12a421da18f5954673cac2ff059156ecc73c6861ec761e6a0f2a5a033a6768c6a42d8b459e1b4932349e84efd92df59b45935f3d0e30817c66201aa99d07ae36c5d74f408d69cc08f044151ff4960e531360cb19077833adf7bce77ecfaa133c0ccc63c93b856814569e0b9884ee554061b9a20ab46c38263c094dae791aa61a17f8d16f0e85b7e5ce3b067ece89e20bc4e8f1ae814b276d234e04f4e766f501da74ea7e3817c24ea35d016676cece652b823b051625573ca92757fc720d254ecf1dcbbfd21d98307561ecaab545480c7c52ad7e9fa6b597f5fe550559c2fe923205ac1761a99737ca02d7b19822e008a8969349c87fb874c81620e38f613c8521f0381fe5ba55b74827dad3e1cf2aa29c6933629f2b286ad11be88fa6436e7e3f64a75e3595290dc0d1cd5eee7aaac54959cc53bd5a934a365e72dd81a2bd4fb9a67821bffedf2ef2bd94913de8b

        ea7

        d = 073a5fc4cd642f6113dffc4f84035cee3a2b8acc549703751a1d6a5eaa13487229a58ef7d7a522bb9f4f25510f1aa0f74c6a8fc8a5c5be8b91a674ede50e92f7e34a90a3c9da999fffb1d695e4588f451256c163484c151350cb9c7825a7d910845ee5cf826fecf9a7c0fbbbba22bb4a531c131d2e7761ba898f002ebef8ab87218511f81d3266e1ec07a7ca8622514c6dfdc86c67679a2c8f5f031de9a0c22b5a88060b46ee0c64d3b9af3c0a379bcd9c6a1b51cf6480456d3fd6def94cd2a6c171dd3f010e3c9d662bc857208248c94ebcb9fd997b9ff4a7e5fd95558569906525e741d78344f6f6cfdbd59d4faa52ee3fa964fb7cccb2d6be1935d211fe1498217716273939a946081fd8509913fd47747c5c2f03efd4d6fc9c6fcfd8402e9f40a0a5b3de3ca2b3c0fac9456938faa6cf2c20e3912e5981c9876d8ca1ff29b87a15eeae0ccce3f8a8f1e405091c083b98bcc5fe0d0deaae33c67c0394437f0eccb385b7efb17aeebba8afaecca30a2f63eac8f0ac8f1eacad85bbcaf3960b

        SHAAlg = SHA384

        Msg = 752a9916f449aebf814ce59ca6e82fa8038e4685419241c1488c6659b2ff3f7b7f38f0900a79c77a3b57151aff613c16f5020ad96ba945db88268722ca584c09b4054a40c00901149bb392f0916cd4244699a5e6a8c37e9621f54b471166797a7b58502cff4083140827052646501f5b5f1bc0b4e129147d7cc157cf6e73ec58

        S = 6646a88ee4b845da4931274c23840dada6145fe0af954829d1d56661546a25e46316e216bb6b9446b368884ba14969a6f68ccbc1cf5b4e7a6d3aabec67f64963f63b088fa817c855d776ddcada57e5daa50fc1c877389c3cb9d99095a869a963bc91ec24b2422ef6b8dd18fd20d2b215fee6e98cda415ae44d2d2616fe1708292a3ef50a075170b3a7ebab02918ab0301794c17fb35e2038f369d94dd49569c066f7c392889dc4b878c50c7e52586b5081114d202338d23304f16f912d519a9ad21baff0e3d21761f373d08421e10108a983048fcb90eb2adc7c7f12ffa1571b091c781b255a77a880e97975f14f42baf5aa285ecc142157c3e1addd6aa0c09253a11c59144abd3b1e212d89e27ed96fb75756afc20ec67423b151194cb0b0648c659987a5583cb7757779d8a39e205e7101a5351ce1af2c9c6b0847cca57af52593323905e3d2297c0d54541a0125621640fe1deef13e759f8f6c56a2ec2a94831ac2c614b911e79edd542fef651f5a827f480575ae220c495f2a2842f99ec4

        SaltVal = 61a762f8968d5f367e2dbcacb4021653dc75437d9000e3169d943729703837a5cbf4de62bdedc95fd0d1004e84751452
    */

    /* SIGNATURE in BIG ENDIAN format */
    unsigned char signature[CRYPTO_RSA3K_SIG_SIZE] = {
            0x66, 0x46, 0xa8, 0x8e, 0xe4, 0xb8, 0x45, 0xda, 0x49, 0x31, 0x27, 0x4c, 0x23, 0x84, 0x0d, 0xad,
            0xa6, 0x14, 0x5f, 0xe0, 0xaf, 0x95, 0x48, 0x29, 0xd1, 0xd5, 0x66, 0x61, 0x54, 0x6a, 0x25, 0xe4,
            0x63, 0x16, 0xe2, 0x16, 0xbb, 0x6b, 0x94, 0x46, 0xb3, 0x68, 0x88, 0x4b, 0xa1, 0x49, 0x69, 0xa6,
            0xf6, 0x8c, 0xcb, 0xc1, 0xcf, 0x5b, 0x4e, 0x7a, 0x6d, 0x3a, 0xab, 0xec, 0x67, 0xf6, 0x49, 0x63,
            0xf6, 0x3b, 0x08, 0x8f, 0xa8, 0x17, 0xc8, 0x55, 0xd7, 0x76, 0xdd, 0xca, 0xda, 0x57, 0xe5, 0xda,
            0xa5, 0x0f, 0xc1, 0xc8, 0x77, 0x38, 0x9c, 0x3c, 0xb9, 0xd9, 0x90, 0x95, 0xa8, 0x69, 0xa9, 0x63,
            0xbc, 0x91, 0xec, 0x24, 0xb2, 0x42, 0x2e, 0xf6, 0xb8, 0xdd, 0x18, 0xfd, 0x20, 0xd2, 0xb2, 0x15,
            0xfe, 0xe6, 0xe9, 0x8c, 0xda, 0x41, 0x5a, 0xe4, 0x4d, 0x2d, 0x26, 0x16, 0xfe, 0x17, 0x08, 0x29,
            0x2a, 0x3e, 0xf5, 0x0a, 0x07, 0x51, 0x70, 0xb3, 0xa7, 0xeb, 0xab, 0x02, 0x91, 0x8a, 0xb0, 0x30,
            0x17, 0x94, 0xc1, 0x7f, 0xb3, 0x5e, 0x20, 0x38, 0xf3, 0x69, 0xd9, 0x4d, 0xd4, 0x95, 0x69, 0xc0,
            0x66, 0xf7, 0xc3, 0x92, 0x88, 0x9d, 0xc4, 0xb8, 0x78, 0xc5, 0x0c, 0x7e, 0x52, 0x58, 0x6b, 0x50,
            0x81, 0x11, 0x4d, 0x20, 0x23, 0x38, 0xd2, 0x33, 0x04, 0xf1, 0x6f, 0x91, 0x2d, 0x51, 0x9a, 0x9a,
            0xd2, 0x1b, 0xaf, 0xf0, 0xe3, 0xd2, 0x17, 0x61, 0xf3, 0x73, 0xd0, 0x84, 0x21, 0xe1, 0x01, 0x08,
            0xa9, 0x83, 0x04, 0x8f, 0xcb, 0x90, 0xeb, 0x2a, 0xdc, 0x7c, 0x7f, 0x12, 0xff, 0xa1, 0x57, 0x1b,
            0x09, 0x1c, 0x78, 0x1b, 0x25, 0x5a, 0x77, 0xa8, 0x80, 0xe9, 0x79, 0x75, 0xf1, 0x4f, 0x42, 0xba,
            0xf5, 0xaa, 0x28, 0x5e, 0xcc, 0x14, 0x21, 0x57, 0xc3, 0xe1, 0xad, 0xdd, 0x6a, 0xa0, 0xc0, 0x92,
            0x53, 0xa1, 0x1c, 0x59, 0x14, 0x4a, 0xbd, 0x3b, 0x1e, 0x21, 0x2d, 0x89, 0xe2, 0x7e, 0xd9, 0x6f,
            0xb7, 0x57, 0x56, 0xaf, 0xc2, 0x0e, 0xc6, 0x74, 0x23, 0xb1, 0x51, 0x19, 0x4c, 0xb0, 0xb0, 0x64,
            0x8c, 0x65, 0x99, 0x87, 0xa5, 0x58, 0x3c, 0xb7, 0x75, 0x77, 0x79, 0xd8, 0xa3, 0x9e, 0x20, 0x5e,
            0x71, 0x01, 0xa5, 0x35, 0x1c, 0xe1, 0xaf, 0x2c, 0x9c, 0x6b, 0x08, 0x47, 0xcc, 0xa5, 0x7a, 0xf5,
            0x25, 0x93, 0x32, 0x39, 0x05, 0xe3, 0xd2, 0x29, 0x7c, 0x0d, 0x54, 0x54, 0x1a, 0x01, 0x25, 0x62,
            0x16, 0x40, 0xfe, 0x1d, 0xee, 0xf1, 0x3e, 0x75, 0x9f, 0x8f, 0x6c, 0x56, 0xa2, 0xec, 0x2a, 0x94,
            0x83, 0x1a, 0xc2, 0xc6, 0x14, 0xb9, 0x11, 0xe7, 0x9e, 0xdd, 0x54, 0x2f, 0xef, 0x65, 0x1f, 0x5a,
            0x82, 0x7f, 0x48, 0x05, 0x75, 0xae, 0x22, 0x0c, 0x49, 0x5f, 0x2a, 0x28, 0x42, 0xf9, 0x9e, 0xc4,
    };

    /* MODULUS in BIG ENDIAN format */
    unsigned char modulus[CRYPTO_RSA3K_SIG_SIZE] = {
            0xa7, 0xa1, 0x88, 0x2a, 0x7f, 0xb8, 0x96, 0x78, 0x60, 0x34, 0xd0, 0x7f, 0xb1, 0xb9, 0xf6, 0x32,
            0x7c, 0x27, 0xbd, 0xd7, 0xce, 0x6f, 0xe3, 0x9c, 0x28, 0x5a, 0xe3, 0xb6, 0xc3, 0x42, 0x59, 0xad,
            0xc0, 0xdc, 0x4f, 0x7b, 0x9c, 0x7d, 0xec, 0x3c, 0xa4, 0xa2, 0x0d, 0x34, 0x07, 0x33, 0x9e, 0xed,
            0xd7, 0xa1, 0x2a, 0x42, 0x1d, 0xa1, 0x8f, 0x59, 0x54, 0x67, 0x3c, 0xac, 0x2f, 0xf0, 0x59, 0x15,
            0x6e, 0xcc, 0x73, 0xc6, 0x86, 0x1e, 0xc7, 0x61, 0xe6, 0xa0, 0xf2, 0xa5, 0xa0, 0x33, 0xa6, 0x76,
            0x8c, 0x6a, 0x42, 0xd8, 0xb4, 0x59, 0xe1, 0xb4, 0x93, 0x23, 0x49, 0xe8, 0x4e, 0xfd, 0x92, 0xdf,
            0x59, 0xb4, 0x59, 0x35, 0xf3, 0xd0, 0xe3, 0x08, 0x17, 0xc6, 0x62, 0x01, 0xaa, 0x99, 0xd0, 0x7a,
            0xe3, 0x6c, 0x5d, 0x74, 0xf4, 0x08, 0xd6, 0x9c, 0xc0, 0x8f, 0x04, 0x41, 0x51, 0xff, 0x49, 0x60,
            0xe5, 0x31, 0x36, 0x0c, 0xb1, 0x90, 0x77, 0x83, 0x3a, 0xdf, 0x7b, 0xce, 0x77, 0xec, 0xfa, 0xa1,
            0x33, 0xc0, 0xcc, 0xc6, 0x3c, 0x93, 0xb8, 0x56, 0x81, 0x45, 0x69, 0xe0, 0xb9, 0x88, 0x4e, 0xe5,
            0x54, 0x06, 0x1b, 0x9a, 0x20, 0xab, 0x46, 0xc3, 0x82, 0x63, 0xc0, 0x94, 0xda, 0xe7, 0x91, 0xaa,
            0x61, 0xa1, 0x7f, 0x8d, 0x16, 0xf0, 0xe8, 0x5b, 0x7e, 0x5c, 0xe3, 0xb0, 0x67, 0xec, 0xe8, 0x9e,
            0x20, 0xbc, 0x4e, 0x8f, 0x1a, 0xe8, 0x14, 0xb2, 0x76, 0xd2, 0x34, 0xe0, 0x4f, 0x4e, 0x76, 0x6f,
            0x50, 0x1d, 0xa7, 0x4e, 0xa7, 0xe3, 0x81, 0x7c, 0x24, 0xea, 0x35, 0xd0, 0x16, 0x67, 0x6c, 0xec,
            0xe6, 0x52, 0xb8, 0x23, 0xb0, 0x51, 0x62, 0x55, 0x73, 0xca, 0x92, 0x75, 0x7f, 0xc7, 0x20, 0xd2,
            0x54, 0xec, 0xf1, 0xdc, 0xbb, 0xfd, 0x21, 0xd9, 0x83, 0x07, 0x56, 0x1e, 0xca, 0xab, 0x54, 0x54,
            0x80, 0xc7, 0xc5, 0x2a, 0xd7, 0xe9, 0xfa, 0x6b, 0x59, 0x7f, 0x5f, 0xe5, 0x50, 0x55, 0x9c, 0x2f,
            0xe9, 0x23, 0x20, 0x5a, 0xc1, 0x76, 0x1a, 0x99, 0x73, 0x7c, 0xa0, 0x2d, 0x7b, 0x19, 0x82, 0x2e,
            0x00, 0x8a, 0x89, 0x69, 0x34, 0x9c, 0x87, 0xfb, 0x87, 0x4c, 0x81, 0x62, 0x0e, 0x38, 0xf6, 0x13,
            0xc8, 0x52, 0x1f, 0x03, 0x81, 0xfe, 0x5b, 0xa5, 0x5b, 0x74, 0x82, 0x7d, 0xad, 0x3e, 0x1c, 0xf2,
            0xaa, 0x29, 0xc6, 0x93, 0x36, 0x29, 0xf2, 0xb2, 0x86, 0xad, 0x11, 0xbe, 0x88, 0xfa, 0x64, 0x36,
            0xe7, 0xe3, 0xf6, 0x4a, 0x75, 0xe3, 0x59, 0x52, 0x90, 0xdc, 0x0d, 0x1c, 0xd5, 0xee, 0xe7, 0xaa,
            0xac, 0x54, 0x95, 0x9c, 0xc5, 0x3b, 0xd5, 0xa9, 0x34, 0xa3, 0x65, 0xe7, 0x2d, 0xd8, 0x1a, 0x2b,
            0xd4, 0xfb, 0x9a, 0x67, 0x82, 0x1b, 0xff, 0xed, 0xf2, 0xef, 0x2b, 0xd9, 0x49, 0x13, 0xde, 0x8b, 
    };

    /* EXPONENT in BIG ENDIAN format */
	uint8_t pub_exp[4U] = { 0x00, 0x14, 0x15, 0xa7 };

    /* SHA384 HASH in BIG ENDIAN format */
    unsigned char hash[SHA384_HASH_BYTE_SIZE] = {
            0xd4, 0x53, 0x09, 0xad, 0xfb, 0x6f, 0x45, 0x21, 0xb8, 0x6e, 0x6d, 0xd1, 0x7d, 0x5e, 0x28, 0x9f,
            0xe6, 0xb1, 0x5e, 0x5a, 0x46, 0x11, 0x02, 0x40, 0xd4, 0x66, 0x65, 0x1d, 0x85, 0x8b, 0x15, 0x3b,
            0x5b, 0x82, 0x95, 0x6f, 0xaf, 0x74, 0xb6, 0x43, 0xb0, 0x8d, 0xd5, 0xa5, 0x47, 0xb2, 0x62, 0x91,
    };

    uint8_t flags = BIG_ENDIAN_SIGNATURE | BIG_ENDIAN_MODULUS | BIG_ENDIAN_EXPONENT | BIG_ENDIAN_SHA_HASH;

    uint8_t saltLen = 48;
#endif

#if 0
    /* Test vector obtained from : https://csrc.nist.gov/CSRC/media/Projects/Cryptographic-Algorithm-Validation-Program/dolwments/dss/186-3rsatestvectors.zip (See file SigVerPSS_186-3.rsp).
       Should give a PASS. */

    /* SIGNATURE in BIG ENDIAN format */
    unsigned char signature[CRYPTO_RSA3K_SIG_SIZE] = {
            0x9c, 0x2d, 0x84, 0x6e, 0xac, 0xd7, 0x5c, 0x81, 0xb7, 0xca, 0xdb, 0xbb, 0x06, 0x67, 0xf5, 0x8e,
            0xc2, 0x15, 0x8c, 0x64, 0xdd, 0xbb, 0xc2, 0xaf, 0x07, 0x80, 0x82, 0xae, 0xa4, 0x04, 0x7e, 0x30,
            0xa5, 0x9e, 0x74, 0xc3, 0xb5, 0xa5, 0x8b, 0xe9, 0x55, 0x32, 0x53, 0xa7, 0xd8, 0xbd, 0x4e, 0x52,
            0x7a, 0x0d, 0xaa, 0xc1, 0xbf, 0x03, 0xf3, 0xbf, 0x7c, 0xe5, 0xcd, 0x8d, 0x20, 0x44, 0x3e, 0xee,
            0x2e, 0xe8, 0x9a, 0x78, 0xc0, 0x69, 0x2c, 0x08, 0xe3, 0xc4, 0x52, 0xaa, 0x48, 0xb5, 0xaa, 0x76,
            0xb3, 0x1e, 0x00, 0x51, 0x8e, 0x43, 0x5f, 0xe8, 0xe7, 0x85, 0x82, 0x29, 0x89, 0x1e, 0xa0, 0xc1,
            0x65, 0x29, 0xab, 0x09, 0xe3, 0x80, 0x1b, 0x07, 0xf3, 0xff, 0xbb, 0xc5, 0x4b, 0xd8, 0x21, 0x71,
            0x4e, 0xe9, 0x07, 0x88, 0xd6, 0x1f, 0x60, 0xa8, 0x19, 0xd0, 0x0f, 0xf4, 0x09, 0x14, 0xe7, 0xaa,
            0xdc, 0xc5, 0x96, 0xba, 0xe3, 0x02, 0x53, 0xf4, 0x95, 0xad, 0xf4, 0x9d, 0xdf, 0xec, 0x45, 0x32,
            0xb8, 0x24, 0xe8, 0x86, 0x6e, 0x39, 0x40, 0x6c, 0x00, 0x21, 0x91, 0x4f, 0x26, 0x7e, 0x42, 0x4f,
            0xfc, 0x58, 0x94, 0x40, 0xbd, 0x84, 0x7b, 0xae, 0xbf, 0x34, 0x66, 0x08, 0x97, 0x8b, 0xab, 0x8a,
            0xb4, 0x79, 0x51, 0x99, 0xec, 0x75, 0x5a, 0xc6, 0x15, 0x1b, 0xf9, 0x46, 0x6c, 0x5b, 0x08, 0x58,
            0x12, 0xee, 0xda, 0x9f, 0x16, 0xb4, 0xdc, 0x22, 0xfe, 0xf2, 0x90, 0x82, 0x31, 0xbf, 0xc3, 0x12,
            0x11, 0x29, 0x33, 0x74, 0xce, 0x6f, 0x7d, 0x68, 0x19, 0x59, 0x45, 0x5c, 0x4c, 0xf0, 0xb6, 0x66,
            0x08, 0x95, 0xdc, 0x12, 0x8a, 0x5b, 0xdc, 0x84, 0x45, 0xa0, 0x81, 0x1f, 0x2e, 0x37, 0x21, 0x23,
            0xe5, 0xa2, 0x1f, 0xc0, 0x63, 0x8d, 0xa5, 0xf2, 0x6a, 0xe2, 0x70, 0x93, 0x0d, 0x2e, 0x09, 0x6c,
            0x6a, 0xa2, 0x17, 0x8a, 0x4d, 0x84, 0x04, 0x0e, 0x3d, 0xe1, 0x95, 0xcd, 0xbc, 0xd6, 0x94, 0x0c,
            0xba, 0xc0, 0xdf, 0x96, 0xae, 0x27, 0x3a, 0x23, 0x2a, 0x4c, 0x5a, 0x3f, 0xc2, 0xa2, 0xbb, 0x7e,
            0x7b, 0x12, 0xe9, 0xc4, 0x9d, 0x95, 0xea, 0x24, 0x58, 0xcc, 0x7c, 0xf2, 0x3c, 0xea, 0xa2, 0xc8,
            0xce, 0x42, 0x33, 0x27, 0xde, 0x1f, 0xfa, 0xf6, 0xea, 0x64, 0x13, 0xa8, 0x84, 0x33, 0x16, 0x41,
            0x8c, 0x2a, 0xe7, 0x14, 0xfc, 0xd0, 0x7f, 0x75, 0xc0, 0xe5, 0x57, 0xc7, 0x12, 0x29, 0xc1, 0x37,
            0xe0, 0x16, 0x0e, 0xba, 0x1c, 0x29, 0xf2, 0x09, 0x82, 0x45, 0xa8, 0x62, 0x3a, 0xb1, 0xe0, 0x56,
            0x12, 0x48, 0x5d, 0x07, 0x64, 0x44, 0x8b, 0x21, 0x49, 0xba, 0x19, 0x31, 0x51, 0x3d, 0xd3, 0x1b,
            0x7c, 0xee, 0xa8, 0x05, 0x49, 0xc2, 0x6e, 0xf1, 0x66, 0xd0, 0xe3, 0xae, 0xec, 0xf7, 0xbf, 0x61,
    };

    /* MODULUS in BIG ENDIAN format */
    unsigned char modulus[CRYPTO_RSA3K_SIG_SIZE] = {
            0xb1, 0x25, 0xfc, 0x05, 0x4e, 0x1b, 0x9d, 0xb3, 0xb9, 0x82, 0x12, 0xf5, 0x38, 0x40, 0x69, 0x06,
            0x07, 0xc1, 0x10, 0xbf, 0x31, 0xe1, 0x88, 0x71, 0xfd, 0xfa, 0x13, 0x04, 0x64, 0x96, 0xa2, 0xe7,
            0x3b, 0x32, 0x04, 0xf3, 0x3b, 0xf8, 0x35, 0x0f, 0x84, 0x1b, 0xa9, 0x4f, 0x51, 0x1c, 0xbb, 0x2f,
            0x40, 0x58, 0x7b, 0x14, 0x7a, 0x82, 0x0f, 0xd1, 0x66, 0x21, 0x39, 0x68, 0xe8, 0xff, 0xf9, 0xfa,
            0x4b, 0xe4, 0x71, 0x8a, 0x67, 0x2f, 0x4e, 0x93, 0x21, 0x45, 0x5c, 0x56, 0xd5, 0xe4, 0xe0, 0x9d,
            0x4f, 0x8b, 0x2c, 0x69, 0x07, 0x18, 0xbc, 0x46, 0x10, 0x8d, 0xe2, 0x69, 0x85, 0x7b, 0xb4, 0x14,
            0x5c, 0x86, 0xcc, 0x75, 0xa4, 0xbd, 0x55, 0xf9, 0x72, 0x28, 0x5e, 0x40, 0x54, 0xb9, 0xfd, 0x13,
            0x92, 0x75, 0x74, 0xe6, 0x36, 0x90, 0x95, 0x81, 0x77, 0x78, 0x4b, 0x39, 0xb1, 0x70, 0x83, 0xbd,
            0xaf, 0xdd, 0x3a, 0xb8, 0xd3, 0x27, 0xdb, 0xb9, 0xda, 0x93, 0xfc, 0x5c, 0xf9, 0x37, 0x52, 0x05,
            0x56, 0x62, 0x42, 0xbb, 0x30, 0x24, 0x62, 0x54, 0xdd, 0xf0, 0x4c, 0x52, 0x6f, 0x91, 0x41, 0x00,
            0x6f, 0xba, 0xff, 0xc2, 0x68, 0xbd, 0x2f, 0xe9, 0xaa, 0xa1, 0x95, 0x81, 0xbb, 0x1c, 0x19, 0xe7,
            0x72, 0x64, 0xb0, 0x86, 0x70, 0xff, 0x3f, 0xe2, 0xb5, 0x43, 0xf4, 0x7a, 0x7a, 0xf9, 0x5b, 0xbe,
            0x94, 0xb9, 0x93, 0x00, 0x88, 0x9b, 0x8f, 0xf0, 0x7b, 0x2a, 0x44, 0xd5, 0xe9, 0xe2, 0x29, 0xe3,
            0x31, 0x33, 0xb5, 0x8b, 0xc7, 0xd2, 0xb8, 0xeb, 0x92, 0xa3, 0xbb, 0x6c, 0x03, 0x5f, 0x88, 0x91,
            0xd3, 0x16, 0x52, 0x84, 0xe9, 0xce, 0xd2, 0x5d, 0x6e, 0xf1, 0x9a, 0x81, 0x35, 0xd0, 0x6a, 0xb8,
            0x89, 0xf7, 0x62, 0x73, 0x18, 0xcb, 0x04, 0x3c, 0x89, 0xd9, 0x06, 0x67, 0xcb, 0x92, 0xd1, 0x31,
            0x88, 0x80, 0x10, 0x7e, 0xd9, 0xb8, 0x66, 0xb1, 0x0f, 0xa9, 0xaf, 0x22, 0x25, 0xa9, 0x87, 0x82,
            0x7e, 0x86, 0x6c, 0x98, 0x1f, 0x0c, 0x44, 0x24, 0x74, 0x0f, 0xa7, 0x16, 0x97, 0xba, 0x99, 0x33,
            0xa9, 0x1c, 0x0d, 0x1f, 0xe8, 0x3e, 0xfd, 0x8e, 0x7d, 0x6c, 0x82, 0x87, 0xde, 0x72, 0x81, 0x1d,
            0xa7, 0xfb, 0x4f, 0xcb, 0xad, 0x42, 0x63, 0x7f, 0x0d, 0xf4, 0x74, 0x82, 0x11, 0x9a, 0x07, 0xaf,
            0x9c, 0xcc, 0xc9, 0x93, 0x53, 0x7c, 0xef, 0xe7, 0x89, 0x20, 0x54, 0xbc, 0x2c, 0xe2, 0x00, 0x21,
            0xe9, 0xe3, 0x7f, 0x39, 0x1e, 0xe5, 0x7b, 0x66, 0xc4, 0x0d, 0xac, 0x49, 0xa3, 0x46, 0xa5, 0x4e,
            0x64, 0x16, 0xf4, 0xe4, 0x0a, 0xf6, 0x7b, 0x71, 0x90, 0xd6, 0x5f, 0x49, 0x7f, 0xeb, 0xd7, 0xd5,
            0x4f, 0x14, 0x8f, 0xbc, 0x48, 0x50, 0xcd, 0x7d, 0xe2, 0x00, 0xcb, 0xfa, 0xb5, 0x3d, 0x05, 0xfb,
    };

    /* EXPONENT in BIG ENDIAN format */
	uint8_t pub_exp[4U] = { 0x00, 0x14, 0x7e, 0x73 };

    /* SHA384 HASH in BIG ENDIAN format */
    unsigned char hash[SHA384_HASH_BYTE_SIZE] = {
            0x3c, 0x42, 0x4d, 0xfa, 0x76, 0xc9, 0x9f, 0x69, 0x65, 0x53, 0xb5, 0x43, 0x62, 0xbd, 0x0d, 0xec,
            0xfe, 0xde, 0xde, 0xb2, 0x99, 0xb2, 0xa8, 0xe8, 0xa2, 0x41, 0x6c, 0x70, 0x82, 0x7b, 0x2d, 0x9c,
            0x90, 0x22, 0x28, 0x3b, 0x58, 0x05, 0xd1, 0xf4, 0xf2, 0x48, 0x41, 0x64, 0x6a, 0x9a, 0xa4, 0x37,
    };

    uint8_t flags = BIG_ENDIAN_SIGNATURE | BIG_ENDIAN_MODULUS | BIG_ENDIAN_EXPONENT | BIG_ENDIAN_SHA_HASH;

    uint8_t saltLen = 24;
#endif

/* More test vectors can be added here if needed */

#endif // TESTVECTOR_RSA3KPSS_SHA384_H
