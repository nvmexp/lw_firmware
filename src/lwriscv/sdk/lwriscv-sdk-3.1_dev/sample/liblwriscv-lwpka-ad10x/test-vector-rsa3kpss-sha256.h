/* _LWRM_COPYRIGHT_BEGIN_
 *
 * Copyright 2020 by LWPU Corporation.  All rights reserved.  All
 * information contained herein is proprietary and confidential to LWPU
 * Corporation.  Any use, reproduction, or disclosure without the written
 * permission of LWPU Corporation is prohibited.
 *
 * _LWRM_COPYRIGHT_END_
 */

#ifndef TESTVECTOR_RSA3KPSS_SHA256_H
#define TESTVECTOR_RSA3KPSS_SHA256_H

#include "test-vector-rsa3kpss-common.h"

#if 0
    /* Test vector obtained from : https://rmopengrok.lwpu.com/source/xref/sw/rel/gfw_ucode/r4/v1/src/rsassa-pss.c#255
       Should give a PASS. */
 
    /* SIGNATURE in BIG ENDIAN format */
    unsigned char signature[CRYPTO_RSA3K_SIG_SIZE] = {
            0x76, 0x4f, 0x58, 0xb6, 0x8b, 0xf7, 0x46, 0xce, 0x87, 0x24, 0x36, 0x22, 0x75, 0xd0, 0xc6, 0x7b,
            0x3a, 0xa4, 0x69, 0x60, 0x0d, 0x50, 0x84, 0xd9, 0x05, 0x73, 0x3a, 0xe9, 0x4b, 0x7d, 0x6f, 0x80,
            0xd1, 0xda, 0x5e, 0xe9, 0x3b, 0x2b, 0x6f, 0xbc, 0x36, 0x60, 0x3c, 0x36, 0x0a, 0x67, 0x4e, 0xf0,
            0xda, 0x54, 0xdf, 0x2a, 0xc1, 0xd0, 0x31, 0x30, 0x52, 0xe1, 0xb9, 0x74, 0xb1, 0xfb, 0xd7, 0xba,
            0x52, 0x1f, 0x75, 0x34, 0xa2, 0x85, 0xfe, 0xdc, 0xcd, 0xe3, 0x10, 0x75, 0xd8, 0x21, 0xa8, 0x03,
            0x9d, 0xc8, 0xc6, 0x11, 0x32, 0x23, 0x0e, 0x25, 0x08, 0xd1, 0x9c, 0x02, 0xd0, 0x61, 0xf7, 0x13,
            0x10, 0x3c, 0xaf, 0xbb, 0x09, 0xf1, 0x37, 0x8c, 0x26, 0xfa, 0x6d, 0xf4, 0xb6, 0x10, 0x39, 0x26,
            0xf7, 0x00, 0x56, 0x77, 0x43, 0x90, 0x70, 0xe4, 0x2c, 0xbb, 0xa6, 0x40, 0xa9, 0xed, 0xf7, 0xd1,
            0xf5, 0xec, 0x24, 0xc2, 0x22, 0xaa, 0xbd, 0x36, 0xa9, 0x9f, 0x46, 0xda, 0xbb, 0xda, 0xd3, 0x78,
            0xdb, 0xc4, 0xbc, 0x83, 0x64, 0xc1, 0x53, 0x85, 0xda, 0x32, 0x10, 0xb7, 0xaa, 0x9b, 0x53, 0xf7,
            0x99, 0x6d, 0xf9, 0x5d, 0x4e, 0xc9, 0xb8, 0x67, 0x58, 0x96, 0x05, 0x62, 0xcb, 0xd2, 0x1c, 0x57,
            0x9e, 0xd4, 0xd4, 0xce, 0xc8, 0x8a, 0x31, 0x23, 0xa5, 0x7d, 0xde, 0x8e, 0x62, 0x7b, 0xf3, 0xd8,
            0x4b, 0x7d, 0x96, 0x6b, 0x3f, 0x40, 0x00, 0x41, 0x65, 0x60, 0x55, 0x9d, 0x74, 0xf9, 0xab, 0x86,
            0x8d, 0xe6, 0xac, 0xe5, 0x73, 0xae, 0xc1, 0x6d, 0x9e, 0xe2, 0xfe, 0xe0, 0xab, 0x94, 0xb0, 0xf4,
            0xef, 0xeb, 0xb4, 0x98, 0x60, 0x7d, 0x85, 0x26, 0xee, 0xbb, 0xc0, 0x6e, 0xe3, 0x8c, 0x63, 0xdb,
            0xfb, 0xf0, 0xfd, 0x62, 0xba, 0xd2, 0xd1, 0x61, 0xf5, 0xe5, 0x28, 0xd2, 0x90, 0x89, 0x1d, 0x1a,
            0x89, 0x87, 0x7c, 0xe2, 0xb4, 0xff, 0xf1, 0x2c, 0x95, 0x23, 0x4c, 0x2d, 0x8c, 0x10, 0x19, 0x85,
            0x1f, 0x12, 0x03, 0xdf, 0xfe, 0xe3, 0xcf, 0x50, 0xdc, 0x39, 0x0f, 0xe3, 0x80, 0x40, 0xe8, 0xee,
            0x5a, 0x75, 0xd0, 0x9d, 0xf0, 0xd3, 0x76, 0x67, 0x6e, 0x75, 0xb1, 0x8a, 0x34, 0x8d, 0x7d, 0x6e,
            0x10, 0x7c, 0x10, 0xa3, 0x2d, 0x4e, 0x4c, 0x75, 0x01, 0x9f, 0xe5, 0x03, 0xa2, 0xfb, 0x83, 0xad,
            0xa6, 0x89, 0x41, 0xd0, 0xe1, 0x81, 0xfb, 0x65, 0x33, 0x6e, 0x13, 0x28, 0x2c, 0x00, 0x54, 0x07,
            0x90, 0x91, 0x74, 0x64, 0x1a, 0x39, 0xfa, 0xa2, 0xd0, 0xca, 0x98, 0x48, 0xc9, 0x6c, 0x71, 0x4a,
            0xa0, 0x61, 0xb7, 0xab, 0x64, 0x5d, 0x71, 0x15, 0x38, 0x8b, 0x19, 0xec, 0x9f, 0xa4, 0x0d, 0x1e,
            0x66, 0xa4, 0x43, 0x56, 0xb0, 0xfe, 0x1b, 0x70, 0xa9, 0xb5, 0x7b, 0xe7, 0x30, 0x66, 0x17, 0xdd
    };

    /* MODULUS in BIG ENDIAN format */
    unsigned char modulus[CRYPTO_RSA3K_SIG_SIZE] = {
            0xe3, 0x79, 0x4c, 0xcf, 0x41, 0xd4, 0x30, 0x07, 0xae, 0xc5, 0x14, 0xf0, 0xaf, 0x70, 0x62, 0xc4,
            0xc3, 0x79, 0x2e, 0x6f, 0x39, 0x62, 0x5a, 0x0d, 0xc4, 0xe9, 0x67, 0xaa, 0x72, 0xf3, 0x30, 0xb5,
            0x85, 0xea, 0x72, 0x1e, 0x56, 0x2f, 0xf2, 0x3e, 0xea, 0x8e, 0x1d, 0xde, 0x04, 0x71, 0x1e, 0x14,
            0x2a, 0x65, 0xee, 0x7b, 0xed, 0xa1, 0x8f, 0x7a, 0xdf, 0xe8, 0x62, 0x72, 0x3d, 0xf8, 0x5e, 0xf8,
            0xdc, 0xc5, 0xaf, 0x5f, 0xdc, 0x7c, 0xa8, 0xd2, 0x85, 0xb2, 0x8f, 0x70, 0xf8, 0x1e, 0x62, 0xf3,
            0x49, 0x29, 0xde, 0x11, 0x51, 0x6c, 0xeb, 0x8e, 0x84, 0x30, 0x5e, 0x64, 0x5b, 0xb9, 0x94, 0x75,
            0x60, 0x6f, 0x4a, 0x12, 0x7f, 0xca, 0xe7, 0xe5, 0x2f, 0x80, 0xef, 0x08, 0x3a, 0x27, 0xda, 0xf3,
            0xbd, 0x5f, 0x89, 0x51, 0xfe, 0xa4, 0x7d, 0xf6, 0xeb, 0x9c, 0x8a, 0x0a, 0x60, 0x20, 0x0c, 0xe6,
            0x48, 0xeb, 0x27, 0x33, 0xda, 0x64, 0x4c, 0xd5, 0x6e, 0xcf, 0x61, 0x7a, 0x7a, 0x64, 0x45, 0x65,
            0xb4, 0x3c, 0x33, 0x63, 0x51, 0x5f, 0x48, 0xbb, 0x6b, 0x7b, 0x8d, 0x73, 0xce, 0x53, 0x32, 0xa5,
            0x08, 0xd9, 0xb1, 0x4a, 0x66, 0xbc, 0x60, 0x68, 0x91, 0x08, 0xf5, 0x54, 0x99, 0x53, 0xf6, 0x43,
            0x63, 0x5d, 0x24, 0x04, 0x7e, 0xcb, 0xfa, 0x79, 0x83, 0x98, 0x61, 0xb4, 0x65, 0x9c, 0xf3, 0x4f,
            0x20, 0xd2, 0xa9, 0xd3, 0x86, 0x9d, 0x01, 0x31, 0xe1, 0xe2, 0x82, 0x6c, 0xf9, 0xd5, 0x7c, 0x29,
            0x07, 0x58, 0x85, 0xaa, 0x42, 0xac, 0xe5, 0x26, 0xde, 0xff, 0x96, 0x3f, 0xf8, 0xdd, 0xed, 0xbf,
            0x49, 0x5e, 0x54, 0xa3, 0x55, 0x01, 0x5e, 0xd7, 0x41, 0x3a, 0x5a, 0x74, 0x9f, 0xcd, 0xf9, 0xed,
            0xe4, 0xb0, 0x87, 0xa1, 0x40, 0xaf, 0x9b, 0xb8, 0x53, 0xb0, 0xb7, 0xb5, 0x21, 0xbd, 0x1a, 0x76,
            0x2e, 0xdf, 0x13, 0xbb, 0x08, 0x36, 0x48, 0xc6, 0xb0, 0x13, 0xfd, 0x9f, 0x76, 0xaf, 0x97, 0xdd,
            0x52, 0x1f, 0x9e, 0x2a, 0x69, 0x8d, 0x51, 0x13, 0xc9, 0x8d, 0x6d, 0xd9, 0x57, 0xa2, 0x77, 0xe0,
            0xd4, 0x69, 0xf7, 0x96, 0xf5, 0x82, 0xb7, 0x2c, 0xb8, 0xdb, 0x55, 0xe0, 0xc1, 0x6e, 0xad, 0xfd,
            0xcc, 0x9a, 0x19, 0xda, 0x6e, 0xc7, 0x06, 0xa9, 0x77, 0x41, 0x57, 0xdc, 0xd1, 0x5c, 0xfb, 0xd7,
            0xde, 0x7a, 0x70, 0x38, 0xb8, 0xcb, 0xf2, 0x5d, 0x02, 0x0c, 0x17, 0x7e, 0x53, 0x04, 0x98, 0xe9,
            0x99, 0xe4, 0xbf, 0xa7, 0xcf, 0x7a, 0x35, 0xb7, 0x8b, 0x7b, 0x79, 0x03, 0xf0, 0x00, 0x58, 0x1c,
            0xc5, 0x29, 0x12, 0x8e, 0xe1, 0x77, 0x9e, 0x99, 0xe2, 0x73, 0xe0, 0x27, 0x1e, 0xfc, 0xef, 0xbe,
            0x2e, 0x00, 0x74, 0xd0, 0xa3, 0x1c, 0x82, 0x0c, 0x48, 0xf1, 0x3f, 0x27, 0x19, 0x41, 0x37, 0x83
    };

    /* EXPONENT in BIG ENDIAN format */
	uint8_t pub_exp[4U] = { 0x00, 0x01, 0x00, 0x01 };

    /* SHA256 HASH in BIG ENDIAN format */
    unsigned char hash[SHA256_HASH_BYTE_SIZE] = {
            0x96, 0xb2, 0xd9, 0xd4, 0xe3, 0xb6, 0x63, 0xb9, 0xc0, 0x12, 0x5d, 0xae, 0x6f, 0xdf, 0x3b, 0xff,
            0x2a, 0xaf, 0x9b, 0x95, 0x18, 0xd6, 0xaf, 0x5c, 0xa2, 0x29, 0x58, 0x98, 0xff, 0xfe, 0x43, 0x8b
    };

    uint8_t flags = BIG_ENDIAN_SIGNATURE | BIG_ENDIAN_MODULUS | BIG_ENDIAN_EXPONENT | BIG_ENDIAN_SHA_HASH;

    uint8_t saltLen = 32;
#endif


#if 1
    /* Test vector obtained from : Eddie Chang(SW)
       Should give a PASS. */

    /* SIGNATURE in LITTLE ENDIAN format */
    unsigned char signature[CRYPTO_RSA3K_SIG_SIZE] = {
            0xeb, 0x67, 0xa3, 0x2e, 0xaa, 0x02, 0xfe, 0x13, 0x69, 0x93, 0xdd, 0x34, 0x00, 0x25, 0x3b, 0x28,  
            0x86, 0x7a, 0xab, 0x0b, 0xc3, 0xa6, 0xa6, 0x55, 0x6a, 0x77, 0x49, 0x28, 0x28, 0x71, 0x36, 0xb7,  
            0x36, 0x6e, 0x23, 0x8f, 0x6b, 0xaa, 0x20, 0x02, 0xca, 0xac, 0xc0, 0xe8, 0xec, 0x3b, 0x90, 0x4c,  
            0xc7, 0x91, 0x93, 0x2f, 0x3b, 0x79, 0xca, 0x50, 0xb8, 0x90, 0xcb, 0x36, 0x10, 0xdb, 0xbe, 0xfd,  
            0xd2, 0x53, 0x41, 0x1f, 0x83, 0xc3, 0xfa, 0xc0, 0x48, 0xaa, 0x61, 0xc3, 0xf1, 0xc5, 0x35, 0xa9,  
            0x9f, 0xbc, 0x2f, 0x7f, 0x4b, 0x04, 0x04, 0x9f, 0x79, 0xf6, 0xaf, 0xcb, 0x7f, 0x83, 0xbd, 0x87,  
            0xaf, 0xba, 0x53, 0x18, 0x68, 0x62, 0x8f, 0xf0, 0xb3, 0x4b, 0x29, 0xe7, 0xa2, 0x16, 0xab, 0x09,  
            0x79, 0x0b, 0xe3, 0xf2, 0x04, 0x99, 0xe8, 0x04, 0x4a, 0xb4, 0x1d, 0xe8, 0x73, 0x74, 0x8b, 0xf5,  
            0xd5, 0x20, 0x20, 0xb2, 0x96, 0xda, 0x0e, 0x14, 0xcf, 0xa7, 0x4a, 0xf2, 0x58, 0x55, 0x26, 0x36,  
            0x1d, 0x7d, 0xd7, 0x2e, 0x2f, 0x17, 0x0e, 0xfc, 0x86, 0xe5, 0x75, 0x8e, 0x47, 0x21, 0xb6, 0x51,  
            0x20, 0x6f, 0x45, 0xb1, 0x24, 0x12, 0x19, 0x30, 0x83, 0xcb, 0x02, 0xc8, 0xa7, 0xfc, 0x02, 0xdb,  
            0xbd, 0x12, 0x78, 0xc0, 0x33, 0x47, 0x0d, 0x83, 0x11, 0x47, 0x8f, 0xa8, 0x90, 0x68, 0xbb, 0x5a,  
            0xde, 0x8c, 0x4d, 0xcc, 0xf8, 0x82, 0xf3, 0x73, 0xbc, 0x26, 0x46, 0xbf, 0x59, 0x57, 0xdb, 0xb5,  
            0xa3, 0xae, 0x6d, 0x3e, 0x05, 0xf9, 0x41, 0x8b, 0xac, 0x5a, 0xe9, 0x9a, 0x81, 0x9d, 0x92, 0xdd,  
            0x92, 0xa5, 0x8c, 0x7d, 0x1e, 0x5b, 0x5c, 0x40, 0x8e, 0x72, 0xe7, 0x2b, 0xf3, 0x7b, 0x37, 0xf4,  
            0xa9, 0xe7, 0x64, 0xc5, 0x48, 0x8d, 0x00, 0xf8, 0x33, 0x66, 0xdc, 0xb2, 0x46, 0x86, 0x61, 0xa7,  
            0x13, 0x9f, 0xb1, 0x35, 0xf3, 0x1e, 0x2a, 0xee, 0x4f, 0x96, 0x1b, 0xd7, 0xba, 0x8a, 0xec, 0x97,  
            0xc4, 0x4b, 0x22, 0xd4, 0x99, 0xa8, 0x2f, 0x68, 0x5f, 0x23, 0x71, 0x2c, 0xbf, 0xe2, 0xc5, 0xfd,  
            0xe4, 0x42, 0x61, 0x43, 0xa2, 0xac, 0x2b, 0x4a, 0x8b, 0x7d, 0x2a, 0xad, 0x7b, 0x6a, 0x06, 0x1d,  
            0x11, 0x7e, 0x9e, 0xdd, 0xc3, 0x58, 0xf9, 0x45, 0xee, 0x40, 0x46, 0xa5, 0x86, 0xc6, 0xa3, 0xc9,  
            0x0d, 0x2e, 0x6b, 0x15, 0x71, 0x7c, 0x90, 0xbd, 0x5f, 0xfd, 0xa2, 0x26, 0xc9, 0x22, 0xdc, 0x93,  
            0xfd, 0x23, 0xb4, 0xc2, 0x67, 0x4b, 0xf1, 0x11, 0x37, 0xe0, 0x59, 0xe4, 0x56, 0xfa, 0x79, 0xf2,  
            0x49, 0xb4, 0xba, 0xee, 0xd4, 0x78, 0xe7, 0x11, 0x61, 0xbe, 0x06, 0xec, 0x44, 0x74, 0xb0, 0x6b,  
            0x78, 0x90, 0x81, 0xa3, 0xbd, 0x73, 0xc4, 0x4c, 0x09, 0x18, 0x30, 0xcd, 0x1e, 0x0f, 0x9f, 0x9c,
    };

    /* MODULUS in LITTLE ENDIAN format */
    unsigned int modulus[CRYPTO_RSA3K_SIG_SIZE] = 
    {
            0x6404288d, 0xc3efcb20, 0xd0aae02c, 0x06adc570, 0xb23c4ce6, 0x46ed46ab, 0x4392a48c, 0x9b3aa00d, 
            0xb1102d00, 0xf4d95994, 0x5a5ff012, 0x2d5a61e7, 0xfeab8251, 0x51dda5a3, 0xc475d928, 0xf1036983, 
            0xd9207b7b, 0xc3aed23b, 0x6333437d, 0x27c6c5f6, 0xb140f5ad, 0x02741a48, 0x5327dc45, 0x61b927d2, 
            0xb050f67f, 0x4e67771b, 0x404c2842, 0x6e40169d, 0xdb57e5c5, 0x4afb15a1, 0x3dc2ba0c, 0x6e0d7696, 
            0x39e98c31, 0xd0e70fc9, 0x3d7c6406, 0x9315dd98, 0x6d7a9422, 0xf3b1259b, 0x56911699, 0xf3b34a4a, 
            0xe3145b36, 0x1c2f0b42, 0xc74cbbf8, 0xb750c689, 0x6ca212ed, 0x3110a1ce, 0x75a9bcbf, 0x19ee7f65, 
            0x420cb3fe, 0x0771cda1, 0x267fdb1f, 0x693ffa8e, 0x6baf8baf, 0x4300a914, 0x97478df6, 0x78f8655b, 
            0x95ebc445, 0x621fe604, 0x6099c478, 0xc17fc515, 0x33875702, 0x66b4e135, 0xc2234dcf, 0x5416f007, 
            0x06e1ec20, 0xc27f41e5, 0x15eaa226, 0x94da66c8, 0xb3ed717c, 0x05f82c96, 0x1f649983, 0x1b161a04, 
            0x4653a11f, 0x08c44fa9, 0xff5c792f, 0x630a22e3, 0xbebc1e1d, 0x999fc596, 0xef16b029, 0x9dbff0fc, 
            0x1b7eb531, 0xd441f918, 0xeae40439, 0x88b5f9e9, 0x6f4d308a, 0x35449529, 0xc8337ce3, 0x508eae45, 
            0xe059f539, 0x3ddf3dca, 0x598f19a7, 0x2f12abe4, 0x6af4164f, 0x25a7f417, 0xac4a5570, 0xc6f1a2c0, 
            0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
            0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
            0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
            0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000
    };

    /* EXPONENT in BIG ENDIAN format */
	uint8_t pub_exp[4U] = { 0x00, 0x01, 0x00, 0x01 };

    /* SHA256 HASH in BIG ENDIAN format */
    unsigned char hash[SHA256_HASH_BYTE_SIZE] = {
            0x36, 0x43, 0xB5, 0x77, 0xDC, 0x4E, 0x7D, 0xE4, 0xF3, 0x99, 0x36, 0x73, 0x8C, 0x73, 0xDE, 0x56,
            0x0D, 0xA7, 0xD3, 0xFF, 0xE3, 0x32, 0x7D, 0x8E, 0xBD, 0x28, 0xD4, 0x0B, 0xDD, 0x96, 0x86, 0x8F
    };

    uint8_t flags = LITTLE_ENDIAN_SIGNATURE | LITTLE_ENDIAN_MODULUS | BIG_ENDIAN_EXPONENT | BIG_ENDIAN_SHA_HASH;

    uint8_t saltLen = 32;
#endif

/* More test vectors can be added here if needed */

#endif // TESTVECTOR_RSA3KPSS_SHA256_H
