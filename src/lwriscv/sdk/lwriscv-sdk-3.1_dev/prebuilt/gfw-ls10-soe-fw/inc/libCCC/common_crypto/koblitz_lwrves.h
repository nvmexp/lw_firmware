/*
 * Copyright (c) 2018-2021, LWPU Corporation. All Rights Reserved.
 *
 * LWPU Corporation and its licensors retain all intellectual property and
 * proprietary rights in and to this software and related documentation.  Any
 * use, reproduction, disclosure or distribution of this software and related
 * documentation without an express license agreement from LWPU Corporation
 * is strictly prohibited.
 *
 * Header file for CheetAh Security Elliptic Engine
 */

/* Koblitz lwrve parameters obtained from Standards for Efficient Cryptography 2 (SEC 2)
 * www.secg.org/sec2-v2.pdf
 */

#ifndef INCLUDED_KOBLITZ_LWRVES_H
#define INCLUDED_KOBLITZ_LWRVES_H

#ifdef DOXYGEN
#include <ccc_doxygen.h>
#endif

#include <tegra_pka1_ec_param.h>

// XXX TODO: add the precomputed montgomery values.
#ifndef KOBLITZ_EC_USE_FIXED_MONTGOMERY
#define KOBLITZ_EC_USE_FIXED_MONTGOMERY 0
#endif

#if KOBLITZ_EC_USE_FIXED_MONTGOMERY

#define KOBLITZ_MONT_VALUE_OR_NULL(size, field)				\
	((0 == koblitz_p ## size ## k1_mont_valid) ? NULL : ec_koblitz_p ## size ## k1_mont.field)

#define KOBLITZ_MONT_FLAG(size)						\
	((0 == koblitz_p ## size ## k1_mont_valid) ? PKA1_LWRVE_FLAG_NONE : PKA1_LWRVE_FLAG_MONTGOMERY_OK)

#define KOBLITZ_LWRVE_MONT_NONE(size)  GENERIC_LWRVE_MONT_NONE(koblitz_p ## size ## k1)

#error "Koblitz lwrve montgomery values not configured => ADD when required"

#else

/* Pre-computed montgomery values not used here */
#define KOBLITZ_MONT_VALUE_OR_NULL(size, field) NULL
#define KOBLITZ_MONT_FLAG(size) PKA1_LWRVE_FLAG_NONE

#define KOBLITZ_LWRVE_MONT_NONE(size)

#endif /* KOBLITZ_EC_USE_FIXED_MONTGOMERY */

#if HAVE_KOBLITZ_LWRVES_ALL
#if CCC_EC_MIN_PRIME_BITS <= 160U
#define HAVE_KOBLITZ_P160K1 1
#endif
#if CCC_EC_MIN_PRIME_BITS <= 192U
#define HAVE_KOBLITZ_P192K1 1
#endif
#if CCC_EC_MIN_PRIME_BITS <= 224U
#define HAVE_KOBLITZ_P224K1 1
#endif
#if CCC_EC_MIN_PRIME_BITS <= 256U
#define HAVE_KOBLITZ_P256K1 1
#endif
#endif /* HAVE_KOBLITZ_LWRVES_ALL */

#ifndef HAVE_KOBLITZ_P160K1
#define HAVE_KOBLITZ_P160K1 0
#endif
#ifndef HAVE_KOBLITZ_P192K1
#define HAVE_KOBLITZ_P192K1 0
#endif
#ifndef HAVE_KOBLITZ_P224K1
#define HAVE_KOBLITZ_P224K1 0
#endif
#ifndef HAVE_KOBLITZ_P256K1
#define HAVE_KOBLITZ_P256K1 0
#endif

#if HAVE_LW_AUTOMOTIVE_SYSTEM
#if HAVE_KOBLITZ_P160K1 || HAVE_KOBLITZ_P192K1 || HAVE_KOBLITZ_P224K1
#error "LW automotive system must not enable Koblitz prime lwrves with primes 160-224 bits"
#endif
#endif

/* Koblitz defined prime field lwrves (EC on prime field Fp) =>
 * y^2 = x^3 + ax + b over Fp
 *
 * Koblitz domain parameters for Elliptic lwrve over Fp = (p, a, b, G, n and h) =>
 * p	   : prime number defined for finite field Fp
 * a and b : parameters defining the lwrve (see above equation)
 * G	   : generator point (Gx,Gy), a chosen point G (values x and y below)
 * n	   : order of the lwrve
 * h	   : cofactor where h = #E(Fp)/n [#E(Fp) is the number of points on an elliptic lwrve]
 *
 * Value 'h' is not used by this SW.
 *
 * PKA1 value L (ceiling(log2(n))) for these lwrves is identical to (lwrve->nbytes*8)
 *
 * Using the uncompressed base point G
 *
 * Assuming the paper uses some kind of encoding tag in front of
 * G coordinates: 0x04
 * Compressed tag seems to be: 0x03 or 0x02
 */

/* Now these are in BIG ENDIAN byte order
 * Keep these word aligned; they are written to PKA1 bank registers as words.
 */

/* KOBLITZ lwrve type definitions using the generic lwrve macros
 */
#define KOBLITZ_LWRVE_TYPE(size)       GENERIC_LWRVE_TYPE(koblitz_p ## size ## k1, (size / 8))
#define KOBLITZ_LWRVE_MONT_TYPE(size)  GENERIC_LWRVE_MONT_TYPE(koblitz_p ## size ## k1, (size / 8))

#define KOBLITZ_LWRVE(size) GENERIC_LWRVE(koblitz_p ## size ## k1)

#define KOBLITZ_LWRVE_MONT_VALUES(size) GENERIC_LWRVE_MONT_VALUES(koblitz_p ## size ## k1)

#if HAVE_KOBLITZ_P160K1
/* KOBLITZ P-160 k1 (secp160k1)
 */
KOBLITZ_LWRVE_TYPE(160);

KOBLITZ_LWRVE(160) = {
	.p = { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	       0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe,
	       0xff, 0xff, 0xac, 0x73, },
	.a = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	       0x00, 0x00, 0x00, 0x00, },
	.b = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	       0x00, 0x00, 0x00, 0x070, },
	.x = { 0x3b, 0x4c, 0x38, 0x2c, 0xe3, 0x7a, 0xa1, 0x92,
	       0xa4, 0x01, 0x9e, 0x76, 0x30, 0x36, 0xf4, 0xf5,
	       0xdd, 0x4d, 0x7e, 0xbb, },
	.y = { 0x93, 0x8c, 0xf9, 0x35, 0x31, 0x8f, 0xdc, 0xed,
	       0x6b, 0xc2, 0x82, 0x86, 0x53, 0x17, 0x33, 0xc3,
	       0xf0, 0x3c, 0x4f, 0xee, },
	.n = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	       0x00, 0x01, 0xb8, 0xfa, 0x16, 0xdf, 0xab, 0x9a,
	       0xca, 0x16, 0xb6, 0xb3, },
};

#if KOBLITZ_EC_USE_FIXED_MONTGOMERY

#define koblitz_p160k1_mont_valid 0 /* XXX Values not configured */

KOBLITZ_LWRVE_MONT_NONE(160);	/* not defined */

/* If used => set these:
 *
 * KOBLITZ_LWRVE_MONT_TYPE(160);
 *
 * Values in big endian like other lwrve values.
 *
 * KOBLITZ_LWRVE_MONT_VALUES(160) = {
 *  Set m_prime and r2 fields.
 *};
 *
 * Mont values not defined, trapped above in this file.
 */
#else

#define koblitz_p160k1_mont_valid 0

#endif /* KOBLITZ_EC_USE_FIXED_MONTGOMERY */
#endif /* HAVE_KOBLITZ_P160K1 */

#if HAVE_KOBLITZ_P192K1

/* KOBLITZ P-192 k1 (secp192k1) */

KOBLITZ_LWRVE_TYPE(192);

KOBLITZ_LWRVE(192) = {
	.p = { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	       0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE,
	       0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x37, },
	.a = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, },
	.b = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, },
	// XXX start tag 04 removed => uncompressed?
	.x = { 0xDB, 0x4F, 0xF1, 0x0E, 0xC0, 0x57, 0xE9, 0xAE,
	       0x26, 0xB0, 0x7D, 0x02, 0x80, 0xB7, 0xF4, 0x34,
	       0x1D, 0xA5, 0xD1, 0xB1, 0xEA, 0xE0, 0x6C, 0x7D, },
	.y = { 0x9B, 0x2F, 0x2F, 0x6D, 0x9C, 0x56, 0x28, 0xA7,
	       0x84, 0x41, 0x63, 0xD0, 0x15, 0xBE, 0x86, 0x34,
	       0x40, 0x82, 0xAA, 0x88, 0xD9, 0x5E, 0x2F, 0x9D, },
	.n = { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	       0xFF, 0xFF, 0xFF, 0xFE, 0x26, 0xF2, 0xFC, 0x17,
	       0x0F, 0x69, 0x46, 0x6A, 0x74, 0xDE, 0xFD, 0x8D, },
};

#define koblitz_p192k1_mont_valid 0

KOBLITZ_LWRVE_MONT_NONE(192);

#endif /* HAVE_KOBLITZ_P192K1 */

#if HAVE_KOBLITZ_P224K1

/* KOBLITZ P224K1 (secp224k1) */

KOBLITZ_LWRVE_TYPE(224);

KOBLITZ_LWRVE(224) = {
	.p = { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	       0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	       0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE,
	       0xFF, 0xFF, 0xE5, 0x6D, },
	.a = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	       0x00, 0x00, 0x00, 0x00, },
	.b = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	       0x00, 0x00, 0x00, 0x05, },
	.x = { 0xA1, 0x45, 0x5B, 0x33, 0x4D, 0xF0, 0x99, 0xDF,
	       0x30, 0xFC, 0x28, 0xA1, 0x69, 0xA4, 0x67, 0xE9,
	       0xE4, 0x70, 0x75, 0xA9, 0x0F, 0x7E, 0x65, 0x0E,
	       0xB6, 0xB7, 0xA4, 0x5C, },
	.y = { 0x7E, 0x08, 0x9F, 0xED, 0x7F, 0xBA, 0x34, 0x42,
	       0x82, 0xCA, 0xFB, 0xD6, 0xF7, 0xE3, 0x19, 0xF7,
	       0xC0, 0xB0, 0xBD, 0x59, 0xE2, 0xCA, 0x4B, 0xDB,
	       0x55, 0x6D, 0x61, 0xA5, },
	// Stripped prefix 0x01
	.n = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	       0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xDC, 0xE8,
	       0xD2, 0xEC, 0x61, 0x84, 0xCA, 0xF0, 0xA9, 0x71,
	       0x76, 0x9F, 0xB1, 0xF7, },
};

#define koblitz_p224k1_mont_valid 0

KOBLITZ_LWRVE_MONT_NONE(224);

#endif /* HAVE_KOBLITZ_P224K1 */

#if HAVE_KOBLITZ_P256K1

/* KOBLITZ P-256 (secp256k1) */

KOBLITZ_LWRVE_TYPE(256);

KOBLITZ_LWRVE(256) = {
	.p = { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	       0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	       0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	       0xFF, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFC, 0x2F, },
	.a = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, },
	.b = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, },
	.x = { 0x79, 0xBE, 0x66, 0x7E, 0xF9, 0xDC, 0xBB, 0xAC,
	       0x55, 0xA0, 0x62, 0x95, 0xCE, 0x87, 0x0B, 0x07,
	       0x02, 0x9B, 0xFC, 0xDB, 0x2D, 0xCE, 0x28, 0xD9,
	       0x59, 0xF2, 0x81, 0x5B, 0x16, 0xF8, 0x17, 0x98, },
	.y = { 0x48, 0x3A, 0xDA, 0x77, 0x26, 0xA3, 0xC4, 0x65,
	       0x5D, 0xA4, 0xFB, 0xFC, 0x0E, 0x11, 0x08, 0xA8,
	       0xFD, 0x17, 0xB4, 0x48, 0xA6, 0x85, 0x54, 0x19,
	       0x9C, 0x47, 0xD0, 0x8F, 0xFB, 0x10, 0xD4, 0xB8, },
	.n = { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	       0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE,
	       0xBA, 0xAE, 0xDC, 0xE6, 0xAF, 0x48, 0xA0, 0x3B,
	       0xBF, 0xD2, 0x5E, 0x8C, 0xD0, 0x36, 0x41, 0x41, },
};

#define koblitz_p256k1_mont_valid 0

KOBLITZ_LWRVE_MONT_NONE(256);

#endif /* HAVE_KOBLITZ_P256K1 */

#endif /* INCLUDED_KOBLITZ_LWRVES_H */
