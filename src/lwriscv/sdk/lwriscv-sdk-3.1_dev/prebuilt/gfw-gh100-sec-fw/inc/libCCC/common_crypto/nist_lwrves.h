/*
 * Copyright (c) 2017-2021, LWPU Corporation. All Rights Reserved.
 *
 * LWPU Corporation and its licensors retain all intellectual property and
 * proprietary rights in and to this software and related documentation.  Any
 * use, reproduction, disclosure or distribution of this software and related
 * documentation without an express license agreement from LWPU Corporation
 * is strictly prohibited.
 *
 * Header file for CheetAh Security Elliptic Engine
 */

#ifndef INCLUDED_NIST_LWRVES_H
#define INCLUDED_NIST_LWRVES_H

#ifdef DOXYGEN
#include <ccc_doxygen.h>
#endif

#include <tegra_pka1_ec_param.h>

#ifndef NIST_EC_USE_FIXED_MONTGOMERY
#define NIST_EC_USE_FIXED_MONTGOMERY 1
#endif

#ifndef HAVE_NIST_LWRVE_ALL
#define HAVE_NIST_LWRVE_ALL 0
#endif

#if NIST_EC_USE_FIXED_MONTGOMERY

#define NIST_MONT_VALUE_OR_NULL(size, field)				\
	((0 == nist_p ## size ## _mont_valid) ? NULL : ec_nist_p ## size ## _mont.field)

#define NIST_MONT_FLAG(size)						\
	((0 == nist_p ## size ## _mont_valid) ? PKA1_LWRVE_FLAG_NONE : PKA1_LWRVE_FLAG_MONTGOMERY_OK)

#define NIST_LWRVE_MONT_NONE(size)   GENERIC_LWRVE_MONT_NONE(nist_p ## size)

#else

/* Pre-computed montgomery values never used */
#define NIST_MONT_VALUE_OR_NULL(size, field) NULL
#define NIST_MONT_FLAG(size) PKA1_LWRVE_FLAG_NONE

#define NIST_LWRVE_MONT_NONE(size)

#endif /* NIST_EC_USE_FIXED_MONTGOMERY */

#if HAVE_NIST_LWRVE_ALL
#if CCC_EC_MIN_PRIME_BITS <= 192U
#define HAVE_NIST_P192 1
#endif
#if CCC_EC_MIN_PRIME_BITS <= 224U
#define HAVE_NIST_P224 1
#endif
#if CCC_EC_MIN_PRIME_BITS <= 256U
#define HAVE_NIST_P256 1
#endif
#if CCC_EC_MIN_PRIME_BITS <= 384U
#define HAVE_NIST_P384 1
#endif
#if HAVE_P521
#if CCC_EC_MIN_PRIME_BITS <= 521U
#define HAVE_NIST_P521 1
#endif
#endif
#endif /* HAVE_NIST_LWRVE_ALL */

#ifndef HAVE_NIST_P192
#define HAVE_NIST_P192 0
#endif
#ifndef HAVE_NIST_P224
#define HAVE_NIST_P224 0
#endif
#ifndef HAVE_NIST_P256
#define HAVE_NIST_P256 0
#endif
#ifndef HAVE_NIST_P384
#define HAVE_NIST_P384 0
#endif
#ifndef HAVE_NIST_P521
#define HAVE_NIST_P521 0
#endif

#if HAVE_LW_AUTOMOTIVE_SYSTEM
#if HAVE_NIST_P192 || HAVE_NIST_P224
#error "LW automotive system must not enable NIST-P192 or NIST-P224 lwrves"
#endif
#endif

/* NIST defined prime field NIST-P* lwrves (EC on prime field Fp) =>
 * y^2 mod p = x^3 + ax + b mod p, where 4a^3 + 27b^2 mod p != 0
 * (short Weierstrass equation)
 *
 * NIST domain parameters for Elliptic lwrve over Fp = (p, a, b, G, n and h) =>
 * p	   : prime number defined for finite field Fp
 * a and b : parameters defining the lwrve (see above equation)
 * G	   : generator point (Gx,Gy), a chosen point G (values x and y below)
 * n	   : order of the lwrve
 * h	   : cofactor where h = #E(Fp)/n [#E(Fp) is the number of points on an elliptic lwrve]
 *
 * Value 'h' is not used by this SW.
 *
 * PKA1 value L (ceiling(log2(n))) for these lwrves is identical to (lwrve->nbytes*8)
 */

/* Value of coefficient a is -3 for efficiency reasons.
 * PKA can not handle negative numbers, so value of a below
 * is "-3 mod p" (i.e. in this case just add -3 to p)
 */

/* Now these are in BIG ENDIAN byte order
 *
 * The parameters are written to PKA1 bank registers as words so they
 * are accessed word aligned.
 */

/* NIST P lwrve type definitions using the generic lwrve macros
 */
#define NIST_LWRVE_TYPE(size)        GENERIC_LWRVE_TYPE(nist_p ## size, (size / 8))
#define NIST_LWRVE_MONT_TYPE(size)   GENERIC_LWRVE_MONT_TYPE(nist_p ## size, (size / 8))
#define NIST_LWRVE(size)             GENERIC_LWRVE(nist_p ## size)
#define NIST_LWRVE_MONT_VALUES(size) GENERIC_LWRVE_MONT_VALUES(nist_p ## size)

// -----------------------

/* NIST P lwrve parameters for 192, 224, 256, 384, 521 bit p
 */
#if HAVE_NIST_P192

/* NIST P-192 (prime192v1) */

NIST_LWRVE_TYPE(192);

NIST_LWRVE(192) = {
	.p = { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	       0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE,
	       0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, },
	.a = { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	       0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE,
	       0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, },
	.b = { 0x64, 0x21, 0x05, 0x19, 0xE5, 0x9C, 0x80, 0xE7,
	       0x0F, 0xA7, 0xE9, 0xAB, 0x72, 0x24, 0x30, 0x49,
	       0xFE, 0xB8, 0xDE, 0xEC, 0xC1, 0x46, 0xB9, 0xB1, },
	.x = { 0x18, 0x8D, 0xA8, 0x0E, 0xB0, 0x30, 0x90, 0xF6,
	       0x7C, 0xBF, 0x20, 0xEB, 0x43, 0xA1, 0x88, 0x00,
	       0xF4, 0xFF, 0x0A, 0xFD, 0x82, 0xFF, 0x10, 0x12, },
	.y = { 0x07, 0x19, 0x2B, 0x95, 0xFF, 0xC8, 0xDA, 0x78,
	       0x63, 0x10, 0x11, 0xED, 0x6B, 0x24, 0xCD, 0xD5,
	       0x73, 0xF9, 0x77, 0xA1, 0x1E, 0x79, 0x48, 0x11, },
	.n = { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	       0xFF, 0xFF, 0xFF, 0xFF, 0x99, 0xDE, 0xF8, 0x36,
	       0x14, 0x6B, 0xC9, 0xB1, 0xB4, 0xD2, 0x28, 0x31, },
};

#if NIST_EC_USE_FIXED_MONTGOMERY

NIST_LWRVE_MONT_TYPE(192);

#define nist_p192_mont_valid 1

NIST_LWRVE_MONT_VALUES(192) = {
	.m_prime = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		     0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, },
	.r2 = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, },
};

#else

#define nist_p192_mont_valid 0

#endif /* NIST_EC_USE_FIXED_MONTGOMERY */

#endif // HAVE_NIST_P192

#if HAVE_NIST_P224

/* NIST P-224 (prime224v1) */

NIST_LWRVE_TYPE(224);

NIST_LWRVE(224) = {
	.p = { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	       0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	       0x00, 0x00, 0x00, 0x01, },
	.a = { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	       0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE,
	       0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	       0xFF, 0xFF, 0xFF, 0xFE, },
	.b = { 0xB4, 0x05, 0x0A, 0x85, 0x0C, 0x04, 0xB3, 0xAB,
	       0xF5, 0x41, 0x32, 0x56, 0x50, 0x44, 0xB0, 0xB7,
	       0xD7, 0xBF, 0xD8, 0xBA, 0x27, 0x0B, 0x39, 0x43,
	       0x23, 0x55, 0xFF, 0xB4, },
	.x = { 0xB7, 0x0E, 0x0C, 0xBD, 0x6B, 0xB4, 0xBF, 0x7F,
	       0x32, 0x13, 0x90, 0xB9, 0x4A, 0x03, 0xC1, 0xD3,
	       0x56, 0xC2, 0x11, 0x22, 0x34, 0x32, 0x80, 0xD6,
	       0x11, 0x5C, 0x1D, 0x21, },
	.y = { 0xBD, 0x37, 0x63, 0x88, 0xB5, 0xF7, 0x23, 0xFB,
	       0x4C, 0x22, 0xDF, 0xE6, 0xCD, 0x43, 0x75, 0xA0,
	       0x5A, 0x07, 0x47, 0x64, 0x44, 0xD5, 0x81, 0x99,
	       0x85, 0x00, 0x7E, 0x34, },
	.n = { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	       0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x16, 0xA2,
	       0xE0, 0xB8, 0xF0, 0x3E, 0x13, 0xDD, 0x29, 0x45,
	       0x5C, 0x5C, 0x2A, 0x3D, },
};

#define nist_p224_mont_valid 0
NIST_LWRVE_MONT_NONE(224);

#endif /* HAVE_NIST_P224 */

#if HAVE_NIST_P256

/* NIST P-256 (prime256v1) */

NIST_LWRVE_TYPE(256);

NIST_LWRVE(256) = {
	.p = { 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x01,
	       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	       0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
	       0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, },
	.a = { 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x01,
	       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	       0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
	       0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, },
	.b = { 0x5A, 0xC6, 0x35, 0xD8, 0xAA, 0x3A, 0x93, 0xE7,
	       0xB3, 0xEB, 0xBD, 0x55, 0x76, 0x98, 0x86, 0xBC,
	       0x65, 0x1D, 0x06, 0xB0, 0xCC, 0x53, 0xB0, 0xF6,
	       0x3B, 0xCE, 0x3C, 0x3E, 0x27, 0xD2, 0x60, 0x4B, },
	.x = { 0x6B, 0x17, 0xD1, 0xF2, 0xE1, 0x2C, 0x42, 0x47,
	       0xF8, 0xBC, 0xE6, 0xE5, 0x63, 0xA4, 0x40, 0xF2,
	       0x77, 0x03, 0x7D, 0x81, 0x2D, 0xEB, 0x33, 0xA0,
	       0xF4, 0xA1, 0x39, 0x45, 0xD8, 0x98, 0xC2, 0x96, },
	.y = { 0x4F, 0xE3, 0x42, 0xE2, 0xFE, 0x1A, 0x7F, 0x9B,
	       0x8E, 0xE7, 0xEB, 0x4A, 0x7C, 0x0F, 0x9E, 0x16,
	       0x2B, 0xCE, 0x33, 0x57, 0x6B, 0x31, 0x5E, 0xCE,
	       0xCB, 0xB6, 0x40, 0x68, 0x37, 0xBF, 0x51, 0xF5, },
	.n = { 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
	       0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	       0xBC, 0xE6, 0xFA, 0xAD, 0xA7, 0x17, 0x9E, 0x84,
	       0xF3, 0xB9, 0xCA, 0xC2, 0xFC, 0x63, 0x25, 0x51, },
};

#if NIST_EC_USE_FIXED_MONTGOMERY

#define nist_p256_mont_valid 1

NIST_LWRVE_MONT_TYPE(256);

/* Values in big endian like other lwrve values
 */
NIST_LWRVE_MONT_VALUES(256) = {
	.m_prime = { 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x02,
		     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		     0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
		     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, },
	.r2 = { 0x00, 0x00, 0x00, 0x04, 0xFF, 0xFF, 0xFF, 0xFD,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE,
		0xFF, 0xFF, 0xFF, 0xFB, 0xFF, 0xFF, 0xFF, 0xFF,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, },
};

#else

#define nist_p256_mont_valid 0

#endif /* NIST_EC_USE_FIXED_MONTGOMERY*/
#endif /* HAVE_NIST_P256 */

#if HAVE_NIST_P384

/* NIST P-384 (secp384r1) */

NIST_LWRVE_TYPE(384);

NIST_LWRVE(384) = {
	.p = { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	       0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	       0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	       0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE,
	       0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
	       0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, },
	.a = { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	       0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	       0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	       0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE,
	       0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
	       0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFC, },
	.b = { 0xB3, 0x31, 0x2F, 0xA7, 0xE2, 0x3E, 0xE7, 0xE4,
	       0x98, 0x8E, 0x05, 0x6B, 0xE3, 0xF8, 0x2D, 0x19,
	       0x18, 0x1D, 0x9C, 0x6E, 0xFE, 0x81, 0x41, 0x12,
	       0x03, 0x14, 0x08, 0x8F, 0x50, 0x13, 0x87, 0x5A,
	       0xC6, 0x56, 0x39, 0x8D, 0x8A, 0x2E, 0xD1, 0x9D,
	       0x2A, 0x85, 0xC8, 0xED, 0xD3, 0xEC, 0x2A, 0xEF, },
	.x = { 0xAA, 0x87, 0xCA, 0x22, 0xBE, 0x8B, 0x05, 0x37,
	       0x8E, 0xB1, 0xC7, 0x1E, 0xF3, 0x20, 0xAD, 0x74,
	       0x6E, 0x1D, 0x3B, 0x62, 0x8B, 0xA7, 0x9B, 0x98,
	       0x59, 0xF7, 0x41, 0xE0, 0x82, 0x54, 0x2A, 0x38,
	       0x55, 0x02, 0xF2, 0x5D, 0xBF, 0x55, 0x29, 0x6C,
	       0x3A, 0x54, 0x5E, 0x38, 0x72, 0x76, 0x0A, 0xB7, },
	.y = { 0x36, 0x17, 0xDE, 0x4A, 0x96, 0x26, 0x2C, 0x6F,
	       0x5D, 0x9E, 0x98, 0xBF, 0x92, 0x92, 0xDC, 0x29,
	       0xF8, 0xF4, 0x1D, 0xBD, 0x28, 0x9A, 0x14, 0x7C,
	       0xE9, 0xDA, 0x31, 0x13, 0xB5, 0xF0, 0xB8, 0xC0,
	       0x0A, 0x60, 0xB1, 0xCE, 0x1D, 0x7E, 0x81, 0x9D,
	       0x7A, 0x43, 0x1D, 0x7C, 0x90, 0xEA, 0x0E, 0x5F, },
	.n = { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	       0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	       0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	       0xC7, 0x63, 0x4D, 0x81, 0xF4, 0x37, 0x2D, 0xDF,
	       0x58, 0x1A, 0x0D, 0xB2, 0x48, 0xB0, 0xA7, 0x7A,
	       0xEC, 0xEC, 0x19, 0x6A, 0xCC, 0xC5, 0x29, 0x73, },
};

#define nist_p384_mont_valid 0
NIST_LWRVE_MONT_NONE(384);

#endif /* HAVE_NIST_P384 */

/* Code support for NIST P521 lwrve:
 * NOT COMPLETED YET for PKA1
 */
#if HAVE_NIST_P521
/* FIXME => This does not yet work with PKA1,
 * so disable in that HW until support added
 */

/* NIST P-521 (openssl: secp521r1)
 *
 * XXX These are padded to 20 words (80 bytes) in PKA1. Maybe could use 68U also
 * XXX  for PKA1 when support added.
 *
 * LWPKA uses 68 byte values.
 */
#if CCC_SOC_WITH_PKA1
#define CCC_NIST_P521_BYTE_LENGTH 80U
#define NIST_P521_ZERO_FILL \
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#else
#define CCC_NIST_P521_BYTE_LENGTH 68U /* 544 / 8 == 68 */
#define NIST_P521_ZERO_FILL
#endif /* CCC_SOC_WITH_PKA1 */

GENERIC_LWRVE_TYPE(nist_p521, CCC_NIST_P521_BYTE_LENGTH);

NIST_LWRVE(521) = {
	.p = { NIST_P521_ZERO_FILL
	       0x00, 0x00, 0x01, 0xFF,
	       0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	       0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	       0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	       0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	       0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	       0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	       0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	       0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, },
	.a = { NIST_P521_ZERO_FILL
	       0x00, 0x00, 0x01, 0xFF,
	       0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	       0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	       0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	       0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	       0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	       0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	       0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	       0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, },
	.b = { NIST_P521_ZERO_FILL
	       0x00, 0x00, 0x00, 0x51,
	       0x95, 0x3E, 0xB9, 0x61, 0x8E, 0x1C, 0x9A, 0x1F,
	       0x92, 0x9A, 0x21, 0xA0, 0xB6, 0x85, 0x40, 0xEE,
	       0xA2, 0xDA, 0x72, 0x5B, 0x99, 0xB3, 0x15, 0xF3,
	       0xB8, 0xB4, 0x89, 0x91, 0x8E, 0xF1, 0x09, 0xE1,
	       0x56, 0x19, 0x39, 0x51, 0xEC, 0x7E, 0x93, 0x7B,
	       0x16, 0x52, 0xC0, 0xBD, 0x3B, 0xB1, 0xBF, 0x07,
	       0x35, 0x73, 0xDF, 0x88, 0x3D, 0x2C, 0x34, 0xF1,
	       0xEF, 0x45, 0x1F, 0xD4, 0x6B, 0x50, 0x3F, 0x00, },
	.x = { NIST_P521_ZERO_FILL
	       0x00, 0x00, 0x00, 0xC6,
	       0x85, 0x8E, 0x06, 0xB7, 0x04, 0x04, 0xE9, 0xCD,
	       0x9E, 0x3E, 0xCB, 0x66, 0x23, 0x95, 0xB4, 0x42,
	       0x9C, 0x64, 0x81, 0x39, 0x05, 0x3F, 0xB5, 0x21,
	       0xF8, 0x28, 0xAF, 0x60, 0x6B, 0x4D, 0x3D, 0xBA,
	       0xA1, 0x4B, 0x5E, 0x77, 0xEF, 0xE7, 0x59, 0x28,
	       0xFE, 0x1D, 0xC1, 0x27, 0xA2, 0xFF, 0xA8, 0xDE,
	       0x33, 0x48, 0xB3, 0xC1, 0x85, 0x6A, 0x42, 0x9B,
	       0xF9, 0x7E, 0x7E, 0x31, 0xC2, 0xE5, 0xBD, 0x66, },
	.y = { NIST_P521_ZERO_FILL
	       0x00, 0x00, 0x01, 0x18,
	       0x39, 0x29, 0x6A, 0x78, 0x9A, 0x3B, 0xC0, 0x04,
	       0x5C, 0x8A, 0x5F, 0xB4, 0x2C, 0x7D, 0x1B, 0xD9,
	       0x98, 0xF5, 0x44, 0x49, 0x57, 0x9B, 0x44, 0x68,
	       0x17, 0xAF, 0xBD, 0x17, 0x27, 0x3E, 0x66, 0x2C,
	       0x97, 0xEE, 0x72, 0x99, 0x5E, 0xF4, 0x26, 0x40,
	       0xC5, 0x50, 0xB9, 0x01, 0x3F, 0xAD, 0x07, 0x61,
	       0x35, 0x3C, 0x70, 0x86, 0xA2, 0x72, 0xC2, 0x40,
	       0x88, 0xBE, 0x94, 0x76, 0x9F, 0xD1, 0x66, 0x50, },
	.n = { NIST_P521_ZERO_FILL
	       0x00, 0x00, 0x01, 0xFF,
	       0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	       0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	       0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	       0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFA,
	       0x51, 0x86, 0x87, 0x83, 0xBF, 0x2F, 0x96, 0x6B,
	       0x7F, 0xCC, 0x01, 0x48, 0xF7, 0x09, 0xA5, 0xD0,
	       0x3B, 0xB5, 0xC9, 0xB8, 0x89, 0x9C, 0x47, 0xAE,
	       0xBB, 0x6F, 0xB7, 0x1E, 0x91, 0X38, 0X64, 0X09 },
};

#define nist_p521_mont_valid 0

NIST_LWRVE_MONT_NONE(521);

#if CCC_SOC_WITH_PKA1
/* NIST-P521 type for montgomery values MUST BE PROVIDED for PKA1,
 * HW can not callwlate these =>
 * FIXME: ADD WHEN SUPPORT COMPLETED!
 */
// NIST_LWRVE_MONT_VALUES(521) = { .... };
//
#error "PKA1 needs montgomery values for NIST-P521"
#endif /* CCC_SOC_WITH_PKA1 */

#endif /* HAVE_NIST_P521 */

#endif /* INCLUDED_NIST_LWRVES_H */
