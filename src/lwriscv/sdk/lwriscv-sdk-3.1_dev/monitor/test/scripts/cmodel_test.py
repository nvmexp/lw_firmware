#!/usr/bin/python3
import argparse
import sys
import os
import subprocess
import re

def test(text, data, output, cmodel):
    os.elwiron["LD_LIBRARY_PATH"] = cmodel + os.pathsep + os.elwiron["LD_LIBRARY_PATH"]
    rc = subprocess.call('''%s/run_fastsim --load_hex %s 0x100000 --load_data_hex %s 0x180000 --start_riscv_at 0x100000 > %s 2>&1'''
                                        % (cmodel, text, data, output), shell=True)
    return rc

def sanitize_output(output):
    proc = subprocess.Popen("sed -n /TEST_START/= %s" % output, stdout=subprocess.PIPE, shell=True)
    (out, err) = proc.communicate()
    proc.wait()
    if out == '':
        print("No valid test output. Failed prior to test setup")
        exit(1)

    # remove all the lines that's not a printout
    proc = subprocess.Popen("sed -i /FALC_DEBUG_PRINT/!d %s" % output, shell=True)
    proc.wait()
    # clean the line and remove the print signature by cmodel itself
    proc = subprocess.Popen("sed -i -e 's/<FSP FALC_DEBUG_PRINT>\s*:\s*//g' %s" % output, shell=True)
    proc.wait()
    # remove the original changeline generated by cmodel
    proc = subprocess.Popen("tr -d '\\012' < %s > %s.temp" % (output, output), stdin=subprocess.PIPE, shell=True)
    proc.wait()
    # make the test changeline to actual changeline
    proc = subprocess.Popen("tr '\\000' '\\012' < %s.temp > %s" % (output, output), stdin=subprocess.PIPE, shell=True)
    proc.wait()
    # remove the temporary file
    proc = subprocess.Popen("rm %s.temp" % output, stdin=subprocess.PIPE, shell=True)
    proc.wait()


def parse_result(output):
    find_test_output = False
    test_case_match = True
    test_failure = False
    with open(output) as fs:
        for line in fs:
            if re.search(".*TEST_START.*", line):
                find_test_output = True

            # check expect_* rules
            m = re.match(".*EXPECT_(\w+):( \w+|.*)", line)
            if m:
                exp = m.group(1).strip()
                act = m.group(2).strip()

                # if shutdown is expected, nothing should follow
                if exp == "SHUT":
                    if act:
                        test_case_match = False
                        break
                # for all other expected condition, expected and actual return should match
                elif exp != act:
                    test_case_match = False
                    break
            # check failure output
            e = re.match("FAIL:.*", line)
            if e:
                test_failure = True
                break

    if not find_test_output:
        print("NO TEST OUT")
    if not test_case_match:
        print("NO TEST MATCH")
    if test_failure:
        print("TEST FAILURE")
    return find_test_output and test_case_match and not test_failure

def main():
    parser = argparse.ArgumentParser(
        description='Execute Cmodel test and parse result to give pass/fail'
    )
    parser.add_argument('--text_hex', dest="text_hex", required=True,
                        help='text hex file to be loaded to cmodel')
    parser.add_argument('--data_hex', dest="data_hex", required=True,
                        help='data hex file to be loaded to cmodel')
    parser.add_argument('--output', dest="output", required=True,
                        help='output file to save test result')
    parser.add_argument('--cmodel', dest="cmodel_path", required=False,
                        default='/home/ip/ap/mobile/peregrine2.0/cmod/58059406/gblit1_fsp/bin',
                        help='optional to provide alternative cmodel path')

    args = parser.parse_args()

    if not os.path.isfile(args.text_hex):
        print("INVALID TEXT HEX FILE PATH: %s" % args.text_hex)
        exit(1)

    if not os.path.isfile(args.data_hex):
        print("INVALID DATA HEX FILE PATH: %s" % args.data_hex)
        exit(1)

    if not os.path.isdir(args.cmodel_path):
        print("INVALID CMODEL PATH: %s" % args.cmodel_path)
        exit(1)

    rc = test(os.path.abspath(args.text_hex),
              os.path.abspath(args.data_hex),
              os.path.abspath(args.output),
              os.path.abspath(args.cmodel_path))
    if rc != 0:
        print("CMODEL EXELWTION FAILED, RC: %d" % rc)
        exit(rc)
    sanitize_output(os.path.abspath(args.output))
    rc = parse_result(os.path.abspath(args.output))
    if not rc:
        exit(1)

if __name__ == '__main__':
    main()
