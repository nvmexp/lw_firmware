with Nv_Types; use Nv_Types;

package Dev_Prgnlcl with
    SPARK_Mode => On
is

    LW_PRGNLCL_DEVICE_MAP_GROUP_MMODE          : constant := 16#0#;
    LW_PRGNLCL_DEVICE_MAP_GROUP_RISCV_CTL      : constant := 16#1#;
    LW_PRGNLCL_DEVICE_MAP_GROUP_PIC            : constant := 16#2#;
    LW_PRGNLCL_DEVICE_MAP_GROUP_TIMER          : constant := 16#3#;
    LW_PRGNLCL_DEVICE_MAP_GROUP_HOSTIF         : constant := 16#4#;
    LW_PRGNLCL_DEVICE_MAP_GROUP_DMA            : constant := 16#5#;
    LW_PRGNLCL_DEVICE_MAP_GROUP_PMB            : constant := 16#6#;
    LW_PRGNLCL_DEVICE_MAP_GROUP_DIO            : constant := 16#7#;
    LW_PRGNLCL_DEVICE_MAP_GROUP_KEY            : constant := 16#8#;
    LW_PRGNLCL_DEVICE_MAP_GROUP_DEBUG          : constant := 16#9#;
    LW_PRGNLCL_DEVICE_MAP_GROUP_SHA            : constant := 16#a#;
    LW_PRGNLCL_DEVICE_MAP_GROUP_KMEM           : constant := 16#b#;
    LW_PRGNLCL_DEVICE_MAP_GROUP_BROM           : constant := 16#c#;
    LW_PRGNLCL_DEVICE_MAP_GROUP_ROM_PATCH      : constant := 16#d#;
    LW_PRGNLCL_DEVICE_MAP_GROUP_IOPMP          : constant := 16#e#;
    LW_PRGNLCL_DEVICE_MAP_GROUP_NOACCESS       : constant := 16#f#;
    LW_PRGNLCL_DEVICE_MAP_GROUP_SCP            : constant := 16#10#;
    LW_PRGNLCL_DEVICE_MAP_GROUP_FBIF           : constant := 16#11#;
    LW_PRGNLCL_DEVICE_MAP_GROUP_FALCON_ONLY    : constant := 16#12#;
    LW_PRGNLCL_DEVICE_MAP_GROUP_PRGN_CTL       : constant := 16#13#;
    LW_PRGNLCL_DEVICE_MAP_GROUP_SCRATCH_GROUP0 : constant := 16#14#;
    LW_PRGNLCL_DEVICE_MAP_GROUP_SCRATCH_GROUP1 : constant := 16#15#;
    LW_PRGNLCL_DEVICE_MAP_GROUP_SCRATCH_GROUP2 : constant := 16#16#;
    LW_PRGNLCL_DEVICE_MAP_GROUP_SCRATCH_GROUP3 : constant := 16#17#;
    LW_PRGNLCL_DEVICE_MAP_GROUP_PLM            : constant := 16#18#;
    LW_PRGNLCL_DEVICE_MAP_GROUP_HUB_DIO        : constant := 16#19#;
    LW_PRGNLCL_DEVICE_MAP_GROUP_RESET          : constant := 16#1a#;
    LW_PRGNLCL_DEVICE_MAP_GROUP_READ_ONLY      : constant := 16#1f#;

    LW_PRGNLCL_FALCON_ENGCTL_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_ENGCTL_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_ENGCTL_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_ENGCTL_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_ENGCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_ENGCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_ENGCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    type LW_PRGNLCL_FALCON_ENGCTL_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_ENGCTL_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_ENGCTL_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_ENGCTL_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_ENGCTL_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_ENGCTL_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_FALCON_ENGCTL_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_ENGCTL_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_FALCON_ENGCTL_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FALCON_ENGCTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_ENGCTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_ENGCTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_ENGCTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_ENGCTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_ENGCTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_ENGCTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_ENGCTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_ENGCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_ENGCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_ENGCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_ENGCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_ENGCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_ENGCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_ENGCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_ENGCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_FALCON_ENGCTL_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_FALCON_ENGCTL_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_FALCON_ENGCTL_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_FALCON_ENGCTL_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_FALCON_ENGCTL_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_ENGCTL_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_FALCON_IMEM_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_IMEM_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_IMEM_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_IMEM_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_IMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_IMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_IMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    type LW_PRGNLCL_FALCON_IMEM_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IMEM_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_IMEM_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IMEM_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_IMEM_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IMEM_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_FALCON_IMEM_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IMEM_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_FALCON_IMEM_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FALCON_IMEM_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_IMEM_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_IMEM_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_IMEM_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_IMEM_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_IMEM_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_IMEM_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_IMEM_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_IMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_IMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_IMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_IMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_IMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_IMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_IMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_IMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_FALCON_IMEM_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_FALCON_IMEM_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_FALCON_IMEM_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_FALCON_IMEM_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_FALCON_IMEM_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_IMEM_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_FALCON_DMEM_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_DMEM_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_DMEM_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_DMEM_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_DMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_DMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_DMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    type LW_PRGNLCL_FALCON_DMEM_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_DMEM_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_DMEM_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_DMEM_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_DMEM_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_DMEM_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_FALCON_DMEM_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_DMEM_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_FALCON_DMEM_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FALCON_DMEM_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_DMEM_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_DMEM_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_DMEM_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_DMEM_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_DMEM_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_DMEM_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_DMEM_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_DMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_DMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_DMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_DMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_DMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_DMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_DMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_DMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_FALCON_DMEM_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_FALCON_DMEM_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_FALCON_DMEM_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_FALCON_DMEM_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_FALCON_DMEM_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DMEM_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_FALCON_CPUCTL_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_CPUCTL_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_CPUCTL_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_CPUCTL_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_CPUCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_CPUCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_CPUCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    type LW_PRGNLCL_FALCON_CPUCTL_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_CPUCTL_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_CPUCTL_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_CPUCTL_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_CPUCTL_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_CPUCTL_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_FALCON_CPUCTL_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_CPUCTL_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_FALCON_CPUCTL_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FALCON_CPUCTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_CPUCTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_CPUCTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_CPUCTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_CPUCTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_CPUCTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_CPUCTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_CPUCTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_CPUCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_CPUCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_CPUCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_CPUCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_CPUCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_CPUCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_CPUCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_CPUCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_FALCON_CPUCTL_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_FALCON_CPUCTL_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_FALCON_CPUCTL_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_FALCON_CPUCTL_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_FALCON_CPUCTL_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_CPUCTL_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_FALCON_EXE_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_EXE_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_EXE_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_EXE_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_EXE_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_EXE_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_EXE_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    type LW_PRGNLCL_FALCON_EXE_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_EXE_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_EXE_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_EXE_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_EXE_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_EXE_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_FALCON_EXE_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_EXE_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_FALCON_EXE_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FALCON_EXE_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_EXE_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_EXE_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_EXE_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_EXE_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_EXE_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_EXE_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_EXE_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_EXE_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_EXE_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_EXE_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_EXE_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_EXE_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_EXE_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_EXE_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_EXE_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_FALCON_EXE_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_FALCON_EXE_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_FALCON_EXE_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_FALCON_EXE_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_FALCON_EXE_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_EXE_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_FALCON_IRQTMR_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_IRQTMR_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_IRQTMR_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_IRQTMR_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_IRQTMR_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_IRQTMR_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_IRQTMR_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    type LW_PRGNLCL_FALCON_IRQTMR_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQTMR_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_IRQTMR_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQTMR_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_IRQTMR_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQTMR_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_FALCON_IRQTMR_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQTMR_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_FALCON_IRQTMR_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FALCON_IRQTMR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_IRQTMR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_IRQTMR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_IRQTMR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_IRQTMR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_IRQTMR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_IRQTMR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_IRQTMR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_IRQTMR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_IRQTMR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_IRQTMR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_IRQTMR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_IRQTMR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_IRQTMR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_IRQTMR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_IRQTMR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_FALCON_IRQTMR_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_FALCON_IRQTMR_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_FALCON_IRQTMR_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_FALCON_IRQTMR_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_FALCON_IRQTMR_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_IRQTMR_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_FALCON_MTHDCTX_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_MTHDCTX_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_MTHDCTX_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_MTHDCTX_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_MTHDCTX_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_MTHDCTX_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_MTHDCTX_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    type LW_PRGNLCL_FALCON_MTHDCTX_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_MTHDCTX_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_MTHDCTX_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_MTHDCTX_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_MTHDCTX_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_MTHDCTX_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_FALCON_MTHDCTX_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_MTHDCTX_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_FALCON_MTHDCTX_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FALCON_MTHDCTX_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_MTHDCTX_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_MTHDCTX_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_MTHDCTX_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_MTHDCTX_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_MTHDCTX_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_MTHDCTX_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_MTHDCTX_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_MTHDCTX_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_MTHDCTX_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_MTHDCTX_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_MTHDCTX_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_MTHDCTX_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_MTHDCTX_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_MTHDCTX_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_MTHDCTX_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_FALCON_MTHDCTX_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_FALCON_MTHDCTX_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_FALCON_MTHDCTX_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_FALCON_MTHDCTX_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_FALCON_MTHDCTX_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_MTHDCTX_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_FALCON_HSCTL_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_HSCTL_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_HSCTL_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_HSCTL_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_HSCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_HSCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_HSCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    type LW_PRGNLCL_FALCON_HSCTL_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_HSCTL_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_HSCTL_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_HSCTL_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_HSCTL_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_HSCTL_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_FALCON_HSCTL_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_HSCTL_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_FALCON_HSCTL_PRIV_LEVEL_MASK_SOURCE_ENABLE_RESET_FUSE0         : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FALCON_HSCTL_PRIV_LEVEL_MASK_SOURCE_ENABLE_RESET_FUSE1         : constant NvU20 := 16#8_0000#;
    LW_PRGNLCL_FALCON_HSCTL_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FALCON_HSCTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_HSCTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_HSCTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_HSCTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_HSCTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_HSCTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_HSCTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_HSCTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_HSCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_HSCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_HSCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_HSCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_HSCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_HSCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_HSCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_HSCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_FALCON_HSCTL_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_FALCON_HSCTL_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_FALCON_HSCTL_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_FALCON_HSCTL_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_FALCON_HSCTL_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_HSCTL_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_FALCON_DIODT_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_DIODT_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_DIODT_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_DIODT_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_DIODT_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_DIODT_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_DIODT_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    type LW_PRGNLCL_FALCON_DIODT_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_DIODT_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_DIODT_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_DIODT_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_DIODT_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_DIODT_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_FALCON_DIODT_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_DIODT_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_FALCON_DIODT_PRIV_LEVEL_MASK_SOURCE_ENABLE_RESET_FUSE0         : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FALCON_DIODT_PRIV_LEVEL_MASK_SOURCE_ENABLE_RESET_FUSE1         : constant NvU20 := 16#8_0000#;
    LW_PRGNLCL_FALCON_DIODT_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FALCON_DIODT_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_DIODT_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_DIODT_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_DIODT_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_DIODT_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_DIODT_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_DIODT_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_DIODT_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_DIODT_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_DIODT_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_DIODT_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_DIODT_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_DIODT_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_DIODT_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_DIODT_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_DIODT_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_FALCON_DIODT_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_FALCON_DIODT_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_FALCON_DIODT_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_FALCON_DIODT_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_FALCON_DIODT_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DIODT_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_FALCON_DIODTA_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_DIODTA_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_DIODTA_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_DIODTA_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_DIODTA_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_DIODTA_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_DIODTA_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    type LW_PRGNLCL_FALCON_DIODTA_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_DIODTA_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_DIODTA_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_DIODTA_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_DIODTA_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_DIODTA_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_FALCON_DIODTA_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_DIODTA_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_FALCON_DIODTA_PRIV_LEVEL_MASK_SOURCE_ENABLE_RESET_FUSE0         : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FALCON_DIODTA_PRIV_LEVEL_MASK_SOURCE_ENABLE_RESET_FUSE1         : constant NvU20 := 16#8_0000#;
    LW_PRGNLCL_FALCON_DIODTA_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FALCON_DIODTA_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_DIODTA_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_DIODTA_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_DIODTA_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_DIODTA_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_DIODTA_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_DIODTA_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_DIODTA_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_DIODTA_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_DIODTA_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_DIODTA_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_DIODTA_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_DIODTA_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_DIODTA_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_DIODTA_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_DIODTA_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_FALCON_DIODTA_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_FALCON_DIODTA_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_FALCON_DIODTA_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_FALCON_DIODTA_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_FALCON_DIODTA_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DIODTA_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_FALCON_SCTL_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_SCTL_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_SCTL_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_SCTL_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_SCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_INIT                : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_SCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_SCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_SCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    type LW_PRGNLCL_FALCON_SCTL_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SCTL_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_SCTL_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SCTL_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_SCTL_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SCTL_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_FALCON_SCTL_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SCTL_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_FALCON_SCTL_PRIV_LEVEL_MASK_SOURCE_ENABLE_INIT                : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FALCON_SCTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_SCTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_SCTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_SCTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_SCTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_SCTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_SCTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_SCTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_SCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_SCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_SCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_SCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_SCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_SCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_SCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_SCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_SCTL_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant       := 16#f_ffff#;

    type LW_PRGNLCL_FALCON_SCTL_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_FALCON_SCTL_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_FALCON_SCTL_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_FALCON_SCTL_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_FALCON_SCTL_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_SCTL_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_FALCON_WDTMR_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_WDTMR_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_WDTMR_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_WDTMR_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_WDTMR_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_WDTMR_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_WDTMR_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    type LW_PRGNLCL_FALCON_WDTMR_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_WDTMR_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_WDTMR_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_WDTMR_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_WDTMR_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_WDTMR_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_FALCON_WDTMR_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_WDTMR_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_FALCON_WDTMR_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FALCON_WDTMR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_WDTMR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_WDTMR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_WDTMR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_WDTMR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_WDTMR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_WDTMR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_WDTMR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_WDTMR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_WDTMR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_WDTMR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_WDTMR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_WDTMR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_WDTMR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_WDTMR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_WDTMR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_FALCON_WDTMR_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_FALCON_WDTMR_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_FALCON_WDTMR_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_FALCON_WDTMR_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_FALCON_WDTMR_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_WDTMR_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_FALCON_PRIVSTATE_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_PRIVSTATE_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_PRIVSTATE_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_PRIVSTATE_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_PRIVSTATE_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_PRIVSTATE_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_PRIVSTATE_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    type LW_PRGNLCL_FALCON_PRIVSTATE_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_PRIVSTATE_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_PRIVSTATE_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_PRIVSTATE_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_PRIVSTATE_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_PRIVSTATE_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_FALCON_PRIVSTATE_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_PRIVSTATE_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_FALCON_PRIVSTATE_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FALCON_PRIVSTATE_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_PRIVSTATE_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_PRIVSTATE_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_PRIVSTATE_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_PRIVSTATE_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_PRIVSTATE_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_PRIVSTATE_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_PRIVSTATE_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_PRIVSTATE_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_PRIVSTATE_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_PRIVSTATE_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_PRIVSTATE_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_PRIVSTATE_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_PRIVSTATE_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_PRIVSTATE_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_PRIVSTATE_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_FALCON_PRIVSTATE_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_FALCON_PRIVSTATE_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_FALCON_PRIVSTATE_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_FALCON_PRIVSTATE_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_FALCON_PRIVSTATE_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_PRIVSTATE_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_FALCON_RESET_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_RESET_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_RESET_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_RESET_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_RESET_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_RESET_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_RESET_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    type LW_PRGNLCL_FALCON_RESET_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_RESET_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_RESET_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_RESET_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_RESET_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_RESET_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_FALCON_RESET_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_RESET_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_FALCON_RESET_PRIV_LEVEL_MASK_SOURCE_ENABLE_IFF_ONLY          : constant NvU20 := 16#40#;
    LW_PRGNLCL_FALCON_RESET_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE   : constant       := 16#1#;
    LW_PRGNLCL_FALCON_RESET_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE  : constant       := 16#0#;
    LW_PRGNLCL_FALCON_RESET_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE   : constant       := 16#1#;
    LW_PRGNLCL_FALCON_RESET_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE  : constant       := 16#0#;
    LW_PRGNLCL_FALCON_RESET_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE   : constant       := 16#1#;
    LW_PRGNLCL_FALCON_RESET_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE  : constant       := 16#0#;
    LW_PRGNLCL_FALCON_RESET_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE   : constant       := 16#1#;
    LW_PRGNLCL_FALCON_RESET_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE  : constant       := 16#0#;
    LW_PRGNLCL_FALCON_RESET_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE  : constant       := 16#1#;
    LW_PRGNLCL_FALCON_RESET_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE : constant       := 16#0#;
    LW_PRGNLCL_FALCON_RESET_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE  : constant       := 16#1#;
    LW_PRGNLCL_FALCON_RESET_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE : constant       := 16#0#;
    LW_PRGNLCL_FALCON_RESET_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE  : constant       := 16#1#;
    LW_PRGNLCL_FALCON_RESET_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE : constant       := 16#0#;
    LW_PRGNLCL_FALCON_RESET_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE  : constant       := 16#1#;
    LW_PRGNLCL_FALCON_RESET_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE : constant       := 16#0#;

    type LW_PRGNLCL_FALCON_RESET_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_FALCON_RESET_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_FALCON_RESET_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_FALCON_RESET_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_FALCON_RESET_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_RESET_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_FALCON_CYA_CTL_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_CYA_CTL_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_CYA_CTL_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_CYA_CTL_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_CYA_CTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_CYA_CTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_CYA_CTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    type LW_PRGNLCL_FALCON_CYA_CTL_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_CYA_CTL_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_CYA_CTL_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_CYA_CTL_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_CYA_CTL_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_CYA_CTL_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_FALCON_CYA_CTL_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_CYA_CTL_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_FALCON_CYA_CTL_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FALCON_CYA_CTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_CYA_CTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_CYA_CTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_CYA_CTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_CYA_CTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_CYA_CTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_CYA_CTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_CYA_CTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_CYA_CTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_CYA_CTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_CYA_CTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_CYA_CTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_CYA_CTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_CYA_CTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_CYA_CTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_CYA_CTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_FALCON_CYA_CTL_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_FALCON_CYA_CTL_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_FALCON_CYA_CTL_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_FALCON_CYA_CTL_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_FALCON_CYA_CTL_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_CYA_CTL_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_0_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_0_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_0_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLED       : constant NvU4 := 16#c#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_0_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_0_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_0_PRIV_LEVEL_MASK_WRITE_PROTECTION_DEFAULT_PRIV_LEVEL  : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_0_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_0_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLED      : constant NvU4 := 16#c#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_0_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_0_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    type LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_0_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_0_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_0_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_0_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_0_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_0_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_0_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_0_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_0_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_0_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_0_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_0_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_0_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_0_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_0_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_0_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_0_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_0_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_0_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_0_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_0_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_0_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_0_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_0_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_0_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_0_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_0_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_0_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_0_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_0_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_0_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_1_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_1_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_1_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLED       : constant NvU4 := 16#c#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_1_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_1_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_1_PRIV_LEVEL_MASK_WRITE_PROTECTION_DEFAULT_PRIV_LEVEL  : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_1_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_1_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLED      : constant NvU4 := 16#c#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_1_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_1_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    type LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_1_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_1_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_1_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_1_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_1_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_1_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_1_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_1_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_1_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_1_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_1_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_1_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_1_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_1_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_1_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_1_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_1_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_1_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_1_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_1_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_1_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_1_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_1_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_1_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_1_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_1_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_1_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_1_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_1_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_1_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_1_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_2_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_2_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_2_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLED       : constant NvU4 := 16#c#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_2_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_2_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_2_PRIV_LEVEL_MASK_WRITE_PROTECTION_DEFAULT_PRIV_LEVEL  : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_2_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_2_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLED      : constant NvU4 := 16#c#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_2_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_2_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    type LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_2_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_2_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_2_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_2_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_2_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_2_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_2_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_2_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_2_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_2_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_2_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_2_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_2_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_2_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_2_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_2_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_2_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_2_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_2_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_2_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_2_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_2_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_2_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_2_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_2_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_2_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_2_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_2_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_2_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_2_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_2_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_3_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_3_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_3_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLED       : constant NvU4 := 16#c#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_3_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_3_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_3_PRIV_LEVEL_MASK_WRITE_PROTECTION_DEFAULT_PRIV_LEVEL  : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_3_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_3_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLED      : constant NvU4 := 16#c#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_3_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_3_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    type LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_3_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_3_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_3_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_3_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_3_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_3_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_3_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_3_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_3_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_3_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_3_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_3_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_3_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_3_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_3_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_3_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_3_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_3_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_3_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_3_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_3_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_3_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_3_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_3_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_3_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_3_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_3_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_3_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_3_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_3_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_3_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_FALCON_INTR_CTRL_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL        : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_INTR_CTRL_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED        : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_INTR_CTRL_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED       : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_INTR_CTRL_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED       : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_INTR_CTRL_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED_FUSE0 : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_INTR_CTRL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE_FUSE1      : constant NvU4 := 16#c#;
    LW_PRGNLCL_FALCON_INTR_CTRL_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED      : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_INTR_CTRL_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED      : constant NvU4 := 16#8#;
    type LW_PRGNLCL_FALCON_INTR_CTRL_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_INTR_CTRL_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_INTR_CTRL_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_INTR_CTRL_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_INTR_CTRL_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_INTR_CTRL_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_FALCON_INTR_CTRL_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_INTR_CTRL_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_FALCON_INTR_CTRL_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FALCON_INTR_CTRL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_INTR_CTRL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_INTR_CTRL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_INTR_CTRL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_INTR_CTRL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_INTR_CTRL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_INTR_CTRL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_INTR_CTRL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_INTR_CTRL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_INTR_CTRL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_INTR_CTRL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_INTR_CTRL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_INTR_CTRL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_INTR_CTRL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_INTR_CTRL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_INTR_CTRL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_FALCON_INTR_CTRL_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_FALCON_INTR_CTRL_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_FALCON_INTR_CTRL_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_FALCON_INTR_CTRL_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_FALCON_INTR_CTRL_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_INTR_CTRL_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_FALCON_INTR_RETRIGGER_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_INTR_RETRIGGER_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_INTR_RETRIGGER_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_INTR_RETRIGGER_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_INTR_RETRIGGER_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_INTR_RETRIGGER_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_INTR_RETRIGGER_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    type LW_PRGNLCL_FALCON_INTR_RETRIGGER_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_INTR_RETRIGGER_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_INTR_RETRIGGER_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_INTR_RETRIGGER_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_INTR_RETRIGGER_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_INTR_RETRIGGER_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_FALCON_INTR_RETRIGGER_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_INTR_RETRIGGER_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_FALCON_INTR_RETRIGGER_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FALCON_INTR_RETRIGGER_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_INTR_RETRIGGER_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_INTR_RETRIGGER_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_INTR_RETRIGGER_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_INTR_RETRIGGER_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_INTR_RETRIGGER_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_INTR_RETRIGGER_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_INTR_RETRIGGER_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_INTR_RETRIGGER_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_INTR_RETRIGGER_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_INTR_RETRIGGER_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_INTR_RETRIGGER_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_INTR_RETRIGGER_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_INTR_RETRIGGER_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_INTR_RETRIGGER_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_INTR_RETRIGGER_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_FALCON_INTR_RETRIGGER_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_FALCON_INTR_RETRIGGER_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_FALCON_INTR_RETRIGGER_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_FALCON_INTR_RETRIGGER_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_FALCON_INTR_RETRIGGER_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_INTR_RETRIGGER_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_FALCON_PMB_IMEM_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_PMB_IMEM_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_PMB_IMEM_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_PMB_IMEM_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_PMB_IMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_PMB_IMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_PMB_IMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    type LW_PRGNLCL_FALCON_PMB_IMEM_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_PMB_IMEM_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_PMB_IMEM_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_PMB_IMEM_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_PMB_IMEM_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_PMB_IMEM_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_FALCON_PMB_IMEM_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_PMB_IMEM_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_FALCON_PMB_IMEM_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FALCON_PMB_IMEM_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_PMB_IMEM_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_PMB_IMEM_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_PMB_IMEM_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_PMB_IMEM_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_PMB_IMEM_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_PMB_IMEM_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_PMB_IMEM_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_PMB_IMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_PMB_IMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_PMB_IMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_PMB_IMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_PMB_IMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_PMB_IMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_PMB_IMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_PMB_IMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_FALCON_PMB_IMEM_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_FALCON_PMB_IMEM_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_FALCON_PMB_IMEM_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_FALCON_PMB_IMEM_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_FALCON_PMB_IMEM_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_PMB_IMEM_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_FALCON_PMB_DMEM_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_PMB_DMEM_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_PMB_DMEM_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_PMB_DMEM_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_PMB_DMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_PMB_DMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_PMB_DMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    type LW_PRGNLCL_FALCON_PMB_DMEM_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_PMB_DMEM_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_PMB_DMEM_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_PMB_DMEM_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_PMB_DMEM_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_PMB_DMEM_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_FALCON_PMB_DMEM_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_PMB_DMEM_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_FALCON_PMB_DMEM_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FALCON_PMB_DMEM_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_PMB_DMEM_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_PMB_DMEM_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_PMB_DMEM_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_PMB_DMEM_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_PMB_DMEM_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_PMB_DMEM_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_PMB_DMEM_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_PMB_DMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_PMB_DMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_PMB_DMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_PMB_DMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_PMB_DMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_PMB_DMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_PMB_DMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_PMB_DMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_FALCON_PMB_DMEM_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_FALCON_PMB_DMEM_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_FALCON_PMB_DMEM_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_FALCON_PMB_DMEM_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_FALCON_PMB_DMEM_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_PMB_DMEM_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_FALCON_DMA_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_DMA_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_DMA_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_DMA_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_DMA_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_DMA_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_DMA_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    type LW_PRGNLCL_FALCON_DMA_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_DMA_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_DMA_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_DMA_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_DMA_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_DMA_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_FALCON_DMA_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_DMA_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_FALCON_DMA_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FALCON_DMA_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_DMA_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_DMA_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_DMA_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_DMA_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_DMA_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_DMA_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_DMA_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_DMA_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_DMA_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_DMA_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_DMA_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_DMA_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_DMA_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_DMA_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_DMA_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_FALCON_DMA_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_FALCON_DMA_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_FALCON_DMA_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_FALCON_DMA_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_FALCON_DMA_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DMA_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_FALCON_BOOTVEC_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_BOOTVEC_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_BOOTVEC_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_BOOTVEC_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_BOOTVEC_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_BOOTVEC_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_BOOTVEC_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    type LW_PRGNLCL_FALCON_BOOTVEC_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_BOOTVEC_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_BOOTVEC_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_BOOTVEC_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_BOOTVEC_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_BOOTVEC_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_FALCON_BOOTVEC_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_BOOTVEC_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_FALCON_BOOTVEC_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FALCON_BOOTVEC_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_BOOTVEC_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_BOOTVEC_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_BOOTVEC_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_BOOTVEC_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_BOOTVEC_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_BOOTVEC_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_BOOTVEC_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_BOOTVEC_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_BOOTVEC_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_BOOTVEC_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_BOOTVEC_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_BOOTVEC_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_BOOTVEC_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_BOOTVEC_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_BOOTVEC_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_FALCON_BOOTVEC_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_FALCON_BOOTVEC_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_FALCON_BOOTVEC_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_FALCON_BOOTVEC_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_FALCON_BOOTVEC_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_BOOTVEC_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_FALCON_AMAP_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_AMAP_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_AMAP_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_AMAP_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_AMAP_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_AMAP_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_AMAP_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    type LW_PRGNLCL_FALCON_AMAP_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_AMAP_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_AMAP_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_AMAP_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_AMAP_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_AMAP_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_FALCON_AMAP_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_AMAP_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_FALCON_AMAP_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FALCON_AMAP_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_AMAP_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_AMAP_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_AMAP_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_AMAP_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_AMAP_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_AMAP_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_AMAP_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_AMAP_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_AMAP_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_AMAP_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_AMAP_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_AMAP_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_AMAP_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_AMAP_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_AMAP_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_FALCON_AMAP_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_FALCON_AMAP_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_FALCON_AMAP_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_FALCON_AMAP_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_FALCON_AMAP_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_AMAP_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_FALCON_TRACEBUF_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_TRACEBUF_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_TRACEBUF_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_TRACEBUF_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_TRACEBUF_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_TRACEBUF_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_TRACEBUF_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    type LW_PRGNLCL_FALCON_TRACEBUF_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_TRACEBUF_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_TRACEBUF_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_TRACEBUF_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_TRACEBUF_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_TRACEBUF_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_FALCON_TRACEBUF_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_TRACEBUF_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_FALCON_TRACEBUF_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FALCON_TRACEBUF_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_TRACEBUF_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_TRACEBUF_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_TRACEBUF_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_TRACEBUF_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_TRACEBUF_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_TRACEBUF_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_TRACEBUF_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_TRACEBUF_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_TRACEBUF_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_TRACEBUF_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_TRACEBUF_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_TRACEBUF_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_TRACEBUF_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_TRACEBUF_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_TRACEBUF_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_FALCON_TRACEBUF_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_FALCON_TRACEBUF_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_FALCON_TRACEBUF_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_FALCON_TRACEBUF_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_FALCON_TRACEBUF_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_TRACEBUF_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_FALCON_TMR_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_TMR_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_TMR_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_TMR_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_TMR_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_TMR_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_TMR_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    type LW_PRGNLCL_FALCON_TMR_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_TMR_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_TMR_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_TMR_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_TMR_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_TMR_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_FALCON_TMR_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_TMR_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_FALCON_TMR_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FALCON_TMR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_TMR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_TMR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_TMR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_TMR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_TMR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_TMR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_TMR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_TMR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_TMR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_TMR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_TMR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_TMR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_TMR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_TMR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_TMR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_FALCON_TMR_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_FALCON_TMR_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_FALCON_TMR_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_FALCON_TMR_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_FALCON_TMR_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_TMR_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_FALCON_IRQSCMASK_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_IRQSCMASK_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_IRQSCMASK_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_IRQSCMASK_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_IRQSCMASK_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_IRQSCMASK_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_IRQSCMASK_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    type LW_PRGNLCL_FALCON_IRQSCMASK_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQSCMASK_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_IRQSCMASK_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQSCMASK_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_IRQSCMASK_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQSCMASK_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_FALCON_IRQSCMASK_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQSCMASK_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_FALCON_IRQSCMASK_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FALCON_IRQSCMASK_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_IRQSCMASK_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_IRQSCMASK_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_IRQSCMASK_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_IRQSCMASK_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_IRQSCMASK_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_IRQSCMASK_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_IRQSCMASK_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_IRQSCMASK_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_IRQSCMASK_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_IRQSCMASK_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_IRQSCMASK_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_IRQSCMASK_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_IRQSCMASK_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_IRQSCMASK_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_IRQSCMASK_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_FALCON_IRQSCMASK_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_FALCON_IRQSCMASK_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_FALCON_IRQSCMASK_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_FALCON_IRQSCMASK_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_FALCON_IRQSCMASK_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_IRQSCMASK_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_FALCON_DBGCTL_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_DBGCTL_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_DBGCTL_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_DBGCTL_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_DBGCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_RESET_FUSE0         : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_DBGCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_RESET_FUSE1         : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_DBGCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_DBGCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_DBGCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    type LW_PRGNLCL_FALCON_DBGCTL_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_DBGCTL_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_DBGCTL_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_DBGCTL_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_DBGCTL_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_DBGCTL_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_FALCON_DBGCTL_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_DBGCTL_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_FALCON_DBGCTL_PRIV_LEVEL_MASK_SOURCE_ENABLE_RESET_FUSE0         : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FALCON_DBGCTL_PRIV_LEVEL_MASK_SOURCE_ENABLE_RESET_FUSE1         : constant NvU20 := 16#8_0000#;
    LW_PRGNLCL_FALCON_DBGCTL_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FALCON_DBGCTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_DBGCTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_DBGCTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_DBGCTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_DBGCTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_DBGCTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_DBGCTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_DBGCTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_DBGCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_DBGCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_DBGCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_DBGCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_DBGCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_DBGCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_DBGCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_DBGCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_FALCON_DBGCTL_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_FALCON_DBGCTL_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_FALCON_DBGCTL_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_FALCON_DBGCTL_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_FALCON_DBGCTL_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DBGCTL_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_FALCON_SAFETY_CTRL_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_SAFETY_CTRL_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_SAFETY_CTRL_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_SAFETY_CTRL_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_SAFETY_CTRL_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_SAFETY_CTRL_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_SAFETY_CTRL_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    type LW_PRGNLCL_FALCON_SAFETY_CTRL_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SAFETY_CTRL_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_SAFETY_CTRL_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SAFETY_CTRL_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_SAFETY_CTRL_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SAFETY_CTRL_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_FALCON_SAFETY_CTRL_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SAFETY_CTRL_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_FALCON_SAFETY_CTRL_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FALCON_SAFETY_CTRL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_SAFETY_CTRL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_SAFETY_CTRL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_SAFETY_CTRL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_SAFETY_CTRL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_SAFETY_CTRL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_SAFETY_CTRL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_SAFETY_CTRL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_SAFETY_CTRL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_SAFETY_CTRL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_SAFETY_CTRL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_SAFETY_CTRL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_SAFETY_CTRL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_SAFETY_CTRL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_SAFETY_CTRL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_SAFETY_CTRL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_FALCON_SAFETY_CTRL_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_FALCON_SAFETY_CTRL_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_FALCON_SAFETY_CTRL_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_FALCON_SAFETY_CTRL_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_FALCON_SAFETY_CTRL_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_SAFETY_CTRL_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_FALCON_NO_ACCESS_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_NO_ACCESS_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_NO_ACCESS_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_NO_ACCESS_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_NO_ACCESS_PRIV_LEVEL_MASK_WRITE_PROTECTION_DEFAULT_PRIV_LEVEL  : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_NO_ACCESS_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_NO_ACCESS_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_NO_ACCESS_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    type LW_PRGNLCL_FALCON_NO_ACCESS_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_NO_ACCESS_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_NO_ACCESS_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_NO_ACCESS_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_NO_ACCESS_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_NO_ACCESS_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_FALCON_NO_ACCESS_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_NO_ACCESS_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_FALCON_NO_ACCESS_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_DISABLED : constant NvU20 := 16#0#;
    LW_PRGNLCL_FALCON_NO_ACCESS_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED  : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FALCON_NO_ACCESS_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE      : constant       := 16#1#;
    LW_PRGNLCL_FALCON_NO_ACCESS_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE     : constant       := 16#0#;
    LW_PRGNLCL_FALCON_NO_ACCESS_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE      : constant       := 16#1#;
    LW_PRGNLCL_FALCON_NO_ACCESS_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE     : constant       := 16#0#;
    LW_PRGNLCL_FALCON_NO_ACCESS_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE      : constant       := 16#1#;
    LW_PRGNLCL_FALCON_NO_ACCESS_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE     : constant       := 16#0#;
    LW_PRGNLCL_FALCON_NO_ACCESS_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE      : constant       := 16#1#;
    LW_PRGNLCL_FALCON_NO_ACCESS_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE     : constant       := 16#0#;
    LW_PRGNLCL_FALCON_NO_ACCESS_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_NO_ACCESS_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_NO_ACCESS_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_NO_ACCESS_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_NO_ACCESS_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_NO_ACCESS_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_NO_ACCESS_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_NO_ACCESS_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;

    type LW_PRGNLCL_FALCON_NO_ACCESS_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_FALCON_NO_ACCESS_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_FALCON_NO_ACCESS_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_FALCON_NO_ACCESS_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_FALCON_NO_ACCESS_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_NO_ACCESS_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_FALCON_PTIMER_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_PTIMER_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_PTIMER_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_PTIMER_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_PTIMER_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_PTIMER_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_PTIMER_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    type LW_PRGNLCL_FALCON_PTIMER_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_PTIMER_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_PTIMER_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_PTIMER_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_PTIMER_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_PTIMER_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_FALCON_PTIMER_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_PTIMER_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_FALCON_PTIMER_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FALCON_PTIMER_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_PTIMER_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_PTIMER_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_PTIMER_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_PTIMER_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_PTIMER_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_PTIMER_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_PTIMER_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_PTIMER_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_PTIMER_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_PTIMER_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_PTIMER_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_PTIMER_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_PTIMER_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_PTIMER_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_PTIMER_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_FALCON_PTIMER_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_FALCON_PTIMER_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_FALCON_PTIMER_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_FALCON_PTIMER_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_FALCON_PTIMER_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_PTIMER_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_FALCON_IDLESTATE_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_IDLESTATE_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_IDLESTATE_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_IDLESTATE_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_IDLESTATE_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_IDLESTATE_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_IDLESTATE_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    type LW_PRGNLCL_FALCON_IDLESTATE_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IDLESTATE_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_IDLESTATE_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IDLESTATE_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_IDLESTATE_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IDLESTATE_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_FALCON_IDLESTATE_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IDLESTATE_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_FALCON_IDLESTATE_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FALCON_IDLESTATE_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_IDLESTATE_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_IDLESTATE_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_IDLESTATE_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_IDLESTATE_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_IDLESTATE_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_IDLESTATE_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_IDLESTATE_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_IDLESTATE_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_IDLESTATE_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_IDLESTATE_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_IDLESTATE_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_IDLESTATE_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_IDLESTATE_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_IDLESTATE_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_IDLESTATE_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_FALCON_IDLESTATE_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_FALCON_IDLESTATE_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_FALCON_IDLESTATE_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_FALCON_IDLESTATE_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_FALCON_IDLESTATE_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_IDLESTATE_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_FALCON_ENG_STATE_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_ENG_STATE_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_ENG_STATE_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_ENG_STATE_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_ENG_STATE_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_ENG_STATE_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_ENG_STATE_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    type LW_PRGNLCL_FALCON_ENG_STATE_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_ENG_STATE_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_ENG_STATE_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_ENG_STATE_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_ENG_STATE_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_ENG_STATE_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_FALCON_ENG_STATE_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_ENG_STATE_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_FALCON_ENG_STATE_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FALCON_ENG_STATE_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_ENG_STATE_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_ENG_STATE_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_ENG_STATE_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_ENG_STATE_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_ENG_STATE_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_ENG_STATE_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_ENG_STATE_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_ENG_STATE_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_ENG_STATE_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_ENG_STATE_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_ENG_STATE_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_ENG_STATE_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_ENG_STATE_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_ENG_STATE_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_ENG_STATE_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_FALCON_ENG_STATE_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_FALCON_ENG_STATE_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_FALCON_ENG_STATE_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_FALCON_ENG_STATE_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_FALCON_ENG_STATE_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_ENG_STATE_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_FALCON_CG2_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_CG2_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_CG2_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_CG2_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_CG2_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_CG2_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_CG2_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    type LW_PRGNLCL_FALCON_CG2_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_CG2_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_CG2_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_CG2_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_CG2_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_CG2_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_FALCON_CG2_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_CG2_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_FALCON_CG2_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FALCON_CG2_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_CG2_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_CG2_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_CG2_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_CG2_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_CG2_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_CG2_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_CG2_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_CG2_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_CG2_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_CG2_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_CG2_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_CG2_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_CG2_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_CG2_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_CG2_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_FALCON_CG2_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_FALCON_CG2_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_FALCON_CG2_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_FALCON_CG2_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_FALCON_CG2_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_CG2_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_FALCON_PM_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_PM_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_PM_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_PM_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_PM_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_PM_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_PM_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    type LW_PRGNLCL_FALCON_PM_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_PM_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_PM_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_PM_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_PM_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_PM_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_FALCON_PM_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_PM_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_FALCON_PM_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FALCON_PM_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_PM_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_PM_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_PM_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_PM_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_PM_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_PM_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_PM_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_PM_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_PM_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_PM_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_PM_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_PM_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_PM_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_PM_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_PM_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_FALCON_PM_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_FALCON_PM_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_FALCON_PM_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_FALCON_PM_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_FALCON_PM_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_PM_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_FALCON_SP_MIN_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_SP_MIN_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_SP_MIN_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_SP_MIN_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_SP_MIN_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_SP_MIN_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_SP_MIN_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    type LW_PRGNLCL_FALCON_SP_MIN_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SP_MIN_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_SP_MIN_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SP_MIN_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_SP_MIN_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SP_MIN_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_FALCON_SP_MIN_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SP_MIN_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_FALCON_SP_MIN_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FALCON_SP_MIN_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_SP_MIN_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_SP_MIN_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_SP_MIN_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_SP_MIN_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_SP_MIN_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_SP_MIN_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_SP_MIN_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_SP_MIN_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_SP_MIN_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_SP_MIN_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_SP_MIN_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_SP_MIN_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_SP_MIN_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_SP_MIN_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_SP_MIN_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_FALCON_SP_MIN_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_FALCON_SP_MIN_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_FALCON_SP_MIN_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_FALCON_SP_MIN_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_FALCON_SP_MIN_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_SP_MIN_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_FALCON_EXCI_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_EXCI_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_EXCI_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_EXCI_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_EXCI_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_EXCI_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_EXCI_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    type LW_PRGNLCL_FALCON_EXCI_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_EXCI_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_EXCI_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_EXCI_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_EXCI_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_EXCI_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_FALCON_EXCI_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_EXCI_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_FALCON_EXCI_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FALCON_EXCI_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_EXCI_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_EXCI_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_EXCI_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_EXCI_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_EXCI_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_EXCI_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_EXCI_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_EXCI_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_EXCI_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_EXCI_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_EXCI_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_EXCI_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_EXCI_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_EXCI_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_EXCI_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_FALCON_EXCI_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_FALCON_EXCI_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_FALCON_EXCI_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_FALCON_EXCI_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_FALCON_EXCI_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_EXCI_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_FALCON_SVEC_SPR_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_SVEC_SPR_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_SVEC_SPR_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_SVEC_SPR_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_SVEC_SPR_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_SVEC_SPR_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_SVEC_SPR_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    type LW_PRGNLCL_FALCON_SVEC_SPR_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SVEC_SPR_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_SVEC_SPR_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SVEC_SPR_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_SVEC_SPR_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SVEC_SPR_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_FALCON_SVEC_SPR_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SVEC_SPR_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_FALCON_SVEC_SPR_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FALCON_SVEC_SPR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_SVEC_SPR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_SVEC_SPR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_SVEC_SPR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_SVEC_SPR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_SVEC_SPR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_SVEC_SPR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_SVEC_SPR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_SVEC_SPR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_SVEC_SPR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_SVEC_SPR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_SVEC_SPR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_SVEC_SPR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_SVEC_SPR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_SVEC_SPR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_SVEC_SPR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_FALCON_SVEC_SPR_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_FALCON_SVEC_SPR_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_FALCON_SVEC_SPR_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_FALCON_SVEC_SPR_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_FALCON_SVEC_SPR_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_SVEC_SPR_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_FALCON_BRKPT_PRIV_LEVEL_MASK_READ_PROTECTION_RESET_FUSE0          : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_BRKPT_PRIV_LEVEL_MASK_READ_PROTECTION_RESET_FUSE1          : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_BRKPT_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_BRKPT_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_BRKPT_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_BRKPT_PRIV_LEVEL_MASK_WRITE_PROTECTION_RESET_FUSE0         : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_BRKPT_PRIV_LEVEL_MASK_WRITE_PROTECTION_RESET_FUSE1         : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_BRKPT_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_BRKPT_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_BRKPT_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    type LW_PRGNLCL_FALCON_BRKPT_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_BRKPT_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_BRKPT_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_BRKPT_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_BRKPT_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_BRKPT_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_FALCON_BRKPT_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_BRKPT_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_FALCON_BRKPT_PRIV_LEVEL_MASK_SOURCE_ENABLE_RESET_FUSE0         : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FALCON_BRKPT_PRIV_LEVEL_MASK_SOURCE_ENABLE_RESET_FUSE1         : constant NvU20 := 16#8_0000#;
    LW_PRGNLCL_FALCON_BRKPT_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FALCON_BRKPT_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_BRKPT_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_BRKPT_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_BRKPT_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_BRKPT_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_BRKPT_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_BRKPT_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_BRKPT_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_BRKPT_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_BRKPT_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_BRKPT_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_BRKPT_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_BRKPT_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_BRKPT_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_BRKPT_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_BRKPT_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_FALCON_BRKPT_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_FALCON_BRKPT_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_FALCON_BRKPT_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_FALCON_BRKPT_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_FALCON_BRKPT_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_BRKPT_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_FALCON_ICD_PRIV_LEVEL_MASK_READ_PROTECTION_RESET_FUSE0          : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_ICD_PRIV_LEVEL_MASK_READ_PROTECTION_RESET_FUSE1          : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_ICD_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_ICD_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_ICD_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_ICD_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_ICD_PRIV_LEVEL_MASK_WRITE_PROTECTION_RESET_FUSE0         : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_ICD_PRIV_LEVEL_MASK_WRITE_PROTECTION_RESET_FUSE1         : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_ICD_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_ICD_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_ICD_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    type LW_PRGNLCL_FALCON_ICD_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_ICD_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_ICD_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_ICD_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_ICD_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_ICD_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_FALCON_ICD_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_ICD_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_FALCON_ICD_PRIV_LEVEL_MASK_SOURCE_ENABLE_RESET_FUSE0         : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FALCON_ICD_PRIV_LEVEL_MASK_SOURCE_ENABLE_RESET_FUSE1         : constant NvU20 := 16#8_0000#;
    LW_PRGNLCL_FALCON_ICD_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FALCON_ICD_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_ICD_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_ICD_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_ICD_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_ICD_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_ICD_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_ICD_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_ICD_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_ICD_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_ICD_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_ICD_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_ICD_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_ICD_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_ICD_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_ICD_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_ICD_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_FALCON_ICD_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_FALCON_ICD_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_FALCON_ICD_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_FALCON_ICD_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_FALCON_ICD_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_ICD_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_FALCON_RSTAT0_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_RSTAT0_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_RSTAT0_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_RSTAT0_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_RSTAT0_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_RSTAT0_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_RSTAT0_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    type LW_PRGNLCL_FALCON_RSTAT0_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_RSTAT0_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_RSTAT0_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_RSTAT0_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_RSTAT0_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_RSTAT0_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_FALCON_RSTAT0_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_RSTAT0_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_FALCON_RSTAT0_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FALCON_RSTAT0_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_RSTAT0_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_RSTAT0_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_RSTAT0_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_RSTAT0_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_RSTAT0_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_RSTAT0_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_RSTAT0_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_RSTAT0_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_RSTAT0_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_RSTAT0_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_RSTAT0_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_RSTAT0_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_RSTAT0_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_RSTAT0_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_RSTAT0_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_FALCON_RSTAT0_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_FALCON_RSTAT0_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_FALCON_RSTAT0_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_FALCON_RSTAT0_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_FALCON_RSTAT0_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_RSTAT0_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_FALCON_EXTERR_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_EXTERR_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_EXTERR_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_EXTERR_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_EXTERR_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_EXTERR_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_EXTERR_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    type LW_PRGNLCL_FALCON_EXTERR_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_EXTERR_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_EXTERR_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_EXTERR_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_EXTERR_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_EXTERR_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_FALCON_EXTERR_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_EXTERR_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_FALCON_EXTERR_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FALCON_EXTERR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_EXTERR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_EXTERR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_EXTERR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_EXTERR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_EXTERR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_EXTERR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_EXTERR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_EXTERR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_EXTERR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_EXTERR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_EXTERR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_EXTERR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_EXTERR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_EXTERR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_EXTERR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_FALCON_EXTERR_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_FALCON_EXTERR_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_FALCON_EXTERR_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_FALCON_EXTERR_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_FALCON_EXTERR_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_EXTERR_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_FALCON_CSBERR_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_CSBERR_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_CSBERR_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_CSBERR_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_CSBERR_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_CSBERR_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_CSBERR_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    type LW_PRGNLCL_FALCON_CSBERR_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_CSBERR_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_CSBERR_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_CSBERR_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_CSBERR_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_CSBERR_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_FALCON_CSBERR_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_CSBERR_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_FALCON_CSBERR_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FALCON_CSBERR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_CSBERR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_CSBERR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_CSBERR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_CSBERR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_CSBERR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_CSBERR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_CSBERR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_CSBERR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_CSBERR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_CSBERR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_CSBERR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_CSBERR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_CSBERR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_CSBERR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_CSBERR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_FALCON_CSBERR_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_FALCON_CSBERR_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_FALCON_CSBERR_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_FALCON_CSBERR_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_FALCON_CSBERR_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_CSBERR_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_FALCON_IRQSSET_GPTMR_SET         : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQSSET_WDTMR_SET         : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQSSET_MTHD_SET          : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQSSET_CTXSW_SET         : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQSSET_HALT_SET          : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQSSET_EXTERR_SET        : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQSSET_SWGEN0_SET        : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQSSET_SWGEN1_SET        : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQSSET_DMA_SET           : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQSSET_SHA_SET           : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQSSET_MEMERR_SET        : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQSSET_CTXSW_ERROR_SET   : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQSSET_GDMA_SET          : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQSSET_ICD_SET           : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQSSET_IOPMP_SET         : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQSSET_CORE_MISMATCH_SET : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQSSET_SE_SAP_SET        : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQSSET_SE_PKA_SET        : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQSSET_SE_RNG_SET        : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQSSET_SE_KEYMOVER_SET   : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQSSET_EXT_EXTIRQ1_SET   : constant      := 16#1#;
    LW_PRGNLCL_FALCON_IRQSSET_EXT_EXTIRQ2_SET   : constant      := 16#1#;
    LW_PRGNLCL_FALCON_IRQSSET_EXT_EXTIRQ3_SET   : constant      := 16#1#;
    LW_PRGNLCL_FALCON_IRQSSET_EXT_EXTIRQ4_SET   : constant      := 16#1#;
    LW_PRGNLCL_FALCON_IRQSSET_EXT_EXTIRQ5_SET   : constant      := 16#1#;
    LW_PRGNLCL_FALCON_IRQSSET_EXT_EXTIRQ6_SET   : constant      := 16#1#;
    LW_PRGNLCL_FALCON_IRQSSET_EXT_EXTIRQ7_SET   : constant      := 16#1#;
    LW_PRGNLCL_FALCON_IRQSSET_EXT_EXTIRQ8_SET   : constant      := 16#1#;

    type LW_PRGNLCL_FALCON_IRQSSET_Register is record
        Gptmr         : NvU1;
        Wdtmr         : NvU1;
        Mthd          : NvU1;
        Ctxsw         : NvU1;
        Halt          : NvU1;
        Exterr        : NvU1;
        Swgen0        : NvU1;
        Swgen1        : NvU1;
        Ext           : NvU8;
        Dma           : NvU1;
        Sha           : NvU1;
        Memerr        : NvU1;
        Ctxsw_Error   : NvU1;
        Gdma          : NvU1;
        Icd           : NvU1;
        Iopmp         : NvU1;
        Core_Mismatch : NvU1;
        Se_Sap        : NvU1;
        Se_Pka        : NvU1;
        Se_Rng        : NvU1;
        Se_Keymover   : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_IRQSSET_Register use record
        Gptmr         at 0 range  0 ..  0;
        Wdtmr         at 0 range  1 ..  1;
        Mthd          at 0 range  2 ..  2;
        Ctxsw         at 0 range  3 ..  3;
        Halt          at 0 range  4 ..  4;
        Exterr        at 0 range  5 ..  5;
        Swgen0        at 0 range  6 ..  6;
        Swgen1        at 0 range  7 ..  7;
        Ext           at 0 range  8 .. 15;
        Dma           at 0 range 16 .. 16;
        Sha           at 0 range 17 .. 17;
        Memerr        at 0 range 18 .. 18;
        Ctxsw_Error   at 0 range 19 .. 19;
        Gdma          at 0 range 20 .. 20;
        Icd           at 0 range 22 .. 22;
        Iopmp         at 0 range 23 .. 23;
        Core_Mismatch at 0 range 24 .. 24;
        Se_Sap        at 0 range 25 .. 25;
        Se_Pka        at 0 range 26 .. 26;
        Se_Rng        at 0 range 27 .. 27;
        Se_Keymover   at 0 range 28 .. 28;
    end record;

    LW_PRGNLCL_FALCON_IRQSCLR_GPTMR_SET         : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQSCLR_WDTMR_SET         : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQSCLR_MTHD_SET          : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQSCLR_CTXSW_SET         : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQSCLR_HALT_SET          : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQSCLR_EXTERR_SET        : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQSCLR_SWGEN0_SET        : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQSCLR_SWGEN1_SET        : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQSCLR_EXT_EXTIRQ1_SET   : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQSCLR_EXT_EXTIRQ2_SET   : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQSCLR_EXT_EXTIRQ3_SET   : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQSCLR_EXT_EXTIRQ4_SET   : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQSCLR_EXT_EXTIRQ5_SET   : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQSCLR_EXT_EXTIRQ6_SET   : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQSCLR_EXT_EXTIRQ7_SET   : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQSCLR_EXT_EXTIRQ8_SET   : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQSCLR_DMA_SET           : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQSCLR_SHA_SET           : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQSCLR_MEMERR_SET        : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQSCLR_CTXSW_ERROR_SET   : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQSCLR_GDMA_SET          : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQSCLR_ICD_SET           : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQSCLR_IOPMP_SET         : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQSCLR_CORE_MISMATCH_SET : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQSCLR_SE_SAP_SET        : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQSCLR_SE_PKA_SET        : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQSCLR_SE_RNG_SET        : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQSCLR_SE_KEYMOVER_SET   : constant NvU1 := 16#1#;

    type LW_PRGNLCL_FALCON_IRQSCLR_Register is record
        Gptmr         : NvU1;
        Wdtmr         : NvU1;
        Mthd          : NvU1;
        Ctxsw         : NvU1;
        Halt          : NvU1;
        Exterr        : NvU1;
        Swgen0        : NvU1;
        Swgen1        : NvU1;
        Ext_Extirq1   : NvU1;
        Ext_Extirq2   : NvU1;
        Ext_Extirq3   : NvU1;
        Ext_Extirq4   : NvU1;
        Ext_Extirq5   : NvU1;
        Ext_Extirq6   : NvU1;
        Ext_Extirq7   : NvU1;
        Ext_Extirq8   : NvU1;
        Dma           : NvU1;
        Sha           : NvU1;
        Memerr        : NvU1;
        Ctxsw_Error   : NvU1;
        Gdma          : NvU1;
        Icd           : NvU1;
        Iopmp         : NvU1;
        Core_Mismatch : NvU1;
        Se_Sap        : NvU1;
        Se_Pka        : NvU1;
        Se_Rng        : NvU1;
        Se_Keymover   : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_IRQSCLR_Register use record
        Gptmr         at 0 range  0 ..  0;
        Wdtmr         at 0 range  1 ..  1;
        Mthd          at 0 range  2 ..  2;
        Ctxsw         at 0 range  3 ..  3;
        Halt          at 0 range  4 ..  4;
        Exterr        at 0 range  5 ..  5;
        Swgen0        at 0 range  6 ..  6;
        Swgen1        at 0 range  7 ..  7;
        Ext_Extirq1   at 0 range  8 ..  8;
        Ext_Extirq2   at 0 range  9 ..  9;
        Ext_Extirq3   at 0 range 10 .. 10;
        Ext_Extirq4   at 0 range 11 .. 11;
        Ext_Extirq5   at 0 range 12 .. 12;
        Ext_Extirq6   at 0 range 13 .. 13;
        Ext_Extirq7   at 0 range 14 .. 14;
        Ext_Extirq8   at 0 range 15 .. 15;
        Dma           at 0 range 16 .. 16;
        Sha           at 0 range 17 .. 17;
        Memerr        at 0 range 18 .. 18;
        Ctxsw_Error   at 0 range 19 .. 19;
        Gdma          at 0 range 20 .. 20;
        Icd           at 0 range 22 .. 22;
        Iopmp         at 0 range 23 .. 23;
        Core_Mismatch at 0 range 24 .. 24;
        Se_Sap        at 0 range 25 .. 25;
        Se_Pka        at 0 range 26 .. 26;
        Se_Rng        at 0 range 27 .. 27;
        Se_Keymover   at 0 range 28 .. 28;
    end record;

    type LW_PRGNLCL_FALCON_IRQSTAT_GPTMR_Field is (GPTMR_FALSE, GPTMR_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQSTAT_GPTMR_Field use (GPTMR_FALSE => 16#0#, GPTMR_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQSTAT_WDTMR_Field is (WDTMR_FALSE, WDTMR_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQSTAT_WDTMR_Field use (WDTMR_FALSE => 16#0#, WDTMR_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQSTAT_MTHD_Field is (MTHD_FALSE, MTHD_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQSTAT_MTHD_Field use (MTHD_FALSE => 16#0#, MTHD_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQSTAT_CTXSW_Field is (CTXSW_FALSE, CTXSW_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQSTAT_CTXSW_Field use (CTXSW_FALSE => 16#0#, CTXSW_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQSTAT_HALT_Field is (HALT_FALSE, HALT_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQSTAT_HALT_Field use (HALT_FALSE => 16#0#, HALT_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQSTAT_EXTERR_Field is (EXTERR_FALSE, EXTERR_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQSTAT_EXTERR_Field use (EXTERR_FALSE => 16#0#, EXTERR_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQSTAT_SWGEN0_Field is (SWGEN0_FALSE, SWGEN0_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQSTAT_SWGEN0_Field use (SWGEN0_FALSE => 16#0#, SWGEN0_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQSTAT_SWGEN1_Field is (SWGEN1_FALSE, SWGEN1_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQSTAT_SWGEN1_Field use (SWGEN1_FALSE => 16#0#, SWGEN1_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQSTAT_EXT_EXTIRQ1_Field is (EXTIRQ1_FALSE, EXTIRQ1_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQSTAT_EXT_EXTIRQ1_Field use (EXTIRQ1_FALSE => 16#0#, EXTIRQ1_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQSTAT_EXT_EXTIRQ2_Field is (EXTIRQ2_FALSE, EXTIRQ2_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQSTAT_EXT_EXTIRQ2_Field use (EXTIRQ2_FALSE => 16#0#, EXTIRQ2_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQSTAT_EXT_EXTIRQ3_Field is (EXTIRQ3_FALSE, EXTIRQ3_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQSTAT_EXT_EXTIRQ3_Field use (EXTIRQ3_FALSE => 16#0#, EXTIRQ3_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQSTAT_EXT_EXTIRQ4_Field is (EXTIRQ4_FALSE, EXTIRQ4_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQSTAT_EXT_EXTIRQ4_Field use (EXTIRQ4_FALSE => 16#0#, EXTIRQ4_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQSTAT_EXT_EXTIRQ5_Field is (EXTIRQ5_FALSE, EXTIRQ5_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQSTAT_EXT_EXTIRQ5_Field use (EXTIRQ5_FALSE => 16#0#, EXTIRQ5_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQSTAT_EXT_EXTIRQ6_Field is (EXTIRQ6_FALSE, EXTIRQ6_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQSTAT_EXT_EXTIRQ6_Field use (EXTIRQ6_FALSE => 16#0#, EXTIRQ6_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQSTAT_EXT_EXTIRQ7_Field is (EXTIRQ7_FALSE, EXTIRQ7_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQSTAT_EXT_EXTIRQ7_Field use (EXTIRQ7_FALSE => 16#0#, EXTIRQ7_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQSTAT_EXT_EXTIRQ8_Field is (EXTIRQ8_FALSE, EXTIRQ8_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQSTAT_EXT_EXTIRQ8_Field use (EXTIRQ8_FALSE => 16#0#, EXTIRQ8_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQSTAT_DMA_Field is (DMA_FALSE, DMA_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQSTAT_DMA_Field use (DMA_FALSE => 16#0#, DMA_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQSTAT_SHA_Field is (SHA_FALSE, SHA_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQSTAT_SHA_Field use (SHA_FALSE => 16#0#, SHA_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQSTAT_MEMERR_Field is (MEMERR_FALSE, MEMERR_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQSTAT_MEMERR_Field use (MEMERR_FALSE => 16#0#, MEMERR_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQSTAT_CTXSW_ERROR_Field is (ERROR_FALSE, ERROR_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQSTAT_CTXSW_ERROR_Field use (ERROR_FALSE => 16#0#, ERROR_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQSTAT_GDMA_Field is (GDMA_FALSE, GDMA_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQSTAT_GDMA_Field use (GDMA_FALSE => 16#0#, GDMA_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQSTAT_ICD_Field is (ICD_FALSE, ICD_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQSTAT_ICD_Field use (ICD_FALSE => 16#0#, ICD_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQSTAT_IOPMP_Field is (IOPMP_FALSE, IOPMP_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQSTAT_IOPMP_Field use (IOPMP_FALSE => 16#0#, IOPMP_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQSTAT_CORE_MISMATCH_Field is (MISMATCH_FALSE, MISMATCH_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQSTAT_CORE_MISMATCH_Field use (MISMATCH_FALSE => 16#0#, MISMATCH_TRUE => 16#1#);
    LW_PRGNLCL_FALCON_IRQSTAT_SE_SAP_SET      : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQSTAT_SE_PKA_SET      : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQSTAT_SE_RNG_SET      : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQSTAT_SE_KEYMOVER_SET : constant NvU1 := 16#1#;

    type LW_PRGNLCL_FALCON_IRQSTAT_Register is record
        Gptmr         : LW_PRGNLCL_FALCON_IRQSTAT_GPTMR_Field;
        Wdtmr         : LW_PRGNLCL_FALCON_IRQSTAT_WDTMR_Field;
        Mthd          : LW_PRGNLCL_FALCON_IRQSTAT_MTHD_Field;
        Ctxsw         : LW_PRGNLCL_FALCON_IRQSTAT_CTXSW_Field;
        Halt          : LW_PRGNLCL_FALCON_IRQSTAT_HALT_Field;
        Exterr        : LW_PRGNLCL_FALCON_IRQSTAT_EXTERR_Field;
        Swgen0        : LW_PRGNLCL_FALCON_IRQSTAT_SWGEN0_Field;
        Swgen1        : LW_PRGNLCL_FALCON_IRQSTAT_SWGEN1_Field;
        Ext_Extirq1   : LW_PRGNLCL_FALCON_IRQSTAT_EXT_EXTIRQ1_Field;
        Ext_Extirq2   : LW_PRGNLCL_FALCON_IRQSTAT_EXT_EXTIRQ2_Field;
        Ext_Extirq3   : LW_PRGNLCL_FALCON_IRQSTAT_EXT_EXTIRQ3_Field;
        Ext_Extirq4   : LW_PRGNLCL_FALCON_IRQSTAT_EXT_EXTIRQ4_Field;
        Ext_Extirq5   : LW_PRGNLCL_FALCON_IRQSTAT_EXT_EXTIRQ5_Field;
        Ext_Extirq6   : LW_PRGNLCL_FALCON_IRQSTAT_EXT_EXTIRQ6_Field;
        Ext_Extirq7   : LW_PRGNLCL_FALCON_IRQSTAT_EXT_EXTIRQ7_Field;
        Ext_Extirq8   : LW_PRGNLCL_FALCON_IRQSTAT_EXT_EXTIRQ8_Field;
        Dma           : LW_PRGNLCL_FALCON_IRQSTAT_DMA_Field;
        Sha           : LW_PRGNLCL_FALCON_IRQSTAT_SHA_Field;
        Memerr        : LW_PRGNLCL_FALCON_IRQSTAT_MEMERR_Field;
        Ctxsw_Error   : LW_PRGNLCL_FALCON_IRQSTAT_CTXSW_ERROR_Field;
        Gdma          : LW_PRGNLCL_FALCON_IRQSTAT_GDMA_Field;
        Icd           : LW_PRGNLCL_FALCON_IRQSTAT_ICD_Field;
        Iopmp         : LW_PRGNLCL_FALCON_IRQSTAT_IOPMP_Field;
        Core_Mismatch : LW_PRGNLCL_FALCON_IRQSTAT_CORE_MISMATCH_Field;
        Se_Sap        : NvU1;
        Se_Pka        : NvU1;
        Se_Rng        : NvU1;
        Se_Keymover   : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_IRQSTAT_Register use record
        Gptmr         at 0 range  0 ..  0;
        Wdtmr         at 0 range  1 ..  1;
        Mthd          at 0 range  2 ..  2;
        Ctxsw         at 0 range  3 ..  3;
        Halt          at 0 range  4 ..  4;
        Exterr        at 0 range  5 ..  5;
        Swgen0        at 0 range  6 ..  6;
        Swgen1        at 0 range  7 ..  7;
        Ext_Extirq1   at 0 range  8 ..  8;
        Ext_Extirq2   at 0 range  9 ..  9;
        Ext_Extirq3   at 0 range 10 .. 10;
        Ext_Extirq4   at 0 range 11 .. 11;
        Ext_Extirq5   at 0 range 12 .. 12;
        Ext_Extirq6   at 0 range 13 .. 13;
        Ext_Extirq7   at 0 range 14 .. 14;
        Ext_Extirq8   at 0 range 15 .. 15;
        Dma           at 0 range 16 .. 16;
        Sha           at 0 range 17 .. 17;
        Memerr        at 0 range 18 .. 18;
        Ctxsw_Error   at 0 range 19 .. 19;
        Gdma          at 0 range 20 .. 20;
        Icd           at 0 range 22 .. 22;
        Iopmp         at 0 range 23 .. 23;
        Core_Mismatch at 0 range 24 .. 24;
        Se_Sap        at 0 range 25 .. 25;
        Se_Pka        at 0 range 26 .. 26;
        Se_Rng        at 0 range 27 .. 27;
        Se_Keymover   at 0 range 28 .. 28;
    end record;

    LW_PRGNLCL_FALCON_IRQMODE_LVL_GPTMR_INIT   : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_GPTMR_FALSE  : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_GPTMR_TRUE   : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_WDTMR_INIT   : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_WDTMR_FALSE  : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_WDTMR_TRUE   : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_MTHD_INIT    : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_MTHD_FALSE   : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_MTHD_TRUE    : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_CTXSW_INIT   : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_CTXSW_FALSE  : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_CTXSW_TRUE   : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_HALT_INIT    : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_HALT_FALSE   : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_HALT_TRUE    : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_EXTERR_INIT  : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_EXTERR_FALSE : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_EXTERR_TRUE  : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_SWGEN0_INIT  : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_SWGEN0_FALSE : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_SWGEN0_TRUE  : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_SWGEN1_INIT  : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_SWGEN1_FALSE : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_SWGEN1_TRUE  : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_EXT_INIT     : constant NvU8 := 16#fc#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_DMA_INIT     : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_DMA_TRUE     : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_DMA_FALSE    : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_SHA_INIT     : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_SHA_TRUE     : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_SHA_FALSE    : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_MEMERR_INIT  : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_MEMERR_TRUE  : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_MEMERR_FALSE : constant NvU1 := 16#0#;
    type LW_PRGNLCL_FALCON_IRQMODE_LVL_CTXSW_ERROR_Field is (ERROR_FALSE, ERROR_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQMODE_LVL_CTXSW_ERROR_Field use (ERROR_FALSE => 16#0#, ERROR_TRUE => 16#1#);
    LW_PRGNLCL_FALCON_IRQMODE_LVL_GDMA_INIT           : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_GDMA_TRUE           : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_GDMA_FALSE          : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_ICD_INIT            : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_ICD_TRUE            : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_ICD_FALSE           : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_IOPMP_INIT          : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_IOPMP_TRUE          : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_IOPMP_FALSE         : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_CORE_MISMATCH_INIT  : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_CORE_MISMATCH_TRUE  : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_CORE_MISMATCH_FALSE : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_SE_SAP_INIT         : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_SE_SAP_TRUE         : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_SE_SAP_FALSE        : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_SE_PKA_INIT         : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_SE_PKA_TRUE         : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_SE_PKA_FALSE        : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_SE_RNG_INIT         : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_SE_RNG_TURE         : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_SE_RNG_FALSE        : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_SE_KEYMOVER_INIT    : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_SE_KEYMOVER_TRUE    : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_SE_KEYMOVER_FALSE   : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_EXT_EXTIRQ1_TRUE    : constant      := 16#1#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_EXT_EXTIRQ1_FALSE   : constant      := 16#0#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_EXT_EXTIRQ2_TRUE    : constant      := 16#1#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_EXT_EXTIRQ2_FALSE   : constant      := 16#0#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_EXT_EXTIRQ3_TRUE    : constant      := 16#1#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_EXT_EXTIRQ3_FALSE   : constant      := 16#0#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_EXT_EXTIRQ4_TRUE    : constant      := 16#1#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_EXT_EXTIRQ4_FALSE   : constant      := 16#0#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_EXT_EXTIRQ5_TRUE    : constant      := 16#1#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_EXT_EXTIRQ5_FALSE   : constant      := 16#0#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_EXT_EXTIRQ6_TRUE    : constant      := 16#1#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_EXT_EXTIRQ6_FALSE   : constant      := 16#0#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_EXT_EXTIRQ7_TRUE    : constant      := 16#1#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_EXT_EXTIRQ7_FALSE   : constant      := 16#0#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_EXT_EXTIRQ8_TRUE    : constant      := 16#1#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_EXT_EXTIRQ8_FALSE   : constant      := 16#0#;

    type LW_PRGNLCL_FALCON_IRQMODE_Register is record
        Lvl_Gptmr         : NvU1;
        Lvl_Wdtmr         : NvU1;
        Lvl_Mthd          : NvU1;
        Lvl_Ctxsw         : NvU1;
        Lvl_Halt          : NvU1;
        Lvl_Exterr        : NvU1;
        Lvl_Swgen0        : NvU1;
        Lvl_Swgen1        : NvU1;
        Lvl_Ext           : NvU8;
        Lvl_Dma           : NvU1;
        Lvl_Sha           : NvU1;
        Lvl_Memerr        : NvU1;
        Lvl_Ctxsw_Error   : LW_PRGNLCL_FALCON_IRQMODE_LVL_CTXSW_ERROR_Field;
        Lvl_Gdma          : NvU1;
        Lvl_Icd           : NvU1;
        Lvl_Iopmp         : NvU1;
        Lvl_Core_Mismatch : NvU1;
        Lvl_Se_Sap        : NvU1;
        Lvl_Se_Pka        : NvU1;
        Lvl_Se_Rng        : NvU1;
        Lvl_Se_Keymover   : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_IRQMODE_Register use record
        Lvl_Gptmr         at 0 range  0 ..  0;
        Lvl_Wdtmr         at 0 range  1 ..  1;
        Lvl_Mthd          at 0 range  2 ..  2;
        Lvl_Ctxsw         at 0 range  3 ..  3;
        Lvl_Halt          at 0 range  4 ..  4;
        Lvl_Exterr        at 0 range  5 ..  5;
        Lvl_Swgen0        at 0 range  6 ..  6;
        Lvl_Swgen1        at 0 range  7 ..  7;
        Lvl_Ext           at 0 range  8 .. 15;
        Lvl_Dma           at 0 range 16 .. 16;
        Lvl_Sha           at 0 range 17 .. 17;
        Lvl_Memerr        at 0 range 18 .. 18;
        Lvl_Ctxsw_Error   at 0 range 19 .. 19;
        Lvl_Gdma          at 0 range 20 .. 20;
        Lvl_Icd           at 0 range 22 .. 22;
        Lvl_Iopmp         at 0 range 23 .. 23;
        Lvl_Core_Mismatch at 0 range 24 .. 24;
        Lvl_Se_Sap        at 0 range 25 .. 25;
        Lvl_Se_Pka        at 0 range 26 .. 26;
        Lvl_Se_Rng        at 0 range 27 .. 27;
        Lvl_Se_Keymover   at 0 range 28 .. 28;
    end record;

    type LW_PRGNLCL_FALCON_IRQSCMASK_GPTMR_Field is (GPTMR_DISABLE, GPTMR_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQSCMASK_GPTMR_Field use (GPTMR_DISABLE => 16#0#, GPTMR_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQSCMASK_WDTMR_Field is (WDTMR_DISABLE, WDTMR_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQSCMASK_WDTMR_Field use (WDTMR_DISABLE => 16#0#, WDTMR_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQSCMASK_MTHD_Field is (MTHD_DISABLE, MTHD_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQSCMASK_MTHD_Field use (MTHD_DISABLE => 16#0#, MTHD_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQSCMASK_CTXSW_Field is (CTXSW_DISABLE, CTXSW_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQSCMASK_CTXSW_Field use (CTXSW_DISABLE => 16#0#, CTXSW_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQSCMASK_HALT_Field is (HALT_DISABLE, HALT_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQSCMASK_HALT_Field use (HALT_DISABLE => 16#0#, HALT_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQSCMASK_EXTERR_Field is (EXTERR_DISABLE, EXTERR_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQSCMASK_EXTERR_Field use (EXTERR_DISABLE => 16#0#, EXTERR_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQSCMASK_SWGEN0_Field is (SWGEN0_DISABLE, SWGEN0_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQSCMASK_SWGEN0_Field use (SWGEN0_DISABLE => 16#0#, SWGEN0_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQSCMASK_SWGEN1_Field is (SWGEN1_DISABLE, SWGEN1_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQSCMASK_SWGEN1_Field use (SWGEN1_DISABLE => 16#0#, SWGEN1_ENABLE => 16#1#);
    LW_PRGNLCL_FALCON_IRQSCMASK_EXT_ENABLE  : constant NvU8 := 16#ff#;
    LW_PRGNLCL_FALCON_IRQSCMASK_EXT_DISABLE : constant NvU8 := 16#0#;
    type LW_PRGNLCL_FALCON_IRQSCMASK_DMA_Field is (DMA_DISABLE, DMA_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQSCMASK_DMA_Field use (DMA_DISABLE => 16#0#, DMA_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQSCMASK_SHA_Field is (SHA_DISABLE, SHA_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQSCMASK_SHA_Field use (SHA_DISABLE => 16#0#, SHA_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQSCMASK_MEMERR_Field is (MEMERR_DISABLE, MEMERR_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQSCMASK_MEMERR_Field use (MEMERR_DISABLE => 16#0#, MEMERR_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQSCMASK_CTXSW_ERROR_Field is (ERROR_DISABLE, ERROR_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQSCMASK_CTXSW_ERROR_Field use (ERROR_DISABLE => 16#0#, ERROR_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQSCMASK_GDMA_Field is (GDMA_DISABLE, GDMA_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQSCMASK_GDMA_Field use (GDMA_DISABLE => 16#0#, GDMA_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQSCMASK_ICD_Field is (ICD_DISABLE, ICD_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQSCMASK_ICD_Field use (ICD_DISABLE => 16#0#, ICD_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQSCMASK_IOPMP_Field is (IOPMP_DISABLE, IOPMP_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQSCMASK_IOPMP_Field use (IOPMP_DISABLE => 16#0#, IOPMP_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQSCMASK_CORE_MISMATCH_Field is (MISMATCH_DISABLE, MISMATCH_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQSCMASK_CORE_MISMATCH_Field use (MISMATCH_DISABLE => 16#0#, MISMATCH_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQSCMASK_SE_SAP_Field is (SAP_DISABLE, SAP_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQSCMASK_SE_SAP_Field use (SAP_DISABLE => 16#0#, SAP_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQSCMASK_SE_PKA_Field is (PKA_DISABLE, PKA_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQSCMASK_SE_PKA_Field use (PKA_DISABLE => 16#0#, PKA_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQSCMASK_SE_RNG_Field is (RNG_DISABLE, RNG_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQSCMASK_SE_RNG_Field use (RNG_DISABLE => 16#0#, RNG_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQSCMASK_SE_KEYMOVER_Field is (KEYMOVER_DISABLE, KEYMOVER_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQSCMASK_SE_KEYMOVER_Field use (KEYMOVER_DISABLE => 16#0#, KEYMOVER_ENABLE => 16#1#);
    LW_PRGNLCL_FALCON_IRQSCMASK_EXT_EXTIRQ1_ENABLE  : constant := 16#1#;
    LW_PRGNLCL_FALCON_IRQSCMASK_EXT_EXTIRQ1_DISABLE : constant := 16#0#;
    LW_PRGNLCL_FALCON_IRQSCMASK_EXT_EXTIRQ2_ENABLE  : constant := 16#1#;
    LW_PRGNLCL_FALCON_IRQSCMASK_EXT_EXTIRQ2_DISABLE : constant := 16#0#;
    LW_PRGNLCL_FALCON_IRQSCMASK_EXT_EXTIRQ3_ENABLE  : constant := 16#1#;
    LW_PRGNLCL_FALCON_IRQSCMASK_EXT_EXTIRQ3_DISABLE : constant := 16#0#;
    LW_PRGNLCL_FALCON_IRQSCMASK_EXT_EXTIRQ4_ENABLE  : constant := 16#1#;
    LW_PRGNLCL_FALCON_IRQSCMASK_EXT_EXTIRQ4_DISABLE : constant := 16#0#;
    LW_PRGNLCL_FALCON_IRQSCMASK_EXT_EXTIRQ5_ENABLE  : constant := 16#1#;
    LW_PRGNLCL_FALCON_IRQSCMASK_EXT_EXTIRQ5_DISABLE : constant := 16#0#;
    LW_PRGNLCL_FALCON_IRQSCMASK_EXT_EXTIRQ6_ENABLE  : constant := 16#1#;
    LW_PRGNLCL_FALCON_IRQSCMASK_EXT_EXTIRQ6_DISABLE : constant := 16#0#;
    LW_PRGNLCL_FALCON_IRQSCMASK_EXT_EXTIRQ7_ENABLE  : constant := 16#1#;
    LW_PRGNLCL_FALCON_IRQSCMASK_EXT_EXTIRQ7_DISABLE : constant := 16#0#;
    LW_PRGNLCL_FALCON_IRQSCMASK_EXT_EXTIRQ8_ENABLE  : constant := 16#1#;
    LW_PRGNLCL_FALCON_IRQSCMASK_EXT_EXTIRQ8_DISABLE : constant := 16#0#;

    type LW_PRGNLCL_FALCON_IRQSCMASK_Register is record
        Gptmr         : LW_PRGNLCL_FALCON_IRQSCMASK_GPTMR_Field;
        Wdtmr         : LW_PRGNLCL_FALCON_IRQSCMASK_WDTMR_Field;
        Mthd          : LW_PRGNLCL_FALCON_IRQSCMASK_MTHD_Field;
        Ctxsw         : LW_PRGNLCL_FALCON_IRQSCMASK_CTXSW_Field;
        Halt          : LW_PRGNLCL_FALCON_IRQSCMASK_HALT_Field;
        Exterr        : LW_PRGNLCL_FALCON_IRQSCMASK_EXTERR_Field;
        Swgen0        : LW_PRGNLCL_FALCON_IRQSCMASK_SWGEN0_Field;
        Swgen1        : LW_PRGNLCL_FALCON_IRQSCMASK_SWGEN1_Field;
        Ext           : NvU8;
        Dma           : LW_PRGNLCL_FALCON_IRQSCMASK_DMA_Field;
        Sha           : LW_PRGNLCL_FALCON_IRQSCMASK_SHA_Field;
        Memerr        : LW_PRGNLCL_FALCON_IRQSCMASK_MEMERR_Field;
        Ctxsw_Error   : LW_PRGNLCL_FALCON_IRQSCMASK_CTXSW_ERROR_Field;
        Gdma          : LW_PRGNLCL_FALCON_IRQSCMASK_GDMA_Field;
        Icd           : LW_PRGNLCL_FALCON_IRQSCMASK_ICD_Field;
        Iopmp         : LW_PRGNLCL_FALCON_IRQSCMASK_IOPMP_Field;
        Core_Mismatch : LW_PRGNLCL_FALCON_IRQSCMASK_CORE_MISMATCH_Field;
        Se_Sap        : LW_PRGNLCL_FALCON_IRQSCMASK_SE_SAP_Field;
        Se_Pka        : LW_PRGNLCL_FALCON_IRQSCMASK_SE_PKA_Field;
        Se_Rng        : LW_PRGNLCL_FALCON_IRQSCMASK_SE_RNG_Field;
        Se_Keymover   : LW_PRGNLCL_FALCON_IRQSCMASK_SE_KEYMOVER_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_IRQSCMASK_Register use record
        Gptmr         at 0 range  0 ..  0;
        Wdtmr         at 0 range  1 ..  1;
        Mthd          at 0 range  2 ..  2;
        Ctxsw         at 0 range  3 ..  3;
        Halt          at 0 range  4 ..  4;
        Exterr        at 0 range  5 ..  5;
        Swgen0        at 0 range  6 ..  6;
        Swgen1        at 0 range  7 ..  7;
        Ext           at 0 range  8 .. 15;
        Dma           at 0 range 16 .. 16;
        Sha           at 0 range 17 .. 17;
        Memerr        at 0 range 18 .. 18;
        Ctxsw_Error   at 0 range 19 .. 19;
        Gdma          at 0 range 20 .. 20;
        Icd           at 0 range 22 .. 22;
        Iopmp         at 0 range 23 .. 23;
        Core_Mismatch at 0 range 24 .. 24;
        Se_Sap        at 0 range 25 .. 25;
        Se_Pka        at 0 range 26 .. 26;
        Se_Rng        at 0 range 27 .. 27;
        Se_Keymover   at 0 range 28 .. 28;
    end record;

    type LW_PRGNLCL_FALCON_INTR_CTRL_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_INTR_CTRL_Register use record
        Val at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_FALCON_INTR_RETRIGGER_TRIGGER_TRUE : constant NvU1 := 16#1#;

    type LW_PRGNLCL_FALCON_INTR_RETRIGGER_Register is record
        Trigger : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_INTR_RETRIGGER_Register use record
        Trigger at 0 range 0 .. 0;
    end record;

    LW_PRGNLCL_FALCON_IRQMSET_GPTMR_SET         : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMSET_WDTMR_SET         : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMSET_MTHD_SET          : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMSET_CTXSW_SET         : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMSET_HALT_SET          : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMSET_EXTERR_SET        : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMSET_SWGEN0_SET        : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMSET_SWGEN1_SET        : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMSET_EXT_EXTIRQ1_SET   : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMSET_EXT_EXTIRQ2_SET   : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMSET_EXT_EXTIRQ3_SET   : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMSET_EXT_EXTIRQ4_SET   : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMSET_EXT_EXTIRQ5_SET   : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMSET_EXT_EXTIRQ6_SET   : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMSET_EXT_EXTIRQ7_SET   : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMSET_EXT_EXTIRQ8_SET   : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMSET_DMA_SET           : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMSET_SHA_SET           : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMSET_MEMERR_SET        : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMSET_CTXSW_ERROR_SET   : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMSET_GDMA_SET          : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMSET_ICD_SET           : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMSET_IOPMP_SET         : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMSET_CORE_MISMATCH_SET : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMSET_SE_SAP_SET        : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMSET_SE_PKA_SET        : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMSET_SE_RNG_SET        : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMSET_SE_KEYMOVER_SET   : constant NvU1 := 16#1#;

    type LW_PRGNLCL_FALCON_IRQMSET_Register is record
        Gptmr         : NvU1;
        Wdtmr         : NvU1;
        Mthd          : NvU1;
        Ctxsw         : NvU1;
        Halt          : NvU1;
        Exterr        : NvU1;
        Swgen0        : NvU1;
        Swgen1        : NvU1;
        Ext_Extirq1   : NvU1;
        Ext_Extirq2   : NvU1;
        Ext_Extirq3   : NvU1;
        Ext_Extirq4   : NvU1;
        Ext_Extirq5   : NvU1;
        Ext_Extirq6   : NvU1;
        Ext_Extirq7   : NvU1;
        Ext_Extirq8   : NvU1;
        Dma           : NvU1;
        Sha           : NvU1;
        Memerr        : NvU1;
        Ctxsw_Error   : NvU1;
        Gdma          : NvU1;
        Icd           : NvU1;
        Iopmp         : NvU1;
        Core_Mismatch : NvU1;
        Se_Sap        : NvU1;
        Se_Pka        : NvU1;
        Se_Rng        : NvU1;
        Se_Keymover   : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_IRQMSET_Register use record
        Gptmr         at 0 range  0 ..  0;
        Wdtmr         at 0 range  1 ..  1;
        Mthd          at 0 range  2 ..  2;
        Ctxsw         at 0 range  3 ..  3;
        Halt          at 0 range  4 ..  4;
        Exterr        at 0 range  5 ..  5;
        Swgen0        at 0 range  6 ..  6;
        Swgen1        at 0 range  7 ..  7;
        Ext_Extirq1   at 0 range  8 ..  8;
        Ext_Extirq2   at 0 range  9 ..  9;
        Ext_Extirq3   at 0 range 10 .. 10;
        Ext_Extirq4   at 0 range 11 .. 11;
        Ext_Extirq5   at 0 range 12 .. 12;
        Ext_Extirq6   at 0 range 13 .. 13;
        Ext_Extirq7   at 0 range 14 .. 14;
        Ext_Extirq8   at 0 range 15 .. 15;
        Dma           at 0 range 16 .. 16;
        Sha           at 0 range 17 .. 17;
        Memerr        at 0 range 18 .. 18;
        Ctxsw_Error   at 0 range 19 .. 19;
        Gdma          at 0 range 20 .. 20;
        Icd           at 0 range 22 .. 22;
        Iopmp         at 0 range 23 .. 23;
        Core_Mismatch at 0 range 24 .. 24;
        Se_Sap        at 0 range 25 .. 25;
        Se_Pka        at 0 range 26 .. 26;
        Se_Rng        at 0 range 27 .. 27;
        Se_Keymover   at 0 range 28 .. 28;
    end record;

    LW_PRGNLCL_FALCON_IRQMCLR_GPTMR_SET       : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMCLR_WDTMR_SET       : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMCLR_MTHD_SET        : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMCLR_CTXSW_SET       : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMCLR_HALT_SET        : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMCLR_EXTERR_SET      : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMCLR_SWGEN0_SET      : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMCLR_SWGEN1_SET      : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMCLR_EXT_EXTIRQ1_SET : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMCLR_EXT_EXTIRQ2_SET : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMCLR_EXT_EXTIRQ3_SET : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMCLR_EXT_EXTIRQ4_SET : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMCLR_EXT_EXTIRQ5_SET : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMCLR_EXT_EXTIRQ6_SET : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMCLR_EXT_EXTIRQ7_SET : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMCLR_EXT_EXTIRQ8_SET : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMCLR_DMA_SET         : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMCLR_SHA_SET         : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMCLR_MEMERR_SET      : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMCLR_CTXSW_ERROR_SET : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMCLR_GDMA_SET        : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMCLR_ICD_SET         : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMCLR_IOPMP_SET       : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMCLR_SE_SAP_SET      : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMCLR_SE_PKA_SET      : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMCLR_SE_RNG_SET      : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMCLR_SE_KEYMOVER_SET : constant NvU1 := 16#1#;

    type LW_PRGNLCL_FALCON_IRQMCLR_Register is record
        Gptmr         : NvU1;
        Wdtmr         : NvU1;
        Mthd          : NvU1;
        Ctxsw         : NvU1;
        Halt          : NvU1;
        Exterr        : NvU1;
        Swgen0        : NvU1;
        Swgen1        : NvU1;
        Ext_Extirq1   : NvU1;
        Ext_Extirq2   : NvU1;
        Ext_Extirq3   : NvU1;
        Ext_Extirq4   : NvU1;
        Ext_Extirq5   : NvU1;
        Ext_Extirq6   : NvU1;
        Ext_Extirq7   : NvU1;
        Ext_Extirq8   : NvU1;
        Dma           : NvU1;
        Sha           : NvU1;
        Memerr        : NvU1;
        Ctxsw_Error   : NvU1;
        Gdma          : NvU1;
        Icd           : NvU1;
        Iopmp         : NvU1;
        Core_Mismatch : NvU1;
        Se_Sap        : NvU1;
        Se_Pka        : NvU1;
        Se_Rng        : NvU1;
        Se_Keymover   : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_IRQMCLR_Register use record
        Gptmr         at 0 range  0 ..  0;
        Wdtmr         at 0 range  1 ..  1;
        Mthd          at 0 range  2 ..  2;
        Ctxsw         at 0 range  3 ..  3;
        Halt          at 0 range  4 ..  4;
        Exterr        at 0 range  5 ..  5;
        Swgen0        at 0 range  6 ..  6;
        Swgen1        at 0 range  7 ..  7;
        Ext_Extirq1   at 0 range  8 ..  8;
        Ext_Extirq2   at 0 range  9 ..  9;
        Ext_Extirq3   at 0 range 10 .. 10;
        Ext_Extirq4   at 0 range 11 .. 11;
        Ext_Extirq5   at 0 range 12 .. 12;
        Ext_Extirq6   at 0 range 13 .. 13;
        Ext_Extirq7   at 0 range 14 .. 14;
        Ext_Extirq8   at 0 range 15 .. 15;
        Dma           at 0 range 16 .. 16;
        Sha           at 0 range 17 .. 17;
        Memerr        at 0 range 18 .. 18;
        Ctxsw_Error   at 0 range 19 .. 19;
        Gdma          at 0 range 20 .. 20;
        Icd           at 0 range 22 .. 22;
        Iopmp         at 0 range 23 .. 23;
        Core_Mismatch at 0 range 24 .. 24;
        Se_Sap        at 0 range 25 .. 25;
        Se_Pka        at 0 range 26 .. 26;
        Se_Rng        at 0 range 27 .. 27;
        Se_Keymover   at 0 range 28 .. 28;
    end record;

    type LW_PRGNLCL_FALCON_IRQMASK_GPTMR_Field is (GPTMR_DISABLE, GPTMR_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQMASK_GPTMR_Field use (GPTMR_DISABLE => 16#0#, GPTMR_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQMASK_WDTMR_Field is (WDTMR_DISABLE, WDTMR_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQMASK_WDTMR_Field use (WDTMR_DISABLE => 16#0#, WDTMR_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQMASK_MTHD_Field is (MTHD_DISABLE, MTHD_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQMASK_MTHD_Field use (MTHD_DISABLE => 16#0#, MTHD_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQMASK_CTXSW_Field is (CTXSW_DISABLE, CTXSW_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQMASK_CTXSW_Field use (CTXSW_DISABLE => 16#0#, CTXSW_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQMASK_HALT_Field is (HALT_DISABLE, HALT_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQMASK_HALT_Field use (HALT_DISABLE => 16#0#, HALT_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQMASK_EXTERR_Field is (EXTERR_DISABLE, EXTERR_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQMASK_EXTERR_Field use (EXTERR_DISABLE => 16#0#, EXTERR_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQMASK_SWGEN0_Field is (SWGEN0_DISABLE, SWGEN0_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQMASK_SWGEN0_Field use (SWGEN0_DISABLE => 16#0#, SWGEN0_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQMASK_SWGEN1_Field is (SWGEN1_DISABLE, SWGEN1_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQMASK_SWGEN1_Field use (SWGEN1_DISABLE => 16#0#, SWGEN1_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQMASK_EXT_EXTIRQ1_Field is (EXTIRQ1_DISABLE, EXTIRQ1_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQMASK_EXT_EXTIRQ1_Field use (EXTIRQ1_DISABLE => 16#0#, EXTIRQ1_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQMASK_EXT_EXTIRQ2_Field is (EXTIRQ2_DISABLE, EXTIRQ2_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQMASK_EXT_EXTIRQ2_Field use (EXTIRQ2_DISABLE => 16#0#, EXTIRQ2_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQMASK_EXT_EXTIRQ3_Field is (EXTIRQ3_DISABLE, EXTIRQ3_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQMASK_EXT_EXTIRQ3_Field use (EXTIRQ3_DISABLE => 16#0#, EXTIRQ3_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQMASK_EXT_EXTIRQ4_Field is (EXTIRQ4_DISABLE, EXTIRQ4_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQMASK_EXT_EXTIRQ4_Field use (EXTIRQ4_DISABLE => 16#0#, EXTIRQ4_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQMASK_EXT_EXTIRQ5_Field is (EXTIRQ5_DISABLE, EXTIRQ5_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQMASK_EXT_EXTIRQ5_Field use (EXTIRQ5_DISABLE => 16#0#, EXTIRQ5_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQMASK_EXT_EXTIRQ6_Field is (EXTIRQ6_DISABLE, EXTIRQ6_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQMASK_EXT_EXTIRQ6_Field use (EXTIRQ6_DISABLE => 16#0#, EXTIRQ6_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQMASK_EXT_EXTIRQ7_Field is (EXTIRQ7_DISABLE, EXTIRQ7_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQMASK_EXT_EXTIRQ7_Field use (EXTIRQ7_DISABLE => 16#0#, EXTIRQ7_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQMASK_EXT_EXTIRQ8_Field is (EXTIRQ8_DISABLE, EXTIRQ8_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQMASK_EXT_EXTIRQ8_Field use (EXTIRQ8_DISABLE => 16#0#, EXTIRQ8_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQMASK_DMA_Field is (DMA_DISABLE, DMA_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQMASK_DMA_Field use (DMA_DISABLE => 16#0#, DMA_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQMASK_SHA_Field is (SHA_DISABLE, SHA_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQMASK_SHA_Field use (SHA_DISABLE => 16#0#, SHA_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQMASK_MEMERR_Field is (MEMERR_DISABLE, MEMERR_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQMASK_MEMERR_Field use (MEMERR_DISABLE => 16#0#, MEMERR_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQMASK_CTXSW_ERROR_Field is (ERROR_DISABLE, ERROR_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQMASK_CTXSW_ERROR_Field use (ERROR_DISABLE => 16#0#, ERROR_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQMASK_GDMA_Field is (GDMA_DISABLE, GDMA_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQMASK_GDMA_Field use (GDMA_DISABLE => 16#0#, GDMA_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQMASK_ICD_Field is (ICD_DISABLE, ICD_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQMASK_ICD_Field use (ICD_DISABLE => 16#0#, ICD_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQMASK_IOPMP_Field is (IOPMP_DISABLE, IOPMP_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQMASK_IOPMP_Field use (IOPMP_DISABLE => 16#0#, IOPMP_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQMASK_CORE_MISMATCH_Field is (MISMATCH_DISABLE, MISMATCH_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQMASK_CORE_MISMATCH_Field use (MISMATCH_DISABLE => 16#0#, MISMATCH_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQMASK_SE_SAP_Field is (SAP_DISABLE, SAP_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQMASK_SE_SAP_Field use (SAP_DISABLE => 16#0#, SAP_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQMASK_SE_PKA_Field is (PKA_DISABLE, PKA_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQMASK_SE_PKA_Field use (PKA_DISABLE => 16#0#, PKA_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQMASK_SE_RNG_Field is (RNG_DISABLE, RNG_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQMASK_SE_RNG_Field use (RNG_DISABLE => 16#0#, RNG_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQMASK_SE_KEYMOVER_Field is (KEYMOVER_DISABLE, KEYMOVER_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQMASK_SE_KEYMOVER_Field use (KEYMOVER_DISABLE => 16#0#, KEYMOVER_ENABLE => 16#1#);

    type LW_PRGNLCL_FALCON_IRQMASK_Register is record
        Gptmr         : LW_PRGNLCL_FALCON_IRQMASK_GPTMR_Field;
        Wdtmr         : LW_PRGNLCL_FALCON_IRQMASK_WDTMR_Field;
        Mthd          : LW_PRGNLCL_FALCON_IRQMASK_MTHD_Field;
        Ctxsw         : LW_PRGNLCL_FALCON_IRQMASK_CTXSW_Field;
        Halt          : LW_PRGNLCL_FALCON_IRQMASK_HALT_Field;
        Exterr        : LW_PRGNLCL_FALCON_IRQMASK_EXTERR_Field;
        Swgen0        : LW_PRGNLCL_FALCON_IRQMASK_SWGEN0_Field;
        Swgen1        : LW_PRGNLCL_FALCON_IRQMASK_SWGEN1_Field;
        Ext_Extirq1   : LW_PRGNLCL_FALCON_IRQMASK_EXT_EXTIRQ1_Field;
        Ext_Extirq2   : LW_PRGNLCL_FALCON_IRQMASK_EXT_EXTIRQ2_Field;
        Ext_Extirq3   : LW_PRGNLCL_FALCON_IRQMASK_EXT_EXTIRQ3_Field;
        Ext_Extirq4   : LW_PRGNLCL_FALCON_IRQMASK_EXT_EXTIRQ4_Field;
        Ext_Extirq5   : LW_PRGNLCL_FALCON_IRQMASK_EXT_EXTIRQ5_Field;
        Ext_Extirq6   : LW_PRGNLCL_FALCON_IRQMASK_EXT_EXTIRQ6_Field;
        Ext_Extirq7   : LW_PRGNLCL_FALCON_IRQMASK_EXT_EXTIRQ7_Field;
        Ext_Extirq8   : LW_PRGNLCL_FALCON_IRQMASK_EXT_EXTIRQ8_Field;
        Dma           : LW_PRGNLCL_FALCON_IRQMASK_DMA_Field;
        Sha           : LW_PRGNLCL_FALCON_IRQMASK_SHA_Field;
        Memerr        : LW_PRGNLCL_FALCON_IRQMASK_MEMERR_Field;
        Ctxsw_Error   : LW_PRGNLCL_FALCON_IRQMASK_CTXSW_ERROR_Field;
        Gdma          : LW_PRGNLCL_FALCON_IRQMASK_GDMA_Field;
        Icd           : LW_PRGNLCL_FALCON_IRQMASK_ICD_Field;
        Iopmp         : LW_PRGNLCL_FALCON_IRQMASK_IOPMP_Field;
        Core_Mismatch : LW_PRGNLCL_FALCON_IRQMASK_CORE_MISMATCH_Field;
        Se_Sap        : LW_PRGNLCL_FALCON_IRQMASK_SE_SAP_Field;
        Se_Pka        : LW_PRGNLCL_FALCON_IRQMASK_SE_PKA_Field;
        Se_Rng        : LW_PRGNLCL_FALCON_IRQMASK_SE_RNG_Field;
        Se_Keymover   : LW_PRGNLCL_FALCON_IRQMASK_SE_KEYMOVER_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_IRQMASK_Register use record
        Gptmr         at 0 range  0 ..  0;
        Wdtmr         at 0 range  1 ..  1;
        Mthd          at 0 range  2 ..  2;
        Ctxsw         at 0 range  3 ..  3;
        Halt          at 0 range  4 ..  4;
        Exterr        at 0 range  5 ..  5;
        Swgen0        at 0 range  6 ..  6;
        Swgen1        at 0 range  7 ..  7;
        Ext_Extirq1   at 0 range  8 ..  8;
        Ext_Extirq2   at 0 range  9 ..  9;
        Ext_Extirq3   at 0 range 10 .. 10;
        Ext_Extirq4   at 0 range 11 .. 11;
        Ext_Extirq5   at 0 range 12 .. 12;
        Ext_Extirq6   at 0 range 13 .. 13;
        Ext_Extirq7   at 0 range 14 .. 14;
        Ext_Extirq8   at 0 range 15 .. 15;
        Dma           at 0 range 16 .. 16;
        Sha           at 0 range 17 .. 17;
        Memerr        at 0 range 18 .. 18;
        Ctxsw_Error   at 0 range 19 .. 19;
        Gdma          at 0 range 20 .. 20;
        Icd           at 0 range 22 .. 22;
        Iopmp         at 0 range 23 .. 23;
        Core_Mismatch at 0 range 24 .. 24;
        Se_Sap        at 0 range 25 .. 25;
        Se_Pka        at 0 range 26 .. 26;
        Se_Rng        at 0 range 27 .. 27;
        Se_Keymover   at 0 range 28 .. 28;
    end record;

    LW_PRGNLCL_FALCON_IRQDEST_HOST_GPTMR_INIT    : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_HOST_GPTMR_FALCON  : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_HOST_GPTMR_HOST    : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST_HOST_WDTMR_INIT    : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_HOST_WDTMR_FALCON  : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_HOST_WDTMR_HOST    : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST_HOST_MTHD_INIT     : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_HOST_MTHD_FALCON   : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_HOST_MTHD_HOST     : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST_HOST_CTXSW_INIT    : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_HOST_CTXSW_FALCON  : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_HOST_CTXSW_HOST    : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST_HOST_HALT_INIT     : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_HOST_HALT_FALCON   : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_HOST_HALT_HOST     : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST_HOST_EXTERR_INIT   : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_HOST_EXTERR_FALCON : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_HOST_EXTERR_HOST   : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST_HOST_SWGEN0_INIT   : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_HOST_SWGEN0_FALCON : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_HOST_SWGEN0_HOST   : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST_HOST_SWGEN1_INIT   : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_HOST_SWGEN1_FALCON : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_HOST_SWGEN1_HOST   : constant NvU1 := 16#1#;
    type LW_PRGNLCL_FALCON_IRQDEST_HOST_EXT_EXTIRQ1_Field is (EXTIRQ1_FALCON, EXTIRQ1_HOST) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQDEST_HOST_EXT_EXTIRQ1_Field use (EXTIRQ1_FALCON => 16#0#, EXTIRQ1_HOST => 16#1#);
    type LW_PRGNLCL_FALCON_IRQDEST_HOST_EXT_EXTIRQ2_Field is (EXTIRQ2_FALCON, EXTIRQ2_HOST) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQDEST_HOST_EXT_EXTIRQ2_Field use (EXTIRQ2_FALCON => 16#0#, EXTIRQ2_HOST => 16#1#);
    type LW_PRGNLCL_FALCON_IRQDEST_HOST_EXT_EXTIRQ3_Field is (EXTIRQ3_FALCON, EXTIRQ3_HOST) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQDEST_HOST_EXT_EXTIRQ3_Field use (EXTIRQ3_FALCON => 16#0#, EXTIRQ3_HOST => 16#1#);
    type LW_PRGNLCL_FALCON_IRQDEST_HOST_EXT_EXTIRQ4_Field is (EXTIRQ4_FALCON, EXTIRQ4_HOST) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQDEST_HOST_EXT_EXTIRQ4_Field use (EXTIRQ4_FALCON => 16#0#, EXTIRQ4_HOST => 16#1#);
    type LW_PRGNLCL_FALCON_IRQDEST_HOST_EXT_EXTIRQ5_Field is (EXTIRQ5_FALCON, EXTIRQ5_HOST) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQDEST_HOST_EXT_EXTIRQ5_Field use (EXTIRQ5_FALCON => 16#0#, EXTIRQ5_HOST => 16#1#);
    type LW_PRGNLCL_FALCON_IRQDEST_HOST_EXT_EXTIRQ6_Field is (EXTIRQ6_FALCON, EXTIRQ6_HOST) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQDEST_HOST_EXT_EXTIRQ6_Field use (EXTIRQ6_FALCON => 16#0#, EXTIRQ6_HOST => 16#1#);
    type LW_PRGNLCL_FALCON_IRQDEST_HOST_EXT_EXTIRQ7_Field is (EXTIRQ7_FALCON, EXTIRQ7_HOST) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQDEST_HOST_EXT_EXTIRQ7_Field use (EXTIRQ7_FALCON => 16#0#, EXTIRQ7_HOST => 16#1#);
    type LW_PRGNLCL_FALCON_IRQDEST_HOST_EXT_EXTIRQ8_Field is (EXTIRQ8_FALCON, EXTIRQ8_HOST) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQDEST_HOST_EXT_EXTIRQ8_Field use (EXTIRQ8_FALCON => 16#0#, EXTIRQ8_HOST => 16#1#);
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_GPTMR_INIT                : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_GPTMR_FALCON_IRQ0         : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_GPTMR_FALCON_IRQ1         : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_GPTMR_HOST_NORMAL         : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_GPTMR_HOST_NONSTALL       : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_WDTMR_INIT                : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_WDTMR_FALCON_IRQ0         : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_WDTMR_FALCON_IRQ1         : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_WDTMR_HOST_NORMAL         : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_WDTMR_HOST_NONSTALL       : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_MTHD_INIT                 : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_MTHD_FALCON_IRQ0          : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_MTHD_FALCON_IRQ1          : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_MTHD_HOST_NORMAL          : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_MTHD_HOST_NONSTALL        : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_CTXSW_INIT                : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_CTXSW_FALCON_IRQ0         : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_CTXSW_FALCON_IRQ1         : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_CTXSW_HOST_NORMAL         : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_CTXSW_HOST_NONSTALL       : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_HALT_INIT                 : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_HALT_FALCON_IRQ0          : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_HALT_FALCON_IRQ1          : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_HALT_HOST_NORMAL          : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_HALT_HOST_NONSTALL        : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_EXTERR_INIT               : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_EXTERR_FALCON_IRQ0        : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_EXTERR_FALCON_IRQ1        : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_EXTERR_HOST_NORMAL        : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_EXTERR_HOST_NONSTALL      : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_SWGEN0_INIT               : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_SWGEN0_FALCON_IRQ0        : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_SWGEN0_FALCON_IRQ1        : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_SWGEN0_HOST_NORMAL        : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_SWGEN0_HOST_NONSTALL      : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_SWGEN1_INIT               : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_SWGEN1_FALCON_IRQ0        : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_SWGEN1_FALCON_IRQ1        : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_SWGEN1_HOST_NORMAL        : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_SWGEN1_HOST_NONSTALL      : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_EXT_EXTIRQ1_INIT          : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_EXT_EXTIRQ1_FALCON_IRQ0   : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_EXT_EXTIRQ1_FALCON_IRQ1   : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_EXT_EXTIRQ1_HOST_NORMAL   : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_EXT_EXTIRQ1_HOST_NONSTALL : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_EXT_EXTIRQ2_INIT          : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_EXT_EXTIRQ2_FALCON_IRQ0   : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_EXT_EXTIRQ2_FALCON_IRQ1   : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_EXT_EXTIRQ2_HOST_NORMAL   : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_EXT_EXTIRQ2_HOST_NONSTALL : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_EXT_EXTIRQ3_INIT          : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_EXT_EXTIRQ3_FALCON_IRQ0   : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_EXT_EXTIRQ3_FALCON_IRQ1   : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_EXT_EXTIRQ3_HOST_NORMAL   : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_EXT_EXTIRQ3_HOST_NONSTALL : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_EXT_EXTIRQ4_INIT          : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_EXT_EXTIRQ4_FALCON_IRQ0   : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_EXT_EXTIRQ4_FALCON_IRQ1   : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_EXT_EXTIRQ4_HOST_NORMAL   : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_EXT_EXTIRQ4_HOST_NONSTALL : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_EXT_EXTIRQ5_INIT          : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_EXT_EXTIRQ5_FALCON_IRQ0   : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_EXT_EXTIRQ5_FALCON_IRQ1   : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_EXT_EXTIRQ5_HOST_NORMAL   : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_EXT_EXTIRQ5_HOST_NONSTALL : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_EXT_EXTIRQ6_INIT          : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_EXT_EXTIRQ6_FALCON_IRQ0   : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_EXT_EXTIRQ6_FALCON_IRQ1   : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_EXT_EXTIRQ6_HOST_NORMAL   : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_EXT_EXTIRQ6_HOST_NONSTALL : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_EXT_EXTIRQ7_INIT          : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_EXT_EXTIRQ7_FALCON_IRQ0   : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_EXT_EXTIRQ7_FALCON_IRQ1   : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_EXT_EXTIRQ7_HOST_NORMAL   : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_EXT_EXTIRQ7_HOST_NONSTALL : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_EXT_EXTIRQ8_INIT          : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_EXT_EXTIRQ8_FALCON_IRQ0   : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_EXT_EXTIRQ8_FALCON_IRQ1   : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_EXT_EXTIRQ8_HOST_NORMAL   : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_EXT_EXTIRQ8_HOST_NONSTALL : constant NvU1 := 16#1#;

    type LW_PRGNLCL_FALCON_IRQDEST_Register is record
        Host_Gptmr         : NvU1;
        Host_Wdtmr         : NvU1;
        Host_Mthd          : NvU1;
        Host_Ctxsw         : NvU1;
        Host_Halt          : NvU1;
        Host_Exterr        : NvU1;
        Host_Swgen0        : NvU1;
        Host_Swgen1        : NvU1;
        Host_Ext_Extirq1   : LW_PRGNLCL_FALCON_IRQDEST_HOST_EXT_EXTIRQ1_Field;
        Host_Ext_Extirq2   : LW_PRGNLCL_FALCON_IRQDEST_HOST_EXT_EXTIRQ2_Field;
        Host_Ext_Extirq3   : LW_PRGNLCL_FALCON_IRQDEST_HOST_EXT_EXTIRQ3_Field;
        Host_Ext_Extirq4   : LW_PRGNLCL_FALCON_IRQDEST_HOST_EXT_EXTIRQ4_Field;
        Host_Ext_Extirq5   : LW_PRGNLCL_FALCON_IRQDEST_HOST_EXT_EXTIRQ5_Field;
        Host_Ext_Extirq6   : LW_PRGNLCL_FALCON_IRQDEST_HOST_EXT_EXTIRQ6_Field;
        Host_Ext_Extirq7   : LW_PRGNLCL_FALCON_IRQDEST_HOST_EXT_EXTIRQ7_Field;
        Host_Ext_Extirq8   : LW_PRGNLCL_FALCON_IRQDEST_HOST_EXT_EXTIRQ8_Field;
        Target_Gptmr       : NvU1;
        Target_Wdtmr       : NvU1;
        Target_Mthd        : NvU1;
        Target_Ctxsw       : NvU1;
        Target_Halt        : NvU1;
        Target_Exterr      : NvU1;
        Target_Swgen0      : NvU1;
        Target_Swgen1      : NvU1;
        Target_Ext_Extirq1 : NvU1;
        Target_Ext_Extirq2 : NvU1;
        Target_Ext_Extirq3 : NvU1;
        Target_Ext_Extirq4 : NvU1;
        Target_Ext_Extirq5 : NvU1;
        Target_Ext_Extirq6 : NvU1;
        Target_Ext_Extirq7 : NvU1;
        Target_Ext_Extirq8 : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_IRQDEST_Register use record
        Host_Gptmr         at 0 range  0 ..  0;
        Host_Wdtmr         at 0 range  1 ..  1;
        Host_Mthd          at 0 range  2 ..  2;
        Host_Ctxsw         at 0 range  3 ..  3;
        Host_Halt          at 0 range  4 ..  4;
        Host_Exterr        at 0 range  5 ..  5;
        Host_Swgen0        at 0 range  6 ..  6;
        Host_Swgen1        at 0 range  7 ..  7;
        Host_Ext_Extirq1   at 0 range  8 ..  8;
        Host_Ext_Extirq2   at 0 range  9 ..  9;
        Host_Ext_Extirq3   at 0 range 10 .. 10;
        Host_Ext_Extirq4   at 0 range 11 .. 11;
        Host_Ext_Extirq5   at 0 range 12 .. 12;
        Host_Ext_Extirq6   at 0 range 13 .. 13;
        Host_Ext_Extirq7   at 0 range 14 .. 14;
        Host_Ext_Extirq8   at 0 range 15 .. 15;
        Target_Gptmr       at 0 range 16 .. 16;
        Target_Wdtmr       at 0 range 17 .. 17;
        Target_Mthd        at 0 range 18 .. 18;
        Target_Ctxsw       at 0 range 19 .. 19;
        Target_Halt        at 0 range 20 .. 20;
        Target_Exterr      at 0 range 21 .. 21;
        Target_Swgen0      at 0 range 22 .. 22;
        Target_Swgen1      at 0 range 23 .. 23;
        Target_Ext_Extirq1 at 0 range 24 .. 24;
        Target_Ext_Extirq2 at 0 range 25 .. 25;
        Target_Ext_Extirq3 at 0 range 26 .. 26;
        Target_Ext_Extirq4 at 0 range 27 .. 27;
        Target_Ext_Extirq5 at 0 range 28 .. 28;
        Target_Ext_Extirq6 at 0 range 29 .. 29;
        Target_Ext_Extirq7 at 0 range 30 .. 30;
        Target_Ext_Extirq8 at 0 range 31 .. 31;
    end record;

    LW_PRGNLCL_FALCON_IRQDEST2_HOST_DMA_INIT                      : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST2_HOST_DMA_FALCON                    : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST2_HOST_DMA_HOST                      : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST2_HOST_SHA_INIT                      : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST2_HOST_SHA_FALCON                    : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST2_HOST_SHA_HOST                      : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST2_HOST_MEMERR_INIT                   : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST2_HOST_MEMERR_FALCON                 : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST2_HOST_MEMERR_HOST                   : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST2_HOST_CTXSW_ERROR_INIT              : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST2_HOST_CTXSW_ERROR_FALCON            : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST2_HOST_CTXSW_ERROR_HOST              : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST2_HOST_GDMA_INIT                     : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST2_HOST_GDMA_FALCON                   : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST2_HOST_GDMA_HOST                     : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST2_HOST_ICD_INIT                      : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST2_HOST_ICD_FALCON                    : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST2_HOST_ICD_HOST                      : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST2_HOST_IOPMP_INIT                    : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST2_HOST_IOPMP_FALCON                  : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST2_HOST_IOPMP_HOST                    : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST2_HOST_CORE_MISMATCH_INIT            : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST2_HOST_CORE_MISMATCH_FALCON          : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST2_HOST_CORE_MISMATCH_HOST            : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST2_HOST_SE_SAP_INIT                   : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST2_HOST_SE_SAP_FALCON                 : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST2_HOST_SE_SAP_HOST                   : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST2_HOST_SE_PKA_INIT                   : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST2_HOST_SE_PKA_FALCON                 : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST2_HOST_SE_PKA_HOST                   : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST2_HOST_SE_RNG_INIT                   : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST2_HOST_SE_RNG_FALCON                 : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST2_HOST_SE_RNG_HOST                   : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST2_HOST_SE_KEYMOVER_INIT              : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST2_HOST_SE_KEYMOVER_FALCON            : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST2_HOST_SE_KEYMOVER_HOST              : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST2_TARGET_DMA_INIT                    : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST2_TARGET_DMA_FALCON_IRQ0             : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST2_TARGET_DMA_FALCON_IRQ1             : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST2_TARGET_DMA_HOST_NORMAL             : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST2_TARGET_DMA_HOST_NONSTALL           : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST2_TARGET_SHA_INIT                    : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST2_TARGET_SHA_FALCON_IRQ0             : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST2_TARGET_SHA_FALCON_IRQ1             : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST2_TARGET_SHA_HOST_NORMAL             : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST2_TARGET_SHA_HOST_NONSTALL           : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST2_TARGET_MEMERR_INIT                 : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST2_TARGET_MEMERR_FALCON_IRQ0          : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST2_TARGET_MEMERR_FALCON_IRQ1          : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST2_TARGET_MEMERR_HOST_NORMAL          : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST2_TARGET_MEMERR_HOST_NONSTALL        : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST2_TARGET_CTXSW_ERROR_INIT            : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST2_TARGET_CTXSW_ERROR_FALCON_IRQ0     : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST2_TARGET_CTXSW_ERROR_FALCON_IRQ1     : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST2_TARGET_CTXSW_ERROR_HOST_NORMAL     : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST2_TARGET_CTXSW_ERROR_HOST_NONSTALL   : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST2_TARGET_GDMA_INIT                   : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST2_TARGET_GDMA_FALCON_IRQ0            : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST2_TARGET_GDMA_FALCON_IRQ1            : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST2_TARGET_GDMA_HOST_NORMAL            : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST2_TARGET_GDMA_HOST_NONSTALL          : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST2_TARGET_ICD_INIT                    : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST2_TARGET_ICD_FALCON_IRQ0             : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST2_TARGET_ICD_FALCON_IRQ1             : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST2_TARGET_ICD_HOST_NORMAL             : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST2_TARGET_ICD_HOST_NONSTALL           : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST2_TARGET_IOPMP_INIT                  : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST2_TARGET_IOPMP_FALCON_IRQ0           : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST2_TARGET_IOPMP_FALCON_IRQ1           : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST2_TARGET_IOPMP_HOST_NORMAL           : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST2_TARGET_IOPMP_HOST_NONSTALL         : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST2_TARGET_CORE_MISMATCH_INIT          : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST2_TARGET_CORE_MISMATCH_FALCON_IRQ0   : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST2_TARGET_CORE_MISMATCH_FALCON_IRQ1   : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST2_TARGET_CORE_MISMATCH_HOST_NORMAL   : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST2_TARGET_CORE_MISMATCH_HOST_NONSTALL : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST2_TARGET_SE_SAP_INIT                 : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST2_TARGET_SE_SAP_FALCON_IRQ0          : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST2_TARGET_SE_SAP_FALCON_IRQ1          : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST2_TARGET_SE_SAP_HOST_NORMAL          : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST2_TARGET_SE_SAP_HOST_NONSTALL        : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST2_TARGET_SE_PKA_INIT                 : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST2_TARGET_SE_PKA_FALCON_IRQ0          : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST2_TARGET_SE_PKA_FALCON_IRQ1          : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST2_TARGET_SE_PKA_HOST_NORMAL          : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST2_TARGET_SE_PKA_HOST_NONSTALL        : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST2_TARGET_SE_RNG_INIT                 : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST2_TARGET_SE_RNG_FALCON_IRQ0          : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST2_TARGET_SE_RNG_FALCON_IRQ1          : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST2_TARGET_SE_RNG_HOST_NORMAL          : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST2_TARGET_SE_RNG_HOST_NONSTALL        : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST2_TARGET_SE_KEYMOVER_INIT            : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST2_TARGET_SE_KEYMOVER_FALCON_IRQ0     : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST2_TARGET_SE_KEYMOVER_FALCON_IRQ1     : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST2_TARGET_SE_KEYMOVER_HOST_NORMAL     : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST2_TARGET_SE_KEYMOVER_HOST_NONSTALL   : constant NvU1 := 16#1#;

    type LW_PRGNLCL_FALCON_IRQDEST2_Register is record
        Host_Dma             : NvU1;
        Host_Sha             : NvU1;
        Host_Memerr          : NvU1;
        Host_Ctxsw_Error     : NvU1;
        Host_Gdma            : NvU1;
        Host_Icd             : NvU1;
        Host_Iopmp           : NvU1;
        Host_Core_Mismatch   : NvU1;
        Host_Se_Sap          : NvU1;
        Host_Se_Pka          : NvU1;
        Host_Se_Rng          : NvU1;
        Host_Se_Keymover     : NvU1;
        Target_Dma           : NvU1;
        Target_Sha           : NvU1;
        Target_Memerr        : NvU1;
        Target_Ctxsw_Error   : NvU1;
        Target_Gdma          : NvU1;
        Target_Icd           : NvU1;
        Target_Iopmp         : NvU1;
        Target_Core_Mismatch : NvU1;
        Target_Se_Sap        : NvU1;
        Target_Se_Pka        : NvU1;
        Target_Se_Rng        : NvU1;
        Target_Se_Keymover   : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_IRQDEST2_Register use record
        Host_Dma             at 0 range  0 ..  0;
        Host_Sha             at 0 range  1 ..  1;
        Host_Memerr          at 0 range  2 ..  2;
        Host_Ctxsw_Error     at 0 range  3 ..  3;
        Host_Gdma            at 0 range  4 ..  4;
        Host_Icd             at 0 range  6 ..  6;
        Host_Iopmp           at 0 range  7 ..  7;
        Host_Core_Mismatch   at 0 range  8 ..  8;
        Host_Se_Sap          at 0 range  9 ..  9;
        Host_Se_Pka          at 0 range 10 .. 10;
        Host_Se_Rng          at 0 range 11 .. 11;
        Host_Se_Keymover     at 0 range 12 .. 12;
        Target_Dma           at 0 range 16 .. 16;
        Target_Sha           at 0 range 17 .. 17;
        Target_Memerr        at 0 range 18 .. 18;
        Target_Ctxsw_Error   at 0 range 19 .. 19;
        Target_Gdma          at 0 range 20 .. 20;
        Target_Icd           at 0 range 22 .. 22;
        Target_Iopmp         at 0 range 23 .. 23;
        Target_Core_Mismatch at 0 range 24 .. 24;
        Target_Se_Sap        at 0 range 25 .. 25;
        Target_Se_Pka        at 0 range 26 .. 26;
        Target_Se_Rng        at 0 range 27 .. 27;
        Target_Se_Keymover   at 0 range 28 .. 28;
    end record;

    LW_PRGNLCL_FALCON_GPTMRINT_VAL_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_FALCON_GPTMRINT_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_GPTMRINT_Register use record
        Val at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_FALCON_GPTMRVAL_VAL_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_FALCON_GPTMRVAL_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_GPTMRVAL_Register use record
        Val at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_FALCON_GPTMRCTL_GPTMREN_INIT          : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_GPTMRCTL_GPTMREN_DISABLE       : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_GPTMRCTL_GPTMREN_ENABLE        : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_GPTMRCTL_GPTMR_SRC_MODE_INIT   : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_GPTMRCTL_GPTMR_SRC_MODE_ENGCLK : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_GPTMRCTL_GPTMR_SRC_MODE_PTIMER : constant NvU1 := 16#1#;

    type LW_PRGNLCL_FALCON_GPTMRCTL_Register is record
        Gptmren        : NvU1;
        Gptmr_Src_Mode : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_GPTMRCTL_Register use record
        Gptmren        at 0 range 0 .. 0;
        Gptmr_Src_Mode at 0 range 1 .. 1;
    end record;

    LW_PRGNLCL_FALCON_PTIMER0_VAL_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_FALCON_PTIMER0_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_PTIMER0_Register use record
        Val at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_FALCON_PTIMER1_VAL_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_FALCON_PTIMER1_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_PTIMER1_Register use record
        Val at 0 range 0 .. 31;
    end record;

    type LW_PRGNLCL_FALCON_PTIMER_CTL_SEL_Field is (SEL_SYSTEM_PTIMER, SEL_LOCAL_PTIMER) with
        Size => 1;
    for LW_PRGNLCL_FALCON_PTIMER_CTL_SEL_Field use (SEL_SYSTEM_PTIMER => 16#0#, SEL_LOCAL_PTIMER => 16#1#);

    type LW_PRGNLCL_FALCON_PTIMER_CTL_Register is record
        Sel : LW_PRGNLCL_FALCON_PTIMER_CTL_SEL_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_PTIMER_CTL_Register use record
        Sel at 0 range 0 .. 0;
    end record;

    LW_PRGNLCL_FALCON_WDTMRVAL_VAL_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_FALCON_WDTMRVAL_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_WDTMRVAL_Register use record
        Val at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_FALCON_WDTMRCTL_WDTMREN_INIT          : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_WDTMRCTL_WDTMREN_DISABLE       : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_WDTMRCTL_WDTMREN_ENABLE        : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_WDTMRCTL_WDTMR_SRC_MODE_INIT   : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_WDTMRCTL_WDTMR_SRC_MODE_ENGCLK : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_WDTMRCTL_WDTMR_SRC_MODE_PTIMER : constant NvU1 := 16#1#;
    type LW_PRGNLCL_FALCON_WDTMRCTL_TRIGGER_RESET_Field is (RESET_DISABLE, RESET_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_WDTMRCTL_TRIGGER_RESET_Field use (RESET_DISABLE => 16#0#, RESET_ENABLE => 16#1#);

    type LW_PRGNLCL_FALCON_WDTMRCTL_Register is record
        Wdtmren        : NvU1;
        Wdtmr_Src_Mode : NvU1;
        Trigger_Reset  : LW_PRGNLCL_FALCON_WDTMRCTL_TRIGGER_RESET_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_WDTMRCTL_Register use record
        Wdtmren        at 0 range 0 .. 0;
        Wdtmr_Src_Mode at 0 range 1 .. 1;
        Trigger_Reset  at 0 range 4 .. 4;
    end record;

    type LW_PRGNLCL_FALCON_MTHDDATA_Register is record
        Data : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_MTHDDATA_Register use record
        Data at 0 range 0 .. 31;
    end record;

    type LW_PRGNLCL_FALCON_MTHDID_PRIV_Field is (PRIV_DISABLE, PRIV_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_MTHDID_PRIV_Field use (PRIV_DISABLE => 16#0#, PRIV_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_MTHDID_WPEND_Field is (WPEND_DONE, WPEND_PENDING) with
        Size => 1;
    for LW_PRGNLCL_FALCON_MTHDID_WPEND_Field use (WPEND_DONE => 16#0#, WPEND_PENDING => 16#1#);

    type LW_PRGNLCL_FALCON_MTHDID_Register is record
        Id    : NvU12;
        Subch : NvU3;
        Priv  : LW_PRGNLCL_FALCON_MTHDID_PRIV_Field;
        Wpend : LW_PRGNLCL_FALCON_MTHDID_WPEND_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_MTHDID_Register use record
        Id    at 0 range  0 .. 11;
        Subch at 0 range 12 .. 14;
        Priv  at 0 range 15 .. 15;
        Wpend at 0 range 16 .. 16;
    end record;

    type LW_PRGNLCL_FALCON_MTHDWDAT_Register is record
        Data : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_MTHDWDAT_Register use record
        Data at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_FALCON_MTHDCOUNT_COUNT_INIT : constant NvU16 := 16#0#;

    type LW_PRGNLCL_FALCON_MTHDCOUNT_Register is record
        Count : NvU16;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_MTHDCOUNT_Register use record
        Count at 0 range 0 .. 15;
    end record;

    type LW_PRGNLCL_FALCON_MTHDPOP_POP_Field is (POP_FALSE, POP_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_MTHDPOP_POP_Field use (POP_FALSE => 16#0#, POP_TRUE => 16#1#);

    type LW_PRGNLCL_FALCON_MTHDPOP_Register is record
        Pop : LW_PRGNLCL_FALCON_MTHDPOP_POP_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_MTHDPOP_Register use record
        Pop at 0 range 0 .. 0;
    end record;

    LW_PRGNLCL_FALCON_MTHDRAMSZ_RAMSZ_INIT : constant NvU16 := 16#0#;

    type LW_PRGNLCL_FALCON_MTHDRAMSZ_Register is record
        Ramsz : NvU16;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_MTHDRAMSZ_Register use record
        Ramsz at 0 range 0 .. 15;
    end record;

    LW_PRGNLCL_FALCON_CURCTX_CTXVLD_INIT               : constant NvU1  := 16#0#;
    LW_PRGNLCL_FALCON_CURCTX_CTXVLD_FALSE              : constant NvU1  := 16#0#;
    LW_PRGNLCL_FALCON_CURCTX_CTXVLD_TRUE               : constant NvU1  := 16#1#;
    LW_PRGNLCL_FALCON_CURCTX_CTXTGT_INIT               : constant NvU2  := 16#0#;
    LW_PRGNLCL_FALCON_CURCTX_CTXTGT_LOCAL_FB           : constant NvU2  := 16#0#;
    LW_PRGNLCL_FALCON_CURCTX_CTXTGT_COHERENT_SYSMEM    : constant NvU2  := 16#2#;
    LW_PRGNLCL_FALCON_CURCTX_CTXTGT_NONCOHERENT_SYSMEM : constant NvU2  := 16#3#;
    LW_PRGNLCL_FALCON_CURCTX_CTXPTR_INIT               : constant NvU28 := 16#0#;

    type LW_PRGNLCL_FALCON_CURCTX_Register is record
        Ctxvld : NvU1;
        Ctxtgt : NvU2;
        Ctxptr : NvU28;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_CURCTX_Register use record
        Ctxvld at 0 range 30 .. 30;
        Ctxtgt at 0 range 28 .. 29;
        Ctxptr at 0 range  0 .. 27;
    end record;

    LW_PRGNLCL_FALCON_NXTCTX_CTXVLD_INIT               : constant NvU1  := 16#0#;
    LW_PRGNLCL_FALCON_NXTCTX_CTXVLD_FALSE              : constant NvU1  := 16#0#;
    LW_PRGNLCL_FALCON_NXTCTX_CTXVLD_TRUE               : constant NvU1  := 16#1#;
    LW_PRGNLCL_FALCON_NXTCTX_CTXTGT_INIT               : constant NvU2  := 16#0#;
    LW_PRGNLCL_FALCON_NXTCTX_CTXTGT_LOCAL_FB           : constant NvU2  := 16#0#;
    LW_PRGNLCL_FALCON_NXTCTX_CTXTGT_COHERENT_SYSMEM    : constant NvU2  := 16#2#;
    LW_PRGNLCL_FALCON_NXTCTX_CTXTGT_NONCOHERENT_SYSMEM : constant NvU2  := 16#3#;
    LW_PRGNLCL_FALCON_NXTCTX_CTXPTR_INIT               : constant NvU28 := 16#0#;

    type LW_PRGNLCL_FALCON_NXTCTX_Register is record
        Ctxvld : NvU1;
        Ctxtgt : NvU2;
        Ctxptr : NvU28;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_NXTCTX_Register use record
        Ctxvld at 0 range 30 .. 30;
        Ctxtgt at 0 range 28 .. 29;
        Ctxptr at 0 range  0 .. 27;
    end record;

    type LW_PRGNLCL_FALCON_CTXACK_SAVE_ACK_Field is (ACK_CLEAR, ACK_SET) with
        Size => 1;
    for LW_PRGNLCL_FALCON_CTXACK_SAVE_ACK_Field use (ACK_CLEAR => 16#0#, ACK_SET => 16#1#);
    type LW_PRGNLCL_FALCON_CTXACK_REST_ACK_Field is (ACK_CLEAR, ACK_SET) with
        Size => 1;
    for LW_PRGNLCL_FALCON_CTXACK_REST_ACK_Field use (ACK_CLEAR => 16#0#, ACK_SET => 16#1#);

    type LW_PRGNLCL_FALCON_CTXACK_Register is record
        Save_Ack : LW_PRGNLCL_FALCON_CTXACK_SAVE_ACK_Field;
        Rest_Ack : LW_PRGNLCL_FALCON_CTXACK_REST_ACK_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_CTXACK_Register use record
        Save_Ack at 0 range 0 .. 0;
        Rest_Ack at 0 range 1 .. 1;
    end record;

    LW_PRGNLCL_FALCON_CURCTX2_CTXPTR_HI_INIT : constant NvU12 := 16#0#;
    LW_PRGNLCL_FALCON_CURCTX2_CTXGFID_INIT   : constant NvU6  := 16#0#;

    type LW_PRGNLCL_FALCON_CURCTX2_Register is record
        Ctxptr_Hi : NvU12;
        Ctxgfid   : NvU6;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_CURCTX2_Register use record
        Ctxptr_Hi at 0 range 16 .. 27;
        Ctxgfid   at 0 range  0 ..  5;
    end record;

    LW_PRGNLCL_FALCON_NXTCTX2_CTXPTR_HI_INIT : constant NvU12 := 16#0#;
    LW_PRGNLCL_FALCON_NXTCTX2_CTXGFID_INIT   : constant NvU6  := 16#0#;

    type LW_PRGNLCL_FALCON_NXTCTX2_Register is record
        Ctxptr_Hi : NvU12;
        Ctxgfid   : NvU6;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_NXTCTX2_Register use record
        Ctxptr_Hi at 0 range 16 .. 27;
        Ctxgfid   at 0 range  0 ..  5;
    end record;

    type LW_PRGNLCL_FALCON_CTXSW_ERROR_CTX_LOAD_AFTER_HALT_Field is (HALT_FALSE, HALT_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_CTXSW_ERROR_CTX_LOAD_AFTER_HALT_Field use (HALT_FALSE => 16#0#, HALT_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_CTXSW_ERROR_RESET_BEFORE_CTXILW_Field is (CTXILW_FALSE, CTXILW_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_CTXSW_ERROR_RESET_BEFORE_CTXILW_Field use (CTXILW_FALSE => 16#0#, CTXILW_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_CTXSW_ERROR_CTX_LOAD_AFTER_HALT_DISABLE_Field is (DISABLE_FALSE, DISABLE_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_CTXSW_ERROR_CTX_LOAD_AFTER_HALT_DISABLE_Field use (DISABLE_FALSE => 16#0#, DISABLE_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_CTXSW_ERROR_RESET_BEFORE_CTXILW_DISABLE_Field is (DISABLE_FALSE, DISABLE_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_CTXSW_ERROR_RESET_BEFORE_CTXILW_DISABLE_Field use (DISABLE_FALSE => 16#0#, DISABLE_TRUE => 16#1#);

    type LW_PRGNLCL_FALCON_CTXSW_ERROR_Register is record
        Ctx_Load_After_Halt         : LW_PRGNLCL_FALCON_CTXSW_ERROR_CTX_LOAD_AFTER_HALT_Field;
        Reset_Before_Ctxinv         : LW_PRGNLCL_FALCON_CTXSW_ERROR_RESET_BEFORE_CTXILW_Field;
        Ctx_Load_After_Halt_Disable : LW_PRGNLCL_FALCON_CTXSW_ERROR_CTX_LOAD_AFTER_HALT_DISABLE_Field;
        Reset_Before_Ctxinv_Disable : LW_PRGNLCL_FALCON_CTXSW_ERROR_RESET_BEFORE_CTXILW_DISABLE_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_CTXSW_ERROR_Register use record
        Ctx_Load_After_Halt         at 0 range  0 ..  0;
        Reset_Before_Ctxinv         at 0 range  1 ..  1;
        Ctx_Load_After_Halt_Disable at 0 range 16 .. 16;
        Reset_Before_Ctxinv_Disable at 0 range 17 .. 17;
    end record;

    LW_PRGNLCL_FALCON_MAILBOX0_DATA_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_FALCON_MAILBOX0_Register is record
        Data : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_MAILBOX0_Register use record
        Data at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_FALCON_MAILBOX1_DATA_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_FALCON_MAILBOX1_Register is record
        Data : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_MAILBOX1_Register use record
        Data at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_FALCON_ITFEN_CTXEN_INIT                    : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_ITFEN_CTXEN_DISABLE                 : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_ITFEN_CTXEN_ENABLE                  : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_ITFEN_MTHDEN_INIT                   : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_ITFEN_MTHDEN_DISABLE                : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_ITFEN_MTHDEN_ENABLE                 : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_ITFEN_PRIV_POSTWR_INIT              : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_ITFEN_PRIV_POSTWR_FALSE             : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_ITFEN_PRIV_POSTWR_TRUE              : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_ITFEN_PRIV_SECWL_CPUCTL_ALIAS_INIT  : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_ITFEN_PRIV_SECWL_CPUCTL_ALIAS_FALSE : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_ITFEN_PRIV_SECWL_CPUCTL_ALIAS_TRUE  : constant NvU1 := 16#1#;
    type LW_PRGNLCL_FALCON_ITFEN_CTXSW_NACK_Field is (NACK_FALSE, NACK_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_ITFEN_CTXSW_NACK_Field use (NACK_FALSE => 16#0#, NACK_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_ITFEN_HIRQ_NONSTALL_EDGE_Field is (EDGE_FALSE, EDGE_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_ITFEN_HIRQ_NONSTALL_EDGE_Field use (EDGE_FALSE => 16#0#, EDGE_TRUE => 16#1#);

    type LW_PRGNLCL_FALCON_ITFEN_Register is record
        Ctxen                   : NvU1;
        Mthden                  : NvU1;
        Priv_Postwr             : NvU1;
        Priv_Secwl_Cpuctl_Alias : NvU1;
        Ctxsw_Nack              : LW_PRGNLCL_FALCON_ITFEN_CTXSW_NACK_Field;
        Hirq_Nonstall_Edge      : LW_PRGNLCL_FALCON_ITFEN_HIRQ_NONSTALL_EDGE_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_ITFEN_Register use record
        Ctxen                   at 0 range  0 ..  0;
        Mthden                  at 0 range  1 ..  1;
        Priv_Postwr             at 0 range  2 ..  2;
        Priv_Secwl_Cpuctl_Alias at 0 range  4 ..  4;
        Ctxsw_Nack              at 0 range  8 ..  8;
        Hirq_Nonstall_Edge      at 0 range 12 .. 12;
    end record;

    type LW_PRGNLCL_FALCON_IDLESTATE_FALCON_BUSY_Field is (BUSY_FALSE, BUSY_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IDLESTATE_FALCON_BUSY_Field use (BUSY_FALSE => 16#0#, BUSY_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_IDLESTATE_ENGINE_BUSY_CYA_Field is (CYA_HW, CYA_RESERVED, CYA_SW_BUSY, CYA_SW_IDLE) with
        Size => 2;
    for LW_PRGNLCL_FALCON_IDLESTATE_ENGINE_BUSY_CYA_Field use (CYA_HW => 16#0#, CYA_RESERVED => 16#1#, CYA_SW_BUSY => 16#2#, CYA_SW_IDLE => 16#3#);
    type LW_PRGNLCL_FALCON_IDLESTATE_RISCV_BUSY_Field is (BUSY_FALSE, BUSY_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IDLESTATE_RISCV_BUSY_Field use (BUSY_FALSE => 16#0#, BUSY_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_IDLESTATE_INT_BUSY_SHA_Field is (SHA_FALSE, SHA_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IDLESTATE_INT_BUSY_SHA_Field use (SHA_FALSE => 16#0#, SHA_TRUE => 16#1#);

    type LW_PRGNLCL_FALCON_IDLESTATE_Register is record
        Falcon_Busy     : LW_PRGNLCL_FALCON_IDLESTATE_FALCON_BUSY_Field;
        Ext_Busy        : NvU15;
        Engine_Busy_Cya : LW_PRGNLCL_FALCON_IDLESTATE_ENGINE_BUSY_CYA_Field;
        Riscv_Busy      : LW_PRGNLCL_FALCON_IDLESTATE_RISCV_BUSY_Field;
        Int_Busy_Sha    : LW_PRGNLCL_FALCON_IDLESTATE_INT_BUSY_SHA_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_IDLESTATE_Register use record
        Falcon_Busy     at 0 range  0 ..  0;
        Ext_Busy        at 0 range  1 .. 15;
        Engine_Busy_Cya at 0 range 16 .. 17;
        Riscv_Busy      at 0 range 20 .. 20;
        Int_Busy_Sha    at 0 range 24 .. 24;
    end record;

    type LW_PRGNLCL_FALCON_FHSTATE_FALCON_HALTED_Field is (HALTED_FALSE, HALTED_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_FHSTATE_FALCON_HALTED_Field use (HALTED_FALSE => 16#0#, HALTED_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_FHSTATE_ENGINE_FAULTED_Field is (FAULTED_FALSE, FAULTED_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_FHSTATE_ENGINE_FAULTED_Field use (FAULTED_FALSE => 16#0#, FAULTED_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_FHSTATE_STALL_REQ_Field is (REQ_FALSE, REQ_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_FHSTATE_STALL_REQ_Field use (REQ_FALSE => 16#0#, REQ_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_FHSTATE_RISCV_HALTED_Field is (HALTED_FALSE, HALTED_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_FHSTATE_RISCV_HALTED_Field use (HALTED_FALSE => 16#0#, HALTED_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_FHSTATE_MSG_INTR_HALTED_Field is (HALTED_FALSE, HALTED_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_FHSTATE_MSG_INTR_HALTED_Field use (HALTED_FALSE => 16#0#, HALTED_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_FHSTATE_P2P_HALTED_Field is (HALTED_FALSE, HALTED_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_FHSTATE_P2P_HALTED_Field use (HALTED_FALSE => 16#0#, HALTED_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_FHSTATE_DIO_HALTED_Field is (HALTED_FALSE, HALTED_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_FHSTATE_DIO_HALTED_Field use (HALTED_FALSE => 16#0#, HALTED_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_FHSTATE_CTXMTHD_IDLE_Field is (IDLE_FALSE, IDLE_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_FHSTATE_CTXMTHD_IDLE_Field use (IDLE_FALSE => 16#0#, IDLE_TRUE => 16#1#);

    type LW_PRGNLCL_FALCON_FHSTATE_Register is record
        Falcon_Halted   : LW_PRGNLCL_FALCON_FHSTATE_FALCON_HALTED_Field;
        Ext_Halted      : NvU15;
        Engine_Faulted  : LW_PRGNLCL_FALCON_FHSTATE_ENGINE_FAULTED_Field;
        Stall_Req       : LW_PRGNLCL_FALCON_FHSTATE_STALL_REQ_Field;
        Riscv_Halted    : LW_PRGNLCL_FALCON_FHSTATE_RISCV_HALTED_Field;
        Msg_Intr_Halted : LW_PRGNLCL_FALCON_FHSTATE_MSG_INTR_HALTED_Field;
        P2p_Halted      : LW_PRGNLCL_FALCON_FHSTATE_P2P_HALTED_Field;
        Dio_Halted      : LW_PRGNLCL_FALCON_FHSTATE_DIO_HALTED_Field;
        Ctxmthd_Idle    : LW_PRGNLCL_FALCON_FHSTATE_CTXMTHD_IDLE_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_FHSTATE_Register use record
        Falcon_Halted   at 0 range  0 ..  0;
        Ext_Halted      at 0 range  1 .. 15;
        Engine_Faulted  at 0 range 16 .. 16;
        Stall_Req       at 0 range 17 .. 17;
        Riscv_Halted    at 0 range 20 .. 20;
        Msg_Intr_Halted at 0 range 21 .. 21;
        P2p_Halted      at 0 range 22 .. 22;
        Dio_Halted      at 0 range 23 .. 23;
        Ctxmthd_Idle    at 0 range 24 .. 24;
    end record;

    LW_PRGNLCL_FALCON_PRIVSTATE_PRIV_INIT                : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_PRIVSTATE_PRIV_DISABLE             : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_PRIVSTATE_PRIV_ENABLE              : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_PRIVSTATE_VPR_FORCE_STICKY_INIT    : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_PRIVSTATE_VPR_FORCE_STICKY_DISABLE : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_PRIVSTATE_VPR_FORCE_STICKY_ENABLE  : constant NvU1 := 16#1#;

    type LW_PRGNLCL_FALCON_PRIVSTATE_Register is record
        Priv             : NvU1;
        Vpr_Force_Sticky : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_PRIVSTATE_Register use record
        Priv             at 0 range 0 .. 0;
        Vpr_Force_Sticky at 0 range 1 .. 1;
    end record;

    type LW_PRGNLCL_FALCON_SFTRESET_EXT_Field is (EXT_FALSE, EXT_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SFTRESET_EXT_Field use (EXT_FALSE => 16#0#, EXT_TRUE => 16#1#);

    type LW_PRGNLCL_FALCON_SFTRESET_Register is record
        Ext : LW_PRGNLCL_FALCON_SFTRESET_EXT_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_SFTRESET_Register use record
        Ext at 0 range 0 .. 0;
    end record;

    type LW_PRGNLCL_FALCON_ENGCTL_ILW_CONTEXT_Field is (CONTEXT_FALSE, CONTEXT_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_ENGCTL_ILW_CONTEXT_Field use (CONTEXT_FALSE => 16#0#, CONTEXT_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_ENGCTL_SET_STALLREQ_Field is (STALLREQ_FALSE, STALLREQ_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_ENGCTL_SET_STALLREQ_Field use (STALLREQ_FALSE => 16#0#, STALLREQ_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_ENGCTL_CLR_STALLREQ_Field is (STALLREQ_FALSE, STALLREQ_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_ENGCTL_CLR_STALLREQ_Field use (STALLREQ_FALSE => 16#0#, STALLREQ_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_ENGCTL_SWITCH_CONTEXT_Field is (CONTEXT_FALSE, CONTEXT_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_ENGCTL_SWITCH_CONTEXT_Field use (CONTEXT_FALSE => 16#0#, CONTEXT_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_ENGCTL_STALLREQ_Field is (STALLREQ_FALSE, STALLREQ_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_ENGCTL_STALLREQ_Field use (STALLREQ_FALSE => 16#0#, STALLREQ_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_ENGCTL_STALLACK_Field is (STALLACK_FALSE, STALLACK_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_ENGCTL_STALLACK_Field use (STALLACK_FALSE => 16#0#, STALLACK_TRUE => 16#1#);

    type LW_PRGNLCL_FALCON_ENGCTL_Register is record
        Inv_Context    : LW_PRGNLCL_FALCON_ENGCTL_ILW_CONTEXT_Field;
        Set_Stallreq   : LW_PRGNLCL_FALCON_ENGCTL_SET_STALLREQ_Field;
        Clr_Stallreq   : LW_PRGNLCL_FALCON_ENGCTL_CLR_STALLREQ_Field;
        Switch_Context : LW_PRGNLCL_FALCON_ENGCTL_SWITCH_CONTEXT_Field;
        Stallreq       : LW_PRGNLCL_FALCON_ENGCTL_STALLREQ_Field;
        Stallack       : LW_PRGNLCL_FALCON_ENGCTL_STALLACK_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_ENGCTL_Register use record
        Inv_Context    at 0 range 0 .. 0;
        Set_Stallreq   at 0 range 1 .. 1;
        Clr_Stallreq   at 0 range 2 .. 2;
        Switch_Context at 0 range 3 .. 3;
        Stallreq       at 0 range 8 .. 8;
        Stallack       at 0 range 9 .. 9;
    end record;

    LW_PRGNLCL_FALCON_ADDR_LSB_INIT : constant NvU6 := 16#0#;
    LW_PRGNLCL_FALCON_ADDR_MSB_INIT : constant NvU6 := 16#0#;

    type LW_PRGNLCL_FALCON_ADDR_Register is record
        Lsb : NvU6;
        Msb : NvU6;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_ADDR_Register use record
        Lsb at 0 range 0 ..  5;
        Msb at 0 range 6 .. 11;
    end record;

    type LW_PRGNLCL_FALCON_PRICFG_Register is record
        Pricfg_All : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_PRICFG_Register use record
        Pricfg_All at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_FALCON_DMACTL_REQUIRE_CTX_INIT  : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_DMACTL_REQUIRE_CTX_TRUE  : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_DMACTL_REQUIRE_CTX_FALSE : constant NvU1 := 16#0#;
    type LW_PRGNLCL_FALCON_DMACTL_DMEM_SCRUBBING_Field is (SCRUBBING_DONE, SCRUBBING_PENDING) with
        Size => 1;
    for LW_PRGNLCL_FALCON_DMACTL_DMEM_SCRUBBING_Field use (SCRUBBING_DONE => 16#0#, SCRUBBING_PENDING => 16#1#);
    type LW_PRGNLCL_FALCON_DMACTL_IMEM_SCRUBBING_Field is (SCRUBBING_DONE, SCRUBBING_PENDING) with
        Size => 1;
    for LW_PRGNLCL_FALCON_DMACTL_IMEM_SCRUBBING_Field use (SCRUBBING_DONE => 16#0#, SCRUBBING_PENDING => 16#1#);
    type LW_PRGNLCL_FALCON_DMACTL_DCACHE_INVALIDATING_Field is (INVALIDATING_DONE, INVALIDATING_PENDING) with
        Size => 1;
    for LW_PRGNLCL_FALCON_DMACTL_DCACHE_INVALIDATING_Field use (INVALIDATING_DONE => 16#0#, INVALIDATING_PENDING => 16#1#);
    type LW_PRGNLCL_FALCON_DMACTL_ICACHE_INVALIDATING_Field is (INVALIDATING_DONE, INVALIDATING_PENDING) with
        Size => 1;
    for LW_PRGNLCL_FALCON_DMACTL_ICACHE_INVALIDATING_Field use (INVALIDATING_DONE => 16#0#, INVALIDATING_PENDING => 16#1#);

    type LW_PRGNLCL_FALCON_DMACTL_Register is record
        Require_Ctx         : NvU1;
        Dmem_Scrubbing      : LW_PRGNLCL_FALCON_DMACTL_DMEM_SCRUBBING_Field;
        Imem_Scrubbing      : LW_PRGNLCL_FALCON_DMACTL_IMEM_SCRUBBING_Field;
        Secure_Stat         : NvU1;
        Dcache_Invalidating : LW_PRGNLCL_FALCON_DMACTL_DCACHE_INVALIDATING_Field;
        Icache_Invalidating : LW_PRGNLCL_FALCON_DMACTL_ICACHE_INVALIDATING_Field;
        Dmaq_Num            : NvU5;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DMACTL_Register use record
        Require_Ctx         at 0 range  0 ..  0;
        Dmem_Scrubbing      at 0 range  1 ..  1;
        Imem_Scrubbing      at 0 range  2 ..  2;
        Secure_Stat         at 0 range  7 ..  7;
        Dcache_Invalidating at 0 range  8 ..  8;
        Icache_Invalidating at 0 range  9 ..  9;
        Dmaq_Num            at 0 range 16 .. 20;
    end record;

    LW_PRGNLCL_FALCON_DMATRFBASE_BASE_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_FALCON_DMATRFBASE_Register is record
        Base : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DMATRFBASE_Register use record
        Base at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_FALCON_DMATRFMOFFS_OFFS_INIT : constant NvU24 := 16#0#;

    type LW_PRGNLCL_FALCON_DMATRFMOFFS_Register is record
        Offs : NvU24;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DMATRFMOFFS_Register use record
        Offs at 0 range 0 .. 23;
    end record;

    type LW_PRGNLCL_FALCON_DMATRFCMD_FULL_Field is (FULL_FALSE, FULL_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_DMATRFCMD_FULL_Field use (FULL_FALSE => 16#0#, FULL_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_DMATRFCMD_IDLE_Field is (IDLE_FALSE, IDLE_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_DMATRFCMD_IDLE_Field use (IDLE_FALSE => 16#0#, IDLE_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_DMATRFCMD_IMEM_Field is (IMEM_FALSE, IMEM_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_DMATRFCMD_IMEM_Field use (IMEM_FALSE => 16#0#, IMEM_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_DMATRFCMD_WRITE_Field is (WRITE_FALSE, WRITE_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_DMATRFCMD_WRITE_Field use (WRITE_FALSE => 16#0#, WRITE_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_DMATRFCMD_NOTIFY_Field is (NOTIFY_FALSE, NOTIFY_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_DMATRFCMD_NOTIFY_Field use (NOTIFY_FALSE => 16#0#, NOTIFY_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_DMATRFCMD_SIZE_Field is (SIZE_4B, SIZE_8B, SIZE_16B, SIZE_32B, SIZE_64B, SIZE_128B, SIZE_256B) with
        Size => 3;
    for LW_PRGNLCL_FALCON_DMATRFCMD_SIZE_Field use
        (SIZE_4B => 16#0#, SIZE_8B => 16#1#, SIZE_16B => 16#2#, SIZE_32B => 16#3#, SIZE_64B => 16#4#, SIZE_128B => 16#5#, SIZE_256B => 16#6#);
    LW_PRGNLCL_FALCON_DMATRFCMD_SET_DMTAG_INIT  : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_DMATRFCMD_SET_DMTAG_TRUE  : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_DMATRFCMD_SET_DMTAG_FALSE : constant NvU1 := 16#0#;
    type LW_PRGNLCL_FALCON_DMATRFCMD_ERROR_Field is (ERROR_FALSE, ERROR_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_DMATRFCMD_ERROR_Field use (ERROR_FALSE => 16#0#, ERROR_TRUE => 16#1#);
    LW_PRGNLCL_FALCON_DMATRFCMD_SET_DMLVL_INIT  : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_DMATRFCMD_SET_DMLVL_TRUE  : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_DMATRFCMD_SET_DMLVL_FALSE : constant NvU1 := 16#0#;

    type LW_PRGNLCL_FALCON_DMATRFCMD_Register is record
        Full      : LW_PRGNLCL_FALCON_DMATRFCMD_FULL_Field;
        Idle      : LW_PRGNLCL_FALCON_DMATRFCMD_IDLE_Field;
        Sec       : NvU2;
        Imem      : LW_PRGNLCL_FALCON_DMATRFCMD_IMEM_Field;
        Write     : LW_PRGNLCL_FALCON_DMATRFCMD_WRITE_Field;
        Notify    : LW_PRGNLCL_FALCON_DMATRFCMD_NOTIFY_Field;
        Size      : LW_PRGNLCL_FALCON_DMATRFCMD_SIZE_Field;
        Ctxdma    : NvU3;
        Set_Dmtag : NvU1;
        Error     : LW_PRGNLCL_FALCON_DMATRFCMD_ERROR_Field;
        Lvl       : NvU3;
        Set_Dmlvl : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DMATRFCMD_Register use record
        Full      at 0 range  0 ..  0;
        Idle      at 0 range  1 ..  1;
        Sec       at 0 range  2 ..  3;
        Imem      at 0 range  4 ..  4;
        Write     at 0 range  5 ..  5;
        Notify    at 0 range  6 ..  6;
        Size      at 0 range  8 .. 10;
        Ctxdma    at 0 range 12 .. 14;
        Set_Dmtag at 0 range 16 .. 16;
        Error     at 0 range 20 .. 20;
        Lvl       at 0 range 24 .. 26;
        Set_Dmlvl at 0 range 27 .. 27;
    end record;

    LW_PRGNLCL_FALCON_DMATRFFBOFFS_OFFS_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_FALCON_DMATRFFBOFFS_Register is record
        Offs : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DMATRFFBOFFS_Register use record
        Offs at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_FALCON_DMAPOLL_FB_CFG_W_FENCE_INIT  : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_DMAPOLL_FB_CFG_W_FENCE_TRUE  : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_DMAPOLL_FB_CFG_W_FENCE_FALSE : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_DMAPOLL_FB_CFG_R_FENCE_INIT  : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_DMAPOLL_FB_CFG_R_FENCE_TRUE  : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_DMAPOLL_FB_CFG_R_FENCE_FALSE : constant NvU1 := 16#0#;
    type LW_PRGNLCL_FALCON_DMAPOLL_FB_DMA_ACTIVE_Field is (ACTIVE_FALSE, ACTIVE_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_DMAPOLL_FB_DMA_ACTIVE_Field use (ACTIVE_FALSE => 16#0#, ACTIVE_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_DMAPOLL_FB_FENCE_ACTIVE_Field is (ACTIVE_FALSE, ACTIVE_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_DMAPOLL_FB_FENCE_ACTIVE_Field use (ACTIVE_FALSE => 16#0#, ACTIVE_TRUE => 16#1#);

    type LW_PRGNLCL_FALCON_DMAPOLL_FB_Register is record
        Rcount       : NvU8;
        Wcount       : NvU8;
        Cfg_W_Fence  : NvU1;
        Cfg_R_Fence  : NvU1;
        Dma_Active   : LW_PRGNLCL_FALCON_DMAPOLL_FB_DMA_ACTIVE_Field;
        Fence_Active : LW_PRGNLCL_FALCON_DMAPOLL_FB_FENCE_ACTIVE_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DMAPOLL_FB_Register use record
        Rcount       at 0 range 24 .. 31;
        Wcount       at 0 range 16 .. 23;
        Cfg_W_Fence  at 0 range  5 ..  5;
        Cfg_R_Fence  at 0 range  4 ..  4;
        Dma_Active   at 0 range  1 ..  1;
        Fence_Active at 0 range  0 ..  0;
    end record;

    LW_PRGNLCL_FALCON_DMAPOLL_CP_CFG_W_FENCE_INIT  : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_DMAPOLL_CP_CFG_W_FENCE_TRUE  : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_DMAPOLL_CP_CFG_W_FENCE_FALSE : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_DMAPOLL_CP_CFG_R_FENCE_INIT  : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_DMAPOLL_CP_CFG_R_FENCE_TRUE  : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_DMAPOLL_CP_CFG_R_FENCE_FALSE : constant NvU1 := 16#0#;
    type LW_PRGNLCL_FALCON_DMAPOLL_CP_DMA_ACTIVE_Field is (ACTIVE_FALSE, ACTIVE_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_DMAPOLL_CP_DMA_ACTIVE_Field use (ACTIVE_FALSE => 16#0#, ACTIVE_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_DMAPOLL_CP_FENCE_ACTIVE_Field is (ACTIVE_FALSE, ACTIVE_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_DMAPOLL_CP_FENCE_ACTIVE_Field use (ACTIVE_FALSE => 16#0#, ACTIVE_TRUE => 16#1#);

    type LW_PRGNLCL_FALCON_DMAPOLL_CP_Register is record
        Rcount       : NvU8;
        Wcount       : NvU8;
        Cfg_W_Fence  : NvU1;
        Cfg_R_Fence  : NvU1;
        Dma_Active   : LW_PRGNLCL_FALCON_DMAPOLL_CP_DMA_ACTIVE_Field;
        Fence_Active : LW_PRGNLCL_FALCON_DMAPOLL_CP_FENCE_ACTIVE_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DMAPOLL_CP_Register use record
        Rcount       at 0 range 24 .. 31;
        Wcount       at 0 range 16 .. 23;
        Cfg_W_Fence  at 0 range  5 ..  5;
        Cfg_R_Fence  at 0 range  4 ..  4;
        Dma_Active   at 0 range  1 ..  1;
        Fence_Active at 0 range  0 ..  0;
    end record;

    LW_PRGNLCL_FALCON_DMATRFBASE1_BASE_INIT : constant NvU17 := 16#0#;

    type LW_PRGNLCL_FALCON_DMATRFBASE1_Register is record
        Base : NvU17;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DMATRFBASE1_Register use record
        Base at 0 range 0 .. 16;
    end record;

    type LW_PRGNLCL_FALCON_DMAINFO_FINISHED_FBRD_LOW_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DMAINFO_FINISHED_FBRD_LOW_Register use record
        Val at 0 range 0 .. 31;
    end record;

    type LW_PRGNLCL_FALCON_DMAINFO_FINISHED_FBRD_HIGH_Register is record
        Val  : NvU31;
        Obit : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DMAINFO_FINISHED_FBRD_HIGH_Register use record
        Val  at 0 range  0 .. 30;
        Obit at 0 range 31 .. 31;
    end record;

    type LW_PRGNLCL_FALCON_DMAINFO_FINISHED_FBWR_LOW_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DMAINFO_FINISHED_FBWR_LOW_Register use record
        Val at 0 range 0 .. 31;
    end record;

    type LW_PRGNLCL_FALCON_DMAINFO_FINISHED_FBWR_HIGH_Register is record
        Val  : NvU31;
        Obit : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DMAINFO_FINISHED_FBWR_HIGH_Register use record
        Val  at 0 range  0 .. 30;
        Obit at 0 range 31 .. 31;
    end record;

    type LW_PRGNLCL_FALCON_DMAINFO_CURRENT_FBRD_LOW_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DMAINFO_CURRENT_FBRD_LOW_Register use record
        Val at 0 range 0 .. 31;
    end record;

    type LW_PRGNLCL_FALCON_DMAINFO_CURRENT_FBRD_HIGH_Register is record
        Val  : NvU31;
        Obit : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DMAINFO_CURRENT_FBRD_HIGH_Register use record
        Val  at 0 range  0 .. 30;
        Obit at 0 range 31 .. 31;
    end record;

    type LW_PRGNLCL_FALCON_DMAINFO_CURRENT_FBWR_LOW_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DMAINFO_CURRENT_FBWR_LOW_Register use record
        Val at 0 range 0 .. 31;
    end record;

    type LW_PRGNLCL_FALCON_DMAINFO_CURRENT_FBWR_HIGH_Register is record
        Val  : NvU31;
        Obit : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DMAINFO_CURRENT_FBWR_HIGH_Register use record
        Val  at 0 range  0 .. 30;
        Obit at 0 range 31 .. 31;
    end record;

    type LW_PRGNLCL_FALCON_DMAINFO_CTL_CLR_FBRD_Field is (FBRD_FALSE, FBRD_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_DMAINFO_CTL_CLR_FBRD_Field use (FBRD_FALSE => 16#0#, FBRD_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_DMAINFO_CTL_CLR_FBWR_Field is (FBWR_FALSE, FBWR_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_DMAINFO_CTL_CLR_FBWR_Field use (FBWR_FALSE => 16#0#, FBWR_TRUE => 16#1#);
    LW_PRGNLCL_FALCON_DMAINFO_CTL_INTR_ERR_COMPLETION_FALSE : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_DMAINFO_CTL_INTR_ERR_COMPLETION_TRUE  : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_DMAINFO_CTL_INTR_ERR_COMPLETION_CLR   : constant NvU1 := 16#1#;
    type LW_PRGNLCL_FALCON_DMAINFO_CTL_INTR_ERR_DMATYPE_Field is (DMATYPE_NORMAL, DMATYPE_TAGGED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_DMAINFO_CTL_INTR_ERR_DMATYPE_Field use (DMATYPE_NORMAL => 16#0#, DMATYPE_TAGGED => 16#1#);
    type LW_PRGNLCL_FALCON_DMAINFO_CTL_INTR_ERR_DMAREAD_Field is (DMAREAD_FALSE, DMAREAD_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_DMAINFO_CTL_INTR_ERR_DMAREAD_Field use (DMAREAD_FALSE => 16#0#, DMAREAD_TRUE => 16#1#);

    type LW_PRGNLCL_FALCON_DMAINFO_CTL_Register is record
        Clr_Fbrd            : LW_PRGNLCL_FALCON_DMAINFO_CTL_CLR_FBRD_Field;
        Clr_Fbwr            : LW_PRGNLCL_FALCON_DMAINFO_CTL_CLR_FBWR_Field;
        Intr_Err_Completion : NvU1;
        Intr_Err_Dmatype    : LW_PRGNLCL_FALCON_DMAINFO_CTL_INTR_ERR_DMATYPE_Field;
        Intr_Err_Dmaread    : LW_PRGNLCL_FALCON_DMAINFO_CTL_INTR_ERR_DMAREAD_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DMAINFO_CTL_Register use record
        Clr_Fbrd            at 0 range 0 .. 0;
        Clr_Fbwr            at 0 range 1 .. 1;
        Intr_Err_Completion at 0 range 2 .. 2;
        Intr_Err_Dmatype    at 0 range 3 .. 3;
        Intr_Err_Dmaread    at 0 range 4 .. 4;
    end record;

    type LW_PRGNLCL_FALCON_DMAINFO_ERR_TAG_HIGH_Register is record
        Val : NvU31;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DMAINFO_ERR_TAG_HIGH_Register use record
        Val at 0 range 0 .. 30;
    end record;

    type LW_PRGNLCL_FALCON_DMAINFO_ERR_TAG_LOW_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DMAINFO_ERR_TAG_LOW_Register use record
        Val at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_FALCON_IMEMC_OFFS_INIT   : constant NvU6  := 16#0#;
    LW_PRGNLCL_FALCON_IMEMC_BLK_INIT    : constant NvU16 := 16#0#;
    LW_PRGNLCL_FALCON_IMEMC_AINCW_INIT  : constant NvU1  := 16#0#;
    LW_PRGNLCL_FALCON_IMEMC_AINCW_TRUE  : constant NvU1  := 16#1#;
    LW_PRGNLCL_FALCON_IMEMC_AINCW_FALSE : constant NvU1  := 16#0#;
    LW_PRGNLCL_FALCON_IMEMC_AINCR_INIT  : constant NvU1  := 16#0#;
    LW_PRGNLCL_FALCON_IMEMC_AINCR_TRUE  : constant NvU1  := 16#1#;
    LW_PRGNLCL_FALCON_IMEMC_AINCR_FALSE : constant NvU1  := 16#0#;
    LW_PRGNLCL_FALCON_IMEMC_SECURE_INIT : constant NvU1  := 16#0#;
    type LW_PRGNLCL_FALCON_IMEMC_SEC_ATOMIC_Field is (ATOMIC_FALSE, ATOMIC_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IMEMC_SEC_ATOMIC_Field use (ATOMIC_FALSE => 16#0#, ATOMIC_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_IMEMC_SEC_WR_VIO_Field is (VIO_FALSE, VIO_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IMEMC_SEC_WR_VIO_Field use (VIO_FALSE => 16#0#, VIO_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_IMEMC_SEC_LOCK_Field is (LOCK_FALSE, LOCK_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IMEMC_SEC_LOCK_Field use (LOCK_FALSE => 16#0#, LOCK_TRUE => 16#1#);

    type LW_PRGNLCL_FALCON_IMEMC_Register is record
        Offs       : NvU6;
        Blk        : NvU16;
        Aincw      : NvU1;
        Aincr      : NvU1;
        Secure     : NvU1;
        Sec_Atomic : LW_PRGNLCL_FALCON_IMEMC_SEC_ATOMIC_Field;
        Sec_Wr_Vio : LW_PRGNLCL_FALCON_IMEMC_SEC_WR_VIO_Field;
        Sec_Lock   : LW_PRGNLCL_FALCON_IMEMC_SEC_LOCK_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_IMEMC_Register use record
        Offs       at 0 range  2 ..  7;
        Blk        at 0 range  8 .. 23;
        Aincw      at 0 range 24 .. 24;
        Aincr      at 0 range 25 .. 25;
        Secure     at 0 range 28 .. 28;
        Sec_Atomic at 0 range 29 .. 29;
        Sec_Wr_Vio at 0 range 30 .. 30;
        Sec_Lock   at 0 range 31 .. 31;
    end record;

    type LW_PRGNLCL_FALCON_IMEMD_Register is record
        Data : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_IMEMD_Register use record
        Data at 0 range 0 .. 31;
    end record;

    type LW_PRGNLCL_FALCON_IMEMT_Register is record
        Tag : NvU16;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_IMEMT_Register use record
        Tag at 0 range 0 .. 15;
    end record;

    LW_PRGNLCL_FALCON_DMEMC_ADDRESS_INIT : constant NvU24 := 16#0#;
    LW_PRGNLCL_FALCON_DMEMC_AINCW_INIT   : constant NvU1  := 16#0#;
    LW_PRGNLCL_FALCON_DMEMC_AINCW_TRUE   : constant NvU1  := 16#1#;
    LW_PRGNLCL_FALCON_DMEMC_AINCW_FALSE  : constant NvU1  := 16#0#;
    LW_PRGNLCL_FALCON_DMEMC_AINCR_INIT   : constant NvU1  := 16#0#;
    LW_PRGNLCL_FALCON_DMEMC_AINCR_TRUE   : constant NvU1  := 16#1#;
    LW_PRGNLCL_FALCON_DMEMC_AINCR_FALSE  : constant NvU1  := 16#0#;
    LW_PRGNLCL_FALCON_DMEMC_SETTAG_INIT  : constant NvU1  := 16#0#;
    LW_PRGNLCL_FALCON_DMEMC_SETTAG_TRUE  : constant NvU1  := 16#1#;
    LW_PRGNLCL_FALCON_DMEMC_SETTAG_FALSE : constant NvU1  := 16#0#;
    LW_PRGNLCL_FALCON_DMEMC_SETLVL_INIT  : constant NvU1  := 16#0#;
    LW_PRGNLCL_FALCON_DMEMC_SETLVL_TRUE  : constant NvU1  := 16#1#;
    LW_PRGNLCL_FALCON_DMEMC_SETLVL_FALSE : constant NvU1  := 16#0#;
    LW_PRGNLCL_FALCON_DMEMC_VA_INIT      : constant NvU1  := 16#0#;
    LW_PRGNLCL_FALCON_DMEMC_VA_TRUE      : constant NvU1  := 16#1#;
    LW_PRGNLCL_FALCON_DMEMC_VA_FALSE     : constant NvU1  := 16#0#;
    type LW_PRGNLCL_FALCON_DMEMC_MISS_Field is (MISS_FALSE, MISS_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_DMEMC_MISS_Field use (MISS_FALSE => 16#0#, MISS_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_DMEMC_MULTIHIT_Field is (MULTIHIT_FALSE, MULTIHIT_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_DMEMC_MULTIHIT_Field use (MULTIHIT_FALSE => 16#0#, MULTIHIT_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_DMEMC_LVLERR_Field is (LVLERR_FALSE, LVLERR_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_DMEMC_LVLERR_Field use (LVLERR_FALSE => 16#0#, LVLERR_TRUE => 16#1#);
    LW_PRGNLCL_FALCON_DMEMC_OFFS_INIT : constant := 16#0#;
    LW_PRGNLCL_FALCON_DMEMC_BLK_INIT  : constant := 16#0#;

    type LW_PRGNLCL_FALCON_DMEMC_Register is record
        Address  : NvU24;
        Aincw    : NvU1;
        Aincr    : NvU1;
        Settag   : NvU1;
        Setlvl   : NvU1;
        Va       : NvU1;
        Miss     : LW_PRGNLCL_FALCON_DMEMC_MISS_Field;
        Multihit : LW_PRGNLCL_FALCON_DMEMC_MULTIHIT_Field;
        Lvlerr   : LW_PRGNLCL_FALCON_DMEMC_LVLERR_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DMEMC_Register use record
        Address  at 0 range  0 .. 23;
        Aincw    at 0 range 24 .. 24;
        Aincr    at 0 range 25 .. 25;
        Settag   at 0 range 26 .. 26;
        Setlvl   at 0 range 27 .. 27;
        Va       at 0 range 28 .. 28;
        Miss     at 0 range 29 .. 29;
        Multihit at 0 range 30 .. 30;
        Lvlerr   at 0 range 31 .. 31;
    end record;

    type LW_PRGNLCL_FALCON_DMEMD_Register is record
        Data : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DMEMD_Register use record
        Data at 0 range 0 .. 31;
    end record;

    type LW_PRGNLCL_FALCON_DMEMT_Register is record
        Tag : NvU16;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DMEMT_Register use record
        Tag at 0 range 0 .. 15;
    end record;

    type LW_PRGNLCL_FALCON_DMEML_Register is record
        Lvl : NvU3;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DMEML_Register use record
        Lvl at 0 range 0 .. 2;
    end record;

    LW_PRGNLCL_FALCON_LOCKPMB_IMEM_INIT   : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_LOCKPMB_IMEM_LOCK   : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_LOCKPMB_IMEM_UNLOCK : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_LOCKPMB_DMEM_INIT   : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_LOCKPMB_DMEM_LOCK   : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_LOCKPMB_DMEM_UNLOCK : constant NvU1 := 16#0#;

    type LW_PRGNLCL_FALCON_LOCKPMB_Register is record
        Imem : NvU1;
        Dmem : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_LOCKPMB_Register use record
        Imem at 0 range 0 .. 0;
        Dmem at 0 range 1 .. 1;
    end record;

    LW_PRGNLCL_FALCON_DMEM_DUMMY_DATA_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_FALCON_DMEM_DUMMY_Register is record
        Data : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DMEM_DUMMY_Register use record
        Data at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_FALCON_IMEM_DUMMY_DATA_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_FALCON_IMEM_DUMMY_Register is record
        Data : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_IMEM_DUMMY_Register use record
        Data at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_FALCON_DIO_RESET_DELAY_VALUE_INIT : constant NvU16 := 16#100#;

    type LW_PRGNLCL_FALCON_DIO_RESET_DELAY_Register is record
        Value : NvU16;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DIO_RESET_DELAY_Register use record
        Value at 0 range 0 .. 15;
    end record;

    LW_PRGNLCL_FALCON_DOC_CTRL_COUNT_INIT          : constant NvU8 := 16#4#;
    LW_PRGNLCL_FALCON_DOC_CTRL_RESET_INIT          : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_DOC_CTRL_STOP_INIT           : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_DOC_CTRL_EMPTY_INIT          : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_DOC_CTRL_WR_FINISHED_INIT    : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_DOC_CTRL_RD_FINISHED_INIT    : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_DOC_CTRL_WR_ERROR_INIT       : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_DOC_CTRL_RD_ERROR_INIT       : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_DOC_CTRL_PROTOCOL_ERROR_INIT : constant NvU1 := 16#0#;

    type LW_PRGNLCL_FALCON_DOC_CTRL_Register is record
        Count          : NvU8;
        Reset          : NvU1;
        Stop           : NvU1;
        Empty          : NvU1;
        Wr_Finished    : NvU1;
        Rd_Finished    : NvU1;
        Wr_Error       : NvU1;
        Rd_Error       : NvU1;
        Protocol_Error : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DOC_CTRL_Register use record
        Count          at 0 range  0 ..  7;
        Reset          at 0 range 16 .. 16;
        Stop           at 0 range 17 .. 17;
        Empty          at 0 range 18 .. 18;
        Wr_Finished    at 0 range 19 .. 19;
        Rd_Finished    at 0 range 20 .. 20;
        Wr_Error       at 0 range 21 .. 21;
        Rd_Error       at 0 range 22 .. 22;
        Protocol_Error at 0 range 23 .. 23;
    end record;

    type LW_PRGNLCL_FALCON_DOC_D0_Register is record
        Data : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DOC_D0_Register use record
        Data at 0 range 0 .. 31;
    end record;

    type LW_PRGNLCL_FALCON_DOC_D1_Register is record
        Data : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DOC_D1_Register use record
        Data at 0 range 0 .. 31;
    end record;

    type LW_PRGNLCL_FALCON_DOC_D2_Register is record
        Data : NvU16;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DOC_D2_Register use record
        Data at 0 range 0 .. 15;
    end record;

    LW_PRGNLCL_FALCON_DIC_CTRL_COUNT_INIT : constant NvU8 := 16#0#;
    LW_PRGNLCL_FALCON_DIC_CTRL_RESET_INIT : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_DIC_CTRL_VALID_INIT : constant NvU1 := 16#0#;

    type LW_PRGNLCL_FALCON_DIC_CTRL_Register is record
        Count : NvU8;
        Reset : NvU1;
        Valid : NvU1;
        Pop   : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DIC_CTRL_Register use record
        Count at 0 range  0 ..  7;
        Reset at 0 range 16 .. 16;
        Valid at 0 range 19 .. 19;
        Pop   at 0 range 20 .. 20;
    end record;

    type LW_PRGNLCL_FALCON_DIC_D0_Register is record
        Data : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DIC_D0_Register use record
        Data at 0 range 0 .. 31;
    end record;

    type LW_PRGNLCL_FALCON_DIC_D1_Register is record
        Data : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DIC_D1_Register use record
        Data at 0 range 0 .. 31;
    end record;

    type LW_PRGNLCL_FALCON_DIC_D2_Register is record
        Data : NvU16;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DIC_D2_Register use record
        Data at 0 range 0 .. 15;
    end record;

    type LW_PRGNLCL_FALCON_DIO_ERR_Register is record
        Info : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DIO_ERR_Register use record
        Info at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_FALCON_DIO_DOC_CTRL_COUNT_INIT          : constant NvU8 := 16#4#;
    LW_PRGNLCL_FALCON_DIO_DOC_CTRL_RESET_INIT          : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_DIO_DOC_CTRL_STOP_INIT           : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_DIO_DOC_CTRL_EMPTY_INIT          : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_DIO_DOC_CTRL_WR_FINISHED_INIT    : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_DIO_DOC_CTRL_RD_FINISHED_INIT    : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_DIO_DOC_CTRL_WR_ERROR_INIT       : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_DIO_DOC_CTRL_RD_ERROR_INIT       : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_DIO_DOC_CTRL_PROTOCOL_ERROR_INIT : constant NvU1 := 16#0#;

    type LW_PRGNLCL_FALCON_DIO_DOC_CTRL_Register is record
        Count          : NvU8;
        Reset          : NvU1;
        Stop           : NvU1;
        Empty          : NvU1;
        Wr_Finished    : NvU1;
        Rd_Finished    : NvU1;
        Wr_Error       : NvU1;
        Rd_Error       : NvU1;
        Protocol_Error : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DIO_DOC_CTRL_Register use record
        Count          at 0 range  0 ..  7;
        Reset          at 0 range 16 .. 16;
        Stop           at 0 range 17 .. 17;
        Empty          at 0 range 18 .. 18;
        Wr_Finished    at 0 range 19 .. 19;
        Rd_Finished    at 0 range 20 .. 20;
        Wr_Error       at 0 range 21 .. 21;
        Rd_Error       at 0 range 22 .. 22;
        Protocol_Error at 0 range 23 .. 23;
    end record;

    type LW_PRGNLCL_FALCON_DIO_DOC_D0_Register is record
        Data : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DIO_DOC_D0_Register use record
        Data at 0 range 0 .. 31;
    end record;

    type LW_PRGNLCL_FALCON_DIO_DOC_D1_Register is record
        Data : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DIO_DOC_D1_Register use record
        Data at 0 range 0 .. 31;
    end record;

    type LW_PRGNLCL_FALCON_DIO_DOC_D2_Register is record
        Data : NvU16;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DIO_DOC_D2_Register use record
        Data at 0 range 0 .. 15;
    end record;

    LW_PRGNLCL_FALCON_DIO_DIC_CTRL_COUNT_INIT : constant NvU8 := 16#0#;
    LW_PRGNLCL_FALCON_DIO_DIC_CTRL_RESET_INIT : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_DIO_DIC_CTRL_VALID_INIT : constant NvU1 := 16#0#;

    type LW_PRGNLCL_FALCON_DIO_DIC_CTRL_Register is record
        Count : NvU8;
        Reset : NvU1;
        Valid : NvU1;
        Pop   : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DIO_DIC_CTRL_Register use record
        Count at 0 range  0 ..  7;
        Reset at 0 range 16 .. 16;
        Valid at 0 range 19 .. 19;
        Pop   at 0 range 20 .. 20;
    end record;

    type LW_PRGNLCL_FALCON_DIO_DIC_D0_Register is record
        Data : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DIO_DIC_D0_Register use record
        Data at 0 range 0 .. 31;
    end record;

    type LW_PRGNLCL_FALCON_DIO_DIC_D1_Register is record
        Data : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DIO_DIC_D1_Register use record
        Data at 0 range 0 .. 31;
    end record;

    type LW_PRGNLCL_FALCON_DIO_DIC_D2_Register is record
        Data : NvU16;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DIO_DIC_D2_Register use record
        Data at 0 range 0 .. 15;
    end record;

    type LW_PRGNLCL_FALCON_DIO_DIO_ERR_Register is record
        Info : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DIO_DIO_ERR_Register use record
        Info at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_0_VAL_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_0_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_0_Register use record
        Val at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_1_VAL_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_1_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_1_Register use record
        Val at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_2_VAL_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_2_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_2_Register use record
        Val at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_3_VAL_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_3_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_3_Register use record
        Val at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_FALCON_PRGNVER_MAJOR_DEFT  : constant NvU4  := 16#2#;
    LW_PRGNLCL_FALCON_PRGNVER_MINOR_DEFT  : constant NvU14 := 16#1#;
    LW_PRGNLCL_FALCON_PRGNVER_BUGFIX_DEFT : constant NvU14 := 16#0#;

    type LW_PRGNLCL_FALCON_PRGNVER_Register is record
        Major  : NvU4;
        Minor  : NvU14;
        Bugfix : NvU14;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_PRGNVER_Register use record
        Major  at 0 range  0 ..  3;
        Minor  at 0 range  4 .. 17;
        Bugfix at 0 range 18 .. 31;
    end record;

    type LW_PRGNLCL_FALCON_HWCFG_Register is record
        Imem_Size        : NvU9;
        Dmem_Size        : NvU9;
        Methodfifo_Depth : NvU9;
        Dmaqueue_Depth   : NvU5;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_HWCFG_Register use record
        Imem_Size        at 0 range  0 ..  8;
        Dmem_Size        at 0 range  9 .. 17;
        Methodfifo_Depth at 0 range 18 .. 26;
        Dmaqueue_Depth   at 0 range 27 .. 31;
    end record;

    LW_PRGNLCL_FALCON_HWCFG1_CORE_REV_INIT            : constant NvU4 := 16#6#;
    LW_PRGNLCL_FALCON_HWCFG1_CORE_REV_1_0             : constant NvU4 := 16#1#;
    LW_PRGNLCL_FALCON_HWCFG1_CORE_REV_2_0             : constant NvU4 := 16#2#;
    LW_PRGNLCL_FALCON_HWCFG1_CORE_REV_3_0             : constant NvU4 := 16#3#;
    LW_PRGNLCL_FALCON_HWCFG1_CORE_REV_4_0             : constant NvU4 := 16#4#;
    LW_PRGNLCL_FALCON_HWCFG1_CORE_REV_5_0             : constant NvU4 := 16#5#;
    LW_PRGNLCL_FALCON_HWCFG1_CORE_REV_6_0             : constant NvU4 := 16#6#;
    LW_PRGNLCL_FALCON_HWCFG1_CORE_REV_7_0             : constant NvU4 := 16#7#;
    LW_PRGNLCL_FALCON_HWCFG1_SECURITY_MODEL_INIT      : constant NvU2 := 16#3#;
    LW_PRGNLCL_FALCON_HWCFG1_SECURITY_MODEL_NONE      : constant NvU2 := 16#0#;
    LW_PRGNLCL_FALCON_HWCFG1_SECURITY_MODEL_LIGHT     : constant NvU2 := 16#2#;
    LW_PRGNLCL_FALCON_HWCFG1_SECURITY_MODEL_HEAVY     : constant NvU2 := 16#3#;
    LW_PRGNLCL_FALCON_HWCFG1_CORE_REV_SUBVERSION_INIT : constant NvU2 := 16#0#;
    LW_PRGNLCL_FALCON_HWCFG1_CORE_REV_SUBVERSION_0    : constant NvU2 := 16#0#;
    LW_PRGNLCL_FALCON_HWCFG1_CORE_REV_SUBVERSION_1    : constant NvU2 := 16#1#;
    LW_PRGNLCL_FALCON_HWCFG1_CORE_REV_SUBVERSION_2    : constant NvU2 := 16#2#;
    LW_PRGNLCL_FALCON_HWCFG1_CORE_REV_SUBVERSION_3    : constant NvU2 := 16#3#;
    LW_PRGNLCL_FALCON_HWCFG1_IMEM_PORTS_INIT          : constant NvU4 := 16#1#;
    LW_PRGNLCL_FALCON_HWCFG1_DMEM_PORTS_INIT          : constant NvU4 := 16#1#;
    LW_PRGNLCL_FALCON_HWCFG1_TAG_WIDTH_INIT           : constant NvU5 := 16#10#;
    LW_PRGNLCL_FALCON_HWCFG1_DMEM_TAG_WIDTH_INIT      : constant NvU5 := 16#10#;
    LW_PRGNLCL_FALCON_HWCFG1_DBG_PRIV_BUS_INIT        : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_HWCFG1_DBG_PRIV_BUS_ENABLE      : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_HWCFG1_DBG_PRIV_BUS_DISABLE     : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_HWCFG1_CSB_SIZE_16M_INIT        : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_HWCFG1_CSB_SIZE_16M_TRUE        : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_HWCFG1_CSB_SIZE_16M_FALSE       : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_HWCFG1_PRIV_DIRECT_INIT         : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_HWCFG1_PRIV_DIRECT_TRUE         : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_HWCFG1_PRIV_DIRECT_FALSE        : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_HWCFG1_DMEM_APERTURES_INIT      : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_HWCFG1_DMEM_APERTURES_ENABLE    : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_HWCFG1_DMEM_APERTURES_DISABLE   : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_HWCFG1_IMEM_AUTOFILL_INIT       : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_HWCFG1_IMEM_AUTOFILL_ENABLE     : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_HWCFG1_IMEM_AUTOFILL_DISABLE    : constant NvU1 := 16#0#;

    type LW_PRGNLCL_FALCON_HWCFG1_Register is record
        Core_Rev            : NvU4;
        Security_Model      : NvU2;
        Core_Rev_Subversion : NvU2;
        Imem_Ports          : NvU4;
        Dmem_Ports          : NvU4;
        Tag_Width           : NvU5;
        Dmem_Tag_Width      : NvU5;
        Dbg_Priv_Bus        : NvU1;
        Csb_Size_16m        : NvU1;
        Priv_Direct         : NvU1;
        Dmem_Apertures      : NvU1;
        Imem_Autofill       : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_HWCFG1_Register use record
        Core_Rev            at 0 range  0 ..  3;
        Security_Model      at 0 range  4 ..  5;
        Core_Rev_Subversion at 0 range  6 ..  7;
        Imem_Ports          at 0 range  8 .. 11;
        Dmem_Ports          at 0 range 12 .. 15;
        Tag_Width           at 0 range 16 .. 20;
        Dmem_Tag_Width      at 0 range 21 .. 25;
        Dbg_Priv_Bus        at 0 range 27 .. 27;
        Csb_Size_16m        at 0 range 28 .. 28;
        Priv_Direct         at 0 range 29 .. 29;
        Dmem_Apertures      at 0 range 30 .. 30;
        Imem_Autofill       at 0 range 31 .. 31;
    end record;

    type LW_PRGNLCL_FALCON_HWCFG2_SHA_Field is (SHA_DISABLE, SHA_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_HWCFG2_SHA_Field use (SHA_DISABLE => 16#0#, SHA_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_HWCFG2_BMEM_Field is (BMEM_DISABLE, BMEM_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_HWCFG2_BMEM_Field use (BMEM_DISABLE => 16#0#, BMEM_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_HWCFG2_PKCBOOT_Field is (PKCBOOT_DISABLE, PKCBOOT_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_HWCFG2_PKCBOOT_Field use (PKCBOOT_DISABLE => 16#0#, PKCBOOT_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_HWCFG2_DBGMODE_Field is (DBGMODE_DISABLE, DBGMODE_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_HWCFG2_DBGMODE_Field use (DBGMODE_DISABLE => 16#0#, DBGMODE_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_HWCFG2_KMEM_Field is (KMEM_DISABLE, KMEM_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_HWCFG2_KMEM_Field use (KMEM_DISABLE => 16#0#, KMEM_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_HWCFG2_HSCODE_REVOCATION_Field is (REVOCATION_DISABLE, REVOCATION_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_HWCFG2_HSCODE_REVOCATION_Field use (REVOCATION_DISABLE => 16#0#, REVOCATION_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_HWCFG2_STRAP_FUN_Field is (FUN_DISABLE, FUN_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_HWCFG2_STRAP_FUN_Field use (FUN_DISABLE => 16#0#, FUN_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_HWCFG2_VHR_Field is (VHR_DISABLE, VHR_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_HWCFG2_VHR_Field use (VHR_DISABLE => 16#0#, VHR_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_HWCFG2_HS_Field is (HS_DISABLE, HS_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_HWCFG2_HS_Field use (HS_DISABLE => 16#0#, HS_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_HWCFG2_SECUREBUS_Field is (SECUREBUS_DISABLE, SECUREBUS_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_HWCFG2_SECUREBUS_Field use (SECUREBUS_DISABLE => 16#0#, SECUREBUS_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_HWCFG2_RISCV_Field is (RISCV_DISABLE, RISCV_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_HWCFG2_RISCV_Field use (RISCV_DISABLE => 16#0#, RISCV_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_HWCFG2_RISCV_PL3_DISABLE_Field is (DISABLE_FALSE, DISABLE_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_HWCFG2_RISCV_PL3_DISABLE_Field use (DISABLE_FALSE => 16#0#, DISABLE_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_HWCFG2_MEM_SCRUBBING_Field is (SCRUBBING_DONE, SCRUBBING_PENDING) with
        Size => 1;
    for LW_PRGNLCL_FALCON_HWCFG2_MEM_SCRUBBING_Field use (SCRUBBING_DONE => 16#0#, SCRUBBING_PENDING => 16#1#);
    type LW_PRGNLCL_FALCON_HWCFG2_RISCV_BR_PRIV_LOCKDOWN_Field is (LOCKDOWN_UNLOCK, LOCKDOWN_LOCK) with
        Size => 1;
    for LW_PRGNLCL_FALCON_HWCFG2_RISCV_BR_PRIV_LOCKDOWN_Field use (LOCKDOWN_UNLOCK => 16#0#, LOCKDOWN_LOCK => 16#1#);
    type LW_PRGNLCL_FALCON_HWCFG2_BOOT_FROM_HS_Field is (HS_FALSE, HS_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_HWCFG2_BOOT_FROM_HS_Field use (HS_FALSE => 16#0#, HS_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_HWCFG2_RISCV_BR_ADPAIR_Field is (ADPAIR_DISABLE, ADPAIR_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_HWCFG2_RISCV_BR_ADPAIR_Field use (ADPAIR_DISABLE => 16#0#, ADPAIR_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_HWCFG2_SCP_Field is (SCP_DISABLE, SCP_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_HWCFG2_SCP_Field use (SCP_DISABLE => 16#0#, SCP_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_HWCFG2_GDMA_Field is (GDMA_DISABLE, GDMA_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_HWCFG2_GDMA_Field use (GDMA_DISABLE => 16#0#, GDMA_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_HWCFG2_SE_LITE_Field is (LITE_DISABLE, LITE_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_HWCFG2_SE_LITE_Field use (LITE_DISABLE => 16#0#, LITE_ENABLE => 16#1#);
    LW_PRGNLCL_FALCON_HWCFG2_PRGN_RSVD_FUSE_DEFAULT : constant NvU8 := 16#0#;

    type LW_PRGNLCL_FALCON_HWCFG2_Register is record
        Sha                    : LW_PRGNLCL_FALCON_HWCFG2_SHA_Field;
        Bmem                   : LW_PRGNLCL_FALCON_HWCFG2_BMEM_Field;
        Pkcboot                : LW_PRGNLCL_FALCON_HWCFG2_PKCBOOT_Field;
        Dbgmode                : LW_PRGNLCL_FALCON_HWCFG2_DBGMODE_Field;
        Kmem                   : LW_PRGNLCL_FALCON_HWCFG2_KMEM_Field;
        Hscode_Revocation      : LW_PRGNLCL_FALCON_HWCFG2_HSCODE_REVOCATION_Field;
        Strap_Fun              : LW_PRGNLCL_FALCON_HWCFG2_STRAP_FUN_Field;
        Vhr                    : LW_PRGNLCL_FALCON_HWCFG2_VHR_Field;
        Hs                     : LW_PRGNLCL_FALCON_HWCFG2_HS_Field;
        Securebus              : LW_PRGNLCL_FALCON_HWCFG2_SECUREBUS_Field;
        Riscv                  : LW_PRGNLCL_FALCON_HWCFG2_RISCV_Field;
        Riscv_Pl3_Disable      : LW_PRGNLCL_FALCON_HWCFG2_RISCV_PL3_DISABLE_Field;
        Mem_Scrubbing          : LW_PRGNLCL_FALCON_HWCFG2_MEM_SCRUBBING_Field;
        Riscv_Br_Priv_Lockdown : LW_PRGNLCL_FALCON_HWCFG2_RISCV_BR_PRIV_LOCKDOWN_Field;
        Boot_From_Hs           : LW_PRGNLCL_FALCON_HWCFG2_BOOT_FROM_HS_Field;
        Riscv_Br_Adpair        : LW_PRGNLCL_FALCON_HWCFG2_RISCV_BR_ADPAIR_Field;
        Scp                    : LW_PRGNLCL_FALCON_HWCFG2_SCP_Field;
        Gdma                   : LW_PRGNLCL_FALCON_HWCFG2_GDMA_Field;
        Se_Lite                : LW_PRGNLCL_FALCON_HWCFG2_SE_LITE_Field;
        Prgn_Rsvd_Fuse         : NvU8;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_HWCFG2_Register use record
        Sha                    at 0 range  0 ..  0;
        Bmem                   at 0 range  1 ..  1;
        Pkcboot                at 0 range  2 ..  2;
        Dbgmode                at 0 range  3 ..  3;
        Kmem                   at 0 range  4 ..  4;
        Hscode_Revocation      at 0 range  5 ..  5;
        Strap_Fun              at 0 range  6 ..  6;
        Vhr                    at 0 range  7 ..  7;
        Hs                     at 0 range  8 ..  8;
        Securebus              at 0 range  9 ..  9;
        Riscv                  at 0 range 10 .. 10;
        Riscv_Pl3_Disable      at 0 range 11 .. 11;
        Mem_Scrubbing          at 0 range 12 .. 12;
        Riscv_Br_Priv_Lockdown at 0 range 13 .. 13;
        Boot_From_Hs           at 0 range 14 .. 14;
        Riscv_Br_Adpair        at 0 range 15 .. 15;
        Scp                    at 0 range 16 .. 16;
        Gdma                   at 0 range 17 .. 17;
        Se_Lite                at 0 range 18 .. 18;
        Prgn_Rsvd_Fuse         at 0 range 24 .. 31;
    end record;

    type LW_PRGNLCL_FALCON_HWCFG3_Register is record
        Imem_Total_Size : NvU12;
        Dmem_Total_Size : NvU12;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_HWCFG3_Register use record
        Imem_Total_Size at 0 range  0 .. 11;
        Dmem_Total_Size at 0 range 16 .. 27;
    end record;

    LW_PRGNLCL_FALCON_CGCTL_CG_OVERRIDE_INIT : constant NvU1 := 16#0#;

    type LW_PRGNLCL_FALCON_CGCTL_Register is record
        Cg_Override : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_CGCTL_Register use record
        Cg_Override at 0 range 0 .. 0;
    end record;

    type LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_DMA_Field is (DMA_ENABLED, DMA_DISABLED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_DMA_Field use (DMA_ENABLED => 16#0#, DMA_DISABLED => 16#1#);
    type LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_GC6_SR_FSM_Field is (FSM_ENABLED, FSM_DISABLED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_GC6_SR_FSM_Field use (FSM_ENABLED => 16#0#, FSM_DISABLED => 16#1#);
    type LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_PIPE_Field is (PIPE_ENABLED, PIPE_DISABLED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_PIPE_Field use (PIPE_ENABLED => 16#0#, PIPE_DISABLED => 16#1#);
    type LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_DIV_Field is (DIV_ENABLED, DIV_DISABLED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_DIV_Field use (DIV_ENABLED => 16#0#, DIV_DISABLED => 16#1#);
    type LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_ICD_Field is (ICD_ENABLED, ICD_DISABLED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_ICD_Field use (ICD_ENABLED => 16#0#, ICD_DISABLED => 16#1#);
    type LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_CFG_Field is (CFG_ENABLED, CFG_DISABLED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_CFG_Field use (CFG_ENABLED => 16#0#, CFG_DISABLED => 16#1#);
    type LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_CTXSW_Field is (CTXSW_ENABLED, CTXSW_DISABLED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_CTXSW_Field use (CTXSW_ENABLED => 16#0#, CTXSW_DISABLED => 16#1#);
    type LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_PMB_Field is (PMB_ENABLED, PMB_DISABLED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_PMB_Field use (PMB_ENABLED => 16#0#, PMB_DISABLED => 16#1#);
    type LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_RF_Field is (RF_ENABLED, RF_DISABLED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_RF_Field use (RF_ENABLED => 16#0#, RF_DISABLED => 16#1#);
    type LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_MUL_Field is (MUL_ENABLED, MUL_DISABLED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_MUL_Field use (MUL_ENABLED => 16#0#, MUL_DISABLED => 16#1#);
    type LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_LDST_Field is (LDST_ENABLED, LDST_DISABLED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_LDST_Field use (LDST_ENABLED => 16#0#, LDST_DISABLED => 16#1#);
    type LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_TSYNC_Field is (TSYNC_ENABLED, TSYNC_DISABLED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_TSYNC_Field use (TSYNC_ENABLED => 16#0#, TSYNC_DISABLED => 16#1#);
    type LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_GPTMR_Field is (GPTMR_ENABLED, GPTMR_DISABLED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_GPTMR_Field use (GPTMR_ENABLED => 16#0#, GPTMR_DISABLED => 16#1#);
    type LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_WDTMR_Field is (WDTMR_ENABLED, WDTMR_DISABLED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_WDTMR_Field use (WDTMR_ENABLED => 16#0#, WDTMR_DISABLED => 16#1#);
    type LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_IRQSTAT_Field is (IRQSTAT_ENABLED, IRQSTAT_DISABLED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_IRQSTAT_Field use (IRQSTAT_ENABLED => 16#0#, IRQSTAT_DISABLED => 16#1#);
    type LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_TOP_Field is (TOP_ENABLED, TOP_DISABLED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_TOP_Field use (TOP_ENABLED => 16#0#, TOP_DISABLED => 16#1#);
    type LW_PRGNLCL_FALCON_CG2_SLCG_FBIF_Field is (FBIF_ENABLED, FBIF_DISABLED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_CG2_SLCG_FBIF_Field use (FBIF_ENABLED => 16#0#, FBIF_DISABLED => 16#1#);
    type LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_SHA_Field is (SHA_ENABLED, SHA_DISABLED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_SHA_Field use (SHA_ENABLED => 16#0#, SHA_DISABLED => 16#1#);
    type LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_GDMA_Field is (GDMA_ENABLED, GDMA_DISABLED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_GDMA_Field use (GDMA_ENABLED => 16#0#, GDMA_DISABLED => 16#1#);
    type LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_TSE_Field is (TSE_ENABLED, TSE_DISABLED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_TSE_Field use (TSE_ENABLED => 16#0#, TSE_DISABLED => 16#1#);
    LW_PRGNLCL_FALCON_CG2_SLCG_ENABLED  : constant := 16#0#;
    LW_PRGNLCL_FALCON_CG2_SLCG_DISABLED : constant := 16#1_ffff#;

    type LW_PRGNLCL_FALCON_CG2_Register is record
        Slcg_Falcon_Dma        : LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_DMA_Field;
        Slcg_Falcon_Gc6_Sr_Fsm : LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_GC6_SR_FSM_Field;
        Slcg_Falcon_Pipe       : LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_PIPE_Field;
        Slcg_Falcon_Div        : LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_DIV_Field;
        Slcg_Falcon_Icd        : LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_ICD_Field;
        Slcg_Falcon_Cfg        : LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_CFG_Field;
        Slcg_Falcon_Ctxsw      : LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_CTXSW_Field;
        Slcg_Falcon_Pmb        : LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_PMB_Field;
        Slcg_Falcon_Rf         : LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_RF_Field;
        Slcg_Falcon_Mul        : LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_MUL_Field;
        Slcg_Falcon_Ldst       : LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_LDST_Field;
        Slcg_Falcon_Tsync      : LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_TSYNC_Field;
        Slcg_Falcon_Gptmr      : LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_GPTMR_Field;
        Slcg_Falcon_Wdtmr      : LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_WDTMR_Field;
        Slcg_Falcon_Irqstat    : LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_IRQSTAT_Field;
        Slcg_Falcon_Top        : LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_TOP_Field;
        Slcg_Fbif              : LW_PRGNLCL_FALCON_CG2_SLCG_FBIF_Field;
        Slcg_Falcon_Sha        : LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_SHA_Field;
        Slcg_Falcon_Gdma       : LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_GDMA_Field;
        Slcg_Falcon_Tse        : LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_TSE_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_CG2_Register use record
        Slcg_Falcon_Dma        at 0 range  1 ..  1;
        Slcg_Falcon_Gc6_Sr_Fsm at 0 range  2 ..  2;
        Slcg_Falcon_Pipe       at 0 range  3 ..  3;
        Slcg_Falcon_Div        at 0 range  4 ..  4;
        Slcg_Falcon_Icd        at 0 range  5 ..  5;
        Slcg_Falcon_Cfg        at 0 range  6 ..  6;
        Slcg_Falcon_Ctxsw      at 0 range  7 ..  7;
        Slcg_Falcon_Pmb        at 0 range  8 ..  8;
        Slcg_Falcon_Rf         at 0 range  9 ..  9;
        Slcg_Falcon_Mul        at 0 range 10 .. 10;
        Slcg_Falcon_Ldst       at 0 range 11 .. 11;
        Slcg_Falcon_Tsync      at 0 range 12 .. 12;
        Slcg_Falcon_Gptmr      at 0 range 13 .. 13;
        Slcg_Falcon_Wdtmr      at 0 range 14 .. 14;
        Slcg_Falcon_Irqstat    at 0 range 15 .. 15;
        Slcg_Falcon_Top        at 0 range 16 .. 16;
        Slcg_Fbif              at 0 range 17 .. 17;
        Slcg_Falcon_Sha        at 0 range 18 .. 18;
        Slcg_Falcon_Gdma       at 0 range 19 .. 19;
        Slcg_Falcon_Tse        at 0 range 20 .. 20;
    end record;

    LW_PRGNLCL_FALCON_ENGID_INSTID_INIT       : constant NvU8 := 16#0#;
    LW_PRGNLCL_FALCON_ENGID_FAMILYID_SEC      : constant NvU8 := 16#1#;
    LW_PRGNLCL_FALCON_ENGID_FAMILYID_DPU      : constant NvU8 := 16#2#;
    LW_PRGNLCL_FALCON_ENGID_FAMILYID_LWDEC    : constant NvU8 := 16#3#;
    LW_PRGNLCL_FALCON_ENGID_FAMILYID_PWR_PMU  : constant NvU8 := 16#4#;
    LW_PRGNLCL_FALCON_ENGID_FAMILYID_FBFACLON : constant NvU8 := 16#5#;
    LW_PRGNLCL_FALCON_ENGID_FAMILYID_LWENC    : constant NvU8 := 16#6#;
    LW_PRGNLCL_FALCON_ENGID_FAMILYID_GPCCS    : constant NvU8 := 16#7#;
    LW_PRGNLCL_FALCON_ENGID_FAMILYID_FECS     : constant NvU8 := 16#8#;
    LW_PRGNLCL_FALCON_ENGID_FAMILYID_MINION   : constant NvU8 := 16#9#;
    LW_PRGNLCL_FALCON_ENGID_FAMILYID_XUSB     : constant NvU8 := 16#a#;
    LW_PRGNLCL_FALCON_ENGID_FAMILYID_GSP      : constant NvU8 := 16#b#;
    LW_PRGNLCL_FALCON_ENGID_FAMILYID_LWJPG    : constant NvU8 := 16#c#;
    LW_PRGNLCL_FALCON_ENGID_FAMILYID_OFA      : constant NvU8 := 16#d#;
    LW_PRGNLCL_FALCON_ENGID_FAMILYID_PSC      : constant NvU8 := 16#e#;
    LW_PRGNLCL_FALCON_ENGID_FAMILYID_SOE      : constant NvU8 := 16#f#;
    LW_PRGNLCL_FALCON_ENGID_FAMILYID_LDPC     : constant NvU8 := 16#10#;
    LW_PRGNLCL_FALCON_ENGID_FAMILYID_FSP      : constant NvU8 := 16#11#;

    type LW_PRGNLCL_FALCON_ENGID_Register is record
        Instid   : NvU8;
        Familyid : NvU8;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_ENGID_Register use record
        Instid   at 0 range 0 ..  7;
        Familyid at 0 range 8 .. 15;
    end record;

    type LW_PRGNLCL_FALCON_ENGINE_RESET_Field is (RESET_FALSE, RESET_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_ENGINE_RESET_Field use (RESET_FALSE => 16#0#, RESET_TRUE => 16#1#);
    LW_PRGNLCL_FALCON_ENGINE_SELF_RELEASE_RESET_TOGGLE : constant NvU1 := 16#1#;
    type LW_PRGNLCL_FALCON_ENGINE_RESET_STATUS_Field is (STATUS_ASSERTED, STATUS_DEASSERTING, STATUS_DEASSERTED, STATUS_PRECONDITION, STATUS_ASSERTING) with
        Size => 3;
    for LW_PRGNLCL_FALCON_ENGINE_RESET_STATUS_Field use
        (STATUS_ASSERTED => 16#0#, STATUS_DEASSERTING => 16#1#, STATUS_DEASSERTED => 16#2#, STATUS_PRECONDITION => 16#3#, STATUS_ASSERTING => 16#4#);
    LW_PRGNLCL_FALCON_ENGINE_RESET_DEASSERT : constant := 16#0#;
    LW_PRGNLCL_FALCON_ENGINE_RESET_ASSERT   : constant := 16#1#;

    type LW_PRGNLCL_FALCON_ENGINE_Register is record
        Reset              : LW_PRGNLCL_FALCON_ENGINE_RESET_Field;
        Self_Release_Reset : NvU1;
        Reset_Status       : LW_PRGNLCL_FALCON_ENGINE_RESET_STATUS_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_ENGINE_Register use record
        Reset              at 0 range 0 ..  0;
        Self_Release_Reset at 0 range 1 ..  1;
        Reset_Status       at 0 range 8 .. 10;
    end record;

    LW_PRGNLCL_FALCON_RESETCTL_CYA_EXTRA_RESET_DEPTH_INIT : constant NvU4 := 16#0#;
    type LW_PRGNLCL_FALCON_RESETCTL_CYA_SKIP_HALT_Field is (HALT_FALSE, HALT_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_RESETCTL_CYA_SKIP_HALT_Field use (HALT_FALSE => 16#0#, HALT_TRUE => 16#1#);

    type LW_PRGNLCL_FALCON_RESETCTL_CYA_Register is record
        Extra_Reset_Depth : NvU4;
        Skip_Halt         : LW_PRGNLCL_FALCON_RESETCTL_CYA_SKIP_HALT_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_RESETCTL_CYA_Register use record
        Extra_Reset_Depth at 0 range  0 ..  3;
        Skip_Halt         at 0 range 16 .. 16;
    end record;

    type LW_PRGNLCL_FALCON_SCTL_LSMODE_Field is (LSMODE_FALSE, LSMODE_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SCTL_LSMODE_Field use (LSMODE_FALSE => 16#0#, LSMODE_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_SCTL_HSMODE_Field is (HSMODE_FALSE, HSMODE_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SCTL_HSMODE_Field use (HSMODE_FALSE => 16#0#, HSMODE_TRUE => 16#1#);
    LW_PRGNLCL_FALCON_SCTL_LSMODE_LEVEL_INIT     : constant NvU2 := 16#0#;
    LW_PRGNLCL_FALCON_SCTL_DEBUG_PRIV_LEVEL_INIT : constant NvU2 := 16#0#;
    type LW_PRGNLCL_FALCON_SCTL_RESET_LVLM_EN_Field is (EN_FALSE, EN_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SCTL_RESET_LVLM_EN_Field use (EN_FALSE => 16#0#, EN_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_SCTL_STALLREQ_CLR_EN_Field is (EN_FALSE, EN_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SCTL_STALLREQ_CLR_EN_Field use (EN_FALSE => 16#0#, EN_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_SCTL_AUTH_EN_Field is (EN_FALSE, EN_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SCTL_AUTH_EN_Field use (EN_FALSE => 16#0#, EN_TRUE => 16#1#);
    LW_PRGNLCL_FALCON_SCTL_UCODE_LEVEL_INIT : constant := 16#0#;

    type LW_PRGNLCL_FALCON_SCTL_Register is record
        Lsmode           : LW_PRGNLCL_FALCON_SCTL_LSMODE_Field;
        Hsmode           : LW_PRGNLCL_FALCON_SCTL_HSMODE_Field;
        Lsmode_Level     : NvU2;
        Debug_Priv_Level : NvU2;
        Reset_Lvlm_En    : LW_PRGNLCL_FALCON_SCTL_RESET_LVLM_EN_Field;
        Stallreq_Clr_En  : LW_PRGNLCL_FALCON_SCTL_STALLREQ_CLR_EN_Field;
        Auth_En          : LW_PRGNLCL_FALCON_SCTL_AUTH_EN_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_SCTL_Register use record
        Lsmode           at 0 range  0 ..  0;
        Hsmode           at 0 range  1 ..  1;
        Lsmode_Level     at 0 range  4 ..  5;
        Debug_Priv_Level at 0 range  8 ..  9;
        Reset_Lvlm_En    at 0 range 12 .. 12;
        Stallreq_Clr_En  at 0 range 13 .. 13;
        Auth_En          at 0 range 14 .. 14;
    end record;

    LW_PRGNLCL_FALCON_SCTL1_CSBLVL_MASK_INIT : constant NvU2 := 16#3#;
    LW_PRGNLCL_FALCON_SCTL1_EXTLVL_MASK_INIT : constant NvU2 := 16#3#;

    type LW_PRGNLCL_FALCON_SCTL1_Register is record
        Csblvl_Mask : NvU2;
        Extlvl_Mask : NvU2;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_SCTL1_Register use record
        Csblvl_Mask at 0 range 0 .. 1;
        Extlvl_Mask at 0 range 2 .. 3;
    end record;

    type LW_PRGNLCL_FALCON_HSCTL_TRACEPC_Field is (TRACEPC_DISABLE, TRACEPC_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_HSCTL_TRACEPC_Field use (TRACEPC_DISABLE => 16#0#, TRACEPC_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_HSCTL_SP_MIN_Field is (MIN_DISABLE, MIN_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_HSCTL_SP_MIN_Field use (MIN_DISABLE => 16#0#, MIN_ENABLE => 16#1#);

    type LW_PRGNLCL_FALCON_HSCTL_Register is record
        Tracepc : LW_PRGNLCL_FALCON_HSCTL_TRACEPC_Field;
        Sp_Min  : LW_PRGNLCL_FALCON_HSCTL_SP_MIN_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_HSCTL_Register use record
        Tracepc at 0 range 0 .. 0;
        Sp_Min  at 0 range 1 .. 1;
    end record;

    type LW_PRGNLCL_FALCON_SAFETY_CTRL_FUSE_OPT_RISCV_DCLS_EN_Field is (EN_FALSE, EN_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SAFETY_CTRL_FUSE_OPT_RISCV_DCLS_EN_Field use (EN_FALSE => 16#0#, EN_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_SAFETY_CTRL_RISCV_DCLS_INOUT_DFF_SLCG_Field is (SLCG_ENABLED, SLCG_DISABLED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SAFETY_CTRL_RISCV_DCLS_INOUT_DFF_SLCG_Field use (SLCG_ENABLED => 16#0#, SLCG_DISABLED => 16#1#);
    type LW_PRGNLCL_FALCON_SAFETY_CTRL_RISCV_DCLS_CLK_EN_Field is (EN_TRUE, EN_FALSE) with
        Size => 2;
    for LW_PRGNLCL_FALCON_SAFETY_CTRL_RISCV_DCLS_CLK_EN_Field use (EN_TRUE => 16#1#, EN_FALSE => 16#2#);
    LW_PRGNLCL_FALCON_SAFETY_CTRL_RISCV_DCLS_DIS_INIT  : constant NvU2 := 16#1#;
    LW_PRGNLCL_FALCON_SAFETY_CTRL_RISCV_DCLS_DIS_TRUE  : constant NvU2 := 16#1#;
    LW_PRGNLCL_FALCON_SAFETY_CTRL_RISCV_DCLS_DIS_FALSE : constant NvU2 := 16#2#;

    type LW_PRGNLCL_FALCON_SAFETY_CTRL_Register is record
        Fuse_Opt_Riscv_Dcls_En    : LW_PRGNLCL_FALCON_SAFETY_CTRL_FUSE_OPT_RISCV_DCLS_EN_Field;
        Riscv_Dcls_Inout_Dff_Slcg : LW_PRGNLCL_FALCON_SAFETY_CTRL_RISCV_DCLS_INOUT_DFF_SLCG_Field;
        Riscv_Dcls_Clk_En         : LW_PRGNLCL_FALCON_SAFETY_CTRL_RISCV_DCLS_CLK_EN_Field;
        Riscv_Dcls_Dis            : NvU2;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_SAFETY_CTRL_Register use record
        Fuse_Opt_Riscv_Dcls_En    at 0 range 17 .. 17;
        Riscv_Dcls_Inout_Dff_Slcg at 0 range 12 .. 12;
        Riscv_Dcls_Clk_En         at 0 range 10 .. 11;
        Riscv_Dcls_Dis            at 0 range  6 ..  7;
    end record;

    LW_PRGNLCL_FALCON_RISCV_DCLS_SECURITY_CORE_MISMATCH_TRUE           : constant NvU8 := 16#a5#;
    LW_PRGNLCL_FALCON_RISCV_DCLS_SECURITY_CORE_MISMATCH_FALSE          : constant NvU8 := 16#5a#;
    LW_PRGNLCL_FALCON_RISCV_DCLS_SECURITY_RISCV_HALT_ENABLED           : constant NvU8 := 16#a5#;
    LW_PRGNLCL_FALCON_RISCV_DCLS_SECURITY_RISCV_HALT_DISABLED          : constant NvU8 := 16#5a#;
    LW_PRGNLCL_FALCON_RISCV_DCLS_SECURITY_RISCV_TRIGGER_RESET_ENABLED  : constant NvU8 := 16#a5#;
    LW_PRGNLCL_FALCON_RISCV_DCLS_SECURITY_RISCV_TRIGGER_RESET_DISABLED : constant NvU8 := 16#5a#;
    LW_PRGNLCL_FALCON_RISCV_DCLS_SECURITY_RISCV_INTERRUPT_ENABLED      : constant NvU8 := 16#a5#;
    LW_PRGNLCL_FALCON_RISCV_DCLS_SECURITY_RISCV_INTERRUPT_DISABLED     : constant NvU8 := 16#5a#;

    type LW_PRGNLCL_FALCON_RISCV_DCLS_SECURITY_Register is record
        Core_Mismatch       : NvU8;
        Riscv_Halt          : NvU8;
        Riscv_Trigger_Reset : NvU8;
        Riscv_Interrupt     : NvU8;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_RISCV_DCLS_SECURITY_Register use record
        Core_Mismatch       at 0 range 24 .. 31;
        Riscv_Halt          at 0 range 16 .. 23;
        Riscv_Trigger_Reset at 0 range  8 .. 15;
        Riscv_Interrupt     at 0 range  0 ..  7;
    end record;

    LW_PRGNLCL_FALCON_OS_VERSION_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_FALCON_OS_Register is record
        Version : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_OS_Register use record
        Version at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_FALCON_RM_CONFIG_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_FALCON_RM_Register is record
        Config : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_RM_Register use record
        Config at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_FALCON_SOFT_PM_TRIGGER_START_INIT : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_SOFT_PM_TRIGGER_END_INIT   : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_SOFT_PM_PROBE_INIT         : constant NvU6 := 16#0#;

    type LW_PRGNLCL_FALCON_SOFT_PM_Register is record
        Trigger_Start : NvU1;
        Trigger_End   : NvU1;
        Probe         : NvU6;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_SOFT_PM_Register use record
        Trigger_Start at 0 range 17 .. 17;
        Trigger_End   at 0 range 16 .. 16;
        Probe         at 0 range  0 ..  5;
    end record;

    LW_PRGNLCL_FALCON_SOFT_MODE_PROBE_INIT : constant NvU6 := 16#0#;

    type LW_PRGNLCL_FALCON_SOFT_MODE_Register is record
        Probe : NvU6;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_SOFT_MODE_Register use record
        Probe at 0 range 0 .. 5;
    end record;

    type LW_PRGNLCL_FALCON_PMM_FALCON_STALL_SEL_Field is
        (SEL_ANY, SEL_CODE, SEL_DMAQ, SEL_DMFENCE, SEL_DMWAIT, SEL_IMWAIT, SEL_IPND, SEL_LDSTQ, SEL_SB, SEL_ANY_SC, SEL_CODE_SC, SEL_DMAQ_SC, SEL_DMFENCE_SC, SEL_DMWAIT_SC,
         SEL_IMWAIT_SC, SEL_IPND_SC, SEL_LDSTQ_SC, SEL_SB_SC) with
        Size => 5;
    for LW_PRGNLCL_FALCON_PMM_FALCON_STALL_SEL_Field use
        (SEL_ANY     => 16#0#, SEL_CODE => 16#1#, SEL_DMAQ => 16#2#, SEL_DMFENCE => 16#3#, SEL_DMWAIT => 16#4#, SEL_IMWAIT => 16#5#, SEL_IPND => 16#6#, SEL_LDSTQ => 16#7#,
         SEL_SB      => 16#8#, SEL_ANY_SC => 16#9#, SEL_CODE_SC => 16#a#, SEL_DMAQ_SC => 16#b#, SEL_DMFENCE_SC => 16#c#, SEL_DMWAIT_SC => 16#d#, SEL_IMWAIT_SC => 16#e#,
         SEL_IPND_SC => 16#f#, SEL_LDSTQ_SC => 16#10#, SEL_SB_SC => 16#11#);
    type LW_PRGNLCL_FALCON_PMM_FALCON_IDLE_SEL_Field is (SEL_WAITING, SEL_ENG_IDLE, SEL_MTHD_FULL, SEL_WAITING_SC, SEL_ENG_IDLE_SC, SEL_MTHD_FULL_SC) with
        Size => 3;
    for LW_PRGNLCL_FALCON_PMM_FALCON_IDLE_SEL_Field use
        (SEL_WAITING => 16#0#, SEL_ENG_IDLE => 16#1#, SEL_MTHD_FULL => 16#2#, SEL_WAITING_SC => 16#3#, SEL_ENG_IDLE_SC => 16#4#, SEL_MTHD_FULL_SC => 16#5#);
    type LW_PRGNLCL_FALCON_PMM_FALCON_SOFTPM0_SEL_Field is (SEL_0, SEL_1, SEL_2, SEL_3, SEL_4, SEL_5, SEL_0_SC, SEL_1_SC, SEL_2_SC, SEL_3_SC, SEL_4_SC, SEL_5_SC) with
        Size => 4;
    for LW_PRGNLCL_FALCON_PMM_FALCON_SOFTPM0_SEL_Field use
        (SEL_0 => 16#0#, SEL_1 => 16#1#, SEL_2 => 16#2#, SEL_3 => 16#3#, SEL_4 => 16#4#, SEL_5 => 16#5#, SEL_0_SC => 16#6#, SEL_1_SC => 16#7#, SEL_2_SC => 16#8#, SEL_3_SC => 16#9#,
         SEL_4_SC => 16#a#, SEL_5_SC => 16#b#);
    LW_PRGNLCL_FALCON_PMM_FALCON_SOFTPM1_SEL_0 : constant NvU4 := 16#0#;
    type LW_PRGNLCL_FALCON_PMM_FBIF_DSTAT_SEL_Field is (SEL_1KTRANSFER, SEL_RREQ, SEL_WREQ, SEL_1KTRANSFER_SC, SEL_RREQ_SC, SEL_WREQ_SC) with
        Size => 3;
    for LW_PRGNLCL_FALCON_PMM_FBIF_DSTAT_SEL_Field use
        (SEL_1KTRANSFER => 16#0#, SEL_RREQ => 16#1#, SEL_WREQ => 16#2#, SEL_1KTRANSFER_SC => 16#3#, SEL_RREQ_SC => 16#4#, SEL_WREQ_SC => 16#5#);
    type LW_PRGNLCL_FALCON_PMM_FBIF_STALL0_SEL_Field is
        (SEL_RDAT_WAIT, SEL_RDM_CLIENT, SEL_WDF_FULL, SEL_RQQ_FULL, SEL_RDM_PORTQ, SEL_RDM_ALLOC, SEL_FB_BSY, SEL_ORQ, SEL_RDAT_WAIT_SC, SEL_RDM_CLIENT_SC, SEL_WDF_FULL_SC,
         SEL_RQQ_FULL_SC, SEL_RDM_PORTQ_SC, SEL_RDM_ALLOC_SC, SEL_FB_BSY_SC, SEL_ORQ_SC) with
        Size => 4;
    for LW_PRGNLCL_FALCON_PMM_FBIF_STALL0_SEL_Field use
        (SEL_RDAT_WAIT    => 16#0#, SEL_RDM_CLIENT => 16#1#, SEL_WDF_FULL => 16#2#, SEL_RQQ_FULL => 16#3#, SEL_RDM_PORTQ => 16#4#, SEL_RDM_ALLOC => 16#5#, SEL_FB_BSY => 16#6#,
         SEL_ORQ          => 16#7#, SEL_RDAT_WAIT_SC => 16#8#, SEL_RDM_CLIENT_SC => 16#9#, SEL_WDF_FULL_SC => 16#a#, SEL_RQQ_FULL_SC => 16#b#, SEL_RDM_PORTQ_SC => 16#c#,
         SEL_RDM_ALLOC_SC => 16#d#, SEL_FB_BSY_SC => 16#e#, SEL_ORQ_SC => 16#f#);
    LW_PRGNLCL_FALCON_PMM_FBIF_STALL1_SEL_RDAT_WAIT : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_PMM_FBIF_STALL2_SEL_RDAT_WAIT : constant NvU4 := 16#0#;

    type LW_PRGNLCL_FALCON_PMM_Register is record
        Falcon_Stall_Sel   : LW_PRGNLCL_FALCON_PMM_FALCON_STALL_SEL_Field;
        Falcon_Idle_Sel    : LW_PRGNLCL_FALCON_PMM_FALCON_IDLE_SEL_Field;
        Falcon_Softpm0_Sel : LW_PRGNLCL_FALCON_PMM_FALCON_SOFTPM0_SEL_Field;
        Falcon_Softpm1_Sel : NvU4;
        Fbif_Dstat_Sel     : LW_PRGNLCL_FALCON_PMM_FBIF_DSTAT_SEL_Field;
        Fbif_Stall0_Sel    : LW_PRGNLCL_FALCON_PMM_FBIF_STALL0_SEL_Field;
        Fbif_Stall1_Sel    : NvU4;
        Fbif_Stall2_Sel    : NvU4;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_PMM_Register use record
        Falcon_Stall_Sel   at 0 range  0 ..  4;
        Falcon_Idle_Sel    at 0 range  5 ..  7;
        Falcon_Softpm0_Sel at 0 range  8 .. 11;
        Falcon_Softpm1_Sel at 0 range 12 .. 15;
        Fbif_Dstat_Sel     at 0 range 17 .. 19;
        Fbif_Stall0_Sel    at 0 range 20 .. 23;
        Fbif_Stall1_Sel    at 0 range 24 .. 27;
        Fbif_Stall2_Sel    at 0 range 28 .. 31;
    end record;

    LW_PRGNLCL_FALCON_DEBUG1_MTHD_DRAIN_TIME_INIT           : constant NvU16 := 16#40#;
    LW_PRGNLCL_FALCON_DEBUG1_CTXSW_MODE_INIT                : constant NvU1  := 16#0#;
    LW_PRGNLCL_FALCON_DEBUG1_TRACE_FORMAT_INIT              : constant NvU1  := 16#0#;
    LW_PRGNLCL_FALCON_DEBUG1_TRACE_FORMAT_UNCOMPRESSED      : constant NvU1  := 16#0#;
    LW_PRGNLCL_FALCON_DEBUG1_TRACE_FORMAT_COMPRESSED        : constant NvU1  := 16#1#;
    LW_PRGNLCL_FALCON_DEBUG1_CTXSW_MODE1_INIT               : constant NvU1  := 16#0#;
    LW_PRGNLCL_FALCON_DEBUG1_CTXSW_MODE1_BYPASS_IDLE_CHECKS : constant NvU1  := 16#1#;
    LW_PRGNLCL_FALCON_DEBUG1_CTXSW_MODE1_DEFAULT            : constant NvU1  := 16#0#;

    type LW_PRGNLCL_FALCON_DEBUG1_Register is record
        Mthd_Drain_Time : NvU16;
        Ctxsw_Mode      : NvU1;
        Trace_Format    : NvU1;
        Ctxsw_Mode1     : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DEBUG1_Register use record
        Mthd_Drain_Time at 0 range  0 .. 15;
        Ctxsw_Mode      at 0 range 16 .. 16;
        Trace_Format    at 0 range 17 .. 17;
        Ctxsw_Mode1     at 0 range 18 .. 18;
    end record;

    type LW_PRGNLCL_FALCON_DEBUGINFO_Register is record
        Data : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DEBUGINFO_Register use record
        Data at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_FALCON_SP_MIN_VALUE_INIT : constant NvU24 := 16#0#;

    type LW_PRGNLCL_FALCON_SP_MIN_Register is record
        Value : NvU24;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_SP_MIN_Register use record
        Value at 0 range 0 .. 23;
    end record;

    type LW_PRGNLCL_FALCON_EXCI_EXCAUSE_Field is
        (EXCAUSE_TRAP0, EXCAUSE_TRAP1, EXCAUSE_TRAP2, EXCAUSE_TRAP3, EXCAUSE_ILL_INS, EXCAUSE_ILW_INS, EXCAUSE_MISS_INS, EXCAUSE_DHIT_INS, EXCAUSE_SP_OVERFLOW, EXCAUSE_BRKPT_INS,
         EXCAUSE_DMEM_MISS_INS, EXCAUSE_DMEM_DHIT_INS, EXCAUSE_DMEM_PAFAULT_INS, EXCAUSE_DMEM_PERMISSION_INS, EXCAUSE_BROM_CALL_INS, EXCAUSE_KMEM_VIOLATION_INS,
         EXCAUSE_BMEM_PERMISSION_INS) with
        Size => 5;
    for LW_PRGNLCL_FALCON_EXCI_EXCAUSE_Field use
        (EXCAUSE_TRAP0              => 16#0#, EXCAUSE_TRAP1 => 16#1#, EXCAUSE_TRAP2 => 16#2#, EXCAUSE_TRAP3 => 16#3#, EXCAUSE_ILL_INS => 16#8#, EXCAUSE_ILW_INS => 16#9#,
         EXCAUSE_MISS_INS           => 16#a#, EXCAUSE_DHIT_INS => 16#b#, EXCAUSE_SP_OVERFLOW => 16#d#, EXCAUSE_BRKPT_INS => 16#f#, EXCAUSE_DMEM_MISS_INS => 16#10#,
         EXCAUSE_DMEM_DHIT_INS      => 16#11#, EXCAUSE_DMEM_PAFAULT_INS => 16#12#, EXCAUSE_DMEM_PERMISSION_INS => 16#13#, EXCAUSE_BROM_CALL_INS => 16#15#,
         EXCAUSE_KMEM_VIOLATION_INS => 16#16#, EXCAUSE_BMEM_PERMISSION_INS => 16#17#);

    type LW_PRGNLCL_FALCON_EXCI_Register is record
        Expc      : NvU20;
        Excause   : LW_PRGNLCL_FALCON_EXCI_EXCAUSE_Field;
        Expc_High : NvU4;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_EXCI_Register use record
        Expc      at 0 range  0 .. 19;
        Excause   at 0 range 20 .. 24;
        Expc_High at 0 range 28 .. 31;
    end record;

    LW_PRGNLCL_FALCON_EXCI2_ADDRESS_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_FALCON_EXCI2_Register is record
        Address : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_EXCI2_Register use record
        Address at 0 range 0 .. 31;
    end record;

    type LW_PRGNLCL_FALCON_SVEC_SPR_SIGPASS_Field is (SIGPASS_FALSE, SIGPASS_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SVEC_SPR_SIGPASS_Field use (SIGPASS_FALSE => 16#0#, SIGPASS_TRUE => 16#1#);

    type LW_PRGNLCL_FALCON_SVEC_SPR_Register is record
        Sigpass : LW_PRGNLCL_FALCON_SVEC_SPR_SIGPASS_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_SVEC_SPR_Register use record
        Sigpass at 0 range 18 .. 18;
    end record;

    type LW_PRGNLCL_FALCON_CPUCTL_IINVAL_Field is (IINVAL_FALSE, IINVAL_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_CPUCTL_IINVAL_Field use (IINVAL_FALSE => 16#0#, IINVAL_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_CPUCTL_STARTCPU_Field is (STARTCPU_FALSE, STARTCPU_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_CPUCTL_STARTCPU_Field use (STARTCPU_FALSE => 16#0#, STARTCPU_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_CPUCTL_SRESET_Field is (SRESET_FALSE, SRESET_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_CPUCTL_SRESET_Field use (SRESET_FALSE => 16#0#, SRESET_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_CPUCTL_HRESET_Field is (HRESET_FALSE, HRESET_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_CPUCTL_HRESET_Field use (HRESET_FALSE => 16#0#, HRESET_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_CPUCTL_HALTED_Field is (HALTED_FALSE, HALTED_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_CPUCTL_HALTED_Field use (HALTED_FALSE => 16#0#, HALTED_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_CPUCTL_STOPPED_Field is (STOPPED_FALSE, STOPPED_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_CPUCTL_STOPPED_Field use (STOPPED_FALSE => 16#0#, STOPPED_TRUE => 16#1#);
    LW_PRGNLCL_FALCON_CPUCTL_ALIAS_EN_TRUE  : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_CPUCTL_ALIAS_EN_FALSE : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_CPUCTL_ALIAS_EN_INIT  : constant NvU1 := 16#0#;

    type LW_PRGNLCL_FALCON_CPUCTL_Register is record
        Iinval   : LW_PRGNLCL_FALCON_CPUCTL_IINVAL_Field;
        Startcpu : LW_PRGNLCL_FALCON_CPUCTL_STARTCPU_Field;
        Sreset   : LW_PRGNLCL_FALCON_CPUCTL_SRESET_Field;
        Hreset   : LW_PRGNLCL_FALCON_CPUCTL_HRESET_Field;
        Halted   : LW_PRGNLCL_FALCON_CPUCTL_HALTED_Field;
        Stopped  : LW_PRGNLCL_FALCON_CPUCTL_STOPPED_Field;
        Alias_En : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_CPUCTL_Register use record
        Iinval   at 0 range 0 .. 0;
        Startcpu at 0 range 1 .. 1;
        Sreset   at 0 range 2 .. 2;
        Hreset   at 0 range 3 .. 3;
        Halted   at 0 range 4 .. 4;
        Stopped  at 0 range 5 .. 5;
        Alias_En at 0 range 6 .. 6;
    end record;

    type LW_PRGNLCL_FALCON_CPUCTL_ALIAS_STARTCPU_Field is (STARTCPU_FALSE, STARTCPU_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_CPUCTL_ALIAS_STARTCPU_Field use (STARTCPU_FALSE => 16#0#, STARTCPU_TRUE => 16#1#);

    type LW_PRGNLCL_FALCON_CPUCTL_ALIAS_Register is record
        Startcpu : LW_PRGNLCL_FALCON_CPUCTL_ALIAS_STARTCPU_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_CPUCTL_ALIAS_Register use record
        Startcpu at 0 range 1 .. 1;
    end record;

    LW_PRGNLCL_FALCON_STACKCFG_BOTTOM_INIT   : constant NvU24 := 16#0#;
    LW_PRGNLCL_FALCON_STACKCFG_SPEXC_INIT    : constant NvU1  := 16#0#;
    LW_PRGNLCL_FALCON_STACKCFG_SPEXC_DISABLE : constant NvU1  := 16#0#;
    LW_PRGNLCL_FALCON_STACKCFG_SPEXC_ENABLE  : constant NvU1  := 16#1#;

    type LW_PRGNLCL_FALCON_STACKCFG_Register is record
        Bottom : NvU24;
        Spexc  : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_STACKCFG_Register use record
        Bottom at 0 range  0 .. 23;
        Spexc  at 0 range 31 .. 31;
    end record;

    LW_PRGNLCL_FALCON_BOOTVEC_VEC_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_FALCON_BOOTVEC_Register is record
        Vec : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_BOOTVEC_Register use record
        Vec at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_FALCON_DBGCTL_ICD_CMDWL_STOP_INIT        : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_DBGCTL_ICD_CMDWL_STOP_DISABLE     : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_DBGCTL_ICD_CMDWL_STOP_ENABLE      : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_DBGCTL_ICD_CMDWL_RUN_INIT         : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_DBGCTL_ICD_CMDWL_RUN_DISABLE      : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_DBGCTL_ICD_CMDWL_RUN_ENABLE       : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_DBGCTL_ICD_CMDWL_RUNB_INIT        : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_DBGCTL_ICD_CMDWL_RUNB_DISABLE     : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_DBGCTL_ICD_CMDWL_RUNB_ENABLE      : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_DBGCTL_ICD_CMDWL_STEP_INIT        : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_DBGCTL_ICD_CMDWL_STEP_DISABLE     : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_DBGCTL_ICD_CMDWL_STEP_ENABLE      : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_DBGCTL_ICD_CMDWL_EMASK_INIT       : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_DBGCTL_ICD_CMDWL_EMASK_DISABLE    : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_DBGCTL_ICD_CMDWL_EMASK_ENABLE     : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_DBGCTL_ICD_CMDWL_RREG_SPR_INIT    : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_DBGCTL_ICD_CMDWL_RREG_SPR_DISABLE : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_DBGCTL_ICD_CMDWL_RREG_SPR_ENABLE  : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_DBGCTL_ICD_CMDWL_RSTAT_INIT       : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_DBGCTL_ICD_CMDWL_RSTAT_DISABLE    : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_DBGCTL_ICD_CMDWL_RSTAT_ENABLE     : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_DBGCTL_PRIVWL_IBRKPT_INIT         : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_DBGCTL_PRIVWL_IBRKPT_DISABLE      : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_DBGCTL_PRIVWL_IBRKPT_ENABLE       : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_DBGCTL_ICD_CMDWL_RREG_GPR_INIT    : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_DBGCTL_ICD_CMDWL_RREG_GPR_DISABLE : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_DBGCTL_ICD_CMDWL_RREG_GPR_ENABLE  : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_DBGCTL_ICD_CMDWL_RDM_INIT         : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_DBGCTL_ICD_CMDWL_RDM_DISABLE      : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_DBGCTL_ICD_CMDWL_RDM_ENABLE       : constant NvU1 := 16#1#;
    type LW_PRGNLCL_FALCON_DBGCTL_TRACE_MODE_Field is (MODE_FULL, MODE_REDUCED, MODE_STACK) with
        Size => 2;
    for LW_PRGNLCL_FALCON_DBGCTL_TRACE_MODE_Field use (MODE_FULL => 16#0#, MODE_REDUCED => 16#1#, MODE_STACK => 16#2#);
    LW_PRGNLCL_FALCON_DBGCTL_CYA_INIT   : constant NvU16 := 16#0#;
    LW_PRGNLCL_FALCON_DBGCTL_CYA_ENABLE : constant NvU16 := 16#8afe#;
    LW_PRGNLCL_FALCON_DBGCTL_VAL_INIT   : constant       := 16#0#;

    type LW_PRGNLCL_FALCON_DBGCTL_Register is record
        Icd_Cmdwl_Stop     : NvU1;
        Icd_Cmdwl_Run      : NvU1;
        Icd_Cmdwl_Runb     : NvU1;
        Icd_Cmdwl_Step     : NvU1;
        Icd_Cmdwl_Emask    : NvU1;
        Icd_Cmdwl_Rreg_Spr : NvU1;
        Icd_Cmdwl_Rstat    : NvU1;
        Privwl_Ibrkpt      : NvU1;
        Icd_Cmdwl_Rreg_Gpr : NvU1;
        Icd_Cmdwl_Rdm      : NvU1;
        Trace_Mode         : LW_PRGNLCL_FALCON_DBGCTL_TRACE_MODE_Field;
        Cya                : NvU16;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DBGCTL_Register use record
        Icd_Cmdwl_Stop     at 0 range  0 ..  0;
        Icd_Cmdwl_Run      at 0 range  1 ..  1;
        Icd_Cmdwl_Runb     at 0 range  2 ..  2;
        Icd_Cmdwl_Step     at 0 range  3 ..  3;
        Icd_Cmdwl_Emask    at 0 range  4 ..  4;
        Icd_Cmdwl_Rreg_Spr at 0 range  5 ..  5;
        Icd_Cmdwl_Rstat    at 0 range  6 ..  6;
        Privwl_Ibrkpt      at 0 range  7 ..  7;
        Icd_Cmdwl_Rreg_Gpr at 0 range  8 ..  8;
        Icd_Cmdwl_Rdm      at 0 range  9 ..  9;
        Trace_Mode         at 0 range 12 .. 13;
        Cya                at 0 range 16 .. 31;
    end record;

    LW_PRGNLCL_FALCON_IBRKPT1_PC_INIT          : constant NvU24 := 16#0#;
    LW_PRGNLCL_FALCON_IBRKPT1_SUPPRESS_INIT    : constant NvU1  := 16#0#;
    LW_PRGNLCL_FALCON_IBRKPT1_SUPPRESS_DISABLE : constant NvU1  := 16#0#;
    LW_PRGNLCL_FALCON_IBRKPT1_SUPPRESS_ENABLE  : constant NvU1  := 16#1#;
    LW_PRGNLCL_FALCON_IBRKPT1_SKIP_INIT        : constant NvU1  := 16#0#;
    LW_PRGNLCL_FALCON_IBRKPT1_SKIP_DISABLE     : constant NvU1  := 16#0#;
    LW_PRGNLCL_FALCON_IBRKPT1_SKIP_ENABLE      : constant NvU1  := 16#1#;
    LW_PRGNLCL_FALCON_IBRKPT1_EN_INIT          : constant NvU1  := 16#0#;
    LW_PRGNLCL_FALCON_IBRKPT1_EN_DISABLE       : constant NvU1  := 16#0#;
    LW_PRGNLCL_FALCON_IBRKPT1_EN_ENABLE        : constant NvU1  := 16#1#;

    type LW_PRGNLCL_FALCON_IBRKPT1_Register is record
        Pc       : NvU24;
        Suppress : NvU1;
        Skip     : NvU1;
        En       : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_IBRKPT1_Register use record
        Pc       at 0 range  0 .. 23;
        Suppress at 0 range 29 .. 29;
        Skip     at 0 range 30 .. 30;
        En       at 0 range 31 .. 31;
    end record;

    LW_PRGNLCL_FALCON_IBRKPT2_PC_INIT          : constant NvU24 := 16#0#;
    LW_PRGNLCL_FALCON_IBRKPT2_SUPPRESS_INIT    : constant NvU1  := 16#0#;
    LW_PRGNLCL_FALCON_IBRKPT2_SUPPRESS_DISABLE : constant NvU1  := 16#0#;
    LW_PRGNLCL_FALCON_IBRKPT2_SUPPRESS_ENABLE  : constant NvU1  := 16#1#;
    LW_PRGNLCL_FALCON_IBRKPT2_SKIP_INIT        : constant NvU1  := 16#0#;
    LW_PRGNLCL_FALCON_IBRKPT2_SKIP_DISABLE     : constant NvU1  := 16#0#;
    LW_PRGNLCL_FALCON_IBRKPT2_SKIP_ENABLE      : constant NvU1  := 16#1#;
    LW_PRGNLCL_FALCON_IBRKPT2_EN_INIT          : constant NvU1  := 16#0#;
    LW_PRGNLCL_FALCON_IBRKPT2_EN_DISABLE       : constant NvU1  := 16#0#;
    LW_PRGNLCL_FALCON_IBRKPT2_EN_ENABLE        : constant NvU1  := 16#1#;

    type LW_PRGNLCL_FALCON_IBRKPT2_Register is record
        Pc       : NvU24;
        Suppress : NvU1;
        Skip     : NvU1;
        En       : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_IBRKPT2_Register use record
        Pc       at 0 range  0 .. 23;
        Suppress at 0 range 29 .. 29;
        Skip     at 0 range 30 .. 30;
        En       at 0 range 31 .. 31;
    end record;

    LW_PRGNLCL_FALCON_IBRKPT3_PC_INIT          : constant NvU24 := 16#0#;
    LW_PRGNLCL_FALCON_IBRKPT3_SUPPRESS_INIT    : constant NvU1  := 16#0#;
    LW_PRGNLCL_FALCON_IBRKPT3_SUPPRESS_DISABLE : constant NvU1  := 16#0#;
    LW_PRGNLCL_FALCON_IBRKPT3_SUPPRESS_ENABLE  : constant NvU1  := 16#1#;
    LW_PRGNLCL_FALCON_IBRKPT3_SKIP_INIT        : constant NvU1  := 16#0#;
    LW_PRGNLCL_FALCON_IBRKPT3_SKIP_DISABLE     : constant NvU1  := 16#0#;
    LW_PRGNLCL_FALCON_IBRKPT3_SKIP_ENABLE      : constant NvU1  := 16#1#;
    LW_PRGNLCL_FALCON_IBRKPT3_EN_INIT          : constant NvU1  := 16#0#;
    LW_PRGNLCL_FALCON_IBRKPT3_EN_DISABLE       : constant NvU1  := 16#0#;
    LW_PRGNLCL_FALCON_IBRKPT3_EN_ENABLE        : constant NvU1  := 16#1#;

    type LW_PRGNLCL_FALCON_IBRKPT3_Register is record
        Pc       : NvU24;
        Suppress : NvU1;
        Skip     : NvU1;
        En       : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_IBRKPT3_Register use record
        Pc       at 0 range  0 .. 23;
        Suppress at 0 range 29 .. 29;
        Skip     at 0 range 30 .. 30;
        En       at 0 range 31 .. 31;
    end record;

    LW_PRGNLCL_FALCON_IBRKPT4_PC_INIT          : constant NvU24 := 16#0#;
    LW_PRGNLCL_FALCON_IBRKPT4_SUPPRESS_INIT    : constant NvU1  := 16#0#;
    LW_PRGNLCL_FALCON_IBRKPT4_SUPPRESS_DISABLE : constant NvU1  := 16#0#;
    LW_PRGNLCL_FALCON_IBRKPT4_SUPPRESS_ENABLE  : constant NvU1  := 16#1#;
    LW_PRGNLCL_FALCON_IBRKPT4_SKIP_INIT        : constant NvU1  := 16#0#;
    LW_PRGNLCL_FALCON_IBRKPT4_SKIP_DISABLE     : constant NvU1  := 16#0#;
    LW_PRGNLCL_FALCON_IBRKPT4_SKIP_ENABLE      : constant NvU1  := 16#1#;
    LW_PRGNLCL_FALCON_IBRKPT4_EN_INIT          : constant NvU1  := 16#0#;
    LW_PRGNLCL_FALCON_IBRKPT4_EN_DISABLE       : constant NvU1  := 16#0#;
    LW_PRGNLCL_FALCON_IBRKPT4_EN_ENABLE        : constant NvU1  := 16#1#;

    type LW_PRGNLCL_FALCON_IBRKPT4_Register is record
        Pc       : NvU24;
        Suppress : NvU1;
        Skip     : NvU1;
        En       : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_IBRKPT4_Register use record
        Pc       at 0 range  0 .. 23;
        Suppress at 0 range 29 .. 29;
        Skip     at 0 range 30 .. 30;
        En       at 0 range 31 .. 31;
    end record;

    LW_PRGNLCL_FALCON_IBRKPT5_PC_INIT          : constant NvU24 := 16#0#;
    LW_PRGNLCL_FALCON_IBRKPT5_SUPPRESS_INIT    : constant NvU1  := 16#0#;
    LW_PRGNLCL_FALCON_IBRKPT5_SUPPRESS_DISABLE : constant NvU1  := 16#0#;
    LW_PRGNLCL_FALCON_IBRKPT5_SUPPRESS_ENABLE  : constant NvU1  := 16#1#;
    LW_PRGNLCL_FALCON_IBRKPT5_SKIP_INIT        : constant NvU1  := 16#0#;
    LW_PRGNLCL_FALCON_IBRKPT5_SKIP_DISABLE     : constant NvU1  := 16#0#;
    LW_PRGNLCL_FALCON_IBRKPT5_SKIP_ENABLE      : constant NvU1  := 16#1#;
    LW_PRGNLCL_FALCON_IBRKPT5_EN_INIT          : constant NvU1  := 16#0#;
    LW_PRGNLCL_FALCON_IBRKPT5_EN_DISABLE       : constant NvU1  := 16#0#;
    LW_PRGNLCL_FALCON_IBRKPT5_EN_ENABLE        : constant NvU1  := 16#1#;

    type LW_PRGNLCL_FALCON_IBRKPT5_Register is record
        Pc       : NvU24;
        Suppress : NvU1;
        Skip     : NvU1;
        En       : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_IBRKPT5_Register use record
        Pc       at 0 range  0 .. 23;
        Suppress at 0 range 29 .. 29;
        Skip     at 0 range 30 .. 30;
        En       at 0 range 31 .. 31;
    end record;

    type LW_PRGNLCL_FALCON_ICD_CMD_OPC_Field is
        (OPC_STOP, OPC_RUN, OPC_JRUN, OPC_RUNB, OPC_JRUNB, OPC_STEP, OPC_JSTEP, OPC_EMASK, OPC_RREG, OPC_WREG, OPC_RDM, OPC_WDM, OPC_RCM, OPC_WCM, OPC_RSTAT, OPC_SBU) with
        Size => 4;
    for LW_PRGNLCL_FALCON_ICD_CMD_OPC_Field use
        (OPC_STOP => 16#0#, OPC_RUN => 16#1#, OPC_JRUN => 16#2#, OPC_RUNB => 16#3#, OPC_JRUNB => 16#4#, OPC_STEP => 16#5#, OPC_JSTEP => 16#6#, OPC_EMASK => 16#7#,
         OPC_RREG => 16#8#, OPC_WREG => 16#9#, OPC_RDM => 16#a#, OPC_WDM => 16#b#, OPC_RCM => 16#c#, OPC_WCM => 16#d#, OPC_RSTAT => 16#e#, OPC_SBU => 16#f#);
    type LW_PRGNLCL_FALCON_ICD_CMD_SZ_Field is (SZ_B, SZ_HW, SZ_W) with
        Size => 2;
    for LW_PRGNLCL_FALCON_ICD_CMD_SZ_Field use (SZ_B => 16#0#, SZ_HW => 16#1#, SZ_W => 16#2#);
    LW_PRGNLCL_FALCON_ICD_CMD_IDX_REG0   : constant NvU5 := 16#0#;
    LW_PRGNLCL_FALCON_ICD_CMD_IDX_REG1   : constant NvU5 := 16#1#;
    LW_PRGNLCL_FALCON_ICD_CMD_IDX_REG2   : constant NvU5 := 16#2#;
    LW_PRGNLCL_FALCON_ICD_CMD_IDX_REG3   : constant NvU5 := 16#3#;
    LW_PRGNLCL_FALCON_ICD_CMD_IDX_REG4   : constant NvU5 := 16#4#;
    LW_PRGNLCL_FALCON_ICD_CMD_IDX_REG5   : constant NvU5 := 16#5#;
    LW_PRGNLCL_FALCON_ICD_CMD_IDX_REG6   : constant NvU5 := 16#6#;
    LW_PRGNLCL_FALCON_ICD_CMD_IDX_REG7   : constant NvU5 := 16#7#;
    LW_PRGNLCL_FALCON_ICD_CMD_IDX_REG8   : constant NvU5 := 16#8#;
    LW_PRGNLCL_FALCON_ICD_CMD_IDX_REG9   : constant NvU5 := 16#9#;
    LW_PRGNLCL_FALCON_ICD_CMD_IDX_REG10  : constant NvU5 := 16#a#;
    LW_PRGNLCL_FALCON_ICD_CMD_IDX_REG11  : constant NvU5 := 16#b#;
    LW_PRGNLCL_FALCON_ICD_CMD_IDX_REG12  : constant NvU5 := 16#c#;
    LW_PRGNLCL_FALCON_ICD_CMD_IDX_REG13  : constant NvU5 := 16#d#;
    LW_PRGNLCL_FALCON_ICD_CMD_IDX_REG14  : constant NvU5 := 16#e#;
    LW_PRGNLCL_FALCON_ICD_CMD_IDX_REG15  : constant NvU5 := 16#f#;
    LW_PRGNLCL_FALCON_ICD_CMD_IDX_IV0    : constant NvU5 := 16#10#;
    LW_PRGNLCL_FALCON_ICD_CMD_IDX_IV1    : constant NvU5 := 16#11#;
    LW_PRGNLCL_FALCON_ICD_CMD_IDX_EV     : constant NvU5 := 16#13#;
    LW_PRGNLCL_FALCON_ICD_CMD_IDX_SP     : constant NvU5 := 16#14#;
    LW_PRGNLCL_FALCON_ICD_CMD_IDX_PC     : constant NvU5 := 16#15#;
    LW_PRGNLCL_FALCON_ICD_CMD_IDX_IMB    : constant NvU5 := 16#16#;
    LW_PRGNLCL_FALCON_ICD_CMD_IDX_DMB    : constant NvU5 := 16#17#;
    LW_PRGNLCL_FALCON_ICD_CMD_IDX_CSW    : constant NvU5 := 16#18#;
    LW_PRGNLCL_FALCON_ICD_CMD_IDX_CCR    : constant NvU5 := 16#19#;
    LW_PRGNLCL_FALCON_ICD_CMD_IDX_SEC    : constant NvU5 := 16#1a#;
    LW_PRGNLCL_FALCON_ICD_CMD_IDX_CTX    : constant NvU5 := 16#1b#;
    LW_PRGNLCL_FALCON_ICD_CMD_IDX_EXCI   : constant NvU5 := 16#1c#;
    LW_PRGNLCL_FALCON_ICD_CMD_IDX_SEC1   : constant NvU5 := 16#1e#;
    LW_PRGNLCL_FALCON_ICD_CMD_IDX_IMB1   : constant NvU5 := 16#1e#;
    LW_PRGNLCL_FALCON_ICD_CMD_IDX_DMB1   : constant NvU5 := 16#1f#;
    LW_PRGNLCL_FALCON_ICD_CMD_IDX_RSTAT0 : constant NvU5 := 16#0#;
    LW_PRGNLCL_FALCON_ICD_CMD_IDX_RSTAT1 : constant NvU5 := 16#1#;
    LW_PRGNLCL_FALCON_ICD_CMD_IDX_RSTAT2 : constant NvU5 := 16#2#;
    LW_PRGNLCL_FALCON_ICD_CMD_IDX_RSTAT3 : constant NvU5 := 16#3#;
    LW_PRGNLCL_FALCON_ICD_CMD_IDX_RSTAT4 : constant NvU5 := 16#4#;
    LW_PRGNLCL_FALCON_ICD_CMD_IDX_RSTAT5 : constant NvU5 := 16#5#;
    LW_PRGNLCL_FALCON_ICD_CMD_IDX_WB0    : constant NvU5 := 16#0#;
    LW_PRGNLCL_FALCON_ICD_CMD_IDX_WB1    : constant NvU5 := 16#1#;
    LW_PRGNLCL_FALCON_ICD_CMD_IDX_WB2    : constant NvU5 := 16#2#;
    LW_PRGNLCL_FALCON_ICD_CMD_IDX_WB3    : constant NvU5 := 16#3#;
    type LW_PRGNLCL_FALCON_ICD_CMD_ERROR_Field is (ERROR_FALSE, ERROR_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_ICD_CMD_ERROR_Field use (ERROR_FALSE => 16#0#, ERROR_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_ICD_CMD_RDVLD_Field is (RDVLD_FALSE, RDVLD_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_ICD_CMD_RDVLD_Field use (RDVLD_FALSE => 16#0#, RDVLD_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_ICD_CMD_EMASK_TRAP0_Field is (TRAP0_FALSE, TRAP0_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_ICD_CMD_EMASK_TRAP0_Field use (TRAP0_FALSE => 16#0#, TRAP0_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_ICD_CMD_EMASK_TRAP1_Field is (TRAP1_FALSE, TRAP1_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_ICD_CMD_EMASK_TRAP1_Field use (TRAP1_FALSE => 16#0#, TRAP1_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_ICD_CMD_EMASK_TRAP2_Field is (TRAP2_FALSE, TRAP2_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_ICD_CMD_EMASK_TRAP2_Field use (TRAP2_FALSE => 16#0#, TRAP2_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_ICD_CMD_EMASK_TRAP3_Field is (TRAP3_FALSE, TRAP3_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_ICD_CMD_EMASK_TRAP3_Field use (TRAP3_FALSE => 16#0#, TRAP3_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_ICD_CMD_EMASK_EXC_UNIMP_Field is (UNIMP_FALSE, UNIMP_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_ICD_CMD_EMASK_EXC_UNIMP_Field use (UNIMP_FALSE => 16#0#, UNIMP_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_ICD_CMD_EMASK_EXC_IMISS_Field is (IMISS_FALSE, IMISS_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_ICD_CMD_EMASK_EXC_IMISS_Field use (IMISS_FALSE => 16#0#, IMISS_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_ICD_CMD_EMASK_EXC_IMHIT_Field is (IMHIT_FALSE, IMHIT_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_ICD_CMD_EMASK_EXC_IMHIT_Field use (IMHIT_FALSE => 16#0#, IMHIT_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_ICD_CMD_EMASK_EXC_IBREAK_Field is (IBREAK_FALSE, IBREAK_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_ICD_CMD_EMASK_EXC_IBREAK_Field use (IBREAK_FALSE => 16#0#, IBREAK_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_ICD_CMD_EMASK_IV0_Field is (IV0_FALSE, IV0_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_ICD_CMD_EMASK_IV0_Field use (IV0_FALSE => 16#0#, IV0_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_ICD_CMD_EMASK_IV1_Field is (IV1_FALSE, IV1_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_ICD_CMD_EMASK_IV1_Field use (IV1_FALSE => 16#0#, IV1_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_ICD_CMD_EMASK_IV2_Field is (IV2_FALSE, IV2_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_ICD_CMD_EMASK_IV2_Field use (IV2_FALSE => 16#0#, IV2_TRUE => 16#1#);

    type LW_PRGNLCL_FALCON_ICD_CMD_Register is record
        Opc              : LW_PRGNLCL_FALCON_ICD_CMD_OPC_Field;
        Sz               : LW_PRGNLCL_FALCON_ICD_CMD_SZ_Field;
        Idx              : NvU5;
        Error            : LW_PRGNLCL_FALCON_ICD_CMD_ERROR_Field;
        Rdvld            : LW_PRGNLCL_FALCON_ICD_CMD_RDVLD_Field;
        Emask_Trap0      : LW_PRGNLCL_FALCON_ICD_CMD_EMASK_TRAP0_Field;
        Emask_Trap1      : LW_PRGNLCL_FALCON_ICD_CMD_EMASK_TRAP1_Field;
        Emask_Trap2      : LW_PRGNLCL_FALCON_ICD_CMD_EMASK_TRAP2_Field;
        Emask_Trap3      : LW_PRGNLCL_FALCON_ICD_CMD_EMASK_TRAP3_Field;
        Emask_Exc_Unimp  : LW_PRGNLCL_FALCON_ICD_CMD_EMASK_EXC_UNIMP_Field;
        Emask_Exc_Imiss  : LW_PRGNLCL_FALCON_ICD_CMD_EMASK_EXC_IMISS_Field;
        Emask_Exc_Imhit  : LW_PRGNLCL_FALCON_ICD_CMD_EMASK_EXC_IMHIT_Field;
        Emask_Exc_Ibreak : LW_PRGNLCL_FALCON_ICD_CMD_EMASK_EXC_IBREAK_Field;
        Emask_Iv0        : LW_PRGNLCL_FALCON_ICD_CMD_EMASK_IV0_Field;
        Emask_Iv1        : LW_PRGNLCL_FALCON_ICD_CMD_EMASK_IV1_Field;
        Emask_Iv2        : LW_PRGNLCL_FALCON_ICD_CMD_EMASK_IV2_Field;
        Emask_Ext        : NvU5;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_ICD_CMD_Register use record
        Opc              at 0 range  0 ..  3;
        Sz               at 0 range  6 ..  7;
        Idx              at 0 range  8 .. 12;
        Error            at 0 range 14 .. 14;
        Rdvld            at 0 range 15 .. 15;
        Emask_Trap0      at 0 range 16 .. 16;
        Emask_Trap1      at 0 range 17 .. 17;
        Emask_Trap2      at 0 range 18 .. 18;
        Emask_Trap3      at 0 range 19 .. 19;
        Emask_Exc_Unimp  at 0 range 20 .. 20;
        Emask_Exc_Imiss  at 0 range 21 .. 21;
        Emask_Exc_Imhit  at 0 range 22 .. 22;
        Emask_Exc_Ibreak at 0 range 23 .. 23;
        Emask_Iv0        at 0 range 24 .. 24;
        Emask_Iv1        at 0 range 25 .. 25;
        Emask_Iv2        at 0 range 26 .. 26;
        Emask_Ext        at 0 range 27 .. 31;
    end record;

    type LW_PRGNLCL_FALCON_ICD_ADDR_Register is record
        Addr : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_ICD_ADDR_Register use record
        Addr at 0 range 0 .. 31;
    end record;

    type LW_PRGNLCL_FALCON_ICD_WDATA_Register is record
        Data : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_ICD_WDATA_Register use record
        Data at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT0_MEM_STALL_TRUE             : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT0_MEM_STALL_FALSE            : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT0_DMA_STALL_TRUE             : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT0_DMA_STALL_FALSE            : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT0_FENCE_STALL_TRUE           : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT0_FENCE_STALL_FALSE          : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT0_DIV_STALL_TRUE             : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT0_DIV_STALL_FALSE            : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT0_DMA_STALL_DMAQ_TRUE        : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT0_DMA_STALL_DMAQ_FALSE       : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT0_DMA_STALL_DMWAITING_TRUE   : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT0_DMA_STALL_DMWAITING_FALSE  : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT0_DMA_STALL_IMWAITING_TRUE   : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT0_DMA_STALL_IMWAITING_FALSE  : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT0_ANY_STALL_TRUE             : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT0_ANY_STALL_FALSE            : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT0_SBFULL_STALL_TRUE          : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT0_SBFULL_STALL_FALSE         : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT0_SBHIT_STALL_TRUE           : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT0_SBHIT_STALL_FALSE          : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT0_FLOW_STALL_TRUE            : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT0_FLOW_STALL_FALSE           : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT0_SP_STALL_TRUE              : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT0_SP_STALL_FALSE             : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT0_BL_STALL_TRUE              : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT0_BL_STALL_FALSE             : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT0_IPND_STALL_TRUE            : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT0_IPND_STALL_FALSE           : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT0_LDSTQ_STALL_TRUE           : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT0_LDSTQ_STALL_FALSE          : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT0_NOINSTR_STALL_TRUE         : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT0_NOINSTR_STALL_FALSE        : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT0_HALTSTOP_FLUSH_TRUE        : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT0_HALTSTOP_FLUSH_FALSE       : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT0_AFILL_FLUSH_TRUE           : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT0_AFILL_FLUSH_FALSE          : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT0_EXC_FLUSH_TRUE             : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT0_EXC_FLUSH_FASLE            : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT0_VALIDRD_TRUE               : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT0_VALIDRD_FALSE              : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT0_WAITING_TRUE               : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT0_WAITING_FALSE              : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT0_HALTED_TRUE                : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT0_HALTED_FALSE               : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT0_MTHD_FULL_TRUE             : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT0_MTHD_FULL_FALSE            : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT1_WB0_SZ_IS_BYTE             : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT1_WB0_SZ_IS_HALFWORD         : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT1_WB0_SZ_IS_WORD             : constant := 16#2#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT1_WB1_SZ_IS_BYTE             : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT1_WB1_SZ_IS_HALFWORD         : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT1_WB1_SZ_IS_WORD             : constant := 16#2#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT1_WB2_SZ_IS_BYTE             : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT1_WB2_SZ_IS_HALFWORD         : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT1_WB2_SZ_IS_WORD             : constant := 16#2#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT1_WB3_SZ_IS_BYTE             : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT1_WB3_SZ_IS_HALFWORD         : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT1_WB3_SZ_IS_WORD             : constant := 16#2#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT3_MTHD_IDLE_TRUE             : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT3_MTHD_IDLE_FALSE            : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT3_CTXSW_IDLE_TRUE            : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT3_CTXSW_IDLE_FALSE           : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT3_DMA_IDLE_TRUE              : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT3_DMA_IDLE_FALSE             : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT3_SCP_IDLE_TRUE              : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT3_SCP_IDLE_FALSE             : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT3_LDST_IDLE_TRUE             : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT3_LDST_IDLE_FALSE            : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT3_SBWB_EMPTY_TRUE            : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT3_SBWB_EMPTY_FALSE           : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT3_CTXSW_STATE_IDLE           : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT3_CTXSW_STATE_SM_CHECK       : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT3_CTXSW_STATE_SM_SAVE        : constant := 16#2#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT3_CTXSW_STATE_SM_SAVE_WAIT   : constant := 16#3#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT3_CTXSW_STATE_SM_BLK_BIND    : constant := 16#4#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT3_CTXSW_STATE_SM_RESET       : constant := 16#5#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT3_CTXSW_STATE_SM_RESETWAIT   : constant := 16#6#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT3_CTXSW_STATE_SM_ACK         : constant := 16#7#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT3_CTXSW_PEND_TRUE            : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT3_CTXSW_PEND_FALSE           : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT3_DMA_FBREQ_IDLE_TRUE        : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT3_DMA_FBREQ_IDLE_FALSE       : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT3_DMA_ACKQ_EMPTY_TRUE        : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT3_DMA_ACKQ_EMPTY_FALSE       : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT3_DMA_RDQ_EMPTY_TRUE         : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT3_DMA_RDQ_EMPTY_FALSE        : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT3_DMA_WR_BUSY_TRUE           : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT3_DMA_WR_BUSY_FALSE          : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT3_DMA_RD_BUSY_TRUE           : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT3_DMA_RD_BUSY_FALSE          : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT3_LDST_XT_BUSY_TRUE          : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT3_LDST_XT_BUSY_FALSE         : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT3_LDST_XT_BLOCK_TRUE         : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT3_LDST_XT_BLOCK_FALSE        : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT3_ENG_IDLE_TRUE              : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT3_ENG_IDLE_FALSE             : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT4_ICD_STATE_NORMAL           : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT4_ICD_STATE_WAIT_ISSUE_CLEAR : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT4_ICD_STATE_WAIT_EXLDQ_CLEAR : constant := 16#2#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT4_ICD_STATE_FULL_DBG_MODE    : constant := 16#3#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT4_ICD_MODE_SUPPRESSICD       : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT4_ICD_MODE_ENTERICD_IBRK     : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT4_ICD_MODE_ENTERICD_STEP     : constant := 16#2#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT4_ICD_EMASK_TRAP0_TRUE       : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT4_ICD_EMASK_TRAP0_FALSE      : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT4_ICD_EMASK_TRAP1_TRUE       : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT4_ICD_EMASK_TRAP1_FALSE      : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT4_ICD_EMASK_TRAP2_TRUE       : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT4_ICD_EMASK_TRAP2_FALSE      : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT4_ICD_EMASK_TRAP3_TRUE       : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT4_ICD_EMASK_TRAP3_FALSE      : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT4_ICD_EMASK_EXC_UNIMP_TRUE   : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT4_ICD_EMASK_EXC_UNIMP_FALSE  : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT4_ICD_EMASK_EXC_IMISS_TRUE   : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT4_ICD_EMASK_EXC_IMISS_FALSE  : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT4_ICD_EMASK_EXC_IMHIT_TRUE   : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT4_ICD_EMASK_EXC_IMHIT_FALSE  : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT4_ICD_EMASK_EXC_IBREAK_TRUE  : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT4_ICD_EMASK_EXC_IBREAK_FALSE : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT4_ICD_EMASK_IV0_TRUE         : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT4_ICD_EMASK_IV0_FALSE        : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT4_ICD_EMASK_IV1_TRUE         : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT4_ICD_EMASK_IV1_FALSE        : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT4_ICD_EMASK_IV2_TRUE         : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT4_ICD_EMASK_IV2_FALSE        : constant := 16#0#;

    type LW_PRGNLCL_FALCON_ICD_RDATA_Register is record
        Data : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_ICD_RDATA_Register use record
        Data at 0 range 0 .. 31;
    end record;

    type LW_PRGNLCL_FALCON_RSTAT0_Register is record
        Mem_Stall      : NvU1;
        Dma_Stall      : NvU1;
        Fence_Stall    : NvU1;
        Div_Stall      : NvU1;
        Sb_Full_Stall  : NvU1;
        Sb_Hit_Stall   : NvU1;
        Flow_Stall     : NvU1;
        Sp_Stall       : NvU1;
        Bl_Stall       : NvU1;
        No_Instr_Stall : NvU1;
        Haltstop_Flush : NvU1;
        Afill_Flush    : NvU1;
        Exc_Flush      : NvU1;
        Irq_Flush      : NvU3;
        Valid          : NvU1;
        Waiting        : NvU1;
        Halted         : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_RSTAT0_Register use record
        Mem_Stall      at 0 range  0 ..  0;
        Dma_Stall      at 0 range  1 ..  1;
        Fence_Stall    at 0 range  2 ..  2;
        Div_Stall      at 0 range  3 ..  3;
        Sb_Full_Stall  at 0 range  8 ..  8;
        Sb_Hit_Stall   at 0 range  9 ..  9;
        Flow_Stall     at 0 range 10 .. 10;
        Sp_Stall       at 0 range 11 .. 11;
        Bl_Stall       at 0 range 12 .. 12;
        No_Instr_Stall at 0 range 16 .. 16;
        Haltstop_Flush at 0 range 20 .. 20;
        Afill_Flush    at 0 range 21 .. 21;
        Exc_Flush      at 0 range 22 .. 22;
        Irq_Flush      at 0 range 23 .. 25;
        Valid          at 0 range 28 .. 28;
        Waiting        at 0 range 29 .. 29;
        Halted         at 0 range 30 .. 30;
    end record;

    type LW_PRGNLCL_FALCON_RSTAT3_Register is record
        Mthd_Idle      : NvU1;
        Ctxsw_Idle     : NvU1;
        Dma_Idle       : NvU1;
        Scp_Idle       : NvU1;
        Ldst_Idle      : NvU1;
        Sbwb_Empty     : NvU1;
        Cswie          : NvU3;
        Cswe           : NvU1;
        Ctxsw_State    : NvU3;
        Ctxsw_Pend     : NvU1;
        Dma_Fbreq_Idle : NvU1;
        Dma_Ackq_Empty : NvU1;
        Dma_Rdq_Empty  : NvU1;
        Dma_Wr_Busy    : NvU1;
        Dma_Rd_Busy    : NvU1;
        Ldst_Xt_Busy   : NvU1;
        Ldst_Xt_Block  : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_RSTAT3_Register use record
        Mthd_Idle      at 0 range  0 ..  0;
        Ctxsw_Idle     at 0 range  1 ..  1;
        Dma_Idle       at 0 range  2 ..  2;
        Scp_Idle       at 0 range  3 ..  3;
        Ldst_Idle      at 0 range  4 ..  4;
        Sbwb_Empty     at 0 range  5 ..  5;
        Cswie          at 0 range  6 ..  8;
        Cswe           at 0 range 10 .. 10;
        Ctxsw_State    at 0 range 12 .. 14;
        Ctxsw_Pend     at 0 range 15 .. 15;
        Dma_Fbreq_Idle at 0 range 17 .. 17;
        Dma_Ackq_Empty at 0 range 18 .. 18;
        Dma_Rdq_Empty  at 0 range 19 .. 19;
        Dma_Wr_Busy    at 0 range 20 .. 20;
        Dma_Rd_Busy    at 0 range 21 .. 21;
        Ldst_Xt_Busy   at 0 range 22 .. 22;
        Ldst_Xt_Block  at 0 range 23 .. 23;
    end record;

    LW_PRGNLCL_FALCON_TRACEIDX_CNT_INIT : constant NvU8 := 16#0#;
    LW_PRGNLCL_FALCON_TRACEIDX_IDX_INIT : constant NvU8 := 16#0#;

    type LW_PRGNLCL_FALCON_TRACEIDX_Register is record
        Cnt    : NvU8;
        Maxidx : NvU8;
        Idx    : NvU8;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_TRACEIDX_Register use record
        Cnt    at 0 range 24 .. 31;
        Maxidx at 0 range 16 .. 23;
        Idx    at 0 range  0 ..  7;
    end record;

    type LW_PRGNLCL_FALCON_TRACEPC_Register is record
        Pc : NvU24;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_TRACEPC_Register use record
        Pc at 0 range 0 .. 23;
    end record;

    type LW_PRGNLCL_FALCON_TRACEINFO_Register is record
        Count : NvU16;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_TRACEINFO_Register use record
        Count at 0 range 0 .. 15;
    end record;

    type LW_PRGNLCL_FALCON_IMCTL_CMD_Field is (CMD_NOP, CMD_IMINV, CMD_IMBLK, CMD_IMTAG, CMD_IMTAG_SETVLD) with
        Size => 3;
    for LW_PRGNLCL_FALCON_IMCTL_CMD_Field use (CMD_NOP => 16#0#, CMD_IMINV => 16#1#, CMD_IMBLK => 16#2#, CMD_IMTAG => 16#3#, CMD_IMTAG_SETVLD => 16#4#);

    type LW_PRGNLCL_FALCON_IMCTL_Register is record
        Addr_Blk : NvU24;
        Cmd      : LW_PRGNLCL_FALCON_IMCTL_CMD_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_IMCTL_Register use record
        Addr_Blk at 0 range  0 .. 23;
        Cmd      at 0 range 24 .. 26;
    end record;

    LW_PRGNLCL_FALCON_IMCTL_DEBUG_CMD_NOP   : constant NvU3 := 16#0#;
    LW_PRGNLCL_FALCON_IMCTL_DEBUG_CMD_IMBLK : constant NvU3 := 16#2#;
    LW_PRGNLCL_FALCON_IMCTL_DEBUG_CMD_IMTAG : constant NvU3 := 16#3#;

    type LW_PRGNLCL_FALCON_IMCTL_DEBUG_Register is record
        Addr_Blk : NvU24;
        Cmd      : NvU3;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_IMCTL_DEBUG_Register use record
        Addr_Blk at 0 range  0 .. 23;
        Cmd      at 0 range 24 .. 26;
    end record;

    type LW_PRGNLCL_FALCON_IMSTAT_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_IMSTAT_Register use record
        Val at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_FALCON_IMFILLRNG0_TAG_LO_INIT : constant NvU16 := 16#0#;
    LW_PRGNLCL_FALCON_IMFILLRNG0_TAG_HI_INIT : constant NvU16 := 16#0#;

    type LW_PRGNLCL_FALCON_IMFILLRNG0_Register is record
        Tag_Lo : NvU16;
        Tag_Hi : NvU16;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_IMFILLRNG0_Register use record
        Tag_Lo at 0 range  0 .. 15;
        Tag_Hi at 0 range 16 .. 31;
    end record;

    LW_PRGNLCL_FALCON_IMFILLRNG1_TAG_LO_INIT : constant NvU16 := 16#0#;
    LW_PRGNLCL_FALCON_IMFILLRNG1_TAG_HI_INIT : constant NvU16 := 16#0#;

    type LW_PRGNLCL_FALCON_IMFILLRNG1_Register is record
        Tag_Lo : NvU16;
        Tag_Hi : NvU16;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_IMFILLRNG1_Register use record
        Tag_Lo at 0 range  0 .. 15;
        Tag_Hi at 0 range 16 .. 31;
    end record;

    LW_PRGNLCL_FALCON_IMFILLCTL_NBLOCKS_INIT : constant NvU9 := 16#0#;

    type LW_PRGNLCL_FALCON_IMFILLCTL_Register is record
        Nblocks : NvU9;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_IMFILLCTL_Register use record
        Nblocks at 0 range 0 .. 8;
    end record;

    type LW_PRGNLCL_FALCON_DMCTL_CMD_Field is (CMD_NOP, CMD_DMINV, CMD_DMBLK, CMD_DMTAG, CMD_DMTAG_SETVLD, CMD_DMCLEAN, CMD_DMLVL) with
        Size => 3;
    for LW_PRGNLCL_FALCON_DMCTL_CMD_Field use
        (CMD_NOP => 16#0#, CMD_DMINV => 16#1#, CMD_DMBLK => 16#2#, CMD_DMTAG => 16#3#, CMD_DMTAG_SETVLD => 16#4#, CMD_DMCLEAN => 16#5#, CMD_DMLVL => 16#6#);

    type LW_PRGNLCL_FALCON_DMCTL_Register is record
        Addr_Blk : NvU24;
        Cmd      : LW_PRGNLCL_FALCON_DMCTL_CMD_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DMCTL_Register use record
        Addr_Blk at 0 range  0 .. 23;
        Cmd      at 0 range 24 .. 26;
    end record;

    type LW_PRGNLCL_FALCON_DMSTAT_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DMSTAT_Register use record
        Val at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_FALCON_DMVACTL_BOUND_INIT : constant NvU32 := 16#100#;

    type LW_PRGNLCL_FALCON_DMVACTL_Register is record
        Bound : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DMVACTL_Register use record
        Bound at 0 range 0 .. 31;
    end record;

    type LW_PRGNLCL_FALCON_DMCYA_LDSTVA_DIS_Field is (DIS_FALSE, DIS_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_DMCYA_LDSTVA_DIS_Field use (DIS_FALSE => 16#0#, DIS_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_DMCYA_ROB_DIS_Field is (DIS_FALSE, DIS_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_DMCYA_ROB_DIS_Field use (DIS_FALSE => 16#0#, DIS_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_DMCYA_ROBWB_DIS_Field is (DIS_FALSE, DIS_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_DMCYA_ROBWB_DIS_Field use (DIS_FALSE => 16#0#, DIS_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_DMCYA_ROBSPR_DIS_Field is (DIS_FALSE, DIS_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_DMCYA_ROBSPR_DIS_Field use (DIS_FALSE => 16#0#, DIS_TRUE => 16#1#);

    type LW_PRGNLCL_FALCON_DMCYA_Register is record
        Ldstva_Dis : LW_PRGNLCL_FALCON_DMCYA_LDSTVA_DIS_Field;
        Rob_Dis    : LW_PRGNLCL_FALCON_DMCYA_ROB_DIS_Field;
        Robwb_Dis  : LW_PRGNLCL_FALCON_DMCYA_ROBWB_DIS_Field;
        Robspr_Dis : LW_PRGNLCL_FALCON_DMCYA_ROBSPR_DIS_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DMCYA_Register use record
        Ldstva_Dis at 0 range 0 .. 0;
        Rob_Dis    at 0 range 1 .. 1;
        Robwb_Dis  at 0 range 2 .. 2;
        Robspr_Dis at 0 range 3 .. 3;
    end record;

    LW_PRGNLCL_FALCON_CMEMBASE_VAL_INIT : constant NvU14 := 16#0#;

    type LW_PRGNLCL_FALCON_CMEMBASE_Register is record
        Val : NvU14;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_CMEMBASE_Register use record
        Val at 0 range 18 .. 31;
    end record;

    LW_PRGNLCL_FALCON_DMEMAPERT_TIME_OUT_INIT  : constant NvU8 := 16#0#;
    LW_PRGNLCL_FALCON_DMEMAPERT_TIME_UNIT_INIT : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_DMEMAPERT_ENABLE_INIT    : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_DMEMAPERT_ENABLE_TRUE    : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_DMEMAPERT_ENABLE_FALSE   : constant NvU1 := 16#0#;

    type LW_PRGNLCL_FALCON_DMEMAPERT_Register is record
        Time_Out  : NvU8;
        Time_Unit : NvU4;
        Enable    : NvU1;
        Ldstq_Num : NvU3;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DMEMAPERT_Register use record
        Time_Out  at 0 range  0 ..  7;
        Time_Unit at 0 range  8 .. 11;
        Enable    at 0 range 16 .. 16;
        Ldstq_Num at 0 range 17 .. 19;
    end record;

    LW_PRGNLCL_FALCON_EXTERRSTAT_STAT_ACK_POS  : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_EXTERRSTAT_STAT_ACK_TOUT : constant NvU4 := 16#1#;
    LW_PRGNLCL_FALCON_EXTERRSTAT_VALID_INIT    : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_EXTERRSTAT_VALID_FALSE   : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_EXTERRSTAT_VALID_TRUE    : constant NvU1 := 16#1#;

    type LW_PRGNLCL_FALCON_EXTERRSTAT_Register is record
        Pc    : NvU24;
        Stat  : NvU4;
        Valid : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_EXTERRSTAT_Register use record
        Pc    at 0 range  0 .. 23;
        Stat  at 0 range 24 .. 27;
        Valid at 0 range 31 .. 31;
    end record;

    type LW_PRGNLCL_FALCON_EXTERRADDR_Register is record
        Addr : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_EXTERRADDR_Register use record
        Addr at 0 range 0 .. 31;
    end record;

    type LW_PRGNLCL_FALCON_EXTERR_INFO_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_EXTERR_INFO_Register use record
        Val at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_FALCON_CSBERRSTAT_ENABLE_INIT  : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_CSBERRSTAT_ENABLE_TRUE  : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_CSBERRSTAT_ENABLE_FALSE : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_CSBERRSTAT_VALID_INIT   : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_CSBERRSTAT_VALID_TRUE   : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_CSBERRSTAT_VALID_FALSE  : constant NvU1 := 16#0#;

    type LW_PRGNLCL_FALCON_CSBERRSTAT_Register is record
        Pc     : NvU24;
        Enable : NvU1;
        Valid  : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_CSBERRSTAT_Register use record
        Pc     at 0 range  0 .. 23;
        Enable at 0 range 30 .. 30;
        Valid  at 0 range 31 .. 31;
    end record;

    type LW_PRGNLCL_FALCON_CSBERR_ADDR_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_CSBERR_ADDR_Register use record
        Val at 0 range 0 .. 31;
    end record;

    type LW_PRGNLCL_FALCON_CSBERR_INFO_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_CSBERR_INFO_Register use record
        Val at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_FALCON_BR_PARAMS_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_BR_PARAMS_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLED       : constant NvU4 := 16#4#;
    LW_PRGNLCL_FALCON_BR_PARAMS_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_BR_PARAMS_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_BR_PARAMS_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_BR_PARAMS_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLED      : constant NvU4 := 16#4#;
    LW_PRGNLCL_FALCON_BR_PARAMS_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_BR_PARAMS_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    type LW_PRGNLCL_FALCON_BR_PARAMS_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_BR_PARAMS_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_BR_PARAMS_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_BR_PARAMS_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_BR_PARAMS_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_BR_PARAMS_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_FALCON_BR_PARAMS_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_BR_PARAMS_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_FALCON_BR_PARAMS_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FALCON_BR_PARAMS_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_BR_PARAMS_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_BR_PARAMS_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_BR_PARAMS_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_BR_PARAMS_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_BR_PARAMS_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_BR_PARAMS_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_BR_PARAMS_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_BR_PARAMS_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_BR_PARAMS_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_BR_PARAMS_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_BR_PARAMS_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_BR_PARAMS_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_BR_PARAMS_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_BR_PARAMS_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_BR_PARAMS_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_FALCON_BR_PARAMS_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_FALCON_BR_PARAMS_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_FALCON_BR_PARAMS_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_FALCON_BR_PARAMS_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_FALCON_BR_PARAMS_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_BR_PARAMS_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLED       : constant NvU4 := 16#4#;
    LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLED      : constant NvU4 := 16#4#;
    LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    type LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_FALCON_KMEM_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_KMEM_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLED       : constant NvU4 := 16#4#;
    LW_PRGNLCL_FALCON_KMEM_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_KMEM_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_KMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_KMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLED      : constant NvU4 := 16#4#;
    LW_PRGNLCL_FALCON_KMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_KMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    type LW_PRGNLCL_FALCON_KMEM_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_KMEM_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_KMEM_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_KMEM_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_KMEM_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_KMEM_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_FALCON_KMEM_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_KMEM_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_FALCON_KMEM_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FALCON_KMEM_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_KMEM_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_KMEM_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_KMEM_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_KMEM_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_KMEM_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_KMEM_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_KMEM_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_KMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_KMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_KMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_KMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_KMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_KMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_KMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_KMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_FALCON_KMEM_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_FALCON_KMEM_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_FALCON_KMEM_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_FALCON_KMEM_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_FALCON_KMEM_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_KMEM_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_FALCON_SHA_RAL_PRIV_LEVEL_MASK_READ_PROTECTION_RESET_FUSE0          : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_SHA_RAL_PRIV_LEVEL_MASK_READ_PROTECTION_RESET_FUSE1          : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_SHA_RAL_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_SHA_RAL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLED       : constant NvU4 := 16#4#;
    LW_PRGNLCL_FALCON_SHA_RAL_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_SHA_RAL_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_SHA_RAL_PRIV_LEVEL_MASK_WRITE_PROTECTION_RESET_FUSE0         : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_SHA_RAL_PRIV_LEVEL_MASK_WRITE_PROTECTION_RESET_FUSE1         : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_SHA_RAL_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_SHA_RAL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLED      : constant NvU4 := 16#4#;
    LW_PRGNLCL_FALCON_SHA_RAL_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_SHA_RAL_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    type LW_PRGNLCL_FALCON_SHA_RAL_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SHA_RAL_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_SHA_RAL_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SHA_RAL_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_SHA_RAL_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SHA_RAL_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_FALCON_SHA_RAL_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SHA_RAL_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_FALCON_SHA_RAL_PRIV_LEVEL_MASK_SOURCE_ENABLE_RESET_FUSE0         : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FALCON_SHA_RAL_PRIV_LEVEL_MASK_SOURCE_ENABLE_RESET_FUSE1         : constant NvU20 := 16#8_0000#;
    LW_PRGNLCL_FALCON_SHA_RAL_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FALCON_SHA_RAL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_SHA_RAL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_SHA_RAL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_SHA_RAL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_SHA_RAL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_SHA_RAL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_SHA_RAL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_SHA_RAL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_SHA_RAL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_SHA_RAL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_SHA_RAL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_SHA_RAL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_SHA_RAL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_SHA_RAL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_SHA_RAL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_SHA_RAL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_FALCON_SHA_RAL_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_FALCON_SHA_RAL_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_FALCON_SHA_RAL_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_FALCON_SHA_RAL_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_FALCON_SHA_RAL_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_SHA_RAL_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_FALCON_SHA_CONFIG_ENC_MODE_SHA1       : constant NvU8 := 16#0#;
    LW_PRGNLCL_FALCON_SHA_CONFIG_ENC_MODE_SHA224     : constant NvU8 := 16#4#;
    LW_PRGNLCL_FALCON_SHA_CONFIG_ENC_MODE_SHA256     : constant NvU8 := 16#5#;
    LW_PRGNLCL_FALCON_SHA_CONFIG_ENC_MODE_SHA384     : constant NvU8 := 16#6#;
    LW_PRGNLCL_FALCON_SHA_CONFIG_ENC_MODE_SHA512     : constant NvU8 := 16#7#;
    LW_PRGNLCL_FALCON_SHA_CONFIG_ENC_MODE_SHA512_224 : constant NvU8 := 16#7#;
    LW_PRGNLCL_FALCON_SHA_CONFIG_ENC_MODE_SHA512_256 : constant NvU8 := 16#7#;
    LW_PRGNLCL_FALCON_SHA_CONFIG_ENC_ALG_SHA         : constant NvU4 := 16#3#;
    LW_PRGNLCL_FALCON_SHA_CONFIG_ENC_ALG_INIT        : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_SHA_CONFIG_DST_HASH_REG        : constant NvU3 := 16#1#;
    LW_PRGNLCL_FALCON_SHA_CONFIG_DST_INIT            : constant NvU3 := 16#0#;

    type LW_PRGNLCL_FALCON_SHA_CONFIG_Register is record
        Enc_Mode : NvU8;
        Enc_Alg  : NvU4;
        Dst      : NvU3;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_SHA_CONFIG_Register use record
        Enc_Mode at 0 range 24 .. 31;
        Enc_Alg  at 0 range 12 .. 15;
        Dst      at 0 range  2 ..  4;
    end record;

    type LW_PRGNLCL_FALCON_SHA_TASK_CONFIG_HW_INIT_HASH_Field is (HASH_DISABLE, HASH_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SHA_TASK_CONFIG_HW_INIT_HASH_Field use (HASH_DISABLE => 16#0#, HASH_ENABLE => 16#1#);

    type LW_PRGNLCL_FALCON_SHA_TASK_CONFIG_Register is record
        Hw_Init_Hash : LW_PRGNLCL_FALCON_SHA_TASK_CONFIG_HW_INIT_HASH_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_SHA_TASK_CONFIG_Register use record
        Hw_Init_Hash at 0 range 0 .. 0;
    end record;

    type LW_PRGNLCL_FALCON_SHA_IN_ADDR_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_SHA_IN_ADDR_Register use record
        Val at 0 range 0 .. 31;
    end record;

    type LW_PRGNLCL_FALCON_SHA_IN_ADDR_HI_Register is record
        Msb : NvU8;
        Sz  : NvU24;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_SHA_IN_ADDR_HI_Register use record
        Msb at 0 range 24 .. 31;
        Sz  at 0 range  0 .. 23;
    end record;

    type LW_PRGNLCL_FALCON_SHA_MSG_LENGTH_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_SHA_MSG_LENGTH_Register use record
        Val at 0 range 0 .. 31;
    end record;

    type LW_PRGNLCL_FALCON_SHA_MSG_LEFT_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_SHA_MSG_LEFT_Register use record
        Val at 0 range 0 .. 31;
    end record;

    type LW_PRGNLCL_FALCON_SHA_HASH_RESULT_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_SHA_HASH_RESULT_Register use record
        Val at 0 range 0 .. 31;
    end record;

    type LW_PRGNLCL_FALCON_SHA_OPERATION_LAST_BUF_Field is (BUF_FALSE, BUF_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SHA_OPERATION_LAST_BUF_Field use (BUF_FALSE => 16#0#, BUF_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_SHA_OPERATION_SOFTRESET_Field is (SOFTRESET_DISABLE, SOFTRESET_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SHA_OPERATION_SOFTRESET_Field use (SOFTRESET_DISABLE => 16#0#, SOFTRESET_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_SHA_OPERATION_HALT_Field is (HALT_DISABLE, HALT_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SHA_OPERATION_HALT_Field use (HALT_DISABLE => 16#0#, HALT_ENABLE => 16#1#);
    LW_PRGNLCL_FALCON_SHA_OPERATION_OP_NOP   : constant NvU3 := 16#0#;
    LW_PRGNLCL_FALCON_SHA_OPERATION_OP_START : constant NvU3 := 16#1#;
    LW_PRGNLCL_FALCON_SHA_OPERATION_OP_INIT  : constant NvU3 := 16#0#;

    type LW_PRGNLCL_FALCON_SHA_OPERATION_Register is record
        Last_Buf  : LW_PRGNLCL_FALCON_SHA_OPERATION_LAST_BUF_Field;
        Softreset : LW_PRGNLCL_FALCON_SHA_OPERATION_SOFTRESET_Field;
        Halt      : LW_PRGNLCL_FALCON_SHA_OPERATION_HALT_Field;
        Op        : NvU3;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_SHA_OPERATION_Register use record
        Last_Buf  at 0 range 16 .. 16;
        Softreset at 0 range  6 ..  6;
        Halt      at 0 range  5 ..  5;
        Op        at 0 range  0 ..  2;
    end record;

    LW_PRGNLCL_FALCON_SHA_STATUS_STATE_INIT   : constant NvU3 := 16#0#;
    LW_PRGNLCL_FALCON_SHA_STATUS_STATE_IDLE   : constant NvU3 := 16#0#;
    LW_PRGNLCL_FALCON_SHA_STATUS_STATE_BUSY   : constant NvU3 := 16#1#;
    LW_PRGNLCL_FALCON_SHA_STATUS_STATE_HALTED : constant NvU3 := 16#7#;

    type LW_PRGNLCL_FALCON_SHA_STATUS_Register is record
        State : NvU3;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_SHA_STATUS_Register use record
        State at 0 range 0 .. 2;
    end record;

    type LW_PRGNLCL_FALCON_SHA_IN_REQ_CUR_BYTE_ADDR_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_SHA_IN_REQ_CUR_BYTE_ADDR_Register use record
        Val at 0 range 0 .. 31;
    end record;

    type LW_PRGNLCL_FALCON_SHA_IN_REQ_CUR_BYTE_ADDR_HI_Register is record
        Msb : NvU8;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_SHA_IN_REQ_CUR_BYTE_ADDR_HI_Register use record
        Msb at 0 range 24 .. 31;
    end record;

    LW_PRGNLCL_FALCON_SHA_PRIV_LOCKDOWN_WR_LOCK_INIT  : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_SHA_PRIV_LOCKDOWN_WR_LOCK_SET   : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_SHA_PRIV_LOCKDOWN_WR_LOCK_UNSET : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_SHA_PRIV_LOCKDOWN_RD_LOCK_INIT  : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_SHA_PRIV_LOCKDOWN_RD_LOCK_SET   : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_SHA_PRIV_LOCKDOWN_RD_LOCK_UNSET : constant NvU1 := 16#0#;

    type LW_PRGNLCL_FALCON_SHA_PRIV_LOCKDOWN_Register is record
        Wr_Lock : NvU1;
        Rd_Lock : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_SHA_PRIV_LOCKDOWN_Register use record
        Wr_Lock at 0 range 0 .. 0;
        Rd_Lock at 0 range 1 .. 1;
    end record;

    type LW_PRGNLCL_FALCON_SHA_IN_RESP_CUR_BYTE_ADDR_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_SHA_IN_RESP_CUR_BYTE_ADDR_Register use record
        Val at 0 range 0 .. 31;
    end record;

    type LW_PRGNLCL_FALCON_SHA_IN_RESP_CUR_BYTE_ADDR_HI_Register is record
        Msb : NvU8;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_SHA_IN_RESP_CUR_BYTE_ADDR_HI_Register use record
        Msb at 0 range 24 .. 31;
    end record;

    type LW_PRGNLCL_FALCON_SHA_ERR_STATUS_LEVEL_ERR_Field is (ERR_FALSE, ERR_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SHA_ERR_STATUS_LEVEL_ERR_Field use (ERR_FALSE => 16#0#, ERR_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_SHA_ERR_STATUS_MULTI_HIT_Field is (HIT_FALSE, HIT_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SHA_ERR_STATUS_MULTI_HIT_Field use (HIT_FALSE => 16#0#, HIT_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_SHA_ERR_STATUS_MISS_Field is (MISS_FALSE, MISS_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SHA_ERR_STATUS_MISS_Field use (MISS_FALSE => 16#0#, MISS_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_SHA_ERR_STATUS_PA_FAULT_Field is (FAULT_FALSE, FAULT_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SHA_ERR_STATUS_PA_FAULT_Field use (FAULT_FALSE => 16#0#, FAULT_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_SHA_ERR_STATUS_FBIF_ERR_Field is (ERR_FALSE, ERR_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SHA_ERR_STATUS_FBIF_ERR_Field use (ERR_FALSE => 16#0#, ERR_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_SHA_ERR_STATUS_ILLEGAL_CFG_Field is (CFG_FALSE, CFG_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SHA_ERR_STATUS_ILLEGAL_CFG_Field use (CFG_FALSE => 16#0#, CFG_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_SHA_ERR_STATUS_NS_ACCESS_Field is (ACCESS_FALSE, ACCESS_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SHA_ERR_STATUS_NS_ACCESS_Field use (ACCESS_FALSE => 16#0#, ACCESS_TRUE => 16#1#);
    LW_PRGNLCL_FALCON_SHA_ERR_STATUS_LEVEL_ERR_CLEAR   : constant := 16#1#;
    LW_PRGNLCL_FALCON_SHA_ERR_STATUS_MULTI_HIT_CLEAR   : constant := 16#1#;
    LW_PRGNLCL_FALCON_SHA_ERR_STATUS_MISS_CLEAR        : constant := 16#1#;
    LW_PRGNLCL_FALCON_SHA_ERR_STATUS_PA_FAULT_CLEAR    : constant := 16#1#;
    LW_PRGNLCL_FALCON_SHA_ERR_STATUS_FBIF_ERR_CLEAR    : constant := 16#1#;
    LW_PRGNLCL_FALCON_SHA_ERR_STATUS_ILLEGAL_CFG_CLEAR : constant := 16#1#;
    LW_PRGNLCL_FALCON_SHA_ERR_STATUS_NS_ACCESS_CLEAR   : constant := 16#1#;

    type LW_PRGNLCL_FALCON_SHA_ERR_STATUS_Register is record
        Level_Err   : LW_PRGNLCL_FALCON_SHA_ERR_STATUS_LEVEL_ERR_Field;
        Multi_Hit   : LW_PRGNLCL_FALCON_SHA_ERR_STATUS_MULTI_HIT_Field;
        Miss        : LW_PRGNLCL_FALCON_SHA_ERR_STATUS_MISS_Field;
        Pa_Fault    : LW_PRGNLCL_FALCON_SHA_ERR_STATUS_PA_FAULT_Field;
        Fbif_Err    : LW_PRGNLCL_FALCON_SHA_ERR_STATUS_FBIF_ERR_Field;
        Illegal_Cfg : LW_PRGNLCL_FALCON_SHA_ERR_STATUS_ILLEGAL_CFG_Field;
        Ns_Access   : LW_PRGNLCL_FALCON_SHA_ERR_STATUS_NS_ACCESS_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_SHA_ERR_STATUS_Register use record
        Level_Err   at 0 range 12 .. 12;
        Multi_Hit   at 0 range 11 .. 11;
        Miss        at 0 range 10 .. 10;
        Pa_Fault    at 0 range  9 ..  9;
        Fbif_Err    at 0 range  8 ..  8;
        Illegal_Cfg at 0 range  4 ..  4;
        Ns_Access   at 0 range  0 ..  0;
    end record;

    type LW_PRGNLCL_FALCON_SHA_ERR_ADDR_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_SHA_ERR_ADDR_Register use record
        Val at 0 range 0 .. 31;
    end record;

    type LW_PRGNLCL_FALCON_SHA_ERR_ADDR_HI_Register is record
        Msb : NvU8;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_SHA_ERR_ADDR_HI_Register use record
        Msb at 0 range 24 .. 31;
    end record;

    type LW_PRGNLCL_FALCON_SHA_INT_STATUS_ERR_STATUS_Field is (STATUS_FALSE, STATUS_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SHA_INT_STATUS_ERR_STATUS_Field use (STATUS_FALSE => 16#0#, STATUS_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_SHA_INT_STATUS_OP_DONE_Field is (DONE_FALSE, DONE_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SHA_INT_STATUS_OP_DONE_Field use (DONE_FALSE => 16#0#, DONE_TRUE => 16#1#);
    LW_PRGNLCL_FALCON_SHA_INT_STATUS_ERR_STATUS_CLEAR : constant := 16#1#;
    LW_PRGNLCL_FALCON_SHA_INT_STATUS_OP_DONE_CLEAR    : constant := 16#1#;

    type LW_PRGNLCL_FALCON_SHA_INT_STATUS_Register is record
        Err_Status : LW_PRGNLCL_FALCON_SHA_INT_STATUS_ERR_STATUS_Field;
        Op_Done    : LW_PRGNLCL_FALCON_SHA_INT_STATUS_OP_DONE_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_SHA_INT_STATUS_Register use record
        Err_Status at 0 range 16 .. 16;
        Op_Done    at 0 range  4 ..  4;
    end record;

    type LW_PRGNLCL_FALCON_SHA_INT_ENABLE_ERR_STATUS_Field is (STATUS_DISABLE, STATUS_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SHA_INT_ENABLE_ERR_STATUS_Field use (STATUS_DISABLE => 16#0#, STATUS_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_SHA_INT_ENABLE_OP_DONE_Field is (DONE_DISABLE, DONE_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SHA_INT_ENABLE_OP_DONE_Field use (DONE_DISABLE => 16#0#, DONE_ENABLE => 16#1#);

    type LW_PRGNLCL_FALCON_SHA_INT_ENABLE_Register is record
        Err_Status : LW_PRGNLCL_FALCON_SHA_INT_ENABLE_ERR_STATUS_Field;
        Op_Done    : LW_PRGNLCL_FALCON_SHA_INT_ENABLE_OP_DONE_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_SHA_INT_ENABLE_Register use record
        Err_Status at 0 range 16 .. 16;
        Op_Done    at 0 range  4 ..  4;
    end record;

    type LW_PRGNLCL_FALCON_SHA_MUTEX_Register is record
        Val : NvU8;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_SHA_MUTEX_Register use record
        Val at 0 range 0 .. 7;
    end record;

    type LW_PRGNLCL_FALCON_SHA_MUTEX_RELEASE_Register is record
        Val : NvU8;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_SHA_MUTEX_RELEASE_Register use record
        Val at 0 range 0 .. 7;
    end record;

    LW_PRGNLCL_FALCON_SHA_MUTEX_STATUS_LOCKED_INIT : constant NvU8 := 16#0#;

    type LW_PRGNLCL_FALCON_SHA_MUTEX_STATUS_Register is record
        Locked : NvU8;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_SHA_MUTEX_STATUS_Register use record
        Locked at 0 range 0 .. 7;
    end record;

    type LW_PRGNLCL_FALCON_SHA_SRC_CONFIG_TCM_NO_TRANSLATION_Field is (TRANSLATION_FALSE, TRANSLATION_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SHA_SRC_CONFIG_TCM_NO_TRANSLATION_Field use (TRANSLATION_FALSE => 16#0#, TRANSLATION_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_SHA_SRC_CONFIG_SRC_Field is (SRC_DMEM, SRC_IMEM, SRC_FB) with
        Size => 2;
    for LW_PRGNLCL_FALCON_SHA_SRC_CONFIG_SRC_Field use (SRC_DMEM => 16#0#, SRC_IMEM => 16#1#, SRC_FB => 16#2#);

    type LW_PRGNLCL_FALCON_SHA_SRC_CONFIG_Register is record
        Fb_Base            : NvU17;
        Tcm_No_Translation : LW_PRGNLCL_FALCON_SHA_SRC_CONFIG_TCM_NO_TRANSLATION_Field;
        Ctxdma             : NvU3;
        Src                : LW_PRGNLCL_FALCON_SHA_SRC_CONFIG_SRC_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_SHA_SRC_CONFIG_Register use record
        Fb_Base            at 0 range 12 .. 28;
        Tcm_No_Translation at 0 range  7 ..  7;
        Ctxdma             at 0 range  4 ..  6;
        Src                at 0 range  0 ..  1;
    end record;

    LW_PRGNLCL_FALCON_SHA_REQ_CTRL_WINDOW_INIT : constant NvU16 := 16#1000#;
    LW_PRGNLCL_FALCON_SHA_REQ_CTRL_LIMIT_INIT  : constant NvU16 := 16#800#;

    type LW_PRGNLCL_FALCON_SHA_REQ_CTRL_Register is record
        Window : NvU16;
        Limit  : NvU16;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_SHA_REQ_CTRL_Register use record
        Window at 0 range 16 .. 31;
        Limit  at 0 range  0 .. 15;
    end record;

    type LW_PRGNLCL_FALCON_SHA_CTRL_FB_DIS_Field is (DIS_FALSE, DIS_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SHA_CTRL_FB_DIS_Field use (DIS_FALSE => 16#0#, DIS_TRUE => 16#1#);

    type LW_PRGNLCL_FALCON_SHA_CTRL_Register is record
        Fb_Dis : LW_PRGNLCL_FALCON_SHA_CTRL_FB_DIS_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_SHA_CTRL_Register use record
        Fb_Dis at 0 range 0 .. 0;
    end record;

    type LW_PRGNLCL_FALCON_SHA_CYA_BW_THROTTLE_DIS_Field is (DIS_FALSE, DIS_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SHA_CYA_BW_THROTTLE_DIS_Field use (DIS_FALSE => 16#0#, DIS_TRUE => 16#1#);

    type LW_PRGNLCL_FALCON_SHA_CYA_Register is record
        Bw_Throttle_Dis : LW_PRGNLCL_FALCON_SHA_CYA_BW_THROTTLE_DIS_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_SHA_CYA_Register use record
        Bw_Throttle_Dis at 0 range 0 .. 0;
    end record;

    type LW_PRGNLCL_FALCON_SHA_DBG_INFO_PW_HALTED_Field is (HALTED_FALSE, HALTED_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SHA_DBG_INFO_PW_HALTED_Field use (HALTED_FALSE => 16#0#, HALTED_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_SHA_DBG_INFO_IDMA_HALTED_Field is (HALTED_FALSE, HALTED_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SHA_DBG_INFO_IDMA_HALTED_Field use (HALTED_FALSE => 16#0#, HALTED_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_SHA_DBG_INFO_ALU_HALTED_Field is (HALTED_FALSE, HALTED_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SHA_DBG_INFO_ALU_HALTED_Field use (HALTED_FALSE => 16#0#, HALTED_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_SHA_DBG_INFO_PW_IDLE_Field is (IDLE_FALSE, IDLE_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SHA_DBG_INFO_PW_IDLE_Field use (IDLE_FALSE => 16#0#, IDLE_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_SHA_DBG_INFO_IDMA_IDLE_Field is (IDLE_FALSE, IDLE_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SHA_DBG_INFO_IDMA_IDLE_Field use (IDLE_FALSE => 16#0#, IDLE_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_SHA_DBG_INFO_ALU_IDLE_Field is (IDLE_FALSE, IDLE_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SHA_DBG_INFO_ALU_IDLE_Field use (IDLE_FALSE => 16#0#, IDLE_TRUE => 16#1#);
    LW_PRGNLCL_FALCON_SHA_DBG_INFO_CORE_STATUS_IDLE  : constant NvU3 := 16#0#;
    LW_PRGNLCL_FALCON_SHA_DBG_INFO_CORE_STATUS_BUSY  : constant NvU3 := 16#1#;
    LW_PRGNLCL_FALCON_SHA_DBG_INFO_SECURE_LEVEL_INIT : constant NvU2 := 16#0#;

    type LW_PRGNLCL_FALCON_SHA_DBG_INFO_Register is record
        Pw_Halted    : LW_PRGNLCL_FALCON_SHA_DBG_INFO_PW_HALTED_Field;
        Idma_Halted  : LW_PRGNLCL_FALCON_SHA_DBG_INFO_IDMA_HALTED_Field;
        Alu_Halted   : LW_PRGNLCL_FALCON_SHA_DBG_INFO_ALU_HALTED_Field;
        Pw_Idle      : LW_PRGNLCL_FALCON_SHA_DBG_INFO_PW_IDLE_Field;
        Idma_Idle    : LW_PRGNLCL_FALCON_SHA_DBG_INFO_IDMA_IDLE_Field;
        Alu_Idle     : LW_PRGNLCL_FALCON_SHA_DBG_INFO_ALU_IDLE_Field;
        Core_Status  : NvU3;
        Secure_Level : NvU2;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_SHA_DBG_INFO_Register use record
        Pw_Halted    at 0 range 13 .. 13;
        Idma_Halted  at 0 range 12 .. 12;
        Alu_Halted   at 0 range 11 .. 11;
        Pw_Idle      at 0 range 10 .. 10;
        Idma_Idle    at 0 range  9 ..  9;
        Alu_Idle     at 0 range  8 ..  8;
        Core_Status  at 0 range  4 ..  6;
        Secure_Level at 0 range  0 ..  1;
    end record;

    type LW_PRGNLCL_FALCON_SHA_DBG_REG_0_Register is record
        Sha_Sha_Preproc_State : NvU2;
        Sha_Wd_Number         : NvU4;
        Sha_Sha_Hash_State    : NvU3;
        Sha_Byte_Counter      : NvU3;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_SHA_DBG_REG_0_Register use record
        Sha_Sha_Preproc_State at 0 range 10 .. 11;
        Sha_Wd_Number         at 0 range  6 ..  9;
        Sha_Sha_Hash_State    at 0 range  3 ..  5;
        Sha_Byte_Counter      at 0 range  0 ..  2;
    end record;

    type LW_PRGNLCL_FALCON_SHA_DBG_REG_1_SHA_IDMA_REQ_RUN_Field is (RUN_FALSE, RUN_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SHA_DBG_REG_1_SHA_IDMA_REQ_RUN_Field use (RUN_FALSE => 16#0#, RUN_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_SHA_DBG_REG_1_SHA_IDMA_RESP_RUN_Field is (RUN_FALSE, RUN_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SHA_DBG_REG_1_SHA_IDMA_RESP_RUN_Field use (RUN_FALSE => 16#0#, RUN_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_SHA_DBG_REG_1_SHA_IDMA_NO_INFLIGHTS_Field is (INFLIGHTS_FALSE, INFLIGHTS_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SHA_DBG_REG_1_SHA_IDMA_NO_INFLIGHTS_Field use (INFLIGHTS_FALSE => 16#0#, INFLIGHTS_TRUE => 16#1#);

    type LW_PRGNLCL_FALCON_SHA_DBG_REG_1_Register is record
        Sha_Idma_Req_Run      : LW_PRGNLCL_FALCON_SHA_DBG_REG_1_SHA_IDMA_REQ_RUN_Field;
        Sha_Idma_Resp_Run     : LW_PRGNLCL_FALCON_SHA_DBG_REG_1_SHA_IDMA_RESP_RUN_Field;
        Sha_Idma_No_Inflights : LW_PRGNLCL_FALCON_SHA_DBG_REG_1_SHA_IDMA_NO_INFLIGHTS_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_SHA_DBG_REG_1_Register use record
        Sha_Idma_Req_Run      at 0 range 18 .. 18;
        Sha_Idma_Resp_Run     at 0 range 17 .. 17;
        Sha_Idma_No_Inflights at 0 range 14 .. 14;
    end record;

    type LW_PRGNLCL_FALCON_SHA_DBG_REG_2_Register is record
        Sha_Idma_Resp_Dma_Size : NvU24;
        Sha_Idma_Resp_Dma_Addr : NvU8;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_SHA_DBG_REG_2_Register use record
        Sha_Idma_Resp_Dma_Size at 0 range  0 .. 23;
        Sha_Idma_Resp_Dma_Addr at 0 range 24 .. 31;
    end record;

    type LW_PRGNLCL_FALCON_SHA_DBG_REG_3_Register is record
        Sha_Idma_Resp_Dma_Addr : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_SHA_DBG_REG_3_Register use record
        Sha_Idma_Resp_Dma_Addr at 0 range 0 .. 31;
    end record;

    type LW_PRGNLCL_FALCON_SHA_DBG_REG_4_Register is record
        Sha_Idma_Resp_Dma_Addr           : NvU9;
        Sha_Idma_Corrected_Resp_Dma_Size : NvU21;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_SHA_DBG_REG_4_Register use record
        Sha_Idma_Resp_Dma_Addr           at 0 range  0 ..  8;
        Sha_Idma_Corrected_Resp_Dma_Size at 0 range 11 .. 31;
    end record;

    type LW_PRGNLCL_FALCON_SHA_DBG_REG_5_Register is record
        Sha_Idma_Corrected_Resp_Dma_Addr : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_SHA_DBG_REG_5_Register use record
        Sha_Idma_Corrected_Resp_Dma_Addr at 0 range 0 .. 31;
    end record;

    type LW_PRGNLCL_FALCON_SHA_DBG_REG_6_SHA_WILL_NOT_FINISH_Field is (FINISH_FALSE, FINISH_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SHA_DBG_REG_6_SHA_WILL_NOT_FINISH_Field use (FINISH_FALSE => 16#0#, FINISH_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_SHA_DBG_REG_6_SHA_SHA_HASH_IDLE_Field is (IDLE_FALSE, IDLE_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SHA_DBG_REG_6_SHA_SHA_HASH_IDLE_Field use (IDLE_FALSE => 16#0#, IDLE_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_SHA_DBG_REG_6_SHA_SHA_PREPROC_IDLE_Field is (IDLE_FALSE, IDLE_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SHA_DBG_REG_6_SHA_SHA_PREPROC_IDLE_Field use (IDLE_FALSE => 16#0#, IDLE_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_SHA_DBG_REG_6_SHA_IDMA_NO_PACKING_DATA_Field is (DATA_FALSE, DATA_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SHA_DBG_REG_6_SHA_IDMA_NO_PACKING_DATA_Field use (DATA_FALSE => 16#0#, DATA_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_SHA_DBG_REG_6_SHA_LASTBUF_Field is (LASTBUF_FALSE, LASTBUF_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SHA_DBG_REG_6_SHA_LASTBUF_Field use (LASTBUF_FALSE => 16#0#, LASTBUF_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_SHA_DBG_REG_6_SHA_MSG_LEFT_NON0_Field is (NON0_FALSE, NON0_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SHA_DBG_REG_6_SHA_MSG_LEFT_NON0_Field use (NON0_FALSE => 16#0#, NON0_TRUE => 16#1#);

    type LW_PRGNLCL_FALCON_SHA_DBG_REG_6_Register is record
        Sha_Idma_Corrected_Resp_Dma_Addr : NvU13;
        Sha_Idma_Free_Count              : NvU6;
        Sha_Will_Not_Finish              : LW_PRGNLCL_FALCON_SHA_DBG_REG_6_SHA_WILL_NOT_FINISH_Field;
        Sha_Sha_Hash_Idle                : LW_PRGNLCL_FALCON_SHA_DBG_REG_6_SHA_SHA_HASH_IDLE_Field;
        Sha_Sha_Preproc_Idle             : LW_PRGNLCL_FALCON_SHA_DBG_REG_6_SHA_SHA_PREPROC_IDLE_Field;
        Sha_Idma_No_Packing_Data         : LW_PRGNLCL_FALCON_SHA_DBG_REG_6_SHA_IDMA_NO_PACKING_DATA_Field;
        Sha_Lastbuf                      : LW_PRGNLCL_FALCON_SHA_DBG_REG_6_SHA_LASTBUF_Field;
        Sha_Msg_Left_Non0                : LW_PRGNLCL_FALCON_SHA_DBG_REG_6_SHA_MSG_LEFT_NON0_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_SHA_DBG_REG_6_Register use record
        Sha_Idma_Corrected_Resp_Dma_Addr at 0 range  0 .. 12;
        Sha_Idma_Free_Count              at 0 range 16 .. 21;
        Sha_Will_Not_Finish              at 0 range 24 .. 24;
        Sha_Sha_Hash_Idle                at 0 range 25 .. 25;
        Sha_Sha_Preproc_Idle             at 0 range 26 .. 26;
        Sha_Idma_No_Packing_Data         at 0 range 27 .. 27;
        Sha_Lastbuf                      at 0 range 28 .. 28;
        Sha_Msg_Left_Non0                at 0 range 29 .. 29;
    end record;

    type LW_PRGNLCL_FALCON_SHA_DBG_REG_7_Register is record
        Sha_Sha_Agent_Treq_Pvld                : NvU1;
        Sha_Sha_Agent_Treq_Read                : NvU1;
        Sha_Idma_Req_Tbuf_Prdy                 : NvU1;
        Sha_Idma_Req_Tbuf_Pvld                 : NvU1;
        Sha_Idma_Resp_Tbuf_Prdy                : NvU1;
        Sha_Idma_Resp_Tbuf_Pvld                : NvU1;
        Sha_Blk_Wd_Valid                       : NvU1;
        Sha_Blk_Wd_Stall                       : NvU1;
        Sha_Idma2eng_Pvld                      : NvU1;
        Sha_Idma2eng_Stall                     : NvU1;
        Sha_Nv_Se_Sha2data2fbif_Sreq_Pvld      : NvU1;
        Sha_Nv_Se_Sha2data2fbif_Sreq_Prdy      : NvU1;
        Sha_Nv_Se_Sha2data_Fbif2pdma_Rdat_Pvld : NvU1;
        Sha_Nv_Se_Sha2data_Fbif2pdma_Rdat_Prdy : NvU1;
        Sha_Pe2afbif_Rd_Req                    : NvU1;
        Sha_Pe2afbif_Rd_Busy                   : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_SHA_DBG_REG_7_Register use record
        Sha_Sha_Agent_Treq_Pvld                at 0 range 25 .. 25;
        Sha_Sha_Agent_Treq_Read                at 0 range 24 .. 24;
        Sha_Idma_Req_Tbuf_Prdy                 at 0 range 23 .. 23;
        Sha_Idma_Req_Tbuf_Pvld                 at 0 range 22 .. 22;
        Sha_Idma_Resp_Tbuf_Prdy                at 0 range 21 .. 21;
        Sha_Idma_Resp_Tbuf_Pvld                at 0 range 20 .. 20;
        Sha_Blk_Wd_Valid                       at 0 range 15 .. 15;
        Sha_Blk_Wd_Stall                       at 0 range 14 .. 14;
        Sha_Idma2eng_Pvld                      at 0 range  9 ..  9;
        Sha_Idma2eng_Stall                     at 0 range  8 ..  8;
        Sha_Nv_Se_Sha2data2fbif_Sreq_Pvld      at 0 range  7 ..  7;
        Sha_Nv_Se_Sha2data2fbif_Sreq_Prdy      at 0 range  6 ..  6;
        Sha_Nv_Se_Sha2data_Fbif2pdma_Rdat_Pvld at 0 range  5 ..  5;
        Sha_Nv_Se_Sha2data_Fbif2pdma_Rdat_Prdy at 0 range  4 ..  4;
        Sha_Pe2afbif_Rd_Req                    at 0 range  1 ..  1;
        Sha_Pe2afbif_Rd_Busy                   at 0 range  0 ..  0;
    end record;

    LW_PRGNLCL_FALCON_VER_MAJOR_DEFT  : constant NvU4  := 16#2#;
    LW_PRGNLCL_FALCON_VER_MINOR_DEFT  : constant NvU14 := 16#1#;
    LW_PRGNLCL_FALCON_VER_BUGFIX_DEFT : constant NvU14 := 16#0#;

    type LW_PRGNLCL_FALCON_VER_Register is record
        Major  : NvU4;
        Minor  : NvU14;
        Bugfix : NvU14;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_VER_Register use record
        Major  at 0 range  0 ..  3;
        Minor  at 0 range  4 .. 17;
        Bugfix at 0 range 18 .. 31;
    end record;

    LW_PRGNLCL_FALCON_MOD_SEL_ALGO_AES   : constant NvU8 := 16#0#;
    LW_PRGNLCL_FALCON_MOD_SEL_ALGO_RSA3K : constant NvU8 := 16#1#;

    type LW_PRGNLCL_FALCON_MOD_SEL_Register is record
        Algo : NvU8;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_MOD_SEL_Register use record
        Algo at 0 range 0 .. 7;
    end record;

    type LW_PRGNLCL_FALCON_MOD_EN_AES_Field is (AES_DISABLE, AES_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_MOD_EN_AES_Field use (AES_DISABLE => 16#0#, AES_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_MOD_EN_RSA3K_Field is (RSA3K_DISABLE, RSA3K_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_MOD_EN_RSA3K_Field use (RSA3K_DISABLE => 16#0#, RSA3K_ENABLE => 16#1#);

    type LW_PRGNLCL_FALCON_MOD_EN_Register is record
        Aes   : LW_PRGNLCL_FALCON_MOD_EN_AES_Field;
        Rsa3k : LW_PRGNLCL_FALCON_MOD_EN_RSA3K_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_MOD_EN_Register use record
        Aes   at 0 range 0 .. 0;
        Rsa3k at 0 range 1 .. 1;
    end record;

    type LW_PRGNLCL_FALCON_PKCBROM_VER_Register is record
        Dev   : NvU12;
        Eco   : NvU4;
        Minor : NvU8;
        Major : NvU8;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_PKCBROM_VER_Register use record
        Dev   at 0 range  0 .. 11;
        Eco   at 0 range 12 .. 15;
        Minor at 0 range 16 .. 23;
        Major at 0 range 24 .. 31;
    end record;

    LW_PRGNLCL_FALCON_VHRCFG_BASE_VAL_SEC     : constant NvU32 := 16#8200#;
    LW_PRGNLCL_FALCON_VHRCFG_BASE_VAL_PWR_PMU : constant NvU32 := 16#83f0#;
    LW_PRGNLCL_FALCON_VHRCFG_BASE_VAL_LWDEC   : constant NvU32 := 16#8490#;
    LW_PRGNLCL_FALCON_VHRCFG_BASE_VAL_GSP     : constant NvU32 := 16#87a0#;
    LW_PRGNLCL_FALCON_VHRCFG_BASE_VAL_SOE     : constant NvU32 := 16#8200#;
    LW_PRGNLCL_FALCON_VHRCFG_BASE_VAL_PSC     : constant NvU32 := 16#0#;
    LW_PRGNLCL_FALCON_VHRCFG_BASE_VAL_DEFT    : constant NvU32 := 16#0#;
    LW_PRGNLCL_FALCON_VHRCFG_BASE_VAL_LDPC    : constant NvU32 := 16#0#;
    LW_PRGNLCL_FALCON_VHRCFG_BASE_VAL_MINION  : constant NvU32 := 16#0#;
    LW_PRGNLCL_FALCON_VHRCFG_BASE_VAL_FSP     : constant NvU32 := 16#0#;

    type LW_PRGNLCL_FALCON_VHRCFG_BASE_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_VHRCFG_BASE_Register use record
        Val at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_FALCON_VHRCFG_ENTNUM_VAL_SEC     : constant NvU32 := 16#a#;
    LW_PRGNLCL_FALCON_VHRCFG_ENTNUM_VAL_PWR_PMU : constant NvU32 := 16#3#;
    LW_PRGNLCL_FALCON_VHRCFG_ENTNUM_VAL_LWDEC   : constant NvU32 := 16#10#;
    LW_PRGNLCL_FALCON_VHRCFG_ENTNUM_VAL_GSP     : constant NvU32 := 16#3#;
    LW_PRGNLCL_FALCON_VHRCFG_ENTNUM_VAL_SOE     : constant NvU32 := 16#a#;
    LW_PRGNLCL_FALCON_VHRCFG_ENTNUM_VAL_PSC     : constant NvU32 := 16#0#;
    LW_PRGNLCL_FALCON_VHRCFG_ENTNUM_VAL_DEFT    : constant NvU32 := 16#0#;
    LW_PRGNLCL_FALCON_VHRCFG_ENTNUM_VAL_LDPC    : constant NvU32 := 16#0#;
    LW_PRGNLCL_FALCON_VHRCFG_ENTNUM_VAL_MINION  : constant NvU32 := 16#0#;
    LW_PRGNLCL_FALCON_VHRCFG_ENTNUM_VAL_FSP     : constant NvU32 := 16#0#;

    type LW_PRGNLCL_FALCON_VHRCFG_ENTNUM_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_VHRCFG_ENTNUM_Register use record
        Val at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_FALCON_BMEMBASE_VAL_DEFT : constant NvU32 := 16#210_0000#;

    type LW_PRGNLCL_FALCON_BMEMBASE_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_BMEMBASE_Register use record
        Val at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_FALCON_BROM_CURR_UCODE_ID_VAL_DEFT : constant NvU8 := 16#0#;
    LW_PRGNLCL_FALCON_BROM_CURR_UCODE_ID_VAL_MAX  : constant NvU8 := 16#10#;

    type LW_PRGNLCL_FALCON_BROM_CURR_UCODE_ID_Register is record
        Val : NvU8;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_BROM_CURR_UCODE_ID_Register use record
        Val at 0 range 0 .. 7;
    end record;

    LW_PRGNLCL_FALCON_UCODE_VERSION_VER_DEF : constant NvU8 := 16#0#;

    type LW_PRGNLCL_FALCON_UCODE_VERSION_Register is record
        Ver : NvU8;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_UCODE_VERSION_Register use record
        Ver at 0 range 0 .. 7;
    end record;

    type LW_PRGNLCL_FALCON_BROM_ENGIDMASK_SEC_Field is (SEC_DISABLED, SEC_ENABLED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_BROM_ENGIDMASK_SEC_Field use (SEC_DISABLED => 16#0#, SEC_ENABLED => 16#1#);
    type LW_PRGNLCL_FALCON_BROM_ENGIDMASK_DPU_Field is (DPU_DISABLED, DPU_ENABLED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_BROM_ENGIDMASK_DPU_Field use (DPU_DISABLED => 16#0#, DPU_ENABLED => 16#1#);
    type LW_PRGNLCL_FALCON_BROM_ENGIDMASK_LWDEC_Field is (NVDEC_DISABLED, NVDEC_ENABLED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_BROM_ENGIDMASK_LWDEC_Field use (NVDEC_DISABLED => 16#0#, NVDEC_ENABLED => 16#1#);
    type LW_PRGNLCL_FALCON_BROM_ENGIDMASK_PMU_Field is (PMU_DISABLED, PMU_ENABLED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_BROM_ENGIDMASK_PMU_Field use (PMU_DISABLED => 16#0#, PMU_ENABLED => 16#1#);
    type LW_PRGNLCL_FALCON_BROM_ENGIDMASK_FBFALCON_Field is (FBFALCON_DISABLED, FBFALCON_ENABLED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_BROM_ENGIDMASK_FBFALCON_Field use (FBFALCON_DISABLED => 16#0#, FBFALCON_ENABLED => 16#1#);
    type LW_PRGNLCL_FALCON_BROM_ENGIDMASK_LWENC_Field is (NVENC_DISABLED, NVENC_ENABLED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_BROM_ENGIDMASK_LWENC_Field use (NVENC_DISABLED => 16#0#, NVENC_ENABLED => 16#1#);
    type LW_PRGNLCL_FALCON_BROM_ENGIDMASK_GPCCS_Field is (GPCCS_DISABLED, GPCCS_ENABLED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_BROM_ENGIDMASK_GPCCS_Field use (GPCCS_DISABLED => 16#0#, GPCCS_ENABLED => 16#1#);
    type LW_PRGNLCL_FALCON_BROM_ENGIDMASK_FECS_Field is (FECS_DISABLED, FECS_ENABLED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_BROM_ENGIDMASK_FECS_Field use (FECS_DISABLED => 16#0#, FECS_ENABLED => 16#1#);
    type LW_PRGNLCL_FALCON_BROM_ENGIDMASK_MINION_Field is (MINION_DISABLED, MINION_ENABLED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_BROM_ENGIDMASK_MINION_Field use (MINION_DISABLED => 16#0#, MINION_ENABLED => 16#1#);
    type LW_PRGNLCL_FALCON_BROM_ENGIDMASK_XUSB_Field is (XUSB_DISABLED, XUSB_ENABLED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_BROM_ENGIDMASK_XUSB_Field use (XUSB_DISABLED => 16#0#, XUSB_ENABLED => 16#1#);
    type LW_PRGNLCL_FALCON_BROM_ENGIDMASK_GSP_Field is (GSP_DISABLED, GSP_ENABLED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_BROM_ENGIDMASK_GSP_Field use (GSP_DISABLED => 16#0#, GSP_ENABLED => 16#1#);
    type LW_PRGNLCL_FALCON_BROM_ENGIDMASK_LWJPG_Field is (NVJPG_DISABLED, NVJPG_ENABLED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_BROM_ENGIDMASK_LWJPG_Field use (NVJPG_DISABLED => 16#0#, NVJPG_ENABLED => 16#1#);
    type LW_PRGNLCL_FALCON_BROM_ENGIDMASK_OFA_Field is (OFA_DISABLED, OFA_ENABLED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_BROM_ENGIDMASK_OFA_Field use (OFA_DISABLED => 16#0#, OFA_ENABLED => 16#1#);
    type LW_PRGNLCL_FALCON_BROM_ENGIDMASK_PSC_Field is (PSC_DISABLED, PSC_ENABLED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_BROM_ENGIDMASK_PSC_Field use (PSC_DISABLED => 16#0#, PSC_ENABLED => 16#1#);
    type LW_PRGNLCL_FALCON_BROM_ENGIDMASK_SOE_Field is (SOE_DISABLED, SOE_ENABLED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_BROM_ENGIDMASK_SOE_Field use (SOE_DISABLED => 16#0#, SOE_ENABLED => 16#1#);
    type LW_PRGNLCL_FALCON_BROM_ENGIDMASK_LDPC_Field is (LDPC_DISABLED, LDPC_ENABLED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_BROM_ENGIDMASK_LDPC_Field use (LDPC_DISABLED => 16#0#, LDPC_ENABLED => 16#1#);
    type LW_PRGNLCL_FALCON_BROM_ENGIDMASK_FSP_Field is (FSP_DISABLED, FSP_ENABLED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_BROM_ENGIDMASK_FSP_Field use (FSP_DISABLED => 16#0#, FSP_ENABLED => 16#1#);

    type LW_PRGNLCL_FALCON_BROM_ENGIDMASK_Register is record
        Sec      : LW_PRGNLCL_FALCON_BROM_ENGIDMASK_SEC_Field;
        Dpu      : LW_PRGNLCL_FALCON_BROM_ENGIDMASK_DPU_Field;
        Nvdec    : LW_PRGNLCL_FALCON_BROM_ENGIDMASK_LWDEC_Field;
        Pmu      : LW_PRGNLCL_FALCON_BROM_ENGIDMASK_PMU_Field;
        Fbfalcon : LW_PRGNLCL_FALCON_BROM_ENGIDMASK_FBFALCON_Field;
        Nvenc    : LW_PRGNLCL_FALCON_BROM_ENGIDMASK_LWENC_Field;
        Gpccs    : LW_PRGNLCL_FALCON_BROM_ENGIDMASK_GPCCS_Field;
        Fecs     : LW_PRGNLCL_FALCON_BROM_ENGIDMASK_FECS_Field;
        Minion   : LW_PRGNLCL_FALCON_BROM_ENGIDMASK_MINION_Field;
        Xusb     : LW_PRGNLCL_FALCON_BROM_ENGIDMASK_XUSB_Field;
        Gsp      : LW_PRGNLCL_FALCON_BROM_ENGIDMASK_GSP_Field;
        Nvjpg    : LW_PRGNLCL_FALCON_BROM_ENGIDMASK_LWJPG_Field;
        Ofa      : LW_PRGNLCL_FALCON_BROM_ENGIDMASK_OFA_Field;
        Psc      : LW_PRGNLCL_FALCON_BROM_ENGIDMASK_PSC_Field;
        Soe      : LW_PRGNLCL_FALCON_BROM_ENGIDMASK_SOE_Field;
        Ldpc     : LW_PRGNLCL_FALCON_BROM_ENGIDMASK_LDPC_Field;
        Fsp      : LW_PRGNLCL_FALCON_BROM_ENGIDMASK_FSP_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_BROM_ENGIDMASK_Register use record
        Sec      at 0 range  0 ..  0;
        Dpu      at 0 range  1 ..  1;
        Nvdec    at 0 range  2 ..  2;
        Pmu      at 0 range  3 ..  3;
        Fbfalcon at 0 range  4 ..  4;
        Nvenc    at 0 range  5 ..  5;
        Gpccs    at 0 range  6 ..  6;
        Fecs     at 0 range  7 ..  7;
        Minion   at 0 range  8 ..  8;
        Xusb     at 0 range  9 ..  9;
        Gsp      at 0 range 10 .. 10;
        Nvjpg    at 0 range 11 .. 11;
        Ofa      at 0 range 12 .. 12;
        Psc      at 0 range 13 .. 13;
        Soe      at 0 range 14 .. 14;
        Ldpc     at 0 range 15 .. 15;
        Fsp      at 0 range 16 .. 16;
    end record;

    type LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_HWVER_VALID_Field is (VALID_FALSE, VALID_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_HWVER_VALID_Field use (VALID_FALSE => 16#0#, VALID_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_HWVER_BUSY_Field is (BUSY_FALSE, BUSY_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_HWVER_BUSY_Field use (BUSY_FALSE => 16#0#, BUSY_TRUE => 16#1#);
    LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_HWVER_RELOAD_INIT : constant NvU1 := 16#0#;
    type LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_CTKID_VALID_Field is (VALID_FALSE, VALID_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_CTKID_VALID_Field use (VALID_FALSE => 16#0#, VALID_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_CTKID_BUSY_Field is (BUSY_FALSE, BUSY_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_CTKID_BUSY_Field use (BUSY_FALSE => 16#0#, BUSY_TRUE => 16#1#);
    LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_CTKID_RELOAD_INIT : constant NvU1 := 16#0#;

    type LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_Register is record
        Hwver_Valid  : LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_HWVER_VALID_Field;
        Hwver_Busy   : LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_HWVER_BUSY_Field;
        Hwver_Reload : NvU1;
        Ctkid_Valid  : LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_CTKID_VALID_Field;
        Ctkid_Busy   : LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_CTKID_BUSY_Field;
        Ctkid_Reload : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_Register use record
        Hwver_Valid  at 0 range  0 ..  0;
        Hwver_Busy   at 0 range  1 ..  1;
        Hwver_Reload at 0 range  4 ..  4;
        Ctkid_Valid  at 0 range  8 ..  8;
        Ctkid_Busy   at 0 range  9 ..  9;
        Ctkid_Reload at 0 range 12 .. 12;
    end record;

    LW_PRGNLCL_FALCON_PR_CTKID_VAL_DEF : constant NvU8 := 16#0#;

    type LW_PRGNLCL_FALCON_PR_CTKID_Register is record
        Val : NvU8;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_PR_CTKID_Register use record
        Val at 0 range 0 .. 7;
    end record;

    LW_PRGNLCL_FALCON_BROM_FUNID_ID_DEFT       : constant NvU8 := 16#0#;
    LW_PRGNLCL_FALCON_BROM_FUNID_ID_DECFUSEKEY : constant NvU8 := 16#1#;
    LW_PRGNLCL_FALCON_BROM_FUNID_ID_GENTK      : constant NvU8 := 16#2#;
    LW_PRGNLCL_FALCON_BROM_FUNID_ID_DECMPK     : constant NvU8 := 16#3#;
    LW_PRGNLCL_FALCON_BROM_FUNID_ID_SIGBYMPK   : constant NvU8 := 16#4#;
    LW_PRGNLCL_FALCON_BROM_FUNID_ID_CLRMPK     : constant NvU8 := 16#5#;
    LW_PRGNLCL_FALCON_BROM_FUNID_ID_ECDSASIGN  : constant NvU8 := 16#6#;
    LW_PRGNLCL_FALCON_BROM_FUNID_ID_ECDSAVERIF : constant NvU8 := 16#7#;
    type LW_PRGNLCL_FALCON_BROM_FUNID_CALLER_LVL_Field is (LVL_0, LVL_1, LVL_2, LVL_3) with
        Size => 2;
    for LW_PRGNLCL_FALCON_BROM_FUNID_CALLER_LVL_Field use (LVL_0 => 16#0#, LVL_1 => 16#1#, LVL_2 => 16#2#, LVL_3 => 16#3#);

    type LW_PRGNLCL_FALCON_BROM_FUNID_Register is record
        Id         : NvU8;
        Caller_Lvl : LW_PRGNLCL_FALCON_BROM_FUNID_CALLER_LVL_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_BROM_FUNID_Register use record
        Id         at 0 range 0 .. 7;
        Caller_Lvl at 0 range 8 .. 9;
    end record;

    LW_PRGNLCL_FALCON_BROM_PARAADDR_VAL_DEFT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_FALCON_BROM_PARAADDR_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_BROM_PARAADDR_Register use record
        Val at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_FALCON_BROM_RETCODE_ERR_SUCCESS                       : constant NvU8  := 16#0#;
    LW_PRGNLCL_FALCON_BROM_RETCODE_ERR_ILLFUNID                      : constant NvU8  := 16#1#;
    LW_PRGNLCL_FALCON_BROM_RETCODE_ERR_ILLDMEMPTR_PA_FAULT           : constant NvU8  := 16#2#;
    LW_PRGNLCL_FALCON_BROM_RETCODE_ERR_ILLDMEMPTR_NOT_IN_DMEM        : constant NvU8  := 16#3#;
    LW_PRGNLCL_FALCON_BROM_RETCODE_ERR_ILLDMEMPTR_NO_ENOUGH_SPACE    : constant NvU8  := 16#4#;
    LW_PRGNLCL_FALCON_BROM_RETCODE_ERR_ILLDMEMPTR_VA_NOT_VALID       : constant NvU8  := 16#5#;
    LW_PRGNLCL_FALCON_BROM_RETCODE_ERR_ILLDMEMPTR_MISALIGN_4BYTES    : constant NvU8  := 16#6#;
    LW_PRGNLCL_FALCON_BROM_RETCODE_ERR_ILLDMEMPTR_MISALIGN_16BYTES   : constant NvU8  := 16#7#;
    LW_PRGNLCL_FALCON_BROM_RETCODE_ERR_ILLDMEMPTR_MISALIGN_32BYTES   : constant NvU8  := 16#8#;
    LW_PRGNLCL_FALCON_BROM_RETCODE_ERR_ILLDMEMPTR_OUTPUT_NOT_ALLOWED : constant NvU8  := 16#9#;
    LW_PRGNLCL_FALCON_BROM_RETCODE_ERR_TK_PTR_IS_NS_READABLE         : constant NvU8  := 16#a#;
    LW_PRGNLCL_FALCON_BROM_RETCODE_ERR_NOT_CALLED_BY_HS              : constant NvU8  := 16#b#;
    LW_PRGNLCL_FALCON_BROM_RETCODE_ERR_CALL_FROM_LVL0                : constant NvU8  := 16#c#;
    LW_PRGNLCL_FALCON_BROM_RETCODE_ERR_ILLUCODEID                    : constant NvU8  := 16#d#;
    LW_PRGNLCL_FALCON_BROM_RETCODE_ERR_DISPOSE_MPK_FAIL              : constant NvU8  := 16#e#;
    LW_PRGNLCL_FALCON_BROM_RETCODE_ERR_CTKID_INVALID                 : constant NvU8  := 16#f#;
    LW_PRGNLCL_FALCON_BROM_RETCODE_ERR_ILLTKID                       : constant NvU8  := 16#10#;
    LW_PRGNLCL_FALCON_BROM_RETCODE_ERR_INVLDPMUK                     : constant NvU8  := 16#11#;
    LW_PRGNLCL_FALCON_BROM_RETCODE_ERR_INVLDPDUK                     : constant NvU8  := 16#12#;
    LW_PRGNLCL_FALCON_BROM_RETCODE_ERR_INVLDMPK                      : constant NvU8  := 16#13#;
    LW_PRGNLCL_FALCON_BROM_RETCODE_ERR_SIGFAIL                       : constant NvU8  := 16#14#;
    LW_PRGNLCL_FALCON_BROM_RETCODE_ERR_PDI_INVALID                   : constant NvU8  := 16#15#;
    LW_PRGNLCL_FALCON_BROM_RETCODE_ERR_LOAD_KMEM2SCP_FAIL            : constant NvU8  := 16#16#;
    LW_PRGNLCL_FALCON_BROM_RETCODE_ERR_WRONG_PROTECTINFO             : constant NvU8  := 16#17#;
    LW_PRGNLCL_FALCON_BROM_RETCODE_ERR_KSLT_K3_IS_0                  : constant NvU8  := 16#18#;
    LW_PRGNLCL_FALCON_BROM_RETCODE_ERR_WRONG_HEADER_NUMOF16B         : constant NvU8  := 16#19#;
    LW_PRGNLCL_FALCON_BROM_RETCODE_ERR_WRONG_HEADER_NUMOF32B         : constant NvU8  := 16#1a#;
    LW_PRGNLCL_FALCON_BROM_RETCODE_ERR_WRONG_HEADER_RSVD_ZEROS       : constant NvU8  := 16#1b#;
    LW_PRGNLCL_FALCON_BROM_RETCODE_ERR_MPK_IS_VALID                  : constant NvU8  := 16#1c#;
    LW_PRGNLCL_FALCON_BROM_RETCODE_ERR_SCP_ERR                       : constant NvU8  := 16#1d#;
    LW_PRGNLCL_FALCON_BROM_RETCODE_ERR_ILLDMEMPTR_MISALIGN_256BYTES  : constant NvU8  := 16#1e#;
    LW_PRGNLCL_FALCON_BROM_RETCODE_ERRID_DEFT                        : constant NvU12 := 16#0#;
    LW_PRGNLCL_FALCON_BROM_RETCODE_FUNID_DEFT                        : constant NvU4  := 16#0#;
    LW_PRGNLCL_FALCON_BROM_RETCODE_ERRINFO_DEFT                      : constant NvU8  := 16#0#;

    type LW_PRGNLCL_FALCON_BROM_RETCODE_Register is record
        Err     : NvU8;
        Errid   : NvU12;
        Funid   : NvU4;
        Errinfo : NvU8;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_BROM_RETCODE_Register use record
        Err     at 0 range  0 ..  7;
        Errid   at 0 range  8 .. 19;
        Funid   at 0 range 20 .. 23;
        Errinfo at 0 range 24 .. 31;
    end record;

    LW_PRGNLCL_FALCON_KMEMBASE_VAL_DEF : constant NvU32 := 16#200_0000#;

    type LW_PRGNLCL_FALCON_KMEMBASE_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_KMEMBASE_Register use record
        Val at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_FALCON_KMEMC_OFFS_INIT     : constant NvU14 := 16#0#;
    LW_PRGNLCL_FALCON_KMEMC_OFFS_PROTINFO : constant NvU14 := 16#400#;
    LW_PRGNLCL_FALCON_KMEMC_OFFS_MAX      : constant NvU14 := 16#5ff#;
    type LW_PRGNLCL_FALCON_KMEMC_AINCW_Field is (AINCW_FALSE, AINCW_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_KMEMC_AINCW_Field use (AINCW_FALSE => 16#0#, AINCW_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_KMEMC_AINCR_Field is (AINCR_FALSE, AINCR_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_KMEMC_AINCR_Field use (AINCR_FALSE => 16#0#, AINCR_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_KMEMC_ERR_Field is (ERR_SUCCESS, ERR_1, ERR_2, ERR_3, ERR_4, ERR_5, ERR_6, ERR_7) with
        Size => 3;
    for LW_PRGNLCL_FALCON_KMEMC_ERR_Field use
        (ERR_SUCCESS => 16#0#, ERR_1 => 16#1#, ERR_2 => 16#2#, ERR_3 => 16#3#, ERR_4 => 16#4#, ERR_5 => 16#5#, ERR_6 => 16#6#, ERR_7 => 16#7#);

    type LW_PRGNLCL_FALCON_KMEMC_Register is record
        Offs  : NvU14;
        Aincw : LW_PRGNLCL_FALCON_KMEMC_AINCW_Field;
        Aincr : LW_PRGNLCL_FALCON_KMEMC_AINCR_Field;
        Err   : LW_PRGNLCL_FALCON_KMEMC_ERR_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_KMEMC_Register use record
        Offs  at 0 range  2 .. 15;
        Aincw at 0 range 24 .. 24;
        Aincr at 0 range 25 .. 25;
        Err   at 0 range 26 .. 28;
    end record;

    type LW_PRGNLCL_FALCON_KMEMD_Register is record
        Data : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_KMEMD_Register use record
        Data at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_FALCON_KMEM_CTL_IDX_INIT     : constant NvU8 := 16#0#;
    LW_PRGNLCL_FALCON_KMEM_CTL_CMD_NOP      : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_KMEM_CTL_CMD_DISPOSE  : constant NvU4 := 16#1#;
    LW_PRGNLCL_FALCON_KMEM_CTL_CMD_LOADTO63 : constant NvU4 := 16#2#;
    type LW_PRGNLCL_FALCON_KMEM_CTL_RESULT_Field is
        (RESULT_NOP, RESULT_DISPOSE_DONE, RESULT_DISPOSE_FAILED_BY_RECYCLABLE_IS_0, RESULT_DISPOSE_FAILED_BY_PRIVDISABLED, RESULT_DISPOSE_FAILED_BY_NOTWRITEABLE,
         RESULT_LOADTO63_DONE, RESULT_LOADTO63_FAILED_BY_LOADABLE_IS_0, RESULT_LOADTO63_FAILED_BY_PRIVDISABLED, RESULT_LOADTO63_FAILED_BY_UCODIDMASK_IS_0,
         RESULT_DISPOSE_FAILED_BY_SLOT_MASK, RESULT_LOADTO63_FAILED_BY_SLOT_MASK, RESULT_DISPOSE_FAILED_BY_NON_LEVEL3, RESULT_DISPOSE_FAILED_BY_UCODEIDMASK_IS_0) with
        Size => 4;
    for LW_PRGNLCL_FALCON_KMEM_CTL_RESULT_Field use
        (RESULT_NOP => 16#0#, RESULT_DISPOSE_DONE => 16#1#, RESULT_DISPOSE_FAILED_BY_RECYCLABLE_IS_0 => 16#2#, RESULT_DISPOSE_FAILED_BY_PRIVDISABLED => 16#3#,
         RESULT_DISPOSE_FAILED_BY_NOTWRITEABLE  => 16#4#, RESULT_LOADTO63_DONE => 16#5#, RESULT_LOADTO63_FAILED_BY_LOADABLE_IS_0 => 16#6#,
         RESULT_LOADTO63_FAILED_BY_PRIVDISABLED => 16#7#, RESULT_LOADTO63_FAILED_BY_UCODIDMASK_IS_0 => 16#8#, RESULT_DISPOSE_FAILED_BY_SLOT_MASK => 16#9#,
         RESULT_LOADTO63_FAILED_BY_SLOT_MASK    => 16#a#, RESULT_DISPOSE_FAILED_BY_NON_LEVEL3 => 16#b#, RESULT_DISPOSE_FAILED_BY_UCODEIDMASK_IS_0 => 16#c#);

    type LW_PRGNLCL_FALCON_KMEM_CTL_Register is record
        Idx    : NvU8;
        Cmd    : NvU4;
        Result : LW_PRGNLCL_FALCON_KMEM_CTL_RESULT_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_KMEM_CTL_Register use record
        Idx    at 0 range  0 ..  7;
        Cmd    at 0 range 16 .. 19;
        Result at 0 range 20 .. 23;
    end record;

    LW_PRGNLCL_FALCON_KMEMCFG_NUMOFKSLT_DEFT          : constant NvU16 := 16#100#;
    LW_PRGNLCL_FALCON_KMEMCFG_KSLT_LENGTH_DEFT        : constant NvU6  := 16#10#;
    LW_PRGNLCL_FALCON_KMEMCFG_PROTECTINFO_LENGTH_DEFT : constant NvU4  := 16#8#;
    LW_PRGNLCL_FALCON_KMEMCFG_BROM_USED_SLOTS_DEFT    : constant NvU6  := 16#10#;

    type LW_PRGNLCL_FALCON_KMEMCFG_Register is record
        Numofkslt          : NvU16;
        Kslt_Length        : NvU6;
        Protectinfo_Length : NvU4;
        Brom_Used_Slots    : NvU6;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_KMEMCFG_Register use record
        Numofkslt          at 0 range  0 .. 15;
        Kslt_Length        at 0 range 16 .. 21;
        Protectinfo_Length at 0 range 22 .. 25;
        Brom_Used_Slots    at 0 range 26 .. 31;
    end record;

    LW_PRGNLCL_FALCON_KMEM_VALID_VAL_DEFT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_FALCON_KMEM_VALID_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_KMEM_VALID_Register use record
        Val at 0 range 0 .. 31;
    end record;

    type LW_PRGNLCL_FALCON_KMEM_VIOLATION_CTL_ACT_Field is (ACT_HALT, ACT_EXC) with
        Size => 1;
    for LW_PRGNLCL_FALCON_KMEM_VIOLATION_CTL_ACT_Field use (ACT_HALT => 16#0#, ACT_EXC => 16#1#);

    type LW_PRGNLCL_FALCON_KMEM_VIOLATION_CTL_Register is record
        Act : LW_PRGNLCL_FALCON_KMEM_VIOLATION_CTL_ACT_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_KMEM_VIOLATION_CTL_Register use record
        Act at 0 range 0 .. 0;
    end record;

    type LW_PRGNLCL_FALCON_EXCI_KMEM_VIOLATION_DBGINF_OP_Field is (OP_READ, OP_WRITE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_EXCI_KMEM_VIOLATION_DBGINF_OP_Field use (OP_READ => 16#0#, OP_WRITE => 16#1#);
    LW_PRGNLCL_FALCON_EXCI_KMEM_VIOLATION_DBGINF_MASTER_LVL_INIT    : constant NvU2 := 16#0#;
    LW_PRGNLCL_FALCON_EXCI_KMEM_VIOLATION_DBGINF_MASTER_UCODID_INIT : constant NvU8 := 16#0#;
    LW_PRGNLCL_FALCON_EXCI_KMEM_VIOLATION_DBGINF_KSLT_IDX_INIT      : constant NvU8 := 16#0#;
    type LW_PRGNLCL_FALCON_EXCI_KMEM_VIOLATION_DBGINF_TARGET_Field is (TARGET_KSLT, TARGET_PROTINFO) with
        Size => 1;
    for LW_PRGNLCL_FALCON_EXCI_KMEM_VIOLATION_DBGINF_TARGET_Field use (TARGET_KSLT => 16#0#, TARGET_PROTINFO => 16#1#);

    type LW_PRGNLCL_FALCON_EXCI_KMEM_VIOLATION_DBGINF_Register is record
        Op            : LW_PRGNLCL_FALCON_EXCI_KMEM_VIOLATION_DBGINF_OP_Field;
        Master_Lvl    : NvU2;
        Master_Ucodid : NvU8;
        Kslt_Idx      : NvU8;
        Target        : LW_PRGNLCL_FALCON_EXCI_KMEM_VIOLATION_DBGINF_TARGET_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_EXCI_KMEM_VIOLATION_DBGINF_Register use record
        Op            at 0 range  0 ..  0;
        Master_Lvl    at 0 range  4 ..  5;
        Master_Ucodid at 0 range  8 .. 15;
        Kslt_Idx      at 0 range 16 .. 23;
        Target        at 0 range 24 .. 24;
    end record;

    LW_PRGNLCL_FALCON_KMEM_SLOT_MASK_VAL_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_FALCON_KMEM_SLOT_MASK_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_KMEM_SLOT_MASK_Register use record
        Val at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_FALCON_KEYGLOB_CTRL_INDEX_INIT : constant NvU8 := 16#0#;
    type LW_PRGNLCL_FALCON_KEYGLOB_CTRL_STAT_VALID_Field is (VALID_FALSE, VALID_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_KEYGLOB_CTRL_STAT_VALID_Field use (VALID_FALSE => 16#0#, VALID_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_KEYGLOB_CTRL_STAT_BUSY_Field is (BUSY_FALSE, BUSY_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_KEYGLOB_CTRL_STAT_BUSY_Field use (BUSY_FALSE => 16#0#, BUSY_TRUE => 16#1#);
    LW_PRGNLCL_FALCON_KEYGLOB_CTRL_STAT_RELOAD_INIT : constant NvU1 := 16#0#;

    type LW_PRGNLCL_FALCON_KEYGLOB_CTRL_Register is record
        Index       : NvU8;
        Stat_Valid  : LW_PRGNLCL_FALCON_KEYGLOB_CTRL_STAT_VALID_Field;
        Stat_Busy   : LW_PRGNLCL_FALCON_KEYGLOB_CTRL_STAT_BUSY_Field;
        Stat_Reload : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_KEYGLOB_CTRL_Register use record
        Index       at 0 range  0 ..  7;
        Stat_Valid  at 0 range 16 .. 16;
        Stat_Busy   at 0 range 17 .. 17;
        Stat_Reload at 0 range 20 .. 20;
    end record;

    type LW_PRGNLCL_FALCON_KEYGLOB_DATA_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_KEYGLOB_DATA_Register use record
        Val at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_RISCV_EXE_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#f#;
    LW_PRGNLCL_RISCV_EXE_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_RISCV_EXE_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_RISCV_EXE_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_RISCV_EXE_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_RISCV_EXE_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    LW_PRGNLCL_RISCV_EXE_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    type LW_PRGNLCL_RISCV_EXE_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_RISCV_EXE_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_RISCV_EXE_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_RISCV_EXE_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_RISCV_EXE_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_EXE_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_RISCV_EXE_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_EXE_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_RISCV_EXE_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_RISCV_EXE_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_EXE_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_EXE_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_EXE_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_EXE_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_EXE_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_EXE_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_EXE_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_EXE_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_EXE_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_RISCV_EXE_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_EXE_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_RISCV_EXE_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_EXE_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_RISCV_EXE_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_EXE_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_RISCV_EXE_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_RISCV_EXE_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_RISCV_EXE_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_RISCV_EXE_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_RISCV_EXE_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_EXE_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_RISCV_CPUCTL_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_RISCV_CPUCTL_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_RISCV_CPUCTL_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_RISCV_CPUCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_RISCV_CPUCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    LW_PRGNLCL_RISCV_CPUCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    type LW_PRGNLCL_RISCV_CPUCTL_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_RISCV_CPUCTL_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_RISCV_CPUCTL_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_RISCV_CPUCTL_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_RISCV_CPUCTL_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_CPUCTL_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_RISCV_CPUCTL_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_CPUCTL_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_RISCV_CPUCTL_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_RISCV_CPUCTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_CPUCTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_CPUCTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_CPUCTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_CPUCTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_CPUCTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_CPUCTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_CPUCTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_CPUCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_CPUCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_RISCV_CPUCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_CPUCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_RISCV_CPUCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_CPUCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_RISCV_CPUCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_CPUCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_RISCV_CPUCTL_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_RISCV_CPUCTL_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_RISCV_CPUCTL_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_RISCV_CPUCTL_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_RISCV_CPUCTL_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_CPUCTL_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_RISCV_IRQ_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#f#;
    LW_PRGNLCL_RISCV_IRQ_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_RISCV_IRQ_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_RISCV_IRQ_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_RISCV_IRQ_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_RISCV_IRQ_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    LW_PRGNLCL_RISCV_IRQ_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    type LW_PRGNLCL_RISCV_IRQ_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQ_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_RISCV_IRQ_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQ_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_RISCV_IRQ_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQ_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_RISCV_IRQ_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQ_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_RISCV_IRQ_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_RISCV_IRQ_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_IRQ_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_IRQ_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_IRQ_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_IRQ_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_IRQ_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_IRQ_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_IRQ_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_IRQ_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_IRQ_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_RISCV_IRQ_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_IRQ_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_RISCV_IRQ_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_IRQ_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_RISCV_IRQ_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_IRQ_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_RISCV_IRQ_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_RISCV_IRQ_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_RISCV_IRQ_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_RISCV_IRQ_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_RISCV_IRQ_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_IRQ_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_RISCV_DBGCTL_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#f#;
    LW_PRGNLCL_RISCV_DBGCTL_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_RISCV_DBGCTL_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_RISCV_DBGCTL_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_RISCV_DBGCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_RISCV_DBGCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    LW_PRGNLCL_RISCV_DBGCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    type LW_PRGNLCL_RISCV_DBGCTL_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_RISCV_DBGCTL_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_RISCV_DBGCTL_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_RISCV_DBGCTL_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_RISCV_DBGCTL_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_DBGCTL_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_RISCV_DBGCTL_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_DBGCTL_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_RISCV_DBGCTL_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_RISCV_DBGCTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_DBGCTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_DBGCTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_DBGCTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_DBGCTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_DBGCTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_DBGCTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_DBGCTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_DBGCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_DBGCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_RISCV_DBGCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_DBGCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_RISCV_DBGCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_DBGCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_RISCV_DBGCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_DBGCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_RISCV_DBGCTL_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_RISCV_DBGCTL_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_RISCV_DBGCTL_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_RISCV_DBGCTL_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_RISCV_DBGCTL_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_DBGCTL_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_RISCV_BOOTVEC_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#f#;
    LW_PRGNLCL_RISCV_BOOTVEC_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_RISCV_BOOTVEC_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_RISCV_BOOTVEC_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_RISCV_BOOTVEC_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_RISCV_BOOTVEC_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    LW_PRGNLCL_RISCV_BOOTVEC_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    type LW_PRGNLCL_RISCV_BOOTVEC_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_RISCV_BOOTVEC_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_RISCV_BOOTVEC_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_RISCV_BOOTVEC_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_RISCV_BOOTVEC_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_BOOTVEC_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_RISCV_BOOTVEC_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_BOOTVEC_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_RISCV_BOOTVEC_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_RISCV_BOOTVEC_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_BOOTVEC_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_BOOTVEC_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_BOOTVEC_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_BOOTVEC_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_BOOTVEC_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_BOOTVEC_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_BOOTVEC_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_BOOTVEC_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_BOOTVEC_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_RISCV_BOOTVEC_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_BOOTVEC_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_RISCV_BOOTVEC_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_BOOTVEC_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_RISCV_BOOTVEC_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_BOOTVEC_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_RISCV_BOOTVEC_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_RISCV_BOOTVEC_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_RISCV_BOOTVEC_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_RISCV_BOOTVEC_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_RISCV_BOOTVEC_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_BOOTVEC_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_RISCV_BCR_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#f#;
    LW_PRGNLCL_RISCV_BCR_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_RISCV_BCR_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_RISCV_BCR_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_RISCV_BCR_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_RISCV_BCR_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    LW_PRGNLCL_RISCV_BCR_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    type LW_PRGNLCL_RISCV_BCR_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_RISCV_BCR_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_RISCV_BCR_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_RISCV_BCR_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_RISCV_BCR_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_BCR_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_RISCV_BCR_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_BCR_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_RISCV_BCR_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_RISCV_BCR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_BCR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_BCR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_BCR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_BCR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_BCR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_BCR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_BCR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_BCR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_BCR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_RISCV_BCR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_BCR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_RISCV_BCR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_BCR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_RISCV_BCR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_BCR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_RISCV_BCR_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_RISCV_BCR_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_RISCV_BCR_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_RISCV_BCR_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_RISCV_BCR_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_BCR_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_RISCV_BCR_DMACFG_SEC_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#f#;
    LW_PRGNLCL_RISCV_BCR_DMACFG_SEC_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_RISCV_BCR_DMACFG_SEC_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_RISCV_BCR_DMACFG_SEC_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_RISCV_BCR_DMACFG_SEC_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_RISCV_BCR_DMACFG_SEC_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    LW_PRGNLCL_RISCV_BCR_DMACFG_SEC_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    type LW_PRGNLCL_RISCV_BCR_DMACFG_SEC_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_RISCV_BCR_DMACFG_SEC_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_RISCV_BCR_DMACFG_SEC_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_RISCV_BCR_DMACFG_SEC_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_RISCV_BCR_DMACFG_SEC_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_BCR_DMACFG_SEC_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_RISCV_BCR_DMACFG_SEC_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_BCR_DMACFG_SEC_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_RISCV_BCR_DMACFG_SEC_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_RISCV_BCR_DMACFG_SEC_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_BCR_DMACFG_SEC_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_BCR_DMACFG_SEC_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_BCR_DMACFG_SEC_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_BCR_DMACFG_SEC_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_BCR_DMACFG_SEC_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_BCR_DMACFG_SEC_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_BCR_DMACFG_SEC_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_BCR_DMACFG_SEC_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_BCR_DMACFG_SEC_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_RISCV_BCR_DMACFG_SEC_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_BCR_DMACFG_SEC_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_RISCV_BCR_DMACFG_SEC_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_BCR_DMACFG_SEC_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_RISCV_BCR_DMACFG_SEC_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_BCR_DMACFG_SEC_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_RISCV_BCR_DMACFG_SEC_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_RISCV_BCR_DMACFG_SEC_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_RISCV_BCR_DMACFG_SEC_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_RISCV_BCR_DMACFG_SEC_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_RISCV_BCR_DMACFG_SEC_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_BCR_DMACFG_SEC_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_RISCV_BCR_UIDENABLEMASK_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#f#;
    LW_PRGNLCL_RISCV_BCR_UIDENABLEMASK_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_RISCV_BCR_UIDENABLEMASK_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_RISCV_BCR_UIDENABLEMASK_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_RISCV_BCR_UIDENABLEMASK_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_RISCV_BCR_UIDENABLEMASK_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    LW_PRGNLCL_RISCV_BCR_UIDENABLEMASK_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    type LW_PRGNLCL_RISCV_BCR_UIDENABLEMASK_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_RISCV_BCR_UIDENABLEMASK_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_RISCV_BCR_UIDENABLEMASK_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_RISCV_BCR_UIDENABLEMASK_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_RISCV_BCR_UIDENABLEMASK_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_BCR_UIDENABLEMASK_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_RISCV_BCR_UIDENABLEMASK_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_BCR_UIDENABLEMASK_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_RISCV_BCR_UIDENABLEMASK_PRIV_LEVEL_MASK_SOURCE_ENABLE_FSP_ONLY            : constant NvU20 := 16#800#;
    LW_PRGNLCL_RISCV_BCR_UIDENABLEMASK_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_RISCV_BCR_UIDENABLEMASK_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_BCR_UIDENABLEMASK_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_BCR_UIDENABLEMASK_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_BCR_UIDENABLEMASK_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_BCR_UIDENABLEMASK_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_BCR_UIDENABLEMASK_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_BCR_UIDENABLEMASK_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_BCR_UIDENABLEMASK_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_BCR_UIDENABLEMASK_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_BCR_UIDENABLEMASK_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_RISCV_BCR_UIDENABLEMASK_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_BCR_UIDENABLEMASK_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_RISCV_BCR_UIDENABLEMASK_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_BCR_UIDENABLEMASK_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_RISCV_BCR_UIDENABLEMASK_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_BCR_UIDENABLEMASK_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_RISCV_BCR_UIDENABLEMASK_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_RISCV_BCR_UIDENABLEMASK_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_RISCV_BCR_UIDENABLEMASK_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_RISCV_BCR_UIDENABLEMASK_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_RISCV_BCR_UIDENABLEMASK_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_BCR_UIDENABLEMASK_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_RISCV_LWCONFIG_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#f#;
    LW_PRGNLCL_RISCV_LWCONFIG_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_RISCV_LWCONFIG_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_RISCV_LWCONFIG_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_RISCV_LWCONFIG_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_RISCV_LWCONFIG_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    LW_PRGNLCL_RISCV_LWCONFIG_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    type LW_PRGNLCL_RISCV_LWCONFIG_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_RISCV_LWCONFIG_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_RISCV_LWCONFIG_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_RISCV_LWCONFIG_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_RISCV_LWCONFIG_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_LWCONFIG_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_RISCV_LWCONFIG_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_LWCONFIG_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_RISCV_LWCONFIG_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_RISCV_LWCONFIG_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_LWCONFIG_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_LWCONFIG_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_LWCONFIG_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_LWCONFIG_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_LWCONFIG_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_LWCONFIG_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_LWCONFIG_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_LWCONFIG_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_LWCONFIG_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_RISCV_LWCONFIG_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_LWCONFIG_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_RISCV_LWCONFIG_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_LWCONFIG_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_RISCV_LWCONFIG_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_LWCONFIG_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_RISCV_LWCONFIG_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_RISCV_LWCONFIG_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_RISCV_LWCONFIG_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_RISCV_LWCONFIG_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_RISCV_LWCONFIG_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_LWCONFIG_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_RISCV_TRACEBUF_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#f#;
    LW_PRGNLCL_RISCV_TRACEBUF_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_RISCV_TRACEBUF_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_RISCV_TRACEBUF_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_RISCV_TRACEBUF_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_RISCV_TRACEBUF_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    LW_PRGNLCL_RISCV_TRACEBUF_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    type LW_PRGNLCL_RISCV_TRACEBUF_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_RISCV_TRACEBUF_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_RISCV_TRACEBUF_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_RISCV_TRACEBUF_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_RISCV_TRACEBUF_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_TRACEBUF_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_RISCV_TRACEBUF_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_TRACEBUF_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_RISCV_TRACEBUF_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_RISCV_TRACEBUF_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_TRACEBUF_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_TRACEBUF_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_TRACEBUF_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_TRACEBUF_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_TRACEBUF_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_TRACEBUF_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_TRACEBUF_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_TRACEBUF_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_TRACEBUF_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_RISCV_TRACEBUF_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_TRACEBUF_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_RISCV_TRACEBUF_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_TRACEBUF_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_RISCV_TRACEBUF_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_TRACEBUF_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_RISCV_TRACEBUF_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_RISCV_TRACEBUF_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_RISCV_TRACEBUF_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_RISCV_TRACEBUF_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_RISCV_TRACEBUF_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_TRACEBUF_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_RISCV_MSIP_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#f#;
    LW_PRGNLCL_RISCV_MSIP_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_RISCV_MSIP_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_RISCV_MSIP_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_RISCV_MSIP_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_RISCV_MSIP_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    LW_PRGNLCL_RISCV_MSIP_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    type LW_PRGNLCL_RISCV_MSIP_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_RISCV_MSIP_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_RISCV_MSIP_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_RISCV_MSIP_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_RISCV_MSIP_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_MSIP_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_RISCV_MSIP_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_MSIP_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_RISCV_MSIP_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_RISCV_MSIP_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_MSIP_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_MSIP_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_MSIP_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_MSIP_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_MSIP_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_MSIP_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_MSIP_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_MSIP_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_MSIP_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_RISCV_MSIP_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_MSIP_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_RISCV_MSIP_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_MSIP_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_RISCV_MSIP_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_MSIP_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_RISCV_MSIP_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_RISCV_MSIP_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_RISCV_MSIP_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_RISCV_MSIP_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_RISCV_MSIP_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_MSIP_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_RISCV_PIC_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#f#;
    LW_PRGNLCL_RISCV_PIC_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_RISCV_PIC_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_RISCV_PIC_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_RISCV_PIC_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_RISCV_PIC_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    LW_PRGNLCL_RISCV_PIC_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    type LW_PRGNLCL_RISCV_PIC_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_RISCV_PIC_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_RISCV_PIC_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_RISCV_PIC_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_RISCV_PIC_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_PIC_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_RISCV_PIC_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_PIC_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_RISCV_PIC_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_RISCV_PIC_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_PIC_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_PIC_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_PIC_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_PIC_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_PIC_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_PIC_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_PIC_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_PIC_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_PIC_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_RISCV_PIC_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_PIC_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_RISCV_PIC_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_PIC_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_RISCV_PIC_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_PIC_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_RISCV_PIC_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_RISCV_PIC_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_RISCV_PIC_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_RISCV_PIC_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_RISCV_PIC_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_PIC_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_RISCV_PICSCMASK_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#f#;
    LW_PRGNLCL_RISCV_PICSCMASK_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_RISCV_PICSCMASK_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_RISCV_PICSCMASK_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_RISCV_PICSCMASK_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_RISCV_PICSCMASK_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    LW_PRGNLCL_RISCV_PICSCMASK_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    type LW_PRGNLCL_RISCV_PICSCMASK_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_RISCV_PICSCMASK_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_RISCV_PICSCMASK_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_RISCV_PICSCMASK_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_RISCV_PICSCMASK_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_PICSCMASK_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_RISCV_PICSCMASK_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_PICSCMASK_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_RISCV_PICSCMASK_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_RISCV_PICSCMASK_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_PICSCMASK_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_PICSCMASK_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_PICSCMASK_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_PICSCMASK_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_PICSCMASK_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_PICSCMASK_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_PICSCMASK_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_PICSCMASK_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_PICSCMASK_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_RISCV_PICSCMASK_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_PICSCMASK_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_RISCV_PICSCMASK_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_PICSCMASK_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_RISCV_PICSCMASK_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_PICSCMASK_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_RISCV_PICSCMASK_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_RISCV_PICSCMASK_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_RISCV_PICSCMASK_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_RISCV_PICSCMASK_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_RISCV_PICSCMASK_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_PICSCMASK_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_RISCV_ERR_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#f#;
    LW_PRGNLCL_RISCV_ERR_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_RISCV_ERR_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_RISCV_ERR_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_RISCV_ERR_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_RISCV_ERR_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    LW_PRGNLCL_RISCV_ERR_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    type LW_PRGNLCL_RISCV_ERR_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_RISCV_ERR_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_RISCV_ERR_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_RISCV_ERR_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_RISCV_ERR_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_ERR_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_RISCV_ERR_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_ERR_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_RISCV_ERR_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_RISCV_ERR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_ERR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_ERR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_ERR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_ERR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_ERR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_ERR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_ERR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_ERR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_ERR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_RISCV_ERR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_ERR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_RISCV_ERR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_ERR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_RISCV_ERR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_ERR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_RISCV_ERR_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_RISCV_ERR_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_RISCV_ERR_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_RISCV_ERR_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_RISCV_ERR_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_ERR_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_RISCV_NO_ACCESS_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_RISCV_NO_ACCESS_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_RISCV_NO_ACCESS_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_RISCV_NO_ACCESS_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_RISCV_NO_ACCESS_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    LW_PRGNLCL_RISCV_NO_ACCESS_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    type LW_PRGNLCL_RISCV_NO_ACCESS_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_RISCV_NO_ACCESS_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_RISCV_NO_ACCESS_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_RISCV_NO_ACCESS_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_RISCV_NO_ACCESS_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_NO_ACCESS_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_RISCV_NO_ACCESS_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_NO_ACCESS_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_RISCV_NO_ACCESS_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_DISABLED : constant NvU20 := 16#0#;
    LW_PRGNLCL_RISCV_NO_ACCESS_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED  : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_RISCV_NO_ACCESS_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE      : constant       := 16#1#;
    LW_PRGNLCL_RISCV_NO_ACCESS_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE     : constant       := 16#0#;
    LW_PRGNLCL_RISCV_NO_ACCESS_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE      : constant       := 16#1#;
    LW_PRGNLCL_RISCV_NO_ACCESS_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE     : constant       := 16#0#;
    LW_PRGNLCL_RISCV_NO_ACCESS_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE      : constant       := 16#1#;
    LW_PRGNLCL_RISCV_NO_ACCESS_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE     : constant       := 16#0#;
    LW_PRGNLCL_RISCV_NO_ACCESS_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE      : constant       := 16#1#;
    LW_PRGNLCL_RISCV_NO_ACCESS_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE     : constant       := 16#0#;
    LW_PRGNLCL_RISCV_NO_ACCESS_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_NO_ACCESS_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_NO_ACCESS_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_NO_ACCESS_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_NO_ACCESS_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_NO_ACCESS_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_NO_ACCESS_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_NO_ACCESS_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;

    type LW_PRGNLCL_RISCV_NO_ACCESS_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_RISCV_NO_ACCESS_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_RISCV_NO_ACCESS_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_RISCV_NO_ACCESS_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_RISCV_NO_ACCESS_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_NO_ACCESS_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_RISCV_LMSR_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_RISCV_LMSR_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_RISCV_LMSR_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_RISCV_LMSR_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_RISCV_LMSR_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    LW_PRGNLCL_RISCV_LMSR_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    type LW_PRGNLCL_RISCV_LMSR_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_RISCV_LMSR_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_RISCV_LMSR_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_RISCV_LMSR_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_RISCV_LMSR_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_LMSR_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_RISCV_LMSR_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_LMSR_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_RISCV_LMSR_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_DISABLED : constant NvU20 := 16#0#;
    LW_PRGNLCL_RISCV_LMSR_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED  : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_RISCV_LMSR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE      : constant       := 16#1#;
    LW_PRGNLCL_RISCV_LMSR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE     : constant       := 16#0#;
    LW_PRGNLCL_RISCV_LMSR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE      : constant       := 16#1#;
    LW_PRGNLCL_RISCV_LMSR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE     : constant       := 16#0#;
    LW_PRGNLCL_RISCV_LMSR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE      : constant       := 16#1#;
    LW_PRGNLCL_RISCV_LMSR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE     : constant       := 16#0#;
    LW_PRGNLCL_RISCV_LMSR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE      : constant       := 16#1#;
    LW_PRGNLCL_RISCV_LMSR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE     : constant       := 16#0#;
    LW_PRGNLCL_RISCV_LMSR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_LMSR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_LMSR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_LMSR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_LMSR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_LMSR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_LMSR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_LMSR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;

    type LW_PRGNLCL_RISCV_LMSR_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_RISCV_LMSR_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_RISCV_LMSR_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_RISCV_LMSR_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_RISCV_LMSR_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_LMSR_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_RISCV_IRQMSET_GPTMR_SET         : constant NvU1 := 16#1#;
    LW_PRGNLCL_RISCV_IRQMSET_WDTMR_SET         : constant NvU1 := 16#1#;
    LW_PRGNLCL_RISCV_IRQMSET_MTHD_SET          : constant NvU1 := 16#1#;
    LW_PRGNLCL_RISCV_IRQMSET_CTXSW_SET         : constant NvU1 := 16#1#;
    LW_PRGNLCL_RISCV_IRQMSET_HALT_SET          : constant NvU1 := 16#1#;
    LW_PRGNLCL_RISCV_IRQMSET_EXTERR_SET        : constant NvU1 := 16#1#;
    LW_PRGNLCL_RISCV_IRQMSET_SWGEN0_SET        : constant NvU1 := 16#1#;
    LW_PRGNLCL_RISCV_IRQMSET_SWGEN1_SET        : constant NvU1 := 16#1#;
    LW_PRGNLCL_RISCV_IRQMSET_DMA_SET           : constant NvU1 := 16#1#;
    LW_PRGNLCL_RISCV_IRQMSET_SHA_SET           : constant NvU1 := 16#1#;
    LW_PRGNLCL_RISCV_IRQMSET_MEMERR_SET        : constant NvU1 := 16#1#;
    LW_PRGNLCL_RISCV_IRQMSET_CTXSW_ERROR_SET   : constant NvU1 := 16#1#;
    LW_PRGNLCL_RISCV_IRQMSET_GDMA_SET          : constant NvU1 := 16#1#;
    LW_PRGNLCL_RISCV_IRQMSET_ICD_SET           : constant NvU1 := 16#1#;
    LW_PRGNLCL_RISCV_IRQMSET_IOPMP_SET         : constant NvU1 := 16#1#;
    LW_PRGNLCL_RISCV_IRQMSET_CORE_MISMATCH_SET : constant NvU1 := 16#1#;
    LW_PRGNLCL_RISCV_IRQMSET_SE_SAP_SET        : constant NvU1 := 16#1#;
    LW_PRGNLCL_RISCV_IRQMSET_SE_PKA_SET        : constant NvU1 := 16#1#;
    LW_PRGNLCL_RISCV_IRQMSET_SE_RNG_SET        : constant NvU1 := 16#1#;
    LW_PRGNLCL_RISCV_IRQMSET_SE_KEYMOVER_SET   : constant NvU1 := 16#1#;
    LW_PRGNLCL_RISCV_IRQMSET_EXT_EXTIRQ1_SET   : constant      := 16#1#;
    LW_PRGNLCL_RISCV_IRQMSET_EXT_EXTIRQ2_SET   : constant      := 16#1#;
    LW_PRGNLCL_RISCV_IRQMSET_EXT_EXTIRQ3_SET   : constant      := 16#1#;
    LW_PRGNLCL_RISCV_IRQMSET_EXT_EXTIRQ4_SET   : constant      := 16#1#;
    LW_PRGNLCL_RISCV_IRQMSET_EXT_EXTIRQ5_SET   : constant      := 16#1#;
    LW_PRGNLCL_RISCV_IRQMSET_EXT_EXTIRQ6_SET   : constant      := 16#1#;
    LW_PRGNLCL_RISCV_IRQMSET_EXT_EXTIRQ7_SET   : constant      := 16#1#;
    LW_PRGNLCL_RISCV_IRQMSET_EXT_EXTIRQ8_SET   : constant      := 16#1#;

    type LW_PRGNLCL_RISCV_IRQMSET_Register is record
        Gptmr         : NvU1;
        Wdtmr         : NvU1;
        Mthd          : NvU1;
        Ctxsw         : NvU1;
        Halt          : NvU1;
        Exterr        : NvU1;
        Swgen0        : NvU1;
        Swgen1        : NvU1;
        Ext           : NvU8;
        Dma           : NvU1;
        Sha           : NvU1;
        Memerr        : NvU1;
        Ctxsw_Error   : NvU1;
        Gdma          : NvU1;
        Icd           : NvU1;
        Iopmp         : NvU1;
        Core_Mismatch : NvU1;
        Se_Sap        : NvU1;
        Se_Pka        : NvU1;
        Se_Rng        : NvU1;
        Se_Keymover   : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_IRQMSET_Register use record
        Gptmr         at 0 range  0 ..  0;
        Wdtmr         at 0 range  1 ..  1;
        Mthd          at 0 range  2 ..  2;
        Ctxsw         at 0 range  3 ..  3;
        Halt          at 0 range  4 ..  4;
        Exterr        at 0 range  5 ..  5;
        Swgen0        at 0 range  6 ..  6;
        Swgen1        at 0 range  7 ..  7;
        Ext           at 0 range  8 .. 15;
        Dma           at 0 range 16 .. 16;
        Sha           at 0 range 17 .. 17;
        Memerr        at 0 range 18 .. 18;
        Ctxsw_Error   at 0 range 19 .. 19;
        Gdma          at 0 range 20 .. 20;
        Icd           at 0 range 22 .. 22;
        Iopmp         at 0 range 23 .. 23;
        Core_Mismatch at 0 range 24 .. 24;
        Se_Sap        at 0 range 25 .. 25;
        Se_Pka        at 0 range 26 .. 26;
        Se_Rng        at 0 range 27 .. 27;
        Se_Keymover   at 0 range 28 .. 28;
    end record;

    LW_PRGNLCL_RISCV_IRQMCLR_GPTMR_SET       : constant NvU1 := 16#1#;
    LW_PRGNLCL_RISCV_IRQMCLR_WDTMR_SET       : constant NvU1 := 16#1#;
    LW_PRGNLCL_RISCV_IRQMCLR_MTHD_SET        : constant NvU1 := 16#1#;
    LW_PRGNLCL_RISCV_IRQMCLR_CTXSW_SET       : constant NvU1 := 16#1#;
    LW_PRGNLCL_RISCV_IRQMCLR_HALT_SET        : constant NvU1 := 16#1#;
    LW_PRGNLCL_RISCV_IRQMCLR_EXTERR_SET      : constant NvU1 := 16#1#;
    LW_PRGNLCL_RISCV_IRQMCLR_SWGEN0_SET      : constant NvU1 := 16#1#;
    LW_PRGNLCL_RISCV_IRQMCLR_SWGEN1_SET      : constant NvU1 := 16#1#;
    LW_PRGNLCL_RISCV_IRQMCLR_DMA_SET         : constant NvU1 := 16#1#;
    LW_PRGNLCL_RISCV_IRQMCLR_SHA_SET         : constant NvU1 := 16#1#;
    LW_PRGNLCL_RISCV_IRQMCLR_MEMERR_SET      : constant NvU1 := 16#1#;
    LW_PRGNLCL_RISCV_IRQMCLR_GDMA_SET        : constant NvU1 := 16#1#;
    LW_PRGNLCL_RISCV_IRQMCLR_ICD_SET         : constant NvU1 := 16#1#;
    LW_PRGNLCL_RISCV_IRQMCLR_IOPMP_SET       : constant NvU1 := 16#1#;
    LW_PRGNLCL_RISCV_IRQMCLR_SE_SAP_SET      : constant NvU1 := 16#1#;
    LW_PRGNLCL_RISCV_IRQMCLR_SE_PKA_SET      : constant NvU1 := 16#1#;
    LW_PRGNLCL_RISCV_IRQMCLR_SE_RNG_SET      : constant NvU1 := 16#1#;
    LW_PRGNLCL_RISCV_IRQMCLR_SE_KEYMOVER_SET : constant NvU1 := 16#1#;
    LW_PRGNLCL_RISCV_IRQMCLR_EXT_EXTIRQ1_SET : constant      := 16#1#;
    LW_PRGNLCL_RISCV_IRQMCLR_EXT_EXTIRQ2_SET : constant      := 16#1#;
    LW_PRGNLCL_RISCV_IRQMCLR_EXT_EXTIRQ3_SET : constant      := 16#1#;
    LW_PRGNLCL_RISCV_IRQMCLR_EXT_EXTIRQ4_SET : constant      := 16#1#;
    LW_PRGNLCL_RISCV_IRQMCLR_EXT_EXTIRQ5_SET : constant      := 16#1#;
    LW_PRGNLCL_RISCV_IRQMCLR_EXT_EXTIRQ6_SET : constant      := 16#1#;
    LW_PRGNLCL_RISCV_IRQMCLR_EXT_EXTIRQ7_SET : constant      := 16#1#;
    LW_PRGNLCL_RISCV_IRQMCLR_EXT_EXTIRQ8_SET : constant      := 16#1#;

    type LW_PRGNLCL_RISCV_IRQMCLR_Register is record
        Gptmr       : NvU1;
        Wdtmr       : NvU1;
        Mthd        : NvU1;
        Ctxsw       : NvU1;
        Halt        : NvU1;
        Exterr      : NvU1;
        Swgen0      : NvU1;
        Swgen1      : NvU1;
        Ext         : NvU8;
        Dma         : NvU1;
        Sha         : NvU1;
        Memerr      : NvU1;
        Gdma        : NvU1;
        Icd         : NvU1;
        Iopmp       : NvU1;
        Se_Sap      : NvU1;
        Se_Pka      : NvU1;
        Se_Rng      : NvU1;
        Se_Keymover : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_IRQMCLR_Register use record
        Gptmr       at 0 range  0 ..  0;
        Wdtmr       at 0 range  1 ..  1;
        Mthd        at 0 range  2 ..  2;
        Ctxsw       at 0 range  3 ..  3;
        Halt        at 0 range  4 ..  4;
        Exterr      at 0 range  5 ..  5;
        Swgen0      at 0 range  6 ..  6;
        Swgen1      at 0 range  7 ..  7;
        Ext         at 0 range  8 .. 15;
        Dma         at 0 range 16 .. 16;
        Sha         at 0 range 17 .. 17;
        Memerr      at 0 range 18 .. 18;
        Gdma        at 0 range 20 .. 20;
        Icd         at 0 range 22 .. 22;
        Iopmp       at 0 range 23 .. 23;
        Se_Sap      at 0 range 25 .. 25;
        Se_Pka      at 0 range 26 .. 26;
        Se_Rng      at 0 range 27 .. 27;
        Se_Keymover at 0 range 28 .. 28;
    end record;

    type LW_PRGNLCL_RISCV_IRQMASK_GPTMR_Field is (GPTMR_UNSET, GPTMR_SET) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQMASK_GPTMR_Field use (GPTMR_UNSET => 16#0#, GPTMR_SET => 16#1#);
    type LW_PRGNLCL_RISCV_IRQMASK_WDTMR_Field is (WDTMR_UNSET, WDTMR_SET) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQMASK_WDTMR_Field use (WDTMR_UNSET => 16#0#, WDTMR_SET => 16#1#);
    type LW_PRGNLCL_RISCV_IRQMASK_MTHD_Field is (MTHD_UNSET, MTHD_SET) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQMASK_MTHD_Field use (MTHD_UNSET => 16#0#, MTHD_SET => 16#1#);
    type LW_PRGNLCL_RISCV_IRQMASK_CTXSW_Field is (CTXSW_UNSET, CTXSW_SET) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQMASK_CTXSW_Field use (CTXSW_UNSET => 16#0#, CTXSW_SET => 16#1#);
    type LW_PRGNLCL_RISCV_IRQMASK_HALT_Field is (HALT_UNSET, HALT_SET) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQMASK_HALT_Field use (HALT_UNSET => 16#0#, HALT_SET => 16#1#);
    type LW_PRGNLCL_RISCV_IRQMASK_EXTERR_Field is (EXTERR_UNSET, EXTERR_SET) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQMASK_EXTERR_Field use (EXTERR_UNSET => 16#0#, EXTERR_SET => 16#1#);
    type LW_PRGNLCL_RISCV_IRQMASK_SWGEN0_Field is (SWGEN0_UNSET, SWGEN0_SET) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQMASK_SWGEN0_Field use (SWGEN0_UNSET => 16#0#, SWGEN0_SET => 16#1#);
    type LW_PRGNLCL_RISCV_IRQMASK_SWGEN1_Field is (SWGEN1_UNSET, SWGEN1_SET) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQMASK_SWGEN1_Field use (SWGEN1_UNSET => 16#0#, SWGEN1_SET => 16#1#);
    LW_PRGNLCL_RISCV_IRQMASK_EXT_EXTIRQ1_UNSET : constant NvU1 := 16#0#;
    LW_PRGNLCL_RISCV_IRQMASK_EXT_EXTIRQ2_UNSET : constant NvU1 := 16#0#;
    LW_PRGNLCL_RISCV_IRQMASK_EXT_EXTIRQ3_UNSET : constant NvU1 := 16#0#;
    LW_PRGNLCL_RISCV_IRQMASK_EXT_EXTIRQ4_UNSET : constant NvU1 := 16#0#;
    LW_PRGNLCL_RISCV_IRQMASK_EXT_EXTIRQ5_UNSET : constant NvU1 := 16#0#;
    LW_PRGNLCL_RISCV_IRQMASK_EXT_EXTIRQ6_UNSET : constant NvU1 := 16#0#;
    LW_PRGNLCL_RISCV_IRQMASK_EXT_EXTIRQ7_UNSET : constant NvU1 := 16#0#;
    LW_PRGNLCL_RISCV_IRQMASK_EXT_EXTIRQ8_UNSET : constant NvU1 := 16#0#;
    type LW_PRGNLCL_RISCV_IRQMASK_DMA_Field is (DMA_UNSET, DMA_SET) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQMASK_DMA_Field use (DMA_UNSET => 16#0#, DMA_SET => 16#1#);
    type LW_PRGNLCL_RISCV_IRQMASK_SHA_Field is (SHA_UNSET, SHA_SET) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQMASK_SHA_Field use (SHA_UNSET => 16#0#, SHA_SET => 16#1#);
    type LW_PRGNLCL_RISCV_IRQMASK_MEMERR_Field is (MEMERR_UNSET, MEMERR_SET) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQMASK_MEMERR_Field use (MEMERR_UNSET => 16#0#, MEMERR_SET => 16#1#);
    type LW_PRGNLCL_RISCV_IRQMASK_CTXSW_ERROR_Field is (ERROR_DISABLE, ERROR_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQMASK_CTXSW_ERROR_Field use (ERROR_DISABLE => 16#0#, ERROR_ENABLE => 16#1#);
    type LW_PRGNLCL_RISCV_IRQMASK_GDMA_Field is (GDMA_DISABLE, GDMA_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQMASK_GDMA_Field use (GDMA_DISABLE => 16#0#, GDMA_ENABLE => 16#1#);
    type LW_PRGNLCL_RISCV_IRQMASK_ICD_Field is (ICD_UNSET, ICD_SET) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQMASK_ICD_Field use (ICD_UNSET => 16#0#, ICD_SET => 16#1#);
    type LW_PRGNLCL_RISCV_IRQMASK_IOPMP_Field is (IOPMP_UNSET, IOPMP_SET) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQMASK_IOPMP_Field use (IOPMP_UNSET => 16#0#, IOPMP_SET => 16#1#);
    type LW_PRGNLCL_RISCV_IRQMASK_CORE_MISMATCH_Field is (MISMATCH_DISABLE, MISMATCH_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQMASK_CORE_MISMATCH_Field use (MISMATCH_DISABLE => 16#0#, MISMATCH_ENABLE => 16#1#);
    type LW_PRGNLCL_RISCV_IRQMASK_SE_SAP_Field is (SAP_UNSET, SAP_SET) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQMASK_SE_SAP_Field use (SAP_UNSET => 16#0#, SAP_SET => 16#1#);
    type LW_PRGNLCL_RISCV_IRQMASK_SE_PKA_Field is (PKA_UNSET, PKA_SET) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQMASK_SE_PKA_Field use (PKA_UNSET => 16#0#, PKA_SET => 16#1#);
    type LW_PRGNLCL_RISCV_IRQMASK_SE_RNG_Field is (RNG_UNSET, RNG_SET) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQMASK_SE_RNG_Field use (RNG_UNSET => 16#0#, RNG_SET => 16#1#);
    type LW_PRGNLCL_RISCV_IRQMASK_SE_KEYMOVER_Field is (KEYMOVER_UNSET, KEYMOVER_SET) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQMASK_SE_KEYMOVER_Field use (KEYMOVER_UNSET => 16#0#, KEYMOVER_SET => 16#1#);
    LW_PRGNLCL_RISCV_IRQMASK_EXT_EXTIRQ1_SET : constant := 16#1#;
    LW_PRGNLCL_RISCV_IRQMASK_EXT_EXTIRQ2_SET : constant := 16#1#;
    LW_PRGNLCL_RISCV_IRQMASK_EXT_EXTIRQ3_SET : constant := 16#1#;
    LW_PRGNLCL_RISCV_IRQMASK_EXT_EXTIRQ4_SET : constant := 16#1#;
    LW_PRGNLCL_RISCV_IRQMASK_EXT_EXTIRQ5_SET : constant := 16#1#;
    LW_PRGNLCL_RISCV_IRQMASK_EXT_EXTIRQ6_SET : constant := 16#1#;
    LW_PRGNLCL_RISCV_IRQMASK_EXT_EXTIRQ7_SET : constant := 16#1#;
    LW_PRGNLCL_RISCV_IRQMASK_EXT_EXTIRQ8_SET : constant := 16#1#;

    type LW_PRGNLCL_RISCV_IRQMASK_Register is record
        Gptmr         : LW_PRGNLCL_RISCV_IRQMASK_GPTMR_Field;
        Wdtmr         : LW_PRGNLCL_RISCV_IRQMASK_WDTMR_Field;
        Mthd          : LW_PRGNLCL_RISCV_IRQMASK_MTHD_Field;
        Ctxsw         : LW_PRGNLCL_RISCV_IRQMASK_CTXSW_Field;
        Halt          : LW_PRGNLCL_RISCV_IRQMASK_HALT_Field;
        Exterr        : LW_PRGNLCL_RISCV_IRQMASK_EXTERR_Field;
        Swgen0        : LW_PRGNLCL_RISCV_IRQMASK_SWGEN0_Field;
        Swgen1        : LW_PRGNLCL_RISCV_IRQMASK_SWGEN1_Field;
        Ext_Extirq1   : NvU1;
        Ext_Extirq2   : NvU1;
        Ext_Extirq3   : NvU1;
        Ext_Extirq4   : NvU1;
        Ext_Extirq5   : NvU1;
        Ext_Extirq6   : NvU1;
        Ext_Extirq7   : NvU1;
        Ext_Extirq8   : NvU1;
        Dma           : LW_PRGNLCL_RISCV_IRQMASK_DMA_Field;
        Sha           : LW_PRGNLCL_RISCV_IRQMASK_SHA_Field;
        Memerr        : LW_PRGNLCL_RISCV_IRQMASK_MEMERR_Field;
        Ctxsw_Error   : LW_PRGNLCL_RISCV_IRQMASK_CTXSW_ERROR_Field;
        Gdma          : LW_PRGNLCL_RISCV_IRQMASK_GDMA_Field;
        Icd           : LW_PRGNLCL_RISCV_IRQMASK_ICD_Field;
        Iopmp         : LW_PRGNLCL_RISCV_IRQMASK_IOPMP_Field;
        Core_Mismatch : LW_PRGNLCL_RISCV_IRQMASK_CORE_MISMATCH_Field;
        Se_Sap        : LW_PRGNLCL_RISCV_IRQMASK_SE_SAP_Field;
        Se_Pka        : LW_PRGNLCL_RISCV_IRQMASK_SE_PKA_Field;
        Se_Rng        : LW_PRGNLCL_RISCV_IRQMASK_SE_RNG_Field;
        Se_Keymover   : LW_PRGNLCL_RISCV_IRQMASK_SE_KEYMOVER_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_IRQMASK_Register use record
        Gptmr         at 0 range  0 ..  0;
        Wdtmr         at 0 range  1 ..  1;
        Mthd          at 0 range  2 ..  2;
        Ctxsw         at 0 range  3 ..  3;
        Halt          at 0 range  4 ..  4;
        Exterr        at 0 range  5 ..  5;
        Swgen0        at 0 range  6 ..  6;
        Swgen1        at 0 range  7 ..  7;
        Ext_Extirq1   at 0 range  8 ..  8;
        Ext_Extirq2   at 0 range  9 ..  9;
        Ext_Extirq3   at 0 range 10 .. 10;
        Ext_Extirq4   at 0 range 11 .. 11;
        Ext_Extirq5   at 0 range 12 .. 12;
        Ext_Extirq6   at 0 range 13 .. 13;
        Ext_Extirq7   at 0 range 14 .. 14;
        Ext_Extirq8   at 0 range 15 .. 15;
        Dma           at 0 range 16 .. 16;
        Sha           at 0 range 17 .. 17;
        Memerr        at 0 range 18 .. 18;
        Ctxsw_Error   at 0 range 19 .. 19;
        Gdma          at 0 range 20 .. 20;
        Icd           at 0 range 22 .. 22;
        Iopmp         at 0 range 23 .. 23;
        Core_Mismatch at 0 range 24 .. 24;
        Se_Sap        at 0 range 25 .. 25;
        Se_Pka        at 0 range 26 .. 26;
        Se_Rng        at 0 range 27 .. 27;
        Se_Keymover   at 0 range 28 .. 28;
    end record;

    type LW_PRGNLCL_RISCV_IRQDEST_GPTMR_Field is (GPTMR_RISCV, GPTMR_HOST) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQDEST_GPTMR_Field use (GPTMR_RISCV => 16#0#, GPTMR_HOST => 16#1#);
    type LW_PRGNLCL_RISCV_IRQDEST_WDTMR_Field is (WDTMR_RISCV, WDTMR_HOST) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQDEST_WDTMR_Field use (WDTMR_RISCV => 16#0#, WDTMR_HOST => 16#1#);
    type LW_PRGNLCL_RISCV_IRQDEST_MTHD_Field is (MTHD_RISCV, MTHD_HOST) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQDEST_MTHD_Field use (MTHD_RISCV => 16#0#, MTHD_HOST => 16#1#);
    type LW_PRGNLCL_RISCV_IRQDEST_CTXSW_Field is (CTXSW_RISCV, CTXSW_HOST) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQDEST_CTXSW_Field use (CTXSW_RISCV => 16#0#, CTXSW_HOST => 16#1#);
    type LW_PRGNLCL_RISCV_IRQDEST_HALT_Field is (HALT_RISCV, HALT_HOST) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQDEST_HALT_Field use (HALT_RISCV => 16#0#, HALT_HOST => 16#1#);
    type LW_PRGNLCL_RISCV_IRQDEST_EXTERR_Field is (EXTERR_RISCV, EXTERR_HOST) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQDEST_EXTERR_Field use (EXTERR_RISCV => 16#0#, EXTERR_HOST => 16#1#);
    type LW_PRGNLCL_RISCV_IRQDEST_SWGEN0_Field is (SWGEN0_RISCV, SWGEN0_HOST) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQDEST_SWGEN0_Field use (SWGEN0_RISCV => 16#0#, SWGEN0_HOST => 16#1#);
    type LW_PRGNLCL_RISCV_IRQDEST_SWGEN1_Field is (SWGEN1_RISCV, SWGEN1_HOST) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQDEST_SWGEN1_Field use (SWGEN1_RISCV => 16#0#, SWGEN1_HOST => 16#1#);
    type LW_PRGNLCL_RISCV_IRQDEST_EXT_EXTIRQ1_Field is (EXTIRQ1_RISCV, EXTIRQ1_HOST) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQDEST_EXT_EXTIRQ1_Field use (EXTIRQ1_RISCV => 16#0#, EXTIRQ1_HOST => 16#1#);
    type LW_PRGNLCL_RISCV_IRQDEST_EXT_EXTIRQ2_Field is (EXTIRQ2_RISCV, EXTIRQ2_HOST) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQDEST_EXT_EXTIRQ2_Field use (EXTIRQ2_RISCV => 16#0#, EXTIRQ2_HOST => 16#1#);
    type LW_PRGNLCL_RISCV_IRQDEST_EXT_EXTIRQ3_Field is (EXTIRQ3_RISCV, EXTIRQ3_HOST) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQDEST_EXT_EXTIRQ3_Field use (EXTIRQ3_RISCV => 16#0#, EXTIRQ3_HOST => 16#1#);
    type LW_PRGNLCL_RISCV_IRQDEST_EXT_EXTIRQ4_Field is (EXTIRQ4_RISCV, EXTIRQ4_HOST) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQDEST_EXT_EXTIRQ4_Field use (EXTIRQ4_RISCV => 16#0#, EXTIRQ4_HOST => 16#1#);
    type LW_PRGNLCL_RISCV_IRQDEST_EXT_EXTIRQ5_Field is (EXTIRQ5_RISCV, EXTIRQ5_HOST) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQDEST_EXT_EXTIRQ5_Field use (EXTIRQ5_RISCV => 16#0#, EXTIRQ5_HOST => 16#1#);
    type LW_PRGNLCL_RISCV_IRQDEST_EXT_EXTIRQ6_Field is (EXTIRQ6_RISCV, EXTIRQ6_HOST) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQDEST_EXT_EXTIRQ6_Field use (EXTIRQ6_RISCV => 16#0#, EXTIRQ6_HOST => 16#1#);
    type LW_PRGNLCL_RISCV_IRQDEST_EXT_EXTIRQ7_Field is (EXTIRQ7_RISCV, EXTIRQ7_HOST) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQDEST_EXT_EXTIRQ7_Field use (EXTIRQ7_RISCV => 16#0#, EXTIRQ7_HOST => 16#1#);
    type LW_PRGNLCL_RISCV_IRQDEST_EXT_EXTIRQ8_Field is (EXTIRQ8_RISCV, EXTIRQ8_HOST) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQDEST_EXT_EXTIRQ8_Field use (EXTIRQ8_RISCV => 16#0#, EXTIRQ8_HOST => 16#1#);
    type LW_PRGNLCL_RISCV_IRQDEST_DMA_Field is (DMA_RISCV, DMA_HOST) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQDEST_DMA_Field use (DMA_RISCV => 16#0#, DMA_HOST => 16#1#);
    type LW_PRGNLCL_RISCV_IRQDEST_SHA_Field is (SHA_RISCV, SHA_HOST) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQDEST_SHA_Field use (SHA_RISCV => 16#0#, SHA_HOST => 16#1#);
    type LW_PRGNLCL_RISCV_IRQDEST_MEMERR_Field is (MEMERR_RISCV, MEMERR_HOST) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQDEST_MEMERR_Field use (MEMERR_RISCV => 16#0#, MEMERR_HOST => 16#1#);
    type LW_PRGNLCL_RISCV_IRQDEST_CTXSW_ERROR_Field is (ERROR_RISCV, ERROR_HOST) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQDEST_CTXSW_ERROR_Field use (ERROR_RISCV => 16#0#, ERROR_HOST => 16#1#);
    type LW_PRGNLCL_RISCV_IRQDEST_GDMA_Field is (GDMA_RISCV, GDMA_HOST) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQDEST_GDMA_Field use (GDMA_RISCV => 16#0#, GDMA_HOST => 16#1#);
    type LW_PRGNLCL_RISCV_IRQDEST_ICD_Field is (ICD_RISCV, ICD_HOST) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQDEST_ICD_Field use (ICD_RISCV => 16#0#, ICD_HOST => 16#1#);
    type LW_PRGNLCL_RISCV_IRQDEST_IOPMP_Field is (IOPMP_RISCV, IOPMP_HOST) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQDEST_IOPMP_Field use (IOPMP_RISCV => 16#0#, IOPMP_HOST => 16#1#);
    type LW_PRGNLCL_RISCV_IRQDEST_CORE_MISMATCH_Field is (MISMATCH_RISCV, MISMATCH_HOST) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQDEST_CORE_MISMATCH_Field use (MISMATCH_RISCV => 16#0#, MISMATCH_HOST => 16#1#);
    type LW_PRGNLCL_RISCV_IRQDEST_SE_SAP_Field is (SAP_RISCV, SAP_HOST) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQDEST_SE_SAP_Field use (SAP_RISCV => 16#0#, SAP_HOST => 16#1#);
    type LW_PRGNLCL_RISCV_IRQDEST_SE_PKA_Field is (PKA_RISCV, PKA_HOST) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQDEST_SE_PKA_Field use (PKA_RISCV => 16#0#, PKA_HOST => 16#1#);
    type LW_PRGNLCL_RISCV_IRQDEST_SE_RNG_Field is (RNG_RISCV, RNG_HOST) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQDEST_SE_RNG_Field use (RNG_RISCV => 16#0#, RNG_HOST => 16#1#);
    type LW_PRGNLCL_RISCV_IRQDEST_SE_KEYMOVER_Field is (KEYMOVER_RISCV, KEYMOVER_HOST) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQDEST_SE_KEYMOVER_Field use (KEYMOVER_RISCV => 16#0#, KEYMOVER_HOST => 16#1#);

    type LW_PRGNLCL_RISCV_IRQDEST_Register is record
        Gptmr         : LW_PRGNLCL_RISCV_IRQDEST_GPTMR_Field;
        Wdtmr         : LW_PRGNLCL_RISCV_IRQDEST_WDTMR_Field;
        Mthd          : LW_PRGNLCL_RISCV_IRQDEST_MTHD_Field;
        Ctxsw         : LW_PRGNLCL_RISCV_IRQDEST_CTXSW_Field;
        Halt          : LW_PRGNLCL_RISCV_IRQDEST_HALT_Field;
        Exterr        : LW_PRGNLCL_RISCV_IRQDEST_EXTERR_Field;
        Swgen0        : LW_PRGNLCL_RISCV_IRQDEST_SWGEN0_Field;
        Swgen1        : LW_PRGNLCL_RISCV_IRQDEST_SWGEN1_Field;
        Ext_Extirq1   : LW_PRGNLCL_RISCV_IRQDEST_EXT_EXTIRQ1_Field;
        Ext_Extirq2   : LW_PRGNLCL_RISCV_IRQDEST_EXT_EXTIRQ2_Field;
        Ext_Extirq3   : LW_PRGNLCL_RISCV_IRQDEST_EXT_EXTIRQ3_Field;
        Ext_Extirq4   : LW_PRGNLCL_RISCV_IRQDEST_EXT_EXTIRQ4_Field;
        Ext_Extirq5   : LW_PRGNLCL_RISCV_IRQDEST_EXT_EXTIRQ5_Field;
        Ext_Extirq6   : LW_PRGNLCL_RISCV_IRQDEST_EXT_EXTIRQ6_Field;
        Ext_Extirq7   : LW_PRGNLCL_RISCV_IRQDEST_EXT_EXTIRQ7_Field;
        Ext_Extirq8   : LW_PRGNLCL_RISCV_IRQDEST_EXT_EXTIRQ8_Field;
        Dma           : LW_PRGNLCL_RISCV_IRQDEST_DMA_Field;
        Sha           : LW_PRGNLCL_RISCV_IRQDEST_SHA_Field;
        Memerr        : LW_PRGNLCL_RISCV_IRQDEST_MEMERR_Field;
        Ctxsw_Error   : LW_PRGNLCL_RISCV_IRQDEST_CTXSW_ERROR_Field;
        Gdma          : LW_PRGNLCL_RISCV_IRQDEST_GDMA_Field;
        Icd           : LW_PRGNLCL_RISCV_IRQDEST_ICD_Field;
        Iopmp         : LW_PRGNLCL_RISCV_IRQDEST_IOPMP_Field;
        Core_Mismatch : LW_PRGNLCL_RISCV_IRQDEST_CORE_MISMATCH_Field;
        Se_Sap        : LW_PRGNLCL_RISCV_IRQDEST_SE_SAP_Field;
        Se_Pka        : LW_PRGNLCL_RISCV_IRQDEST_SE_PKA_Field;
        Se_Rng        : LW_PRGNLCL_RISCV_IRQDEST_SE_RNG_Field;
        Se_Keymover   : LW_PRGNLCL_RISCV_IRQDEST_SE_KEYMOVER_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_IRQDEST_Register use record
        Gptmr         at 0 range  0 ..  0;
        Wdtmr         at 0 range  1 ..  1;
        Mthd          at 0 range  2 ..  2;
        Ctxsw         at 0 range  3 ..  3;
        Halt          at 0 range  4 ..  4;
        Exterr        at 0 range  5 ..  5;
        Swgen0        at 0 range  6 ..  6;
        Swgen1        at 0 range  7 ..  7;
        Ext_Extirq1   at 0 range  8 ..  8;
        Ext_Extirq2   at 0 range  9 ..  9;
        Ext_Extirq3   at 0 range 10 .. 10;
        Ext_Extirq4   at 0 range 11 .. 11;
        Ext_Extirq5   at 0 range 12 .. 12;
        Ext_Extirq6   at 0 range 13 .. 13;
        Ext_Extirq7   at 0 range 14 .. 14;
        Ext_Extirq8   at 0 range 15 .. 15;
        Dma           at 0 range 16 .. 16;
        Sha           at 0 range 17 .. 17;
        Memerr        at 0 range 18 .. 18;
        Ctxsw_Error   at 0 range 19 .. 19;
        Gdma          at 0 range 20 .. 20;
        Icd           at 0 range 22 .. 22;
        Iopmp         at 0 range 23 .. 23;
        Core_Mismatch at 0 range 24 .. 24;
        Se_Sap        at 0 range 25 .. 25;
        Se_Pka        at 0 range 26 .. 26;
        Se_Rng        at 0 range 27 .. 27;
        Se_Keymover   at 0 range 28 .. 28;
    end record;

    type LW_PRGNLCL_RISCV_IRQTYPE_GPTMR_Field is (GPTMR_HOST_NORMAL, GPTMR_HOST_NONSTALL) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQTYPE_GPTMR_Field use (GPTMR_HOST_NORMAL => 16#0#, GPTMR_HOST_NONSTALL => 16#1#);
    type LW_PRGNLCL_RISCV_IRQTYPE_WDTMR_Field is (WDTMR_HOST_NORMAL, WDTMR_HOST_NONSTALL) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQTYPE_WDTMR_Field use (WDTMR_HOST_NORMAL => 16#0#, WDTMR_HOST_NONSTALL => 16#1#);
    type LW_PRGNLCL_RISCV_IRQTYPE_MTHD_Field is (MTHD_HOST_NORMAL, MTHD_HOST_NONSTALL) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQTYPE_MTHD_Field use (MTHD_HOST_NORMAL => 16#0#, MTHD_HOST_NONSTALL => 16#1#);
    type LW_PRGNLCL_RISCV_IRQTYPE_CTXSW_Field is (CTXSW_HOST_NORMAL, CTXSW_HOST_NONSTALL) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQTYPE_CTXSW_Field use (CTXSW_HOST_NORMAL => 16#0#, CTXSW_HOST_NONSTALL => 16#1#);
    type LW_PRGNLCL_RISCV_IRQTYPE_HALT_Field is (HALT_HOST_NORMAL, HALT_HOST_NONSTALL) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQTYPE_HALT_Field use (HALT_HOST_NORMAL => 16#0#, HALT_HOST_NONSTALL => 16#1#);
    type LW_PRGNLCL_RISCV_IRQTYPE_EXTERR_Field is (EXTERR_HOST_NORMAL, EXTERR_HOST_NONSTALL) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQTYPE_EXTERR_Field use (EXTERR_HOST_NORMAL => 16#0#, EXTERR_HOST_NONSTALL => 16#1#);
    type LW_PRGNLCL_RISCV_IRQTYPE_SWGEN0_Field is (SWGEN0_HOST_NORMAL, SWGEN0_HOST_NONSTALL) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQTYPE_SWGEN0_Field use (SWGEN0_HOST_NORMAL => 16#0#, SWGEN0_HOST_NONSTALL => 16#1#);
    type LW_PRGNLCL_RISCV_IRQTYPE_SWGEN1_Field is (SWGEN1_HOST_NORMAL, SWGEN1_HOST_NONSTALL) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQTYPE_SWGEN1_Field use (SWGEN1_HOST_NORMAL => 16#0#, SWGEN1_HOST_NONSTALL => 16#1#);
    type LW_PRGNLCL_RISCV_IRQTYPE_EXT_EXTIRQ1_Field is (EXTIRQ1_HOST_NORMAL, EXTIRQ1_HOST_NONSTALL) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQTYPE_EXT_EXTIRQ1_Field use (EXTIRQ1_HOST_NORMAL => 16#0#, EXTIRQ1_HOST_NONSTALL => 16#1#);
    type LW_PRGNLCL_RISCV_IRQTYPE_EXT_EXTIRQ2_Field is (EXTIRQ2_HOST_NORMAL, EXTIRQ2_HOST_NONSTALL) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQTYPE_EXT_EXTIRQ2_Field use (EXTIRQ2_HOST_NORMAL => 16#0#, EXTIRQ2_HOST_NONSTALL => 16#1#);
    type LW_PRGNLCL_RISCV_IRQTYPE_EXT_EXTIRQ3_Field is (EXTIRQ3_HOST_NORMAL, EXTIRQ3_HOST_NONSTALL) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQTYPE_EXT_EXTIRQ3_Field use (EXTIRQ3_HOST_NORMAL => 16#0#, EXTIRQ3_HOST_NONSTALL => 16#1#);
    type LW_PRGNLCL_RISCV_IRQTYPE_EXT_EXTIRQ4_Field is (EXTIRQ4_HOST_NORMAL, EXTIRQ4_HOST_NONSTALL) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQTYPE_EXT_EXTIRQ4_Field use (EXTIRQ4_HOST_NORMAL => 16#0#, EXTIRQ4_HOST_NONSTALL => 16#1#);
    type LW_PRGNLCL_RISCV_IRQTYPE_EXT_EXTIRQ5_Field is (EXTIRQ5_HOST_NORMAL, EXTIRQ5_HOST_NONSTALL) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQTYPE_EXT_EXTIRQ5_Field use (EXTIRQ5_HOST_NORMAL => 16#0#, EXTIRQ5_HOST_NONSTALL => 16#1#);
    type LW_PRGNLCL_RISCV_IRQTYPE_EXT_EXTIRQ6_Field is (EXTIRQ6_HOST_NORMAL, EXTIRQ6_HOST_NONSTALL) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQTYPE_EXT_EXTIRQ6_Field use (EXTIRQ6_HOST_NORMAL => 16#0#, EXTIRQ6_HOST_NONSTALL => 16#1#);
    type LW_PRGNLCL_RISCV_IRQTYPE_EXT_EXTIRQ7_Field is (EXTIRQ7_HOST_NORMAL, EXTIRQ7_HOST_NONSTALL) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQTYPE_EXT_EXTIRQ7_Field use (EXTIRQ7_HOST_NORMAL => 16#0#, EXTIRQ7_HOST_NONSTALL => 16#1#);
    type LW_PRGNLCL_RISCV_IRQTYPE_EXT_EXTIRQ8_Field is (EXTIRQ8_HOST_NORMAL, EXTIRQ8_HOST_NONSTALL) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQTYPE_EXT_EXTIRQ8_Field use (EXTIRQ8_HOST_NORMAL => 16#0#, EXTIRQ8_HOST_NONSTALL => 16#1#);
    type LW_PRGNLCL_RISCV_IRQTYPE_DMA_Field is (DMA_HOST_NORMAL, DMA_HOST_NONSTALL) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQTYPE_DMA_Field use (DMA_HOST_NORMAL => 16#0#, DMA_HOST_NONSTALL => 16#1#);
    type LW_PRGNLCL_RISCV_IRQTYPE_SHA_Field is (SHA_HOST_NORMAL, SHA_HOST_NONSTALL) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQTYPE_SHA_Field use (SHA_HOST_NORMAL => 16#0#, SHA_HOST_NONSTALL => 16#1#);
    type LW_PRGNLCL_RISCV_IRQTYPE_MEMERR_Field is (MEMERR_HOST_NORMAL, MEMERR_HOST_NONSTALL) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQTYPE_MEMERR_Field use (MEMERR_HOST_NORMAL => 16#0#, MEMERR_HOST_NONSTALL => 16#1#);
    type LW_PRGNLCL_RISCV_IRQTYPE_CTXSW_ERROR_Field is (ERROR_HOST_NORMAL, ERROR_HOST_NONSTALL) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQTYPE_CTXSW_ERROR_Field use (ERROR_HOST_NORMAL => 16#0#, ERROR_HOST_NONSTALL => 16#1#);
    type LW_PRGNLCL_RISCV_IRQTYPE_GDMA_Field is (GDMA_HOST_NORMAL, GDMA_HOST_NONSTALL) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQTYPE_GDMA_Field use (GDMA_HOST_NORMAL => 16#0#, GDMA_HOST_NONSTALL => 16#1#);
    type LW_PRGNLCL_RISCV_IRQTYPE_ICD_Field is (ICD_HOST_NORMAL, ICD_HOST_NONSTALL) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQTYPE_ICD_Field use (ICD_HOST_NORMAL => 16#0#, ICD_HOST_NONSTALL => 16#1#);
    type LW_PRGNLCL_RISCV_IRQTYPE_IOPMP_Field is (IOPMP_HOST_NORMAL, IOPMP_HOST_NONSTALL) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQTYPE_IOPMP_Field use (IOPMP_HOST_NORMAL => 16#0#, IOPMP_HOST_NONSTALL => 16#1#);
    type LW_PRGNLCL_RISCV_IRQTYPE_CORE_MISMATCH_Field is (MISMATCH_HOST_NORMAL, MISMATCH_HOST_NONSTALL) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQTYPE_CORE_MISMATCH_Field use (MISMATCH_HOST_NORMAL => 16#0#, MISMATCH_HOST_NONSTALL => 16#1#);
    type LW_PRGNLCL_RISCV_IRQTYPE_SE_SAP_Field is (SAP_HOST_NORMAL, SAP_HOST_NONSTALL) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQTYPE_SE_SAP_Field use (SAP_HOST_NORMAL => 16#0#, SAP_HOST_NONSTALL => 16#1#);
    type LW_PRGNLCL_RISCV_IRQTYPE_SE_PKA_Field is (PKA_HOST_NORMAL, PKA_HOST_NONSTALL) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQTYPE_SE_PKA_Field use (PKA_HOST_NORMAL => 16#0#, PKA_HOST_NONSTALL => 16#1#);
    type LW_PRGNLCL_RISCV_IRQTYPE_SE_RNG_Field is (RNG_HOST_NORMAL, RNG_HOST_NONSTALL) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQTYPE_SE_RNG_Field use (RNG_HOST_NORMAL => 16#0#, RNG_HOST_NONSTALL => 16#1#);
    type LW_PRGNLCL_RISCV_IRQTYPE_SE_KEYMOVER_Field is (KEYMOVER_HOST_NORMAL, KEYMOVER_HOST_NONSTALL) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQTYPE_SE_KEYMOVER_Field use (KEYMOVER_HOST_NORMAL => 16#0#, KEYMOVER_HOST_NONSTALL => 16#1#);

    type LW_PRGNLCL_RISCV_IRQTYPE_Register is record
        Gptmr         : LW_PRGNLCL_RISCV_IRQTYPE_GPTMR_Field;
        Wdtmr         : LW_PRGNLCL_RISCV_IRQTYPE_WDTMR_Field;
        Mthd          : LW_PRGNLCL_RISCV_IRQTYPE_MTHD_Field;
        Ctxsw         : LW_PRGNLCL_RISCV_IRQTYPE_CTXSW_Field;
        Halt          : LW_PRGNLCL_RISCV_IRQTYPE_HALT_Field;
        Exterr        : LW_PRGNLCL_RISCV_IRQTYPE_EXTERR_Field;
        Swgen0        : LW_PRGNLCL_RISCV_IRQTYPE_SWGEN0_Field;
        Swgen1        : LW_PRGNLCL_RISCV_IRQTYPE_SWGEN1_Field;
        Ext_Extirq1   : LW_PRGNLCL_RISCV_IRQTYPE_EXT_EXTIRQ1_Field;
        Ext_Extirq2   : LW_PRGNLCL_RISCV_IRQTYPE_EXT_EXTIRQ2_Field;
        Ext_Extirq3   : LW_PRGNLCL_RISCV_IRQTYPE_EXT_EXTIRQ3_Field;
        Ext_Extirq4   : LW_PRGNLCL_RISCV_IRQTYPE_EXT_EXTIRQ4_Field;
        Ext_Extirq5   : LW_PRGNLCL_RISCV_IRQTYPE_EXT_EXTIRQ5_Field;
        Ext_Extirq6   : LW_PRGNLCL_RISCV_IRQTYPE_EXT_EXTIRQ6_Field;
        Ext_Extirq7   : LW_PRGNLCL_RISCV_IRQTYPE_EXT_EXTIRQ7_Field;
        Ext_Extirq8   : LW_PRGNLCL_RISCV_IRQTYPE_EXT_EXTIRQ8_Field;
        Dma           : LW_PRGNLCL_RISCV_IRQTYPE_DMA_Field;
        Sha           : LW_PRGNLCL_RISCV_IRQTYPE_SHA_Field;
        Memerr        : LW_PRGNLCL_RISCV_IRQTYPE_MEMERR_Field;
        Ctxsw_Error   : LW_PRGNLCL_RISCV_IRQTYPE_CTXSW_ERROR_Field;
        Gdma          : LW_PRGNLCL_RISCV_IRQTYPE_GDMA_Field;
        Icd           : LW_PRGNLCL_RISCV_IRQTYPE_ICD_Field;
        Iopmp         : LW_PRGNLCL_RISCV_IRQTYPE_IOPMP_Field;
        Core_Mismatch : LW_PRGNLCL_RISCV_IRQTYPE_CORE_MISMATCH_Field;
        Se_Sap        : LW_PRGNLCL_RISCV_IRQTYPE_SE_SAP_Field;
        Se_Pka        : LW_PRGNLCL_RISCV_IRQTYPE_SE_PKA_Field;
        Se_Rng        : LW_PRGNLCL_RISCV_IRQTYPE_SE_RNG_Field;
        Se_Keymover   : LW_PRGNLCL_RISCV_IRQTYPE_SE_KEYMOVER_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_IRQTYPE_Register use record
        Gptmr         at 0 range  0 ..  0;
        Wdtmr         at 0 range  1 ..  1;
        Mthd          at 0 range  2 ..  2;
        Ctxsw         at 0 range  3 ..  3;
        Halt          at 0 range  4 ..  4;
        Exterr        at 0 range  5 ..  5;
        Swgen0        at 0 range  6 ..  6;
        Swgen1        at 0 range  7 ..  7;
        Ext_Extirq1   at 0 range  8 ..  8;
        Ext_Extirq2   at 0 range  9 ..  9;
        Ext_Extirq3   at 0 range 10 .. 10;
        Ext_Extirq4   at 0 range 11 .. 11;
        Ext_Extirq5   at 0 range 12 .. 12;
        Ext_Extirq6   at 0 range 13 .. 13;
        Ext_Extirq7   at 0 range 14 .. 14;
        Ext_Extirq8   at 0 range 15 .. 15;
        Dma           at 0 range 16 .. 16;
        Sha           at 0 range 17 .. 17;
        Memerr        at 0 range 18 .. 18;
        Ctxsw_Error   at 0 range 19 .. 19;
        Gdma          at 0 range 20 .. 20;
        Icd           at 0 range 22 .. 22;
        Iopmp         at 0 range 23 .. 23;
        Core_Mismatch at 0 range 24 .. 24;
        Se_Sap        at 0 range 25 .. 25;
        Se_Pka        at 0 range 26 .. 26;
        Se_Rng        at 0 range 27 .. 27;
        Se_Keymover   at 0 range 28 .. 28;
    end record;

    type LW_PRGNLCL_RISCV_IRQDELEG_GPTMR_Field is (GPTMR_RISCV_MEIP, GPTMR_RISCV_SEIP) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQDELEG_GPTMR_Field use (GPTMR_RISCV_MEIP => 16#0#, GPTMR_RISCV_SEIP => 16#1#);
    type LW_PRGNLCL_RISCV_IRQDELEG_WDTMR_Field is (WDTMR_RISCV_MEIP, WDTMR_RISCV_SEIP) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQDELEG_WDTMR_Field use (WDTMR_RISCV_MEIP => 16#0#, WDTMR_RISCV_SEIP => 16#1#);
    type LW_PRGNLCL_RISCV_IRQDELEG_MTHD_Field is (MTHD_RISCV_MEIP, MTHD_RISCV_SEIP) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQDELEG_MTHD_Field use (MTHD_RISCV_MEIP => 16#0#, MTHD_RISCV_SEIP => 16#1#);
    type LW_PRGNLCL_RISCV_IRQDELEG_CTXSW_Field is (CTXSW_RISCV_MEIP, CTXSW_RISCV_SEIP) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQDELEG_CTXSW_Field use (CTXSW_RISCV_MEIP => 16#0#, CTXSW_RISCV_SEIP => 16#1#);
    type LW_PRGNLCL_RISCV_IRQDELEG_HALT_Field is (HALT_RISCV_MEIP, HALT_RISCV_SEIP) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQDELEG_HALT_Field use (HALT_RISCV_MEIP => 16#0#, HALT_RISCV_SEIP => 16#1#);
    type LW_PRGNLCL_RISCV_IRQDELEG_EXTERR_Field is (EXTERR_RISCV_MEIP, EXTERR_RISCV_SEIP) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQDELEG_EXTERR_Field use (EXTERR_RISCV_MEIP => 16#0#, EXTERR_RISCV_SEIP => 16#1#);
    type LW_PRGNLCL_RISCV_IRQDELEG_SWGEN0_Field is (SWGEN0_RISCV_MEIP, SWGEN0_RISCV_SEIP) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQDELEG_SWGEN0_Field use (SWGEN0_RISCV_MEIP => 16#0#, SWGEN0_RISCV_SEIP => 16#1#);
    type LW_PRGNLCL_RISCV_IRQDELEG_SWGEN1_Field is (SWGEN1_RISCV_MEIP, SWGEN1_RISCV_SEIP) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQDELEG_SWGEN1_Field use (SWGEN1_RISCV_MEIP => 16#0#, SWGEN1_RISCV_SEIP => 16#1#);
    type LW_PRGNLCL_RISCV_IRQDELEG_EXT_EXTIRQ1_Field is (EXTIRQ1_RISCV_MEIP, EXTIRQ1_RISCV_SEIP) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQDELEG_EXT_EXTIRQ1_Field use (EXTIRQ1_RISCV_MEIP => 16#0#, EXTIRQ1_RISCV_SEIP => 16#1#);
    type LW_PRGNLCL_RISCV_IRQDELEG_EXT_EXTIRQ2_Field is (EXTIRQ2_RISCV_MEIP, EXTIRQ2_RISCV_SEIP) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQDELEG_EXT_EXTIRQ2_Field use (EXTIRQ2_RISCV_MEIP => 16#0#, EXTIRQ2_RISCV_SEIP => 16#1#);
    type LW_PRGNLCL_RISCV_IRQDELEG_EXT_EXTIRQ3_Field is (EXTIRQ3_RISCV_MEIP, EXTIRQ3_RISCV_SEIP) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQDELEG_EXT_EXTIRQ3_Field use (EXTIRQ3_RISCV_MEIP => 16#0#, EXTIRQ3_RISCV_SEIP => 16#1#);
    type LW_PRGNLCL_RISCV_IRQDELEG_EXT_EXTIRQ4_Field is (EXTIRQ4_RISCV_MEIP, EXTIRQ4_RISCV_SEIP) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQDELEG_EXT_EXTIRQ4_Field use (EXTIRQ4_RISCV_MEIP => 16#0#, EXTIRQ4_RISCV_SEIP => 16#1#);
    type LW_PRGNLCL_RISCV_IRQDELEG_EXT_EXTIRQ5_Field is (EXTIRQ5_RISCV_MEIP, EXTIRQ5_RISCV_SEIP) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQDELEG_EXT_EXTIRQ5_Field use (EXTIRQ5_RISCV_MEIP => 16#0#, EXTIRQ5_RISCV_SEIP => 16#1#);
    type LW_PRGNLCL_RISCV_IRQDELEG_EXT_EXTIRQ6_Field is (EXTIRQ6_RISCV_MEIP, EXTIRQ6_RISCV_SEIP) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQDELEG_EXT_EXTIRQ6_Field use (EXTIRQ6_RISCV_MEIP => 16#0#, EXTIRQ6_RISCV_SEIP => 16#1#);
    type LW_PRGNLCL_RISCV_IRQDELEG_EXT_EXTIRQ7_Field is (EXTIRQ7_RISCV_MEIP, EXTIRQ7_RISCV_SEIP) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQDELEG_EXT_EXTIRQ7_Field use (EXTIRQ7_RISCV_MEIP => 16#0#, EXTIRQ7_RISCV_SEIP => 16#1#);
    type LW_PRGNLCL_RISCV_IRQDELEG_EXT_EXTIRQ8_Field is (EXTIRQ8_RISCV_MEIP, EXTIRQ8_RISCV_SEIP) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQDELEG_EXT_EXTIRQ8_Field use (EXTIRQ8_RISCV_MEIP => 16#0#, EXTIRQ8_RISCV_SEIP => 16#1#);
    type LW_PRGNLCL_RISCV_IRQDELEG_DMA_Field is (DMA_RISCV_MEIP, DMA_RISCV_SEIP) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQDELEG_DMA_Field use (DMA_RISCV_MEIP => 16#0#, DMA_RISCV_SEIP => 16#1#);
    type LW_PRGNLCL_RISCV_IRQDELEG_SHA_Field is (SHA_RISCV_MEIP, SHA_RISCV_SEIP) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQDELEG_SHA_Field use (SHA_RISCV_MEIP => 16#0#, SHA_RISCV_SEIP => 16#1#);
    type LW_PRGNLCL_RISCV_IRQDELEG_MEMERR_Field is (MEMERR_RISCV_MEIP, MEMERR_RISCV_SEIP) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQDELEG_MEMERR_Field use (MEMERR_RISCV_MEIP => 16#0#, MEMERR_RISCV_SEIP => 16#1#);
    type LW_PRGNLCL_RISCV_IRQDELEG_CTXSW_ERROR_Field is (ERROR_RISCV_MEIP, ERROR_RISCV_SEIP) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQDELEG_CTXSW_ERROR_Field use (ERROR_RISCV_MEIP => 16#0#, ERROR_RISCV_SEIP => 16#1#);
    type LW_PRGNLCL_RISCV_IRQDELEG_GDMA_Field is (GDMA_RISCV_MEIP, GDMA_RISCV_SEIP) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQDELEG_GDMA_Field use (GDMA_RISCV_MEIP => 16#0#, GDMA_RISCV_SEIP => 16#1#);
    type LW_PRGNLCL_RISCV_IRQDELEG_ICD_Field is (ICD_RISCV_MEIP, ICD_RISCV_SEIP) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQDELEG_ICD_Field use (ICD_RISCV_MEIP => 16#0#, ICD_RISCV_SEIP => 16#1#);
    type LW_PRGNLCL_RISCV_IRQDELEG_IOPMP_Field is (IOPMP_RISCV_MEIP, IOPMP_RISCV_SEIP) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQDELEG_IOPMP_Field use (IOPMP_RISCV_MEIP => 16#0#, IOPMP_RISCV_SEIP => 16#1#);
    type LW_PRGNLCL_RISCV_IRQDELEG_CORE_MISMATCH_Field is (MISMATCH_RISCV_MEIP, MISMATCH_RISCV_SEIP) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQDELEG_CORE_MISMATCH_Field use (MISMATCH_RISCV_MEIP => 16#0#, MISMATCH_RISCV_SEIP => 16#1#);
    type LW_PRGNLCL_RISCV_IRQDELEG_SE_SAP_Field is (SAP_RISCV_MEIP, SAP_RISCV_SEIP) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQDELEG_SE_SAP_Field use (SAP_RISCV_MEIP => 16#0#, SAP_RISCV_SEIP => 16#1#);
    type LW_PRGNLCL_RISCV_IRQDELEG_SE_PKA_Field is (PKA_RISCV_MEIP, PKA_RISCV_SEIP) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQDELEG_SE_PKA_Field use (PKA_RISCV_MEIP => 16#0#, PKA_RISCV_SEIP => 16#1#);
    type LW_PRGNLCL_RISCV_IRQDELEG_SE_RNG_Field is (RNG_RISCV_MEIP, RNG_RISCV_SEIP) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQDELEG_SE_RNG_Field use (RNG_RISCV_MEIP => 16#0#, RNG_RISCV_SEIP => 16#1#);
    type LW_PRGNLCL_RISCV_IRQDELEG_SE_KEYMOVER_Field is (KEYMOVER_RISCV_MEIP, KEYMOVER_RISCV_SEIP) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQDELEG_SE_KEYMOVER_Field use (KEYMOVER_RISCV_MEIP => 16#0#, KEYMOVER_RISCV_SEIP => 16#1#);

    type LW_PRGNLCL_RISCV_IRQDELEG_Register is record
        Gptmr         : LW_PRGNLCL_RISCV_IRQDELEG_GPTMR_Field;
        Wdtmr         : LW_PRGNLCL_RISCV_IRQDELEG_WDTMR_Field;
        Mthd          : LW_PRGNLCL_RISCV_IRQDELEG_MTHD_Field;
        Ctxsw         : LW_PRGNLCL_RISCV_IRQDELEG_CTXSW_Field;
        Halt          : LW_PRGNLCL_RISCV_IRQDELEG_HALT_Field;
        Exterr        : LW_PRGNLCL_RISCV_IRQDELEG_EXTERR_Field;
        Swgen0        : LW_PRGNLCL_RISCV_IRQDELEG_SWGEN0_Field;
        Swgen1        : LW_PRGNLCL_RISCV_IRQDELEG_SWGEN1_Field;
        Ext_Extirq1   : LW_PRGNLCL_RISCV_IRQDELEG_EXT_EXTIRQ1_Field;
        Ext_Extirq2   : LW_PRGNLCL_RISCV_IRQDELEG_EXT_EXTIRQ2_Field;
        Ext_Extirq3   : LW_PRGNLCL_RISCV_IRQDELEG_EXT_EXTIRQ3_Field;
        Ext_Extirq4   : LW_PRGNLCL_RISCV_IRQDELEG_EXT_EXTIRQ4_Field;
        Ext_Extirq5   : LW_PRGNLCL_RISCV_IRQDELEG_EXT_EXTIRQ5_Field;
        Ext_Extirq6   : LW_PRGNLCL_RISCV_IRQDELEG_EXT_EXTIRQ6_Field;
        Ext_Extirq7   : LW_PRGNLCL_RISCV_IRQDELEG_EXT_EXTIRQ7_Field;
        Ext_Extirq8   : LW_PRGNLCL_RISCV_IRQDELEG_EXT_EXTIRQ8_Field;
        Dma           : LW_PRGNLCL_RISCV_IRQDELEG_DMA_Field;
        Sha           : LW_PRGNLCL_RISCV_IRQDELEG_SHA_Field;
        Memerr        : LW_PRGNLCL_RISCV_IRQDELEG_MEMERR_Field;
        Ctxsw_Error   : LW_PRGNLCL_RISCV_IRQDELEG_CTXSW_ERROR_Field;
        Gdma          : LW_PRGNLCL_RISCV_IRQDELEG_GDMA_Field;
        Icd           : LW_PRGNLCL_RISCV_IRQDELEG_ICD_Field;
        Iopmp         : LW_PRGNLCL_RISCV_IRQDELEG_IOPMP_Field;
        Core_Mismatch : LW_PRGNLCL_RISCV_IRQDELEG_CORE_MISMATCH_Field;
        Se_Sap        : LW_PRGNLCL_RISCV_IRQDELEG_SE_SAP_Field;
        Se_Pka        : LW_PRGNLCL_RISCV_IRQDELEG_SE_PKA_Field;
        Se_Rng        : LW_PRGNLCL_RISCV_IRQDELEG_SE_RNG_Field;
        Se_Keymover   : LW_PRGNLCL_RISCV_IRQDELEG_SE_KEYMOVER_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_IRQDELEG_Register use record
        Gptmr         at 0 range  0 ..  0;
        Wdtmr         at 0 range  1 ..  1;
        Mthd          at 0 range  2 ..  2;
        Ctxsw         at 0 range  3 ..  3;
        Halt          at 0 range  4 ..  4;
        Exterr        at 0 range  5 ..  5;
        Swgen0        at 0 range  6 ..  6;
        Swgen1        at 0 range  7 ..  7;
        Ext_Extirq1   at 0 range  8 ..  8;
        Ext_Extirq2   at 0 range  9 ..  9;
        Ext_Extirq3   at 0 range 10 .. 10;
        Ext_Extirq4   at 0 range 11 .. 11;
        Ext_Extirq5   at 0 range 12 .. 12;
        Ext_Extirq6   at 0 range 13 .. 13;
        Ext_Extirq7   at 0 range 14 .. 14;
        Ext_Extirq8   at 0 range 15 .. 15;
        Dma           at 0 range 16 .. 16;
        Sha           at 0 range 17 .. 17;
        Memerr        at 0 range 18 .. 18;
        Ctxsw_Error   at 0 range 19 .. 19;
        Gdma          at 0 range 20 .. 20;
        Icd           at 0 range 22 .. 22;
        Iopmp         at 0 range 23 .. 23;
        Core_Mismatch at 0 range 24 .. 24;
        Se_Sap        at 0 range 25 .. 25;
        Se_Pka        at 0 range 26 .. 26;
        Se_Rng        at 0 range 27 .. 27;
        Se_Keymover   at 0 range 28 .. 28;
    end record;

    LW_PRGNLCL_RISCV_EXTIRQSSET_EXT_USERDEF_SET : constant := 16#1#;

    type LW_PRGNLCL_RISCV_EXTIRQSSET_Register is record
        Ext : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_EXTIRQSSET_Register use record
        Ext at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_RISCV_EXTIRQSCLR_EXT_USERDEF_SET : constant := 16#1#;

    type LW_PRGNLCL_RISCV_EXTIRQSCLR_Register is record
        Ext : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_EXTIRQSCLR_Register use record
        Ext at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_RISCV_EXTIRQSTAT_EXT_INIT          : constant NvU32 := 16#0#;
    LW_PRGNLCL_RISCV_EXTIRQSTAT_EXT_USERDEF_TRUE  : constant       := 16#1#;
    LW_PRGNLCL_RISCV_EXTIRQSTAT_EXT_USERDEF_FALSE : constant       := 16#0#;

    type LW_PRGNLCL_RISCV_EXTIRQSTAT_Register is record
        Ext : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_EXTIRQSTAT_Register use record
        Ext at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_RISCV_EXTIRQMODE_LVL_EXT_INIT          : constant NvU32 := 16#0#;
    LW_PRGNLCL_RISCV_EXTIRQMODE_LVL_EXT_USERDEF_TRUE  : constant       := 16#1#;
    LW_PRGNLCL_RISCV_EXTIRQMODE_LVL_EXT_USERDEF_FALSE : constant       := 16#0#;

    type LW_PRGNLCL_RISCV_EXTIRQMODE_Register is record
        Lvl_Ext : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_EXTIRQMODE_Register use record
        Lvl_Ext at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_RISCV_EXTIRQSCMASK_EXT_ENABLE          : constant NvU32 := 16#ffff_ffff#;
    LW_PRGNLCL_RISCV_EXTIRQSCMASK_EXT_DISABLE         : constant NvU32 := 16#0#;
    LW_PRGNLCL_RISCV_EXTIRQSCMASK_EXT_USERDEF_ENABLE  : constant       := 16#1#;
    LW_PRGNLCL_RISCV_EXTIRQSCMASK_EXT_USERDEF_DISABLE : constant       := 16#0#;

    type LW_PRGNLCL_RISCV_EXTIRQSCMASK_Register is record
        Ext : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_EXTIRQSCMASK_Register use record
        Ext at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_RISCV_EXTIRQMSET_EXT_USERDEF_SET : constant := 16#1#;

    type LW_PRGNLCL_RISCV_EXTIRQMSET_Register is record
        Ext : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_EXTIRQMSET_Register use record
        Ext at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_RISCV_EXTIRQMCLR_EXT_USERDEF_SET : constant := 16#1#;

    type LW_PRGNLCL_RISCV_EXTIRQMCLR_Register is record
        Ext : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_EXTIRQMCLR_Register use record
        Ext at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_RISCV_EXTIRQMASK_EXT_UNSET         : constant NvU32 := 16#0#;
    LW_PRGNLCL_RISCV_EXTIRQMASK_EXT_SET           : constant NvU32 := 16#ffff_ffff#;
    LW_PRGNLCL_RISCV_EXTIRQMASK_EXT_USERDEF_UNSET : constant       := 16#0#;
    LW_PRGNLCL_RISCV_EXTIRQMASK_EXT_USERDEF_SET   : constant       := 16#1#;

    type LW_PRGNLCL_RISCV_EXTIRQMASK_Register is record
        Ext : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_EXTIRQMASK_Register use record
        Ext at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_RISCV_EXTIRQDEST_EXT_INIT          : constant NvU32 := 16#0#;
    LW_PRGNLCL_RISCV_EXTIRQDEST_EXT_USERDEF_RISCV : constant       := 16#0#;
    LW_PRGNLCL_RISCV_EXTIRQDEST_EXT_USERDEF_UPROC : constant       := 16#0#;
    LW_PRGNLCL_RISCV_EXTIRQDEST_EXT_USERDEF_HOST  : constant       := 16#1#;

    type LW_PRGNLCL_RISCV_EXTIRQDEST_Register is record
        Ext : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_EXTIRQDEST_Register use record
        Ext at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_RISCV_EXTIRQTYPE_EXT_HOST_NORMAL           : constant NvU32 := 16#0#;
    LW_PRGNLCL_RISCV_EXTIRQTYPE_EXT_HOST_NONSTALL         : constant NvU32 := 16#ffff_ffff#;
    LW_PRGNLCL_RISCV_EXTIRQTYPE_EXT_USERDEF_HOST_NORMAL   : constant       := 16#0#;
    LW_PRGNLCL_RISCV_EXTIRQTYPE_EXT_USERDEF_HOST_NONSTALL : constant       := 16#1#;

    type LW_PRGNLCL_RISCV_EXTIRQTYPE_Register is record
        Ext : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_EXTIRQTYPE_Register use record
        Ext at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_RISCV_EXTIRQDELEG_EXT_RISCV_MEIP          : constant NvU32 := 16#0#;
    LW_PRGNLCL_RISCV_EXTIRQDELEG_EXT_RISCV_SEIP          : constant NvU32 := 16#ffff_ffff#;
    LW_PRGNLCL_RISCV_EXTIRQDELEG_EXT_USERDEF_RISCV_MEIP  : constant       := 16#0#;
    LW_PRGNLCL_RISCV_EXTIRQDELEG_EXT_USERDEF_RISCV_SEIP  : constant       := 16#1#;
    LW_PRGNLCL_RISCV_EXTIRQDELEG_EXT_USERDEF_FALCON_IRQ0 : constant       := 16#0#;
    LW_PRGNLCL_RISCV_EXTIRQDELEG_EXT_USERDEF_FALCON_IRQ1 : constant       := 16#1#;

    type LW_PRGNLCL_RISCV_EXTIRQDELEG_Register is record
        Ext : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_EXTIRQDELEG_Register use record
        Ext at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_RISCV_BOOT_VECTOR_HI_VECTOR_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_RISCV_BOOT_VECTOR_HI_Register is record
        Vector : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_BOOT_VECTOR_HI_Register use record
        Vector at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_RISCV_BOOT_VECTOR_LO_VECTOR_INIT : constant NvU32 := 16#8_0000#;

    type LW_PRGNLCL_RISCV_BOOT_VECTOR_LO_Register is record
        Vector : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_BOOT_VECTOR_LO_Register use record
        Vector at 0 range 0 .. 31;
    end record;

    type LW_PRGNLCL_RISCV_CPUCTL_STARTCPU_Field is (STARTCPU_FALSE, STARTCPU_TRUE) with
        Size => 1;
    for LW_PRGNLCL_RISCV_CPUCTL_STARTCPU_Field use (STARTCPU_FALSE => 16#0#, STARTCPU_TRUE => 16#1#);
    LW_PRGNLCL_RISCV_CPUCTL_HALTED_INIT  : constant NvU1 := 16#1#;
    LW_PRGNLCL_RISCV_CPUCTL_HALTED_TRUE  : constant NvU1 := 16#1#;
    LW_PRGNLCL_RISCV_CPUCTL_HALTED_FALSE : constant NvU1 := 16#0#;
    LW_PRGNLCL_RISCV_CPUCTL_STOPPED_INIT : constant NvU1 := 16#0#;
    type LW_PRGNLCL_RISCV_CPUCTL_ACTIVE_STAT_Field is (STAT_INACTIVE, STAT_ACTIVE) with
        Size => 1;
    for LW_PRGNLCL_RISCV_CPUCTL_ACTIVE_STAT_Field use (STAT_INACTIVE => 16#0#, STAT_ACTIVE => 16#1#);

    type LW_PRGNLCL_RISCV_CPUCTL_Register is record
        Startcpu    : LW_PRGNLCL_RISCV_CPUCTL_STARTCPU_Field;
        Halted      : NvU1;
        Stopped     : NvU1;
        Active_Stat : LW_PRGNLCL_RISCV_CPUCTL_ACTIVE_STAT_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_CPUCTL_Register use record
        Startcpu    at 0 range 0 .. 0;
        Halted      at 0 range 4 .. 4;
        Stopped     at 0 range 5 .. 5;
        Active_Stat at 0 range 7 .. 7;
    end record;

    LW_PRGNLCL_RISCV_LWCONFIG_WR_ALLOC_EN_RST         : constant NvU1 := 16#0#;
    LW_PRGNLCL_RISCV_LWCONFIG_LD_MERGE_EN_RST         : constant NvU1 := 16#0#;
    LW_PRGNLCL_RISCV_LWCONFIG_ST_WAIT_CSB_ACK_EN_RST  : constant NvU1 := 16#0#;
    LW_PRGNLCL_RISCV_LWCONFIG_ST_WAIT_FBIF_ACK_EN_RST : constant NvU1 := 16#0#;
    LW_PRGNLCL_RISCV_LWCONFIG_VB_FWD_EN_RST           : constant NvU1 := 16#1#;
    LW_PRGNLCL_RISCV_LWCONFIG_WRITE_BACK_EN_RST       : constant NvU1 := 16#0#;
    LW_PRGNLCL_RISCV_LWCONFIG_ST_COMMIT_ISSUE_EN_RST  : constant NvU1 := 16#0#;
    LW_PRGNLCL_RISCV_LWCONFIG_TLB_FIX_SIZE_EN_RST     : constant NvU1 := 16#0#;
    LW_PRGNLCL_RISCV_LWCONFIG_SYSOP_CSR_EN_RST        : constant NvU1 := 16#1#;
    LW_PRGNLCL_RISCV_LWCONFIG_FENCE_FBFLUSH_EN_RST    : constant NvU1 := 16#1#;

    type LW_PRGNLCL_RISCV_LWCONFIG_Register is record
        Wr_Alloc_En         : NvU1;
        Ld_Merge_En         : NvU1;
        St_Wait_Csb_Ack_En  : NvU1;
        St_Wait_Fbif_Ack_En : NvU1;
        Vb_Fwd_En           : NvU1;
        Write_Back_En       : NvU1;
        St_Commit_Issue_En  : NvU1;
        Tlb_Fix_Size_En     : NvU1;
        Sysop_Csr_En        : NvU1;
        Fence_Fbflush_En    : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_LWCONFIG_Register use record
        Wr_Alloc_En         at 0 range  0 ..  0;
        Ld_Merge_En         at 0 range  1 ..  1;
        St_Wait_Csb_Ack_En  at 0 range  2 ..  2;
        St_Wait_Fbif_Ack_En at 0 range  3 ..  3;
        Vb_Fwd_En           at 0 range  4 ..  4;
        Write_Back_En       at 0 range  6 ..  6;
        St_Commit_Issue_En  at 0 range  7 ..  7;
        Tlb_Fix_Size_En     at 0 range  8 ..  8;
        Sysop_Csr_En        at 0 range  9 ..  9;
        Fence_Fbflush_En    at 0 range 10 .. 10;
    end record;

    type LW_PRGNLCL_RISCV_CG_SLCG_EXT_Field is (EXT_DISABLED, EXT_ENABLED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_CG_SLCG_EXT_Field use (EXT_DISABLED => 16#0#, EXT_ENABLED => 16#1#);
    type LW_PRGNLCL_RISCV_CG_SLCG_CORE_Field is (CORE_DISABLED, CORE_ENABLED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_CG_SLCG_CORE_Field use (CORE_DISABLED => 16#0#, CORE_ENABLED => 16#1#);
    LW_PRGNLCL_RISCV_CG_RSVD_INIT         : constant NvU30 := 16#0#;
    LW_PRGNLCL_RISCV_CG_SLCG_DISABLED     : constant       := 16#0#;
    LW_PRGNLCL_RISCV_CG_SLCG_ENABLED      : constant       := 16#3#;
    LW_PRGNLCL_RISCV_CG_SLCG_DISABLE      : constant       := 16#0#;
    LW_PRGNLCL_RISCV_CG_SLCG_ENABLE       : constant       := 16#1#;
    LW_PRGNLCL_RISCV_CG_CORE_SLCG_DISABLE : constant       := 16#0#;
    LW_PRGNLCL_RISCV_CG_CORE_SLCG_ENABLE  : constant       := 16#1#;

    type LW_PRGNLCL_RISCV_CG_Register is record
        Slcg_Ext  : LW_PRGNLCL_RISCV_CG_SLCG_EXT_Field;
        Slcg_Core : LW_PRGNLCL_RISCV_CG_SLCG_CORE_Field;
        Rsvd      : NvU30;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_CG_Register use record
        Slcg_Ext  at 0 range 0 ..  0;
        Slcg_Core at 0 range 1 ..  1;
        Rsvd      at 0 range 2 .. 31;
    end record;

    LW_PRGNLCL_RISCV_CYA_RSVD_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_RISCV_CYA_Register is record
        Rsvd : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_CYA_Register use record
        Rsvd at 0 range 0 .. 31;
    end record;

    type LW_PRGNLCL_RISCV_MSPM_EBMASK_LEVEL0_Field is (LEVEL0_DISABLE, LEVEL0_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_RISCV_MSPM_EBMASK_LEVEL0_Field use (LEVEL0_DISABLE => 16#0#, LEVEL0_ENABLE => 16#1#);
    type LW_PRGNLCL_RISCV_MSPM_EBMASK_LEVEL1_Field is (LEVEL1_DISABLE, LEVEL1_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_RISCV_MSPM_EBMASK_LEVEL1_Field use (LEVEL1_DISABLE => 16#0#, LEVEL1_ENABLE => 16#1#);
    type LW_PRGNLCL_RISCV_MSPM_EBMASK_LEVEL2_Field is (LEVEL2_DISABLE, LEVEL2_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_RISCV_MSPM_EBMASK_LEVEL2_Field use (LEVEL2_DISABLE => 16#0#, LEVEL2_ENABLE => 16#1#);
    type LW_PRGNLCL_RISCV_MSPM_EBMASK_LEVEL3_Field is (LEVEL3_DISABLE, LEVEL3_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_RISCV_MSPM_EBMASK_LEVEL3_Field use (LEVEL3_DISABLE => 16#0#, LEVEL3_ENABLE => 16#1#);

    type LW_PRGNLCL_RISCV_MSPM_Register is record
        Ebmask_Level0 : LW_PRGNLCL_RISCV_MSPM_EBMASK_LEVEL0_Field;
        Ebmask_Level1 : LW_PRGNLCL_RISCV_MSPM_EBMASK_LEVEL1_Field;
        Ebmask_Level2 : LW_PRGNLCL_RISCV_MSPM_EBMASK_LEVEL2_Field;
        Ebmask_Level3 : LW_PRGNLCL_RISCV_MSPM_EBMASK_LEVEL3_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_MSPM_Register use record
        Ebmask_Level0 at 0 range 12 .. 12;
        Ebmask_Level1 at 0 range 13 .. 13;
        Ebmask_Level2 at 0 range 14 .. 14;
        Ebmask_Level3 at 0 range 15 .. 15;
    end record;

    type LW_PRGNLCL_RISCV_DBGCTL_ICD_CMDWL_STOP_Field is (STOP_DISABLE, STOP_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_RISCV_DBGCTL_ICD_CMDWL_STOP_Field use (STOP_DISABLE => 16#0#, STOP_ENABLE => 16#1#);
    type LW_PRGNLCL_RISCV_DBGCTL_ICD_CMDWL_RUN_Field is (RUN_DISABLE, RUN_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_RISCV_DBGCTL_ICD_CMDWL_RUN_Field use (RUN_DISABLE => 16#0#, RUN_ENABLE => 16#1#);
    LW_PRGNLCL_RISCV_DBGCTL_RSVD1_INIT : constant NvU1 := 16#0#;
    type LW_PRGNLCL_RISCV_DBGCTL_ICD_CMDWL_STEP_Field is (STEP_DISABLE, STEP_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_RISCV_DBGCTL_ICD_CMDWL_STEP_Field use (STEP_DISABLE => 16#0#, STEP_ENABLE => 16#1#);
    type LW_PRGNLCL_RISCV_DBGCTL_ICD_CMDWL_J_Field is (J_DISABLE, J_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_RISCV_DBGCTL_ICD_CMDWL_J_Field use (J_DISABLE => 16#0#, J_ENABLE => 16#1#);
    type LW_PRGNLCL_RISCV_DBGCTL_ICD_CMDWL_EMASK_Field is (EMASK_DISABLE, EMASK_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_RISCV_DBGCTL_ICD_CMDWL_EMASK_Field use (EMASK_DISABLE => 16#0#, EMASK_ENABLE => 16#1#);
    type LW_PRGNLCL_RISCV_DBGCTL_ICD_CMDWL_RREG_Field is (RREG_DISABLE, RREG_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_RISCV_DBGCTL_ICD_CMDWL_RREG_Field use (RREG_DISABLE => 16#0#, RREG_ENABLE => 16#1#);
    type LW_PRGNLCL_RISCV_DBGCTL_ICD_CMDWL_WREG_Field is (WREG_DISABLE, WREG_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_RISCV_DBGCTL_ICD_CMDWL_WREG_Field use (WREG_DISABLE => 16#0#, WREG_ENABLE => 16#1#);
    type LW_PRGNLCL_RISCV_DBGCTL_ICD_CMDWL_RDM_Field is (RDM_DISABLE, RDM_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_RISCV_DBGCTL_ICD_CMDWL_RDM_Field use (RDM_DISABLE => 16#0#, RDM_ENABLE => 16#1#);
    type LW_PRGNLCL_RISCV_DBGCTL_ICD_CMDWL_WDM_Field is (WDM_DISABLE, WDM_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_RISCV_DBGCTL_ICD_CMDWL_WDM_Field use (WDM_DISABLE => 16#0#, WDM_ENABLE => 16#1#);
    type LW_PRGNLCL_RISCV_DBGCTL_ICD_CMDWL_RSTAT_Field is (RSTAT_DISABLE, RSTAT_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_RISCV_DBGCTL_ICD_CMDWL_RSTAT_Field use (RSTAT_DISABLE => 16#0#, RSTAT_ENABLE => 16#1#);
    type LW_PRGNLCL_RISCV_DBGCTL_ICD_CMDWL_IBRKPT_Field is (IBRKPT_DISABLE, IBRKPT_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_RISCV_DBGCTL_ICD_CMDWL_IBRKPT_Field use (IBRKPT_DISABLE => 16#0#, IBRKPT_ENABLE => 16#1#);
    type LW_PRGNLCL_RISCV_DBGCTL_ICD_CMDWL_RCSR_Field is (RCSR_DISABLE, RCSR_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_RISCV_DBGCTL_ICD_CMDWL_RCSR_Field use (RCSR_DISABLE => 16#0#, RCSR_ENABLE => 16#1#);
    type LW_PRGNLCL_RISCV_DBGCTL_ICD_CMDWL_WCSR_Field is (WCSR_DISABLE, WCSR_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_RISCV_DBGCTL_ICD_CMDWL_WCSR_Field use (WCSR_DISABLE => 16#0#, WCSR_ENABLE => 16#1#);
    type LW_PRGNLCL_RISCV_DBGCTL_ICD_CMDWL_RPC_Field is (RPC_DISABLE, RPC_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_RISCV_DBGCTL_ICD_CMDWL_RPC_Field use (RPC_DISABLE => 16#0#, RPC_ENABLE => 16#1#);
    type LW_PRGNLCL_RISCV_DBGCTL_ICD_CMDWL_RFREG_Field is (RFREG_DISABLE, RFREG_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_RISCV_DBGCTL_ICD_CMDWL_RFREG_Field use (RFREG_DISABLE => 16#0#, RFREG_ENABLE => 16#1#);
    type LW_PRGNLCL_RISCV_DBGCTL_ICD_CMDWL_WFREG_Field is (WFREG_DISABLE, WFREG_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_RISCV_DBGCTL_ICD_CMDWL_WFREG_Field use (WFREG_DISABLE => 16#0#, WFREG_ENABLE => 16#1#);
    LW_PRGNLCL_RISCV_DBGCTL_RSVD_INIT : constant NvU13 := 16#0#;
    type LW_PRGNLCL_RISCV_DBGCTL_START_IN_ICD_Field is (ICD_FALSE, ICD_TRUE) with
        Size => 1;
    for LW_PRGNLCL_RISCV_DBGCTL_START_IN_ICD_Field use (ICD_FALSE => 16#0#, ICD_TRUE => 16#1#);
    type LW_PRGNLCL_RISCV_DBGCTL_SINGLE_STEP_MODE_Field is (MODE_DISABLE, MODE_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_RISCV_DBGCTL_SINGLE_STEP_MODE_Field use (MODE_DISABLE => 16#0#, MODE_ENABLE => 16#1#);

    type LW_PRGNLCL_RISCV_DBGCTL_Register is record
        Icd_Cmdwl_Stop   : LW_PRGNLCL_RISCV_DBGCTL_ICD_CMDWL_STOP_Field;
        Icd_Cmdwl_Run    : LW_PRGNLCL_RISCV_DBGCTL_ICD_CMDWL_RUN_Field;
        Rsvd1            : NvU1;
        Icd_Cmdwl_Step   : LW_PRGNLCL_RISCV_DBGCTL_ICD_CMDWL_STEP_Field;
        Icd_Cmdwl_J      : LW_PRGNLCL_RISCV_DBGCTL_ICD_CMDWL_J_Field;
        Icd_Cmdwl_Emask  : LW_PRGNLCL_RISCV_DBGCTL_ICD_CMDWL_EMASK_Field;
        Icd_Cmdwl_Rreg   : LW_PRGNLCL_RISCV_DBGCTL_ICD_CMDWL_RREG_Field;
        Icd_Cmdwl_Wreg   : LW_PRGNLCL_RISCV_DBGCTL_ICD_CMDWL_WREG_Field;
        Icd_Cmdwl_Rdm    : LW_PRGNLCL_RISCV_DBGCTL_ICD_CMDWL_RDM_Field;
        Icd_Cmdwl_Wdm    : LW_PRGNLCL_RISCV_DBGCTL_ICD_CMDWL_WDM_Field;
        Icd_Cmdwl_Rstat  : LW_PRGNLCL_RISCV_DBGCTL_ICD_CMDWL_RSTAT_Field;
        Icd_Cmdwl_Ibrkpt : LW_PRGNLCL_RISCV_DBGCTL_ICD_CMDWL_IBRKPT_Field;
        Icd_Cmdwl_Rcsr   : LW_PRGNLCL_RISCV_DBGCTL_ICD_CMDWL_RCSR_Field;
        Icd_Cmdwl_Wcsr   : LW_PRGNLCL_RISCV_DBGCTL_ICD_CMDWL_WCSR_Field;
        Icd_Cmdwl_Rpc    : LW_PRGNLCL_RISCV_DBGCTL_ICD_CMDWL_RPC_Field;
        Icd_Cmdwl_Rfreg  : LW_PRGNLCL_RISCV_DBGCTL_ICD_CMDWL_RFREG_Field;
        Icd_Cmdwl_Wfreg  : LW_PRGNLCL_RISCV_DBGCTL_ICD_CMDWL_WFREG_Field;
        Rsvd             : NvU13;
        Start_In_Icd     : LW_PRGNLCL_RISCV_DBGCTL_START_IN_ICD_Field;
        Single_Step_Mode : LW_PRGNLCL_RISCV_DBGCTL_SINGLE_STEP_MODE_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_DBGCTL_Register use record
        Icd_Cmdwl_Stop   at 0 range  0 ..  0;
        Icd_Cmdwl_Run    at 0 range  1 ..  1;
        Rsvd1            at 0 range  2 ..  2;
        Icd_Cmdwl_Step   at 0 range  3 ..  3;
        Icd_Cmdwl_J      at 0 range  4 ..  4;
        Icd_Cmdwl_Emask  at 0 range  5 ..  5;
        Icd_Cmdwl_Rreg   at 0 range  6 ..  6;
        Icd_Cmdwl_Wreg   at 0 range  7 ..  7;
        Icd_Cmdwl_Rdm    at 0 range  8 ..  8;
        Icd_Cmdwl_Wdm    at 0 range  9 ..  9;
        Icd_Cmdwl_Rstat  at 0 range 10 .. 10;
        Icd_Cmdwl_Ibrkpt at 0 range 11 .. 11;
        Icd_Cmdwl_Rcsr   at 0 range 12 .. 12;
        Icd_Cmdwl_Wcsr   at 0 range 13 .. 13;
        Icd_Cmdwl_Rpc    at 0 range 14 .. 14;
        Icd_Cmdwl_Rfreg  at 0 range 15 .. 15;
        Icd_Cmdwl_Wfreg  at 0 range 16 .. 16;
        Rsvd             at 0 range 17 .. 29;
        Start_In_Icd     at 0 range 30 .. 30;
        Single_Step_Mode at 0 range 31 .. 31;
    end record;

    type LW_PRGNLCL_RISCV_DBGCTL_LOCK_ICD_CMDWL_STOP_Field is (STOP_UNLOCKED, STOP_LOCKED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_DBGCTL_LOCK_ICD_CMDWL_STOP_Field use (STOP_UNLOCKED => 16#0#, STOP_LOCKED => 16#1#);
    type LW_PRGNLCL_RISCV_DBGCTL_LOCK_ICD_CMDWL_RUN_Field is (RUN_UNLOCKED, RUN_LOCKED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_DBGCTL_LOCK_ICD_CMDWL_RUN_Field use (RUN_UNLOCKED => 16#0#, RUN_LOCKED => 16#1#);
    LW_PRGNLCL_RISCV_DBGCTL_LOCK_RSVD1_INIT : constant NvU1 := 16#0#;
    type LW_PRGNLCL_RISCV_DBGCTL_LOCK_ICD_CMDWL_STEP_Field is (STEP_UNLOCKED, STEP_LOCKED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_DBGCTL_LOCK_ICD_CMDWL_STEP_Field use (STEP_UNLOCKED => 16#0#, STEP_LOCKED => 16#1#);
    type LW_PRGNLCL_RISCV_DBGCTL_LOCK_ICD_CMDWL_J_Field is (J_UNLOCKED, J_LOCKED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_DBGCTL_LOCK_ICD_CMDWL_J_Field use (J_UNLOCKED => 16#0#, J_LOCKED => 16#1#);
    type LW_PRGNLCL_RISCV_DBGCTL_LOCK_ICD_CMDWL_EMASK_Field is (EMASK_UNLOCKED, EMASK_LOCKED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_DBGCTL_LOCK_ICD_CMDWL_EMASK_Field use (EMASK_UNLOCKED => 16#0#, EMASK_LOCKED => 16#1#);
    type LW_PRGNLCL_RISCV_DBGCTL_LOCK_ICD_CMDWL_RREG_Field is (RREG_UNLOCKED, RREG_LOCKED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_DBGCTL_LOCK_ICD_CMDWL_RREG_Field use (RREG_UNLOCKED => 16#0#, RREG_LOCKED => 16#1#);
    type LW_PRGNLCL_RISCV_DBGCTL_LOCK_ICD_CMDWL_WREG_Field is (WREG_UNLOCKED, WREG_LOCKED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_DBGCTL_LOCK_ICD_CMDWL_WREG_Field use (WREG_UNLOCKED => 16#0#, WREG_LOCKED => 16#1#);
    type LW_PRGNLCL_RISCV_DBGCTL_LOCK_ICD_CMDWL_RDM_Field is (RDM_UNLOCKED, RDM_LOCKED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_DBGCTL_LOCK_ICD_CMDWL_RDM_Field use (RDM_UNLOCKED => 16#0#, RDM_LOCKED => 16#1#);
    type LW_PRGNLCL_RISCV_DBGCTL_LOCK_ICD_CMDWL_WDM_Field is (WDM_UNLOCKED, WDM_LOCKED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_DBGCTL_LOCK_ICD_CMDWL_WDM_Field use (WDM_UNLOCKED => 16#0#, WDM_LOCKED => 16#1#);
    type LW_PRGNLCL_RISCV_DBGCTL_LOCK_ICD_CMDWL_RSTAT_Field is (RSTAT_UNLOCKED, RSTAT_LOCKED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_DBGCTL_LOCK_ICD_CMDWL_RSTAT_Field use (RSTAT_UNLOCKED => 16#0#, RSTAT_LOCKED => 16#1#);
    type LW_PRGNLCL_RISCV_DBGCTL_LOCK_ICD_CMDWL_IBRKPT_Field is (IBRKPT_UNLOCKED, IBRKPT_LOCKED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_DBGCTL_LOCK_ICD_CMDWL_IBRKPT_Field use (IBRKPT_UNLOCKED => 16#0#, IBRKPT_LOCKED => 16#1#);
    type LW_PRGNLCL_RISCV_DBGCTL_LOCK_ICD_CMDWL_RCSR_Field is (RCSR_UNLOCKED, RCSR_LOCKED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_DBGCTL_LOCK_ICD_CMDWL_RCSR_Field use (RCSR_UNLOCKED => 16#0#, RCSR_LOCKED => 16#1#);
    type LW_PRGNLCL_RISCV_DBGCTL_LOCK_ICD_CMDWL_WCSR_Field is (WCSR_UNLOCKED, WCSR_LOCKED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_DBGCTL_LOCK_ICD_CMDWL_WCSR_Field use (WCSR_UNLOCKED => 16#0#, WCSR_LOCKED => 16#1#);
    type LW_PRGNLCL_RISCV_DBGCTL_LOCK_ICD_CMDWL_RPC_Field is (RPC_UNLOCKED, RPC_LOCKED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_DBGCTL_LOCK_ICD_CMDWL_RPC_Field use (RPC_UNLOCKED => 16#0#, RPC_LOCKED => 16#1#);
    type LW_PRGNLCL_RISCV_DBGCTL_LOCK_ICD_CMDWL_RFREG_Field is (RFREG_UNLOCKED, RFREG_LOCKED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_DBGCTL_LOCK_ICD_CMDWL_RFREG_Field use (RFREG_UNLOCKED => 16#0#, RFREG_LOCKED => 16#1#);
    type LW_PRGNLCL_RISCV_DBGCTL_LOCK_ICD_CMDWL_WFREG_Field is (WFREG_UNLOCKED, WFREG_LOCKED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_DBGCTL_LOCK_ICD_CMDWL_WFREG_Field use (WFREG_UNLOCKED => 16#0#, WFREG_LOCKED => 16#1#);
    LW_PRGNLCL_RISCV_DBGCTL_LOCK_RSVD_INIT : constant NvU14 := 16#0#;
    type LW_PRGNLCL_RISCV_DBGCTL_LOCK_SINGLE_STEP_MODE_Field is (MODE_UNLOCKED, MODE_LOCKED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_DBGCTL_LOCK_SINGLE_STEP_MODE_Field use (MODE_UNLOCKED => 16#0#, MODE_LOCKED => 16#1#);

    type LW_PRGNLCL_RISCV_DBGCTL_LOCK_Register is record
        Icd_Cmdwl_Stop   : LW_PRGNLCL_RISCV_DBGCTL_LOCK_ICD_CMDWL_STOP_Field;
        Icd_Cmdwl_Run    : LW_PRGNLCL_RISCV_DBGCTL_LOCK_ICD_CMDWL_RUN_Field;
        Rsvd1            : NvU1;
        Icd_Cmdwl_Step   : LW_PRGNLCL_RISCV_DBGCTL_LOCK_ICD_CMDWL_STEP_Field;
        Icd_Cmdwl_J      : LW_PRGNLCL_RISCV_DBGCTL_LOCK_ICD_CMDWL_J_Field;
        Icd_Cmdwl_Emask  : LW_PRGNLCL_RISCV_DBGCTL_LOCK_ICD_CMDWL_EMASK_Field;
        Icd_Cmdwl_Rreg   : LW_PRGNLCL_RISCV_DBGCTL_LOCK_ICD_CMDWL_RREG_Field;
        Icd_Cmdwl_Wreg   : LW_PRGNLCL_RISCV_DBGCTL_LOCK_ICD_CMDWL_WREG_Field;
        Icd_Cmdwl_Rdm    : LW_PRGNLCL_RISCV_DBGCTL_LOCK_ICD_CMDWL_RDM_Field;
        Icd_Cmdwl_Wdm    : LW_PRGNLCL_RISCV_DBGCTL_LOCK_ICD_CMDWL_WDM_Field;
        Icd_Cmdwl_Rstat  : LW_PRGNLCL_RISCV_DBGCTL_LOCK_ICD_CMDWL_RSTAT_Field;
        Icd_Cmdwl_Ibrkpt : LW_PRGNLCL_RISCV_DBGCTL_LOCK_ICD_CMDWL_IBRKPT_Field;
        Icd_Cmdwl_Rcsr   : LW_PRGNLCL_RISCV_DBGCTL_LOCK_ICD_CMDWL_RCSR_Field;
        Icd_Cmdwl_Wcsr   : LW_PRGNLCL_RISCV_DBGCTL_LOCK_ICD_CMDWL_WCSR_Field;
        Icd_Cmdwl_Rpc    : LW_PRGNLCL_RISCV_DBGCTL_LOCK_ICD_CMDWL_RPC_Field;
        Icd_Cmdwl_Rfreg  : LW_PRGNLCL_RISCV_DBGCTL_LOCK_ICD_CMDWL_RFREG_Field;
        Icd_Cmdwl_Wfreg  : LW_PRGNLCL_RISCV_DBGCTL_LOCK_ICD_CMDWL_WFREG_Field;
        Rsvd             : NvU14;
        Single_Step_Mode : LW_PRGNLCL_RISCV_DBGCTL_LOCK_SINGLE_STEP_MODE_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_DBGCTL_LOCK_Register use record
        Icd_Cmdwl_Stop   at 0 range  0 ..  0;
        Icd_Cmdwl_Run    at 0 range  1 ..  1;
        Rsvd1            at 0 range  2 ..  2;
        Icd_Cmdwl_Step   at 0 range  3 ..  3;
        Icd_Cmdwl_J      at 0 range  4 ..  4;
        Icd_Cmdwl_Emask  at 0 range  5 ..  5;
        Icd_Cmdwl_Rreg   at 0 range  6 ..  6;
        Icd_Cmdwl_Wreg   at 0 range  7 ..  7;
        Icd_Cmdwl_Rdm    at 0 range  8 ..  8;
        Icd_Cmdwl_Wdm    at 0 range  9 ..  9;
        Icd_Cmdwl_Rstat  at 0 range 10 .. 10;
        Icd_Cmdwl_Ibrkpt at 0 range 11 .. 11;
        Icd_Cmdwl_Rcsr   at 0 range 12 .. 12;
        Icd_Cmdwl_Wcsr   at 0 range 13 .. 13;
        Icd_Cmdwl_Rpc    at 0 range 14 .. 14;
        Icd_Cmdwl_Rfreg  at 0 range 15 .. 15;
        Icd_Cmdwl_Wfreg  at 0 range 16 .. 16;
        Rsvd             at 0 range 17 .. 30;
        Single_Step_Mode at 0 range 31 .. 31;
    end record;

    LW_PRGNLCL_RISCV_ICD_CMD_OPC_STOP  : constant NvU5 := 16#0#;
    LW_PRGNLCL_RISCV_ICD_CMD_OPC_RUN   : constant NvU5 := 16#1#;
    LW_PRGNLCL_RISCV_ICD_CMD_OPC_STEP  : constant NvU5 := 16#5#;
    LW_PRGNLCL_RISCV_ICD_CMD_OPC_J     : constant NvU5 := 16#6#;
    LW_PRGNLCL_RISCV_ICD_CMD_OPC_EMASK : constant NvU5 := 16#7#;
    LW_PRGNLCL_RISCV_ICD_CMD_OPC_RREG  : constant NvU5 := 16#8#;
    LW_PRGNLCL_RISCV_ICD_CMD_OPC_WREG  : constant NvU5 := 16#9#;
    LW_PRGNLCL_RISCV_ICD_CMD_OPC_RDM   : constant NvU5 := 16#a#;
    LW_PRGNLCL_RISCV_ICD_CMD_OPC_WDM   : constant NvU5 := 16#b#;
    LW_PRGNLCL_RISCV_ICD_CMD_OPC_RSTAT : constant NvU5 := 16#e#;
    LW_PRGNLCL_RISCV_ICD_CMD_OPC_RCSR  : constant NvU5 := 16#10#;
    LW_PRGNLCL_RISCV_ICD_CMD_OPC_WCSR  : constant NvU5 := 16#11#;
    LW_PRGNLCL_RISCV_ICD_CMD_OPC_RPC   : constant NvU5 := 16#12#;
    LW_PRGNLCL_RISCV_ICD_CMD_OPC_RFREG : constant NvU5 := 16#13#;
    LW_PRGNLCL_RISCV_ICD_CMD_OPC_WFREG : constant NvU5 := 16#14#;
    type LW_PRGNLCL_RISCV_ICD_CMD_SZ_Field is (SZ_B, SZ_HW, SZ_W, SZ_DW) with
        Size => 2;
    for LW_PRGNLCL_RISCV_ICD_CMD_SZ_Field use (SZ_B => 16#0#, SZ_HW => 16#1#, SZ_W => 16#2#, SZ_DW => 16#3#);
    LW_PRGNLCL_RISCV_ICD_CMD_IDX_REG0   : constant NvU5 := 16#0#;
    LW_PRGNLCL_RISCV_ICD_CMD_IDX_REG1   : constant NvU5 := 16#1#;
    LW_PRGNLCL_RISCV_ICD_CMD_IDX_REG2   : constant NvU5 := 16#2#;
    LW_PRGNLCL_RISCV_ICD_CMD_IDX_REG3   : constant NvU5 := 16#3#;
    LW_PRGNLCL_RISCV_ICD_CMD_IDX_REG4   : constant NvU5 := 16#4#;
    LW_PRGNLCL_RISCV_ICD_CMD_IDX_REG5   : constant NvU5 := 16#5#;
    LW_PRGNLCL_RISCV_ICD_CMD_IDX_REG6   : constant NvU5 := 16#6#;
    LW_PRGNLCL_RISCV_ICD_CMD_IDX_REG7   : constant NvU5 := 16#7#;
    LW_PRGNLCL_RISCV_ICD_CMD_IDX_REG8   : constant NvU5 := 16#8#;
    LW_PRGNLCL_RISCV_ICD_CMD_IDX_REG9   : constant NvU5 := 16#9#;
    LW_PRGNLCL_RISCV_ICD_CMD_IDX_REG10  : constant NvU5 := 16#a#;
    LW_PRGNLCL_RISCV_ICD_CMD_IDX_REG11  : constant NvU5 := 16#b#;
    LW_PRGNLCL_RISCV_ICD_CMD_IDX_REG12  : constant NvU5 := 16#c#;
    LW_PRGNLCL_RISCV_ICD_CMD_IDX_REG13  : constant NvU5 := 16#d#;
    LW_PRGNLCL_RISCV_ICD_CMD_IDX_REG14  : constant NvU5 := 16#e#;
    LW_PRGNLCL_RISCV_ICD_CMD_IDX_REG15  : constant NvU5 := 16#f#;
    LW_PRGNLCL_RISCV_ICD_CMD_IDX_REG16  : constant NvU5 := 16#10#;
    LW_PRGNLCL_RISCV_ICD_CMD_IDX_REG17  : constant NvU5 := 16#11#;
    LW_PRGNLCL_RISCV_ICD_CMD_IDX_REG18  : constant NvU5 := 16#12#;
    LW_PRGNLCL_RISCV_ICD_CMD_IDX_REG19  : constant NvU5 := 16#13#;
    LW_PRGNLCL_RISCV_ICD_CMD_IDX_REG20  : constant NvU5 := 16#14#;
    LW_PRGNLCL_RISCV_ICD_CMD_IDX_REG21  : constant NvU5 := 16#15#;
    LW_PRGNLCL_RISCV_ICD_CMD_IDX_REG22  : constant NvU5 := 16#16#;
    LW_PRGNLCL_RISCV_ICD_CMD_IDX_REG23  : constant NvU5 := 16#17#;
    LW_PRGNLCL_RISCV_ICD_CMD_IDX_REG24  : constant NvU5 := 16#18#;
    LW_PRGNLCL_RISCV_ICD_CMD_IDX_REG25  : constant NvU5 := 16#19#;
    LW_PRGNLCL_RISCV_ICD_CMD_IDX_REG26  : constant NvU5 := 16#1a#;
    LW_PRGNLCL_RISCV_ICD_CMD_IDX_REG27  : constant NvU5 := 16#1b#;
    LW_PRGNLCL_RISCV_ICD_CMD_IDX_REG28  : constant NvU5 := 16#1c#;
    LW_PRGNLCL_RISCV_ICD_CMD_IDX_REG29  : constant NvU5 := 16#1e#;
    LW_PRGNLCL_RISCV_ICD_CMD_IDX_REG30  : constant NvU5 := 16#1e#;
    LW_PRGNLCL_RISCV_ICD_CMD_IDX_REG31  : constant NvU5 := 16#1f#;
    LW_PRGNLCL_RISCV_ICD_CMD_IDX_RSTAT3 : constant NvU5 := 16#3#;
    LW_PRGNLCL_RISCV_ICD_CMD_IDX_RSTAT4 : constant NvU5 := 16#4#;
    type LW_PRGNLCL_RISCV_ICD_CMD_ERROR_Field is (ERROR_FALSE, ERROR_TRUE) with
        Size => 1;
    for LW_PRGNLCL_RISCV_ICD_CMD_ERROR_Field use (ERROR_FALSE => 16#0#, ERROR_TRUE => 16#1#);
    type LW_PRGNLCL_RISCV_ICD_CMD_BUSY_Field is (BUSY_FALSE, BUSY_TRUE) with
        Size => 1;
    for LW_PRGNLCL_RISCV_ICD_CMD_BUSY_Field use (BUSY_FALSE => 16#0#, BUSY_TRUE => 16#1#);
    LW_PRGNLCL_RISCV_ICD_CMD_PARM_INIT : constant NvU16 := 16#0#;

    type LW_PRGNLCL_RISCV_ICD_CMD_Register is record
        Opc   : NvU5;
        Sz    : LW_PRGNLCL_RISCV_ICD_CMD_SZ_Field;
        Idx   : NvU5;
        Error : LW_PRGNLCL_RISCV_ICD_CMD_ERROR_Field;
        Busy  : LW_PRGNLCL_RISCV_ICD_CMD_BUSY_Field;
        Parm  : NvU16;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_ICD_CMD_Register use record
        Opc   at 0 range  0 ..  4;
        Sz    at 0 range  6 ..  7;
        Idx   at 0 range  8 .. 12;
        Error at 0 range 14 .. 14;
        Busy  at 0 range 15 .. 15;
        Parm  at 0 range 16 .. 31;
    end record;

    LW_PRGNLCL_RISCV_ICD_ADDR0_ADDR_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_RISCV_ICD_ADDR0_Register is record
        Addr : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_ICD_ADDR0_Register use record
        Addr at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_RISCV_ICD_ADDR1_ADDR_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_RISCV_ICD_ADDR1_Register is record
        Addr : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_ICD_ADDR1_Register use record
        Addr at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_RISCV_ICD_WDATA0_DATA_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_RISCV_ICD_WDATA0_Register is record
        Data : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_ICD_WDATA0_Register use record
        Data at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_RISCV_ICD_WDATA1_DATA_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_RISCV_ICD_WDATA1_Register is record
        Data : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_ICD_WDATA1_Register use record
        Data at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_RISCV_ICD_RDATA0_DATA_RSTAT3_SSINT_ENTER_ICD    : constant NvU32 := 16#1#;
    LW_PRGNLCL_RISCV_ICD_RDATA0_DATA_RSTAT3_SSINT_EXPT         : constant NvU32 := 16#0#;
    LW_PRGNLCL_RISCV_ICD_RDATA0_DATA_RSTAT3_MSINT_ENTER_ICD    : constant NvU32 := 16#1#;
    LW_PRGNLCL_RISCV_ICD_RDATA0_DATA_RSTAT3_MSINT_EXPT         : constant NvU32 := 16#0#;
    LW_PRGNLCL_RISCV_ICD_RDATA0_DATA_RSTAT3_STINT_ENTER_ICD    : constant NvU32 := 16#1#;
    LW_PRGNLCL_RISCV_ICD_RDATA0_DATA_RSTAT3_STINT_EXPT         : constant NvU32 := 16#0#;
    LW_PRGNLCL_RISCV_ICD_RDATA0_DATA_RSTAT3_MTINT_ENTER_ICD    : constant NvU32 := 16#1#;
    LW_PRGNLCL_RISCV_ICD_RDATA0_DATA_RSTAT3_MTINT_EXPT         : constant NvU32 := 16#0#;
    LW_PRGNLCL_RISCV_ICD_RDATA0_DATA_RSTAT3_SEINT_ENTER_ICD    : constant NvU32 := 16#1#;
    LW_PRGNLCL_RISCV_ICD_RDATA0_DATA_RSTAT3_SEINT_EXPT         : constant NvU32 := 16#0#;
    LW_PRGNLCL_RISCV_ICD_RDATA0_DATA_RSTAT3_MEINT_ENTER_ICD    : constant NvU32 := 16#1#;
    LW_PRGNLCL_RISCV_ICD_RDATA0_DATA_RSTAT3_MEINT_EXPT         : constant NvU32 := 16#0#;
    LW_PRGNLCL_RISCV_ICD_RDATA0_DATA_RSTAT4_ICD_STATE_ACTIVE   : constant NvU32 := 16#0#;
    LW_PRGNLCL_RISCV_ICD_RDATA0_DATA_RSTAT4_ICD_STATE_INACTIVE : constant NvU32 := 16#1#;
    LW_PRGNLCL_RISCV_ICD_RDATA0_DATA_RSTAT4_ICD_STATE_ICD      : constant NvU32 := 16#2#;
    LW_PRGNLCL_RISCV_ICD_RDATA0_DATA_RSTAT4_RS0_VALUE          : constant NvU32 := 16#0#;
    LW_PRGNLCL_RISCV_ICD_RDATA0_DATA_RSTAT4_RS1_VALUE          : constant NvU32 := 16#0#;

    type LW_PRGNLCL_RISCV_ICD_RDATA0_Register is record
        Data : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_ICD_RDATA0_Register use record
        Data at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_RISCV_ICD_RDATA1_DATA_RSTAT3_IAMA_ENTER_ICD          : constant NvU32 := 16#1#;
    LW_PRGNLCL_RISCV_ICD_RDATA1_DATA_RSTAT3_IAMA_EXPT               : constant NvU32 := 16#0#;
    LW_PRGNLCL_RISCV_ICD_RDATA1_DATA_RSTAT3_IFAULT_ENTER_ICD        : constant NvU32 := 16#1#;
    LW_PRGNLCL_RISCV_ICD_RDATA1_DATA_RSTAT3_IFAULT_EXPT             : constant NvU32 := 16#0#;
    LW_PRGNLCL_RISCV_ICD_RDATA1_DATA_RSTAT3_ILL_ENTER_ICD           : constant NvU32 := 16#1#;
    LW_PRGNLCL_RISCV_ICD_RDATA1_DATA_RSTAT3_ILL_EXPT                : constant NvU32 := 16#0#;
    LW_PRGNLCL_RISCV_ICD_RDATA1_DATA_RSTAT3_BKPT_ENTER_ICD          : constant NvU32 := 16#1#;
    LW_PRGNLCL_RISCV_ICD_RDATA1_DATA_RSTAT3_BKPT_EXPT               : constant NvU32 := 16#0#;
    LW_PRGNLCL_RISCV_ICD_RDATA1_DATA_RSTAT3_LAMA_ENTER_ICD          : constant NvU32 := 16#1#;
    LW_PRGNLCL_RISCV_ICD_RDATA1_DATA_RSTAT3_LAMA_EXPT               : constant NvU32 := 16#0#;
    LW_PRGNLCL_RISCV_ICD_RDATA1_DATA_RSTAT3_LFAULT_ENTER_ICD        : constant NvU32 := 16#1#;
    LW_PRGNLCL_RISCV_ICD_RDATA1_DATA_RSTAT3_LFAULT_EXPT             : constant NvU32 := 16#0#;
    LW_PRGNLCL_RISCV_ICD_RDATA1_DATA_RSTAT3_SAMA_ENTER_ICD          : constant NvU32 := 16#1#;
    LW_PRGNLCL_RISCV_ICD_RDATA1_DATA_RSTAT3_SAMA_EXPT               : constant NvU32 := 16#0#;
    LW_PRGNLCL_RISCV_ICD_RDATA1_DATA_RSTAT3_SFAULT_ENTER_ICD        : constant NvU32 := 16#1#;
    LW_PRGNLCL_RISCV_ICD_RDATA1_DATA_RSTAT3_SFAULT_EXPT             : constant NvU32 := 16#0#;
    LW_PRGNLCL_RISCV_ICD_RDATA1_DATA_RSTAT3_UCALL_ENTER_ICD         : constant NvU32 := 16#1#;
    LW_PRGNLCL_RISCV_ICD_RDATA1_DATA_RSTAT3_UCALL_EXPT              : constant NvU32 := 16#0#;
    LW_PRGNLCL_RISCV_ICD_RDATA1_DATA_RSTAT3_SCALL_ENTER_ICD         : constant NvU32 := 16#1#;
    LW_PRGNLCL_RISCV_ICD_RDATA1_DATA_RSTAT3_SCALL_EXPT              : constant NvU32 := 16#0#;
    LW_PRGNLCL_RISCV_ICD_RDATA1_DATA_RSTAT3_MCALL_ENTER_ICD         : constant NvU32 := 16#1#;
    LW_PRGNLCL_RISCV_ICD_RDATA1_DATA_RSTAT3_MCALL_EXPT              : constant NvU32 := 16#0#;
    LW_PRGNLCL_RISCV_ICD_RDATA1_DATA_RSTAT3_IPFAULT_ENTER_ICD       : constant NvU32 := 16#1#;
    LW_PRGNLCL_RISCV_ICD_RDATA1_DATA_RSTAT3_IPFAULT_EXPT            : constant NvU32 := 16#0#;
    LW_PRGNLCL_RISCV_ICD_RDATA1_DATA_RSTAT3_LPFAULT_ENTER_ICD       : constant NvU32 := 16#1#;
    LW_PRGNLCL_RISCV_ICD_RDATA1_DATA_RSTAT3_LPFAULT_EXPT            : constant NvU32 := 16#0#;
    LW_PRGNLCL_RISCV_ICD_RDATA1_DATA_RSTAT3_SPFAULT_ENTER_ICD       : constant NvU32 := 16#1#;
    LW_PRGNLCL_RISCV_ICD_RDATA1_DATA_RSTAT3_SPFAULT_EXPT            : constant NvU32 := 16#0#;
    LW_PRGNLCL_RISCV_ICD_RDATA1_DATA_RSTAT3_U_SINGLE_STEP_ENTER_ICD : constant NvU32 := 16#1#;
    LW_PRGNLCL_RISCV_ICD_RDATA1_DATA_RSTAT3_U_SINGLE_STEP_EXPT      : constant NvU32 := 16#0#;
    LW_PRGNLCL_RISCV_ICD_RDATA1_DATA_RSTAT3_S_SINGLE_STEP_ENTER_ICD : constant NvU32 := 16#1#;
    LW_PRGNLCL_RISCV_ICD_RDATA1_DATA_RSTAT3_S_SINGLE_STEP_EXPT      : constant NvU32 := 16#0#;
    LW_PRGNLCL_RISCV_ICD_RDATA1_DATA_RSTAT4_RS_VALUE                : constant NvU32 := 16#0#;

    type LW_PRGNLCL_RISCV_ICD_RDATA1_Register is record
        Data : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_ICD_RDATA1_Register use record
        Data at 0 range 0 .. 31;
    end record;

    type LW_PRGNLCL_RISCV_RPC_Register is record
        Pc_Lo : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_RPC_Register use record
        Pc_Lo at 0 range 0 .. 31;
    end record;

    type LW_PRGNLCL_RISCV_RSTAT0_Register is record
        Rob_Full          : NvU1;
        Ifu_Instbuf_Full  : NvU1;
        Ifu_Linefill_Full : NvU1;
        Lsu_Stb_Full      : NvU1;
        Lsu_Mem_Wack_Full : NvU1;
        Lsu_Io_Wack_Full  : NvU1;
        Lsu_Linefill_Full : NvU1;
        Lsu_Vicbuf_Full   : NvU1;
        Lsu_Cb_Full       : NvU1;
        Alu_Rs_Full       : NvU1;
        Imd_Rs_Full       : NvU1;
        Fpu_Rs_Full       : NvU1;
        Iowr_Inflight     : NvU8;
        Memwr_Inflight    : NvU8;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_RSTAT0_Register use record
        Rob_Full          at 0 range  0 ..  0;
        Ifu_Instbuf_Full  at 0 range  1 ..  1;
        Ifu_Linefill_Full at 0 range  2 ..  2;
        Lsu_Stb_Full      at 0 range  3 ..  3;
        Lsu_Mem_Wack_Full at 0 range  4 ..  4;
        Lsu_Io_Wack_Full  at 0 range  5 ..  5;
        Lsu_Linefill_Full at 0 range  6 ..  6;
        Lsu_Vicbuf_Full   at 0 range  7 ..  7;
        Lsu_Cb_Full       at 0 range  8 ..  8;
        Alu_Rs_Full       at 0 range  9 ..  9;
        Imd_Rs_Full       at 0 range 10 .. 10;
        Fpu_Rs_Full       at 0 range 11 .. 11;
        Iowr_Inflight     at 0 range 16 .. 23;
        Memwr_Inflight    at 0 range 24 .. 31;
    end record;

    LW_PRGNLCL_RISCV_TRACECTL_LOW_THSHD_INIT  : constant NvU8 := 16#0#;
    LW_PRGNLCL_RISCV_TRACECTL_HIGH_THSHD_INIT : constant NvU8 := 16#ff#;
    type LW_PRGNLCL_RISCV_TRACECTL_UMODE_ENABLE_Field is (ENABLE_FALSE, ENABLE_TRUE) with
        Size => 1;
    for LW_PRGNLCL_RISCV_TRACECTL_UMODE_ENABLE_Field use (ENABLE_FALSE => 16#0#, ENABLE_TRUE => 16#1#);
    type LW_PRGNLCL_RISCV_TRACECTL_SMODE_ENABLE_Field is (ENABLE_FALSE, ENABLE_TRUE) with
        Size => 1;
    for LW_PRGNLCL_RISCV_TRACECTL_SMODE_ENABLE_Field use (ENABLE_FALSE => 16#0#, ENABLE_TRUE => 16#1#);
    type LW_PRGNLCL_RISCV_TRACECTL_MMODE_ENABLE_Field is (ENABLE_FALSE, ENABLE_TRUE) with
        Size => 1;
    for LW_PRGNLCL_RISCV_TRACECTL_MMODE_ENABLE_Field use (ENABLE_FALSE => 16#0#, ENABLE_TRUE => 16#1#);
    type LW_PRGNLCL_RISCV_TRACECTL_MODE_Field is (MODE_FULL, MODE_REDUCED, MODE_STACK) with
        Size => 2;
    for LW_PRGNLCL_RISCV_TRACECTL_MODE_Field use (MODE_FULL => 16#0#, MODE_REDUCED => 16#1#, MODE_STACK => 16#2#);
    LW_PRGNLCL_RISCV_TRACECTL_BELOW_LO_INIT : constant NvU1 := 16#0#;
    LW_PRGNLCL_RISCV_TRACECTL_ABOVE_HI_INIT : constant NvU1 := 16#0#;
    type LW_PRGNLCL_RISCV_TRACECTL_INTR_ENABLE_Field is (ENABLE_FALSE, ENABLE_TRUE) with
        Size => 1;
    for LW_PRGNLCL_RISCV_TRACECTL_INTR_ENABLE_Field use (ENABLE_FALSE => 16#0#, ENABLE_TRUE => 16#1#);
    LW_PRGNLCL_RISCV_TRACECTL_FULL_INIT  : constant NvU1 := 16#0#;
    LW_PRGNLCL_RISCV_TRACECTL_EMPTY_INIT : constant NvU1 := 16#0#;

    type LW_PRGNLCL_RISCV_TRACECTL_Register is record
        Low_Thshd    : NvU8;
        High_Thshd   : NvU8;
        Umode_Enable : LW_PRGNLCL_RISCV_TRACECTL_UMODE_ENABLE_Field;
        Smode_Enable : LW_PRGNLCL_RISCV_TRACECTL_SMODE_ENABLE_Field;
        Mmode_Enable : LW_PRGNLCL_RISCV_TRACECTL_MMODE_ENABLE_Field;
        Mode         : LW_PRGNLCL_RISCV_TRACECTL_MODE_Field;
        Below_Lo     : NvU1;
        Above_Hi     : NvU1;
        Intr_Enable  : LW_PRGNLCL_RISCV_TRACECTL_INTR_ENABLE_Field;
        Full         : NvU1;
        Empty        : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_TRACECTL_Register use record
        Low_Thshd    at 0 range  0 ..  7;
        High_Thshd   at 0 range  8 .. 15;
        Umode_Enable at 0 range 20 .. 20;
        Smode_Enable at 0 range 21 .. 21;
        Mmode_Enable at 0 range 23 .. 23;
        Mode         at 0 range 24 .. 25;
        Below_Lo     at 0 range 27 .. 27;
        Above_Hi     at 0 range 28 .. 28;
        Intr_Enable  at 0 range 29 .. 29;
        Full         at 0 range 30 .. 30;
        Empty        at 0 range 31 .. 31;
    end record;

    LW_PRGNLCL_RISCV_TRACE_RDIDX_RDIDX_INIT  : constant NvU8 := 16#0#;
    LW_PRGNLCL_RISCV_TRACE_RDIDX_RSVD0_INIT  : constant NvU8 := 16#0#;
    LW_PRGNLCL_RISCV_TRACE_RDIDX_MAXIDX_INIT : constant NvU8 := 16#3f#;
    LW_PRGNLCL_RISCV_TRACE_RDIDX_RSVD1_INIT  : constant NvU8 := 16#0#;

    type LW_PRGNLCL_RISCV_TRACE_RDIDX_Register is record
        Rdidx  : NvU8;
        Rsvd0  : NvU8;
        Maxidx : NvU8;
        Rsvd1  : NvU8;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_TRACE_RDIDX_Register use record
        Rdidx  at 0 range  0 ..  7;
        Rsvd0  at 0 range  8 .. 15;
        Maxidx at 0 range 16 .. 23;
        Rsvd1  at 0 range 24 .. 31;
    end record;

    LW_PRGNLCL_RISCV_TRACE_WTIDX_WTIDX_INIT : constant NvU8  := 16#0#;
    LW_PRGNLCL_RISCV_TRACE_WTIDX_RSVD1_INIT : constant NvU24 := 16#0#;

    type LW_PRGNLCL_RISCV_TRACE_WTIDX_Register is record
        Wtidx : NvU8;
        Rsvd1 : NvU24;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_TRACE_WTIDX_Register use record
        Wtidx at 0 range 24 .. 31;
        Rsvd1 at 0 range  0 .. 23;
    end record;

    LW_PRGNLCL_RISCV_TRACEPC_HI_PC_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_RISCV_TRACEPC_HI_Register is record
        Pc : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_TRACEPC_HI_Register use record
        Pc at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_RISCV_TRACEPC_LO_PC_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_RISCV_TRACEPC_LO_Register is record
        Pc : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_TRACEPC_LO_Register use record
        Pc at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_RISCV_MTIMECMP_HI_VALUE_INIT : constant NvU32 := 16#ffff_ffff#;

    type LW_PRGNLCL_RISCV_MTIMECMP_HI_Register is record
        Value : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_MTIMECMP_HI_Register use record
        Value at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_RISCV_MTIMECMP_LO_VALUE_INIT : constant NvU32 := 16#ffff_ffff#;

    type LW_PRGNLCL_RISCV_MTIMECMP_LO_Register is record
        Value : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_MTIMECMP_LO_Register use record
        Value at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_RISCV_INTR_STATUS_S_SOFTWARE_INTR_INIT : constant NvU1 := 16#0#;
    LW_PRGNLCL_RISCV_INTR_STATUS_S_EXTERNAL_INTR_INT  : constant NvU1 := 16#0#;
    LW_PRGNLCL_RISCV_INTR_STATUS_S_TIMER_INTR_INIT    : constant NvU1 := 16#0#;
    LW_PRGNLCL_RISCV_INTR_STATUS_SOFTWARE_INTR_INIT   : constant NvU1 := 16#0#;
    LW_PRGNLCL_RISCV_INTR_STATUS_EXTERNAL_INTR_INT    : constant NvU1 := 16#0#;
    LW_PRGNLCL_RISCV_INTR_STATUS_TIMER_INTR_INIT      : constant NvU1 := 16#0#;
    LW_PRGNLCL_RISCV_INTR_STATUS_M_SOFTWARE_INTR_INIT : constant      := 16#0#;
    LW_PRGNLCL_RISCV_INTR_STATUS_M_EXTERNAL_INTR_INT  : constant      := 16#0#;
    LW_PRGNLCL_RISCV_INTR_STATUS_M_TIMER_INTR_INIT    : constant      := 16#0#;

    type LW_PRGNLCL_RISCV_INTR_STATUS_Register is record
        S_Software_Intr : NvU1;
        S_External_Intr : NvU1;
        S_Timer_Intr    : NvU1;
        Software_Intr   : NvU1;
        External_Intr   : NvU1;
        Timer_Intr      : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_INTR_STATUS_Register use record
        S_Software_Intr at 0 range 5 .. 5;
        S_External_Intr at 0 range 4 .. 4;
        S_Timer_Intr    at 0 range 3 .. 3;
        Software_Intr   at 0 range 2 .. 2;
        External_Intr   at 0 range 1 .. 1;
        Timer_Intr      at 0 range 0 .. 0;
    end record;

    type LW_PRGNLCL_RISCV_MSIP_VLD_Field is (VLD_FALSE, VLD_TRUE) with
        Size => 1;
    for LW_PRGNLCL_RISCV_MSIP_VLD_Field use (VLD_FALSE => 16#0#, VLD_TRUE => 16#1#);

    type LW_PRGNLCL_RISCV_MSIP_Register is record
        Vld : LW_PRGNLCL_RISCV_MSIP_VLD_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_MSIP_Register use record
        Vld at 0 range 0 .. 0;
    end record;

    type LW_PRGNLCL_RISCV_PRIV_ERR_STAT_VALID_Field is (VALID_FALSE, VALID_TRUE) with
        Size => 1;
    for LW_PRGNLCL_RISCV_PRIV_ERR_STAT_VALID_Field use (VALID_FALSE => 16#0#, VALID_TRUE => 16#1#);
    type LW_PRGNLCL_RISCV_PRIV_ERR_STAT_WRITE_Field is (WRITE_FALSE, WRITE_TRUE) with
        Size => 1;
    for LW_PRGNLCL_RISCV_PRIV_ERR_STAT_WRITE_Field use (WRITE_FALSE => 16#0#, WRITE_TRUE => 16#1#);
    LW_PRGNLCL_RISCV_PRIV_ERR_STAT_RESERVED_INIT : constant NvU30 := 16#0#;

    type LW_PRGNLCL_RISCV_PRIV_ERR_STAT_Register is record
        Valid    : LW_PRGNLCL_RISCV_PRIV_ERR_STAT_VALID_Field;
        Write    : LW_PRGNLCL_RISCV_PRIV_ERR_STAT_WRITE_Field;
        Reserved : NvU30;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_PRIV_ERR_STAT_Register use record
        Valid    at 0 range 31 .. 31;
        Write    at 0 range 30 .. 30;
        Reserved at 0 range  0 .. 29;
    end record;

    LW_PRGNLCL_RISCV_PRIV_ERR_INFO_ERROR_INFO_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_RISCV_PRIV_ERR_INFO_Register is record
        Error_Info : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_PRIV_ERR_INFO_Register use record
        Error_Info at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_RISCV_PRIV_ERR_ADDR_ADDR_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_RISCV_PRIV_ERR_ADDR_Register is record
        Addr : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_PRIV_ERR_ADDR_Register use record
        Addr at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_RISCV_PRIV_ERR_ADDR_HI_ADDR_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_RISCV_PRIV_ERR_ADDR_HI_Register is record
        Addr : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_PRIV_ERR_ADDR_HI_Register use record
        Addr at 0 range 0 .. 31;
    end record;

    type LW_PRGNLCL_RISCV_HUB_ERR_STAT_VALID_Field is (VALID_FALSE, VALID_TRUE) with
        Size => 1;
    for LW_PRGNLCL_RISCV_HUB_ERR_STAT_VALID_Field use (VALID_FALSE => 16#0#, VALID_TRUE => 16#1#);
    LW_PRGNLCL_RISCV_HUB_ERR_STAT_RESERVED_INIT : constant NvU31 := 16#0#;

    type LW_PRGNLCL_RISCV_HUB_ERR_STAT_Register is record
        Valid    : LW_PRGNLCL_RISCV_HUB_ERR_STAT_VALID_Field;
        Reserved : NvU31;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_HUB_ERR_STAT_Register use record
        Valid    at 0 range 31 .. 31;
        Reserved at 0 range  0 .. 30;
    end record;

    LW_PRGNLCL_RISCV_IROM_PATCH_CAM_INDEX_INDEX_INIT : constant NvU5 := 16#0#;

    type LW_PRGNLCL_RISCV_IROM_PATCH_CAM_INDEX_Register is record
        Index : NvU5;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_IROM_PATCH_CAM_INDEX_Register use record
        Index at 0 range 0 .. 4;
    end record;

    LW_PRGNLCL_RISCV_IROM_PATCH_CAM_ADDR_VALID_ADDR_INIT  : constant NvU18 := 16#0#;
    LW_PRGNLCL_RISCV_IROM_PATCH_CAM_ADDR_VALID_VALID_INIT : constant NvU1  := 16#0#;

    type LW_PRGNLCL_RISCV_IROM_PATCH_CAM_ADDR_VALID_Register is record
        Addr  : NvU18;
        Valid : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_IROM_PATCH_CAM_ADDR_VALID_Register use record
        Addr  at 0 range  0 .. 17;
        Valid at 0 range 31 .. 31;
    end record;

    LW_PRGNLCL_RISCV_IROM_PATCH_CAM_DATA_DATA_INIT : constant NvU16 := 16#0#;

    type LW_PRGNLCL_RISCV_IROM_PATCH_CAM_DATA_Register is record
        Data : NvU16;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_IROM_PATCH_CAM_DATA_Register use record
        Data at 0 range 0 .. 15;
    end record;

    LW_PRGNLCL_RISCV_IROM_PATCH_SECURE_IPATCH_LOCK_INIT : constant NvU1 := 16#1#;

    type LW_PRGNLCL_RISCV_IROM_PATCH_SECURE_Register is record
        Ipatch_Lock : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_IROM_PATCH_SECURE_Register use record
        Ipatch_Lock at 0 range 0 .. 0;
    end record;

    LW_PRGNLCL_RISCV_IOPMP_INDEX_VAL_INIT : constant NvU5 := 16#0#;

    type LW_PRGNLCL_RISCV_IOPMP_INDEX_Register is record
        Val : NvU5;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_IOPMP_INDEX_Register use record
        Val at 0 range 0 .. 4;
    end record;

    type LW_PRGNLCL_RISCV_IOPMP_CFG_READ_Field is (READ_DISABLE, READ_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IOPMP_CFG_READ_Field use (READ_DISABLE => 16#0#, READ_ENABLE => 16#1#);
    type LW_PRGNLCL_RISCV_IOPMP_CFG_WRITE_Field is (WRITE_DISABLE, WRITE_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IOPMP_CFG_WRITE_Field use (WRITE_DISABLE => 16#0#, WRITE_ENABLE => 16#1#);
    LW_PRGNLCL_RISCV_IOPMP_CFG_MASTER_ALL_MASTERS_ENABLED : constant NvU19 := 16#7_ffff#;
    type LW_PRGNLCL_RISCV_IOPMP_CFG_LOCK_Field is (LOCK_UNLOCKED, LOCK_LOCKED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IOPMP_CFG_LOCK_Field use (LOCK_UNLOCKED => 16#0#, LOCK_LOCKED => 16#1#);
    LW_PRGNLCL_RISCV_IOPMP_CFG_MASTER_FBDMA_IMEM_ENABLE  : constant := 16#1#;
    LW_PRGNLCL_RISCV_IOPMP_CFG_MASTER_FBDMA_IMEM_DISABLE : constant := 16#0#;
    LW_PRGNLCL_RISCV_IOPMP_CFG_MASTER_FBDMA_DMEM_ENABLE  : constant := 16#1#;
    LW_PRGNLCL_RISCV_IOPMP_CFG_MASTER_FBDMA_DMEM_DISABLE : constant := 16#0#;
    LW_PRGNLCL_RISCV_IOPMP_CFG_MASTER_SHA_ENABLE         : constant := 16#1#;
    LW_PRGNLCL_RISCV_IOPMP_CFG_MASTER_SHA_DISABLE        : constant := 16#0#;
    LW_PRGNLCL_RISCV_IOPMP_CFG_MASTER_CPDMA_ENABLE       : constant := 16#1#;
    LW_PRGNLCL_RISCV_IOPMP_CFG_MASTER_CPDMA_DISABLE      : constant := 16#0#;
    LW_PRGNLCL_RISCV_IOPMP_CFG_MASTER_PMB_ENABLE         : constant := 16#1#;
    LW_PRGNLCL_RISCV_IOPMP_CFG_MASTER_PMB_DISABLE        : constant := 16#0#;
    LW_PRGNLCL_RISCV_IOPMP_CFG_MASTER_GDMA_CHAN0_ENABLE  : constant := 16#1#;
    LW_PRGNLCL_RISCV_IOPMP_CFG_MASTER_GDMA_CHAN0_DISABLE : constant := 16#0#;
    LW_PRGNLCL_RISCV_IOPMP_CFG_MASTER_GDMA_CHAN1_ENABLE  : constant := 16#1#;
    LW_PRGNLCL_RISCV_IOPMP_CFG_MASTER_GDMA_CHAN1_DISABLE : constant := 16#0#;
    LW_PRGNLCL_RISCV_IOPMP_CFG_MASTER_GDMA_CHAN2_ENABLE  : constant := 16#1#;
    LW_PRGNLCL_RISCV_IOPMP_CFG_MASTER_GDMA_CHAN2_DISABLE : constant := 16#0#;
    LW_PRGNLCL_RISCV_IOPMP_CFG_MASTER_GDMA_CHAN3_ENABLE  : constant := 16#1#;
    LW_PRGNLCL_RISCV_IOPMP_CFG_MASTER_GDMA_CHAN3_DISABLE : constant := 16#0#;
    LW_PRGNLCL_RISCV_IOPMP_CFG_MASTER_SE_AES_ENABLE      : constant := 16#1#;
    LW_PRGNLCL_RISCV_IOPMP_CFG_MASTER_SE_AES_DISABLE     : constant := 16#0#;
    LW_PRGNLCL_RISCV_IOPMP_CFG_MASTER_SE_HASH_ENABLE     : constant := 16#1#;
    LW_PRGNLCL_RISCV_IOPMP_CFG_MASTER_SE_HASH_DISABLE    : constant := 16#0#;

    type LW_PRGNLCL_RISCV_IOPMP_CFG_Register is record
        Read   : LW_PRGNLCL_RISCV_IOPMP_CFG_READ_Field;
        Write  : LW_PRGNLCL_RISCV_IOPMP_CFG_WRITE_Field;
        Master : NvU19;
        Lock   : LW_PRGNLCL_RISCV_IOPMP_CFG_LOCK_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_IOPMP_CFG_Register use record
        Read   at 0 range  0 ..  0;
        Write  at 0 range  1 ..  1;
        Master at 0 range  4 .. 22;
        Lock   at 0 range 31 .. 31;
    end record;

    LW_PRGNLCL_RISCV_IOPMP_ADDR_HI_VAL_INIT : constant NvU30 := 16#0#;

    type LW_PRGNLCL_RISCV_IOPMP_ADDR_HI_Register is record
        Val : NvU30;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_IOPMP_ADDR_HI_Register use record
        Val at 0 range 0 .. 29;
    end record;

    LW_PRGNLCL_RISCV_IOPMP_ADDR_LO_ABOVE1K_INIT : constant NvU25 := 16#0#;
    LW_PRGNLCL_RISCV_IOPMP_ADDR_LO_LO_1K_INIT   : constant NvU7  := 16#7f#;

    type LW_PRGNLCL_RISCV_IOPMP_ADDR_LO_Register is record
        Above1k : NvU25;
        Lo_1k   : NvU7;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_IOPMP_ADDR_LO_Register use record
        Above1k at 0 range 7 .. 31;
        Lo_1k   at 0 range 0 ..  6;
    end record;

    LW_PRGNLCL_RISCV_IOPMP_MODE_VAL_INIT        : constant NvU32 := 16#0#;
    LW_PRGNLCL_RISCV_IOPMP_MODE_VAL_ENTRY_OFF   : constant       := 16#0#;
    LW_PRGNLCL_RISCV_IOPMP_MODE_VAL_ENTRY_NAPOT : constant       := 16#3#;

    type LW_PRGNLCL_RISCV_IOPMP_MODE_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_IOPMP_MODE_Register use record
        Val at 0 range 0 .. 31;
    end record;

    type LW_PRGNLCL_RISCV_IOPMP_ERR_STAT_VALID_Field is (VALID_FALSE, VALID_TURE) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IOPMP_ERR_STAT_VALID_Field use (VALID_FALSE => 16#0#, VALID_TURE => 16#1#);

    type LW_PRGNLCL_RISCV_IOPMP_ERR_STAT_Register is record
        Valid : LW_PRGNLCL_RISCV_IOPMP_ERR_STAT_VALID_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_IOPMP_ERR_STAT_Register use record
        Valid at 0 range 31 .. 31;
    end record;

    type LW_PRGNLCL_RISCV_IOPMP_ERR_INFO_MASTER_Field is
        (MASTER_FBDMA_IMEM, MASTER_FBDMA_DMEM, MASTER_SHA, MASTER_CPDMA, MASTER_PMB0, MASTER_PMB1, MASTER_PMB2, MASTER_PMB3, MASTER_GDMA_CHAN0_0, MASTER_GDMA_CHAN0_1,
         MASTER_GDMA_CHAN1_0, MASTER_GDMA_CHAN1_1, MASTER_GDMA_CHAN2_0, MASTER_GDMA_CHAN2_1, MASTER_GDMA_CHAN3_0, MASTER_GDMA_CHAN3_1, MASTER_SE_AES_0, MASTER_SE_AES_1,
         MASTER_SE_HASH) with
        Size => 5;
    for LW_PRGNLCL_RISCV_IOPMP_ERR_INFO_MASTER_Field use
        (MASTER_FBDMA_IMEM   => 16#0#, MASTER_FBDMA_DMEM => 16#1#, MASTER_SHA => 16#2#, MASTER_CPDMA => 16#3#, MASTER_PMB0 => 16#4#, MASTER_PMB1 => 16#5#, MASTER_PMB2 => 16#6#,
         MASTER_PMB3 => 16#7#, MASTER_GDMA_CHAN0_0 => 16#8#, MASTER_GDMA_CHAN0_1 => 16#9#, MASTER_GDMA_CHAN1_0 => 16#a#, MASTER_GDMA_CHAN1_1 => 16#b#, MASTER_GDMA_CHAN2_0 => 16#c#,
         MASTER_GDMA_CHAN2_1 => 16#d#, MASTER_GDMA_CHAN3_0 => 16#e#, MASTER_GDMA_CHAN3_1 => 16#f#, MASTER_SE_AES_0 => 16#10#, MASTER_SE_AES_1 => 16#11#, MASTER_SE_HASH => 16#12#);
    type LW_PRGNLCL_RISCV_IOPMP_ERR_INFO_READ_Field is (READ_FALSE, READ_TRUE) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IOPMP_ERR_INFO_READ_Field use (READ_FALSE => 16#0#, READ_TRUE => 16#1#);
    LW_PRGNLCL_RISCV_IOPMP_ERR_INFO_INFO_ENTRY_INIT : constant NvU6 := 16#0#;

    type LW_PRGNLCL_RISCV_IOPMP_ERR_INFO_Register is record
        Master     : LW_PRGNLCL_RISCV_IOPMP_ERR_INFO_MASTER_Field;
        Read       : LW_PRGNLCL_RISCV_IOPMP_ERR_INFO_READ_Field;
        Info_Entry : NvU6;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_IOPMP_ERR_INFO_Register use record
        Master     at 0 range  0 ..  4;
        Read       at 0 range  5 ..  5;
        Info_Entry at 0 range 16 .. 21;
    end record;

    LW_PRGNLCL_RISCV_IOPMP_ERR_ADDR_HI_ADDR_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_RISCV_IOPMP_ERR_ADDR_HI_Register is record
        Addr : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_IOPMP_ERR_ADDR_HI_Register use record
        Addr at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_RISCV_IOPMP_ERR_ADDR_LO_ADDR_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_RISCV_IOPMP_ERR_ADDR_LO_Register is record
        Addr : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_IOPMP_ERR_ADDR_LO_Register use record
        Addr at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_RISCV_IOPMP_ERR_CAPEN_MASTER_ALL_MASTERS_ENABLED : constant NvU19 := 16#7_ffff#;
    LW_PRGNLCL_RISCV_IOPMP_ERR_CAPEN_MASTER_FBDMA_IMEM_ENABLE   : constant       := 16#1#;
    LW_PRGNLCL_RISCV_IOPMP_ERR_CAPEN_MASTER_FBDMA_IMEM_DISABLE  : constant       := 16#0#;
    LW_PRGNLCL_RISCV_IOPMP_ERR_CAPEN_MASTER_FBDMA_DMEM_ENABLE   : constant       := 16#1#;
    LW_PRGNLCL_RISCV_IOPMP_ERR_CAPEN_MASTER_FBDMA_DMEM_DISABLE  : constant       := 16#0#;
    LW_PRGNLCL_RISCV_IOPMP_ERR_CAPEN_MASTER_SHA_ENABLE          : constant       := 16#1#;
    LW_PRGNLCL_RISCV_IOPMP_ERR_CAPEN_MASTER_SHA_DISABLE         : constant       := 16#0#;
    LW_PRGNLCL_RISCV_IOPMP_ERR_CAPEN_MASTER_CPDMA_ENABLE        : constant       := 16#1#;
    LW_PRGNLCL_RISCV_IOPMP_ERR_CAPEN_MASTER_CPDMA_DISABLE       : constant       := 16#0#;
    LW_PRGNLCL_RISCV_IOPMP_ERR_CAPEN_MASTER_PMB_ENABLE          : constant       := 16#1#;
    LW_PRGNLCL_RISCV_IOPMP_ERR_CAPEN_MASTER_PMB_DISABLE         : constant       := 16#0#;
    LW_PRGNLCL_RISCV_IOPMP_ERR_CAPEN_MASTER_GDMA_CHAN0_ENABLE   : constant       := 16#1#;
    LW_PRGNLCL_RISCV_IOPMP_ERR_CAPEN_MASTER_GDMA_CHAN0_DISABLE  : constant       := 16#0#;
    LW_PRGNLCL_RISCV_IOPMP_ERR_CAPEN_MASTER_GDMA_CHAN1_ENABLE   : constant       := 16#1#;
    LW_PRGNLCL_RISCV_IOPMP_ERR_CAPEN_MASTER_GDMA_CHAN1_DISABLE  : constant       := 16#0#;
    LW_PRGNLCL_RISCV_IOPMP_ERR_CAPEN_MASTER_GDMA_CHAN2_ENABLE   : constant       := 16#1#;
    LW_PRGNLCL_RISCV_IOPMP_ERR_CAPEN_MASTER_GDMA_CHAN2_DISABLE  : constant       := 16#0#;
    LW_PRGNLCL_RISCV_IOPMP_ERR_CAPEN_MASTER_GDMA_CHAN3_ENABLE   : constant       := 16#1#;
    LW_PRGNLCL_RISCV_IOPMP_ERR_CAPEN_MASTER_GDMA_CHAN3_DISABLE  : constant       := 16#0#;
    LW_PRGNLCL_RISCV_IOPMP_ERR_CAPEN_MASTER_SE_AES_ENABLE       : constant       := 16#1#;
    LW_PRGNLCL_RISCV_IOPMP_ERR_CAPEN_MASTER_SE_AES_DISABLE      : constant       := 16#0#;
    LW_PRGNLCL_RISCV_IOPMP_ERR_CAPEN_MASTER_SE_HASH_ENABLE      : constant       := 16#1#;
    LW_PRGNLCL_RISCV_IOPMP_ERR_CAPEN_MASTER_SE_HASH_DISABLE     : constant       := 16#0#;

    type LW_PRGNLCL_RISCV_IOPMP_ERR_CAPEN_Register is record
        Master : NvU19;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_IOPMP_ERR_CAPEN_Register use record
        Master at 0 range 0 .. 18;
    end record;

    LW_PRGNLCL_RISCV_IOPMP_USER_CFG_MATCH_INT    : constant NvU16 := 16#0#;
    LW_PRGNLCL_RISCV_IOPMP_USER_CFG_MASK_DISABLE : constant NvU16 := 16#0#;

    type LW_PRGNLCL_RISCV_IOPMP_USER_CFG_Register is record
        Match : NvU16;
        Mask  : NvU16;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_IOPMP_USER_CFG_Register use record
        Match at 0 range  0 .. 15;
        Mask  at 0 range 16 .. 31;
    end record;

    LW_PRGNLCL_RISCV_SCPDMATRFMOFFS_OFFS_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_RISCV_SCPDMATRFMOFFS_Register is record
        Offs : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_SCPDMATRFMOFFS_Register use record
        Offs at 0 range 0 .. 31;
    end record;

    type LW_PRGNLCL_RISCV_SCPDMATRFCMD_SUPPRESS_Field is (SUPPRESS_DISABLE, SUPPRESS_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_RISCV_SCPDMATRFCMD_SUPPRESS_Field use (SUPPRESS_DISABLE => 16#0#, SUPPRESS_ENABLE => 16#1#);
    type LW_PRGNLCL_RISCV_SCPDMATRFCMD_SHORTCUT_Field is (SHORTCUT_DISABLE, SHORTCUT_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_RISCV_SCPDMATRFCMD_SHORTCUT_Field use (SHORTCUT_DISABLE => 16#0#, SHORTCUT_ENABLE => 16#1#);
    type LW_PRGNLCL_RISCV_SCPDMATRFCMD_IMEM_Field is (IMEM_FALSE, IMEM_TRUE) with
        Size => 1;
    for LW_PRGNLCL_RISCV_SCPDMATRFCMD_IMEM_Field use (IMEM_FALSE => 16#0#, IMEM_TRUE => 16#1#);
    type LW_PRGNLCL_RISCV_SCPDMATRFCMD_WRITE_Field is (WRITE_FALSE, WRITE_TRUE) with
        Size => 1;
    for LW_PRGNLCL_RISCV_SCPDMATRFCMD_WRITE_Field use (WRITE_FALSE => 16#0#, WRITE_TRUE => 16#1#);
    LW_PRGNLCL_RISCV_SCPDMATRFCMD_GPR_INIT : constant NvU3 := 16#0#;
    type LW_PRGNLCL_RISCV_SCPDMATRFCMD_CCI_EX_Field is (EX_SCPDMA, EX_CCI) with
        Size => 1;
    for LW_PRGNLCL_RISCV_SCPDMATRFCMD_CCI_EX_Field use (EX_SCPDMA => 16#0#, EX_CCI => 16#1#);
    LW_PRGNLCL_RISCV_SCPDMATRFCMD_CCI_CMD_INIT       : constant NvU16 := 16#0#;
    LW_PRGNLCL_RISCV_SCPDMATRFCMD_SIZE_16B           : constant       := 16#2#;
    LW_PRGNLCL_RISCV_SCPDMATRFCMD_SIZE_32B           : constant       := 16#3#;
    LW_PRGNLCL_RISCV_SCPDMATRFCMD_SIZE_64B           : constant       := 16#4#;
    LW_PRGNLCL_RISCV_SCPDMATRFCMD_SIZE_128B          : constant       := 16#5#;
    LW_PRGNLCL_RISCV_SCPDMATRFCMD_SIZE_256B          : constant       := 16#6#;
    LW_PRGNLCL_RISCV_SCPDMATRFCMD_OPCODE_NOP         : constant       := 16#0#;
    LW_PRGNLCL_RISCV_SCPDMATRFCMD_OPCODE_MOV         : constant       := 16#1#;
    LW_PRGNLCL_RISCV_SCPDMATRFCMD_OPCODE_PUSH        : constant       := 16#2#;
    LW_PRGNLCL_RISCV_SCPDMATRFCMD_OPCODE_FETCH       : constant       := 16#3#;
    LW_PRGNLCL_RISCV_SCPDMATRFCMD_OPCODE_RAND        : constant       := 16#4#;
    LW_PRGNLCL_RISCV_SCPDMATRFCMD_OPCODE_LOAD_TRACE0 : constant       := 16#5#;
    LW_PRGNLCL_RISCV_SCPDMATRFCMD_OPCODE_LOOP_TRACE0 : constant       := 16#6#;
    LW_PRGNLCL_RISCV_SCPDMATRFCMD_OPCODE_LOAD_TRACE1 : constant       := 16#7#;
    LW_PRGNLCL_RISCV_SCPDMATRFCMD_OPCODE_LOOP_TRACE1 : constant       := 16#8#;
    LW_PRGNLCL_RISCV_SCPDMATRFCMD_OPCODE_CHMOD       : constant       := 16#a#;
    LW_PRGNLCL_RISCV_SCPDMATRFCMD_OPCODE_XOR         : constant       := 16#b#;
    LW_PRGNLCL_RISCV_SCPDMATRFCMD_OPCODE_ADD         : constant       := 16#c#;
    LW_PRGNLCL_RISCV_SCPDMATRFCMD_OPCODE_AND         : constant       := 16#d#;
    LW_PRGNLCL_RISCV_SCPDMATRFCMD_OPCODE_BSWAP       : constant       := 16#e#;
    LW_PRGNLCL_RISCV_SCPDMATRFCMD_OPCODE_CMAC_SK     : constant       := 16#f#;
    LW_PRGNLCL_RISCV_SCPDMATRFCMD_OPCODE_SECRET      : constant       := 16#10#;
    LW_PRGNLCL_RISCV_SCPDMATRFCMD_OPCODE_KEY         : constant       := 16#11#;
    LW_PRGNLCL_RISCV_SCPDMATRFCMD_OPCODE_RKEY10      : constant       := 16#12#;
    LW_PRGNLCL_RISCV_SCPDMATRFCMD_OPCODE_RKEY1       : constant       := 16#13#;
    LW_PRGNLCL_RISCV_SCPDMATRFCMD_OPCODE_ENCRYPT     : constant       := 16#14#;
    LW_PRGNLCL_RISCV_SCPDMATRFCMD_OPCODE_DECRYPT     : constant       := 16#15#;
    LW_PRGNLCL_RISCV_SCPDMATRFCMD_OPCODE_COMPARE_SIG : constant       := 16#16#;
    LW_PRGNLCL_RISCV_SCPDMATRFCMD_OPCODE_ENCRYPT_SIG : constant       := 16#17#;
    LW_PRGNLCL_RISCV_SCPDMATRFCMD_OPCODE_FORGET_SIG  : constant       := 16#18#;

    type LW_PRGNLCL_RISCV_SCPDMATRFCMD_Register is record
        Suppress : LW_PRGNLCL_RISCV_SCPDMATRFCMD_SUPPRESS_Field;
        Shortcut : LW_PRGNLCL_RISCV_SCPDMATRFCMD_SHORTCUT_Field;
        Imem     : LW_PRGNLCL_RISCV_SCPDMATRFCMD_IMEM_Field;
        Write    : LW_PRGNLCL_RISCV_SCPDMATRFCMD_WRITE_Field;
        Gpr      : NvU3;
        Cci_Ex   : LW_PRGNLCL_RISCV_SCPDMATRFCMD_CCI_EX_Field;
        Cci_Cmd  : NvU16;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_SCPDMATRFCMD_Register use record
        Suppress at 0 range  2 ..  2;
        Shortcut at 0 range  3 ..  3;
        Imem     at 0 range  4 ..  4;
        Write    at 0 range  5 ..  5;
        Gpr      at 0 range  6 ..  8;
        Cci_Ex   at 0 range 15 .. 15;
        Cci_Cmd  at 0 range 16 .. 31;
    end record;

    type LW_PRGNLCL_RISCV_SCPDMAPOLL_DMA_ACTIVE_Field is (ACTIVE_IDLE, ACTIVE_ACTIVE) with
        Size => 1;
    for LW_PRGNLCL_RISCV_SCPDMAPOLL_DMA_ACTIVE_Field use (ACTIVE_IDLE => 16#0#, ACTIVE_ACTIVE => 16#1#);
    type LW_PRGNLCL_RISCV_SCPDMAPOLL_ERROR_CODE_Field is (CODE_NO_ERROR, CODE_NOT_SIZE_ALIGNED, CODE_SECRET_NOT_ALLOWED) with
        Size => 2;
    for LW_PRGNLCL_RISCV_SCPDMAPOLL_ERROR_CODE_Field use (CODE_NO_ERROR => 16#0#, CODE_NOT_SIZE_ALIGNED => 16#1#, CODE_SECRET_NOT_ALLOWED => 16#2#);
    LW_PRGNLCL_RISCV_SCPDMAPOLL_WCOUNT_INIT   : constant NvU4 := 16#0#;
    LW_PRGNLCL_RISCV_SCPDMAPOLL_RCOUNT_INIT   : constant NvU4 := 16#0#;
    LW_PRGNLCL_RISCV_SCPDMAPOLL_REQQ_NUM_INIT : constant NvU4 := 16#0#;

    type LW_PRGNLCL_RISCV_SCPDMAPOLL_Register is record
        Dma_Active : LW_PRGNLCL_RISCV_SCPDMAPOLL_DMA_ACTIVE_Field;
        Error_Clr  : NvU1;
        Error_Code : LW_PRGNLCL_RISCV_SCPDMAPOLL_ERROR_CODE_Field;
        Wcount     : NvU4;
        Rcount     : NvU4;
        Reqq_Num   : NvU4;
        Reqq_Depth : NvU4;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_SCPDMAPOLL_Register use record
        Dma_Active at 0 range  0 ..  0;
        Error_Clr  at 0 range  4 ..  4;
        Error_Code at 0 range  8 ..  9;
        Wcount     at 0 range 16 .. 19;
        Rcount     at 0 range 20 .. 23;
        Reqq_Num   at 0 range 24 .. 27;
        Reqq_Depth at 0 range 28 .. 31;
    end record;

    LW_PRGNLCL_RISCV_SCP_SECRET_MASK_VAL_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_RISCV_SCP_SECRET_MASK_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_SCP_SECRET_MASK_Register use record
        Val at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_RISCV_SCP_SECRET_MASK_LOCK_VAL_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_RISCV_SCP_SECRET_MASK_LOCK_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_SCP_SECRET_MASK_LOCK_Register use record
        Val at 0 range 0 .. 31;
    end record;

    type LW_PRGNLCL_RISCV_BR_VER_Register is record
        Dev   : NvU12;
        Eco   : NvU4;
        Minor : NvU8;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_BR_VER_Register use record
        Dev   at 0 range  0 .. 11;
        Eco   at 0 range 12 .. 15;
        Minor at 0 range 16 .. 23;
    end record;

    type LW_PRGNLCL_RISCV_BR_RETCODE_RESULT_Field is (RESULT_INIT, RESULT_RUNNING, RESULT_FAIL, RESULT_PASS) with
        Size => 2;
    for LW_PRGNLCL_RISCV_BR_RETCODE_RESULT_Field use (RESULT_INIT => 16#0#, RESULT_RUNNING => 16#1#, RESULT_FAIL => 16#2#, RESULT_PASS => 16#3#);
    LW_PRGNLCL_RISCV_BR_RETCODE_PHASE_ENTRY                                    : constant NvU6  := 16#0#;
    LW_PRGNLCL_RISCV_BR_RETCODE_PHASE_INIT_DEVICE                              : constant NvU6  := 16#1#;
    LW_PRGNLCL_RISCV_BR_RETCODE_PHASE_LOAD_PKC_BOOT_PARAM                      : constant NvU6  := 16#2#;
    LW_PRGNLCL_RISCV_BR_RETCODE_PHASE_SANITIZE_STAGE2_PUBLIC_KEY               : constant NvU6  := 16#3#;
    LW_PRGNLCL_RISCV_BR_RETCODE_PHASE_VERIFY_STAGE2_SIGNATURE                  : constant NvU6  := 16#4#;
    LW_PRGNLCL_RISCV_BR_RETCODE_PHASE_SANITIZE_STAGE1_PUBLIC_KEY               : constant NvU6  := 16#5#;
    LW_PRGNLCL_RISCV_BR_RETCODE_PHASE_VERIFY_STAGE1_SIGNATURE                  : constant NvU6  := 16#6#;
    LW_PRGNLCL_RISCV_BR_RETCODE_PHASE_DECRYPT_MANIFEST                         : constant NvU6  := 16#7#;
    LW_PRGNLCL_RISCV_BR_RETCODE_PHASE_SANITIZE_MANIFEST                        : constant NvU6  := 16#8#;
    LW_PRGNLCL_RISCV_BR_RETCODE_PHASE_LOAD_FMC                                 : constant NvU6  := 16#9#;
    LW_PRGNLCL_RISCV_BR_RETCODE_PHASE_VERIFY_FMC_DIGEST                        : constant NvU6  := 16#a#;
    LW_PRGNLCL_RISCV_BR_RETCODE_PHASE_DECRYPT_FMC                              : constant NvU6  := 16#b#;
    LW_PRGNLCL_RISCV_BR_RETCODE_PHASE_DERIVE_KEY                               : constant NvU6  := 16#c#;
    LW_PRGNLCL_RISCV_BR_RETCODE_PHASE_SETUP_CTM                                : constant NvU6  := 16#d#;
    LW_PRGNLCL_RISCV_BR_RETCODE_PHASE_REVOKE_RESOURCE                          : constant NvU6  := 16#e#;
    LW_PRGNLCL_RISCV_BR_RETCODE_PHASE_CONFIGURE_FMC_ENV                        : constant NvU6  := 16#f#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_INIT                                  : constant NvU10 := 16#0#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_DMA_FB_ADDRESS_ERROR                  : constant NvU10 := 16#20#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_DMA_NACK_ERROR                        : constant NvU10 := 16#21#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_DMA_LOCK_ERROR                        : constant NvU10 := 16#22#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_DMA_TARGET_ERROR                      : constant NvU10 := 16#23#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_SHA_ACQUIRE_MUTEX_ERROR               : constant NvU10 := 16#40#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_SHA_EXECUTION_ERROR                   : constant NvU10 := 16#41#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_SHA_RESET_ERROR                       : constant NvU10 := 16#42#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_KDF_CONFIG_ERROR                      : constant NvU10 := 16#43#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_KDF_EXECUTION_ERROR                   : constant NvU10 := 16#44#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_DIO_READ_ERROR                        : constant NvU10 := 16#60#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_DIO_WRITE_ERROR                       : constant NvU10 := 16#61#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_SE_PDI_INVALID_ERROR                  : constant NvU10 := 16#80#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_SE_PKEYHASH_INVALID_ERROR             : constant NvU10 := 16#81#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_SECHUB_RTS_INITIALIZATION_ERROR       : constant NvU10 := 16#82#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_SECHUB_RTS_LOGGING_ERROR              : constant NvU10 := 16#83#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_SCP_LOAD_SECRET_ERROR                 : constant NvU10 := 16#a0#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_SCP_TRAPPED_DMA_NOT_ALIGNED_ERROR     : constant NvU10 := 16#a1#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_MOVE_KEY_ERROR                        : constant NvU10 := 16#a2#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_AES_CONFIG_ERROR                      : constant NvU10 := 16#a3#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_AES_GCM_KEY_INS_ERROR                 : constant NvU10 := 16#a4#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_AES_GCM_EXECUTION_ERROR               : constant NvU10 := 16#a5#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_AES_GCM_AUTH_ERROR                    : constant NvU10 := 16#a6#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_AES_GCM_KUW_ERROR                     : constant NvU10 := 16#a7#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_AES_CTR_KEY_INS_ERROR                 : constant NvU10 := 16#a8#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_AES_CTR_CONFIG_ERROR                  : constant NvU10 := 16#a9#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_AES_CTR_EXECUTION_ERROR               : constant NvU10 := 16#aa#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_MANIFEST_CODE_SIZE_ERROR              : constant NvU10 := 16#c0#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_MANIFEST_CORE_PMP_RESERVATION_ERROR   : constant NvU10 := 16#c1#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_MANIFEST_DATA_SIZE_ERROR              : constant NvU10 := 16#c2#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_MANIFEST_DEVICEMAP_BR_UNLOCK_ERROR    : constant NvU10 := 16#c3#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_MANIFEST_FAMILY_ID_ERROR              : constant NvU10 := 16#c4#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_MANIFEST_MSPM_VALUE_ERROR             : constant NvU10 := 16#c5#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_MANIFEST_PAD_INFO_MASK_ERROR          : constant NvU10 := 16#c6#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_MANIFEST_REG_PAIR_ADDRESS_ERROR       : constant NvU10 := 16#c7#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_MANIFEST_REG_PAIR_ENTRY_NUM_ERROR     : constant NvU10 := 16#c8#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_MANIFEST_SECRET_MASK_ERROR            : constant NvU10 := 16#c9#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_MANIFEST_SECRET_MASK_LOCK_ERROR       : constant NvU10 := 16#ca#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_MANIFEST_SIGNATURE_ERROR              : constant NvU10 := 16#cb#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_MANIFEST_UCODE_ID_ERROR               : constant NvU10 := 16#cc#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_MANIFEST_UCODE_VERSION_ERROR          : constant NvU10 := 16#cd#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_FMC_DIGEST_ERROR                      : constant NvU10 := 16#ce#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_SW_PKEY_DIGEST_ERROR                  : constant NvU10 := 16#cf#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_SE_PKA_RETURN_CODE_ERROR              : constant NvU10 := 16#e0#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_SE_PKA_RESET_ERROR                    : constant NvU10 := 16#e1#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_LWPKA_PARITY_ERROR                    : constant NvU10 := 16#e2#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_LWPKA_ACQUIRE_MUTEX_ERROR             : constant NvU10 := 16#e3#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_LWPKA_RELEASE_MUTEX_ERROR             : constant NvU10 := 16#e4#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_LWPKA_RSA_EXECUTION_ERROR             : constant NvU10 := 16#e5#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_LWPKA_ECC_INS_KEY_ERROR               : constant NvU10 := 16#e6#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_LWPKA_ECC_GEN_PUB_ERROR               : constant NvU10 := 16#e7#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_LWPKA_ECDSA_SIGN_ERROR                : constant NvU10 := 16#e8#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_LWPKA_ECC_DISPOSE_KEY_ERROR           : constant NvU10 := 16#ea#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_LWPKA_ENABLE_OPMASK_ERROR             : constant NvU10 := 16#eb#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_LWPKA_DISABLE_OPMASK_ERROR            : constant NvU10 := 16#ec#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_FUSEKEY_BAD_HEADER_ERROR              : constant NvU10 := 16#100#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_FUSEKEY_KEYGLOB_INVALID_ERROR         : constant NvU10 := 16#101#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_FUSEKEY_PROTECT_INFO_ERROR            : constant NvU10 := 16#102#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_FUSEKEY_SIGNATURE_ERROR               : constant NvU10 := 16#103#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_FUSEKEY_UDS_KDK_INVALID_ERROR         : constant NvU10 := 16#104#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_FUSEKEY_IK_PVT_INVALID_ERROR          : constant NvU10 := 16#105#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_PUSH_INTERFACE_INTEGRITY_ERROR        : constant NvU10 := 16#106#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_KMEM_DISPOSE_KSLOT_ERROR              : constant NvU10 := 16#120#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_KMEM_KEY_SLOT_K3_ERROR                : constant NvU10 := 16#121#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_KMEM_LOAD_KSLOT2SCP_ERROR             : constant NvU10 := 16#122#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_KMEM_READ_ERROR                       : constant NvU10 := 16#123#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_KMEM_WRITE_ERROR                      : constant NvU10 := 16#124#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_LMSR_INITIALIZATION_ERROR             : constant NvU10 := 16#140#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_IOPMP_ERROR                           : constant NvU10 := 16#141#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_MMIO_ERROR                            : constant NvU10 := 16#142#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_OEM_AUK_HASH_OF_HASHES_MISMATCH_ERROR : constant NvU10 := 16#160#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_OEM_AUK_INDEX_OF_HASHES_RANGE_ERROR   : constant NvU10 := 16#161#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_OEM_AUK_HASH_MISMATCH_ERROR           : constant NvU10 := 16#162#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_CRITICAL_ERROR                        : constant NvU10 := 16#3e0#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_KAT_SHA1_ERROR                        : constant NvU10 := 16#3e1#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_KAT_SHA384_ERROR                      : constant NvU10 := 16#3e2#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_KAT_HMAC_ERROR                        : constant NvU10 := 16#3e3#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_KAT_KDF_ERROR                         : constant NvU10 := 16#3e4#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_KAT_DRBG_ERROR                        : constant NvU10 := 16#3e5#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_KAT_RSA_ERROR                         : constant NvU10 := 16#3e6#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_KAT_ECCPUB_ERROR                      : constant NvU10 := 16#3e7#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_KAT_ECDSA_ERROR                       : constant NvU10 := 16#3e8#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_OK                                    : constant NvU10 := 16#3ff#;
    LW_PRGNLCL_RISCV_BR_RETCODE_INFO_INIT                                      : constant NvU14 := 16#0#;
    LW_PRGNLCL_RISCV_BR_RETCODE_INFO_FUSE_HANG                                 : constant NvU14 := 16#1#;
    LW_PRGNLCL_RISCV_BR_RETCODE_INFO_DIO_HANG                                  : constant NvU14 := 16#2#;
    LW_PRGNLCL_RISCV_BR_RETCODE_INFO_FBDMA_HANG                                : constant NvU14 := 16#4#;
    LW_PRGNLCL_RISCV_BR_RETCODE_INFO_SHA_HANG                                  : constant NvU14 := 16#8#;
    LW_PRGNLCL_RISCV_BR_RETCODE_INFO_SCP_HANG                                  : constant NvU14 := 16#10#;
    LW_PRGNLCL_RISCV_BR_RETCODE_INFO_GDMA_HANG                                 : constant NvU14 := 16#20#;
    LW_PRGNLCL_RISCV_BR_RETCODE_INFO_KEYMOVER_HANG                             : constant NvU14 := 16#40#;
    LW_PRGNLCL_RISCV_BR_RETCODE_INFO_SE_AES_HANG                               : constant NvU14 := 16#80#;
    LW_PRGNLCL_RISCV_BR_RETCODE_INFO_LWPKA_HANG                                : constant NvU14 := 16#100#;
    LW_PRGNLCL_RISCV_BR_RETCODE_INFO_RTS_HANG                                  : constant NvU14 := 16#200#;

    type LW_PRGNLCL_RISCV_BR_RETCODE_Register is record
        Result   : LW_PRGNLCL_RISCV_BR_RETCODE_RESULT_Field;
        Phase    : NvU6;
        Syndrome : NvU10;
        Info     : NvU14;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_BR_RETCODE_Register use record
        Result   at 0 range  0 ..  1;
        Phase    at 0 range  2 ..  7;
        Syndrome at 0 range  8 .. 17;
        Info     at 0 range 18 .. 31;
    end record;

    type LW_PRGNLCL_RISCV_BR_PRIV_LOCKDOWN_LOCK_Field is (LOCK_UNLOCKED, LOCK_LOCKED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_BR_PRIV_LOCKDOWN_LOCK_Field use (LOCK_UNLOCKED => 16#0#, LOCK_LOCKED => 16#1#);

    type LW_PRGNLCL_RISCV_BR_PRIV_LOCKDOWN_Register is record
        Lock : LW_PRGNLCL_RISCV_BR_PRIV_LOCKDOWN_LOCK_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_BR_PRIV_LOCKDOWN_Register use record
        Lock at 0 range 0 .. 0;
    end record;

    type LW_PRGNLCL_RISCV_BCR_CTRL_VALID_Field is (VALID_FALSE, VALID_TRUE) with
        Size => 1;
    for LW_PRGNLCL_RISCV_BCR_CTRL_VALID_Field use (VALID_FALSE => 16#0#, VALID_TRUE => 16#1#);
    type LW_PRGNLCL_RISCV_BCR_CTRL_CORE_SELECT_Field is (SELECT_FALCON, SELECT_RISCV) with
        Size => 1;
    for LW_PRGNLCL_RISCV_BCR_CTRL_CORE_SELECT_Field use (SELECT_FALCON => 16#0#, SELECT_RISCV => 16#1#);
    type LW_PRGNLCL_RISCV_BCR_CTRL_BRFETCH_Field is (BRFETCH_FALSE, BRFETCH_TRUE) with
        Size => 1;
    for LW_PRGNLCL_RISCV_BCR_CTRL_BRFETCH_Field use (BRFETCH_FALSE => 16#0#, BRFETCH_TRUE => 16#1#);
    type LW_PRGNLCL_RISCV_BCR_CTRL_STAGE1_PK_SEL_Field is (SEL_HW, SEL_FUSE) with
        Size => 1;
    for LW_PRGNLCL_RISCV_BCR_CTRL_STAGE1_PK_SEL_Field use (SEL_HW => 16#0#, SEL_FUSE => 16#1#);
    LW_PRGNLCL_RISCV_BCR_CTRL_STAGE2_AUTH_ALGO_DISABLED : constant NvU3 := 16#0#;
    LW_PRGNLCL_RISCV_BCR_CTRL_STAGE2_AUTH_ALGO_RSA3K    : constant NvU3 := 16#1#;
    type LW_PRGNLCL_RISCV_BCR_CTRL_RTS_FLUSH_SHADOW_Field is (SHADOW_FALSE, SHADOW_TRUE) with
        Size => 1;
    for LW_PRGNLCL_RISCV_BCR_CTRL_RTS_FLUSH_SHADOW_Field use (SHADOW_FALSE => 16#0#, SHADOW_TRUE => 16#1#);

    type LW_PRGNLCL_RISCV_BCR_CTRL_Register is record
        Valid            : LW_PRGNLCL_RISCV_BCR_CTRL_VALID_Field;
        Core_Select      : LW_PRGNLCL_RISCV_BCR_CTRL_CORE_SELECT_Field;
        Brfetch          : LW_PRGNLCL_RISCV_BCR_CTRL_BRFETCH_Field;
        Stage1_Pk_Sel    : LW_PRGNLCL_RISCV_BCR_CTRL_STAGE1_PK_SEL_Field;
        Stage2_Auth_Algo : NvU3;
        Rts_Flush_Shadow : LW_PRGNLCL_RISCV_BCR_CTRL_RTS_FLUSH_SHADOW_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_BCR_CTRL_Register use record
        Valid            at 0 range  0 ..  0;
        Core_Select      at 0 range  4 ..  4;
        Brfetch          at 0 range  8 ..  8;
        Stage1_Pk_Sel    at 0 range 12 .. 12;
        Stage2_Auth_Algo at 0 range 16 .. 18;
        Rts_Flush_Shadow at 0 range 20 .. 20;
    end record;

    type LW_PRGNLCL_RISCV_BCR_DMACFG_TARGET_Field is (TARGET_LOCAL_FB, TARGET_COHERENT_SYSMEM, TARGET_NONCOHERENT_SYSMEM, TARGET_IO) with
        Size => 2;
    for LW_PRGNLCL_RISCV_BCR_DMACFG_TARGET_Field use (TARGET_LOCAL_FB => 16#0#, TARGET_COHERENT_SYSMEM => 16#1#, TARGET_NONCOHERENT_SYSMEM => 16#2#, TARGET_IO => 16#3#);
    type LW_PRGNLCL_RISCV_BCR_DMACFG_POINTER_WALKING_Field is (WALKING_FALSE, WALKING_TRUE) with
        Size => 1;
    for LW_PRGNLCL_RISCV_BCR_DMACFG_POINTER_WALKING_Field use (WALKING_FALSE => 16#0#, WALKING_TRUE => 16#1#);
    type LW_PRGNLCL_RISCV_BCR_DMACFG_LOCK_Field is (LOCK_UNLOCKED, LOCK_LOCKED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_BCR_DMACFG_LOCK_Field use (LOCK_UNLOCKED => 16#0#, LOCK_LOCKED => 16#1#);

    type LW_PRGNLCL_RISCV_BCR_DMACFG_Register is record
        Target          : LW_PRGNLCL_RISCV_BCR_DMACFG_TARGET_Field;
        Pointer_Walking : LW_PRGNLCL_RISCV_BCR_DMACFG_POINTER_WALKING_Field;
        Lock            : LW_PRGNLCL_RISCV_BCR_DMACFG_LOCK_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_BCR_DMACFG_Register use record
        Target          at 0 range  0 ..  1;
        Pointer_Walking at 0 range 28 .. 28;
        Lock            at 0 range 31 .. 31;
    end record;

    LW_PRGNLCL_RISCV_BCR_DMACFG_SEC_WPRID_INIT : constant NvU2 := 16#0#;
    LW_PRGNLCL_RISCV_BCR_DMACFG_SEC_GSCID_INIT : constant NvU5 := 16#0#;

    type LW_PRGNLCL_RISCV_BCR_DMACFG_SEC_Register is record
        Wprid : NvU2;
        Gscid : NvU5;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_BCR_DMACFG_SEC_Register use record
        Wprid at 0 range  0 ..  1;
        Gscid at 0 range 16 .. 20;
    end record;

    LW_PRGNLCL_RISCV_BCR_DMAADDR_PKCPARAM_LO_VAL_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_RISCV_BCR_DMAADDR_PKCPARAM_LO_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_BCR_DMAADDR_PKCPARAM_LO_Register use record
        Val at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_RISCV_BCR_DMAADDR_PKCPARAM_HI_VAL_INIT : constant NvU12 := 16#0#;

    type LW_PRGNLCL_RISCV_BCR_DMAADDR_PKCPARAM_HI_Register is record
        Val : NvU12;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_BCR_DMAADDR_PKCPARAM_HI_Register use record
        Val at 0 range 0 .. 11;
    end record;

    LW_PRGNLCL_RISCV_BCR_DMAADDR_FMCCODE_LO_VAL_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_RISCV_BCR_DMAADDR_FMCCODE_LO_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_BCR_DMAADDR_FMCCODE_LO_Register use record
        Val at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_RISCV_BCR_DMAADDR_FMCCODE_HI_VAL_INIT : constant NvU12 := 16#0#;

    type LW_PRGNLCL_RISCV_BCR_DMAADDR_FMCCODE_HI_Register is record
        Val : NvU12;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_BCR_DMAADDR_FMCCODE_HI_Register use record
        Val at 0 range 0 .. 11;
    end record;

    LW_PRGNLCL_RISCV_BCR_DMAADDR_FMCDATA_LO_VAL_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_RISCV_BCR_DMAADDR_FMCDATA_LO_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_BCR_DMAADDR_FMCDATA_LO_Register use record
        Val at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_RISCV_BCR_DMAADDR_FMCDATA_HI_VAL_INIT : constant NvU12 := 16#0#;

    type LW_PRGNLCL_RISCV_BCR_DMAADDR_FMCDATA_HI_Register is record
        Val : NvU12;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_BCR_DMAADDR_FMCDATA_HI_Register use record
        Val at 0 range 0 .. 11;
    end record;

    LW_PRGNLCL_RISCV_BCR_DMAADDR_PUBKEY_LO_VAL_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_RISCV_BCR_DMAADDR_PUBKEY_LO_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_BCR_DMAADDR_PUBKEY_LO_Register use record
        Val at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_RISCV_BCR_DMAADDR_PUBKEY_HI_VAL_INIT : constant NvU12 := 16#0#;

    type LW_PRGNLCL_RISCV_BCR_DMAADDR_PUBKEY_HI_Register is record
        Val : NvU12;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_BCR_DMAADDR_PUBKEY_HI_Register use record
        Val at 0 range 0 .. 11;
    end record;

    LW_PRGNLCL_RISCV_BCR_DMAADDR_STAGE2_PKCPARAM_LO_VAL_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_RISCV_BCR_DMAADDR_STAGE2_PKCPARAM_LO_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_BCR_DMAADDR_STAGE2_PKCPARAM_LO_Register use record
        Val at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_RISCV_BCR_DMAADDR_STAGE2_PKCPARAM_HI_VAL_INIT : constant NvU12 := 16#0#;

    type LW_PRGNLCL_RISCV_BCR_DMAADDR_STAGE2_PKCPARAM_HI_Register is record
        Val : NvU12;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_BCR_DMAADDR_STAGE2_PKCPARAM_HI_Register use record
        Val at 0 range 0 .. 11;
    end record;

    type LW_PRGNLCL_RISCV_BCR_UIDENABLEMASK_UID0_Field is (UID0_DISABLED, UID0_ENABLED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_BCR_UIDENABLEMASK_UID0_Field use (UID0_DISABLED => 16#0#, UID0_ENABLED => 16#1#);
    type LW_PRGNLCL_RISCV_BCR_UIDENABLEMASK_UID1_Field is (UID1_DISABLED, UID1_ENABLED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_BCR_UIDENABLEMASK_UID1_Field use (UID1_DISABLED => 16#0#, UID1_ENABLED => 16#1#);
    type LW_PRGNLCL_RISCV_BCR_UIDENABLEMASK_UID2_Field is (UID2_DISABLED, UID2_ENABLED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_BCR_UIDENABLEMASK_UID2_Field use (UID2_DISABLED => 16#0#, UID2_ENABLED => 16#1#);
    type LW_PRGNLCL_RISCV_BCR_UIDENABLEMASK_UID3_Field is (UID3_DISABLED, UID3_ENABLED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_BCR_UIDENABLEMASK_UID3_Field use (UID3_DISABLED => 16#0#, UID3_ENABLED => 16#1#);
    type LW_PRGNLCL_RISCV_BCR_UIDENABLEMASK_UID4_Field is (UID4_DISABLED, UID4_ENABLED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_BCR_UIDENABLEMASK_UID4_Field use (UID4_DISABLED => 16#0#, UID4_ENABLED => 16#1#);
    type LW_PRGNLCL_RISCV_BCR_UIDENABLEMASK_UID5_Field is (UID5_DISABLED, UID5_ENABLED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_BCR_UIDENABLEMASK_UID5_Field use (UID5_DISABLED => 16#0#, UID5_ENABLED => 16#1#);
    type LW_PRGNLCL_RISCV_BCR_UIDENABLEMASK_UID6_Field is (UID6_DISABLED, UID6_ENABLED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_BCR_UIDENABLEMASK_UID6_Field use (UID6_DISABLED => 16#0#, UID6_ENABLED => 16#1#);
    type LW_PRGNLCL_RISCV_BCR_UIDENABLEMASK_UID7_Field is (UID7_DISABLED, UID7_ENABLED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_BCR_UIDENABLEMASK_UID7_Field use (UID7_DISABLED => 16#0#, UID7_ENABLED => 16#1#);
    type LW_PRGNLCL_RISCV_BCR_UIDENABLEMASK_UID8_Field is (UID8_DISABLED, UID8_ENABLED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_BCR_UIDENABLEMASK_UID8_Field use (UID8_DISABLED => 16#0#, UID8_ENABLED => 16#1#);
    type LW_PRGNLCL_RISCV_BCR_UIDENABLEMASK_UID9_Field is (UID9_DISABLED, UID9_ENABLED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_BCR_UIDENABLEMASK_UID9_Field use (UID9_DISABLED => 16#0#, UID9_ENABLED => 16#1#);
    type LW_PRGNLCL_RISCV_BCR_UIDENABLEMASK_UID10_Field is (UID10_DISABLED, UID10_ENABLED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_BCR_UIDENABLEMASK_UID10_Field use (UID10_DISABLED => 16#0#, UID10_ENABLED => 16#1#);
    type LW_PRGNLCL_RISCV_BCR_UIDENABLEMASK_UID11_Field is (UID11_DISABLED, UID11_ENABLED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_BCR_UIDENABLEMASK_UID11_Field use (UID11_DISABLED => 16#0#, UID11_ENABLED => 16#1#);
    type LW_PRGNLCL_RISCV_BCR_UIDENABLEMASK_UID12_Field is (UID12_DISABLED, UID12_ENABLED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_BCR_UIDENABLEMASK_UID12_Field use (UID12_DISABLED => 16#0#, UID12_ENABLED => 16#1#);
    type LW_PRGNLCL_RISCV_BCR_UIDENABLEMASK_UID13_Field is (UID13_DISABLED, UID13_ENABLED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_BCR_UIDENABLEMASK_UID13_Field use (UID13_DISABLED => 16#0#, UID13_ENABLED => 16#1#);
    type LW_PRGNLCL_RISCV_BCR_UIDENABLEMASK_UID14_Field is (UID14_DISABLED, UID14_ENABLED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_BCR_UIDENABLEMASK_UID14_Field use (UID14_DISABLED => 16#0#, UID14_ENABLED => 16#1#);
    type LW_PRGNLCL_RISCV_BCR_UIDENABLEMASK_UID15_Field is (UID15_DISABLED, UID15_ENABLED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_BCR_UIDENABLEMASK_UID15_Field use (UID15_DISABLED => 16#0#, UID15_ENABLED => 16#1#);
    type LW_PRGNLCL_RISCV_BCR_UIDENABLEMASK_UID16_Field is (UID16_DISABLED, UID16_ENABLED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_BCR_UIDENABLEMASK_UID16_Field use (UID16_DISABLED => 16#0#, UID16_ENABLED => 16#1#);

    type LW_PRGNLCL_RISCV_BCR_UIDENABLEMASK_Register is record
        Uid0  : LW_PRGNLCL_RISCV_BCR_UIDENABLEMASK_UID0_Field;
        Uid1  : LW_PRGNLCL_RISCV_BCR_UIDENABLEMASK_UID1_Field;
        Uid2  : LW_PRGNLCL_RISCV_BCR_UIDENABLEMASK_UID2_Field;
        Uid3  : LW_PRGNLCL_RISCV_BCR_UIDENABLEMASK_UID3_Field;
        Uid4  : LW_PRGNLCL_RISCV_BCR_UIDENABLEMASK_UID4_Field;
        Uid5  : LW_PRGNLCL_RISCV_BCR_UIDENABLEMASK_UID5_Field;
        Uid6  : LW_PRGNLCL_RISCV_BCR_UIDENABLEMASK_UID6_Field;
        Uid7  : LW_PRGNLCL_RISCV_BCR_UIDENABLEMASK_UID7_Field;
        Uid8  : LW_PRGNLCL_RISCV_BCR_UIDENABLEMASK_UID8_Field;
        Uid9  : LW_PRGNLCL_RISCV_BCR_UIDENABLEMASK_UID9_Field;
        Uid10 : LW_PRGNLCL_RISCV_BCR_UIDENABLEMASK_UID10_Field;
        Uid11 : LW_PRGNLCL_RISCV_BCR_UIDENABLEMASK_UID11_Field;
        Uid12 : LW_PRGNLCL_RISCV_BCR_UIDENABLEMASK_UID12_Field;
        Uid13 : LW_PRGNLCL_RISCV_BCR_UIDENABLEMASK_UID13_Field;
        Uid14 : LW_PRGNLCL_RISCV_BCR_UIDENABLEMASK_UID14_Field;
        Uid15 : LW_PRGNLCL_RISCV_BCR_UIDENABLEMASK_UID15_Field;
        Uid16 : LW_PRGNLCL_RISCV_BCR_UIDENABLEMASK_UID16_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_BCR_UIDENABLEMASK_Register use record
        Uid0  at 0 range  0 ..  0;
        Uid1  at 0 range  1 ..  1;
        Uid2  at 0 range  2 ..  2;
        Uid3  at 0 range  3 ..  3;
        Uid4  at 0 range  4 ..  4;
        Uid5  at 0 range  5 ..  5;
        Uid6  at 0 range  6 ..  6;
        Uid7  at 0 range  7 ..  7;
        Uid8  at 0 range  8 ..  8;
        Uid9  at 0 range  9 ..  9;
        Uid10 at 0 range 10 .. 10;
        Uid11 at 0 range 11 .. 11;
        Uid12 at 0 range 12 .. 12;
        Uid13 at 0 range 13 .. 13;
        Uid14 at 0 range 14 .. 14;
        Uid15 at 0 range 15 .. 15;
        Uid16 at 0 range 16 .. 16;
    end record;

    LW_PRGNLCL_RISCV_BROM_KEY_REPLACE_FALSE : constant NvU8 := 16#55#;
    LW_PRGNLCL_RISCV_BROM_KEY_REPLACE_TRUE  : constant NvU8 := 16#aa#;

    type LW_PRGNLCL_RISCV_BROM_KEY_Register is record
        Replace : NvU8;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_BROM_KEY_Register use record
        Replace at 0 range 0 .. 7;
    end record;

    LW_PRGNLCL_RISCV_LMSR_VALUE_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_RISCV_LMSR_Register is record
        Value : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_LMSR_Register use record
        Value at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_RISCV_DEVICEMAP_RISCVMMODE_VAL_INIT      : constant NvU32 := 16#3333_3333#;
    LW_PRGNLCL_RISCV_DEVICEMAP_RISCVMMODE_READ_ENABLE   : constant       := 16#1#;
    LW_PRGNLCL_RISCV_DEVICEMAP_RISCVMMODE_READ_DISABLE  : constant       := 16#0#;
    LW_PRGNLCL_RISCV_DEVICEMAP_RISCVMMODE_WRITE_ENABLE  : constant       := 16#1#;
    LW_PRGNLCL_RISCV_DEVICEMAP_RISCVMMODE_WRITE_DISABLE : constant       := 16#0#;
    LW_PRGNLCL_RISCV_DEVICEMAP_RISCVMMODE_LOCK_LOCKED   : constant       := 16#1#;
    LW_PRGNLCL_RISCV_DEVICEMAP_RISCVMMODE_LOCK_UNLOCKED : constant       := 16#0#;

    type LW_PRGNLCL_RISCV_DEVICEMAP_RISCVMMODE_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_DEVICEMAP_RISCVMMODE_Register use record
        Val at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_RISCV_DEVICEMAP_RISCVSUBMMODE_VAL_INIT      : constant NvU32 := 16#3333_3333#;
    LW_PRGNLCL_RISCV_DEVICEMAP_RISCVSUBMMODE_READ_ENABLE   : constant       := 16#1#;
    LW_PRGNLCL_RISCV_DEVICEMAP_RISCVSUBMMODE_READ_DISABLE  : constant       := 16#0#;
    LW_PRGNLCL_RISCV_DEVICEMAP_RISCVSUBMMODE_WRITE_ENABLE  : constant       := 16#1#;
    LW_PRGNLCL_RISCV_DEVICEMAP_RISCVSUBMMODE_WRITE_DISABLE : constant       := 16#0#;

    type LW_PRGNLCL_RISCV_DEVICEMAP_RISCVSUBMMODE_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_DEVICEMAP_RISCVSUBMMODE_Register use record
        Val at 0 range 0 .. 31;
    end record;

    type LW_PRGNLCL_SCP_CTL0_CTL_EN_Field is (EN_DISABLED, EN_ENABLED) with
        Size => 1;
    for LW_PRGNLCL_SCP_CTL0_CTL_EN_Field use (EN_DISABLED => 16#0#, EN_ENABLED => 16#1#);
    type LW_PRGNLCL_SCP_CTL0_SEQ_EN_Field is (EN_DISABLED, EN_ENABLED) with
        Size => 1;
    for LW_PRGNLCL_SCP_CTL0_SEQ_EN_Field use (EN_DISABLED => 16#0#, EN_ENABLED => 16#1#);
    type LW_PRGNLCL_SCP_CTL0_SF_CMD_IFACE_EN_Field is (EN_DISABLED, EN_ENABLED) with
        Size => 1;
    for LW_PRGNLCL_SCP_CTL0_SF_CMD_IFACE_EN_Field use (EN_DISABLED => 16#0#, EN_ENABLED => 16#1#);
    type LW_PRGNLCL_SCP_CTL0_SF_PUSH_IFACE_EN_Field is (EN_DISABLED, EN_ENABLED) with
        Size => 1;
    for LW_PRGNLCL_SCP_CTL0_SF_PUSH_IFACE_EN_Field use (EN_DISABLED => 16#0#, EN_ENABLED => 16#1#);
    type LW_PRGNLCL_SCP_CTL0_SF_FETCH_IFACE_EN_Field is (EN_DISABLED, EN_ENABLED) with
        Size => 1;
    for LW_PRGNLCL_SCP_CTL0_SF_FETCH_IFACE_EN_Field use (EN_DISABLED => 16#0#, EN_ENABLED => 16#1#);

    type LW_PRGNLCL_SCP_CTL0_Register is record
        Ctl_En            : LW_PRGNLCL_SCP_CTL0_CTL_EN_Field;
        Seq_En            : LW_PRGNLCL_SCP_CTL0_SEQ_EN_Field;
        Sf_Cmd_Iface_En   : LW_PRGNLCL_SCP_CTL0_SF_CMD_IFACE_EN_Field;
        Sf_Push_Iface_En  : LW_PRGNLCL_SCP_CTL0_SF_PUSH_IFACE_EN_Field;
        Sf_Fetch_Iface_En : LW_PRGNLCL_SCP_CTL0_SF_FETCH_IFACE_EN_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SCP_CTL0_Register use record
        Ctl_En            at 0 range 20 .. 20;
        Seq_En            at 0 range 16 .. 16;
        Sf_Cmd_Iface_En   at 0 range 14 .. 14;
        Sf_Push_Iface_En  at 0 range 12 .. 12;
        Sf_Fetch_Iface_En at 0 range 10 .. 10;
    end record;

    type LW_PRGNLCL_SCP_CTL1_SF_PUSH_BYPASS_Field is (BYPASS_DISABLED, BYPASS_ENABLED) with
        Size => 1;
    for LW_PRGNLCL_SCP_CTL1_SF_PUSH_BYPASS_Field use (BYPASS_DISABLED => 16#0#, BYPASS_ENABLED => 16#1#);
    type LW_PRGNLCL_SCP_CTL1_SF_FETCH_BYPASS_Field is (BYPASS_DISABLED, BYPASS_ENABLED) with
        Size => 1;
    for LW_PRGNLCL_SCP_CTL1_SF_FETCH_BYPASS_Field use (BYPASS_DISABLED => 16#0#, BYPASS_ENABLED => 16#1#);
    type LW_PRGNLCL_SCP_CTL1_SF_FETCH_AS_ZERO_Field is (ZERO_DISABLED, ZERO_ENABLED) with
        Size => 1;
    for LW_PRGNLCL_SCP_CTL1_SF_FETCH_AS_ZERO_Field use (ZERO_DISABLED => 16#0#, ZERO_ENABLED => 16#1#);
    type LW_PRGNLCL_SCP_CTL1_RNG_EN_Field is (EN_DISABLED, EN_ENABLED) with
        Size => 1;
    for LW_PRGNLCL_SCP_CTL1_RNG_EN_Field use (EN_DISABLED => 16#0#, EN_ENABLED => 16#1#);
    type LW_PRGNLCL_SCP_CTL1_RNG_FAKE_MODE_Field is (MODE_DISABLED, MODE_ENABLED) with
        Size => 1;
    for LW_PRGNLCL_SCP_CTL1_RNG_FAKE_MODE_Field use (MODE_DISABLED => 16#0#, MODE_ENABLED => 16#1#);
    LW_PRGNLCL_SCP_CTL1_PIPE_RESET_IDLE    : constant NvU1 := 16#0#;
    LW_PRGNLCL_SCP_CTL1_PIPE_RESET_PENDING : constant NvU1 := 16#1#;
    LW_PRGNLCL_SCP_CTL1_PIPE_RESET_TASK    : constant NvU1 := 16#1#;
    LW_PRGNLCL_SCP_CTL1_SEQ_CLEAR_IDLE     : constant NvU1 := 16#0#;
    LW_PRGNLCL_SCP_CTL1_SEQ_CLEAR_PENDING  : constant NvU1 := 16#1#;
    LW_PRGNLCL_SCP_CTL1_SEQ_CLEAR_TASK     : constant NvU1 := 16#1#;

    type LW_PRGNLCL_SCP_CTL1_Register is record
        Sf_Push_Bypass   : LW_PRGNLCL_SCP_CTL1_SF_PUSH_BYPASS_Field;
        Sf_Fetch_Bypass  : LW_PRGNLCL_SCP_CTL1_SF_FETCH_BYPASS_Field;
        Sf_Fetch_As_Zero : LW_PRGNLCL_SCP_CTL1_SF_FETCH_AS_ZERO_Field;
        Rng_En           : LW_PRGNLCL_SCP_CTL1_RNG_EN_Field;
        Rng_Fake_Mode    : LW_PRGNLCL_SCP_CTL1_RNG_FAKE_MODE_Field;
        Pipe_Reset       : NvU1;
        Seq_Clear        : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SCP_CTL1_Register use record
        Sf_Push_Bypass   at 0 range 24 .. 24;
        Sf_Fetch_Bypass  at 0 range 20 .. 20;
        Sf_Fetch_As_Zero at 0 range 16 .. 16;
        Rng_En           at 0 range 12 .. 12;
        Rng_Fake_Mode    at 0 range 11 .. 11;
        Pipe_Reset       at 0 range  8 ..  8;
        Seq_Clear        at 0 range  0 ..  0;
    end record;

    LW_PRGNLCL_SCP_CTL_STAT_DEBUG_MODE_DISABLED : constant NvU1 := 16#0#;
    type LW_PRGNLCL_SCP_CTL_STAT_DEBUG_SYM_KEY_Field is (KEY_DISABLED, KEY_ENABLED) with
        Size => 1;
    for LW_PRGNLCL_SCP_CTL_STAT_DEBUG_SYM_KEY_Field use (KEY_DISABLED => 16#0#, KEY_ENABLED => 16#1#);
    type LW_PRGNLCL_SCP_CTL_STAT_AES_SCC_DIS_Field is (DIS_FALSE, DIS_TRUE) with
        Size => 1;
    for LW_PRGNLCL_SCP_CTL_STAT_AES_SCC_DIS_Field use (DIS_FALSE => 16#0#, DIS_TRUE => 16#1#);
    type LW_PRGNLCL_SCP_CTL_STAT_HSMODE_Field is (HSMODE_FALSE, HSMODE_TRUE) with
        Size => 1;
    for LW_PRGNLCL_SCP_CTL_STAT_HSMODE_Field use (HSMODE_FALSE => 16#0#, HSMODE_TRUE => 16#1#);
    type LW_PRGNLCL_SCP_CTL_STAT_SBOOT_Field is (SBOOT_FALSE, SBOOT_TRUE) with
        Size => 1;
    for LW_PRGNLCL_SCP_CTL_STAT_SBOOT_Field use (SBOOT_FALSE => 16#0#, SBOOT_TRUE => 16#1#);

    type LW_PRGNLCL_SCP_CTL_STAT_Register is record
        Debug_Mode    : NvU1;
        Debug_Sym_Key : LW_PRGNLCL_SCP_CTL_STAT_DEBUG_SYM_KEY_Field;
        Aes_Scc_Dis   : LW_PRGNLCL_SCP_CTL_STAT_AES_SCC_DIS_Field;
        Hsmode        : LW_PRGNLCL_SCP_CTL_STAT_HSMODE_Field;
        Sboot         : LW_PRGNLCL_SCP_CTL_STAT_SBOOT_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SCP_CTL_STAT_Register use record
        Debug_Mode    at 0 range 20 .. 20;
        Debug_Sym_Key at 0 range 16 .. 16;
        Aes_Scc_Dis   at 0 range  2 ..  2;
        Hsmode        at 0 range  1 ..  1;
        Sboot         at 0 range  0 ..  0;
    end record;

    type LW_PRGNLCL_SCP_CTL_CFG_LOCKDOWN_Field is (LOCKDOWN_DISABLE, LOCKDOWN_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_SCP_CTL_CFG_LOCKDOWN_Field use (LOCKDOWN_DISABLE => 16#0#, LOCKDOWN_ENABLE => 16#1#);
    type LW_PRGNLCL_SCP_CTL_CFG_LOCKDOWN_CLR_REQ_STAT_Field is (STAT_NOT_PENDING, STAT_PENDING) with
        Size => 1;
    for LW_PRGNLCL_SCP_CTL_CFG_LOCKDOWN_CLR_REQ_STAT_Field use (STAT_NOT_PENDING => 16#0#, STAT_PENDING => 16#1#);
    type LW_PRGNLCL_SCP_CTL_CFG_LOCKDOWN_PRE_Field is (PRE_DISABLED, PRE_ENABLED) with
        Size => 1;
    for LW_PRGNLCL_SCP_CTL_CFG_LOCKDOWN_PRE_Field use (PRE_DISABLED => 16#0#, PRE_ENABLED => 16#1#);
    type LW_PRGNLCL_SCP_CTL_CFG_LOCKDOWN_SCP_Field is (SCP_DISABLE, SCP_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_SCP_CTL_CFG_LOCKDOWN_SCP_Field use (SCP_DISABLE => 16#0#, SCP_ENABLE => 16#1#);
    type LW_PRGNLCL_SCP_CTL_CFG_LOCKDOWN_SCP_PRE_Field is (PRE_DISABLED, PRE_ENABLED) with
        Size => 1;
    for LW_PRGNLCL_SCP_CTL_CFG_LOCKDOWN_SCP_PRE_Field use (PRE_DISABLED => 16#0#, PRE_ENABLED => 16#1#);

    type LW_PRGNLCL_SCP_CTL_CFG_Register is record
        Lockdown              : LW_PRGNLCL_SCP_CTL_CFG_LOCKDOWN_Field;
        Lockdown_Clr_Req_Stat : LW_PRGNLCL_SCP_CTL_CFG_LOCKDOWN_CLR_REQ_STAT_Field;
        Lockdown_Pre          : LW_PRGNLCL_SCP_CTL_CFG_LOCKDOWN_PRE_Field;
        Lockdown_Scp          : LW_PRGNLCL_SCP_CTL_CFG_LOCKDOWN_SCP_Field;
        Lockdown_Scp_Pre      : LW_PRGNLCL_SCP_CTL_CFG_LOCKDOWN_SCP_PRE_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SCP_CTL_CFG_Register use record
        Lockdown              at 0 range 0 .. 0;
        Lockdown_Clr_Req_Stat at 0 range 1 .. 1;
        Lockdown_Pre          at 0 range 2 .. 2;
        Lockdown_Scp          at 0 range 4 .. 4;
        Lockdown_Scp_Pre      at 0 range 6 .. 6;
    end record;

    LW_PRGNLCL_SCP_CFG0_STALL_TIMEOUT_INIT : constant NvU16 := 16#ffff#;
    type LW_PRGNLCL_SCP_CFG0_CARRY_CHAIN_Field is (CHAIN_32, CHAIN_64, CHAIN_96, CHAIN_128) with
        Size => 2;
    for LW_PRGNLCL_SCP_CFG0_CARRY_CHAIN_Field use (CHAIN_32 => 16#0#, CHAIN_64 => 16#1#, CHAIN_96 => 16#2#, CHAIN_128 => 16#3#);
    type LW_PRGNLCL_SCP_CFG0_CMD_FLUSH_Field is (FLUSH_FALSE, FLUSH_TRUE) with
        Size => 1;
    for LW_PRGNLCL_SCP_CFG0_CMD_FLUSH_Field use (FLUSH_FALSE => 16#0#, FLUSH_TRUE => 16#1#);
    type LW_PRGNLCL_SCP_CFG0_AES_ENDIAN_Field is (ENDIAN_LITTLE, ENDIAN_BIG) with
        Size => 1;
    for LW_PRGNLCL_SCP_CFG0_AES_ENDIAN_Field use (ENDIAN_LITTLE => 16#0#, ENDIAN_BIG => 16#1#);
    type LW_PRGNLCL_SCP_CFG0_PUSH_ENDIAN_Field is (ENDIAN_LITTLE, ENDIAN_BIG) with
        Size => 1;
    for LW_PRGNLCL_SCP_CFG0_PUSH_ENDIAN_Field use (ENDIAN_LITTLE => 16#0#, ENDIAN_BIG => 16#1#);
    type LW_PRGNLCL_SCP_CFG0_FETCH_ENDIAN_Field is (ENDIAN_LITTLE, ENDIAN_BIG) with
        Size => 1;
    for LW_PRGNLCL_SCP_CFG0_FETCH_ENDIAN_Field use (ENDIAN_LITTLE => 16#0#, ENDIAN_BIG => 16#1#);
    type LW_PRGNLCL_SCP_CFG0_CMAC_ENDIAN_Field is (ENDIAN_LITTLE, ENDIAN_BIG) with
        Size => 1;
    for LW_PRGNLCL_SCP_CFG0_CMAC_ENDIAN_Field use (ENDIAN_LITTLE => 16#0#, ENDIAN_BIG => 16#1#);
    type LW_PRGNLCL_SCP_CFG0_ADD_ENDIAN_Field is (ENDIAN_LITTLE, ENDIAN_BIG) with
        Size => 1;
    for LW_PRGNLCL_SCP_CFG0_ADD_ENDIAN_Field use (ENDIAN_LITTLE => 16#0#, ENDIAN_BIG => 16#1#);

    type LW_PRGNLCL_SCP_CFG0_Register is record
        Stall_Timeout : NvU16;
        Carry_Chain   : LW_PRGNLCL_SCP_CFG0_CARRY_CHAIN_Field;
        Cmd_Flush     : LW_PRGNLCL_SCP_CFG0_CMD_FLUSH_Field;
        Aes_Endian    : LW_PRGNLCL_SCP_CFG0_AES_ENDIAN_Field;
        Push_Endian   : LW_PRGNLCL_SCP_CFG0_PUSH_ENDIAN_Field;
        Fetch_Endian  : LW_PRGNLCL_SCP_CFG0_FETCH_ENDIAN_Field;
        Cmac_Endian   : LW_PRGNLCL_SCP_CFG0_CMAC_ENDIAN_Field;
        Add_Endian    : LW_PRGNLCL_SCP_CFG0_ADD_ENDIAN_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SCP_CFG0_Register use record
        Stall_Timeout at 0 range 16 .. 31;
        Carry_Chain   at 0 range 12 .. 13;
        Cmd_Flush     at 0 range  8 ..  8;
        Aes_Endian    at 0 range  4 ..  4;
        Push_Endian   at 0 range  3 ..  3;
        Fetch_Endian  at 0 range  2 ..  2;
        Cmac_Endian   at 0 range  1 ..  1;
        Add_Endian    at 0 range  0 ..  0;
    end record;

    LW_PRGNLCL_SCP_CTL_PKEY_REQUEST_RELOAD_IDLE    : constant NvU1 := 16#0#;
    LW_PRGNLCL_SCP_CTL_PKEY_REQUEST_RELOAD_PENDING : constant NvU1 := 16#1#;
    LW_PRGNLCL_SCP_CTL_PKEY_REQUEST_RELOAD_TASK    : constant NvU1 := 16#1#;
    type LW_PRGNLCL_SCP_CTL_PKEY_LOADED_Field is (LOADED_FALSE, LOADED_TRUE) with
        Size => 1;
    for LW_PRGNLCL_SCP_CTL_PKEY_LOADED_Field use (LOADED_FALSE => 16#0#, LOADED_TRUE => 16#1#);

    type LW_PRGNLCL_SCP_CTL_PKEY_Register is record
        Request_Reload : NvU1;
        Loaded         : LW_PRGNLCL_SCP_CTL_PKEY_LOADED_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SCP_CTL_PKEY_Register use record
        Request_Reload at 0 range 0 .. 0;
        Loaded         at 0 range 1 .. 1;
    end record;

    type LW_PRGNLCL_SCP_CTL_DEBUG_LOCKDOWN_CYA_Field is (CYA_DISABLE, CYA_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_SCP_CTL_DEBUG_LOCKDOWN_CYA_Field use (CYA_DISABLE => 16#0#, CYA_ENABLE => 16#1#);
    type LW_PRGNLCL_SCP_CTL_DEBUG_LOCKDOWN_SCP_CYA_Field is (CYA_DISABLE, CYA_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_SCP_CTL_DEBUG_LOCKDOWN_SCP_CYA_Field use (CYA_DISABLE => 16#0#, CYA_ENABLE => 16#1#);

    type LW_PRGNLCL_SCP_CTL_DEBUG_Register is record
        Lockdown_Cya     : LW_PRGNLCL_SCP_CTL_DEBUG_LOCKDOWN_CYA_Field;
        Lockdown_Scp_Cya : LW_PRGNLCL_SCP_CTL_DEBUG_LOCKDOWN_SCP_CYA_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SCP_CTL_DEBUG_Register use record
        Lockdown_Cya     at 0 range 4 .. 4;
        Lockdown_Scp_Cya at 0 range 8 .. 8;
    end record;

    type LW_PRGNLCL_SCP_DEBUG0_PUSH_SECURE_Field is (SECURE_FALSE, SECURE_TRUE) with
        Size => 1;
    for LW_PRGNLCL_SCP_DEBUG0_PUSH_SECURE_Field use (SECURE_FALSE => 16#0#, SECURE_TRUE => 16#1#);
    type LW_PRGNLCL_SCP_DEBUG0_PUSH_VALID_Field is (VALID_FALSE, VALID_TRUE) with
        Size => 1;
    for LW_PRGNLCL_SCP_DEBUG0_PUSH_VALID_Field use (VALID_FALSE => 16#0#, VALID_TRUE => 16#1#);
    LW_PRGNLCL_SCP_DEBUG0_PUSH_CNT_INIT : constant NvU2 := 16#0#;
    type LW_PRGNLCL_SCP_DEBUG0_FETCH_SECURE_Field is (SECURE_FALSE, SECURE_TRUE) with
        Size => 1;
    for LW_PRGNLCL_SCP_DEBUG0_FETCH_SECURE_Field use (SECURE_FALSE => 16#0#, SECURE_TRUE => 16#1#);
    type LW_PRGNLCL_SCP_DEBUG0_FETCH_VALID_Field is (VALID_FALSE, VALID_TRUE) with
        Size => 1;
    for LW_PRGNLCL_SCP_DEBUG0_FETCH_VALID_Field use (VALID_FALSE => 16#0#, VALID_TRUE => 16#1#);
    LW_PRGNLCL_SCP_DEBUG0_FETCH_CNT_INIT : constant NvU4 := 16#0#;
    type LW_PRGNLCL_SCP_DEBUG0_SEQ_SECURE_Field is (SECURE_FALSE, SECURE_TRUE) with
        Size => 1;
    for LW_PRGNLCL_SCP_DEBUG0_SEQ_SECURE_Field use (SECURE_FALSE => 16#0#, SECURE_TRUE => 16#1#);
    type LW_PRGNLCL_SCP_DEBUG0_SEQ_VALID_Field is (VALID_FALSE, VALID_TRUE) with
        Size => 1;
    for LW_PRGNLCL_SCP_DEBUG0_SEQ_VALID_Field use (VALID_FALSE => 16#0#, VALID_TRUE => 16#1#);
    LW_PRGNLCL_SCP_DEBUG0_SEQ_PC_INIT    : constant NvU4 := 16#0#;
    LW_PRGNLCL_SCP_DEBUG0_SEQ_DEPTH_INIT : constant NvU5 := 16#0#;
    type LW_PRGNLCL_SCP_DEBUG0_TARGET_Field is (TARGET_NONE, TARGET_PUSH, TARGET_FETCH, TARGET_SEQ) with
        Size => 2;
    for LW_PRGNLCL_SCP_DEBUG0_TARGET_Field use (TARGET_NONE => 16#0#, TARGET_PUSH => 16#1#, TARGET_FETCH => 16#2#, TARGET_SEQ => 16#3#);
    type LW_PRGNLCL_SCP_DEBUG0_INDEX_AUTOINCREMENT_Field is (AUTOINCREMENT_FALSE, AUTOINCREMENT_TRUE) with
        Size => 1;
    for LW_PRGNLCL_SCP_DEBUG0_INDEX_AUTOINCREMENT_Field use (AUTOINCREMENT_FALSE => 16#0#, AUTOINCREMENT_TRUE => 16#1#);
    LW_PRGNLCL_SCP_DEBUG0_INDEX_INIT : constant NvU4 := 16#0#;

    type LW_PRGNLCL_SCP_DEBUG0_Register is record
        Push_Secure         : LW_PRGNLCL_SCP_DEBUG0_PUSH_SECURE_Field;
        Push_Valid          : LW_PRGNLCL_SCP_DEBUG0_PUSH_VALID_Field;
        Push_Cnt            : NvU2;
        Fetch_Secure        : LW_PRGNLCL_SCP_DEBUG0_FETCH_SECURE_Field;
        Fetch_Valid         : LW_PRGNLCL_SCP_DEBUG0_FETCH_VALID_Field;
        Fetch_Cnt           : NvU4;
        Seq_Secure          : LW_PRGNLCL_SCP_DEBUG0_SEQ_SECURE_Field;
        Seq_Valid           : LW_PRGNLCL_SCP_DEBUG0_SEQ_VALID_Field;
        Seq_Pc              : NvU4;
        Seq_Depth           : NvU5;
        Target              : LW_PRGNLCL_SCP_DEBUG0_TARGET_Field;
        Index_Autoincrement : LW_PRGNLCL_SCP_DEBUG0_INDEX_AUTOINCREMENT_Field;
        Index               : NvU4;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SCP_DEBUG0_Register use record
        Push_Secure         at 0 range 31 .. 31;
        Push_Valid          at 0 range 30 .. 30;
        Push_Cnt            at 0 range 25 .. 26;
        Fetch_Secure        at 0 range 24 .. 24;
        Fetch_Valid         at 0 range 23 .. 23;
        Fetch_Cnt           at 0 range 19 .. 22;
        Seq_Secure          at 0 range 18 .. 18;
        Seq_Valid           at 0 range 17 .. 17;
        Seq_Pc              at 0 range 13 .. 16;
        Seq_Depth           at 0 range  8 .. 12;
        Target              at 0 range  5 ..  6;
        Index_Autoincrement at 0 range  4 ..  4;
        Index               at 0 range  0 ..  3;
    end record;

    LW_PRGNLCL_SCP_DEBUG1_DATA_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_SCP_DEBUG1_Register is record
        Data : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SCP_DEBUG1_Register use record
        Data at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_SCP_DEBUG2_KU_INIT        : constant NvU4 := 16#0#;
    LW_PRGNLCL_SCP_DEBUG2_SEQ_CNT_INIT   : constant NvU6 := 16#0#;
    LW_PRGNLCL_SCP_DEBUG2_SEQ_STATE_INIT : constant NvU2 := 16#0#;
    LW_PRGNLCL_SCP_DEBUG2_SEQ_STATE_IDLE : constant NvU2 := 16#0#;
    LW_PRGNLCL_SCP_DEBUG2_SEQ_STATE_LOAD : constant NvU2 := 16#1#;
    LW_PRGNLCL_SCP_DEBUG2_SEQ_STATE_LOOP : constant NvU2 := 16#2#;

    type LW_PRGNLCL_SCP_DEBUG2_Register is record
        Ku        : NvU4;
        Seq_Cnt   : NvU6;
        Seq_State : NvU2;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SCP_DEBUG2_Register use record
        Ku        at 0 range 12 .. 15;
        Seq_Cnt   at 0 range  4 ..  9;
        Seq_State at 0 range  0 ..  1;
    end record;

    type LW_PRGNLCL_SCP_DEBUG_CMD_SECURE_Field is (SECURE_FALSE, SECURE_TRUE) with
        Size => 1;
    for LW_PRGNLCL_SCP_DEBUG_CMD_SECURE_Field use (SECURE_FALSE => 16#0#, SECURE_TRUE => 16#1#);
    type LW_PRGNLCL_SCP_DEBUG_CMD_VALID_Field is (VALID_FALSE, VALID_TRUE) with
        Size => 1;
    for LW_PRGNLCL_SCP_DEBUG_CMD_VALID_Field use (VALID_FALSE => 16#0#, VALID_TRUE => 16#1#);

    type LW_PRGNLCL_SCP_DEBUG_CMD_Register is record
        Secure : LW_PRGNLCL_SCP_DEBUG_CMD_SECURE_Field;
        Valid  : LW_PRGNLCL_SCP_DEBUG_CMD_VALID_Field;
        Op     : NvU5;
        Rx_Imm : NvU6;
        Ry     : NvU4;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SCP_DEBUG_CMD_Register use record
        Secure at 0 range 31 .. 31;
        Valid  at 0 range 28 .. 28;
        Op     at 0 range 20 .. 24;
        Rx_Imm at 0 range  8 .. 13;
        Ry     at 0 range  0 ..  3;
    end record;

    type LW_PRGNLCL_SCP_ACL_FETCH_Register is record
        Secure   : NvU8;
        Insecure : NvU8;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SCP_ACL_FETCH_Register use record
        Secure   at 0 range 16 .. 23;
        Insecure at 0 range  0 ..  7;
    end record;

    type LW_PRGNLCL_SCP_ACL_KEYABLE_Register is record
        Secure   : NvU8;
        Insecure : NvU8;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SCP_ACL_KEYABLE_Register use record
        Secure   at 0 range 16 .. 23;
        Insecure at 0 range  0 ..  7;
    end record;

    type LW_PRGNLCL_SCP_ACL_WRITE_Register is record
        Insecure : NvU8;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SCP_ACL_WRITE_Register use record
        Insecure at 0 range 0 .. 7;
    end record;

    type LW_PRGNLCL_SCP_STATUS_SCP_ACTIVE_Field is (ACTIVE_FALSE, ACTIVE_TRUE) with
        Size => 1;
    for LW_PRGNLCL_SCP_STATUS_SCP_ACTIVE_Field use (ACTIVE_FALSE => 16#0#, ACTIVE_TRUE => 16#1#);
    type LW_PRGNLCL_SCP_STATUS_CMD_ACTIVE_Field is (ACTIVE_FALSE, ACTIVE_TRUE) with
        Size => 1;
    for LW_PRGNLCL_SCP_STATUS_CMD_ACTIVE_Field use (ACTIVE_FALSE => 16#0#, ACTIVE_TRUE => 16#1#);
    type LW_PRGNLCL_SCP_STATUS_PUSH_ACTIVE_Field is (ACTIVE_FALSE, ACTIVE_TRUE) with
        Size => 1;
    for LW_PRGNLCL_SCP_STATUS_PUSH_ACTIVE_Field use (ACTIVE_FALSE => 16#0#, ACTIVE_TRUE => 16#1#);
    type LW_PRGNLCL_SCP_STATUS_SEQ_ACTIVE_Field is (ACTIVE_FALSE, ACTIVE_TRUE) with
        Size => 1;
    for LW_PRGNLCL_SCP_STATUS_SEQ_ACTIVE_Field use (ACTIVE_FALSE => 16#0#, ACTIVE_TRUE => 16#1#);
    type LW_PRGNLCL_SCP_STATUS_CTL_ACTIVE_Field is (ACTIVE_FALSE, ACTIVE_TRUE) with
        Size => 1;
    for LW_PRGNLCL_SCP_STATUS_CTL_ACTIVE_Field use (ACTIVE_FALSE => 16#0#, ACTIVE_TRUE => 16#1#);
    type LW_PRGNLCL_SCP_STATUS_FETCH_ACTIVE_Field is (ACTIVE_FALSE, ACTIVE_TRUE) with
        Size => 1;
    for LW_PRGNLCL_SCP_STATUS_FETCH_ACTIVE_Field use (ACTIVE_FALSE => 16#0#, ACTIVE_TRUE => 16#1#);
    type LW_PRGNLCL_SCP_STATUS_AES_ACTIVE_Field is (ACTIVE_FALSE, ACTIVE_TRUE) with
        Size => 1;
    for LW_PRGNLCL_SCP_STATUS_AES_ACTIVE_Field use (ACTIVE_FALSE => 16#0#, ACTIVE_TRUE => 16#1#);
    type LW_PRGNLCL_SCP_STATUS_RNG_ACTIVE_Field is (ACTIVE_FALSE, ACTIVE_TRUE) with
        Size => 1;
    for LW_PRGNLCL_SCP_STATUS_RNG_ACTIVE_Field use (ACTIVE_FALSE => 16#0#, ACTIVE_TRUE => 16#1#);
    type LW_PRGNLCL_SCP_STATUS_PKEY_LOADING_ACTIVE_Field is (ACTIVE_FALSE, ACTIVE_TRUE) with
        Size => 1;
    for LW_PRGNLCL_SCP_STATUS_PKEY_LOADING_ACTIVE_Field use (ACTIVE_FALSE => 16#0#, ACTIVE_TRUE => 16#1#);
    type LW_PRGNLCL_SCP_STATUS_SFK_LOADING_ACTIVE_Field is (ACTIVE_FALSE, ACTIVE_TRUE) with
        Size => 1;
    for LW_PRGNLCL_SCP_STATUS_SFK_LOADING_ACTIVE_Field use (ACTIVE_FALSE => 16#0#, ACTIVE_TRUE => 16#1#);
    type LW_PRGNLCL_SCP_STATUS_SCC_TRNG_ACTIVE_Field is (ACTIVE_FALSE, ACTIVE_TRUE) with
        Size => 1;
    for LW_PRGNLCL_SCP_STATUS_SCC_TRNG_ACTIVE_Field use (ACTIVE_FALSE => 16#0#, ACTIVE_TRUE => 16#1#);
    type LW_PRGNLCL_SCP_STATUS_SCC_PRNG_ACTIVE_Field is (ACTIVE_FALSE, ACTIVE_TRUE) with
        Size => 1;
    for LW_PRGNLCL_SCP_STATUS_SCC_PRNG_ACTIVE_Field use (ACTIVE_FALSE => 16#0#, ACTIVE_TRUE => 16#1#);

    type LW_PRGNLCL_SCP_STATUS_Register is record
        Scp_Active          : LW_PRGNLCL_SCP_STATUS_SCP_ACTIVE_Field;
        Cmd_Active          : LW_PRGNLCL_SCP_STATUS_CMD_ACTIVE_Field;
        Push_Active         : LW_PRGNLCL_SCP_STATUS_PUSH_ACTIVE_Field;
        Seq_Active          : LW_PRGNLCL_SCP_STATUS_SEQ_ACTIVE_Field;
        Ctl_Active          : LW_PRGNLCL_SCP_STATUS_CTL_ACTIVE_Field;
        Fetch_Active        : LW_PRGNLCL_SCP_STATUS_FETCH_ACTIVE_Field;
        Aes_Active          : LW_PRGNLCL_SCP_STATUS_AES_ACTIVE_Field;
        Rng_Active          : LW_PRGNLCL_SCP_STATUS_RNG_ACTIVE_Field;
        Pkey_Loading_Active : LW_PRGNLCL_SCP_STATUS_PKEY_LOADING_ACTIVE_Field;
        Sfk_Loading_Active  : LW_PRGNLCL_SCP_STATUS_SFK_LOADING_ACTIVE_Field;
        Scc_Trng_Active     : LW_PRGNLCL_SCP_STATUS_SCC_TRNG_ACTIVE_Field;
        Scc_Prng_Active     : LW_PRGNLCL_SCP_STATUS_SCC_PRNG_ACTIVE_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SCP_STATUS_Register use record
        Scp_Active          at 0 range  0 ..  0;
        Cmd_Active          at 0 range  2 ..  2;
        Push_Active         at 0 range  4 ..  4;
        Seq_Active          at 0 range  6 ..  6;
        Ctl_Active          at 0 range  8 ..  8;
        Fetch_Active        at 0 range 10 .. 10;
        Aes_Active          at 0 range 14 .. 14;
        Rng_Active          at 0 range 16 .. 16;
        Pkey_Loading_Active at 0 range 18 .. 18;
        Sfk_Loading_Active  at 0 range 20 .. 20;
        Scc_Trng_Active     at 0 range 26 .. 26;
        Scc_Prng_Active     at 0 range 28 .. 28;
    end record;

    type LW_PRGNLCL_SCP_STAT0_SF_CMD_VLD_Field is (VLD_FALSE, VLD_TRUE) with
        Size => 1;
    for LW_PRGNLCL_SCP_STAT0_SF_CMD_VLD_Field use (VLD_FALSE => 16#0#, VLD_TRUE => 16#1#);
    type LW_PRGNLCL_SCP_STAT0_SF_CMD_SECURE_Field is (SECURE_FALSE, SECURE_TRUE) with
        Size => 1;
    for LW_PRGNLCL_SCP_STAT0_SF_CMD_SECURE_Field use (SECURE_FALSE => 16#0#, SECURE_TRUE => 16#1#);
    type LW_PRGNLCL_SCP_STAT0_SF_PUSH_VLD_Field is (VLD_FALSE, VLD_TRUE) with
        Size => 1;
    for LW_PRGNLCL_SCP_STAT0_SF_PUSH_VLD_Field use (VLD_FALSE => 16#0#, VLD_TRUE => 16#1#);
    type LW_PRGNLCL_SCP_STAT0_SF_PUSH_SECURE_Field is (SECURE_FALSE, SECURE_TRUE) with
        Size => 1;
    for LW_PRGNLCL_SCP_STAT0_SF_PUSH_SECURE_Field use (SECURE_FALSE => 16#0#, SECURE_TRUE => 16#1#);
    type LW_PRGNLCL_SCP_STAT0_SF_FETCH_RDY_Field is (RDY_FALSE, RDY_TRUE) with
        Size => 1;
    for LW_PRGNLCL_SCP_STAT0_SF_FETCH_RDY_Field use (RDY_FALSE => 16#0#, RDY_TRUE => 16#1#);
    type LW_PRGNLCL_SCP_STAT0_SF_FETCH_SECURE_Field is (SECURE_FALSE, SECURE_TRUE) with
        Size => 1;
    for LW_PRGNLCL_SCP_STAT0_SF_FETCH_SECURE_Field use (SECURE_FALSE => 16#0#, SECURE_TRUE => 16#1#);
    type LW_PRGNLCL_SCP_STAT0_CMP_Field is (CMP_INIT, CMP_FAIL, CMP_PASS) with
        Size => 2;
    for LW_PRGNLCL_SCP_STAT0_CMP_Field use (CMP_INIT => 16#0#, CMP_FAIL => 16#2#, CMP_PASS => 16#3#);

    type LW_PRGNLCL_SCP_STAT0_Register is record
        Sf_Cmd_Vld      : LW_PRGNLCL_SCP_STAT0_SF_CMD_VLD_Field;
        Sf_Cmd_Secure   : LW_PRGNLCL_SCP_STAT0_SF_CMD_SECURE_Field;
        Sf_Push_Vld     : LW_PRGNLCL_SCP_STAT0_SF_PUSH_VLD_Field;
        Sf_Push_Secure  : LW_PRGNLCL_SCP_STAT0_SF_PUSH_SECURE_Field;
        Sf_Fetch_Rdy    : LW_PRGNLCL_SCP_STAT0_SF_FETCH_RDY_Field;
        Sf_Fetch_Secure : LW_PRGNLCL_SCP_STAT0_SF_FETCH_SECURE_Field;
        Cmp             : LW_PRGNLCL_SCP_STAT0_CMP_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SCP_STAT0_Register use record
        Sf_Cmd_Vld      at 0 range 14 .. 14;
        Sf_Cmd_Secure   at 0 range 12 .. 12;
        Sf_Push_Vld     at 0 range 10 .. 10;
        Sf_Push_Secure  at 0 range  8 ..  8;
        Sf_Fetch_Rdy    at 0 range  6 ..  6;
        Sf_Fetch_Secure at 0 range  4 ..  4;
        Cmp             at 0 range  0 ..  1;
    end record;

    type LW_PRGNLCL_SCP_STAT1_AES_OP_Field is (OP_ENCRYPT, OP_DECRYPT, OP_RKEY, OP_RKEYI) with
        Size => 3;
    for LW_PRGNLCL_SCP_STAT1_AES_OP_Field use (OP_ENCRYPT => 16#0#, OP_DECRYPT => 16#1#, OP_RKEY => 16#2#, OP_RKEYI => 16#3#);
    type LW_PRGNLCL_SCP_STAT1_HAZARD_STALL_Field is (STALL_FALSE, STALL_TRUE) with
        Size => 1;
    for LW_PRGNLCL_SCP_STAT1_HAZARD_STALL_Field use (STALL_FALSE => 16#0#, STALL_TRUE => 16#1#);
    type LW_PRGNLCL_SCP_STAT1_PUSH_STALL_Field is (STALL_FALSE, STALL_TRUE) with
        Size => 1;
    for LW_PRGNLCL_SCP_STAT1_PUSH_STALL_Field use (STALL_FALSE => 16#0#, STALL_TRUE => 16#1#);
    type LW_PRGNLCL_SCP_STAT1_FETCH_STALL_Field is (STALL_FALSE, STALL_TRUE) with
        Size => 1;
    for LW_PRGNLCL_SCP_STAT1_FETCH_STALL_Field use (STALL_FALSE => 16#0#, STALL_TRUE => 16#1#);
    type LW_PRGNLCL_SCP_STAT1_RNG_STALL_Field is (STALL_FALSE, STALL_TRUE) with
        Size => 1;
    for LW_PRGNLCL_SCP_STAT1_RNG_STALL_Field use (STALL_FALSE => 16#0#, STALL_TRUE => 16#1#);
    type LW_PRGNLCL_SCP_STAT1_WB_STALL_Field is (STALL_FALSE, STALL_TRUE) with
        Size => 1;
    for LW_PRGNLCL_SCP_STAT1_WB_STALL_Field use (STALL_FALSE => 16#0#, STALL_TRUE => 16#1#);
    type LW_PRGNLCL_SCP_STAT1_AES_STALL_Field is (STALL_FALSE, STALL_TRUE) with
        Size => 1;
    for LW_PRGNLCL_SCP_STAT1_AES_STALL_Field use (STALL_FALSE => 16#0#, STALL_TRUE => 16#1#);
    type LW_PRGNLCL_SCP_STAT1_SECRET_STALL_Field is (STALL_FALSE, STALL_TRUE) with
        Size => 1;
    for LW_PRGNLCL_SCP_STAT1_SECRET_STALL_Field use (STALL_FALSE => 16#0#, STALL_TRUE => 16#1#);

    type LW_PRGNLCL_SCP_STAT1_Register is record
        Seq_Op       : NvU5;
        Sf_Op        : NvU5;
        Dispatch_Op  : NvU5;
        Aes_Op       : LW_PRGNLCL_SCP_STAT1_AES_OP_Field;
        Hazard_Stall : LW_PRGNLCL_SCP_STAT1_HAZARD_STALL_Field;
        Push_Stall   : LW_PRGNLCL_SCP_STAT1_PUSH_STALL_Field;
        Fetch_Stall  : LW_PRGNLCL_SCP_STAT1_FETCH_STALL_Field;
        Rng_Stall    : LW_PRGNLCL_SCP_STAT1_RNG_STALL_Field;
        Wb_Stall     : LW_PRGNLCL_SCP_STAT1_WB_STALL_Field;
        Aes_Stall    : LW_PRGNLCL_SCP_STAT1_AES_STALL_Field;
        Secret_Stall : LW_PRGNLCL_SCP_STAT1_SECRET_STALL_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SCP_STAT1_Register use record
        Seq_Op       at 0 range  0 ..  4;
        Sf_Op        at 0 range  5 ..  9;
        Dispatch_Op  at 0 range 10 .. 14;
        Aes_Op       at 0 range 15 .. 17;
        Hazard_Stall at 0 range 24 .. 24;
        Push_Stall   at 0 range 25 .. 25;
        Fetch_Stall  at 0 range 26 .. 26;
        Rng_Stall    at 0 range 27 .. 27;
        Wb_Stall     at 0 range 28 .. 28;
        Aes_Stall    at 0 range 29 .. 29;
        Secret_Stall at 0 range 30 .. 30;
    end record;

    type LW_PRGNLCL_SCP_SECRET63_CTL_SEL_Field is (SEL_PKEY, SEL_KMEM) with
        Size => 1;
    for LW_PRGNLCL_SCP_SECRET63_CTL_SEL_Field use (SEL_PKEY => 16#0#, SEL_KMEM => 16#1#);

    type LW_PRGNLCL_SCP_SECRET63_CTL_Register is record
        Sel : LW_PRGNLCL_SCP_SECRET63_CTL_SEL_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SCP_SECRET63_CTL_Register use record
        Sel at 0 range 0 .. 0;
    end record;

    LW_PRGNLCL_SCP_RNG_STAT0_RAW_RAND_READY_READY           : constant NvU1 := 16#0#;
    LW_PRGNLCL_SCP_RNG_STAT0_RAW_RAND_READY_PROCESSING      : constant NvU1 := 16#1#;
    LW_PRGNLCL_SCP_RNG_STAT0_RAW_RAND_READY_RANDBUF_NOTFULL : constant NvU1 := 16#1#;
    LW_PRGNLCL_SCP_RNG_STAT0_AUTOCAL_TAP_A_INIT             : constant NvU4 := 16#f#;
    LW_PRGNLCL_SCP_RNG_STAT0_AUTOCAL_TAP_B_INIT             : constant NvU4 := 16#f#;
    type LW_PRGNLCL_SCP_RNG_STAT0_LFSR_STAT_A_Field is (A_LEGAL, A_ILLEGAL) with
        Size => 1;
    for LW_PRGNLCL_SCP_RNG_STAT0_LFSR_STAT_A_Field use (A_LEGAL => 16#0#, A_ILLEGAL => 16#1#);
    type LW_PRGNLCL_SCP_RNG_STAT0_LFSR_STAT_B_Field is (B_LEGAL, B_ILLEGAL) with
        Size => 1;
    for LW_PRGNLCL_SCP_RNG_STAT0_LFSR_STAT_B_Field use (B_LEGAL => 16#0#, B_ILLEGAL => 16#1#);
    LW_PRGNLCL_SCP_RNG_STAT0_RCTR_SATURATED_A_FALSE : constant NvU1 := 16#0#;
    LW_PRGNLCL_SCP_RNG_STAT0_RCTR_SATURATED_A_TRUE  : constant NvU1 := 16#1#;
    LW_PRGNLCL_SCP_RNG_STAT0_RCTR_SATURATED_A_CLEAR : constant NvU1 := 16#1#;
    LW_PRGNLCL_SCP_RNG_STAT0_RCTR_SATURATED_B_FALSE : constant NvU1 := 16#0#;
    LW_PRGNLCL_SCP_RNG_STAT0_RCTR_SATURATED_B_TRUE  : constant NvU1 := 16#1#;
    LW_PRGNLCL_SCP_RNG_STAT0_RCTR_SATURATED_B_CLEAR : constant NvU1 := 16#1#;

    type LW_PRGNLCL_SCP_RNG_STAT0_Register is record
        Raw_Rand_Ready   : NvU1;
        Autocal_Tap_A    : NvU4;
        Autocal_Tap_B    : NvU4;
        Lfsr_Stat_A      : LW_PRGNLCL_SCP_RNG_STAT0_LFSR_STAT_A_Field;
        Lfsr_Stat_B      : LW_PRGNLCL_SCP_RNG_STAT0_LFSR_STAT_B_Field;
        Rctr_Saturated_A : NvU1;
        Rctr_Saturated_B : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SCP_RNG_STAT0_Register use record
        Raw_Rand_Ready   at 0 range  0 ..  0;
        Autocal_Tap_A    at 0 range  4 ..  7;
        Autocal_Tap_B    at 0 range  8 .. 11;
        Lfsr_Stat_A      at 0 range 12 .. 12;
        Lfsr_Stat_B      at 0 range 13 .. 13;
        Rctr_Saturated_A at 0 range 16 .. 16;
        Rctr_Saturated_B at 0 range 20 .. 20;
    end record;

    LW_PRGNLCL_SCP_RNG_STAT1_AUTOCAL_RCLK_CTR_A_INIT : constant NvU16 := 16#0#;
    LW_PRGNLCL_SCP_RNG_STAT1_AUTOCAL_RCLK_CTR_B_INIT : constant NvU16 := 16#0#;

    type LW_PRGNLCL_SCP_RNG_STAT1_Register is record
        Autocal_Rclk_Ctr_A : NvU16;
        Autocal_Rclk_Ctr_B : NvU16;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SCP_RNG_STAT1_Register use record
        Autocal_Rclk_Ctr_A at 0 range  0 .. 15;
        Autocal_Rclk_Ctr_B at 0 range 16 .. 31;
    end record;

    LW_PRGNLCL_SCP_INTR_RAND_READY_NOT_PENDING           : constant NvU1 := 16#0#;
    LW_PRGNLCL_SCP_INTR_RAND_READY_PENDING               : constant NvU1 := 16#1#;
    LW_PRGNLCL_SCP_INTR_RAND_READY_RESET                 : constant NvU1 := 16#1#;
    LW_PRGNLCL_SCP_INTR_ACL_VIO_NOT_PENDING              : constant NvU1 := 16#0#;
    LW_PRGNLCL_SCP_INTR_ACL_VIO_PENDING                  : constant NvU1 := 16#1#;
    LW_PRGNLCL_SCP_INTR_ACL_VIO_RESET                    : constant NvU1 := 16#1#;
    LW_PRGNLCL_SCP_INTR_SECURITY_VIO_NOT_PENDING         : constant NvU1 := 16#0#;
    LW_PRGNLCL_SCP_INTR_SECURITY_VIO_PENDING             : constant NvU1 := 16#1#;
    LW_PRGNLCL_SCP_INTR_SECURITY_VIO_RESET               : constant NvU1 := 16#1#;
    LW_PRGNLCL_SCP_INTR_CMD_ERROR_NOT_PENDING            : constant NvU1 := 16#0#;
    LW_PRGNLCL_SCP_INTR_CMD_ERROR_PENDING                : constant NvU1 := 16#1#;
    LW_PRGNLCL_SCP_INTR_CMD_ERROR_RESET                  : constant NvU1 := 16#1#;
    LW_PRGNLCL_SCP_INTR_STEP_NOT_PENDING                 : constant NvU1 := 16#0#;
    LW_PRGNLCL_SCP_INTR_STEP_PENDING                     : constant NvU1 := 16#1#;
    LW_PRGNLCL_SCP_INTR_STEP_RESET                       : constant NvU1 := 16#1#;
    LW_PRGNLCL_SCP_INTR_RNDHOLDOFF_REQUESTED_NOT_PENDING : constant NvU1 := 16#0#;
    LW_PRGNLCL_SCP_INTR_RNDHOLDOFF_REQUESTED_PENDING     : constant NvU1 := 16#1#;
    LW_PRGNLCL_SCP_INTR_RNDHOLDOFF_REQUESTED_RESET       : constant NvU1 := 16#1#;
    LW_PRGNLCL_SCP_INTR_STALL_TIMEOUT_NOT_PENDING        : constant NvU1 := 16#0#;
    LW_PRGNLCL_SCP_INTR_STALL_TIMEOUT_PENDING            : constant NvU1 := 16#1#;
    LW_PRGNLCL_SCP_INTR_STALL_TIMEOUT_RESET              : constant NvU1 := 16#1#;

    type LW_PRGNLCL_SCP_INTR_Register is record
        Rand_Ready           : NvU1;
        Acl_Vio              : NvU1;
        Security_Vio         : NvU1;
        Cmd_Error            : NvU1;
        Step                 : NvU1;
        Rndholdoff_Requested : NvU1;
        Stall_Timeout        : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SCP_INTR_Register use record
        Rand_Ready           at 0 range  0 ..  0;
        Acl_Vio              at 0 range  8 ..  8;
        Security_Vio         at 0 range 12 .. 12;
        Cmd_Error            at 0 range 16 .. 16;
        Step                 at 0 range 20 .. 20;
        Rndholdoff_Requested at 0 range 24 .. 24;
        Stall_Timeout        at 0 range 28 .. 28;
    end record;

    type LW_PRGNLCL_SCP_INTR_EN_RAND_READY_Field is (READY_DISABLED, READY_ENABLED) with
        Size => 1;
    for LW_PRGNLCL_SCP_INTR_EN_RAND_READY_Field use (READY_DISABLED => 16#0#, READY_ENABLED => 16#1#);
    type LW_PRGNLCL_SCP_INTR_EN_ACL_VIO_Field is (VIO_DISABLED, VIO_ENABLED) with
        Size => 1;
    for LW_PRGNLCL_SCP_INTR_EN_ACL_VIO_Field use (VIO_DISABLED => 16#0#, VIO_ENABLED => 16#1#);
    type LW_PRGNLCL_SCP_INTR_EN_SECURITY_VIO_Field is (VIO_DISABLED, VIO_ENABLED) with
        Size => 1;
    for LW_PRGNLCL_SCP_INTR_EN_SECURITY_VIO_Field use (VIO_DISABLED => 16#0#, VIO_ENABLED => 16#1#);
    type LW_PRGNLCL_SCP_INTR_EN_CMD_ERROR_Field is (ERROR_DISABLED, ERROR_ENABLED) with
        Size => 1;
    for LW_PRGNLCL_SCP_INTR_EN_CMD_ERROR_Field use (ERROR_DISABLED => 16#0#, ERROR_ENABLED => 16#1#);
    type LW_PRGNLCL_SCP_INTR_EN_STEP_Field is (STEP_DISABLED, STEP_ENABLED) with
        Size => 1;
    for LW_PRGNLCL_SCP_INTR_EN_STEP_Field use (STEP_DISABLED => 16#0#, STEP_ENABLED => 16#1#);
    type LW_PRGNLCL_SCP_INTR_EN_RNDHOLDOFF_REQUESTED_Field is (REQUESTED_DISABLED, REQUESTED_ENABLED) with
        Size => 1;
    for LW_PRGNLCL_SCP_INTR_EN_RNDHOLDOFF_REQUESTED_Field use (REQUESTED_DISABLED => 16#0#, REQUESTED_ENABLED => 16#1#);
    type LW_PRGNLCL_SCP_INTR_EN_STALL_TIMEOUT_Field is (TIMEOUT_DISABLED, TIMEOUT_ENABLED) with
        Size => 1;
    for LW_PRGNLCL_SCP_INTR_EN_STALL_TIMEOUT_Field use (TIMEOUT_DISABLED => 16#0#, TIMEOUT_ENABLED => 16#1#);

    type LW_PRGNLCL_SCP_INTR_EN_Register is record
        Rand_Ready           : LW_PRGNLCL_SCP_INTR_EN_RAND_READY_Field;
        Acl_Vio              : LW_PRGNLCL_SCP_INTR_EN_ACL_VIO_Field;
        Security_Vio         : LW_PRGNLCL_SCP_INTR_EN_SECURITY_VIO_Field;
        Cmd_Error            : LW_PRGNLCL_SCP_INTR_EN_CMD_ERROR_Field;
        Step                 : LW_PRGNLCL_SCP_INTR_EN_STEP_Field;
        Rndholdoff_Requested : LW_PRGNLCL_SCP_INTR_EN_RNDHOLDOFF_REQUESTED_Field;
        Stall_Timeout        : LW_PRGNLCL_SCP_INTR_EN_STALL_TIMEOUT_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SCP_INTR_EN_Register use record
        Rand_Ready           at 0 range  0 ..  0;
        Acl_Vio              at 0 range  8 ..  8;
        Security_Vio         at 0 range 12 .. 12;
        Cmd_Error            at 0 range 16 .. 16;
        Step                 at 0 range 20 .. 20;
        Rndholdoff_Requested at 0 range 24 .. 24;
        Stall_Timeout        at 0 range 28 .. 28;
    end record;

    type LW_PRGNLCL_SCP_ACL_VIO_VIOLATION_Field is (VIOLATION_NOT_PENDING, VIOLATION_PENDING) with
        Size => 1;
    for LW_PRGNLCL_SCP_ACL_VIO_VIOLATION_Field use (VIOLATION_NOT_PENDING => 16#0#, VIOLATION_PENDING => 16#1#);
    LW_PRGNLCL_SCP_ACL_VIO_CHMOD_RELAX_VIO_NOT_PENDING : constant NvU1 := 16#0#;
    LW_PRGNLCL_SCP_ACL_VIO_CHMOD_RELAX_VIO_PENDING     : constant NvU1 := 16#1#;
    LW_PRGNLCL_SCP_ACL_VIO_CHMOD_RELAX_VIO_CLEAR       : constant NvU1 := 16#1#;
    LW_PRGNLCL_SCP_ACL_VIO_FETCH_VIO_NOT_PENDING       : constant NvU1 := 16#0#;
    LW_PRGNLCL_SCP_ACL_VIO_FETCH_VIO_PENDING           : constant NvU1 := 16#1#;
    LW_PRGNLCL_SCP_ACL_VIO_FETCH_VIO_CLEAR             : constant NvU1 := 16#1#;
    LW_PRGNLCL_SCP_ACL_VIO_WR_VIO_NOT_PENDING          : constant NvU1 := 16#0#;
    LW_PRGNLCL_SCP_ACL_VIO_WR_VIO_PENDING              : constant NvU1 := 16#1#;
    LW_PRGNLCL_SCP_ACL_VIO_WR_VIO_CLEAR                : constant NvU1 := 16#1#;

    type LW_PRGNLCL_SCP_ACL_VIO_Register is record
        Violation       : LW_PRGNLCL_SCP_ACL_VIO_VIOLATION_Field;
        Chmod_Relax_Vio : NvU1;
        Fetch_Vio       : NvU1;
        Wr_Vio          : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SCP_ACL_VIO_Register use record
        Violation       at 0 range 31 .. 31;
        Chmod_Relax_Vio at 0 range  8 ..  8;
        Fetch_Vio       at 0 range  4 ..  4;
        Wr_Vio          at 0 range  0 ..  0;
    end record;

    type LW_PRGNLCL_SCP_SECURITY_VIO_VIOLATION_Field is (VIOLATION_NOT_PENDING, VIOLATION_PENDING) with
        Size => 1;
    for LW_PRGNLCL_SCP_SECURITY_VIO_VIOLATION_Field use (VIOLATION_NOT_PENDING => 16#0#, VIOLATION_PENDING => 16#1#);
    LW_PRGNLCL_SCP_SECURITY_VIO_PUSH_VIO_SC_INIT : constant NvU2 := 16#0#;
    type LW_PRGNLCL_SCP_SECURITY_VIO_PUSH_VIO_Field is (VIO_NOT_PENDING, VIO_PENDING) with
        Size => 1;
    for LW_PRGNLCL_SCP_SECURITY_VIO_PUSH_VIO_Field use (VIO_NOT_PENDING => 16#0#, VIO_PENDING => 16#1#);
    LW_PRGNLCL_SCP_SECURITY_VIO_PUSH_CHANGE_VIO_SC_INIT : constant NvU2 := 16#0#;
    type LW_PRGNLCL_SCP_SECURITY_VIO_PUSH_CHANGE_VIO_Field is (VIO_NOT_PENDING, VIO_PENDING) with
        Size => 1;
    for LW_PRGNLCL_SCP_SECURITY_VIO_PUSH_CHANGE_VIO_Field use (VIO_NOT_PENDING => 16#0#, VIO_PENDING => 16#1#);
    LW_PRGNLCL_SCP_SECURITY_VIO_FETCH_VIO_SC_INIT : constant NvU2 := 16#0#;
    type LW_PRGNLCL_SCP_SECURITY_VIO_FETCH_VIO_Field is (VIO_NOT_PENDING, VIO_PENDING) with
        Size => 1;
    for LW_PRGNLCL_SCP_SECURITY_VIO_FETCH_VIO_Field use (VIO_NOT_PENDING => 16#0#, VIO_PENDING => 16#1#);
    LW_PRGNLCL_SCP_SECURITY_VIO_LOAD_TRACE_VIO_SC_INIT : constant NvU2 := 16#0#;
    type LW_PRGNLCL_SCP_SECURITY_VIO_LOAD_TRACE_VIO_Field is (VIO_NOT_PENDING, VIO_PENDING) with
        Size => 1;
    for LW_PRGNLCL_SCP_SECURITY_VIO_LOAD_TRACE_VIO_Field use (VIO_NOT_PENDING => 16#0#, VIO_PENDING => 16#1#);
    LW_PRGNLCL_SCP_SECURITY_VIO_LOOP_TRACE_VIO_SC_INIT : constant NvU2 := 16#0#;
    type LW_PRGNLCL_SCP_SECURITY_VIO_LOOP_TRACE_VIO_Field is (VIO_NOT_PENDING, VIO_PENDING) with
        Size => 1;
    for LW_PRGNLCL_SCP_SECURITY_VIO_LOOP_TRACE_VIO_Field use (VIO_NOT_PENDING => 16#0#, VIO_PENDING => 16#1#);

    type LW_PRGNLCL_SCP_SECURITY_VIO_Register is record
        Violation          : LW_PRGNLCL_SCP_SECURITY_VIO_VIOLATION_Field;
        Push_Vio_Sc        : NvU2;
        Push_Vio           : LW_PRGNLCL_SCP_SECURITY_VIO_PUSH_VIO_Field;
        Push_Change_Vio_Sc : NvU2;
        Push_Change_Vio    : LW_PRGNLCL_SCP_SECURITY_VIO_PUSH_CHANGE_VIO_Field;
        Fetch_Vio_Sc       : NvU2;
        Fetch_Vio          : LW_PRGNLCL_SCP_SECURITY_VIO_FETCH_VIO_Field;
        Load_Trace_Vio_Sc  : NvU2;
        Load_Trace_Vio     : LW_PRGNLCL_SCP_SECURITY_VIO_LOAD_TRACE_VIO_Field;
        Loop_Trace_Vio_Sc  : NvU2;
        Loop_Trace_Vio     : LW_PRGNLCL_SCP_SECURITY_VIO_LOOP_TRACE_VIO_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SCP_SECURITY_VIO_Register use record
        Violation          at 0 range 31 .. 31;
        Push_Vio_Sc        at 0 range 25 .. 26;
        Push_Vio           at 0 range 24 .. 24;
        Push_Change_Vio_Sc at 0 range 21 .. 22;
        Push_Change_Vio    at 0 range 20 .. 20;
        Fetch_Vio_Sc       at 0 range 17 .. 18;
        Fetch_Vio          at 0 range 16 .. 16;
        Load_Trace_Vio_Sc  at 0 range  5 ..  6;
        Load_Trace_Vio     at 0 range  4 ..  4;
        Loop_Trace_Vio_Sc  at 0 range  1 ..  2;
        Loop_Trace_Vio     at 0 range  0 ..  0;
    end record;

    LW_PRGNLCL_SCP_CMD_ERROR_UNDEFINED_FALSE              : constant NvU1 := 16#0#;
    LW_PRGNLCL_SCP_CMD_ERROR_UNDEFINED_TRUE               : constant NvU1 := 16#1#;
    LW_PRGNLCL_SCP_CMD_ERROR_UNDEFINED_CLEAR              : constant NvU1 := 16#1#;
    LW_PRGNLCL_SCP_CMD_ERROR_SEQ_EMPTY_FALSE              : constant NvU1 := 16#0#;
    LW_PRGNLCL_SCP_CMD_ERROR_SEQ_EMPTY_TRUE               : constant NvU1 := 16#1#;
    LW_PRGNLCL_SCP_CMD_ERROR_SEQ_EMPTY_CLEAR              : constant NvU1 := 16#1#;
    LW_PRGNLCL_SCP_CMD_ERROR_SEQ_OVERFLOW_FALSE           : constant NvU1 := 16#0#;
    LW_PRGNLCL_SCP_CMD_ERROR_SEQ_OVERFLOW_TRUE            : constant NvU1 := 16#1#;
    LW_PRGNLCL_SCP_CMD_ERROR_SEQ_OVERFLOW_CLEAR           : constant NvU1 := 16#1#;
    LW_PRGNLCL_SCP_CMD_ERROR_SEQ_INST_WHILE_LOADING_FALSE : constant NvU1 := 16#0#;
    LW_PRGNLCL_SCP_CMD_ERROR_SEQ_INST_WHILE_LOADING_TRUE  : constant NvU1 := 16#1#;
    LW_PRGNLCL_SCP_CMD_ERROR_SEQ_INST_WHILE_LOADING_CLEAR : constant NvU1 := 16#1#;
    LW_PRGNLCL_SCP_CMD_ERROR_SIG_INSECURE_FALSE           : constant NvU1 := 16#0#;
    LW_PRGNLCL_SCP_CMD_ERROR_SIG_INSECURE_TRUE            : constant NvU1 := 16#1#;
    LW_PRGNLCL_SCP_CMD_ERROR_SIG_INSECURE_CLEAR           : constant NvU1 := 16#1#;
    LW_PRGNLCL_SCP_CMD_ERROR_SIG_INVALID_FALSE            : constant NvU1 := 16#0#;
    LW_PRGNLCL_SCP_CMD_ERROR_SIG_INVALID_TRUE             : constant NvU1 := 16#1#;
    LW_PRGNLCL_SCP_CMD_ERROR_SIG_INVALID_CLEAR            : constant NvU1 := 16#1#;
    LW_PRGNLCL_SCP_CMD_ERROR_CHMOD_INSECURE_FALSE         : constant NvU1 := 16#0#;
    LW_PRGNLCL_SCP_CMD_ERROR_CHMOD_INSECURE_TRUE          : constant NvU1 := 16#1#;
    LW_PRGNLCL_SCP_CMD_ERROR_CHMOD_INSECURE_CLEAR         : constant NvU1 := 16#1#;
    LW_PRGNLCL_SCP_CMD_ERROR_SECRET_INSECURE_FALSE        : constant NvU1 := 16#0#;
    LW_PRGNLCL_SCP_CMD_ERROR_SECRET_INSECURE_TRUE         : constant NvU1 := 16#1#;
    LW_PRGNLCL_SCP_CMD_ERROR_SECRET_INSECURE_CLEAR        : constant NvU1 := 16#1#;

    type LW_PRGNLCL_SCP_CMD_ERROR_Register is record
        Undefined              : NvU1;
        Seq_Empty              : NvU1;
        Seq_Overflow           : NvU1;
        Seq_Inst_While_Loading : NvU1;
        Sig_Insecure           : NvU1;
        Sig_Invalid            : NvU1;
        Chmod_Insecure         : NvU1;
        Secret_Insecure        : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SCP_CMD_ERROR_Register use record
        Undefined              at 0 range  0 ..  0;
        Seq_Empty              at 0 range  4 ..  4;
        Seq_Overflow           at 0 range  8 ..  8;
        Seq_Inst_While_Loading at 0 range 12 .. 12;
        Sig_Insecure           at 0 range 16 .. 16;
        Sig_Invalid            at 0 range 20 .. 20;
        Chmod_Insecure         at 0 range 24 .. 24;
        Secret_Insecure        at 0 range 28 .. 28;
    end record;

    LW_PRGNLCL_SCP_RNDCTL0_HOLDOFF_INIT_LOWER_INIT : constant NvU32 := 16#1c9_c380#;

    type LW_PRGNLCL_SCP_RNDCTL0_Register is record
        Holdoff_Init_Lower : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SCP_RNDCTL0_Register use record
        Holdoff_Init_Lower at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_SCP_RNDCTL1_HOLDOFF_INIT_UPPER_ZERO : constant NvU16 := 16#0#;
    LW_PRGNLCL_SCP_RNDCTL1_HOLDOFF_INTRA_MASK_INIT : constant NvU16 := 16#ffff#;

    type LW_PRGNLCL_SCP_RNDCTL1_Register is record
        Holdoff_Init_Upper : NvU16;
        Holdoff_Intra_Mask : NvU16;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SCP_RNDCTL1_Register use record
        Holdoff_Init_Upper at 0 range  0 .. 15;
        Holdoff_Intra_Mask at 0 range 16 .. 31;
    end record;

    LW_PRGNLCL_SCP_RNDCTL2_COMPRESS_CNT_INIT : constant NvU16 := 16#0#;

    type LW_PRGNLCL_SCP_RNDCTL2_Register is record
        Compress_Cnt : NvU16;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SCP_RNDCTL2_Register use record
        Compress_Cnt at 0 range 0 .. 15;
    end record;

    type LW_PRGNLCL_SCP_RNDCTL3_TRIG_LFSR_RELOAD_A_Field is (A_INIT, A_TRIGGER) with
        Size => 1;
    for LW_PRGNLCL_SCP_RNDCTL3_TRIG_LFSR_RELOAD_A_Field use (A_INIT => 16#0#, A_TRIGGER => 16#1#);
    type LW_PRGNLCL_SCP_RNDCTL3_TRIG_LFSR_RELOAD_B_Field is (B_INIT, B_TRIGGER) with
        Size => 1;
    for LW_PRGNLCL_SCP_RNDCTL3_TRIG_LFSR_RELOAD_B_Field use (B_INIT => 16#0#, B_TRIGGER => 16#1#);

    type LW_PRGNLCL_SCP_RNDCTL3_Register is record
        Trig_Lfsr_Reload_A : LW_PRGNLCL_SCP_RNDCTL3_TRIG_LFSR_RELOAD_A_Field;
        Trig_Lfsr_Reload_B : LW_PRGNLCL_SCP_RNDCTL3_TRIG_LFSR_RELOAD_B_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SCP_RNDCTL3_Register use record
        Trig_Lfsr_Reload_A at 0 range 12 .. 12;
        Trig_Lfsr_Reload_B at 0 range 16 .. 16;
    end record;

    LW_PRGNLCL_SCP_RNDCTL4_POLYNOMIAL_A_INIT : constant NvU32 := 16#8020_0003#;

    type LW_PRGNLCL_SCP_RNDCTL4_Register is record
        Polynomial_A : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SCP_RNDCTL4_Register use record
        Polynomial_A at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_SCP_RNDCTL5_LFSR_INIT_A_INIT : constant NvU32 := 16#dead_beef#;

    type LW_PRGNLCL_SCP_RNDCTL5_Register is record
        Lfsr_Init_A : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SCP_RNDCTL5_Register use record
        Lfsr_Init_A at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_SCP_RNDCTL6_POLYNOMIAL_B_INIT : constant NvU32 := 16#8020_0003#;

    type LW_PRGNLCL_SCP_RNDCTL6_Register is record
        Polynomial_B : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SCP_RNDCTL6_Register use record
        Polynomial_B at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_SCP_RNDCTL7_LFSR_INIT_B_INIT : constant NvU32 := 16#beef_dead#;

    type LW_PRGNLCL_SCP_RNDCTL7_Register is record
        Lfsr_Init_B : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SCP_RNDCTL7_Register use record
        Lfsr_Init_B at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_SCP_RNDCTL8_AUTOCAL_LOW_TARGET_A_INIT : constant NvU16 := 16#0#;
    LW_PRGNLCL_SCP_RNDCTL8_AUTOCAL_LOW_TARGET_B_INIT : constant NvU16 := 16#0#;

    type LW_PRGNLCL_SCP_RNDCTL8_Register is record
        Autocal_Low_Target_A : NvU16;
        Autocal_Low_Target_B : NvU16;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SCP_RNDCTL8_Register use record
        Autocal_Low_Target_A at 0 range  0 .. 15;
        Autocal_Low_Target_B at 0 range 16 .. 31;
    end record;

    LW_PRGNLCL_SCP_RNDCTL9_AUTOCAL_HIGH_TARGET_A_INIT : constant NvU16 := 16#0#;
    LW_PRGNLCL_SCP_RNDCTL9_AUTOCAL_HIGH_TARGET_B_INIT : constant NvU16 := 16#0#;

    type LW_PRGNLCL_SCP_RNDCTL9_Register is record
        Autocal_High_Target_A : NvU16;
        Autocal_High_Target_B : NvU16;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SCP_RNDCTL9_Register use record
        Autocal_High_Target_A at 0 range  0 .. 15;
        Autocal_High_Target_B at 0 range 16 .. 31;
    end record;

    LW_PRGNLCL_SCP_RNDCTL10_AUTOCAL_SAMPLE_PERIOD_A_INIT : constant NvU16 := 16#f#;
    LW_PRGNLCL_SCP_RNDCTL10_AUTOCAL_SAMPLE_PERIOD_B_INIT : constant NvU16 := 16#f#;

    type LW_PRGNLCL_SCP_RNDCTL10_Register is record
        Autocal_Sample_Period_A : NvU16;
        Autocal_Sample_Period_B : NvU16;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SCP_RNDCTL10_Register use record
        Autocal_Sample_Period_A at 0 range  0 .. 15;
        Autocal_Sample_Period_B at 0 range 16 .. 31;
    end record;

    LW_PRGNLCL_SCP_RNDCTL11_AUTOCAL_ENABLE_INIT       : constant NvU1 := 16#0#;
    LW_PRGNLCL_SCP_RNDCTL11_AUTOCAL_ENABLE_TRUE       : constant NvU1 := 16#1#;
    LW_PRGNLCL_SCP_RNDCTL11_AUTOCAL_ENABLE_FALSE      : constant NvU1 := 16#0#;
    LW_PRGNLCL_SCP_RNDCTL11_AUTOCAL_MASTERSLAVE_INIT  : constant NvU1 := 16#0#;
    LW_PRGNLCL_SCP_RNDCTL11_AUTOCAL_MASTERSLAVE_TRUE  : constant NvU1 := 16#1#;
    LW_PRGNLCL_SCP_RNDCTL11_AUTOCAL_MASTERSLAVE_FALSE : constant NvU1 := 16#0#;
    LW_PRGNLCL_SCP_RNDCTL11_SYNCH_RAND_A_INIT         : constant NvU1 := 16#0#;
    LW_PRGNLCL_SCP_RNDCTL11_SYNCH_RAND_A_TRUE         : constant NvU1 := 16#1#;
    LW_PRGNLCL_SCP_RNDCTL11_SYNCH_RAND_A_FALSE        : constant NvU1 := 16#0#;
    LW_PRGNLCL_SCP_RNDCTL11_SYNCH_RAND_B_INIT         : constant NvU1 := 16#0#;
    LW_PRGNLCL_SCP_RNDCTL11_SYNCH_RAND_B_TRUE         : constant NvU1 := 16#1#;
    LW_PRGNLCL_SCP_RNDCTL11_SYNCH_RAND_B_FALSE        : constant NvU1 := 16#0#;
    type LW_PRGNLCL_SCP_RNDCTL11_RAND_SAMPLE_SELECT_A_Field is (A_OSC, A_AUTOCAL, A_LFSR, A_ZERO) with
        Size => 2;
    for LW_PRGNLCL_SCP_RNDCTL11_RAND_SAMPLE_SELECT_A_Field use (A_OSC => 16#0#, A_AUTOCAL => 16#1#, A_LFSR => 16#2#, A_ZERO => 16#3#);
    type LW_PRGNLCL_SCP_RNDCTL11_RAND_SAMPLE_SELECT_B_Field is (B_OSC, B_AUTOCAL, B_LFSR, B_ZERO) with
        Size => 2;
    for LW_PRGNLCL_SCP_RNDCTL11_RAND_SAMPLE_SELECT_B_Field use (B_OSC => 16#0#, B_AUTOCAL => 16#1#, B_LFSR => 16#2#, B_ZERO => 16#3#);
    LW_PRGNLCL_SCP_RNDCTL11_AUTOCAL_STATIC_TAP_A_INIT      : constant NvU4 := 16#f#;
    LW_PRGNLCL_SCP_RNDCTL11_AUTOCAL_STATIC_TAP_B_INIT      : constant NvU4 := 16#f#;
    LW_PRGNLCL_SCP_RNDCTL11_MIN_AUTO_TAP_INIT              : constant NvU4 := 16#0#;
    LW_PRGNLCL_SCP_RNDCTL11_AUTOCAL_HOLDOFF_DELAY_INIT     : constant NvU4 := 16#1#;
    LW_PRGNLCL_SCP_RNDCTL11_AUTOCAL_ASYNCH_HOLD_DELAY_INIT : constant NvU7 := 16#0#;
    type LW_PRGNLCL_SCP_RNDCTL11_AUTOCAL_SAFE_MODE_Field is (MODE_DISABLE, MODE_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_SCP_RNDCTL11_AUTOCAL_SAFE_MODE_Field use (MODE_DISABLE => 16#0#, MODE_ENABLE => 16#1#);

    type LW_PRGNLCL_SCP_RNDCTL11_Register is record
        Autocal_Enable            : NvU1;
        Autocal_Masterslave       : NvU1;
        Synch_Rand_A              : NvU1;
        Synch_Rand_B              : NvU1;
        Rand_Sample_Select_A      : LW_PRGNLCL_SCP_RNDCTL11_RAND_SAMPLE_SELECT_A_Field;
        Rand_Sample_Select_B      : LW_PRGNLCL_SCP_RNDCTL11_RAND_SAMPLE_SELECT_B_Field;
        Autocal_Static_Tap_A      : NvU4;
        Autocal_Static_Tap_B      : NvU4;
        Min_Auto_Tap              : NvU4;
        Autocal_Holdoff_Delay     : NvU4;
        Autocal_Asynch_Hold_Delay : NvU7;
        Autocal_Safe_Mode         : LW_PRGNLCL_SCP_RNDCTL11_AUTOCAL_SAFE_MODE_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SCP_RNDCTL11_Register use record
        Autocal_Enable            at 0 range  0 ..  0;
        Autocal_Masterslave       at 0 range  1 ..  1;
        Synch_Rand_A              at 0 range  2 ..  2;
        Synch_Rand_B              at 0 range  3 ..  3;
        Rand_Sample_Select_A      at 0 range  4 ..  5;
        Rand_Sample_Select_B      at 0 range  6 ..  7;
        Autocal_Static_Tap_A      at 0 range  8 .. 11;
        Autocal_Static_Tap_B      at 0 range 12 .. 15;
        Min_Auto_Tap              at 0 range 16 .. 19;
        Autocal_Holdoff_Delay     at 0 range 20 .. 23;
        Autocal_Asynch_Hold_Delay at 0 range 24 .. 30;
        Autocal_Safe_Mode         at 0 range 31 .. 31;
    end record;

    type LW_PRGNLCL_SCP_CTL_P2PRX_SFK_FALLBACK_MODE_Field is (MODE_FALSE, MODE_TRUE) with
        Size => 1;
    for LW_PRGNLCL_SCP_CTL_P2PRX_SFK_FALLBACK_MODE_Field use (MODE_FALSE => 16#0#, MODE_TRUE => 16#1#);
    LW_PRGNLCL_SCP_CTL_P2PRX_SFK_REQUEST_RELOAD_IDLE    : constant NvU1 := 16#0#;
    LW_PRGNLCL_SCP_CTL_P2PRX_SFK_REQUEST_RELOAD_PENDING : constant NvU1 := 16#1#;
    LW_PRGNLCL_SCP_CTL_P2PRX_SFK_REQUEST_RELOAD_TASK    : constant NvU1 := 16#1#;
    type LW_PRGNLCL_SCP_CTL_P2PRX_SFK_LOADED_Field is (LOADED_FALSE, LOADED_TRUE) with
        Size => 1;
    for LW_PRGNLCL_SCP_CTL_P2PRX_SFK_LOADED_Field use (LOADED_FALSE => 16#0#, LOADED_TRUE => 16#1#);

    type LW_PRGNLCL_SCP_CTL_P2PRX_Register is record
        Sfk_Fallback_Mode  : LW_PRGNLCL_SCP_CTL_P2PRX_SFK_FALLBACK_MODE_Field;
        Sfk_Request_Reload : NvU1;
        Sfk_Loaded         : LW_PRGNLCL_SCP_CTL_P2PRX_SFK_LOADED_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SCP_CTL_P2PRX_Register use record
        Sfk_Fallback_Mode  at 0 range 0 .. 0;
        Sfk_Request_Reload at 0 range 2 .. 2;
        Sfk_Loaded         at 0 range 3 .. 3;
    end record;

    LW_PRGNLCL_SCP_SCC_DEBUG_HWCFG0_RSEED_HOLDOFF_INIT_INIT  : constant NvU16 := 16#20#;
    LW_PRGNLCL_SCP_SCC_DEBUG_HWCFG0_RSEED_HOLDOFF_INTRA_INIT : constant NvU16 := 16#f#;

    type LW_PRGNLCL_SCP_SCC_DEBUG_HWCFG0_Register is record
        Rseed_Holdoff_Init  : NvU16;
        Rseed_Holdoff_Intra : NvU16;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SCP_SCC_DEBUG_HWCFG0_Register use record
        Rseed_Holdoff_Init  at 0 range  0 .. 15;
        Rseed_Holdoff_Intra at 0 range 16 .. 31;
    end record;

    LW_PRGNLCL_SCP_SCC_DEBUG_HWCFG1_RSEED_TMOUT_MAX_INIT : constant NvU32 := 16#fff#;

    type LW_PRGNLCL_SCP_SCC_DEBUG_HWCFG1_Register is record
        Rseed_Tmout_Max : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SCP_SCC_DEBUG_HWCFG1_Register use record
        Rseed_Tmout_Max at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_SCP_SCC_DEBUG_HWCFG2_PRNG_RESEED_PERIOD_INIT : constant NvU32 := 16#7fff_ffff#;

    type LW_PRGNLCL_SCP_SCC_DEBUG_HWCFG2_Register is record
        Prng_Reseed_Period : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SCP_SCC_DEBUG_HWCFG2_Register use record
        Prng_Reseed_Period at 0 range 0 .. 31;
    end record;

    type LW_PRGNLCL_SCP_SCC_DEBUG_STAT0_Register is record
        Rseed_Tmout_Cnt : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SCP_SCC_DEBUG_STAT0_Register use record
        Rseed_Tmout_Cnt at 0 range 0 .. 31;
    end record;

    type LW_PRGNLCL_SCP_SCC_DEBUG_STAT1_Register is record
        Rseed_Bit_Cnt : NvU6;
        Rseed_Valid   : NvU1;
        Rseed_Tmout   : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SCP_SCC_DEBUG_STAT1_Register use record
        Rseed_Bit_Cnt at 0 range 0 .. 5;
        Rseed_Valid   at 0 range 8 .. 8;
        Rseed_Tmout   at 0 range 9 .. 9;
    end record;

    LW_PRGNLCL_SCP_PUBKEYC_OFFS_INIT   : constant NvU8 := 16#0#;
    LW_PRGNLCL_SCP_PUBKEYC_AINCR_INIT  : constant NvU1 := 16#0#;
    LW_PRGNLCL_SCP_PUBKEYC_AINCR_TRUE  : constant NvU1 := 16#1#;
    LW_PRGNLCL_SCP_PUBKEYC_AINCR_FALSE : constant NvU1 := 16#0#;
    LW_PRGNLCL_SCP_PUBKEYC_RSA1_N_OFFS : constant      := 16#0#;
    LW_PRGNLCL_SCP_PUBKEYC_RSA1_N_SIZE : constant      := 16#180#;
    LW_PRGNLCL_SCP_PUBKEYC_RSA1_E_OFFS : constant      := 16#180#;
    LW_PRGNLCL_SCP_PUBKEYC_RSA1_E_SIZE : constant      := 16#20#;
    LW_PRGNLCL_SCP_PUBKEYC_ECC1_X_OFFS : constant      := 16#1a0#;
    LW_PRGNLCL_SCP_PUBKEYC_ECC1_X_SIZE : constant      := 16#20#;
    LW_PRGNLCL_SCP_PUBKEYC_ECC1_Y_OFFS : constant      := 16#1c0#;
    LW_PRGNLCL_SCP_PUBKEYC_ECC1_Y_SIZE : constant      := 16#20#;

    type LW_PRGNLCL_SCP_PUBKEYC_Register is record
        Offs  : NvU8;
        Aincr : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SCP_PUBKEYC_Register use record
        Offs  at 0 range  2 ..  9;
        Aincr at 0 range 31 .. 31;
    end record;

    type LW_PRGNLCL_SCP_PUBKEYD_Register is record
        Data : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SCP_PUBKEYD_Register use record
        Data at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_SCP_PK_ADDR_OFFSET_DEFT : constant NvU12 := 16#0#;
    type LW_PRGNLCL_SCP_PK_ADDR_AINCR_Field is (AINCR_DISABLE, AINCR_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_SCP_PK_ADDR_AINCR_Field use (AINCR_DISABLE => 16#0#, AINCR_ENABLE => 16#1#);

    type LW_PRGNLCL_SCP_PK_ADDR_Register is record
        Offset : NvU12;
        Aincr  : LW_PRGNLCL_SCP_PK_ADDR_AINCR_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SCP_PK_ADDR_Register use record
        Offset at 0 range  0 .. 11;
        Aincr  at 0 range 31 .. 31;
    end record;

    type LW_PRGNLCL_SCP_PK_DATA_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SCP_PK_DATA_Register use record
        Val at 0 range 0 .. 31;
    end record;

    type LW_PRGNLCL_SCP_SU_DBG0_ACTIVE_Field is (ACTIVE_FALSE, ACTIVE_TRUE) with
        Size => 1;
    for LW_PRGNLCL_SCP_SU_DBG0_ACTIVE_Field use (ACTIVE_FALSE => 16#0#, ACTIVE_TRUE => 16#1#);
    type LW_PRGNLCL_SCP_SU_DBG0_DONE_Field is (DONE_FALSE, DONE_TRUE) with
        Size => 1;
    for LW_PRGNLCL_SCP_SU_DBG0_DONE_Field use (DONE_FALSE => 16#0#, DONE_TRUE => 16#1#);
    type LW_PRGNLCL_SCP_SU_DBG0_KAT_FAIL_Field is (FAIL_FALSE, FAIL_TRUE) with
        Size => 1;
    for LW_PRGNLCL_SCP_SU_DBG0_KAT_FAIL_Field use (FAIL_FALSE => 16#0#, FAIL_TRUE => 16#1#);
    type LW_PRGNLCL_SCP_SU_DBG0_SEL_Field is (SEL_FALSE, SEL_TRUE) with
        Size => 1;
    for LW_PRGNLCL_SCP_SU_DBG0_SEL_Field use (SEL_FALSE => 16#0#, SEL_TRUE => 16#1#);
    type LW_PRGNLCL_SCP_SU_DBG0_FENCE_Field is (FENCE_FALSE, FENCE_TRUE) with
        Size => 1;
    for LW_PRGNLCL_SCP_SU_DBG0_FENCE_Field use (FENCE_FALSE => 16#0#, FENCE_TRUE => 16#1#);
    LW_PRGNLCL_SCP_SU_DBG0_STATE_INIT : constant NvU2 := 16#0#;

    type LW_PRGNLCL_SCP_SU_DBG0_Register is record
        Active   : LW_PRGNLCL_SCP_SU_DBG0_ACTIVE_Field;
        Done     : LW_PRGNLCL_SCP_SU_DBG0_DONE_Field;
        Kat_Fail : LW_PRGNLCL_SCP_SU_DBG0_KAT_FAIL_Field;
        Sel      : LW_PRGNLCL_SCP_SU_DBG0_SEL_Field;
        Fence    : LW_PRGNLCL_SCP_SU_DBG0_FENCE_Field;
        State    : NvU2;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SCP_SU_DBG0_Register use record
        Active   at 0 range  0 ..  0;
        Done     at 0 range  1 ..  1;
        Kat_Fail at 0 range  2 ..  2;
        Sel      at 0 range  3 ..  3;
        Fence    at 0 range  4 ..  4;
        State    at 0 range 24 .. 25;
    end record;

    type LW_PRGNLCL_SCP_SU_DBG1_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SCP_SU_DBG1_Register use record
        Val at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_FBIF_REGIONCFG_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FBIF_REGIONCFG_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FBIF_REGIONCFG_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_FBIF_REGIONCFG_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_FBIF_REGIONCFG_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_FBIF_REGIONCFG_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    LW_PRGNLCL_FBIF_REGIONCFG_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    type LW_PRGNLCL_FBIF_REGIONCFG_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FBIF_REGIONCFG_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FBIF_REGIONCFG_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FBIF_REGIONCFG_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FBIF_REGIONCFG_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FBIF_REGIONCFG_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_FBIF_REGIONCFG_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FBIF_REGIONCFG_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_FBIF_REGIONCFG_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FBIF_REGIONCFG_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FBIF_REGIONCFG_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FBIF_REGIONCFG_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FBIF_REGIONCFG_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FBIF_REGIONCFG_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FBIF_REGIONCFG_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FBIF_REGIONCFG_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FBIF_REGIONCFG_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FBIF_REGIONCFG_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FBIF_REGIONCFG_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FBIF_REGIONCFG_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FBIF_REGIONCFG_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FBIF_REGIONCFG_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FBIF_REGIONCFG_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FBIF_REGIONCFG_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FBIF_REGIONCFG_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_FBIF_REGIONCFG_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_FBIF_REGIONCFG_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_FBIF_REGIONCFG_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_FBIF_REGIONCFG_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_FBIF_REGIONCFG_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FBIF_REGIONCFG_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_FBIF_CTL2_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FBIF_CTL2_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FBIF_CTL2_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_FBIF_CTL2_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_FBIF_CTL2_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_FBIF_CTL2_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    LW_PRGNLCL_FBIF_CTL2_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    type LW_PRGNLCL_FBIF_CTL2_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FBIF_CTL2_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FBIF_CTL2_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FBIF_CTL2_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FBIF_CTL2_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FBIF_CTL2_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_FBIF_CTL2_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FBIF_CTL2_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_FBIF_CTL2_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FBIF_CTL2_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FBIF_CTL2_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FBIF_CTL2_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FBIF_CTL2_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FBIF_CTL2_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FBIF_CTL2_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FBIF_CTL2_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FBIF_CTL2_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FBIF_CTL2_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FBIF_CTL2_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FBIF_CTL2_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FBIF_CTL2_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FBIF_CTL2_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FBIF_CTL2_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FBIF_CTL2_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FBIF_CTL2_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_FBIF_CTL2_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_FBIF_CTL2_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_FBIF_CTL2_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_FBIF_CTL2_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_FBIF_CTL2_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FBIF_CTL2_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_FBIF_CTL_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FBIF_CTL_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FBIF_CTL_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_FBIF_CTL_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_FBIF_CTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_FBIF_CTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    LW_PRGNLCL_FBIF_CTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    type LW_PRGNLCL_FBIF_CTL_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FBIF_CTL_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FBIF_CTL_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FBIF_CTL_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FBIF_CTL_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FBIF_CTL_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_FBIF_CTL_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FBIF_CTL_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_FBIF_CTL_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FBIF_CTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FBIF_CTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FBIF_CTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FBIF_CTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FBIF_CTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FBIF_CTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FBIF_CTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FBIF_CTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FBIF_CTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FBIF_CTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FBIF_CTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FBIF_CTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FBIF_CTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FBIF_CTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FBIF_CTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FBIF_CTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_FBIF_CTL_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_FBIF_CTL_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_FBIF_CTL_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_FBIF_CTL_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_FBIF_CTL_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FBIF_CTL_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_FBIF_ENGID_CTRL_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_FBIF_ENGID_CTRL_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED : constant NvU4 := 16#f#;
    type LW_PRGNLCL_FBIF_ENGID_CTRL_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FBIF_ENGID_CTRL_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FBIF_ENGID_CTRL_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FBIF_ENGID_CTRL_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FBIF_ENGID_CTRL_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FBIF_ENGID_CTRL_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_FBIF_ENGID_CTRL_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FBIF_ENGID_CTRL_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_FBIF_ENGID_CTRL_PRIV_LEVEL_MASK_SOURCE_ENABLE_SEC_GSP_ENABLED : constant NvU20 := 16#c#;

    type LW_PRGNLCL_FBIF_ENGID_CTRL_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_FBIF_ENGID_CTRL_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_FBIF_ENGID_CTRL_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_FBIF_ENGID_CTRL_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_FBIF_ENGID_CTRL_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FBIF_ENGID_CTRL_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_FBIF_TRANSCFG_TARGET_INIT               : constant NvU2 := 16#0#;
    LW_PRGNLCL_FBIF_TRANSCFG_TARGET_LOCAL_FB           : constant NvU2 := 16#0#;
    LW_PRGNLCL_FBIF_TRANSCFG_TARGET_COHERENT_SYSMEM    : constant NvU2 := 16#1#;
    LW_PRGNLCL_FBIF_TRANSCFG_TARGET_NONCOHERENT_SYSMEM : constant NvU2 := 16#2#;
    LW_PRGNLCL_FBIF_TRANSCFG_MEM_TYPE_INIT             : constant NvU1 := 16#0#;
    LW_PRGNLCL_FBIF_TRANSCFG_MEM_TYPE_VIRTUAL          : constant NvU1 := 16#0#;
    LW_PRGNLCL_FBIF_TRANSCFG_MEM_TYPE_PHYSICAL         : constant NvU1 := 16#1#;
    LW_PRGNLCL_FBIF_TRANSCFG_L2C_WR_INIT               : constant NvU2 := 16#1#;
    LW_PRGNLCL_FBIF_TRANSCFG_L2C_WR_L2_EVICT_FIRST     : constant NvU2 := 16#0#;
    LW_PRGNLCL_FBIF_TRANSCFG_L2C_WR_L2_EVICT_NORMAL    : constant NvU2 := 16#1#;
    LW_PRGNLCL_FBIF_TRANSCFG_L2C_WR_L2_EVICT_LAST      : constant NvU2 := 16#2#;
    LW_PRGNLCL_FBIF_TRANSCFG_L2C_RD_INIT               : constant NvU2 := 16#1#;
    LW_PRGNLCL_FBIF_TRANSCFG_L2C_RD_L2_EVICT_FIRST     : constant NvU2 := 16#0#;
    LW_PRGNLCL_FBIF_TRANSCFG_L2C_RD_L2_EVICT_NORMAL    : constant NvU2 := 16#1#;
    LW_PRGNLCL_FBIF_TRANSCFG_L2C_RD_L2_EVICT_LAST      : constant NvU2 := 16#2#;
    LW_PRGNLCL_FBIF_TRANSCFG_WACHK0_INIT               : constant NvU1 := 16#0#;
    LW_PRGNLCL_FBIF_TRANSCFG_WACHK0_ENABLE             : constant NvU1 := 16#1#;
    LW_PRGNLCL_FBIF_TRANSCFG_WACHK0_DISABLE            : constant NvU1 := 16#0#;
    LW_PRGNLCL_FBIF_TRANSCFG_WACHK1_INIT               : constant NvU1 := 16#0#;
    LW_PRGNLCL_FBIF_TRANSCFG_WACHK1_ENABLE             : constant NvU1 := 16#1#;
    LW_PRGNLCL_FBIF_TRANSCFG_WACHK1_DISABLE            : constant NvU1 := 16#0#;
    LW_PRGNLCL_FBIF_TRANSCFG_RACHK0_INIT               : constant NvU1 := 16#0#;
    LW_PRGNLCL_FBIF_TRANSCFG_RACHK0_ENABLE             : constant NvU1 := 16#1#;
    LW_PRGNLCL_FBIF_TRANSCFG_RACHK0_DISABLE            : constant NvU1 := 16#0#;
    LW_PRGNLCL_FBIF_TRANSCFG_RACHK1_INIT               : constant NvU1 := 16#0#;
    LW_PRGNLCL_FBIF_TRANSCFG_RACHK1_ENABLE             : constant NvU1 := 16#1#;
    LW_PRGNLCL_FBIF_TRANSCFG_RACHK1_DISABLE            : constant NvU1 := 16#0#;
    type LW_PRGNLCL_FBIF_TRANSCFG_ENGINE_ID_FLAG_Field is (FLAG_BAR2_FN0, FLAG_OWN) with
        Size => 1;
    for LW_PRGNLCL_FBIF_TRANSCFG_ENGINE_ID_FLAG_Field use (FLAG_BAR2_FN0 => 16#0#, FLAG_OWN => 16#1#);

    type LW_PRGNLCL_FBIF_TRANSCFG_Register is record
        Target         : NvU2;
        Mem_Type       : NvU1;
        L2c_Wr         : NvU2;
        L2c_Rd         : NvU2;
        Wachk0         : NvU1;
        Wachk1         : NvU1;
        Rachk0         : NvU1;
        Rachk1         : NvU1;
        Engine_Id_Flag : LW_PRGNLCL_FBIF_TRANSCFG_ENGINE_ID_FLAG_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FBIF_TRANSCFG_Register use record
        Target         at 0 range  0 ..  1;
        Mem_Type       at 0 range  2 ..  2;
        L2c_Wr         at 0 range  4 ..  5;
        L2c_Rd         at 0 range  8 ..  9;
        Wachk0         at 0 range 12 .. 12;
        Wachk1         at 0 range 13 .. 13;
        Rachk0         at 0 range 14 .. 14;
        Rachk1         at 0 range 15 .. 15;
        Engine_Id_Flag at 0 range 16 .. 16;
    end record;

    type LW_PRGNLCL_FBIF_INSTBLK_TARGET_Field is (TARGET_LOCAL_FB, TARGET_COHERENT_SYSMEM, TARGET_NONCOHERENT_SYSMEM) with
        Size => 2;
    for LW_PRGNLCL_FBIF_INSTBLK_TARGET_Field use (TARGET_LOCAL_FB => 16#0#, TARGET_COHERENT_SYSMEM => 16#1#, TARGET_NONCOHERENT_SYSMEM => 16#2#);

    type LW_PRGNLCL_FBIF_INSTBLK_Register is record
        Ptr    : NvU28;
        Target : LW_PRGNLCL_FBIF_INSTBLK_TARGET_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FBIF_INSTBLK_Register use record
        Ptr    at 0 range  0 .. 27;
        Target at 0 range 28 .. 29;
    end record;

    type LW_PRGNLCL_FBIF_BIND_STATUS_STATUS_Field is (STATUS_NOT_BIND, STATUS_BOUND) with
        Size => 2;
    for LW_PRGNLCL_FBIF_BIND_STATUS_STATUS_Field use (STATUS_NOT_BIND => 16#0#, STATUS_BOUND => 16#2#);
    LW_PRGNLCL_FBIF_BIND_STATUS_GFID_INIT : constant NvU6 := 16#0#;

    type LW_PRGNLCL_FBIF_BIND_STATUS_Register is record
        Status    : LW_PRGNLCL_FBIF_BIND_STATUS_STATUS_Field;
        Gfid      : NvU6;
        Engine_Id : NvU9;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FBIF_BIND_STATUS_Register use record
        Status    at 0 range  0 ..  1;
        Gfid      at 0 range  4 ..  9;
        Engine_Id at 0 range 16 .. 24;
    end record;

    type LW_PRGNLCL_FBIF_INSTBLK2_Register is record
        Ptr_Hi : NvU12;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FBIF_INSTBLK2_Register use record
        Ptr_Hi at 0 range 0 .. 11;
    end record;

    LW_PRGNLCL_FBIF_TLB_INVALIDATE_PARAM1_LO_GPC_INIT        : constant NvU1  := 16#0#;
    LW_PRGNLCL_FBIF_TLB_INVALIDATE_PARAM1_LO_PDB_INIT        : constant NvU1  := 16#0#;
    LW_PRGNLCL_FBIF_TLB_INVALIDATE_PARAM1_LO_TARGET_INIT     : constant NvU2  := 16#0#;
    LW_PRGNLCL_FBIF_TLB_INVALIDATE_PARAM1_LO_PDB_ADR_LO_INIT : constant NvU28 := 16#0#;

    type LW_PRGNLCL_FBIF_TLB_INVALIDATE_PARAM1_LO_Register is record
        Gpc        : NvU1;
        Pdb        : NvU1;
        Target     : NvU2;
        Pdb_Adr_Lo : NvU28;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FBIF_TLB_INVALIDATE_PARAM1_LO_Register use record
        Gpc        at 0 range 0 ..  0;
        Pdb        at 0 range 1 ..  1;
        Target     at 0 range 2 ..  3;
        Pdb_Adr_Lo at 0 range 4 .. 31;
    end record;

    LW_PRGNLCL_FBIF_TLB_INVALIDATE_PARAM1_HI_PDB_ADR_HI_INIT                   : constant NvU7 := 16#0#;
    LW_PRGNLCL_FBIF_TLB_INVALIDATE_PARAM1_HI_PAGE_TABLE_LEVEL_INIT             : constant NvU3 := 16#0#;
    LW_PRGNLCL_FBIF_TLB_INVALIDATE_PARAM1_HI_TARGET_AVA_INIT                   : constant NvU1 := 16#0#;
    LW_PRGNLCL_FBIF_TLB_INVALIDATE_PARAM1_HI_MMU_REPLAY_INIT                   : constant NvU3 := 16#0#;
    LW_PRGNLCL_FBIF_TLB_INVALIDATE_PARAM1_HI_CANCEL_TARGET_CLIENT_UNIT_ID_INIT : constant NvU7 := 16#0#;
    LW_PRGNLCL_FBIF_TLB_INVALIDATE_PARAM1_HI_CANCEL_TARGET_GPC_ID_INIT         : constant NvU3 := 16#0#;
    LW_PRGNLCL_FBIF_TLB_INVALIDATE_PARAM1_HI_SYS_MEMBAR_INIT                   : constant NvU1 := 16#0#;
    LW_PRGNLCL_FBIF_TLB_INVALIDATE_PARAM1_HI_ACK_TYPE_INIT                     : constant NvU2 := 16#0#;
    LW_PRGNLCL_FBIF_TLB_INVALIDATE_PARAM1_HI_PDB_ADR_HI1_INIT                  : constant NvU5 := 16#0#;

    type LW_PRGNLCL_FBIF_TLB_INVALIDATE_PARAM1_HI_Register is record
        Pdb_Adr_Hi                   : NvU7;
        Page_Table_Level             : NvU3;
        Target_Ava                   : NvU1;
        Mmu_Replay                   : NvU3;
        Cancel_Target_Client_Unit_Id : NvU7;
        Cancel_Target_Gpc_Id         : NvU3;
        Sys_Membar                   : NvU1;
        Ack_Type                     : NvU2;
        Pdb_Adr_Hi1                  : NvU5;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FBIF_TLB_INVALIDATE_PARAM1_HI_Register use record
        Pdb_Adr_Hi                   at 0 range  0 ..  6;
        Page_Table_Level             at 0 range  7 ..  9;
        Target_Ava                   at 0 range 10 .. 10;
        Mmu_Replay                   at 0 range 11 .. 13;
        Cancel_Target_Client_Unit_Id at 0 range 14 .. 20;
        Cancel_Target_Gpc_Id         at 0 range 21 .. 23;
        Sys_Membar                   at 0 range 24 .. 24;
        Ack_Type                     at 0 range 25 .. 26;
        Pdb_Adr_Hi1                  at 0 range 27 .. 31;
    end record;

    type LW_PRGNLCL_FBIF_CTL_FLUSH_Field is (FLUSH_CLEAR, FLUSH_SET) with
        Size => 1;
    for LW_PRGNLCL_FBIF_CTL_FLUSH_Field use (FLUSH_CLEAR => 16#0#, FLUSH_SET => 16#1#);
    type LW_PRGNLCL_FBIF_CTL_INVAL_CONTEXT_Field is (CONTEXT_CLEAR, CONTEXT_SET) with
        Size => 1;
    for LW_PRGNLCL_FBIF_CTL_INVAL_CONTEXT_Field use (CONTEXT_CLEAR => 16#0#, CONTEXT_SET => 16#1#);
    type LW_PRGNLCL_FBIF_CTL_CLR_BWCOUNT_Field is (BWCOUNT_CLEAR, BWCOUNT_SET) with
        Size => 1;
    for LW_PRGNLCL_FBIF_CTL_CLR_BWCOUNT_Field use (BWCOUNT_CLEAR => 16#0#, BWCOUNT_SET => 16#1#);
    LW_PRGNLCL_FBIF_CTL_ENABLE_INIT  : constant NvU1 := 16#1#;
    LW_PRGNLCL_FBIF_CTL_ENABLE_TRUE  : constant NvU1 := 16#1#;
    LW_PRGNLCL_FBIF_CTL_ENABLE_FALSE : constant NvU1 := 16#0#;
    type LW_PRGNLCL_FBIF_CTL_CLR_IDLEWDERR_Field is (IDLEWDERR_CLEAR, IDLEWDERR_SET) with
        Size => 1;
    for LW_PRGNLCL_FBIF_CTL_CLR_IDLEWDERR_Field use (IDLEWDERR_CLEAR => 16#0#, IDLEWDERR_SET => 16#1#);
    type LW_PRGNLCL_FBIF_CTL_RESET_Field is (RESET_CLEAR, RESET_SET) with
        Size => 1;
    for LW_PRGNLCL_FBIF_CTL_RESET_Field use (RESET_CLEAR => 16#0#, RESET_SET => 16#1#);
    LW_PRGNLCL_FBIF_CTL_ALLOW_PHYS_NO_CTX_INIT     : constant NvU1 := 16#0#;
    LW_PRGNLCL_FBIF_CTL_ALLOW_PHYS_NO_CTX_DISALLOW : constant NvU1 := 16#0#;
    LW_PRGNLCL_FBIF_CTL_ALLOW_PHYS_NO_CTX_ALLOW    : constant NvU1 := 16#1#;
    type LW_PRGNLCL_FBIF_CTL_IDLE_Field is (IDLE_FALSE, IDLE_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FBIF_CTL_IDLE_Field use (IDLE_FALSE => 16#0#, IDLE_TRUE => 16#1#);
    type LW_PRGNLCL_FBIF_CTL_IDLEWDERR_Field is (IDLEWDERR_FALSE, IDLEWDERR_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FBIF_CTL_IDLEWDERR_Field use (IDLEWDERR_FALSE => 16#0#, IDLEWDERR_TRUE => 16#1#);
    type LW_PRGNLCL_FBIF_CTL_SRTOUT_Field is (SRTOUT_FALSE, SRTOUT_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FBIF_CTL_SRTOUT_Field use (SRTOUT_FALSE => 16#0#, SRTOUT_TRUE => 16#1#);
    type LW_PRGNLCL_FBIF_CTL_CLR_SRTOUT_Field is (SRTOUT_CLEAR, SRTOUT_SET) with
        Size => 1;
    for LW_PRGNLCL_FBIF_CTL_CLR_SRTOUT_Field use (SRTOUT_CLEAR => 16#0#, SRTOUT_SET => 16#1#);
    type LW_PRGNLCL_FBIF_CTL_CC_MODE_Field is (MODE_FALSE, MODE_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FBIF_CTL_CC_MODE_Field use (MODE_FALSE => 16#0#, MODE_TRUE => 16#1#);
    LW_PRGNLCL_FBIF_CTL_SRTOVAL_INIT : constant NvU4 := 16#0#;

    type LW_PRGNLCL_FBIF_CTL_Register is record
        Flush             : LW_PRGNLCL_FBIF_CTL_FLUSH_Field;
        Inval_Context     : LW_PRGNLCL_FBIF_CTL_INVAL_CONTEXT_Field;
        Clr_Bwcount       : LW_PRGNLCL_FBIF_CTL_CLR_BWCOUNT_Field;
        Enable            : NvU1;
        Clr_Idlewderr     : LW_PRGNLCL_FBIF_CTL_CLR_IDLEWDERR_Field;
        Reset             : LW_PRGNLCL_FBIF_CTL_RESET_Field;
        Allow_Phys_No_Ctx : NvU1;
        Idle              : LW_PRGNLCL_FBIF_CTL_IDLE_Field;
        Idlewderr         : LW_PRGNLCL_FBIF_CTL_IDLEWDERR_Field;
        Srtout            : LW_PRGNLCL_FBIF_CTL_SRTOUT_Field;
        Clr_Srtout        : LW_PRGNLCL_FBIF_CTL_CLR_SRTOUT_Field;
        Cc_Mode           : LW_PRGNLCL_FBIF_CTL_CC_MODE_Field;
        Srtoval           : NvU4;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FBIF_CTL_Register use record
        Flush             at 0 range  0 ..  0;
        Inval_Context     at 0 range  2 ..  2;
        Clr_Bwcount       at 0 range  3 ..  3;
        Enable            at 0 range  4 ..  4;
        Clr_Idlewderr     at 0 range  5 ..  5;
        Reset             at 0 range  6 ..  6;
        Allow_Phys_No_Ctx at 0 range  7 ..  7;
        Idle              at 0 range  8 ..  8;
        Idlewderr         at 0 range  9 ..  9;
        Srtout            at 0 range 10 .. 10;
        Clr_Srtout        at 0 range 11 .. 11;
        Cc_Mode           at 0 range 12 .. 12;
        Srtoval           at 0 range 16 .. 19;
    end record;

    type LW_PRGNLCL_FBIF_CTL2_NACK_MODE_Field is (MODE_INIT, MODE_NACK_AS_ACK) with
        Size => 1;
    for LW_PRGNLCL_FBIF_CTL2_NACK_MODE_Field use (MODE_INIT => 16#0#, MODE_NACK_AS_ACK => 16#1#);

    type LW_PRGNLCL_FBIF_CTL2_Register is record
        Nack_Mode : LW_PRGNLCL_FBIF_CTL2_NACK_MODE_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FBIF_CTL2_Register use record
        Nack_Mode at 0 range 0 .. 0;
    end record;

    type LW_PRGNLCL_FBIF_ENGID_CTRL_OWN_ENGINE_ID_ALLOW_Field is (ALLOW_FALSE, ALLOW_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FBIF_ENGID_CTRL_OWN_ENGINE_ID_ALLOW_Field use (ALLOW_FALSE => 16#0#, ALLOW_TRUE => 16#1#);
    type LW_PRGNLCL_FBIF_ENGID_CTRL_BAR2FN0_ALLOW_Field is (ALLOW_FALSE, ALLOW_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FBIF_ENGID_CTRL_BAR2FN0_ALLOW_Field use (ALLOW_FALSE => 16#0#, ALLOW_TRUE => 16#1#);
    type LW_PRGNLCL_FBIF_ENGID_CTRL_BAR2FN1TO63_ALLOW_Field is (ALLOW_FALSE, ALLOW_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FBIF_ENGID_CTRL_BAR2FN1TO63_ALLOW_Field use (ALLOW_FALSE => 16#0#, ALLOW_TRUE => 16#1#);

    type LW_PRGNLCL_FBIF_ENGID_CTRL_Register is record
        Own_Engine_Id_Allow : LW_PRGNLCL_FBIF_ENGID_CTRL_OWN_ENGINE_ID_ALLOW_Field;
        Bar2fn0_Allow       : LW_PRGNLCL_FBIF_ENGID_CTRL_BAR2FN0_ALLOW_Field;
        Bar2fn1to63_Allow   : LW_PRGNLCL_FBIF_ENGID_CTRL_BAR2FN1TO63_ALLOW_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FBIF_ENGID_CTRL_Register use record
        Own_Engine_Id_Allow at 0 range 0 .. 0;
        Bar2fn0_Allow       at 0 range 1 .. 1;
        Bar2fn1to63_Allow   at 0 range 2 .. 2;
    end record;

    LW_PRGNLCL_FBIF_THROTTLE_BUCKET_SIZE_INIT   : constant NvU12 := 16#64#;
    LW_PRGNLCL_FBIF_THROTTLE_LEAK_COUNT_DISABLE : constant NvU12 := 16#0#;
    type LW_PRGNLCL_FBIF_THROTTLE_LEAK_SIZE_Field is (SIZE_16B, SIZE_32B, SIZE_64B, SIZE_128B) with
        Size => 2;
    for LW_PRGNLCL_FBIF_THROTTLE_LEAK_SIZE_Field use (SIZE_16B => 16#0#, SIZE_32B => 16#1#, SIZE_64B => 16#2#, SIZE_128B => 16#3#);

    type LW_PRGNLCL_FBIF_THROTTLE_Register is record
        Bucket_Size : NvU12;
        Leak_Count  : NvU12;
        Leak_Size   : LW_PRGNLCL_FBIF_THROTTLE_LEAK_SIZE_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FBIF_THROTTLE_Register use record
        Bucket_Size at 0 range  0 .. 11;
        Leak_Count  at 0 range 16 .. 27;
        Leak_Size   at 0 range 30 .. 31;
    end record;

    LW_PRGNLCL_FBIF_REGIONCFG_T0_INIT : constant NvU4 := 16#0#;
    LW_PRGNLCL_FBIF_REGIONCFG_T1_INIT : constant NvU4 := 16#0#;
    LW_PRGNLCL_FBIF_REGIONCFG_T2_INIT : constant NvU4 := 16#0#;
    LW_PRGNLCL_FBIF_REGIONCFG_T3_INIT : constant NvU4 := 16#0#;
    LW_PRGNLCL_FBIF_REGIONCFG_T4_INIT : constant NvU4 := 16#0#;
    LW_PRGNLCL_FBIF_REGIONCFG_T5_INIT : constant NvU4 := 16#0#;
    LW_PRGNLCL_FBIF_REGIONCFG_T6_INIT : constant NvU4 := 16#0#;
    LW_PRGNLCL_FBIF_REGIONCFG_T7_INIT : constant NvU4 := 16#0#;

    type LW_PRGNLCL_FBIF_REGIONCFG_Register is record
        T0 : NvU4;
        T1 : NvU4;
        T2 : NvU4;
        T3 : NvU4;
        T4 : NvU4;
        T5 : NvU4;
        T6 : NvU4;
        T7 : NvU4;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FBIF_REGIONCFG_Register use record
        T0 at 0 range  0 ..  3;
        T1 at 0 range  4 ..  7;
        T2 at 0 range  8 .. 11;
        T3 at 0 range 12 .. 15;
        T4 at 0 range 16 .. 19;
        T5 at 0 range 20 .. 23;
        T6 at 0 range 24 .. 27;
        T7 at 0 range 28 .. 31;
    end record;

    type LW_PRGNLCL_FBIF_CG1_SLCG_MSD0_Field is (MSD0_ENABLED, MSD0_DISABLED) with
        Size => 1;
    for LW_PRGNLCL_FBIF_CG1_SLCG_MSD0_Field use (MSD0_ENABLED => 16#0#, MSD0_DISABLED => 16#1#);
    type LW_PRGNLCL_FBIF_CG1_SLCG_MSD1_Field is (MSD1_ENABLED, MSD1_DISABLED) with
        Size => 1;
    for LW_PRGNLCL_FBIF_CG1_SLCG_MSD1_Field use (MSD1_ENABLED => 16#0#, MSD1_DISABLED => 16#1#);
    type LW_PRGNLCL_FBIF_CG1_SLCG_FB0_Field is (FB0_ENABLED, FB0_DISABLED) with
        Size => 1;
    for LW_PRGNLCL_FBIF_CG1_SLCG_FB0_Field use (FB0_ENABLED => 16#0#, FB0_DISABLED => 16#1#);
    type LW_PRGNLCL_FBIF_CG1_SLCG_FB1_Field is (FB1_ENABLED, FB1_DISABLED) with
        Size => 1;
    for LW_PRGNLCL_FBIF_CG1_SLCG_FB1_Field use (FB1_ENABLED => 16#0#, FB1_DISABLED => 16#1#);
    LW_PRGNLCL_FBIF_CG1_SLCG_ENABLED  : constant := 16#0#;
    LW_PRGNLCL_FBIF_CG1_SLCG_DISABLED : constant := 16#f#;

    type LW_PRGNLCL_FBIF_CG1_Register is record
        Slcg_Msd0 : LW_PRGNLCL_FBIF_CG1_SLCG_MSD0_Field;
        Slcg_Msd1 : LW_PRGNLCL_FBIF_CG1_SLCG_MSD1_Field;
        Slcg_Fb0  : LW_PRGNLCL_FBIF_CG1_SLCG_FB0_Field;
        Slcg_Fb1  : LW_PRGNLCL_FBIF_CG1_SLCG_FB1_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FBIF_CG1_Register use record
        Slcg_Msd0 at 0 range 0 .. 0;
        Slcg_Msd1 at 0 range 1 .. 1;
        Slcg_Fb0  at 0 range 2 .. 2;
        Slcg_Fb1  at 0 range 3 .. 3;
    end record;

    type LW_PRGNLCL_FBIF_ACHK_BLK_Register is record
        Addr : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FBIF_ACHK_BLK_Register use record
        Addr at 0 range 0 .. 31;
    end record;

    type LW_PRGNLCL_FBIF_ACHK_CTL_TYPE_Field is (TYPE_INSIDE, TYPE_OUTSIDE) with
        Size => 1;
    for LW_PRGNLCL_FBIF_ACHK_CTL_TYPE_Field use (TYPE_INSIDE => 16#0#, TYPE_OUTSIDE => 16#1#);
    type LW_PRGNLCL_FBIF_ACHK_CTL_STATE_Field is (STATE_DISABLE, STATE_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FBIF_ACHK_CTL_STATE_Field use (STATE_DISABLE => 16#0#, STATE_ENABLE => 16#1#);

    type LW_PRGNLCL_FBIF_ACHK_CTL_Register is record
        Size     : NvU5;
        Ctl_Type : LW_PRGNLCL_FBIF_ACHK_CTL_TYPE_Field;
        State    : LW_PRGNLCL_FBIF_ACHK_CTL_STATE_Field;
        Count    : NvU16;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FBIF_ACHK_CTL_Register use record
        Size     at 0 range  0 ..  4;
        Ctl_Type at 0 range  6 ..  6;
        State    at 0 range  7 ..  7;
        Count    at 0 range 16 .. 31;
    end record;

    type LW_PRGNLCL_FBIF_DBG_STAT0_DSP_STATE_Field is
        (STATE_IDLE, STATE_CHECK, STATE_ALLOC, STATE_ISSUE, STATE_WDAT, STATE_FLT_FLUSH, STATE_HALT, STATE_INST, STATE_INST_ACK, STATE_OBJ, STATE_FLUSH) with
        Size => 4;
    for LW_PRGNLCL_FBIF_DBG_STAT0_DSP_STATE_Field use
        (STATE_IDLE => 16#0#, STATE_CHECK => 16#1#, STATE_ALLOC => 16#2#, STATE_ISSUE => 16#3#, STATE_WDAT => 16#4#, STATE_FLT_FLUSH => 16#5#, STATE_HALT => 16#6#,
         STATE_INST => 16#7#, STATE_INST_ACK => 16#8#, STATE_OBJ => 16#9#, STATE_FLUSH => 16#a#);
    type LW_PRGNLCL_FBIF_DBG_STAT0_ORQ_NOT_FULL_Field is (FULL_FLASE, FULL_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FBIF_DBG_STAT0_ORQ_NOT_FULL_Field use (FULL_FLASE => 16#0#, FULL_TRUE => 16#1#);
    type LW_PRGNLCL_FBIF_DBG_STAT0_DISPATCH_IDLE_Field is (IDLE_FALSE, IDLE_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FBIF_DBG_STAT0_DISPATCH_IDLE_Field use (IDLE_FALSE => 16#0#, IDLE_TRUE => 16#1#);
    type LW_PRGNLCL_FBIF_DBG_STAT0_MWF_FSM_STATE_Field is (STATE_IDLE, STATE_COMMIT, STATE_ROLLBACK) with
        Size => 2;
    for LW_PRGNLCL_FBIF_DBG_STAT0_MWF_FSM_STATE_Field use (STATE_IDLE => 16#0#, STATE_COMMIT => 16#1#, STATE_ROLLBACK => 16#2#);

    type LW_PRGNLCL_FBIF_DBG_STAT0_Register is record
        Dsp_State         : LW_PRGNLCL_FBIF_DBG_STAT0_DSP_STATE_Field;
        Inst_Vld          : NvU1;
        Inst_Bound        : NvU1;
        Ricf_Has_Data     : NvU1;
        Arq_Has_Data      : NvU1;
        Mrq_Has_Data      : NvU1;
        Fault_Or_Halt     : NvU1;
        Orq_Not_Full      : LW_PRGNLCL_FBIF_DBG_STAT0_ORQ_NOT_FULL_Field;
        Flush_Outstanding : NvU1;
        Dispatch_Idle     : LW_PRGNLCL_FBIF_DBG_STAT0_DISPATCH_IDLE_Field;
        Mwf_Fsm_State     : LW_PRGNLCL_FBIF_DBG_STAT0_MWF_FSM_STATE_Field;
        Mwf_Has_Data      : NvU1;
        Mwf_Commit_Count  : NvU6;
        Stall_Rqq_Full    : NvU1;
        Stall_Wdf_Full    : NvU1;
        Stall_Fb_Busy     : NvU1;
        Stall_Orq_Full    : NvU1;
        Stall_Rdm_Alloc   : NvU1;
        Stall_Rdm_Portq   : NvU1;
        Stall_Rdm_Client  : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FBIF_DBG_STAT0_Register use record
        Dsp_State         at 0 range  0 ..  3;
        Inst_Vld          at 0 range  4 ..  4;
        Inst_Bound        at 0 range  5 ..  5;
        Ricf_Has_Data     at 0 range  6 ..  6;
        Arq_Has_Data      at 0 range  7 ..  7;
        Mrq_Has_Data      at 0 range  8 ..  8;
        Fault_Or_Halt     at 0 range  9 ..  9;
        Orq_Not_Full      at 0 range 10 .. 10;
        Flush_Outstanding at 0 range 11 .. 11;
        Dispatch_Idle     at 0 range 12 .. 12;
        Mwf_Fsm_State     at 0 range 16 .. 17;
        Mwf_Has_Data      at 0 range 18 .. 18;
        Mwf_Commit_Count  at 0 range 19 .. 24;
        Stall_Rqq_Full    at 0 range 25 .. 25;
        Stall_Wdf_Full    at 0 range 26 .. 26;
        Stall_Fb_Busy     at 0 range 27 .. 27;
        Stall_Orq_Full    at 0 range 28 .. 28;
        Stall_Rdm_Alloc   at 0 range 29 .. 29;
        Stall_Rdm_Portq   at 0 range 30 .. 30;
        Stall_Rdm_Client  at 0 range 31 .. 31;
    end record;

    type LW_PRGNLCL_FBIF_DBG_STAT1_WDF_FSM_STATE_Field is (STATE_IDLE, STATE_COMMIT, STATE_ROLLBACK) with
        Size => 2;
    for LW_PRGNLCL_FBIF_DBG_STAT1_WDF_FSM_STATE_Field use (STATE_IDLE => 16#0#, STATE_COMMIT => 16#1#, STATE_ROLLBACK => 16#2#);
    type LW_PRGNLCL_FBIF_DBG_STAT1_RDM_STATE_Field is (STATE_IDLE, STATE_WAITBUF, STATE_SAVEBUF) with
        Size => 2;
    for LW_PRGNLCL_FBIF_DBG_STAT1_RDM_STATE_Field use (STATE_IDLE => 16#0#, STATE_WAITBUF => 16#1#, STATE_SAVEBUF => 16#2#);

    type LW_PRGNLCL_FBIF_DBG_STAT1_Register is record
        Flt_State          : NvU2;
        Flt_Faulted        : NvU1;
        Flt_Busy           : NvU1;
        Ackf_Has_Data      : NvU1;
        Orq_Has_Data       : NvU1;
        All_Reads_Done     : NvU1;
        Fbr_Idle           : NvU1;
        Fbr_Faulted        : NvU1;
        Fbr_Fb_Busy        : NvU1;
        Fbr_Pkt2fb_Vld     : NvU1;
        Fbr_Rcv_Data_Valid : NvU1;
        Fbr_Rcv_Data_Type  : NvU2;
        Wdf_Fsm_State      : LW_PRGNLCL_FBIF_DBG_STAT1_WDF_FSM_STATE_Field;
        Wdf_Has_Data       : NvU1;
        Wdf_Commit_Count   : NvU5;
        Rdm_State          : LW_PRGNLCL_FBIF_DBG_STAT1_RDM_STATE_Field;
        Rdm_Any_Ready      : NvU1;
        Rdm_Daq_Has_Data   : NvU1;
        Rdm_Dealloc_Count  : NvU3;
        Rdata_Wait         : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FBIF_DBG_STAT1_Register use record
        Flt_State          at 0 range  0 ..  1;
        Flt_Faulted        at 0 range  2 ..  2;
        Flt_Busy           at 0 range  3 ..  3;
        Ackf_Has_Data      at 0 range  4 ..  4;
        Orq_Has_Data       at 0 range  5 ..  5;
        All_Reads_Done     at 0 range  6 ..  6;
        Fbr_Idle           at 0 range  8 ..  8;
        Fbr_Faulted        at 0 range  9 ..  9;
        Fbr_Fb_Busy        at 0 range 10 .. 10;
        Fbr_Pkt2fb_Vld     at 0 range 11 .. 11;
        Fbr_Rcv_Data_Valid at 0 range 12 .. 12;
        Fbr_Rcv_Data_Type  at 0 range 14 .. 15;
        Wdf_Fsm_State      at 0 range 16 .. 17;
        Wdf_Has_Data       at 0 range 18 .. 18;
        Wdf_Commit_Count   at 0 range 19 .. 23;
        Rdm_State          at 0 range 24 .. 25;
        Rdm_Any_Ready      at 0 range 26 .. 26;
        Rdm_Daq_Has_Data   at 0 range 27 .. 27;
        Rdm_Dealloc_Count  at 0 range 28 .. 30;
        Rdata_Wait         at 0 range 31 .. 31;
    end record;

    type LW_PRGNLCL_FBIF_DBG_STAT2_FAULTED_SRCQ_Field is (SRCQ_MRQ, SRCQ_ARQ) with
        Size => 1;
    for LW_PRGNLCL_FBIF_DBG_STAT2_FAULTED_SRCQ_Field use (SRCQ_MRQ => 16#0#, SRCQ_ARQ => 16#1#);

    type LW_PRGNLCL_FBIF_DBG_STAT2_Register is record
        Faulted_Portid : NvU6;
        Faulted_Subid  : NvU7;
        Faulted_Srcq   : LW_PRGNLCL_FBIF_DBG_STAT2_FAULTED_SRCQ_Field;
        Faulted_Vld    : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FBIF_DBG_STAT2_Register use record
        Faulted_Portid at 0 range  0 ..  5;
        Faulted_Subid  at 0 range  6 .. 12;
        Faulted_Srcq   at 0 range 13 .. 13;
        Faulted_Vld    at 0 range 14 .. 14;
    end record;

    type LW_PRGNLCL_FBIF_DBG_RDCOUNT_LO_Register is record
        Data : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FBIF_DBG_RDCOUNT_LO_Register use record
        Data at 0 range 0 .. 31;
    end record;

    type LW_PRGNLCL_FBIF_DBG_RDCOUNT_HI_Register is record
        Data : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FBIF_DBG_RDCOUNT_HI_Register use record
        Data at 0 range 0 .. 31;
    end record;

    type LW_PRGNLCL_FBIF_DBG_WRCOUNT_LO_Register is record
        Data : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FBIF_DBG_WRCOUNT_LO_Register use record
        Data at 0 range 0 .. 31;
    end record;

    type LW_PRGNLCL_FBIF_DBG_WRCOUNT_HI_Register is record
        Data : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FBIF_DBG_WRCOUNT_HI_Register use record
        Data at 0 range 0 .. 31;
    end record;

    type LW_PRGNLCL_FBIF_BW_ALLOC_Register is record
        Int_Rd : NvU8;
        Int_Wr : NvU8;
        Ext_Rd : NvU8;
        Req_T  : NvU8;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FBIF_BW_ALLOC_Register use record
        Int_Rd at 0 range  0 ..  7;
        Int_Wr at 0 range  8 .. 15;
        Ext_Rd at 0 range 16 .. 23;
        Req_T  at 0 range 24 .. 31;
    end record;

    LW_PRGNLCL_SE0_INCR_SYNCPT_COND_IMMEDIATE   : constant NvU8  := 16#0#;
    LW_PRGNLCL_SE0_INCR_SYNCPT_COND_OP_DONE     : constant NvU8  := 16#1#;
    LW_PRGNLCL_SE0_INCR_SYNCPT_COND_RD_DONE     : constant NvU8  := 16#2#;
    LW_PRGNLCL_SE0_INCR_SYNCPT_COND_REG_WR_SAFE : constant NvU8  := 16#3#;
    LW_PRGNLCL_SE0_INCR_SYNCPT_COND_ENGINE_IDLE : constant NvU8  := 16#4#;
    LW_PRGNLCL_SE0_INCR_SYNCPT_COND_COND_5      : constant NvU8  := 16#5#;
    LW_PRGNLCL_SE0_INCR_SYNCPT_COND_COND_6      : constant NvU8  := 16#6#;
    LW_PRGNLCL_SE0_INCR_SYNCPT_COND_COND_7      : constant NvU8  := 16#7#;
    LW_PRGNLCL_SE0_INCR_SYNCPT_COND_COND_8      : constant NvU8  := 16#8#;
    LW_PRGNLCL_SE0_INCR_SYNCPT_COND_COND_9      : constant NvU8  := 16#9#;
    LW_PRGNLCL_SE0_INCR_SYNCPT_COND_COND_10     : constant NvU8  := 16#a#;
    LW_PRGNLCL_SE0_INCR_SYNCPT_COND_COND_11     : constant NvU8  := 16#b#;
    LW_PRGNLCL_SE0_INCR_SYNCPT_COND_COND_12     : constant NvU8  := 16#c#;
    LW_PRGNLCL_SE0_INCR_SYNCPT_COND_COND_13     : constant NvU8  := 16#d#;
    LW_PRGNLCL_SE0_INCR_SYNCPT_COND_COND_14     : constant NvU8  := 16#e#;
    LW_PRGNLCL_SE0_INCR_SYNCPT_COND_COND_15     : constant NvU8  := 16#f#;
    LW_PRGNLCL_SE0_INCR_SYNCPT_COND_COND_16     : constant NvU8  := 16#10#;
    LW_PRGNLCL_SE0_INCR_SYNCPT_COND_COND_17     : constant NvU8  := 16#11#;
    LW_PRGNLCL_SE0_INCR_SYNCPT_COND_COND_18     : constant NvU8  := 16#12#;
    LW_PRGNLCL_SE0_INCR_SYNCPT_COND_COND_19     : constant NvU8  := 16#13#;
    LW_PRGNLCL_SE0_INCR_SYNCPT_COND_COND_20     : constant NvU8  := 16#14#;
    LW_PRGNLCL_SE0_INCR_SYNCPT_COND_COND_21     : constant NvU8  := 16#15#;
    LW_PRGNLCL_SE0_INCR_SYNCPT_COND_COND_22     : constant NvU8  := 16#16#;
    LW_PRGNLCL_SE0_INCR_SYNCPT_COND_COND_23     : constant NvU8  := 16#17#;
    LW_PRGNLCL_SE0_INCR_SYNCPT_COND_COND_24     : constant NvU8  := 16#18#;
    LW_PRGNLCL_SE0_INCR_SYNCPT_COND_COND_25     : constant NvU8  := 16#19#;
    LW_PRGNLCL_SE0_INCR_SYNCPT_COND_COND_26     : constant NvU8  := 16#1a#;
    LW_PRGNLCL_SE0_INCR_SYNCPT_COND_COND_27     : constant NvU8  := 16#1b#;
    LW_PRGNLCL_SE0_INCR_SYNCPT_COND_COND_28     : constant NvU8  := 16#1c#;
    LW_PRGNLCL_SE0_INCR_SYNCPT_COND_COND_29     : constant NvU8  := 16#1d#;
    LW_PRGNLCL_SE0_INCR_SYNCPT_COND_COND_30     : constant NvU8  := 16#1e#;
    LW_PRGNLCL_SE0_INCR_SYNCPT_COND_COND_31     : constant NvU8  := 16#1f#;
    LW_PRGNLCL_SE0_INCR_SYNCPT_COND_INIT        : constant NvU8  := 16#0#;
    LW_PRGNLCL_SE0_INCR_SYNCPT_INDX_INIT        : constant NvU10 := 16#0#;

    type LW_PRGNLCL_SE0_INCR_SYNCPT_Register is record
        Cond : NvU8;
        Indx : NvU10;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SE0_INCR_SYNCPT_Register use record
        Cond at 0 range 10 .. 17;
        Indx at 0 range  0 ..  9;
    end record;

    LW_PRGNLCL_SE0_INCR_SYNCPT_CTRL_NO_STALL_4_INIT   : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_INCR_SYNCPT_CTRL_SOFT_RESET_4_INIT : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_INCR_SYNCPT_CTRL_NO_STALL_3_INIT   : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_INCR_SYNCPT_CTRL_SOFT_RESET_3_INIT : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_INCR_SYNCPT_CTRL_NO_STALL_2_INIT   : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_INCR_SYNCPT_CTRL_SOFT_RESET_2_INIT : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_INCR_SYNCPT_CTRL_NO_STALL_1_INIT   : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_INCR_SYNCPT_CTRL_SOFT_RESET_1_INIT : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_INCR_SYNCPT_CTRL_NO_STALL_0_INIT   : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_INCR_SYNCPT_CTRL_SOFT_RESET_0_INIT : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_INCR_SYNCPT_CTRL_NO_STALL_INIT     : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_INCR_SYNCPT_CTRL_SOFT_RESET_INIT   : constant NvU1 := 16#0#;

    type LW_PRGNLCL_SE0_INCR_SYNCPT_CTRL_Register is record
        No_Stall_4   : NvU1;
        Soft_Reset_4 : NvU1;
        No_Stall_3   : NvU1;
        Soft_Reset_3 : NvU1;
        No_Stall_2   : NvU1;
        Soft_Reset_2 : NvU1;
        No_Stall_1   : NvU1;
        Soft_Reset_1 : NvU1;
        No_Stall_0   : NvU1;
        Soft_Reset_0 : NvU1;
        No_Stall     : NvU1;
        Soft_Reset   : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SE0_INCR_SYNCPT_CTRL_Register use record
        No_Stall_4   at 0 range 25 .. 25;
        Soft_Reset_4 at 0 range 24 .. 24;
        No_Stall_3   at 0 range 23 .. 23;
        Soft_Reset_3 at 0 range 22 .. 22;
        No_Stall_2   at 0 range 21 .. 21;
        Soft_Reset_2 at 0 range 20 .. 20;
        No_Stall_1   at 0 range 19 .. 19;
        Soft_Reset_1 at 0 range 18 .. 18;
        No_Stall_0   at 0 range 17 .. 17;
        Soft_Reset_0 at 0 range 16 .. 16;
        No_Stall     at 0 range  8 ..  8;
        Soft_Reset   at 0 range  0 ..  0;
    end record;

    LW_PRGNLCL_SE0_INCR_SYNCPT_ERROR_COND_STATUS_INIT : constant NvU5 := 16#0#;

    type LW_PRGNLCL_SE0_INCR_SYNCPT_ERROR_Register is record
        Cond_Status : NvU5;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SE0_INCR_SYNCPT_ERROR_Register use record
        Cond_Status at 0 range 0 .. 4;
    end record;

    LW_PRGNLCL_SE0_CTXSW_CURR_CLASS_INIT   : constant NvU10 := 16#0#;
    LW_PRGNLCL_SE0_CTXSW_AUTO_ACK_MANUAL   : constant NvU1  := 16#0#;
    LW_PRGNLCL_SE0_CTXSW_AUTO_ACK_AUTOACK  : constant NvU1  := 16#1#;
    LW_PRGNLCL_SE0_CTXSW_AUTO_ACK_INIT     : constant NvU1  := 16#1#;
    LW_PRGNLCL_SE0_CTXSW_CURR_CHANNEL_INIT : constant NvU10 := 16#3f#;

    type LW_PRGNLCL_SE0_CTXSW_Register is record
        Curr_Class   : NvU10;
        Auto_Ack     : NvU1;
        Curr_Channel : NvU10;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SE0_CTXSW_Register use record
        Curr_Class   at 0 range  0 ..  9;
        Auto_Ack     at 0 range 10 .. 10;
        Curr_Channel at 0 range 11 .. 20;
    end record;

    LW_PRGNLCL_SE0_CTXSW_NEXT_NEXT_CLASS_INIT   : constant NvU10 := 16#0#;
    LW_PRGNLCL_SE0_CTXSW_NEXT_NEXT_CHANNEL_INIT : constant NvU10 := 16#3f#;

    type LW_PRGNLCL_SE0_CTXSW_NEXT_Register is record
        Next_Class   : NvU10;
        Next_Channel : NvU10;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SE0_CTXSW_NEXT_Register use record
        Next_Class   at 0 range  0 ..  9;
        Next_Channel at 0 range 10 .. 19;
    end record;

    type LW_PRGNLCL_SE0_OWNERSHIP_UID_Field is (UID_HW, UID_PSC, UID_TZ, UID_NS, UID_FSI) with
        Size => 3;
    for LW_PRGNLCL_SE0_OWNERSHIP_UID_Field use (UID_HW => 16#0#, UID_PSC => 16#1#, UID_TZ => 16#2#, UID_NS => 16#3#, UID_FSI => 16#4#);
    type LW_PRGNLCL_SE0_OWNERSHIP_UID0_Field is (UID0_HW, UID0_PSC, UID0_TZ, UID0_NS, UID0_FSI) with
        Size => 3;
    for LW_PRGNLCL_SE0_OWNERSHIP_UID0_Field use (UID0_HW => 16#0#, UID0_PSC => 16#1#, UID0_TZ => 16#2#, UID0_NS => 16#3#, UID0_FSI => 16#4#);
    type LW_PRGNLCL_SE0_OWNERSHIP_UID1_Field is (UID1_FUSE, UID1_PSC, UID1_TZ, UID1_NS, UID1_FSI) with
        Size => 3;
    for LW_PRGNLCL_SE0_OWNERSHIP_UID1_Field use (UID1_FUSE => 16#0#, UID1_PSC => 16#1#, UID1_TZ => 16#2#, UID1_NS => 16#3#, UID1_FSI => 16#4#);
    LW_PRGNLCL_SE0_OWNERSHIP_UID_SEL_UID0 : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_OWNERSHIP_UID_SEL_UID1 : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_OWNERSHIP_UID_SEL_INIT : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_OWNERSHIP_LOCK_FALSE   : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_OWNERSHIP_LOCK_TRUE    : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_OWNERSHIP_LOCK_INIT    : constant NvU1 := 16#0#;

    type LW_PRGNLCL_SE0_OWNERSHIP_Register is record
        Uid     : LW_PRGNLCL_SE0_OWNERSHIP_UID_Field;
        Uid0    : LW_PRGNLCL_SE0_OWNERSHIP_UID0_Field;
        Uid1    : LW_PRGNLCL_SE0_OWNERSHIP_UID1_Field;
        Uid_Sel : NvU1;
        Lock    : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SE0_OWNERSHIP_Register use record
        Uid     at 0 range  0 ..  2;
        Uid0    at 0 range 16 .. 18;
        Uid1    at 0 range 20 .. 22;
        Uid_Sel at 0 range 24 .. 24;
        Lock    at 0 range 31 .. 31;
    end record;

    LW_PRGNLCL_SE0_SE_SECURITY_SE_ENG_DIS_FALSE     : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_SE_SECURITY_SE_ENG_DIS_TRUE      : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_SE_SECURITY_SE_ENG_DIS_INIT      : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_SE_SECURITY_SE_HARD_SETTING_INIT : constant NvU1 := 16#1#;

    type LW_PRGNLCL_SE0_SE_SECURITY_Register is record
        Se_Eng_Dis      : NvU1;
        Se_Hard_Setting : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SE0_SE_SECURITY_Register use record
        Se_Eng_Dis      at 0 range 1 .. 1;
        Se_Hard_Setting at 0 range 0 .. 0;
    end record;

    LW_PRGNLCL_SE0_INT_STATUS_SRC_APB_INIT    : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_INT_STATUS_SRC_HOST1X_INIT : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_INT_STATUS_SRC_PKA1_INIT   : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_INT_STATUS_SRC_RNG1_INIT   : constant NvU1 := 16#0#;

    type LW_PRGNLCL_SE0_INT_STATUS_SRC_Register is record
        Apb    : NvU1;
        Host1x : NvU1;
        Pka1   : NvU1;
        Rng1   : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SE0_INT_STATUS_SRC_Register use record
        Apb    at 0 range 0 .. 0;
        Host1x at 0 range 1 .. 1;
        Pka1   at 0 range 2 .. 2;
        Rng1   at 0 range 3 .. 3;
    end record;

    LW_PRGNLCL_SE0_CG1_AES0_CORE_CYA_FALSE     : constant NvU1  := 16#0#;
    LW_PRGNLCL_SE0_CG1_AES0_CORE_CYA_TRUE      : constant NvU1  := 16#1#;
    LW_PRGNLCL_SE0_CG1_AES0_CORE_INIT          : constant NvU1  := 16#0#;
    LW_PRGNLCL_SE0_CG1_AES1_CORE_CYA_FALSE     : constant NvU1  := 16#0#;
    LW_PRGNLCL_SE0_CG1_AES1_CORE_CYA_TRUE      : constant NvU1  := 16#1#;
    LW_PRGNLCL_SE0_CG1_AES1_CORE_INIT          : constant NvU1  := 16#0#;
    LW_PRGNLCL_SE0_CG1_SHA_CORE_CYA_FALSE      : constant NvU1  := 16#0#;
    LW_PRGNLCL_SE0_CG1_SHA_CORE_CYA_TRUE       : constant NvU1  := 16#1#;
    LW_PRGNLCL_SE0_CG1_SHA_CORE_INIT           : constant NvU1  := 16#0#;
    LW_PRGNLCL_SE0_CG1_SE0_REG_CYA_FALSE       : constant NvU1  := 16#0#;
    LW_PRGNLCL_SE0_CG1_SE0_REG_CYA_TRUE        : constant NvU1  := 16#1#;
    LW_PRGNLCL_SE0_CG1_SE0_REG_INIT            : constant NvU1  := 16#0#;
    LW_PRGNLCL_SE0_CG1_SE1_REG_CYA_FALSE       : constant NvU1  := 16#0#;
    LW_PRGNLCL_SE0_CG1_SE1_REG_CYA_TRUE        : constant NvU1  := 16#1#;
    LW_PRGNLCL_SE0_CG1_SE1_REG_INIT            : constant NvU1  := 16#0#;
    LW_PRGNLCL_SE0_CG1_SE2_REG_CYA_FALSE       : constant NvU1  := 16#0#;
    LW_PRGNLCL_SE0_CG1_SE2_REG_CYA_TRUE        : constant NvU1  := 16#1#;
    LW_PRGNLCL_SE0_CG1_SE2_REG_INIT            : constant NvU1  := 16#0#;
    LW_PRGNLCL_SE0_CG1_SE4_REG_CYA_FALSE       : constant NvU1  := 16#0#;
    LW_PRGNLCL_SE0_CG1_SE4_REG_CYA_TRUE        : constant NvU1  := 16#1#;
    LW_PRGNLCL_SE0_CG1_SE4_REG_INIT            : constant NvU1  := 16#0#;
    LW_PRGNLCL_SE0_CG1_AFBIF_CYA_FALSE         : constant NvU1  := 16#0#;
    LW_PRGNLCL_SE0_CG1_AFBIF_CYA_TRUE          : constant NvU1  := 16#1#;
    LW_PRGNLCL_SE0_CG1_AFBIF_INIT              : constant NvU1  := 16#0#;
    LW_PRGNLCL_SE0_CG1_MISC_INIT               : constant NvU19 := 16#0#;
    LW_PRGNLCL_SE0_CG1_SE_CLK_OVR_ON_CYA_FALSE : constant NvU1  := 16#0#;
    LW_PRGNLCL_SE0_CG1_SE_CLK_OVR_ON_CYA_TRUE  : constant NvU1  := 16#1#;
    LW_PRGNLCL_SE0_CG1_SE_CLK_OVR_ON_INIT      : constant NvU1  := 16#0#;

    type LW_PRGNLCL_SE0_CG1_Register is record
        Aes0_Core     : NvU1;
        Aes1_Core     : NvU1;
        Sha_Core      : NvU1;
        Se0_Reg       : NvU1;
        Se1_Reg       : NvU1;
        Se2_Reg       : NvU1;
        Se4_Reg       : NvU1;
        Afbif         : NvU1;
        Misc          : NvU19;
        Se_Clk_Ovr_On : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SE0_CG1_Register use record
        Aes0_Core     at 0 range  0 ..  0;
        Aes1_Core     at 0 range  1 ..  1;
        Sha_Core      at 0 range  3 ..  3;
        Se0_Reg       at 0 range  4 ..  4;
        Se1_Reg       at 0 range  5 ..  5;
        Se2_Reg       at 0 range  6 ..  6;
        Se4_Reg       at 0 range  8 ..  8;
        Afbif         at 0 range 11 .. 11;
        Misc          at 0 range 12 .. 30;
        Se_Clk_Ovr_On at 0 range 31 .. 31;
    end record;

    LW_PRGNLCL_SE0_SWCLKCTL_SLCG_THRESHOLD_INIT : constant NvU16 := 16#20#;

    type LW_PRGNLCL_SE0_SWCLKCTL_Register is record
        Slcg_Threshold : NvU16;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SE0_SWCLKCTL_Register use record
        Slcg_Threshold at 0 range 0 .. 15;
    end record;

    LW_PRGNLCL_SE0_SOFTRESET_REQ_FALSE : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_SOFTRESET_REQ_TRUE  : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_SOFTRESET_REQ_INIT  : constant NvU1 := 16#0#;

    type LW_PRGNLCL_SE0_SOFTRESET_Register is record
        Req : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SE0_SOFTRESET_Register use record
        Req at 0 range 0 .. 0;
    end record;

    LW_PRGNLCL_SE0_MISC_CTRL_STATUS_KEYSLOT_SCRUB_STAT_IDLE : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_MISC_CTRL_STATUS_KEYSLOT_SCRUB_STAT_BUSY : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_MISC_CTRL_STATUS_KEYSLOT_SCRUB_STAT_INIT : constant NvU1 := 16#1#;

    type LW_PRGNLCL_SE0_MISC_CTRL_STATUS_Register is record
        Keyslot_Scrub_Stat : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SE0_MISC_CTRL_STATUS_Register use record
        Keyslot_Scrub_Stat at 0 range 0 .. 0;
    end record;

    LW_PRGNLCL_SE0_INT_ENABLE_AES0_DISABLE                       : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_INT_ENABLE_AES0_ENABLE                        : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_INT_ENABLE_AES0_INIT                          : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_INT_ENABLE_AES1_DISABLE                       : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_INT_ENABLE_AES1_ENABLE                        : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_INT_ENABLE_AES1_INIT                          : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_INT_ENABLE_SHA_DISABLE                        : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_INT_ENABLE_SHA_ENABLE                         : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_INT_ENABLE_SHA_INIT                           : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_INT_ENABLE_SAP_NSERR_DISABLE                  : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_INT_ENABLE_SAP_NSERR_ENABLE                   : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_INT_ENABLE_SAP_NSERR_INIT                     : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_INT_ENABLE_SC7_CTX_START_ERROR_DISABLE        : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_INT_ENABLE_SC7_CTX_START_ERROR_ENABLE         : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_INT_ENABLE_SC7_CTX_START_ERROR_INIT           : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_INT_ENABLE_SC7_CTX_INTEGRITY_ERROR_DISABLE    : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_INT_ENABLE_SC7_CTX_INTEGRITY_ERROR_ENABLE     : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_INT_ENABLE_SC7_CTX_INTEGRITY_ERROR_INIT       : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_INT_ENABLE_DCLS_ERROR_DISABLE                 : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_INT_ENABLE_DCLS_ERROR_ENABLE                  : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_INT_ENABLE_DCLS_ERROR_INIT                    : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_INT_ENABLE_KSLT_ECC_CORRECTED_ERROR_DISABLE   : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_INT_ENABLE_KSLT_ECC_CORRECTED_ERROR_ENABLE    : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_INT_ENABLE_KSLT_ECC_CORRECTED_ERROR_INIT      : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_INT_ENABLE_KSLT_ECC_UNCORRECTED_ERROR_DISABLE : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_INT_ENABLE_KSLT_ECC_UNCORRECTED_ERROR_ENABLE  : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_INT_ENABLE_KSLT_ECC_UNCORRECTED_ERROR_INIT    : constant NvU1 := 16#0#;

    type LW_PRGNLCL_SE0_INT_ENABLE_Register is record
        Aes0                       : NvU1;
        Aes1                       : NvU1;
        Sha                        : NvU1;
        Sap_Nserr                  : NvU1;
        Sc7_Ctx_Start_Error        : NvU1;
        Sc7_Ctx_Integrity_Error    : NvU1;
        Dcls_Error                 : NvU1;
        Kslt_Ecc_Corrected_Error   : NvU1;
        Kslt_Ecc_Uncorrected_Error : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SE0_INT_ENABLE_Register use record
        Aes0                       at 0 range  0 ..  0;
        Aes1                       at 0 range  1 ..  1;
        Sha                        at 0 range  3 ..  3;
        Sap_Nserr                  at 0 range  4 ..  4;
        Sc7_Ctx_Start_Error        at 0 range  6 ..  6;
        Sc7_Ctx_Integrity_Error    at 0 range  7 ..  7;
        Dcls_Error                 at 0 range  8 ..  8;
        Kslt_Ecc_Corrected_Error   at 0 range 10 .. 10;
        Kslt_Ecc_Uncorrected_Error at 0 range 11 .. 11;
    end record;

    LW_PRGNLCL_SE0_INT_STATUS_AES0_CLEAR                          : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_INT_STATUS_AES0_ACTIVE                         : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_INT_STATUS_AES0_INIT                           : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_INT_STATUS_AES1_CLEAR                          : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_INT_STATUS_AES1_ACTIVE                         : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_INT_STATUS_AES1_INIT                           : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_INT_STATUS_SHA_CLEAR                           : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_INT_STATUS_SHA_ACTIVE                          : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_INT_STATUS_SHA_INIT                            : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_INT_STATUS_SAP_NSERR_CLEAR                     : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_INT_STATUS_SAP_NSERR_ACTIVE                    : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_INT_STATUS_SAP_NSERR_SW_CLEAR                  : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_INT_STATUS_SAP_NSERR_INIT                      : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_INT_STATUS_SC7_CTX_START_ERROR_CLEAR           : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_INT_STATUS_SC7_CTX_START_ERROR_ACTIVE          : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_INT_STATUS_SC7_CTX_START_ERROR_SW_CLEAR        : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_INT_STATUS_SC7_CTX_START_ERROR_INIT            : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_INT_STATUS_SC7_CTX_INTEGRITY_ERROR_CLEAR       : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_INT_STATUS_SC7_CTX_INTEGRITY_ERROR_ACTIVE      : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_INT_STATUS_SC7_CTX_INTEGRITY_ERROR_SW_CLEAR    : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_INT_STATUS_SC7_CTX_INTEGRITY_ERROR_INIT        : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_INT_STATUS_DCLS_ERROR_CLEAR                    : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_INT_STATUS_DCLS_ERROR_ACTIVE                   : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_INT_STATUS_DCLS_ERROR_SW_CLEAR                 : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_INT_STATUS_DCLS_ERROR_INIT                     : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_INT_STATUS_KSLT_ECC_CORRECTED_ERROR_CLEAR      : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_INT_STATUS_KSLT_ECC_CORRECTED_ERROR_ACTIVE     : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_INT_STATUS_KSLT_ECC_CORRECTED_ERROR_SW_CLEAR   : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_INT_STATUS_KSLT_ECC_CORRECTED_ERROR_INIT       : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_INT_STATUS_KSLT_ECC_UNCORRECTED_ERROR_CLEAR    : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_INT_STATUS_KSLT_ECC_UNCORRECTED_ERROR_ACTIVE   : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_INT_STATUS_KSLT_ECC_UNCORRECTED_ERROR_SW_CLEAR : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_INT_STATUS_KSLT_ECC_UNCORRECTED_ERROR_INIT     : constant NvU1 := 16#0#;

    type LW_PRGNLCL_SE0_INT_STATUS_Register is record
        Aes0                       : NvU1;
        Aes1                       : NvU1;
        Sha                        : NvU1;
        Sap_Nserr                  : NvU1;
        Sc7_Ctx_Start_Error        : NvU1;
        Sc7_Ctx_Integrity_Error    : NvU1;
        Dcls_Error                 : NvU1;
        Kslt_Ecc_Corrected_Error   : NvU1;
        Kslt_Ecc_Uncorrected_Error : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SE0_INT_STATUS_Register use record
        Aes0                       at 0 range  0 ..  0;
        Aes1                       at 0 range  1 ..  1;
        Sha                        at 0 range  3 ..  3;
        Sap_Nserr                  at 0 range  4 ..  4;
        Sc7_Ctx_Start_Error        at 0 range  6 ..  6;
        Sc7_Ctx_Integrity_Error    at 0 range  7 ..  7;
        Dcls_Error                 at 0 range  8 ..  8;
        Kslt_Ecc_Corrected_Error   at 0 range 10 .. 10;
        Kslt_Ecc_Uncorrected_Error at 0 range 11 .. 11;
    end record;

    LW_PRGNLCL_SE0_STREAMID_LOCK_FALSE : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_STREAMID_LOCK_TRUE  : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_STREAMID_LOCK_INIT  : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_STREAMID_VAL_INIT   : constant NvU7 := 16#0#;

    type LW_PRGNLCL_SE0_STREAMID_Register is record
        Lock : NvU1;
        Val  : NvU7;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SE0_STREAMID_Register use record
        Lock at 0 range 31 .. 31;
        Val  at 0 range  0 ..  6;
    end record;

    LW_PRGNLCL_SE0_KEYMOVER_CTRL_ENABLE_FALSE       : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_KEYMOVER_CTRL_ENABLE_TRUE        : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_KEYMOVER_CTRL_ENABLE_INIT        : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_KEYMOVER_CTRL_DIRECTION_RECEIVE  : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_KEYMOVER_CTRL_DIRECTION_SEND     : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_KEYMOVER_CTRL_DIRECTION_INIT     : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_KEYMOVER_CTRL_KEYSLOT_INDEX_INIT : constant NvU4 := 16#0#;

    type LW_PRGNLCL_SE0_KEYMOVER_CTRL_Register is record
        Enable        : NvU1;
        Direction     : NvU1;
        Keyslot_Index : NvU4;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SE0_KEYMOVER_CTRL_Register use record
        Enable        at 0 range 31 .. 31;
        Direction     at 0 range 16 .. 16;
        Keyslot_Index at 0 range  0 ..  3;
    end record;

    LW_PRGNLCL_SE0_SC7_CTRL_OP_SC7_CTX_SAVE    : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_SC7_CTRL_OP_SC7_CTX_RESTORE : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_SC7_CTRL_OP_INIT            : constant NvU1 := 16#0#;

    type LW_PRGNLCL_SE0_SC7_CTRL_Register is record
        Op : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SE0_SC7_CTRL_Register use record
        Op at 0 range 0 .. 0;
    end record;

    LW_PRGNLCL_SE0_SC7_STATUS_BUSY_IDLE               : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_SC7_STATUS_BUSY_BUSY               : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_SC7_STATUS_BUSY_INIT               : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_SC7_STATUS_STATE_IDLE              : constant NvU4 := 16#0#;
    LW_PRGNLCL_SE0_SC7_STATUS_STATE_GEN_SAVE_SRK      : constant NvU4 := 16#1#;
    LW_PRGNLCL_SE0_SC7_STATUS_STATE_SAVE_CTX          : constant NvU4 := 16#2#;
    LW_PRGNLCL_SE0_SC7_STATUS_STATE_SAVE_FINAL        : constant NvU4 := 16#3#;
    LW_PRGNLCL_SE0_SC7_STATUS_STATE_RESTORE_KEY       : constant NvU4 := 16#4#;
    LW_PRGNLCL_SE0_SC7_STATUS_STATE_RESTORE_OVERW_KEY : constant NvU4 := 16#5#;
    LW_PRGNLCL_SE0_SC7_STATUS_STATE_RESTORE_CTX       : constant NvU4 := 16#6#;
    LW_PRGNLCL_SE0_SC7_STATUS_STATE_RESTORE_FINAL     : constant NvU4 := 16#7#;
    LW_PRGNLCL_SE0_SC7_STATUS_STATE_INIT              : constant NvU4 := 16#0#;
    LW_PRGNLCL_SE0_SC7_STATUS_SE4_READY_NOT_READY     : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_SC7_STATUS_SE4_READY_READY         : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_SC7_STATUS_SE4_READY_INIT          : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_SC7_STATUS_SE2_READY_NOT_READY     : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_SC7_STATUS_SE2_READY_READY         : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_SC7_STATUS_SE2_READY_INIT          : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_SC7_STATUS_SE1_READY_NOT_READY     : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_SC7_STATUS_SE1_READY_READY         : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_SC7_STATUS_SE1_READY_INIT          : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_SC7_STATUS_RNG1_READY_NOT_READY    : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_SC7_STATUS_RNG1_READY_READY        : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_SC7_STATUS_RNG1_READY_INIT         : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_SC7_STATUS_PKA1_READY_NOT_READY    : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_SC7_STATUS_PKA1_READY_READY        : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_SC7_STATUS_PKA1_READY_INIT         : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_SC7_STATUS_SE0_READY_NOT_READY     : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_SC7_STATUS_SE0_READY_READY         : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_SC7_STATUS_SE0_READY_INIT          : constant NvU1 := 16#1#;

    type LW_PRGNLCL_SE0_SC7_STATUS_Register is record
        Busy       : NvU1;
        State      : NvU4;
        Se4_Ready  : NvU1;
        Se2_Ready  : NvU1;
        Se1_Ready  : NvU1;
        Rng1_Ready : NvU1;
        Pka1_Ready : NvU1;
        Se0_Ready  : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SE0_SC7_STATUS_Register use record
        Busy       at 0 range 31 .. 31;
        State      at 0 range  7 .. 10;
        Se4_Ready  at 0 range  6 ..  6;
        Se2_Ready  at 0 range  4 ..  4;
        Se1_Ready  at 0 range  3 ..  3;
        Rng1_Ready at 0 range  2 ..  2;
        Pka1_Ready at 0 range  1 ..  1;
        Se0_Ready  at 0 range  0 ..  0;
    end record;

    LW_PRGNLCL_SE0_CRYPTO_KEYTABLE_VM_CTRL_VM_EN_DISABLE   : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_CRYPTO_KEYTABLE_VM_CTRL_VM_EN_ENABLE    : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_CRYPTO_KEYTABLE_VM_CTRL_VM_EN_INIT      : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_CRYPTO_KEYTABLE_VM_CTRL_VM_LOCK_DISABLE : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_CRYPTO_KEYTABLE_VM_CTRL_VM_LOCK_ENABLE  : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_CRYPTO_KEYTABLE_VM_CTRL_VM_LOCK_INIT    : constant NvU1 := 16#0#;

    type LW_PRGNLCL_SE0_CRYPTO_KEYTABLE_VM_CTRL_Register is record
        Vm_En   : NvU1;
        Vm_Lock : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SE0_CRYPTO_KEYTABLE_VM_CTRL_Register use record
        Vm_En   at 0 range 0 .. 0;
        Vm_Lock at 0 range 1 .. 1;
    end record;

    LW_PRGNLCL_SE0_CRYPTO_KEYTABLE_VM_MAP_VMID_INIT : constant NvU4 := 16#0#;

    type LW_PRGNLCL_SE0_CRYPTO_KEYTABLE_VM_MAP_Register is record
        Vmid : NvU4;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SE0_CRYPTO_KEYTABLE_VM_MAP_Register use record
        Vmid at 0 range 0 .. 3;
    end record;

    LW_PRGNLCL_SE0_PORT_ACCESS_CONTROL_PORT_ENABLE_ILLEGAL     : constant NvU2 := 16#0#;
    LW_PRGNLCL_SE0_PORT_ACCESS_CONTROL_PORT_ENABLE_APB_ONLY    : constant NvU2 := 16#1#;
    LW_PRGNLCL_SE0_PORT_ACCESS_CONTROL_PORT_ENABLE_HOST1X_ONLY : constant NvU2 := 16#2#;
    LW_PRGNLCL_SE0_PORT_ACCESS_CONTROL_PORT_ENABLE_BOTH        : constant NvU2 := 16#3#;
    LW_PRGNLCL_SE0_PORT_ACCESS_CONTROL_PORT_ENABLE_INIT        : constant NvU2 := 16#3#;

    type LW_PRGNLCL_SE0_PORT_ACCESS_CONTROL_Register is record
        Port_Enable : NvU2;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SE0_PORT_ACCESS_CONTROL_Register use record
        Port_Enable at 0 range 0 .. 1;
    end record;

    LW_PRGNLCL_SE0_ERROR_CAPTURE_ERROR_BIT_UNSET : constant NvU1  := 16#0#;
    LW_PRGNLCL_SE0_ERROR_CAPTURE_ERROR_BIT_SET   : constant NvU1  := 16#1#;
    LW_PRGNLCL_SE0_ERROR_CAPTURE_ERROR_BIT_INIT  : constant NvU1  := 16#0#;
    LW_PRGNLCL_SE0_ERROR_CAPTURE_ERROR_INFO_INIT : constant NvU31 := 16#0#;

    type LW_PRGNLCL_SE0_ERROR_CAPTURE_Register is record
        Error_Bit  : NvU1;
        Error_Info : NvU31;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SE0_ERROR_CAPTURE_Register use record
        Error_Bit  at 0 range 31 .. 31;
        Error_Info at 0 range  0 .. 30;
    end record;

    type LW_PRGNLCL_SE0_FEATURES_CAP_HOST1X_Field is (HOST1X_DISABLE, HOST1X_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_SE0_FEATURES_CAP_HOST1X_Field use (HOST1X_DISABLE => 16#0#, HOST1X_ENABLE => 16#1#);
    type LW_PRGNLCL_SE0_FEATURES_CAP_RNG1_Field is (RNG1_DISABLE, RNG1_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_SE0_FEATURES_CAP_RNG1_Field use (RNG1_DISABLE => 16#0#, RNG1_ENABLE => 16#1#);
    type LW_PRGNLCL_SE0_FEATURES_CAP_PKA1_Field is (PKA1_DISABLE, PKA1_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_SE0_FEATURES_CAP_PKA1_Field use (PKA1_DISABLE => 16#0#, PKA1_ENABLE => 16#1#);

    type LW_PRGNLCL_SE0_FEATURES_Register is record
        Cap_Host1x : LW_PRGNLCL_SE0_FEATURES_CAP_HOST1X_Field;
        Cap_Rng1   : LW_PRGNLCL_SE0_FEATURES_CAP_RNG1_Field;
        Cap_Pka1   : LW_PRGNLCL_SE0_FEATURES_CAP_PKA1_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SE0_FEATURES_Register use record
        Cap_Host1x at 0 range 0 .. 0;
        Cap_Rng1   at 0 range 1 .. 1;
        Cap_Pka1   at 0 range 2 .. 2;
    end record;

    type LW_PRGNLCL_SE0_FUSE_STATUS_SCC_DIS_Field is (DIS_DISABLE, DIS_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_SE0_FUSE_STATUS_SCC_DIS_Field use (DIS_DISABLE => 16#0#, DIS_ENABLE => 16#1#);
    type LW_PRGNLCL_SE0_FUSE_STATUS_PRODUCT_MODE_Field is (MODE_DEBUG, MODE_PRODUCT) with
        Size => 1;
    for LW_PRGNLCL_SE0_FUSE_STATUS_PRODUCT_MODE_Field use (MODE_DEBUG => 16#0#, MODE_PRODUCT => 16#1#);
    type LW_PRGNLCL_SE0_FUSE_STATUS_GLOBAL_CLK_OVR_ON_Field is (ON_DISABLE, ON_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_SE0_FUSE_STATUS_GLOBAL_CLK_OVR_ON_Field use (ON_DISABLE => 16#0#, ON_ENABLE => 16#1#);

    type LW_PRGNLCL_SE0_FUSE_STATUS_Register is record
        Scc_Dis           : LW_PRGNLCL_SE0_FUSE_STATUS_SCC_DIS_Field;
        Product_Mode      : LW_PRGNLCL_SE0_FUSE_STATUS_PRODUCT_MODE_Field;
        Global_Clk_Ovr_On : LW_PRGNLCL_SE0_FUSE_STATUS_GLOBAL_CLK_OVR_ON_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SE0_FUSE_STATUS_Register use record
        Scc_Dis           at 0 range 0 .. 0;
        Product_Mode      at 0 range 1 .. 1;
        Global_Clk_Ovr_On at 0 range 2 .. 2;
    end record;

    LW_PRGNLCL_SE0_AES0_GSCID_IN_ID_INIT  : constant NvU8 := 16#0#;
    LW_PRGNLCL_SE0_AES0_GSCID_OUT_ID_INIT : constant NvU8 := 16#0#;

    type LW_PRGNLCL_SE0_AES0_GSCID_Register is record
        In_Id  : NvU8;
        Out_Id : NvU8;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SE0_AES0_GSCID_Register use record
        In_Id  at 0 range 16 .. 23;
        Out_Id at 0 range  0 ..  7;
    end record;

    LW_PRGNLCL_SE0_AES0_CONFIG_DST_MEMORY         : constant NvU3 := 16#0#;
    LW_PRGNLCL_SE0_AES0_CONFIG_DST_HASH_REG       : constant NvU3 := 16#1#;
    LW_PRGNLCL_SE0_AES0_CONFIG_DST_KEYTABLE       : constant NvU3 := 16#2#;
    LW_PRGNLCL_SE0_AES0_CONFIG_DST_SRK            : constant NvU3 := 16#3#;
    LW_PRGNLCL_SE0_AES0_CONFIG_DST_INIT           : constant NvU3 := 16#0#;
    LW_PRGNLCL_SE0_AES0_CONFIG_DEC_ALG_NOP        : constant NvU4 := 16#0#;
    LW_PRGNLCL_SE0_AES0_CONFIG_DEC_ALG_AES_DEC    : constant NvU4 := 16#1#;
    LW_PRGNLCL_SE0_AES0_CONFIG_DEC_ALG_INIT       : constant NvU4 := 16#0#;
    LW_PRGNLCL_SE0_AES0_CONFIG_ENC_ALG_NOP        : constant NvU4 := 16#0#;
    LW_PRGNLCL_SE0_AES0_CONFIG_ENC_ALG_AES_ENC    : constant NvU4 := 16#1#;
    LW_PRGNLCL_SE0_AES0_CONFIG_ENC_ALG_RNG        : constant NvU4 := 16#2#;
    LW_PRGNLCL_SE0_AES0_CONFIG_ENC_ALG_SHA        : constant NvU4 := 16#3#;
    LW_PRGNLCL_SE0_AES0_CONFIG_ENC_ALG_HMAC       : constant NvU4 := 16#7#;
    LW_PRGNLCL_SE0_AES0_CONFIG_ENC_ALG_KDF        : constant NvU4 := 16#8#;
    LW_PRGNLCL_SE0_AES0_CONFIG_ENC_ALG_INS        : constant NvU4 := 16#d#;
    LW_PRGNLCL_SE0_AES0_CONFIG_ENC_ALG_CLONE      : constant NvU4 := 16#e#;
    LW_PRGNLCL_SE0_AES0_CONFIG_ENC_ALG_LOCK       : constant NvU4 := 16#f#;
    LW_PRGNLCL_SE0_AES0_CONFIG_ENC_ALG_INIT       : constant NvU4 := 16#0#;
    LW_PRGNLCL_SE0_AES0_CONFIG_DEC_MODE_GMAC      : constant NvU8 := 16#3#;
    LW_PRGNLCL_SE0_AES0_CONFIG_DEC_MODE_GCM       : constant NvU8 := 16#4#;
    LW_PRGNLCL_SE0_AES0_CONFIG_DEC_MODE_GCM_FINAL : constant NvU8 := 16#5#;
    LW_PRGNLCL_SE0_AES0_CONFIG_DEC_MODE_KW        : constant NvU8 := 16#6#;
    LW_PRGNLCL_SE0_AES0_CONFIG_DEC_MODE_INIT      : constant NvU8 := 16#0#;
    LW_PRGNLCL_SE0_AES0_CONFIG_ENC_MODE_KEY128    : constant NvU8 := 16#0#;
    LW_PRGNLCL_SE0_AES0_CONFIG_ENC_MODE_KEY192    : constant NvU8 := 16#1#;
    LW_PRGNLCL_SE0_AES0_CONFIG_ENC_MODE_KEY256    : constant NvU8 := 16#2#;
    LW_PRGNLCL_SE0_AES0_CONFIG_ENC_MODE_GMAC      : constant NvU8 := 16#3#;
    LW_PRGNLCL_SE0_AES0_CONFIG_ENC_MODE_GCM       : constant NvU8 := 16#4#;
    LW_PRGNLCL_SE0_AES0_CONFIG_ENC_MODE_GCM_FINAL : constant NvU8 := 16#5#;
    LW_PRGNLCL_SE0_AES0_CONFIG_ENC_MODE_KW        : constant NvU8 := 16#6#;
    LW_PRGNLCL_SE0_AES0_CONFIG_ENC_MODE_CMAC      : constant NvU8 := 16#7#;
    LW_PRGNLCL_SE0_AES0_CONFIG_ENC_MODE_INIT      : constant NvU8 := 16#0#;

    type LW_PRGNLCL_SE0_AES0_CONFIG_Register is record
        Dst      : NvU3;
        Dec_Alg  : NvU4;
        Enc_Alg  : NvU4;
        Dec_Mode : NvU8;
        Enc_Mode : NvU8;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SE0_AES0_CONFIG_Register use record
        Dst      at 0 range  2 ..  4;
        Dec_Alg  at 0 range  8 .. 11;
        Enc_Alg  at 0 range 12 .. 15;
        Dec_Mode at 0 range 16 .. 23;
        Enc_Mode at 0 range 24 .. 31;
    end record;

    LW_PRGNLCL_SE0_AES0_CRYPTO_CONFIG_KEY2_INDEX_INIT  : constant NvU4 := 16#0#;
    LW_PRGNLCL_SE0_AES0_CRYPTO_CONFIG_KEY_INDEX_INIT   : constant NvU4 := 16#0#;
    LW_PRGNLCL_SE0_AES0_CRYPTO_CONFIG_SCC_DIS_DISABLE  : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_AES0_CRYPTO_CONFIG_SCC_DIS_ENABLE   : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_AES0_CRYPTO_CONFIG_SCC_DIS_INIT     : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_AES0_CRYPTO_CONFIG_CTR_CNTN_INIT    : constant NvU8 := 16#0#;
    LW_PRGNLCL_SE0_AES0_CRYPTO_CONFIG_CORE_SEL_DECRYPT : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_AES0_CRYPTO_CONFIG_CORE_SEL_ENCRYPT : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_AES0_CRYPTO_CONFIG_CORE_SEL_INIT    : constant NvU1 := 16#0#;
    type LW_PRGNLCL_SE0_AES0_CRYPTO_CONFIG_IV_SELECT_Field is (SELECT_INIT, SELECT_UPDATED, SELECT_REG) with
        Size => 2;
    for LW_PRGNLCL_SE0_AES0_CRYPTO_CONFIG_IV_SELECT_Field use (SELECT_INIT => 16#0#, SELECT_UPDATED => 16#1#, SELECT_REG => 16#2#);
    LW_PRGNLCL_SE0_AES0_CRYPTO_CONFIG_VCTRAM_SEL_MEMORY           : constant NvU2 := 16#0#;
    LW_PRGNLCL_SE0_AES0_CRYPTO_CONFIG_VCTRAM_SEL_TWEAK            : constant NvU2 := 16#1#;
    LW_PRGNLCL_SE0_AES0_CRYPTO_CONFIG_VCTRAM_SEL_INIT_AESOUT      : constant NvU2 := 16#2#;
    LW_PRGNLCL_SE0_AES0_CRYPTO_CONFIG_VCTRAM_SEL_INIT_PREV_MEMORY : constant NvU2 := 16#3#;
    LW_PRGNLCL_SE0_AES0_CRYPTO_CONFIG_VCTRAM_SEL_INIT             : constant NvU2 := 16#0#;
    LW_PRGNLCL_SE0_AES0_CRYPTO_CONFIG_INPUT_SEL_MEMORY            : constant NvU2 := 16#0#;
    LW_PRGNLCL_SE0_AES0_CRYPTO_CONFIG_INPUT_SEL_RANDOM            : constant NvU2 := 16#1#;
    LW_PRGNLCL_SE0_AES0_CRYPTO_CONFIG_INPUT_SEL_INIT_AESOUT       : constant NvU2 := 16#2#;
    LW_PRGNLCL_SE0_AES0_CRYPTO_CONFIG_INPUT_SEL_LINEAR_CTR        : constant NvU2 := 16#3#;
    LW_PRGNLCL_SE0_AES0_CRYPTO_CONFIG_INPUT_SEL_INIT              : constant NvU2 := 16#0#;
    LW_PRGNLCL_SE0_AES0_CRYPTO_CONFIG_XOR_POS_BYPASS              : constant NvU2 := 16#0#;
    LW_PRGNLCL_SE0_AES0_CRYPTO_CONFIG_XOR_POS_BOTH                : constant NvU2 := 16#1#;
    LW_PRGNLCL_SE0_AES0_CRYPTO_CONFIG_XOR_POS_TOP                 : constant NvU2 := 16#2#;
    LW_PRGNLCL_SE0_AES0_CRYPTO_CONFIG_XOR_POS_BOTTOM              : constant NvU2 := 16#3#;
    LW_PRGNLCL_SE0_AES0_CRYPTO_CONFIG_XOR_POS_INIT                : constant NvU2 := 16#0#;
    LW_PRGNLCL_SE0_AES0_CRYPTO_CONFIG_HASH_ENB_DISABLE            : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_AES0_CRYPTO_CONFIG_HASH_ENB_ENABLE             : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_AES0_CRYPTO_CONFIG_HASH_ENB_INIT               : constant NvU1 := 16#0#;

    type LW_PRGNLCL_SE0_AES0_CRYPTO_CONFIG_Register is record
        Key2_Index : NvU4;
        Key_Index  : NvU4;
        Scc_Dis    : NvU1;
        Ctr_Cntn   : NvU8;
        Core_Sel   : NvU1;
        Iv_Select  : LW_PRGNLCL_SE0_AES0_CRYPTO_CONFIG_IV_SELECT_Field;
        Vctram_Sel : NvU2;
        Input_Sel  : NvU2;
        Xor_Pos    : NvU2;
        Hash_Enb   : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SE0_AES0_CRYPTO_CONFIG_Register use record
        Key2_Index at 0 range 28 .. 31;
        Key_Index  at 0 range 24 .. 27;
        Scc_Dis    at 0 range 20 .. 20;
        Ctr_Cntn   at 0 range 11 .. 18;
        Core_Sel   at 0 range  9 ..  9;
        Iv_Select  at 0 range  7 ..  8;
        Vctram_Sel at 0 range  5 ..  6;
        Input_Sel  at 0 range  3 ..  4;
        Xor_Pos    at 0 range  1 ..  2;
        Hash_Enb   at 0 range  0 ..  0;
    end record;

    LW_PRGNLCL_SE0_AES0_IN_ADDR_VAL_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_SE0_AES0_IN_ADDR_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SE0_AES0_IN_ADDR_Register use record
        Val at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_SE0_AES0_IN_ADDR_HI_MSB_INIT : constant NvU8  := 16#0#;
    LW_PRGNLCL_SE0_AES0_IN_ADDR_HI_SZ_INIT  : constant NvU24 := 16#0#;

    type LW_PRGNLCL_SE0_AES0_IN_ADDR_HI_Register is record
        Msb : NvU8;
        Sz  : NvU24;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SE0_AES0_IN_ADDR_HI_Register use record
        Msb at 0 range 24 .. 31;
        Sz  at 0 range  0 .. 23;
    end record;

    LW_PRGNLCL_SE0_AES0_OUT_ADDR_VAL_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_SE0_AES0_OUT_ADDR_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SE0_AES0_OUT_ADDR_Register use record
        Val at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_SE0_AES0_OUT_ADDR_HI_MSB_INIT : constant NvU8  := 16#0#;
    LW_PRGNLCL_SE0_AES0_OUT_ADDR_HI_SZ_INIT  : constant NvU24 := 16#0#;

    type LW_PRGNLCL_SE0_AES0_OUT_ADDR_HI_Register is record
        Msb : NvU8;
        Sz  : NvU24;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SE0_AES0_OUT_ADDR_HI_Register use record
        Msb at 0 range 24 .. 31;
        Sz  at 0 range  0 .. 23;
    end record;

    LW_PRGNLCL_SE0_AES0_CRYPTO_LINEAR_CTR_VAL_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_SE0_AES0_CRYPTO_LINEAR_CTR_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SE0_AES0_CRYPTO_LINEAR_CTR_Register use record
        Val at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_SE0_AES0_CRYPTO_LAST_BLOCK_RESIDUAL_BITS_INIT : constant NvU7  := 16#0#;
    LW_PRGNLCL_SE0_AES0_CRYPTO_LAST_BLOCK_VAL_INIT           : constant NvU20 := 16#0#;

    type LW_PRGNLCL_SE0_AES0_CRYPTO_LAST_BLOCK_Register is record
        Residual_Bits : NvU7;
        Val           : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SE0_AES0_CRYPTO_LAST_BLOCK_Register use record
        Residual_Bits at 0 range 20 .. 26;
        Val           at 0 range  0 .. 19;
    end record;

    LW_PRGNLCL_SE0_AES0_CRYPTO_KEYTABLE_DST_KEY_INDEX_INIT : constant NvU4 := 16#0#;

    type LW_PRGNLCL_SE0_AES0_CRYPTO_KEYTABLE_DST_Register is record
        Key_Index : NvU4;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SE0_AES0_CRYPTO_KEYTABLE_DST_Register use record
        Key_Index at 0 range 8 .. 11;
    end record;

    LW_PRGNLCL_SE0_AES0_OPERATION_LASTBUF_FALSE : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_AES0_OPERATION_LASTBUF_TRUE  : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_AES0_OPERATION_LASTBUF_INIT  : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_AES0_OPERATION_WRSTALL_FALSE : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_AES0_OPERATION_WRSTALL_TRUE  : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_AES0_OPERATION_WRSTALL_INIT  : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_AES0_OPERATION_FINAL_FALSE   : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_AES0_OPERATION_FINAL_TRUE    : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_AES0_OPERATION_FINAL_INIT    : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_AES0_OPERATION_INIT_FALSE    : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_AES0_OPERATION_INIT_TRUE     : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_AES0_OPERATION_INIT_INIT     : constant NvU1 := 16#0#;
    type LW_PRGNLCL_SE0_AES0_OPERATION_OP_Field is (OP_INIT, OP_START, OP_RESTART_OUT, OP_RESTART_IN, OP_RESTART_INOUT, OP_DUMMY) with
        Size => 3;
    for LW_PRGNLCL_SE0_AES0_OPERATION_OP_Field use
        (OP_INIT => 16#0#, OP_START => 16#1#, OP_RESTART_OUT => 16#2#, OP_RESTART_IN => 16#4#, OP_RESTART_INOUT => 16#5#, OP_DUMMY => 16#6#);

    type LW_PRGNLCL_SE0_AES0_OPERATION_Register is record
        Lastbuf : NvU1;
        Wrstall : NvU1;
        Final   : NvU1;
        Init    : NvU1;
        Op      : LW_PRGNLCL_SE0_AES0_OPERATION_OP_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SE0_AES0_OPERATION_Register use record
        Lastbuf at 0 range 16 .. 16;
        Wrstall at 0 range 15 .. 15;
        Final   at 0 range  5 ..  5;
        Init    at 0 range  4 ..  4;
        Op      at 0 range  0 ..  2;
    end record;

    LW_PRGNLCL_SE0_AES0_CRYPTO_KEYTABLE_ADDR_PKT_INIT       : constant NvU3 := 16#0#;
    LW_PRGNLCL_SE0_AES0_CRYPTO_KEYTABLE_ADDR_KEY_INDEX_INIT : constant NvU4 := 16#0#;
    type LW_PRGNLCL_SE0_AES0_CRYPTO_KEYTABLE_ADDR_SEL_Field is (SEL_INIT, SEL_KEYBUF, SEL_KEYMANIFEST, SEL_KEYCTRL) with
        Size => 2;
    for LW_PRGNLCL_SE0_AES0_CRYPTO_KEYTABLE_ADDR_SEL_Field use (SEL_INIT => 16#0#, SEL_KEYBUF => 16#1#, SEL_KEYMANIFEST => 16#2#, SEL_KEYCTRL => 16#3#);

    type LW_PRGNLCL_SE0_AES0_CRYPTO_KEYTABLE_ADDR_Register is record
        Pkt       : NvU3;
        Key_Index : NvU4;
        Sel       : LW_PRGNLCL_SE0_AES0_CRYPTO_KEYTABLE_ADDR_SEL_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SE0_AES0_CRYPTO_KEYTABLE_ADDR_Register use record
        Pkt       at 0 range  0 ..  2;
        Key_Index at 0 range  4 ..  7;
        Sel       at 0 range 16 .. 17;
    end record;

    type LW_PRGNLCL_SE0_AES0_CRYPTO_KEYTABLE_DATA_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SE0_AES0_CRYPTO_KEYTABLE_DATA_Register use record
        Val at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_SE0_AES0_CMAC_RESULT_VAL_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_SE0_AES0_CMAC_RESULT_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SE0_AES0_CMAC_RESULT_Register use record
        Val at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_SE0_AES0_INT_ENABLE_ERR_STAT_DISABLE   : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_AES0_INT_ENABLE_ERR_STAT_ENABLE    : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_AES0_INT_ENABLE_ERR_STAT_INIT      : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_AES0_INT_ENABLE_SE_OP_DONE_DISABLE : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_AES0_INT_ENABLE_SE_OP_DONE_ENABLE  : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_AES0_INT_ENABLE_SE_OP_DONE_INIT    : constant NvU1 := 16#0#;

    type LW_PRGNLCL_SE0_AES0_INT_ENABLE_Register is record
        Err_Stat   : NvU1;
        Se_Op_Done : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SE0_AES0_INT_ENABLE_Register use record
        Err_Stat   at 0 range 16 .. 16;
        Se_Op_Done at 0 range  4 ..  4;
    end record;

    LW_PRGNLCL_SE0_AES0_INT_STATUS_ERR_STAT_CLEAR      : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_AES0_INT_STATUS_ERR_STAT_ACTIVE     : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_AES0_INT_STATUS_ERR_STAT_SW_CLEAR   : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_AES0_INT_STATUS_ERR_STAT_INIT       : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_AES0_INT_STATUS_SE_OP_DONE_CLEAR    : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_AES0_INT_STATUS_SE_OP_DONE_ACTIVE   : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_AES0_INT_STATUS_SE_OP_DONE_SW_CLEAR : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_AES0_INT_STATUS_SE_OP_DONE_INIT     : constant NvU1 := 16#0#;

    type LW_PRGNLCL_SE0_AES0_INT_STATUS_Register is record
        Err_Stat   : NvU1;
        Se_Op_Done : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SE0_AES0_INT_STATUS_Register use record
        Err_Stat   at 0 range 16 .. 16;
        Se_Op_Done at 0 range  4 ..  4;
    end record;

    LW_PRGNLCL_SE0_AES0_STATUS_STATE_IDLE       : constant NvU3 := 16#0#;
    LW_PRGNLCL_SE0_AES0_STATUS_STATE_BUSY       : constant NvU3 := 16#1#;
    LW_PRGNLCL_SE0_AES0_STATUS_STATE_WAIT_OUT   : constant NvU3 := 16#2#;
    LW_PRGNLCL_SE0_AES0_STATUS_STATE_WAIT_IN    : constant NvU3 := 16#3#;
    LW_PRGNLCL_SE0_AES0_STATUS_STATE_WAIT_INOUT : constant NvU3 := 16#4#;
    LW_PRGNLCL_SE0_AES0_STATUS_STATE_CANCELLING : constant NvU3 := 16#5#;
    LW_PRGNLCL_SE0_AES0_STATUS_STATE_PENDING    : constant NvU3 := 16#6#;
    LW_PRGNLCL_SE0_AES0_STATUS_STATE_INIT       : constant NvU3 := 16#0#;

    type LW_PRGNLCL_SE0_AES0_STATUS_Register is record
        State : NvU3;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SE0_AES0_STATUS_Register use record
        State at 0 range 0 .. 2;
    end record;

    LW_PRGNLCL_SE0_AES0_ERR_STATUS_BUSY_REG_WR_CLEAR    : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_AES0_ERR_STATUS_BUSY_REG_WR_ACTIVE   : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_AES0_ERR_STATUS_BUSY_REG_WR_SW_CLEAR : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_AES0_ERR_STATUS_BUSY_REG_WR_INIT     : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_AES0_ERR_STATUS_NO_SUPPORT_CLEAR     : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_AES0_ERR_STATUS_NO_SUPPORT_ACTIVE    : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_AES0_ERR_STATUS_NO_SUPPORT_SW_CLEAR  : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_AES0_ERR_STATUS_NO_SUPPORT_INIT      : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_AES0_ERR_STATUS_ILLEGAL_CFG_CLEAR    : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_AES0_ERR_STATUS_ILLEGAL_CFG_ACTIVE   : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_AES0_ERR_STATUS_ILLEGAL_CFG_SW_CLEAR : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_AES0_ERR_STATUS_ILLEGAL_CFG_INIT     : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_AES0_ERR_STATUS_KAC_FAIL_CLEAR       : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_AES0_ERR_STATUS_KAC_FAIL_ACTIVE      : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_AES0_ERR_STATUS_KAC_FAIL_SW_CLEAR    : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_AES0_ERR_STATUS_KAC_FAIL_INIT        : constant NvU1 := 16#0#;

    type LW_PRGNLCL_SE0_AES0_ERR_STATUS_Register is record
        Busy_Reg_Wr : NvU1;
        No_Support  : NvU1;
        Illegal_Cfg : NvU1;
        Kac_Fail    : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SE0_AES0_ERR_STATUS_Register use record
        Busy_Reg_Wr at 0 range  2 ..  2;
        No_Support  at 0 range  4 ..  4;
        Illegal_Cfg at 0 range  8 ..  8;
        Kac_Fail    at 0 range 31 .. 31;
    end record;

    LW_PRGNLCL_SE0_AES0_SPARE_VAL_INIT : constant NvU32 := 16#400_0000#;

    type LW_PRGNLCL_SE0_AES0_SPARE_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SE0_AES0_SPARE_Register use record
        Val at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_SE0_AES0_CRYPTO_KEYTABLE_KEYMANIFEST_ORIGIN_FUSE      : constant NvU3 := 16#0#;
    LW_PRGNLCL_SE0_AES0_CRYPTO_KEYTABLE_KEYMANIFEST_ORIGIN_PSC       : constant NvU3 := 16#1#;
    LW_PRGNLCL_SE0_AES0_CRYPTO_KEYTABLE_KEYMANIFEST_ORIGIN_TZ        : constant NvU3 := 16#2#;
    LW_PRGNLCL_SE0_AES0_CRYPTO_KEYTABLE_KEYMANIFEST_ORIGIN_NS        : constant NvU3 := 16#3#;
    LW_PRGNLCL_SE0_AES0_CRYPTO_KEYTABLE_KEYMANIFEST_ORIGIN_FSI       : constant NvU3 := 16#4#;
    LW_PRGNLCL_SE0_AES0_CRYPTO_KEYTABLE_KEYMANIFEST_ORIGIN_INIT      : constant NvU3 := 16#0#;
    LW_PRGNLCL_SE0_AES0_CRYPTO_KEYTABLE_KEYMANIFEST_USER_RESERVED    : constant NvU3 := 16#0#;
    LW_PRGNLCL_SE0_AES0_CRYPTO_KEYTABLE_KEYMANIFEST_USER_PSC         : constant NvU3 := 16#1#;
    LW_PRGNLCL_SE0_AES0_CRYPTO_KEYTABLE_KEYMANIFEST_USER_TZ          : constant NvU3 := 16#2#;
    LW_PRGNLCL_SE0_AES0_CRYPTO_KEYTABLE_KEYMANIFEST_USER_NS          : constant NvU3 := 16#3#;
    LW_PRGNLCL_SE0_AES0_CRYPTO_KEYTABLE_KEYMANIFEST_USER_FSI         : constant NvU3 := 16#4#;
    LW_PRGNLCL_SE0_AES0_CRYPTO_KEYTABLE_KEYMANIFEST_USER_INIT        : constant NvU3 := 16#0#;
    LW_PRGNLCL_SE0_AES0_CRYPTO_KEYTABLE_KEYMANIFEST_PURPOSE_ENC      : constant NvU4 := 16#0#;
    LW_PRGNLCL_SE0_AES0_CRYPTO_KEYTABLE_KEYMANIFEST_PURPOSE_CMAC     : constant NvU4 := 16#1#;
    LW_PRGNLCL_SE0_AES0_CRYPTO_KEYTABLE_KEYMANIFEST_PURPOSE_HMAC     : constant NvU4 := 16#2#;
    LW_PRGNLCL_SE0_AES0_CRYPTO_KEYTABLE_KEYMANIFEST_PURPOSE_KW       : constant NvU4 := 16#3#;
    LW_PRGNLCL_SE0_AES0_CRYPTO_KEYTABLE_KEYMANIFEST_PURPOSE_KUW      : constant NvU4 := 16#4#;
    LW_PRGNLCL_SE0_AES0_CRYPTO_KEYTABLE_KEYMANIFEST_PURPOSE_KWUW     : constant NvU4 := 16#5#;
    LW_PRGNLCL_SE0_AES0_CRYPTO_KEYTABLE_KEYMANIFEST_PURPOSE_KDK      : constant NvU4 := 16#6#;
    LW_PRGNLCL_SE0_AES0_CRYPTO_KEYTABLE_KEYMANIFEST_PURPOSE_KDD      : constant NvU4 := 16#7#;
    LW_PRGNLCL_SE0_AES0_CRYPTO_KEYTABLE_KEYMANIFEST_PURPOSE_KDD_KUW  : constant NvU4 := 16#8#;
    LW_PRGNLCL_SE0_AES0_CRYPTO_KEYTABLE_KEYMANIFEST_PURPOSE_XTS      : constant NvU4 := 16#9#;
    LW_PRGNLCL_SE0_AES0_CRYPTO_KEYTABLE_KEYMANIFEST_PURPOSE_GCM      : constant NvU4 := 16#a#;
    LW_PRGNLCL_SE0_AES0_CRYPTO_KEYTABLE_KEYMANIFEST_PURPOSE_RESERVED : constant NvU4 := 16#b#;
    LW_PRGNLCL_SE0_AES0_CRYPTO_KEYTABLE_KEYMANIFEST_PURPOSE_INIT     : constant NvU4 := 16#0#;
    LW_PRGNLCL_SE0_AES0_CRYPTO_KEYTABLE_KEYMANIFEST_EX_FALSE         : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_AES0_CRYPTO_KEYTABLE_KEYMANIFEST_EX_TRUE          : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_AES0_CRYPTO_KEYTABLE_KEYMANIFEST_EX_INIT          : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_AES0_CRYPTO_KEYTABLE_KEYMANIFEST_SIZE_KEY128      : constant NvU2 := 16#0#;
    LW_PRGNLCL_SE0_AES0_CRYPTO_KEYTABLE_KEYMANIFEST_SIZE_KEY192      : constant NvU2 := 16#1#;
    LW_PRGNLCL_SE0_AES0_CRYPTO_KEYTABLE_KEYMANIFEST_SIZE_KEY256      : constant NvU2 := 16#2#;
    LW_PRGNLCL_SE0_AES0_CRYPTO_KEYTABLE_KEYMANIFEST_SIZE_RESERVED    : constant NvU2 := 16#3#;
    LW_PRGNLCL_SE0_AES0_CRYPTO_KEYTABLE_KEYMANIFEST_SIZE_INIT        : constant NvU2 := 16#0#;

    type LW_PRGNLCL_SE0_AES0_CRYPTO_KEYTABLE_KEYMANIFEST_Register is record
        Origin  : NvU3;
        User    : NvU3;
        Purpose : NvU4;
        Ex      : NvU1;
        Size    : NvU2;
        Sw      : NvU16;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SE0_AES0_CRYPTO_KEYTABLE_KEYMANIFEST_Register use record
        Origin  at 0 range  0 ..  2;
        User    at 0 range  4 ..  6;
        Purpose at 0 range  8 .. 11;
        Ex      at 0 range 12 .. 12;
        Size    at 0 range 14 .. 15;
        Sw      at 0 range 16 .. 31;
    end record;

    LW_PRGNLCL_SE0_AES0_CRYPTO_KEYTABLE_CTRL_LOCK_FALSE : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_AES0_CRYPTO_KEYTABLE_CTRL_LOCK_TRUE  : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_AES0_CRYPTO_KEYTABLE_CTRL_LOCK_INIT  : constant NvU1 := 16#0#;

    type LW_PRGNLCL_SE0_AES0_CRYPTO_KEYTABLE_CTRL_Register is record
        Lock : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SE0_AES0_CRYPTO_KEYTABLE_CTRL_Register use record
        Lock at 0 range 0 .. 0;
    end record;

    LW_PRGNLCL_SE0_AES0_CRYPTO_TAG_VAL_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_SE0_AES0_CRYPTO_TAG_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SE0_AES0_CRYPTO_TAG_Register use record
        Val at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_SE0_AES0_CRYPTO_AAD_LENGTH_VAL_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_SE0_AES0_CRYPTO_AAD_LENGTH_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SE0_AES0_CRYPTO_AAD_LENGTH_Register use record
        Val at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_SE0_AES0_CRYPTO_MSG_LENGTH_VAL_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_SE0_AES0_CRYPTO_MSG_LENGTH_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SE0_AES0_CRYPTO_MSG_LENGTH_Register use record
        Val at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_SE0_AES1_GSCID_IN_ID_INIT  : constant NvU8 := 16#0#;
    LW_PRGNLCL_SE0_AES1_GSCID_OUT_ID_INIT : constant NvU8 := 16#0#;

    type LW_PRGNLCL_SE0_AES1_GSCID_Register is record
        In_Id  : NvU8;
        Out_Id : NvU8;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SE0_AES1_GSCID_Register use record
        In_Id  at 0 range 16 .. 23;
        Out_Id at 0 range  0 ..  7;
    end record;

    LW_PRGNLCL_SE0_AES1_CONFIG_DST_MEMORY         : constant NvU3 := 16#0#;
    LW_PRGNLCL_SE0_AES1_CONFIG_DST_HASH_REG       : constant NvU3 := 16#1#;
    LW_PRGNLCL_SE0_AES1_CONFIG_DST_KEYTABLE       : constant NvU3 := 16#2#;
    LW_PRGNLCL_SE0_AES1_CONFIG_DST_SRK            : constant NvU3 := 16#3#;
    LW_PRGNLCL_SE0_AES1_CONFIG_DST_INIT           : constant NvU3 := 16#0#;
    LW_PRGNLCL_SE0_AES1_CONFIG_DEC_ALG_NOP        : constant NvU4 := 16#0#;
    LW_PRGNLCL_SE0_AES1_CONFIG_DEC_ALG_AES_DEC    : constant NvU4 := 16#1#;
    LW_PRGNLCL_SE0_AES1_CONFIG_DEC_ALG_INIT       : constant NvU4 := 16#0#;
    LW_PRGNLCL_SE0_AES1_CONFIG_ENC_ALG_NOP        : constant NvU4 := 16#0#;
    LW_PRGNLCL_SE0_AES1_CONFIG_ENC_ALG_AES_ENC    : constant NvU4 := 16#1#;
    LW_PRGNLCL_SE0_AES1_CONFIG_ENC_ALG_RNG        : constant NvU4 := 16#2#;
    LW_PRGNLCL_SE0_AES1_CONFIG_ENC_ALG_SHA        : constant NvU4 := 16#3#;
    LW_PRGNLCL_SE0_AES1_CONFIG_ENC_ALG_HMAC       : constant NvU4 := 16#7#;
    LW_PRGNLCL_SE0_AES1_CONFIG_ENC_ALG_KDF        : constant NvU4 := 16#8#;
    LW_PRGNLCL_SE0_AES1_CONFIG_ENC_ALG_INS        : constant NvU4 := 16#d#;
    LW_PRGNLCL_SE0_AES1_CONFIG_ENC_ALG_CLONE      : constant NvU4 := 16#e#;
    LW_PRGNLCL_SE0_AES1_CONFIG_ENC_ALG_LOCK       : constant NvU4 := 16#f#;
    LW_PRGNLCL_SE0_AES1_CONFIG_ENC_ALG_INIT       : constant NvU4 := 16#0#;
    LW_PRGNLCL_SE0_AES1_CONFIG_DEC_MODE_GMAC      : constant NvU8 := 16#3#;
    LW_PRGNLCL_SE0_AES1_CONFIG_DEC_MODE_GCM       : constant NvU8 := 16#4#;
    LW_PRGNLCL_SE0_AES1_CONFIG_DEC_MODE_GCM_FINAL : constant NvU8 := 16#5#;
    LW_PRGNLCL_SE0_AES1_CONFIG_DEC_MODE_KW        : constant NvU8 := 16#6#;
    LW_PRGNLCL_SE0_AES1_CONFIG_DEC_MODE_INIT      : constant NvU8 := 16#0#;
    LW_PRGNLCL_SE0_AES1_CONFIG_ENC_MODE_KEY128    : constant NvU8 := 16#0#;
    LW_PRGNLCL_SE0_AES1_CONFIG_ENC_MODE_KEY192    : constant NvU8 := 16#1#;
    LW_PRGNLCL_SE0_AES1_CONFIG_ENC_MODE_KEY256    : constant NvU8 := 16#2#;
    LW_PRGNLCL_SE0_AES1_CONFIG_ENC_MODE_GMAC      : constant NvU8 := 16#3#;
    LW_PRGNLCL_SE0_AES1_CONFIG_ENC_MODE_GCM       : constant NvU8 := 16#4#;
    LW_PRGNLCL_SE0_AES1_CONFIG_ENC_MODE_GCM_FINAL : constant NvU8 := 16#5#;
    LW_PRGNLCL_SE0_AES1_CONFIG_ENC_MODE_KW        : constant NvU8 := 16#6#;
    LW_PRGNLCL_SE0_AES1_CONFIG_ENC_MODE_CMAC      : constant NvU8 := 16#7#;
    LW_PRGNLCL_SE0_AES1_CONFIG_ENC_MODE_INIT      : constant NvU8 := 16#0#;

    type LW_PRGNLCL_SE0_AES1_CONFIG_Register is record
        Dst      : NvU3;
        Dec_Alg  : NvU4;
        Enc_Alg  : NvU4;
        Dec_Mode : NvU8;
        Enc_Mode : NvU8;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SE0_AES1_CONFIG_Register use record
        Dst      at 0 range  2 ..  4;
        Dec_Alg  at 0 range  8 .. 11;
        Enc_Alg  at 0 range 12 .. 15;
        Dec_Mode at 0 range 16 .. 23;
        Enc_Mode at 0 range 24 .. 31;
    end record;

    LW_PRGNLCL_SE0_AES1_CRYPTO_CONFIG_KEY2_INDEX_INIT  : constant NvU4 := 16#0#;
    LW_PRGNLCL_SE0_AES1_CRYPTO_CONFIG_KEY_INDEX_INIT   : constant NvU4 := 16#0#;
    LW_PRGNLCL_SE0_AES1_CRYPTO_CONFIG_SCC_DIS_DISABLE  : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_AES1_CRYPTO_CONFIG_SCC_DIS_ENABLE   : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_AES1_CRYPTO_CONFIG_SCC_DIS_INIT     : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_AES1_CRYPTO_CONFIG_CTR_CNTN_INIT    : constant NvU8 := 16#0#;
    LW_PRGNLCL_SE0_AES1_CRYPTO_CONFIG_CORE_SEL_DECRYPT : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_AES1_CRYPTO_CONFIG_CORE_SEL_ENCRYPT : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_AES1_CRYPTO_CONFIG_CORE_SEL_INIT    : constant NvU1 := 16#0#;
    type LW_PRGNLCL_SE0_AES1_CRYPTO_CONFIG_IV_SELECT_Field is (SELECT_INIT, SELECT_UPDATED, SELECT_REG) with
        Size => 2;
    for LW_PRGNLCL_SE0_AES1_CRYPTO_CONFIG_IV_SELECT_Field use (SELECT_INIT => 16#0#, SELECT_UPDATED => 16#1#, SELECT_REG => 16#2#);
    LW_PRGNLCL_SE0_AES1_CRYPTO_CONFIG_VCTRAM_SEL_MEMORY           : constant NvU2 := 16#0#;
    LW_PRGNLCL_SE0_AES1_CRYPTO_CONFIG_VCTRAM_SEL_TWEAK            : constant NvU2 := 16#1#;
    LW_PRGNLCL_SE0_AES1_CRYPTO_CONFIG_VCTRAM_SEL_INIT_AESOUT      : constant NvU2 := 16#2#;
    LW_PRGNLCL_SE0_AES1_CRYPTO_CONFIG_VCTRAM_SEL_INIT_PREV_MEMORY : constant NvU2 := 16#3#;
    LW_PRGNLCL_SE0_AES1_CRYPTO_CONFIG_VCTRAM_SEL_INIT             : constant NvU2 := 16#0#;
    LW_PRGNLCL_SE0_AES1_CRYPTO_CONFIG_INPUT_SEL_MEMORY            : constant NvU2 := 16#0#;
    LW_PRGNLCL_SE0_AES1_CRYPTO_CONFIG_INPUT_SEL_RANDOM            : constant NvU2 := 16#1#;
    LW_PRGNLCL_SE0_AES1_CRYPTO_CONFIG_INPUT_SEL_INIT_AESOUT       : constant NvU2 := 16#2#;
    LW_PRGNLCL_SE0_AES1_CRYPTO_CONFIG_INPUT_SEL_LINEAR_CTR        : constant NvU2 := 16#3#;
    LW_PRGNLCL_SE0_AES1_CRYPTO_CONFIG_INPUT_SEL_INIT              : constant NvU2 := 16#0#;
    LW_PRGNLCL_SE0_AES1_CRYPTO_CONFIG_XOR_POS_BYPASS              : constant NvU2 := 16#0#;
    LW_PRGNLCL_SE0_AES1_CRYPTO_CONFIG_XOR_POS_BOTH                : constant NvU2 := 16#1#;
    LW_PRGNLCL_SE0_AES1_CRYPTO_CONFIG_XOR_POS_TOP                 : constant NvU2 := 16#2#;
    LW_PRGNLCL_SE0_AES1_CRYPTO_CONFIG_XOR_POS_BOTTOM              : constant NvU2 := 16#3#;
    LW_PRGNLCL_SE0_AES1_CRYPTO_CONFIG_XOR_POS_INIT                : constant NvU2 := 16#0#;
    LW_PRGNLCL_SE0_AES1_CRYPTO_CONFIG_HASH_ENB_DISABLE            : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_AES1_CRYPTO_CONFIG_HASH_ENB_ENABLE             : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_AES1_CRYPTO_CONFIG_HASH_ENB_INIT               : constant NvU1 := 16#0#;

    type LW_PRGNLCL_SE0_AES1_CRYPTO_CONFIG_Register is record
        Key2_Index : NvU4;
        Key_Index  : NvU4;
        Scc_Dis    : NvU1;
        Ctr_Cntn   : NvU8;
        Core_Sel   : NvU1;
        Iv_Select  : LW_PRGNLCL_SE0_AES1_CRYPTO_CONFIG_IV_SELECT_Field;
        Vctram_Sel : NvU2;
        Input_Sel  : NvU2;
        Xor_Pos    : NvU2;
        Hash_Enb   : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SE0_AES1_CRYPTO_CONFIG_Register use record
        Key2_Index at 0 range 28 .. 31;
        Key_Index  at 0 range 24 .. 27;
        Scc_Dis    at 0 range 20 .. 20;
        Ctr_Cntn   at 0 range 11 .. 18;
        Core_Sel   at 0 range  9 ..  9;
        Iv_Select  at 0 range  7 ..  8;
        Vctram_Sel at 0 range  5 ..  6;
        Input_Sel  at 0 range  3 ..  4;
        Xor_Pos    at 0 range  1 ..  2;
        Hash_Enb   at 0 range  0 ..  0;
    end record;

    LW_PRGNLCL_SE0_AES1_IN_ADDR_VAL_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_SE0_AES1_IN_ADDR_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SE0_AES1_IN_ADDR_Register use record
        Val at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_SE0_AES1_IN_ADDR_HI_MSB_INIT : constant NvU8  := 16#0#;
    LW_PRGNLCL_SE0_AES1_IN_ADDR_HI_SZ_INIT  : constant NvU24 := 16#0#;

    type LW_PRGNLCL_SE0_AES1_IN_ADDR_HI_Register is record
        Msb : NvU8;
        Sz  : NvU24;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SE0_AES1_IN_ADDR_HI_Register use record
        Msb at 0 range 24 .. 31;
        Sz  at 0 range  0 .. 23;
    end record;

    LW_PRGNLCL_SE0_AES1_OUT_ADDR_VAL_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_SE0_AES1_OUT_ADDR_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SE0_AES1_OUT_ADDR_Register use record
        Val at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_SE0_AES1_OUT_ADDR_HI_MSB_INIT : constant NvU8  := 16#0#;
    LW_PRGNLCL_SE0_AES1_OUT_ADDR_HI_SZ_INIT  : constant NvU24 := 16#0#;

    type LW_PRGNLCL_SE0_AES1_OUT_ADDR_HI_Register is record
        Msb : NvU8;
        Sz  : NvU24;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SE0_AES1_OUT_ADDR_HI_Register use record
        Msb at 0 range 24 .. 31;
        Sz  at 0 range  0 .. 23;
    end record;

    LW_PRGNLCL_SE0_AES1_CRYPTO_LINEAR_CTR_VAL_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_SE0_AES1_CRYPTO_LINEAR_CTR_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SE0_AES1_CRYPTO_LINEAR_CTR_Register use record
        Val at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_SE0_AES1_CRYPTO_LAST_BLOCK_RESIDUAL_BITS_INIT : constant NvU7  := 16#0#;
    LW_PRGNLCL_SE0_AES1_CRYPTO_LAST_BLOCK_VAL_INIT           : constant NvU20 := 16#0#;

    type LW_PRGNLCL_SE0_AES1_CRYPTO_LAST_BLOCK_Register is record
        Residual_Bits : NvU7;
        Val           : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SE0_AES1_CRYPTO_LAST_BLOCK_Register use record
        Residual_Bits at 0 range 20 .. 26;
        Val           at 0 range  0 .. 19;
    end record;

    LW_PRGNLCL_SE0_AES1_CRYPTO_KEYTABLE_DST_KEY_INDEX_INIT : constant NvU4 := 16#0#;

    type LW_PRGNLCL_SE0_AES1_CRYPTO_KEYTABLE_DST_Register is record
        Key_Index : NvU4;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SE0_AES1_CRYPTO_KEYTABLE_DST_Register use record
        Key_Index at 0 range 8 .. 11;
    end record;

    LW_PRGNLCL_SE0_AES1_OPERATION_LASTBUF_FALSE : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_AES1_OPERATION_LASTBUF_TRUE  : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_AES1_OPERATION_LASTBUF_INIT  : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_AES1_OPERATION_WRSTALL_FALSE : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_AES1_OPERATION_WRSTALL_TRUE  : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_AES1_OPERATION_WRSTALL_INIT  : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_AES1_OPERATION_FINAL_FALSE   : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_AES1_OPERATION_FINAL_TRUE    : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_AES1_OPERATION_FINAL_INIT    : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_AES1_OPERATION_INIT_FALSE    : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_AES1_OPERATION_INIT_TRUE     : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_AES1_OPERATION_INIT_INIT     : constant NvU1 := 16#0#;
    type LW_PRGNLCL_SE0_AES1_OPERATION_OP_Field is (OP_INIT, OP_START, OP_RESTART_OUT, OP_RESTART_IN, OP_RESTART_INOUT, OP_DUMMY) with
        Size => 3;
    for LW_PRGNLCL_SE0_AES1_OPERATION_OP_Field use
        (OP_INIT => 16#0#, OP_START => 16#1#, OP_RESTART_OUT => 16#2#, OP_RESTART_IN => 16#4#, OP_RESTART_INOUT => 16#5#, OP_DUMMY => 16#6#);

    type LW_PRGNLCL_SE0_AES1_OPERATION_Register is record
        Lastbuf : NvU1;
        Wrstall : NvU1;
        Final   : NvU1;
        Init    : NvU1;
        Op      : LW_PRGNLCL_SE0_AES1_OPERATION_OP_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SE0_AES1_OPERATION_Register use record
        Lastbuf at 0 range 16 .. 16;
        Wrstall at 0 range 15 .. 15;
        Final   at 0 range  5 ..  5;
        Init    at 0 range  4 ..  4;
        Op      at 0 range  0 ..  2;
    end record;

    LW_PRGNLCL_SE0_AES1_CRYPTO_KEYTABLE_ADDR_PKT_INIT       : constant NvU3 := 16#0#;
    LW_PRGNLCL_SE0_AES1_CRYPTO_KEYTABLE_ADDR_KEY_INDEX_INIT : constant NvU4 := 16#0#;
    type LW_PRGNLCL_SE0_AES1_CRYPTO_KEYTABLE_ADDR_SEL_Field is (SEL_INIT, SEL_KEYBUF, SEL_KEYMANIFEST, SEL_KEYCTRL) with
        Size => 2;
    for LW_PRGNLCL_SE0_AES1_CRYPTO_KEYTABLE_ADDR_SEL_Field use (SEL_INIT => 16#0#, SEL_KEYBUF => 16#1#, SEL_KEYMANIFEST => 16#2#, SEL_KEYCTRL => 16#3#);

    type LW_PRGNLCL_SE0_AES1_CRYPTO_KEYTABLE_ADDR_Register is record
        Pkt       : NvU3;
        Key_Index : NvU4;
        Sel       : LW_PRGNLCL_SE0_AES1_CRYPTO_KEYTABLE_ADDR_SEL_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SE0_AES1_CRYPTO_KEYTABLE_ADDR_Register use record
        Pkt       at 0 range  0 ..  2;
        Key_Index at 0 range  4 ..  7;
        Sel       at 0 range 16 .. 17;
    end record;

    type LW_PRGNLCL_SE0_AES1_CRYPTO_KEYTABLE_DATA_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SE0_AES1_CRYPTO_KEYTABLE_DATA_Register use record
        Val at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_SE0_AES1_CMAC_RESULT_VAL_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_SE0_AES1_CMAC_RESULT_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SE0_AES1_CMAC_RESULT_Register use record
        Val at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_SE0_AES1_INT_ENABLE_ERR_STAT_DISABLE   : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_AES1_INT_ENABLE_ERR_STAT_ENABLE    : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_AES1_INT_ENABLE_ERR_STAT_INIT      : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_AES1_INT_ENABLE_SE_OP_DONE_DISABLE : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_AES1_INT_ENABLE_SE_OP_DONE_ENABLE  : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_AES1_INT_ENABLE_SE_OP_DONE_INIT    : constant NvU1 := 16#0#;

    type LW_PRGNLCL_SE0_AES1_INT_ENABLE_Register is record
        Err_Stat   : NvU1;
        Se_Op_Done : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SE0_AES1_INT_ENABLE_Register use record
        Err_Stat   at 0 range 16 .. 16;
        Se_Op_Done at 0 range  4 ..  4;
    end record;

    LW_PRGNLCL_SE0_AES1_INT_STATUS_ERR_STAT_CLEAR      : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_AES1_INT_STATUS_ERR_STAT_ACTIVE     : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_AES1_INT_STATUS_ERR_STAT_SW_CLEAR   : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_AES1_INT_STATUS_ERR_STAT_INIT       : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_AES1_INT_STATUS_SE_OP_DONE_CLEAR    : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_AES1_INT_STATUS_SE_OP_DONE_ACTIVE   : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_AES1_INT_STATUS_SE_OP_DONE_SW_CLEAR : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_AES1_INT_STATUS_SE_OP_DONE_INIT     : constant NvU1 := 16#0#;

    type LW_PRGNLCL_SE0_AES1_INT_STATUS_Register is record
        Err_Stat   : NvU1;
        Se_Op_Done : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SE0_AES1_INT_STATUS_Register use record
        Err_Stat   at 0 range 16 .. 16;
        Se_Op_Done at 0 range  4 ..  4;
    end record;

    LW_PRGNLCL_SE0_AES1_STATUS_STATE_IDLE       : constant NvU3 := 16#0#;
    LW_PRGNLCL_SE0_AES1_STATUS_STATE_BUSY       : constant NvU3 := 16#1#;
    LW_PRGNLCL_SE0_AES1_STATUS_STATE_WAIT_OUT   : constant NvU3 := 16#2#;
    LW_PRGNLCL_SE0_AES1_STATUS_STATE_WAIT_IN    : constant NvU3 := 16#3#;
    LW_PRGNLCL_SE0_AES1_STATUS_STATE_WAIT_INOUT : constant NvU3 := 16#4#;
    LW_PRGNLCL_SE0_AES1_STATUS_STATE_CANCELLING : constant NvU3 := 16#5#;
    LW_PRGNLCL_SE0_AES1_STATUS_STATE_PENDING    : constant NvU3 := 16#6#;
    LW_PRGNLCL_SE0_AES1_STATUS_STATE_INIT       : constant NvU3 := 16#0#;

    type LW_PRGNLCL_SE0_AES1_STATUS_Register is record
        State : NvU3;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SE0_AES1_STATUS_Register use record
        State at 0 range 0 .. 2;
    end record;

    LW_PRGNLCL_SE0_AES1_ERR_STATUS_BUSY_REG_WR_CLEAR    : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_AES1_ERR_STATUS_BUSY_REG_WR_ACTIVE   : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_AES1_ERR_STATUS_BUSY_REG_WR_SW_CLEAR : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_AES1_ERR_STATUS_BUSY_REG_WR_INIT     : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_AES1_ERR_STATUS_NO_SUPPORT_CLEAR     : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_AES1_ERR_STATUS_NO_SUPPORT_ACTIVE    : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_AES1_ERR_STATUS_NO_SUPPORT_SW_CLEAR  : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_AES1_ERR_STATUS_NO_SUPPORT_INIT      : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_AES1_ERR_STATUS_ILLEGAL_CFG_CLEAR    : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_AES1_ERR_STATUS_ILLEGAL_CFG_ACTIVE   : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_AES1_ERR_STATUS_ILLEGAL_CFG_SW_CLEAR : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_AES1_ERR_STATUS_ILLEGAL_CFG_INIT     : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_AES1_ERR_STATUS_KAC_FAIL_CLEAR       : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_AES1_ERR_STATUS_KAC_FAIL_ACTIVE      : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_AES1_ERR_STATUS_KAC_FAIL_SW_CLEAR    : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_AES1_ERR_STATUS_KAC_FAIL_INIT        : constant NvU1 := 16#0#;

    type LW_PRGNLCL_SE0_AES1_ERR_STATUS_Register is record
        Busy_Reg_Wr : NvU1;
        No_Support  : NvU1;
        Illegal_Cfg : NvU1;
        Kac_Fail    : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SE0_AES1_ERR_STATUS_Register use record
        Busy_Reg_Wr at 0 range  2 ..  2;
        No_Support  at 0 range  4 ..  4;
        Illegal_Cfg at 0 range  8 ..  8;
        Kac_Fail    at 0 range 31 .. 31;
    end record;

    LW_PRGNLCL_SE0_AES1_SPARE_VAL_INIT : constant NvU32 := 16#400_0000#;

    type LW_PRGNLCL_SE0_AES1_SPARE_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SE0_AES1_SPARE_Register use record
        Val at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_SE0_AES1_CRYPTO_KEYTABLE_KEYMANIFEST_ORIGIN_FUSE      : constant NvU3 := 16#0#;
    LW_PRGNLCL_SE0_AES1_CRYPTO_KEYTABLE_KEYMANIFEST_ORIGIN_PSC       : constant NvU3 := 16#1#;
    LW_PRGNLCL_SE0_AES1_CRYPTO_KEYTABLE_KEYMANIFEST_ORIGIN_TZ        : constant NvU3 := 16#2#;
    LW_PRGNLCL_SE0_AES1_CRYPTO_KEYTABLE_KEYMANIFEST_ORIGIN_NS        : constant NvU3 := 16#3#;
    LW_PRGNLCL_SE0_AES1_CRYPTO_KEYTABLE_KEYMANIFEST_ORIGIN_FSI       : constant NvU3 := 16#4#;
    LW_PRGNLCL_SE0_AES1_CRYPTO_KEYTABLE_KEYMANIFEST_ORIGIN_INIT      : constant NvU3 := 16#0#;
    LW_PRGNLCL_SE0_AES1_CRYPTO_KEYTABLE_KEYMANIFEST_USER_RESERVED    : constant NvU3 := 16#0#;
    LW_PRGNLCL_SE0_AES1_CRYPTO_KEYTABLE_KEYMANIFEST_USER_PSC         : constant NvU3 := 16#1#;
    LW_PRGNLCL_SE0_AES1_CRYPTO_KEYTABLE_KEYMANIFEST_USER_TZ          : constant NvU3 := 16#2#;
    LW_PRGNLCL_SE0_AES1_CRYPTO_KEYTABLE_KEYMANIFEST_USER_NS          : constant NvU3 := 16#3#;
    LW_PRGNLCL_SE0_AES1_CRYPTO_KEYTABLE_KEYMANIFEST_USER_FSI         : constant NvU3 := 16#4#;
    LW_PRGNLCL_SE0_AES1_CRYPTO_KEYTABLE_KEYMANIFEST_USER_INIT        : constant NvU3 := 16#0#;
    LW_PRGNLCL_SE0_AES1_CRYPTO_KEYTABLE_KEYMANIFEST_PURPOSE_ENC      : constant NvU4 := 16#0#;
    LW_PRGNLCL_SE0_AES1_CRYPTO_KEYTABLE_KEYMANIFEST_PURPOSE_CMAC     : constant NvU4 := 16#1#;
    LW_PRGNLCL_SE0_AES1_CRYPTO_KEYTABLE_KEYMANIFEST_PURPOSE_HMAC     : constant NvU4 := 16#2#;
    LW_PRGNLCL_SE0_AES1_CRYPTO_KEYTABLE_KEYMANIFEST_PURPOSE_KW       : constant NvU4 := 16#3#;
    LW_PRGNLCL_SE0_AES1_CRYPTO_KEYTABLE_KEYMANIFEST_PURPOSE_KUW      : constant NvU4 := 16#4#;
    LW_PRGNLCL_SE0_AES1_CRYPTO_KEYTABLE_KEYMANIFEST_PURPOSE_KWUW     : constant NvU4 := 16#5#;
    LW_PRGNLCL_SE0_AES1_CRYPTO_KEYTABLE_KEYMANIFEST_PURPOSE_KDK      : constant NvU4 := 16#6#;
    LW_PRGNLCL_SE0_AES1_CRYPTO_KEYTABLE_KEYMANIFEST_PURPOSE_KDD      : constant NvU4 := 16#7#;
    LW_PRGNLCL_SE0_AES1_CRYPTO_KEYTABLE_KEYMANIFEST_PURPOSE_KDD_KUW  : constant NvU4 := 16#8#;
    LW_PRGNLCL_SE0_AES1_CRYPTO_KEYTABLE_KEYMANIFEST_PURPOSE_XTS      : constant NvU4 := 16#9#;
    LW_PRGNLCL_SE0_AES1_CRYPTO_KEYTABLE_KEYMANIFEST_PURPOSE_GCM      : constant NvU4 := 16#a#;
    LW_PRGNLCL_SE0_AES1_CRYPTO_KEYTABLE_KEYMANIFEST_PURPOSE_RESERVED : constant NvU4 := 16#b#;
    LW_PRGNLCL_SE0_AES1_CRYPTO_KEYTABLE_KEYMANIFEST_PURPOSE_INIT     : constant NvU4 := 16#0#;
    LW_PRGNLCL_SE0_AES1_CRYPTO_KEYTABLE_KEYMANIFEST_EX_FALSE         : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_AES1_CRYPTO_KEYTABLE_KEYMANIFEST_EX_TRUE          : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_AES1_CRYPTO_KEYTABLE_KEYMANIFEST_EX_INIT          : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_AES1_CRYPTO_KEYTABLE_KEYMANIFEST_SIZE_KEY128      : constant NvU2 := 16#0#;
    LW_PRGNLCL_SE0_AES1_CRYPTO_KEYTABLE_KEYMANIFEST_SIZE_KEY192      : constant NvU2 := 16#1#;
    LW_PRGNLCL_SE0_AES1_CRYPTO_KEYTABLE_KEYMANIFEST_SIZE_KEY256      : constant NvU2 := 16#2#;
    LW_PRGNLCL_SE0_AES1_CRYPTO_KEYTABLE_KEYMANIFEST_SIZE_RESERVED    : constant NvU2 := 16#3#;
    LW_PRGNLCL_SE0_AES1_CRYPTO_KEYTABLE_KEYMANIFEST_SIZE_INIT        : constant NvU2 := 16#0#;

    type LW_PRGNLCL_SE0_AES1_CRYPTO_KEYTABLE_KEYMANIFEST_Register is record
        Origin  : NvU3;
        User    : NvU3;
        Purpose : NvU4;
        Ex      : NvU1;
        Size    : NvU2;
        Sw      : NvU16;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SE0_AES1_CRYPTO_KEYTABLE_KEYMANIFEST_Register use record
        Origin  at 0 range  0 ..  2;
        User    at 0 range  4 ..  6;
        Purpose at 0 range  8 .. 11;
        Ex      at 0 range 12 .. 12;
        Size    at 0 range 14 .. 15;
        Sw      at 0 range 16 .. 31;
    end record;

    LW_PRGNLCL_SE0_AES1_CRYPTO_KEYTABLE_CTRL_LOCK_FALSE : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_AES1_CRYPTO_KEYTABLE_CTRL_LOCK_TRUE  : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_AES1_CRYPTO_KEYTABLE_CTRL_LOCK_INIT  : constant NvU1 := 16#0#;

    type LW_PRGNLCL_SE0_AES1_CRYPTO_KEYTABLE_CTRL_Register is record
        Lock : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SE0_AES1_CRYPTO_KEYTABLE_CTRL_Register use record
        Lock at 0 range 0 .. 0;
    end record;

    LW_PRGNLCL_SE0_AES1_CRYPTO_TAG_VAL_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_SE0_AES1_CRYPTO_TAG_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SE0_AES1_CRYPTO_TAG_Register use record
        Val at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_SE0_AES1_CRYPTO_AAD_LENGTH_VAL_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_SE0_AES1_CRYPTO_AAD_LENGTH_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SE0_AES1_CRYPTO_AAD_LENGTH_Register use record
        Val at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_SE0_AES1_CRYPTO_MSG_LENGTH_VAL_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_SE0_AES1_CRYPTO_MSG_LENGTH_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SE0_AES1_CRYPTO_MSG_LENGTH_Register use record
        Val at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_SE0_SHA_GSCID_IN_ID_INIT  : constant NvU8 := 16#0#;
    LW_PRGNLCL_SE0_SHA_GSCID_OUT_ID_INIT : constant NvU8 := 16#0#;

    type LW_PRGNLCL_SE0_SHA_GSCID_Register is record
        In_Id  : NvU8;
        Out_Id : NvU8;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SE0_SHA_GSCID_Register use record
        In_Id  at 0 range 16 .. 23;
        Out_Id at 0 range  0 ..  7;
    end record;

    LW_PRGNLCL_SE0_SHA_CONFIG_DST_MEMORY                 : constant NvU3 := 16#0#;
    LW_PRGNLCL_SE0_SHA_CONFIG_DST_HASH_REG               : constant NvU3 := 16#1#;
    LW_PRGNLCL_SE0_SHA_CONFIG_DST_KEYTABLE               : constant NvU3 := 16#2#;
    LW_PRGNLCL_SE0_SHA_CONFIG_DST_SRK                    : constant NvU3 := 16#3#;
    LW_PRGNLCL_SE0_SHA_CONFIG_DST_INIT                   : constant NvU3 := 16#0#;
    LW_PRGNLCL_SE0_SHA_CONFIG_DEC_ALG_NOP                : constant NvU4 := 16#0#;
    LW_PRGNLCL_SE0_SHA_CONFIG_DEC_ALG_AES_DEC            : constant NvU4 := 16#1#;
    LW_PRGNLCL_SE0_SHA_CONFIG_DEC_ALG_INIT               : constant NvU4 := 16#0#;
    LW_PRGNLCL_SE0_SHA_CONFIG_ENC_ALG_NOP                : constant NvU4 := 16#0#;
    LW_PRGNLCL_SE0_SHA_CONFIG_ENC_ALG_AES_ENC            : constant NvU4 := 16#1#;
    LW_PRGNLCL_SE0_SHA_CONFIG_ENC_ALG_RNG                : constant NvU4 := 16#2#;
    LW_PRGNLCL_SE0_SHA_CONFIG_ENC_ALG_SHA                : constant NvU4 := 16#3#;
    LW_PRGNLCL_SE0_SHA_CONFIG_ENC_ALG_HMAC               : constant NvU4 := 16#7#;
    LW_PRGNLCL_SE0_SHA_CONFIG_ENC_ALG_KDF                : constant NvU4 := 16#8#;
    LW_PRGNLCL_SE0_SHA_CONFIG_ENC_ALG_INS                : constant NvU4 := 16#d#;
    LW_PRGNLCL_SE0_SHA_CONFIG_ENC_ALG_CLONE              : constant NvU4 := 16#e#;
    LW_PRGNLCL_SE0_SHA_CONFIG_ENC_ALG_LOCK               : constant NvU4 := 16#f#;
    LW_PRGNLCL_SE0_SHA_CONFIG_ENC_ALG_INIT               : constant NvU4 := 16#0#;
    LW_PRGNLCL_SE0_SHA_CONFIG_DEC_MODE_INIT              : constant NvU8 := 16#0#;
    LW_PRGNLCL_SE0_SHA_CONFIG_ENC_MODE_SHA1              : constant NvU8 := 16#0#;
    LW_PRGNLCL_SE0_SHA_CONFIG_ENC_MODE_SHA224            : constant NvU8 := 16#4#;
    LW_PRGNLCL_SE0_SHA_CONFIG_ENC_MODE_SHA256            : constant NvU8 := 16#5#;
    LW_PRGNLCL_SE0_SHA_CONFIG_ENC_MODE_SHA384            : constant NvU8 := 16#6#;
    LW_PRGNLCL_SE0_SHA_CONFIG_ENC_MODE_SHA512            : constant NvU8 := 16#7#;
    LW_PRGNLCL_SE0_SHA_CONFIG_ENC_MODE_SHA_CTX_INTEGRITY : constant NvU8 := 16#8#;
    LW_PRGNLCL_SE0_SHA_CONFIG_ENC_MODE_SHA3_224          : constant NvU8 := 16#9#;
    LW_PRGNLCL_SE0_SHA_CONFIG_ENC_MODE_SHA3_256          : constant NvU8 := 16#a#;
    LW_PRGNLCL_SE0_SHA_CONFIG_ENC_MODE_SHA3_384          : constant NvU8 := 16#b#;
    LW_PRGNLCL_SE0_SHA_CONFIG_ENC_MODE_SHA3_512          : constant NvU8 := 16#c#;
    LW_PRGNLCL_SE0_SHA_CONFIG_ENC_MODE_SHAKE128          : constant NvU8 := 16#d#;
    LW_PRGNLCL_SE0_SHA_CONFIG_ENC_MODE_SHAKE256          : constant NvU8 := 16#e#;
    LW_PRGNLCL_SE0_SHA_CONFIG_ENC_MODE_HMAC_SHA256_1KEY  : constant NvU8 := 16#0#;
    LW_PRGNLCL_SE0_SHA_CONFIG_ENC_MODE_HMAC_SHA256_2KEY  : constant NvU8 := 16#1#;
    LW_PRGNLCL_SE0_SHA_CONFIG_ENC_MODE_INIT              : constant NvU8 := 16#0#;

    type LW_PRGNLCL_SE0_SHA_CONFIG_Register is record
        Dst      : NvU3;
        Dec_Alg  : NvU4;
        Enc_Alg  : NvU4;
        Dec_Mode : NvU8;
        Enc_Mode : NvU8;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SE0_SHA_CONFIG_Register use record
        Dst      at 0 range  2 ..  4;
        Dec_Alg  at 0 range  8 .. 11;
        Enc_Alg  at 0 range 12 .. 15;
        Dec_Mode at 0 range 16 .. 23;
        Enc_Mode at 0 range 24 .. 31;
    end record;

    LW_PRGNLCL_SE0_SHA_TASK_CONFIG_HW_INIT_HASH_DISABLE : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_SHA_TASK_CONFIG_HW_INIT_HASH_ENABLE  : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_SHA_TASK_CONFIG_HW_INIT_HASH_INIT    : constant NvU1 := 16#0#;

    type LW_PRGNLCL_SE0_SHA_TASK_CONFIG_Register is record
        Hw_Init_Hash : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SE0_SHA_TASK_CONFIG_Register use record
        Hw_Init_Hash at 0 range 0 .. 0;
    end record;

    LW_PRGNLCL_SE0_SHA_IN_ADDR_VAL_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_SE0_SHA_IN_ADDR_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SE0_SHA_IN_ADDR_Register use record
        Val at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_SE0_SHA_IN_ADDR_HI_MSB_INIT : constant NvU8  := 16#0#;
    LW_PRGNLCL_SE0_SHA_IN_ADDR_HI_SZ_INIT  : constant NvU24 := 16#0#;

    type LW_PRGNLCL_SE0_SHA_IN_ADDR_HI_Register is record
        Msb : NvU8;
        Sz  : NvU24;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SE0_SHA_IN_ADDR_HI_Register use record
        Msb at 0 range 24 .. 31;
        Sz  at 0 range  0 .. 23;
    end record;

    LW_PRGNLCL_SE0_SHA_OUT_ADDR_VAL_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_SE0_SHA_OUT_ADDR_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SE0_SHA_OUT_ADDR_Register use record
        Val at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_SE0_SHA_OUT_ADDR_HI_MSB_INIT : constant NvU8  := 16#0#;
    LW_PRGNLCL_SE0_SHA_OUT_ADDR_HI_SZ_INIT  : constant NvU24 := 16#0#;

    type LW_PRGNLCL_SE0_SHA_OUT_ADDR_HI_Register is record
        Msb : NvU8;
        Sz  : NvU24;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SE0_SHA_OUT_ADDR_HI_Register use record
        Msb at 0 range 24 .. 31;
        Sz  at 0 range  0 .. 23;
    end record;

    LW_PRGNLCL_SE0_SHA_MSG_LENGTH_VAL_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_SE0_SHA_MSG_LENGTH_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SE0_SHA_MSG_LENGTH_Register use record
        Val at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_SE0_SHA_MSG_LEFT_VAL_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_SE0_SHA_MSG_LEFT_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SE0_SHA_MSG_LEFT_Register use record
        Val at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_SE0_SHA_OPERATION_LASTBUF_FALSE : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_SHA_OPERATION_LASTBUF_TRUE  : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_SHA_OPERATION_LASTBUF_INIT  : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_SHA_OPERATION_WRSTALL_FALSE : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_SHA_OPERATION_WRSTALL_TRUE  : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_SHA_OPERATION_WRSTALL_INIT  : constant NvU1 := 16#0#;
    type LW_PRGNLCL_SE0_SHA_OPERATION_OP_Field is (OP_INIT, OP_START, OP_RESTART_OUT, OP_RESTART_IN, OP_RESTART_INOUT, OP_DUMMY) with
        Size => 3;
    for LW_PRGNLCL_SE0_SHA_OPERATION_OP_Field use
        (OP_INIT => 16#0#, OP_START => 16#1#, OP_RESTART_OUT => 16#2#, OP_RESTART_IN => 16#4#, OP_RESTART_INOUT => 16#5#, OP_DUMMY => 16#6#);

    type LW_PRGNLCL_SE0_SHA_OPERATION_Register is record
        Lastbuf : NvU1;
        Wrstall : NvU1;
        Op      : LW_PRGNLCL_SE0_SHA_OPERATION_OP_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SE0_SHA_OPERATION_Register use record
        Lastbuf at 0 range 16 .. 16;
        Wrstall at 0 range 15 .. 15;
        Op      at 0 range  0 ..  2;
    end record;

    LW_PRGNLCL_SE0_SHA_INT_ENABLE_ERR_STAT_DISABLE   : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_SHA_INT_ENABLE_ERR_STAT_ENABLE    : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_SHA_INT_ENABLE_ERR_STAT_INIT      : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_SHA_INT_ENABLE_SE_OP_DONE_DISABLE : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_SHA_INT_ENABLE_SE_OP_DONE_ENABLE  : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_SHA_INT_ENABLE_SE_OP_DONE_INIT    : constant NvU1 := 16#0#;

    type LW_PRGNLCL_SE0_SHA_INT_ENABLE_Register is record
        Err_Stat   : NvU1;
        Se_Op_Done : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SE0_SHA_INT_ENABLE_Register use record
        Err_Stat   at 0 range 16 .. 16;
        Se_Op_Done at 0 range  4 ..  4;
    end record;

    LW_PRGNLCL_SE0_SHA_INT_STATUS_ERR_STAT_CLEAR      : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_SHA_INT_STATUS_ERR_STAT_ACTIVE     : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_SHA_INT_STATUS_ERR_STAT_SW_CLEAR   : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_SHA_INT_STATUS_ERR_STAT_INIT       : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_SHA_INT_STATUS_SE_OP_DONE_CLEAR    : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_SHA_INT_STATUS_SE_OP_DONE_ACTIVE   : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_SHA_INT_STATUS_SE_OP_DONE_SW_CLEAR : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_SHA_INT_STATUS_SE_OP_DONE_INIT     : constant NvU1 := 16#0#;

    type LW_PRGNLCL_SE0_SHA_INT_STATUS_Register is record
        Err_Stat   : NvU1;
        Se_Op_Done : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SE0_SHA_INT_STATUS_Register use record
        Err_Stat   at 0 range 16 .. 16;
        Se_Op_Done at 0 range  4 ..  4;
    end record;

    LW_PRGNLCL_SE0_SHA_STATUS_STATE_IDLE       : constant NvU3 := 16#0#;
    LW_PRGNLCL_SE0_SHA_STATUS_STATE_BUSY       : constant NvU3 := 16#1#;
    LW_PRGNLCL_SE0_SHA_STATUS_STATE_WAIT_OUT   : constant NvU3 := 16#2#;
    LW_PRGNLCL_SE0_SHA_STATUS_STATE_WAIT_IN    : constant NvU3 := 16#3#;
    LW_PRGNLCL_SE0_SHA_STATUS_STATE_WAIT_INOUT : constant NvU3 := 16#4#;
    LW_PRGNLCL_SE0_SHA_STATUS_STATE_CANCELLING : constant NvU3 := 16#5#;
    LW_PRGNLCL_SE0_SHA_STATUS_STATE_PENDING    : constant NvU3 := 16#6#;
    LW_PRGNLCL_SE0_SHA_STATUS_STATE_INIT       : constant NvU3 := 16#0#;

    type LW_PRGNLCL_SE0_SHA_STATUS_Register is record
        State : NvU3;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SE0_SHA_STATUS_Register use record
        State at 0 range 0 .. 2;
    end record;

    LW_PRGNLCL_SE0_SHA_ERR_STATUS_BUSY_REG_WR_CLEAR    : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_SHA_ERR_STATUS_BUSY_REG_WR_ACTIVE   : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_SHA_ERR_STATUS_BUSY_REG_WR_SW_CLEAR : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_SHA_ERR_STATUS_BUSY_REG_WR_INIT     : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_SHA_ERR_STATUS_NO_SUPPORT_CLEAR     : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_SHA_ERR_STATUS_NO_SUPPORT_ACTIVE    : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_SHA_ERR_STATUS_NO_SUPPORT_SW_CLEAR  : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_SHA_ERR_STATUS_NO_SUPPORT_INIT      : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_SHA_ERR_STATUS_ILLEGAL_CFG_CLEAR    : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_SHA_ERR_STATUS_ILLEGAL_CFG_ACTIVE   : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_SHA_ERR_STATUS_ILLEGAL_CFG_SW_CLEAR : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_SHA_ERR_STATUS_ILLEGAL_CFG_INIT     : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_SHA_ERR_STATUS_KAC_FAIL_CLEAR       : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_SHA_ERR_STATUS_KAC_FAIL_ACTIVE      : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_SHA_ERR_STATUS_KAC_FAIL_SW_CLEAR    : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_SHA_ERR_STATUS_KAC_FAIL_INIT        : constant NvU1 := 16#0#;

    type LW_PRGNLCL_SE0_SHA_ERR_STATUS_Register is record
        Busy_Reg_Wr : NvU1;
        No_Support  : NvU1;
        Illegal_Cfg : NvU1;
        Kac_Fail    : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SE0_SHA_ERR_STATUS_Register use record
        Busy_Reg_Wr at 0 range  2 ..  2;
        No_Support  at 0 range  4 ..  4;
        Illegal_Cfg at 0 range  8 ..  8;
        Kac_Fail    at 0 range 31 .. 31;
    end record;

    LW_PRGNLCL_SE0_SHA_SPARE_VAL_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_SE0_SHA_SPARE_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SE0_SHA_SPARE_Register use record
        Val at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_SE0_SHA_CRYPTO_KEYTABLE_ADDR_PKT_INIT       : constant NvU3 := 16#0#;
    LW_PRGNLCL_SE0_SHA_CRYPTO_KEYTABLE_ADDR_KEY_INDEX_INIT : constant NvU4 := 16#0#;
    type LW_PRGNLCL_SE0_SHA_CRYPTO_KEYTABLE_ADDR_SEL_Field is (SEL_INIT, SEL_KEYBUF, SEL_KEYMANIFEST, SEL_KEYCTRL) with
        Size => 2;
    for LW_PRGNLCL_SE0_SHA_CRYPTO_KEYTABLE_ADDR_SEL_Field use (SEL_INIT => 16#0#, SEL_KEYBUF => 16#1#, SEL_KEYMANIFEST => 16#2#, SEL_KEYCTRL => 16#3#);

    type LW_PRGNLCL_SE0_SHA_CRYPTO_KEYTABLE_ADDR_Register is record
        Pkt       : NvU3;
        Key_Index : NvU4;
        Sel       : LW_PRGNLCL_SE0_SHA_CRYPTO_KEYTABLE_ADDR_SEL_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SE0_SHA_CRYPTO_KEYTABLE_ADDR_Register use record
        Pkt       at 0 range  0 ..  2;
        Key_Index at 0 range  4 ..  7;
        Sel       at 0 range 16 .. 17;
    end record;

    type LW_PRGNLCL_SE0_SHA_CRYPTO_KEYTABLE_DATA_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SE0_SHA_CRYPTO_KEYTABLE_DATA_Register use record
        Val at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_SE0_SHA_CRYPTO_KEYTABLE_KEYMANIFEST_ORIGIN_FUSE      : constant NvU3 := 16#0#;
    LW_PRGNLCL_SE0_SHA_CRYPTO_KEYTABLE_KEYMANIFEST_ORIGIN_PSC       : constant NvU3 := 16#1#;
    LW_PRGNLCL_SE0_SHA_CRYPTO_KEYTABLE_KEYMANIFEST_ORIGIN_TZ        : constant NvU3 := 16#2#;
    LW_PRGNLCL_SE0_SHA_CRYPTO_KEYTABLE_KEYMANIFEST_ORIGIN_NS        : constant NvU3 := 16#3#;
    LW_PRGNLCL_SE0_SHA_CRYPTO_KEYTABLE_KEYMANIFEST_ORIGIN_FSI       : constant NvU3 := 16#4#;
    LW_PRGNLCL_SE0_SHA_CRYPTO_KEYTABLE_KEYMANIFEST_ORIGIN_INIT      : constant NvU3 := 16#0#;
    LW_PRGNLCL_SE0_SHA_CRYPTO_KEYTABLE_KEYMANIFEST_USER_RESERVED    : constant NvU3 := 16#0#;
    LW_PRGNLCL_SE0_SHA_CRYPTO_KEYTABLE_KEYMANIFEST_USER_PSC         : constant NvU3 := 16#1#;
    LW_PRGNLCL_SE0_SHA_CRYPTO_KEYTABLE_KEYMANIFEST_USER_TZ          : constant NvU3 := 16#2#;
    LW_PRGNLCL_SE0_SHA_CRYPTO_KEYTABLE_KEYMANIFEST_USER_NS          : constant NvU3 := 16#3#;
    LW_PRGNLCL_SE0_SHA_CRYPTO_KEYTABLE_KEYMANIFEST_USER_FSI         : constant NvU3 := 16#4#;
    LW_PRGNLCL_SE0_SHA_CRYPTO_KEYTABLE_KEYMANIFEST_USER_INIT        : constant NvU3 := 16#0#;
    LW_PRGNLCL_SE0_SHA_CRYPTO_KEYTABLE_KEYMANIFEST_PURPOSE_ENC      : constant NvU4 := 16#0#;
    LW_PRGNLCL_SE0_SHA_CRYPTO_KEYTABLE_KEYMANIFEST_PURPOSE_CMAC     : constant NvU4 := 16#1#;
    LW_PRGNLCL_SE0_SHA_CRYPTO_KEYTABLE_KEYMANIFEST_PURPOSE_HMAC     : constant NvU4 := 16#2#;
    LW_PRGNLCL_SE0_SHA_CRYPTO_KEYTABLE_KEYMANIFEST_PURPOSE_KW       : constant NvU4 := 16#3#;
    LW_PRGNLCL_SE0_SHA_CRYPTO_KEYTABLE_KEYMANIFEST_PURPOSE_KUW      : constant NvU4 := 16#4#;
    LW_PRGNLCL_SE0_SHA_CRYPTO_KEYTABLE_KEYMANIFEST_PURPOSE_KWUW     : constant NvU4 := 16#5#;
    LW_PRGNLCL_SE0_SHA_CRYPTO_KEYTABLE_KEYMANIFEST_PURPOSE_KDK      : constant NvU4 := 16#6#;
    LW_PRGNLCL_SE0_SHA_CRYPTO_KEYTABLE_KEYMANIFEST_PURPOSE_KDD      : constant NvU4 := 16#7#;
    LW_PRGNLCL_SE0_SHA_CRYPTO_KEYTABLE_KEYMANIFEST_PURPOSE_KDD_KUW  : constant NvU4 := 16#8#;
    LW_PRGNLCL_SE0_SHA_CRYPTO_KEYTABLE_KEYMANIFEST_PURPOSE_XTS      : constant NvU4 := 16#9#;
    LW_PRGNLCL_SE0_SHA_CRYPTO_KEYTABLE_KEYMANIFEST_PURPOSE_GCM      : constant NvU4 := 16#a#;
    LW_PRGNLCL_SE0_SHA_CRYPTO_KEYTABLE_KEYMANIFEST_PURPOSE_RESERVED : constant NvU4 := 16#b#;
    LW_PRGNLCL_SE0_SHA_CRYPTO_KEYTABLE_KEYMANIFEST_PURPOSE_INIT     : constant NvU4 := 16#0#;
    LW_PRGNLCL_SE0_SHA_CRYPTO_KEYTABLE_KEYMANIFEST_EX_FALSE         : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_SHA_CRYPTO_KEYTABLE_KEYMANIFEST_EX_TRUE          : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_SHA_CRYPTO_KEYTABLE_KEYMANIFEST_EX_INIT          : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_SHA_CRYPTO_KEYTABLE_KEYMANIFEST_SIZE_KEY128      : constant NvU2 := 16#0#;
    LW_PRGNLCL_SE0_SHA_CRYPTO_KEYTABLE_KEYMANIFEST_SIZE_KEY192      : constant NvU2 := 16#1#;
    LW_PRGNLCL_SE0_SHA_CRYPTO_KEYTABLE_KEYMANIFEST_SIZE_KEY256      : constant NvU2 := 16#2#;
    LW_PRGNLCL_SE0_SHA_CRYPTO_KEYTABLE_KEYMANIFEST_SIZE_RESERVED    : constant NvU2 := 16#3#;
    LW_PRGNLCL_SE0_SHA_CRYPTO_KEYTABLE_KEYMANIFEST_SIZE_INIT        : constant NvU2 := 16#0#;

    type LW_PRGNLCL_SE0_SHA_CRYPTO_KEYTABLE_KEYMANIFEST_Register is record
        Origin  : NvU3;
        User    : NvU3;
        Purpose : NvU4;
        Ex      : NvU1;
        Size    : NvU2;
        Sw      : NvU16;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SE0_SHA_CRYPTO_KEYTABLE_KEYMANIFEST_Register use record
        Origin  at 0 range  0 ..  2;
        User    at 0 range  4 ..  6;
        Purpose at 0 range  8 .. 11;
        Ex      at 0 range 12 .. 12;
        Size    at 0 range 14 .. 15;
        Sw      at 0 range 16 .. 31;
    end record;

    LW_PRGNLCL_SE0_SHA_CRYPTO_KEYTABLE_CTRL_LOCK_FALSE : constant NvU1 := 16#0#;
    LW_PRGNLCL_SE0_SHA_CRYPTO_KEYTABLE_CTRL_LOCK_TRUE  : constant NvU1 := 16#1#;
    LW_PRGNLCL_SE0_SHA_CRYPTO_KEYTABLE_CTRL_LOCK_INIT  : constant NvU1 := 16#0#;

    type LW_PRGNLCL_SE0_SHA_CRYPTO_KEYTABLE_CTRL_Register is record
        Lock : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SE0_SHA_CRYPTO_KEYTABLE_CTRL_Register use record
        Lock at 0 range 0 .. 0;
    end record;

    LW_PRGNLCL_SE0_SHA_CRYPTO_CONFIG_KEY2_INDEX_INIT : constant NvU4 := 16#0#;
    LW_PRGNLCL_SE0_SHA_CRYPTO_CONFIG_KEY_INDEX_INIT  : constant NvU4 := 16#0#;

    type LW_PRGNLCL_SE0_SHA_CRYPTO_CONFIG_Register is record
        Key2_Index : NvU4;
        Key_Index  : NvU4;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SE0_SHA_CRYPTO_CONFIG_Register use record
        Key2_Index at 0 range 28 .. 31;
        Key_Index  at 0 range 24 .. 27;
    end record;

    LW_PRGNLCL_SE0_SHA_CRYPTO_KEYTABLE_DST_KEY_INDEX_INIT : constant NvU4 := 16#0#;

    type LW_PRGNLCL_SE0_SHA_CRYPTO_KEYTABLE_DST_Register is record
        Key_Index : NvU4;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SE0_SHA_CRYPTO_KEYTABLE_DST_Register use record
        Key_Index at 0 range 8 .. 11;
    end record;

    LW_PRGNLCL_SE0_SHA_HASH_LENGTH_VAL_INIT : constant NvU24 := 16#0#;

    type LW_PRGNLCL_SE0_SHA_HASH_LENGTH_Register is record
        Val : NvU24;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SE0_SHA_HASH_LENGTH_Register use record
        Val at 0 range 2 .. 25;
    end record;

    LW_PRGNLCL_SE0_SHA_HASH_RESULT_VAL_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_SE0_SHA_HASH_RESULT_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SE0_SHA_HASH_RESULT_Register use record
        Val at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_KEY_MOVER_CONFIG_SRCOFFSET_INIT  : constant NvU8 := 16#0#;
    LW_PRGNLCL_KEY_MOVER_CONFIG_SOURCE_RSVD     : constant NvU3 := 16#0#;
    LW_PRGNLCL_KEY_MOVER_CONFIG_SOURCE_RTL_KEYS : constant NvU3 := 16#1#;
    LW_PRGNLCL_KEY_MOVER_CONFIG_SOURCE_PSC_FUSE : constant NvU3 := 16#2#;
    LW_PRGNLCL_KEY_MOVER_CONFIG_SOURCE_PSC_SE   : constant NvU3 := 16#3#;
    LW_PRGNLCL_KEY_MOVER_CONFIG_SOURCE_TZ_SE    : constant NvU3 := 16#4#;
    LW_PRGNLCL_KEY_MOVER_CONFIG_SOURCE_GP_SE    : constant NvU3 := 16#5#;
    LW_PRGNLCL_KEY_MOVER_CONFIG_SOURCE_FSI_SE   : constant NvU3 := 16#6#;
    LW_PRGNLCL_KEY_MOVER_CONFIG_SOURCE_INIT     : constant NvU3 := 16#0#;
    LW_PRGNLCL_KEY_MOVER_CONFIG_TARGET_RSVD     : constant NvU3 := 16#0#;
    LW_PRGNLCL_KEY_MOVER_CONFIG_TARGET_PSC_SE   : constant NvU3 := 16#1#;
    LW_PRGNLCL_KEY_MOVER_CONFIG_TARGET_TZ_SE    : constant NvU3 := 16#2#;
    LW_PRGNLCL_KEY_MOVER_CONFIG_TARGET_GP_SE    : constant NvU3 := 16#3#;
    LW_PRGNLCL_KEY_MOVER_CONFIG_TARGET_FSI_SE   : constant NvU3 := 16#4#;
    LW_PRGNLCL_KEY_MOVER_CONFIG_TARGET_INIT     : constant NvU3 := 16#0#;
    LW_PRGNLCL_KEY_MOVER_CONFIG_SIZE_SZ_RSVD    : constant NvU2 := 16#0#;
    LW_PRGNLCL_KEY_MOVER_CONFIG_SIZE_SZ_128b    : constant NvU2 := 16#1#;
    LW_PRGNLCL_KEY_MOVER_CONFIG_SIZE_SZ_192b    : constant NvU2 := 16#2#;
    LW_PRGNLCL_KEY_MOVER_CONFIG_SIZE_SZ_256b    : constant NvU2 := 16#3#;
    LW_PRGNLCL_KEY_MOVER_CONFIG_SIZE_INIT       : constant NvU2 := 16#0#;

    type LW_PRGNLCL_KEY_MOVER_CONFIG_Register is record
        Srcoffset : NvU8;
        Source    : NvU3;
        Target    : NvU3;
        Size      : NvU2;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_KEY_MOVER_CONFIG_Register use record
        Srcoffset at 0 range  0 ..  7;
        Source    at 0 range  8 .. 10;
        Target    at 0 range 16 .. 18;
        Size      at 0 range 24 .. 25;
    end record;

    type LW_PRGNLCL_KEY_MOVER_OPERATION_Register is record
        Start : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_KEY_MOVER_OPERATION_Register use record
        Start at 0 range 0 .. 0;
    end record;

    LW_PRGNLCL_KEY_MOVER_STATUS_DONE_INIT           : constant NvU1 := 16#0#;
    LW_PRGNLCL_KEY_MOVER_STATUS_ERR_CLIENT_SRC_INIT : constant NvU1 := 16#0#;
    LW_PRGNLCL_KEY_MOVER_STATUS_ERR_CLIENT_TGT_INIT : constant NvU1 := 16#0#;
    LW_PRGNLCL_KEY_MOVER_STATUS_ERR_CONFIG_INIT     : constant NvU1 := 16#0#;
    LW_PRGNLCL_KEY_MOVER_STATUS_ERR_KAC_INIT        : constant NvU1 := 16#0#;
    LW_PRGNLCL_KEY_MOVER_STATUS_ERR_TIMEOUT_INIT    : constant NvU1 := 16#0#;

    type LW_PRGNLCL_KEY_MOVER_STATUS_Register is record
        Done           : NvU1;
        Err_Client_Src : NvU1;
        Err_Client_Tgt : NvU1;
        Err_Config     : NvU1;
        Err_Kac        : NvU1;
        Err_Timeout    : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_KEY_MOVER_STATUS_Register use record
        Done           at 0 range  0 ..  0;
        Err_Client_Src at 0 range  8 ..  8;
        Err_Client_Tgt at 0 range  9 ..  9;
        Err_Config     at 0 range 10 .. 10;
        Err_Kac        at 0 range 11 .. 11;
        Err_Timeout    at 0 range 12 .. 12;
    end record;

    LW_PRGNLCL_KEY_MOVER_INTR_EN_DONE_EN_INIT           : constant NvU1 := 16#0#;
    LW_PRGNLCL_KEY_MOVER_INTR_EN_ERR_CLIENT_SRC_EN_INIT : constant NvU1 := 16#0#;
    LW_PRGNLCL_KEY_MOVER_INTR_EN_ERR_CLIENT_TGT_EN_INIT : constant NvU1 := 16#0#;
    LW_PRGNLCL_KEY_MOVER_INTR_EN_ERR_CONFIG_EN_INIT     : constant NvU1 := 16#0#;
    LW_PRGNLCL_KEY_MOVER_INTR_EN_ERR_KAC_EN_INIT        : constant NvU1 := 16#0#;
    LW_PRGNLCL_KEY_MOVER_INTR_EN_ERR_TIMEOUT_EN_INIT    : constant NvU1 := 16#0#;

    type LW_PRGNLCL_KEY_MOVER_INTR_EN_Register is record
        Done_En           : NvU1;
        Err_Client_Src_En : NvU1;
        Err_Client_Tgt_En : NvU1;
        Err_Config_En     : NvU1;
        Err_Kac_En        : NvU1;
        Err_Timeout_En    : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_KEY_MOVER_INTR_EN_Register use record
        Done_En           at 0 range  0 ..  0;
        Err_Client_Src_En at 0 range  8 ..  8;
        Err_Client_Tgt_En at 0 range  9 ..  9;
        Err_Config_En     at 0 range 10 .. 10;
        Err_Kac_En        at 0 range 11 .. 11;
        Err_Timeout_En    at 0 range 12 .. 12;
    end record;

    LW_PRGNLCL_KEY_MOVER_KEY_MOVER_TIMEOUT_TIMEOUT_VAL_INIT : constant NvU31 := 16#2_49f0#;
    LW_PRGNLCL_KEY_MOVER_KEY_MOVER_TIMEOUT_EN_TIMEOUT_INIT  : constant NvU1  := 16#1#;

    type LW_PRGNLCL_KEY_MOVER_KEY_MOVER_TIMEOUT_Register is record
        Timeout_Val : NvU31;
        En_Timeout  : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_KEY_MOVER_KEY_MOVER_TIMEOUT_Register use record
        Timeout_Val at 0 range  0 .. 30;
        En_Timeout  at 0 range 31 .. 31;
    end record;

    LW_PRGNLCL_KEYSTORE_FUSE_STATUS_SENSED_INIT                              : constant NvU1 := 16#0#;
    LW_PRGNLCL_KEYSTORE_FUSE_STATUS_LW_INTEGRITY_CHECK_ERR_INT_CHECK_PASSED  : constant NvU1 := 16#0#;
    LW_PRGNLCL_KEYSTORE_FUSE_STATUS_LW_INTEGRITY_CHECK_ERR_INT_CHECK_FAILED  : constant NvU1 := 16#1#;
    LW_PRGNLCL_KEYSTORE_FUSE_STATUS_LW_INTEGRITY_CHECK_ERR_INIT              : constant NvU1 := 16#0#;
    LW_PRGNLCL_KEYSTORE_FUSE_STATUS_OEM_INTEGRITY_CHECK_ERR_INT_CHECK_PASSED : constant NvU1 := 16#0#;
    LW_PRGNLCL_KEYSTORE_FUSE_STATUS_OEM_INTEGRITY_CHECK_ERR_INT_CHECK_FAILED : constant NvU1 := 16#1#;
    LW_PRGNLCL_KEYSTORE_FUSE_STATUS_OEM_INTEGRITY_CHECK_ERR_INIT             : constant NvU1 := 16#0#;
    LW_PRGNLCL_KEYSTORE_FUSE_STATUS_FUSE_RD_ERR_NO_ERROR                     : constant NvU1 := 16#0#;
    LW_PRGNLCL_KEYSTORE_FUSE_STATUS_FUSE_RD_ERR_ERROR                        : constant NvU1 := 16#1#;
    LW_PRGNLCL_KEYSTORE_FUSE_STATUS_FUSE_RD_ERR_INIT                         : constant NvU1 := 16#0#;

    type LW_PRGNLCL_KEYSTORE_FUSE_STATUS_Register is record
        Sensed                  : NvU1;
        Nv_Integrity_Check_Err  : NvU1;
        Oem_Integrity_Check_Err : NvU1;
        Fuse_Rd_Err             : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_KEYSTORE_FUSE_STATUS_Register use record
        Sensed                  at 0 range  0 ..  0;
        Nv_Integrity_Check_Err  at 0 range  8 ..  8;
        Oem_Integrity_Check_Err at 0 range  9 ..  9;
        Fuse_Rd_Err             at 0 range 10 .. 10;
    end record;

    type LW_PRGNLCL_KEYSTORE_FUSE_DEV_KEY_STATUS_Register is record
        Nv_Dev_Keys_In_Use  : NvU1;
        Oem_Dev_Keys_In_Use : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_KEYSTORE_FUSE_DEV_KEY_STATUS_Register use record
        Nv_Dev_Keys_In_Use  at 0 range 0 .. 0;
        Oem_Dev_Keys_In_Use at 0 range 4 .. 4;
    end record;

    LW_PRGNLCL_KEYSTORE_FUSE_CONTROL_DISABLE_SW_ACCESS_INIT : constant NvU1 := 16#0#;
    LW_PRGNLCL_KEYSTORE_FUSE_CONTROL_LOCK_SW_ACCESS_INIT    : constant NvU1 := 16#0#;
    LW_PRGNLCL_KEYSTORE_FUSE_CONTROL_DISABLE_KM_ACCESS_INIT : constant NvU1 := 16#0#;
    LW_PRGNLCL_KEYSTORE_FUSE_CONTROL_LOCK_KM_ACCESS_INIT    : constant NvU1 := 16#0#;

    type LW_PRGNLCL_KEYSTORE_FUSE_CONTROL_Register is record
        Disable_Sw_Access : NvU1;
        Lock_Sw_Access    : NvU1;
        Disable_Km_Access : NvU1;
        Lock_Km_Access    : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_KEYSTORE_FUSE_CONTROL_Register use record
        Disable_Sw_Access at 0 range 0 .. 0;
        Lock_Sw_Access    at 0 range 1 .. 1;
        Disable_Km_Access at 0 range 8 .. 8;
        Lock_Km_Access    at 0 range 9 .. 9;
    end record;

    LW_PRGNLCL_KEYSTORE_FUSE_ACCESS_INDEX_INDEX_INIT : constant NvU16 := 16#0#;

    type LW_PRGNLCL_KEYSTORE_FUSE_ACCESS_INDEX_Register is record
        Index : NvU16;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_KEYSTORE_FUSE_ACCESS_INDEX_Register use record
        Index at 0 range 0 .. 15;
    end record;

    LW_PRGNLCL_KEYSTORE_FUSE_ACCESS_STATUS_ACCESS_DONE_INIT : constant NvU1 := 16#0#;
    LW_PRGNLCL_KEYSTORE_FUSE_ACCESS_STATUS_VALUE_VALID_INIT : constant NvU1 := 16#0#;

    type LW_PRGNLCL_KEYSTORE_FUSE_ACCESS_STATUS_Register is record
        Access_Done : NvU1;
        Value_Valid : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_KEYSTORE_FUSE_ACCESS_STATUS_Register use record
        Access_Done at 0 range 0 .. 0;
        Value_Valid at 0 range 4 .. 4;
    end record;

    type LW_PRGNLCL_KEYSTORE_FUSE_ACCESS_VALUE_Register is record
        Data : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_KEYSTORE_FUSE_ACCESS_VALUE_Register use record
        Data at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_KEYSTORE_KROM_DEV_KEY_STATUS_DEV_KEYS_IN_USE_INIT : constant NvU1 := 16#0#;

    type LW_PRGNLCL_KEYSTORE_KROM_DEV_KEY_STATUS_Register is record
        Dev_Keys_In_Use : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_KEYSTORE_KROM_DEV_KEY_STATUS_Register use record
        Dev_Keys_In_Use at 0 range 0 .. 0;
    end record;

    LW_PRGNLCL_KEYSTORE_KROM_CONTROL_DISABLE_SW_ACCESS_INIT : constant NvU1 := 16#0#;
    LW_PRGNLCL_KEYSTORE_KROM_CONTROL_LOCK_SW_ACCESS_INIT    : constant NvU1 := 16#0#;

    type LW_PRGNLCL_KEYSTORE_KROM_CONTROL_Register is record
        Disable_Sw_Access : NvU1;
        Lock_Sw_Access    : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_KEYSTORE_KROM_CONTROL_Register use record
        Disable_Sw_Access at 0 range 0 .. 0;
        Lock_Sw_Access    at 0 range 1 .. 1;
    end record;

    LW_PRGNLCL_KEYSTORE_KROM_ACCESS_INDEX_INDEX_INIT : constant NvU16 := 16#0#;

    type LW_PRGNLCL_KEYSTORE_KROM_ACCESS_INDEX_Register is record
        Index : NvU16;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_KEYSTORE_KROM_ACCESS_INDEX_Register use record
        Index at 0 range 0 .. 15;
    end record;

    LW_PRGNLCL_KEYSTORE_KROM_ACCESS_STATUS_ACCESS_DONE_INIT : constant NvU1 := 16#0#;
    LW_PRGNLCL_KEYSTORE_KROM_ACCESS_STATUS_VALUE_VALID_INIT : constant NvU1 := 16#0#;

    type LW_PRGNLCL_KEYSTORE_KROM_ACCESS_STATUS_Register is record
        Access_Done : NvU1;
        Value_Valid : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_KEYSTORE_KROM_ACCESS_STATUS_Register use record
        Access_Done at 0 range 0 .. 0;
        Value_Valid at 0 range 4 .. 4;
    end record;

    type LW_PRGNLCL_KEYSTORE_KROM_ACCESS_VALUE_Register is record
        Data : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_KEYSTORE_KROM_ACCESS_VALUE_Register use record
        Data at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_KEYSTORE_RTL_DEV_KEY_STATUS_DEV_KEYS_IN_USE_INIT : constant NvU1 := 16#0#;

    type LW_PRGNLCL_KEYSTORE_RTL_DEV_KEY_STATUS_Register is record
        Dev_Keys_In_Use : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_KEYSTORE_RTL_DEV_KEY_STATUS_Register use record
        Dev_Keys_In_Use at 0 range 0 .. 0;
    end record;

    LW_PRGNLCL_KEYSTORE_RTL_KEYS_CONTROL_DISABLE_KM_ACCESS_INIT : constant NvU1 := 16#0#;
    LW_PRGNLCL_KEYSTORE_RTL_KEYS_CONTROL_LOCK_KM_ACCESS_INIT    : constant NvU1 := 16#0#;

    type LW_PRGNLCL_KEYSTORE_RTL_KEYS_CONTROL_Register is record
        Disable_Km_Access : NvU1;
        Lock_Km_Access    : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_KEYSTORE_RTL_KEYS_CONTROL_Register use record
        Disable_Km_Access at 0 range 0 .. 0;
        Lock_Km_Access    at 0 range 1 .. 1;
    end record;

    LW_PRGNLCL_LWPKA_CTRL_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL  : constant NvU4 := 16#f#;
    LW_PRGNLCL_LWPKA_CTRL_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_LWPKA_CTRL_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    LW_PRGNLCL_LWPKA_CTRL_PRIV_LEVEL_MASK_WRITE_PROTECTION_DEFAULT_PRIV_LEVEL : constant NvU4 := 16#f#;
    type LW_PRGNLCL_LWPKA_CTRL_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_LWPKA_CTRL_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_LWPKA_CTRL_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_LWPKA_CTRL_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_LWPKA_CTRL_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_LWPKA_CTRL_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_LWPKA_CTRL_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_LWPKA_CTRL_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_LWPKA_CTRL_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_LWPKA_CTRL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_LWPKA_CTRL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_LWPKA_CTRL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_LWPKA_CTRL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_LWPKA_CTRL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_LWPKA_CTRL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_LWPKA_CTRL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_LWPKA_CTRL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_LWPKA_CTRL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_LWPKA_CTRL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_LWPKA_CTRL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_LWPKA_CTRL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_LWPKA_CTRL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_LWPKA_CTRL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_LWPKA_CTRL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_LWPKA_CTRL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_LWPKA_CTRL_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_LWPKA_CTRL_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_LWPKA_CTRL_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_LWPKA_CTRL_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_LWPKA_CTRL_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_LWPKA_CTRL_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_LWPKA_CTRL_OPMASK_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL  : constant NvU4 := 16#f#;
    LW_PRGNLCL_LWPKA_CTRL_OPMASK_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_LWPKA_CTRL_OPMASK_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    LW_PRGNLCL_LWPKA_CTRL_OPMASK_PRIV_LEVEL_MASK_WRITE_PROTECTION_DEFAULT_PRIV_LEVEL : constant NvU4 := 16#f#;
    type LW_PRGNLCL_LWPKA_CTRL_OPMASK_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_LWPKA_CTRL_OPMASK_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_LWPKA_CTRL_OPMASK_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_LWPKA_CTRL_OPMASK_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_LWPKA_CTRL_OPMASK_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_LWPKA_CTRL_OPMASK_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_LWPKA_CTRL_OPMASK_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_LWPKA_CTRL_OPMASK_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_LWPKA_CTRL_OPMASK_PRIV_LEVEL_MASK_SOURCE_ENABLE_LOCAL_FALCON_SEC2_ENABLED_FUSE0 : constant NvU20 := 16#8_0004#;
    LW_PRGNLCL_LWPKA_CTRL_OPMASK_PRIV_LEVEL_MASK_SOURCE_ENABLE_LOCAL_FALCON_GSP_ENABLED_FUSE1  : constant NvU20 := 16#8_0008#;
    LW_PRGNLCL_LWPKA_CTRL_OPMASK_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE                 : constant       := 16#1#;
    LW_PRGNLCL_LWPKA_CTRL_OPMASK_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE                : constant       := 16#0#;
    LW_PRGNLCL_LWPKA_CTRL_OPMASK_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE                 : constant       := 16#1#;
    LW_PRGNLCL_LWPKA_CTRL_OPMASK_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE                : constant       := 16#0#;
    LW_PRGNLCL_LWPKA_CTRL_OPMASK_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE                 : constant       := 16#1#;
    LW_PRGNLCL_LWPKA_CTRL_OPMASK_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE                : constant       := 16#0#;
    LW_PRGNLCL_LWPKA_CTRL_OPMASK_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE                 : constant       := 16#1#;
    LW_PRGNLCL_LWPKA_CTRL_OPMASK_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE                : constant       := 16#0#;
    LW_PRGNLCL_LWPKA_CTRL_OPMASK_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE                : constant       := 16#1#;
    LW_PRGNLCL_LWPKA_CTRL_OPMASK_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE               : constant       := 16#0#;
    LW_PRGNLCL_LWPKA_CTRL_OPMASK_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE                : constant       := 16#1#;
    LW_PRGNLCL_LWPKA_CTRL_OPMASK_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE               : constant       := 16#0#;
    LW_PRGNLCL_LWPKA_CTRL_OPMASK_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE                : constant       := 16#1#;
    LW_PRGNLCL_LWPKA_CTRL_OPMASK_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE               : constant       := 16#0#;
    LW_PRGNLCL_LWPKA_CTRL_OPMASK_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE                : constant       := 16#1#;
    LW_PRGNLCL_LWPKA_CTRL_OPMASK_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE               : constant       := 16#0#;

    type LW_PRGNLCL_LWPKA_CTRL_OPMASK_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_LWPKA_CTRL_OPMASK_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_LWPKA_CTRL_OPMASK_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_LWPKA_CTRL_OPMASK_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_LWPKA_CTRL_OPMASK_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_LWPKA_CTRL_OPMASK_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    type LW_PRGNLCL_LWPKA_CTRL_RESET_SOFT_RESET_Field is (RESET_DONE, RESET_TRIGGER) with
        Size => 1;
    for LW_PRGNLCL_LWPKA_CTRL_RESET_SOFT_RESET_Field use (RESET_DONE => 16#0#, RESET_TRIGGER => 16#1#);

    type LW_PRGNLCL_LWPKA_CTRL_RESET_Register is record
        Soft_Reset : LW_PRGNLCL_LWPKA_CTRL_RESET_SOFT_RESET_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_LWPKA_CTRL_RESET_Register use record
        Soft_Reset at 0 range 1 .. 1;
    end record;

    type LW_PRGNLCL_LWPKA_CTRL_KSLT_CONTROL_SCRUB_CORE_MEM_Field is (MEM_DISABLE, MEM_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_LWPKA_CTRL_KSLT_CONTROL_SCRUB_CORE_MEM_Field use (MEM_DISABLE => 16#0#, MEM_ENABLE => 16#1#);
    LW_PRGNLCL_LWPKA_CTRL_KSLT_CONTROL_KEYSLOT_0 : constant NvU4 := 16#0#;
    LW_PRGNLCL_LWPKA_CTRL_KSLT_CONTROL_KEYSLOT_1 : constant NvU4 := 16#1#;
    LW_PRGNLCL_LWPKA_CTRL_KSLT_CONTROL_KEYSLOT_2 : constant NvU4 := 16#2#;
    LW_PRGNLCL_LWPKA_CTRL_KSLT_CONTROL_KEYSLOT_3 : constant NvU4 := 16#3#;

    type LW_PRGNLCL_LWPKA_CTRL_KSLT_CONTROL_Register is record
        Scrub_Core_Mem : LW_PRGNLCL_LWPKA_CTRL_KSLT_CONTROL_SCRUB_CORE_MEM_Field;
        Keyslot        : NvU4;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_LWPKA_CTRL_KSLT_CONTROL_Register use record
        Scrub_Core_Mem at 0 range  3 ..  3;
        Keyslot        at 0 range 16 .. 19;
    end record;

    LW_PRGNLCL_LWPKA_CTRL_CORE_CONTROL_PRIMITIVE_NOP            : constant NvU8 := 16#0#;
    LW_PRGNLCL_LWPKA_CTRL_CORE_CONTROL_PRIMITIVE_MULT           : constant NvU8 := 16#1#;
    LW_PRGNLCL_LWPKA_CTRL_CORE_CONTROL_PRIMITIVE_MOD_MULT       : constant NvU8 := 16#2#;
    LW_PRGNLCL_LWPKA_CTRL_CORE_CONTROL_PRIMITIVE_MOD_ADD        : constant NvU8 := 16#3#;
    LW_PRGNLCL_LWPKA_CTRL_CORE_CONTROL_PRIMITIVE_MOD_SUB        : constant NvU8 := 16#4#;
    LW_PRGNLCL_LWPKA_CTRL_CORE_CONTROL_PRIMITIVE_MOD_INV        : constant NvU8 := 16#5#;
    LW_PRGNLCL_LWPKA_CTRL_CORE_CONTROL_PRIMITIVE_MOD_DIV        : constant NvU8 := 16#6#;
    LW_PRGNLCL_LWPKA_CTRL_CORE_CONTROL_PRIMITIVE_MOD_RED        : constant NvU8 := 16#7#;
    LW_PRGNLCL_LWPKA_CTRL_CORE_CONTROL_PRIMITIVE_MOD_EXP        : constant NvU8 := 16#8#;
    LW_PRGNLCL_LWPKA_CTRL_CORE_CONTROL_PRIMITIVE_POT_VER        : constant NvU8 := 16#9#;
    LW_PRGNLCL_LWPKA_CTRL_CORE_CONTROL_PRIMITIVE_POT_MULT       : constant NvU8 := 16#a#;
    LW_PRGNLCL_LWPKA_CTRL_CORE_CONTROL_PRIMITIVE_SHAMIR         : constant NvU8 := 16#b#;
    LW_PRGNLCL_LWPKA_CTRL_CORE_CONTROL_PRIMITIVE_MG_MULT        : constant NvU8 := 16#c#;
    LW_PRGNLCL_LWPKA_CTRL_CORE_CONTROL_PRIMITIVE_ED_VER         : constant NvU8 := 16#d#;
    LW_PRGNLCL_LWPKA_CTRL_CORE_CONTROL_PRIMITIVE_ED_MULT        : constant NvU8 := 16#e#;
    LW_PRGNLCL_LWPKA_CTRL_CORE_CONTROL_PRIMITIVE_ED_SHAMIR      : constant NvU8 := 16#f#;
    LW_PRGNLCL_LWPKA_CTRL_CORE_CONTROL_PRIMITIVE_ECC_KEYINS_PRI : constant NvU8 := 16#10#;
    LW_PRGNLCL_LWPKA_CTRL_CORE_CONTROL_PRIMITIVE_ECC_KEYGEN_PRI : constant NvU8 := 16#11#;
    LW_PRGNLCL_LWPKA_CTRL_CORE_CONTROL_PRIMITIVE_ECC_KEYGEN_PUB : constant NvU8 := 16#12#;
    LW_PRGNLCL_LWPKA_CTRL_CORE_CONTROL_PRIMITIVE_ECC_KEYDISP    : constant NvU8 := 16#13#;
    LW_PRGNLCL_LWPKA_CTRL_CORE_CONTROL_RADIX_DISABLE            : constant NvU8 := 16#0#;
    LW_PRGNLCL_LWPKA_CTRL_CORE_CONTROL_RADIX_256                : constant NvU8 := 16#8#;
    LW_PRGNLCL_LWPKA_CTRL_CORE_CONTROL_RADIX_448                : constant NvU8 := 16#e#;
    LW_PRGNLCL_LWPKA_CTRL_CORE_CONTROL_RADIX_512                : constant NvU8 := 16#10#;
    LW_PRGNLCL_LWPKA_CTRL_CORE_CONTROL_RADIX_544                : constant NvU8 := 16#11#;
    LW_PRGNLCL_LWPKA_CTRL_CORE_CONTROL_RADIX_1024               : constant NvU8 := 16#20#;
    LW_PRGNLCL_LWPKA_CTRL_CORE_CONTROL_RADIX_1536               : constant NvU8 := 16#30#;
    LW_PRGNLCL_LWPKA_CTRL_CORE_CONTROL_RADIX_2048               : constant NvU8 := 16#40#;
    LW_PRGNLCL_LWPKA_CTRL_CORE_CONTROL_RADIX_3072               : constant NvU8 := 16#60#;
    LW_PRGNLCL_LWPKA_CTRL_CORE_CONTROL_RADIX_4096               : constant NvU8 := 16#80#;
    type LW_PRGNLCL_LWPKA_CTRL_CORE_CONTROL_START_Field is (START_UNSET, START_SET) with
        Size => 1;
    for LW_PRGNLCL_LWPKA_CTRL_CORE_CONTROL_START_Field use (START_UNSET => 16#0#, START_SET => 16#1#);

    type LW_PRGNLCL_LWPKA_CTRL_CORE_CONTROL_Register is record
        Primitive : NvU8;
        Radix     : NvU8;
        Start     : LW_PRGNLCL_LWPKA_CTRL_CORE_CONTROL_START_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_LWPKA_CTRL_CORE_CONTROL_Register use record
        Primitive at 0 range  8 .. 15;
        Radix     at 0 range 16 .. 23;
        Start     at 0 range 31 .. 31;
    end record;

    type LW_PRGNLCL_LWPKA_CTRL_STATUS_PKA_STATUS_Field is (STATUS_IDLE, STATUS_BUSY) with
        Size => 1;
    for LW_PRGNLCL_LWPKA_CTRL_STATUS_PKA_STATUS_Field use (STATUS_IDLE => 16#0#, STATUS_BUSY => 16#1#);
    type LW_PRGNLCL_LWPKA_CTRL_STATUS_CORE_STATUS_Field is (STATUS_IDLE, STATUS_BUSY) with
        Size => 1;
    for LW_PRGNLCL_LWPKA_CTRL_STATUS_CORE_STATUS_Field use (STATUS_IDLE => 16#0#, STATUS_BUSY => 16#1#);
    type LW_PRGNLCL_LWPKA_CTRL_STATUS_CTRL_STATUS_Field is (STATUS_IDLE, STATUS_LOAD, STATUS_WAIT, STATUS_SCRUB) with
        Size => 2;
    for LW_PRGNLCL_LWPKA_CTRL_STATUS_CTRL_STATUS_Field use (STATUS_IDLE => 16#0#, STATUS_LOAD => 16#1#, STATUS_WAIT => 16#2#, STATUS_SCRUB => 16#3#);
    LW_PRGNLCL_LWPKA_CTRL_STATUS_SCRUB_STATUS_IDLE                : constant NvU4 := 16#0#;
    LW_PRGNLCL_LWPKA_CTRL_STATUS_SCRUB_STATUS_KEY_AUTO_LOAD_SCRUB : constant NvU4 := 16#1#;
    LW_PRGNLCL_LWPKA_CTRL_STATUS_SCRUB_STATUS_MUTEX_RELEASE_SCRUB : constant NvU4 := 16#2#;
    LW_PRGNLCL_LWPKA_CTRL_STATUS_SCRUB_STATUS_REG_TRIGGER_SCRUB   : constant NvU4 := 16#3#;
    LW_PRGNLCL_LWPKA_CTRL_STATUS_SCRUB_STATUS_SOFT_RESET_SCRUB    : constant NvU4 := 16#4#;
    type LW_PRGNLCL_LWPKA_CTRL_STATUS_DMEM1_PARITY_ERR_Field is (ERR_UNSET, ERR_SET) with
        Size => 1;
    for LW_PRGNLCL_LWPKA_CTRL_STATUS_DMEM1_PARITY_ERR_Field use (ERR_UNSET => 16#0#, ERR_SET => 16#1#);
    type LW_PRGNLCL_LWPKA_CTRL_STATUS_DMEM2_PARITY_ERR_Field is (ERR_UNSET, ERR_SET) with
        Size => 1;
    for LW_PRGNLCL_LWPKA_CTRL_STATUS_DMEM2_PARITY_ERR_Field use (ERR_UNSET => 16#0#, ERR_SET => 16#1#);
    type LW_PRGNLCL_LWPKA_CTRL_STATUS_KSLT_ECC_SEC_Field is (SEC_UNSET, SEC_SET) with
        Size => 1;
    for LW_PRGNLCL_LWPKA_CTRL_STATUS_KSLT_ECC_SEC_Field use (SEC_UNSET => 16#0#, SEC_SET => 16#1#);
    type LW_PRGNLCL_LWPKA_CTRL_STATUS_KSLT_ECC_DED_Field is (DED_UNSET, DED_SET) with
        Size => 1;
    for LW_PRGNLCL_LWPKA_CTRL_STATUS_KSLT_ECC_DED_Field use (DED_UNSET => 16#0#, DED_SET => 16#1#);
    type LW_PRGNLCL_LWPKA_CTRL_STATUS_ECC_KS_PARITY_ERR_Field is (ERR_UNSET, ERR_SET) with
        Size => 1;
    for LW_PRGNLCL_LWPKA_CTRL_STATUS_ECC_KS_PARITY_ERR_Field use (ERR_UNSET => 16#0#, ERR_SET => 16#1#);
    type LW_PRGNLCL_LWPKA_CTRL_STATUS_CG_STATUS_Field is (STATUS_IDLE, STATUS_BUSY) with
        Size => 1;
    for LW_PRGNLCL_LWPKA_CTRL_STATUS_CG_STATUS_Field use (STATUS_IDLE => 16#0#, STATUS_BUSY => 16#1#);

    type LW_PRGNLCL_LWPKA_CTRL_STATUS_Register is record
        Pka_Status        : LW_PRGNLCL_LWPKA_CTRL_STATUS_PKA_STATUS_Field;
        Core_Status       : LW_PRGNLCL_LWPKA_CTRL_STATUS_CORE_STATUS_Field;
        Ctrl_Status       : LW_PRGNLCL_LWPKA_CTRL_STATUS_CTRL_STATUS_Field;
        Scrub_Status      : NvU4;
        Dmem1_Parity_Err  : LW_PRGNLCL_LWPKA_CTRL_STATUS_DMEM1_PARITY_ERR_Field;
        Dmem2_Parity_Err  : LW_PRGNLCL_LWPKA_CTRL_STATUS_DMEM2_PARITY_ERR_Field;
        Kslt_Ecc_Sec      : LW_PRGNLCL_LWPKA_CTRL_STATUS_KSLT_ECC_SEC_Field;
        Kslt_Ecc_Ded      : LW_PRGNLCL_LWPKA_CTRL_STATUS_KSLT_ECC_DED_Field;
        Ecc_Ks_Parity_Err : LW_PRGNLCL_LWPKA_CTRL_STATUS_ECC_KS_PARITY_ERR_Field;
        Cg_Status         : LW_PRGNLCL_LWPKA_CTRL_STATUS_CG_STATUS_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_LWPKA_CTRL_STATUS_Register use record
        Pka_Status        at 0 range  0 ..  0;
        Core_Status       at 0 range  1 ..  1;
        Ctrl_Status       at 0 range  4 ..  5;
        Scrub_Status      at 0 range  8 .. 11;
        Dmem1_Parity_Err  at 0 range 24 .. 24;
        Dmem2_Parity_Err  at 0 range 25 .. 25;
        Kslt_Ecc_Sec      at 0 range 26 .. 26;
        Kslt_Ecc_Ded      at 0 range 27 .. 27;
        Ecc_Ks_Parity_Err at 0 range 28 .. 28;
        Cg_Status         at 0 range 31 .. 31;
    end record;

    LW_PRGNLCL_LWPKA_CTRL_MUTEX_PKA_LOCK_RELEASE   : constant NvU1  := 16#1#;
    LW_PRGNLCL_LWPKA_CTRL_MUTEX_RC_REASON_MASTER_1 : constant NvU12 := 16#1#;
    LW_PRGNLCL_LWPKA_CTRL_MUTEX_RC_REASON_MASTER_2 : constant NvU12 := 16#2#;
    LW_PRGNLCL_LWPKA_CTRL_MUTEX_RC_REASON_MASTER_3 : constant NvU12 := 16#3#;
    LW_PRGNLCL_LWPKA_CTRL_MUTEX_RC_REASON_MASTER_4 : constant NvU12 := 16#4#;
    LW_PRGNLCL_LWPKA_CTRL_MUTEX_RC_REASON_MASTER_5 : constant NvU12 := 16#5#;
    LW_PRGNLCL_LWPKA_CTRL_MUTEX_RC_REASON_MASTER_6 : constant NvU12 := 16#6#;
    LW_PRGNLCL_LWPKA_CTRL_MUTEX_RC_REASON_LEVEL_0  : constant NvU12 := 16#0#;
    LW_PRGNLCL_LWPKA_CTRL_MUTEX_RC_REASON_LEVEL_1  : constant NvU12 := 16#1#;
    LW_PRGNLCL_LWPKA_CTRL_MUTEX_RC_REASON_LEVEL_2  : constant NvU12 := 16#2#;
    LW_PRGNLCL_LWPKA_CTRL_MUTEX_RC_REASON_LEVEL_3  : constant NvU12 := 16#3#;
    LW_PRGNLCL_LWPKA_CTRL_MUTEX_RC_SUCCESS         : constant       := 16#1#;
    LW_PRGNLCL_LWPKA_CTRL_MUTEX_RC_FAIL_BUSY       : constant       := 16#0#;

    type LW_PRGNLCL_LWPKA_CTRL_MUTEX_Register is record
        Pka_Lock  : NvU1;
        Rc_Reason : NvU12;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_LWPKA_CTRL_MUTEX_Register use record
        Pka_Lock  at 0 range  0 ..  0;
        Rc_Reason at 0 range 20 .. 31;
    end record;

    LW_PRGNLCL_LWPKA_CTRL_MUTEX_RELEASE_PKA_LOCK_RELEASE : constant NvU1 := 16#1#;

    type LW_PRGNLCL_LWPKA_CTRL_MUTEX_RELEASE_Register is record
        Pka_Lock : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_LWPKA_CTRL_MUTEX_RELEASE_Register use record
        Pka_Lock at 0 range 0 .. 0;
    end record;

    LW_PRGNLCL_LWPKA_CTRL_MUTEX_STATUS_LOCKED_MASTER_NONE : constant NvU8 := 16#0#;
    LW_PRGNLCL_LWPKA_CTRL_MUTEX_STATUS_LOCKED_MASTER_1    : constant NvU8 := 16#1#;
    LW_PRGNLCL_LWPKA_CTRL_MUTEX_STATUS_LOCKED_MASTER_2    : constant NvU8 := 16#2#;
    LW_PRGNLCL_LWPKA_CTRL_MUTEX_STATUS_LOCKED_MASTER_3    : constant NvU8 := 16#3#;
    LW_PRGNLCL_LWPKA_CTRL_MUTEX_STATUS_LOCKED_MASTER_4    : constant NvU8 := 16#4#;
    LW_PRGNLCL_LWPKA_CTRL_MUTEX_STATUS_LOCKED_MASTER_5    : constant NvU8 := 16#5#;
    LW_PRGNLCL_LWPKA_CTRL_MUTEX_STATUS_LOCKED_MASTER_6    : constant NvU8 := 16#6#;
    LW_PRGNLCL_LWPKA_CTRL_MUTEX_STATUS_LOCKED_LEVEL_0     : constant NvU4 := 16#0#;
    LW_PRGNLCL_LWPKA_CTRL_MUTEX_STATUS_LOCKED_LEVEL_1     : constant NvU4 := 16#1#;
    LW_PRGNLCL_LWPKA_CTRL_MUTEX_STATUS_LOCKED_LEVEL_2     : constant NvU4 := 16#2#;
    LW_PRGNLCL_LWPKA_CTRL_MUTEX_STATUS_LOCKED_LEVEL_3     : constant NvU4 := 16#3#;

    type LW_PRGNLCL_LWPKA_CTRL_MUTEX_STATUS_Register is record
        Locked_Master : NvU8;
        Locked_Level  : NvU4;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_LWPKA_CTRL_MUTEX_STATUS_Register use record
        Locked_Master at 0 range 20 .. 27;
        Locked_Level  at 0 range 28 .. 31;
    end record;

    type LW_PRGNLCL_LWPKA_CTRL_SCC_CONTROL_SCC_EN_Field is (EN_DISABLE, EN_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_LWPKA_CTRL_SCC_CONTROL_SCC_EN_Field use (EN_DISABLE => 16#0#, EN_ENABLE => 16#1#);
    type LW_PRGNLCL_LWPKA_CTRL_SCC_CONTROL_LOCK_Field is (LOCK_DISABLE, LOCK_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_LWPKA_CTRL_SCC_CONTROL_LOCK_Field use (LOCK_DISABLE => 16#0#, LOCK_ENABLE => 16#1#);

    type LW_PRGNLCL_LWPKA_CTRL_SCC_CONTROL_Register is record
        Scc_En : LW_PRGNLCL_LWPKA_CTRL_SCC_CONTROL_SCC_EN_Field;
        Lock   : LW_PRGNLCL_LWPKA_CTRL_SCC_CONTROL_LOCK_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_LWPKA_CTRL_SCC_CONTROL_Register use record
        Scc_En at 0 range  4 ..  4;
        Lock   at 0 range 12 .. 12;
    end record;

    LW_PRGNLCL_LWPKA_CTRL_ERROR_CAPTURE_ERROR_INFO_SUCCESS      : constant NvU8 := 16#0#;
    LW_PRGNLCL_LWPKA_CTRL_ERROR_CAPTURE_ERROR_INFO_LEVEL_VIO_WR : constant NvU8 := 16#f1#;
    LW_PRGNLCL_LWPKA_CTRL_ERROR_CAPTURE_ERROR_INFO_LEVEL_VIO_RD : constant NvU8 := 16#f0#;
    LW_PRGNLCL_LWPKA_CTRL_ERROR_CAPTURE_ERROR_INFO_KAC_VIO_USE  : constant NvU8 := 16#b2#;
    LW_PRGNLCL_LWPKA_CTRL_ERROR_CAPTURE_ERROR_INFO_KAC_VIO_WR   : constant NvU8 := 16#b1#;
    LW_PRGNLCL_LWPKA_CTRL_ERROR_CAPTURE_ERROR_INFO_KAC_VIO_RD   : constant NvU8 := 16#b0#;
    LW_PRGNLCL_LWPKA_CTRL_ERROR_CAPTURE_ERROR_INFO_DEBUG_VIO_WR : constant NvU8 := 16#a1#;
    LW_PRGNLCL_LWPKA_CTRL_ERROR_CAPTURE_ERROR_INFO_DEBUG_VIO_RD : constant NvU8 := 16#a0#;
    LW_PRGNLCL_LWPKA_CTRL_ERROR_CAPTURE_ERROR_INFO_BUSY_VIO_WR  : constant NvU8 := 16#91#;
    LW_PRGNLCL_LWPKA_CTRL_ERROR_CAPTURE_ERROR_INFO_BUSY_VIO_RD  : constant NvU8 := 16#90#;
    LW_PRGNLCL_LWPKA_CTRL_ERROR_CAPTURE_ERROR_INFO_MUTEX_VIO_WR : constant NvU8 := 16#81#;
    LW_PRGNLCL_LWPKA_CTRL_ERROR_CAPTURE_ERROR_INFO_MUTEX_VIO_RD : constant NvU8 := 16#80#;
    type LW_PRGNLCL_LWPKA_CTRL_ERROR_CAPTURE_ERROR_BIT_Field is (BIT_UNSET, BIT_SET) with
        Size => 1;
    for LW_PRGNLCL_LWPKA_CTRL_ERROR_CAPTURE_ERROR_BIT_Field use (BIT_UNSET => 16#0#, BIT_SET => 16#1#);

    type LW_PRGNLCL_LWPKA_CTRL_ERROR_CAPTURE_Register is record
        Error_Info : NvU8;
        Error_Bit  : LW_PRGNLCL_LWPKA_CTRL_ERROR_CAPTURE_ERROR_BIT_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_LWPKA_CTRL_ERROR_CAPTURE_Register use record
        Error_Info at 0 range  0 ..  7;
        Error_Bit  at 0 range 31 .. 31;
    end record;

    type LW_PRGNLCL_LWPKA_CTRL_CG_CLK_OVR_ON_Field is (ON_DISABLE_SLCG, ON_ENABLE_SLCG) with
        Size => 1;
    for LW_PRGNLCL_LWPKA_CTRL_CG_CLK_OVR_ON_Field use (ON_DISABLE_SLCG => 16#0#, ON_ENABLE_SLCG => 16#1#);
    type LW_PRGNLCL_LWPKA_CTRL_CG_ITF_OVR_ON_Field is (ON_DISABLE_SLCG, ON_ENABLE_SLCG) with
        Size => 1;
    for LW_PRGNLCL_LWPKA_CTRL_CG_ITF_OVR_ON_Field use (ON_DISABLE_SLCG => 16#0#, ON_ENABLE_SLCG => 16#1#);
    LW_PRGNLCL_LWPKA_CTRL_CG_DELAY_INIT_ZERO : constant NvU9 := 16#0#;

    type LW_PRGNLCL_LWPKA_CTRL_CG_Register is record
        Clk_Ovr_On : LW_PRGNLCL_LWPKA_CTRL_CG_CLK_OVR_ON_Field;
        Itf_Ovr_On : LW_PRGNLCL_LWPKA_CTRL_CG_ITF_OVR_ON_Field;
        Delay_Init : NvU9;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_LWPKA_CTRL_CG_Register use record
        Clk_Ovr_On at 0 range  0 ..  0;
        Itf_Ovr_On at 0 range 22 .. 22;
        Delay_Init at 0 range 23 .. 31;
    end record;

    type LW_PRGNLCL_LWPKA_CTRL_INTR_STATUS_CORE_IRQ_Field is (IRQ_UNSET, IRQ_SET) with
        Size => 1;
    for LW_PRGNLCL_LWPKA_CTRL_INTR_STATUS_CORE_IRQ_Field use (IRQ_UNSET => 16#0#, IRQ_SET => 16#1#);
    type LW_PRGNLCL_LWPKA_CTRL_INTR_STATUS_ACCESS_ERROR_Field is (ERROR_UNSET, ERROR_SET) with
        Size => 1;
    for LW_PRGNLCL_LWPKA_CTRL_INTR_STATUS_ACCESS_ERROR_Field use (ERROR_UNSET => 16#0#, ERROR_SET => 16#1#);

    type LW_PRGNLCL_LWPKA_CTRL_INTR_STATUS_Register is record
        Core_Irq     : LW_PRGNLCL_LWPKA_CTRL_INTR_STATUS_CORE_IRQ_Field;
        Access_Error : LW_PRGNLCL_LWPKA_CTRL_INTR_STATUS_ACCESS_ERROR_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_LWPKA_CTRL_INTR_STATUS_Register use record
        Core_Irq     at 0 range  8 ..  8;
        Access_Error at 0 range 16 .. 16;
    end record;

    type LW_PRGNLCL_LWPKA_CTRL_INTR_MASK_CORE_IRQ_Field is (IRQ_UNSET, IRQ_SET) with
        Size => 1;
    for LW_PRGNLCL_LWPKA_CTRL_INTR_MASK_CORE_IRQ_Field use (IRQ_UNSET => 16#0#, IRQ_SET => 16#1#);
    type LW_PRGNLCL_LWPKA_CTRL_INTR_MASK_ACCESS_ERROR_Field is (ERROR_UNSET, ERROR_SET) with
        Size => 1;
    for LW_PRGNLCL_LWPKA_CTRL_INTR_MASK_ACCESS_ERROR_Field use (ERROR_UNSET => 16#0#, ERROR_SET => 16#1#);

    type LW_PRGNLCL_LWPKA_CTRL_INTR_MASK_Register is record
        Core_Irq     : LW_PRGNLCL_LWPKA_CTRL_INTR_MASK_CORE_IRQ_Field;
        Access_Error : LW_PRGNLCL_LWPKA_CTRL_INTR_MASK_ACCESS_ERROR_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_LWPKA_CTRL_INTR_MASK_Register use record
        Core_Irq     at 0 range  8 ..  8;
        Access_Error at 0 range 16 .. 16;
    end record;

    LW_PRGNLCL_LWPKA_CTRL_VERSION_HW_MAJOR_1 : constant NvU8 := 16#1#;
    LW_PRGNLCL_LWPKA_CTRL_VERSION_HW_MINOR_1 : constant NvU8 := 16#0#;
    LW_PRGNLCL_LWPKA_CTRL_VERSION_FW_MAJOR_1 : constant NvU8 := 16#1#;
    LW_PRGNLCL_LWPKA_CTRL_VERSION_FW_MINOR_1 : constant NvU8 := 16#0#;

    type LW_PRGNLCL_LWPKA_CTRL_VERSION_Register is record
        Hw_Major : NvU8;
        Hw_Minor : NvU8;
        Fw_Major : NvU8;
        Fw_Minor : NvU8;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_LWPKA_CTRL_VERSION_Register use record
        Hw_Major at 0 range  0 ..  7;
        Hw_Minor at 0 range  8 .. 15;
        Fw_Major at 0 range 16 .. 23;
        Fw_Minor at 0 range 24 .. 31;
    end record;

    LW_PRGNLCL_LWPKA_CTRL_BUILD_CONFIG_HAS_ECC_KEYSTORE_TRUE : constant NvU1 := 16#1#;
    LW_PRGNLCL_LWPKA_CTRL_BUILD_CONFIG_HAS_SAFETY_EXT_TRUE   : constant NvU1 := 16#1#;
    LW_PRGNLCL_LWPKA_CTRL_BUILD_CONFIG_KSLT_SAFETY_ECC       : constant NvU2 := 16#2#;
    LW_PRGNLCL_LWPKA_CTRL_BUILD_CONFIG_DMEM_SAFETY_PARITY    : constant NvU2 := 16#1#;

    type LW_PRGNLCL_LWPKA_CTRL_BUILD_CONFIG_Register is record
        Has_Ecc_Keystore : NvU1;
        Has_Safety_Ext   : NvU1;
        Kslt_Safety      : NvU2;
        Dmem_Safety      : NvU2;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_LWPKA_CTRL_BUILD_CONFIG_Register use record
        Has_Ecc_Keystore at 0 range 9 .. 9;
        Has_Safety_Ext   at 0 range 8 .. 8;
        Kslt_Safety      at 0 range 2 .. 3;
        Dmem_Safety      at 0 range 0 .. 1;
    end record;

    LW_PRGNLCL_LWPKA_CTRL_KSLT_ADDR_WORD_ADDR_RSA_EXP_START : constant NvU8 := 16#0#;
    LW_PRGNLCL_LWPKA_CTRL_KSLT_ADDR_WORD_ADDR_RSA_MOD_START : constant NvU8 := 16#80#;
    LW_PRGNLCL_LWPKA_CTRL_KSLT_ADDR_WORD_ADDR_ECC_A_START   : constant NvU8 := 16#0#;
    LW_PRGNLCL_LWPKA_CTRL_KSLT_ADDR_WORD_ADDR_ECC_B_START   : constant NvU8 := 16#18#;
    LW_PRGNLCL_LWPKA_CTRL_KSLT_ADDR_WORD_ADDR_ECC_D_START   : constant NvU8 := 16#18#;
    LW_PRGNLCL_LWPKA_CTRL_KSLT_ADDR_WORD_ADDR_ECC_P_START   : constant NvU8 := 16#30#;
    LW_PRGNLCL_LWPKA_CTRL_KSLT_ADDR_WORD_ADDR_ECC_N_START   : constant NvU8 := 16#48#;
    LW_PRGNLCL_LWPKA_CTRL_KSLT_ADDR_WORD_ADDR_ECC_XP_START  : constant NvU8 := 16#60#;
    LW_PRGNLCL_LWPKA_CTRL_KSLT_ADDR_WORD_ADDR_ECC_YP_START  : constant NvU8 := 16#78#;
    LW_PRGNLCL_LWPKA_CTRL_KSLT_ADDR_WORD_ADDR_ECC_XQ_START  : constant NvU8 := 16#90#;
    LW_PRGNLCL_LWPKA_CTRL_KSLT_ADDR_WORD_ADDR_ECC_YQ_START  : constant NvU8 := 16#a8#;
    LW_PRGNLCL_LWPKA_CTRL_KSLT_ADDR_WORD_ADDR_ECC_K_START   : constant NvU8 := 16#c0#;
    type LW_PRGNLCL_LWPKA_CTRL_KSLT_ADDR_AUTO_INCR_Field is (INCR_DISABLE, INCR_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_LWPKA_CTRL_KSLT_ADDR_AUTO_INCR_Field use (INCR_DISABLE => 16#0#, INCR_ENABLE => 16#1#);

    type LW_PRGNLCL_LWPKA_CTRL_KSLT_ADDR_Register is record
        Word_Addr : NvU8;
        Auto_Incr : LW_PRGNLCL_LWPKA_CTRL_KSLT_ADDR_AUTO_INCR_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_LWPKA_CTRL_KSLT_ADDR_Register use record
        Word_Addr at 0 range  0 ..  7;
        Auto_Incr at 0 range 31 .. 31;
    end record;

    type LW_PRGNLCL_LWPKA_CTRL_KSLT_DATA_Register is record
        Data : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_LWPKA_CTRL_KSLT_DATA_Register use record
        Data at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_LWPKA_CTRL_KSLT_OWNER_OWNER_NONE     : constant NvU4 := 16#0#;
    LW_PRGNLCL_LWPKA_CTRL_KSLT_OWNER_OWNER_MASTER_1 : constant NvU4 := 16#1#;
    LW_PRGNLCL_LWPKA_CTRL_KSLT_OWNER_OWNER_MASTER_2 : constant NvU4 := 16#2#;
    LW_PRGNLCL_LWPKA_CTRL_KSLT_OWNER_OWNER_MASTER_3 : constant NvU4 := 16#3#;
    LW_PRGNLCL_LWPKA_CTRL_KSLT_OWNER_OWNER_MASTER_4 : constant NvU4 := 16#4#;
    LW_PRGNLCL_LWPKA_CTRL_KSLT_OWNER_OWNER_MASTER_5 : constant NvU4 := 16#5#;
    LW_PRGNLCL_LWPKA_CTRL_KSLT_OWNER_OWNER_MASTER_6 : constant NvU4 := 16#6#;

    type LW_PRGNLCL_LWPKA_CTRL_KSLT_OWNER_Register is record
        Owner : NvU4;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_LWPKA_CTRL_KSLT_OWNER_Register use record
        Owner at 0 range 0 .. 3;
    end record;

    type LW_PRGNLCL_LWPKA_CTRL_KSLT_ACCESS_READ_Field is (READ_DISABLED, READ_ENABLED) with
        Size => 1;
    for LW_PRGNLCL_LWPKA_CTRL_KSLT_ACCESS_READ_Field use (READ_DISABLED => 16#0#, READ_ENABLED => 16#1#);
    type LW_PRGNLCL_LWPKA_CTRL_KSLT_ACCESS_WRITE_Field is (WRITE_DISABLED, WRITE_ENABLED) with
        Size => 1;
    for LW_PRGNLCL_LWPKA_CTRL_KSLT_ACCESS_WRITE_Field use (WRITE_DISABLED => 16#0#, WRITE_ENABLED => 16#1#);
    type LW_PRGNLCL_LWPKA_CTRL_KSLT_ACCESS_USE_Field is (USE_DISABLED, USE_ENABLED) with
        Size => 1;
    for LW_PRGNLCL_LWPKA_CTRL_KSLT_ACCESS_USE_Field use (USE_DISABLED => 16#0#, USE_ENABLED => 16#1#);

    type LW_PRGNLCL_LWPKA_CTRL_KSLT_ACCESS_Register is record
        Read       : LW_PRGNLCL_LWPKA_CTRL_KSLT_ACCESS_READ_Field;
        Write      : LW_PRGNLCL_LWPKA_CTRL_KSLT_ACCESS_WRITE_Field;
        Access_Use : LW_PRGNLCL_LWPKA_CTRL_KSLT_ACCESS_USE_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_LWPKA_CTRL_KSLT_ACCESS_Register use record
        Read       at 0 range 0 .. 0;
        Write      at 0 range 1 .. 1;
        Access_Use at 0 range 2 .. 2;
    end record;

    LW_PRGNLCL_LWPKA_CTRL_FUSE_STATUS_GLOBAL_CLK_OVR_ON_TRUE : constant NvU1 := 16#1#;
    LW_PRGNLCL_LWPKA_CTRL_FUSE_STATUS_OPT_SCC_DIS_FALSE      : constant NvU1 := 16#0#;
    LW_PRGNLCL_LWPKA_CTRL_FUSE_STATUS_DEBUG_EN_FALSE         : constant NvU1 := 16#0#;

    type LW_PRGNLCL_LWPKA_CTRL_FUSE_STATUS_Register is record
        Global_Clk_Ovr_On : NvU1;
        Opt_Scc_Dis       : NvU1;
        Debug_En          : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_LWPKA_CTRL_FUSE_STATUS_Register use record
        Global_Clk_Ovr_On at 0 range 0 .. 0;
        Opt_Scc_Dis       at 0 range 1 .. 1;
        Debug_En          at 0 range 2 .. 2;
    end record;

    type LW_PRGNLCL_LWPKA_CORE_CONFIG_INPUT_SEL_Field is (SEL_DRBG, SEL_DMEM) with
        Size => 1;
    for LW_PRGNLCL_LWPKA_CORE_CONFIG_INPUT_SEL_Field use (SEL_DRBG => 16#0#, SEL_DMEM => 16#1#);

    type LW_PRGNLCL_LWPKA_CORE_CONFIG_Register is record
        Input_Sel : LW_PRGNLCL_LWPKA_CORE_CONFIG_INPUT_SEL_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_LWPKA_CORE_CONFIG_Register use record
        Input_Sel at 0 range 0 .. 0;
    end record;

    type LW_PRGNLCL_LWPKA_CORE_OPERATION_SCC_EN_Field is (EN_DISABLE, EN_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_LWPKA_CORE_OPERATION_SCC_EN_Field use (EN_DISABLE => 16#0#, EN_ENABLE => 16#1#);
    LW_PRGNLCL_LWPKA_CORE_OPERATION_PRIMITIVE_NOP            : constant NvU8 := 16#0#;
    LW_PRGNLCL_LWPKA_CORE_OPERATION_PRIMITIVE_MULT           : constant NvU8 := 16#1#;
    LW_PRGNLCL_LWPKA_CORE_OPERATION_PRIMITIVE_MOD_MULT       : constant NvU8 := 16#2#;
    LW_PRGNLCL_LWPKA_CORE_OPERATION_PRIMITIVE_MOD_ADD        : constant NvU8 := 16#3#;
    LW_PRGNLCL_LWPKA_CORE_OPERATION_PRIMITIVE_MOD_SUB        : constant NvU8 := 16#4#;
    LW_PRGNLCL_LWPKA_CORE_OPERATION_PRIMITIVE_MOD_INV        : constant NvU8 := 16#5#;
    LW_PRGNLCL_LWPKA_CORE_OPERATION_PRIMITIVE_MOD_DIV        : constant NvU8 := 16#6#;
    LW_PRGNLCL_LWPKA_CORE_OPERATION_PRIMITIVE_MOD_RED        : constant NvU8 := 16#7#;
    LW_PRGNLCL_LWPKA_CORE_OPERATION_PRIMITIVE_MOD_EXP        : constant NvU8 := 16#8#;
    LW_PRGNLCL_LWPKA_CORE_OPERATION_PRIMITIVE_POT_VER        : constant NvU8 := 16#9#;
    LW_PRGNLCL_LWPKA_CORE_OPERATION_PRIMITIVE_POT_MULT       : constant NvU8 := 16#a#;
    LW_PRGNLCL_LWPKA_CORE_OPERATION_PRIMITIVE_SHAMIR         : constant NvU8 := 16#b#;
    LW_PRGNLCL_LWPKA_CORE_OPERATION_PRIMITIVE_MG_MULT        : constant NvU8 := 16#c#;
    LW_PRGNLCL_LWPKA_CORE_OPERATION_PRIMITIVE_ED_VER         : constant NvU8 := 16#d#;
    LW_PRGNLCL_LWPKA_CORE_OPERATION_PRIMITIVE_ED_MULT        : constant NvU8 := 16#e#;
    LW_PRGNLCL_LWPKA_CORE_OPERATION_PRIMITIVE_ED_SHAMIR      : constant NvU8 := 16#f#;
    LW_PRGNLCL_LWPKA_CORE_OPERATION_PRIMITIVE_ECC_KEYINS_PRI : constant NvU8 := 16#10#;
    LW_PRGNLCL_LWPKA_CORE_OPERATION_PRIMITIVE_ECC_KEYGEN_PRI : constant NvU8 := 16#11#;
    LW_PRGNLCL_LWPKA_CORE_OPERATION_PRIMITIVE_ECC_KEYGEN_PUB : constant NvU8 := 16#12#;
    LW_PRGNLCL_LWPKA_CORE_OPERATION_PRIMITIVE_ECC_KEYDISP    : constant NvU8 := 16#13#;
    LW_PRGNLCL_LWPKA_CORE_OPERATION_PRIMITIVE_ECDSA_SIGN     : constant NvU8 := 16#14#;
    LW_PRGNLCL_LWPKA_CORE_OPERATION_RADIX_DISABLE            : constant NvU8 := 16#0#;
    LW_PRGNLCL_LWPKA_CORE_OPERATION_RADIX_256                : constant NvU8 := 16#8#;
    LW_PRGNLCL_LWPKA_CORE_OPERATION_RADIX_448                : constant NvU8 := 16#e#;
    LW_PRGNLCL_LWPKA_CORE_OPERATION_RADIX_512                : constant NvU8 := 16#10#;
    LW_PRGNLCL_LWPKA_CORE_OPERATION_RADIX_544                : constant NvU8 := 16#11#;
    LW_PRGNLCL_LWPKA_CORE_OPERATION_RADIX_1024               : constant NvU8 := 16#20#;
    LW_PRGNLCL_LWPKA_CORE_OPERATION_RADIX_1536               : constant NvU8 := 16#30#;
    LW_PRGNLCL_LWPKA_CORE_OPERATION_RADIX_2048               : constant NvU8 := 16#40#;
    LW_PRGNLCL_LWPKA_CORE_OPERATION_RADIX_3072               : constant NvU8 := 16#60#;
    LW_PRGNLCL_LWPKA_CORE_OPERATION_RADIX_4096               : constant NvU8 := 16#80#;
    type LW_PRGNLCL_LWPKA_CORE_OPERATION_START_Field is (START_UNSET, START_SET) with
        Size => 1;
    for LW_PRGNLCL_LWPKA_CORE_OPERATION_START_Field use (START_UNSET => 16#0#, START_SET => 16#1#);

    type LW_PRGNLCL_LWPKA_CORE_OPERATION_Register is record
        Scc_En    : LW_PRGNLCL_LWPKA_CORE_OPERATION_SCC_EN_Field;
        Primitive : NvU8;
        Radix     : NvU8;
        Start     : LW_PRGNLCL_LWPKA_CORE_OPERATION_START_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_LWPKA_CORE_OPERATION_Register use record
        Scc_En    at 0 range  0 ..  0;
        Primitive at 0 range  8 .. 15;
        Radix     at 0 range 16 .. 23;
        Start     at 0 range 31 .. 31;
    end record;

    LW_PRGNLCL_LWPKA_CORE_STATUS_RETURN_CODE_PASS              : constant NvU8 := 16#0#;
    LW_PRGNLCL_LWPKA_CORE_STATUS_RETURN_CODE_ILLEGAL_PRIMITIVE : constant NvU8 := 16#e0#;
    LW_PRGNLCL_LWPKA_CORE_STATUS_RETURN_CODE_ILLEGAL_SIZE      : constant NvU8 := 16#e1#;
    LW_PRGNLCL_LWPKA_CORE_STATUS_RETURN_CODE_ILLEGAL_POINT     : constant NvU8 := 16#e2#;
    LW_PRGNLCL_LWPKA_CORE_STATUS_RETURN_CODE_ILLEGAL_OPERAND   : constant NvU8 := 16#e3#;
    LW_PRGNLCL_LWPKA_CORE_STATUS_RETURN_CODE_INFINITE_POINT    : constant NvU8 := 16#e4#;
    LW_PRGNLCL_LWPKA_CORE_STATUS_RETURN_CODE_KAC_ERROR         : constant NvU8 := 16#e5#;
    type LW_PRGNLCL_LWPKA_CORE_STATUS_IS_VALID_POINT_Field is (POINT_FALSE, POINT_TRUE) with
        Size => 1;
    for LW_PRGNLCL_LWPKA_CORE_STATUS_IS_VALID_POINT_Field use (POINT_FALSE => 16#0#, POINT_TRUE => 16#1#);
    type LW_PRGNLCL_LWPKA_CORE_STATUS_BUSY_Field is (BUSY_IDLE, BUSY_BUSY) with
        Size => 1;
    for LW_PRGNLCL_LWPKA_CORE_STATUS_BUSY_Field use (BUSY_IDLE => 16#0#, BUSY_BUSY => 16#1#);

    type LW_PRGNLCL_LWPKA_CORE_STATUS_Register is record
        Return_Code    : NvU8;
        Is_Valid_Point : LW_PRGNLCL_LWPKA_CORE_STATUS_IS_VALID_POINT_Field;
        Busy           : LW_PRGNLCL_LWPKA_CORE_STATUS_BUSY_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_LWPKA_CORE_STATUS_Register use record
        Return_Code    at 0 range 8 .. 15;
        Is_Valid_Point at 0 range 4 ..  4;
        Busy           at 0 range 0 ..  0;
    end record;

    type LW_PRGNLCL_LWPKA_CORE_IRQ_ENABLE_OP_DONE_Field is (DONE_DISABLE, DONE_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_LWPKA_CORE_IRQ_ENABLE_OP_DONE_Field use (DONE_DISABLE => 16#0#, DONE_ENABLE => 16#1#);

    type LW_PRGNLCL_LWPKA_CORE_IRQ_ENABLE_Register is record
        Op_Done : LW_PRGNLCL_LWPKA_CORE_IRQ_ENABLE_OP_DONE_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_LWPKA_CORE_IRQ_ENABLE_Register use record
        Op_Done at 0 range 0 .. 0;
    end record;

    type LW_PRGNLCL_LWPKA_CORE_IRQ_STATUS_OP_DONE_Field is (DONE_UNSET, DONE_SET) with
        Size => 1;
    for LW_PRGNLCL_LWPKA_CORE_IRQ_STATUS_OP_DONE_Field use (DONE_UNSET => 16#0#, DONE_SET => 16#1#);

    type LW_PRGNLCL_LWPKA_CORE_IRQ_STATUS_Register is record
        Op_Done : LW_PRGNLCL_LWPKA_CORE_IRQ_STATUS_OP_DONE_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_LWPKA_CORE_IRQ_STATUS_Register use record
        Op_Done at 0 range 0 .. 0;
    end record;

    LW_PRGNLCL_LWPKA_CORE_ECC_KEYMANIFEST_SW_ORIGIN_NONE   : constant NvU4 := 16#0#;
    LW_PRGNLCL_LWPKA_CORE_ECC_KEYMANIFEST_SW_ORIGIN_PWR    : constant NvU4 := 16#1#;
    LW_PRGNLCL_LWPKA_CORE_ECC_KEYMANIFEST_SW_ORIGIN_LWDEC  : constant NvU4 := 16#2#;
    LW_PRGNLCL_LWPKA_CORE_ECC_KEYMANIFEST_SW_ORIGIN_SEC    : constant NvU4 := 16#3#;
    LW_PRGNLCL_LWPKA_CORE_ECC_KEYMANIFEST_SW_ORIGIN_GSP    : constant NvU4 := 16#4#;
    LW_PRGNLCL_LWPKA_CORE_ECC_KEYMANIFEST_SW_ORIGIN_PRIV   : constant NvU4 := 16#5#;
    LW_PRGNLCL_LWPKA_CORE_ECC_KEYMANIFEST_SW_ORIGIN_FSP    : constant NvU4 := 16#6#;
    LW_PRGNLCL_LWPKA_CORE_ECC_KEYMANIFEST_SW_USER_NONE     : constant NvU4 := 16#0#;
    LW_PRGNLCL_LWPKA_CORE_ECC_KEYMANIFEST_SW_USER_PWR      : constant NvU4 := 16#1#;
    LW_PRGNLCL_LWPKA_CORE_ECC_KEYMANIFEST_SW_USER_LWDEC    : constant NvU4 := 16#2#;
    LW_PRGNLCL_LWPKA_CORE_ECC_KEYMANIFEST_SW_USER_SEC      : constant NvU4 := 16#3#;
    LW_PRGNLCL_LWPKA_CORE_ECC_KEYMANIFEST_SW_USER_GSP      : constant NvU4 := 16#4#;
    LW_PRGNLCL_LWPKA_CORE_ECC_KEYMANIFEST_SW_USER_PRIV     : constant NvU4 := 16#5#;
    LW_PRGNLCL_LWPKA_CORE_ECC_KEYMANIFEST_SW_USER_FSP      : constant NvU4 := 16#6#;
    LW_PRGNLCL_LWPKA_CORE_ECC_KEYMANIFEST_SW_PURPOSE_ECDSA : constant NvU4 := 16#b#;
    LW_PRGNLCL_LWPKA_CORE_ECC_KEYMANIFEST_SW_PURPOSE_ECDH  : constant NvU4 := 16#c#;
    LW_PRGNLCL_LWPKA_CORE_ECC_KEYMANIFEST_SW_PURPOSE_EDDSA : constant NvU4 := 16#d#;
    type LW_PRGNLCL_LWPKA_CORE_ECC_KEYMANIFEST_SW_EX_Field is (EX_FALSE, EX_TRUE) with
        Size => 1;
    for LW_PRGNLCL_LWPKA_CORE_ECC_KEYMANIFEST_SW_EX_Field use (EX_FALSE => 16#0#, EX_TRUE => 16#1#);
    type LW_PRGNLCL_LWPKA_CORE_ECC_KEYMANIFEST_SW_SIZE_Field is (SIZE_KEY256, SIZE_KEY384, SIZE_KEY521) with
        Size => 2;
    for LW_PRGNLCL_LWPKA_CORE_ECC_KEYMANIFEST_SW_SIZE_Field use (SIZE_KEY256 => 16#0#, SIZE_KEY384 => 16#1#, SIZE_KEY521 => 16#2#);
    LW_PRGNLCL_LWPKA_CORE_ECC_KEYMANIFEST_SW_DP_IDX_P256 : constant NvU2 := 16#0#;
    type LW_PRGNLCL_LWPKA_CORE_ECC_KEYMANIFEST_SW_TYPE_Field is (TYPE_SYMMETRIC_KEY, TYPE_ECC_KEY, TYPE_RSA_KEY) with
        Size => 2;
    for LW_PRGNLCL_LWPKA_CORE_ECC_KEYMANIFEST_SW_TYPE_Field use (TYPE_SYMMETRIC_KEY => 16#0#, TYPE_ECC_KEY => 16#1#, TYPE_RSA_KEY => 16#2#);

    type LW_PRGNLCL_LWPKA_CORE_ECC_KEYMANIFEST_SW_Register is record
        Origin  : NvU4;
        User    : NvU4;
        Purpose : NvU4;
        Ex      : LW_PRGNLCL_LWPKA_CORE_ECC_KEYMANIFEST_SW_EX_Field;
        Size    : LW_PRGNLCL_LWPKA_CORE_ECC_KEYMANIFEST_SW_SIZE_Field;
        Sw      : NvU12;
        Dp_Idx  : NvU2;
        Sw_Type : LW_PRGNLCL_LWPKA_CORE_ECC_KEYMANIFEST_SW_TYPE_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_LWPKA_CORE_ECC_KEYMANIFEST_SW_Register use record
        Origin  at 0 range  0 ..  3;
        User    at 0 range  4 ..  7;
        Purpose at 0 range  8 .. 11;
        Ex      at 0 range 12 .. 12;
        Size    at 0 range 14 .. 15;
        Sw      at 0 range 16 .. 27;
        Dp_Idx  at 0 range 28 .. 29;
        Sw_Type at 0 range 30 .. 31;
    end record;

    LW_PRGNLCL_LWPKA_CORE_ECC_KEYMANIFEST_HW_ORIGIN_NONE   : constant NvU4 := 16#0#;
    LW_PRGNLCL_LWPKA_CORE_ECC_KEYMANIFEST_HW_ORIGIN_PWR    : constant NvU4 := 16#1#;
    LW_PRGNLCL_LWPKA_CORE_ECC_KEYMANIFEST_HW_ORIGIN_LWDEC  : constant NvU4 := 16#2#;
    LW_PRGNLCL_LWPKA_CORE_ECC_KEYMANIFEST_HW_ORIGIN_SEC    : constant NvU4 := 16#3#;
    LW_PRGNLCL_LWPKA_CORE_ECC_KEYMANIFEST_HW_ORIGIN_GSP    : constant NvU4 := 16#4#;
    LW_PRGNLCL_LWPKA_CORE_ECC_KEYMANIFEST_HW_ORIGIN_PRIV   : constant NvU4 := 16#5#;
    LW_PRGNLCL_LWPKA_CORE_ECC_KEYMANIFEST_HW_ORIGIN_FSP    : constant NvU4 := 16#6#;
    LW_PRGNLCL_LWPKA_CORE_ECC_KEYMANIFEST_HW_USER_NONE     : constant NvU4 := 16#0#;
    LW_PRGNLCL_LWPKA_CORE_ECC_KEYMANIFEST_HW_USER_PWR      : constant NvU4 := 16#1#;
    LW_PRGNLCL_LWPKA_CORE_ECC_KEYMANIFEST_HW_USER_LWDEC    : constant NvU4 := 16#2#;
    LW_PRGNLCL_LWPKA_CORE_ECC_KEYMANIFEST_HW_USER_SEC      : constant NvU4 := 16#3#;
    LW_PRGNLCL_LWPKA_CORE_ECC_KEYMANIFEST_HW_USER_GSP      : constant NvU4 := 16#4#;
    LW_PRGNLCL_LWPKA_CORE_ECC_KEYMANIFEST_HW_USER_PRIV     : constant NvU4 := 16#5#;
    LW_PRGNLCL_LWPKA_CORE_ECC_KEYMANIFEST_HW_USER_FSP      : constant NvU4 := 16#6#;
    LW_PRGNLCL_LWPKA_CORE_ECC_KEYMANIFEST_HW_PURPOSE_ECDSA : constant NvU4 := 16#b#;
    LW_PRGNLCL_LWPKA_CORE_ECC_KEYMANIFEST_HW_PURPOSE_ECDH  : constant NvU4 := 16#c#;
    LW_PRGNLCL_LWPKA_CORE_ECC_KEYMANIFEST_HW_PURPOSE_EDDSA : constant NvU4 := 16#d#;
    type LW_PRGNLCL_LWPKA_CORE_ECC_KEYMANIFEST_HW_EX_Field is (EX_FALSE, EX_TRUE) with
        Size => 1;
    for LW_PRGNLCL_LWPKA_CORE_ECC_KEYMANIFEST_HW_EX_Field use (EX_FALSE => 16#0#, EX_TRUE => 16#1#);
    type LW_PRGNLCL_LWPKA_CORE_ECC_KEYMANIFEST_HW_SIZE_Field is (SIZE_KEY256, SIZE_KEY384, SIZE_KEY521) with
        Size => 2;
    for LW_PRGNLCL_LWPKA_CORE_ECC_KEYMANIFEST_HW_SIZE_Field use (SIZE_KEY256 => 16#0#, SIZE_KEY384 => 16#1#, SIZE_KEY521 => 16#2#);
    LW_PRGNLCL_LWPKA_CORE_ECC_KEYMANIFEST_HW_SW_INIT     : constant NvU12 := 16#0#;
    LW_PRGNLCL_LWPKA_CORE_ECC_KEYMANIFEST_HW_DP_IDX_P256 : constant NvU2  := 16#0#;
    type LW_PRGNLCL_LWPKA_CORE_ECC_KEYMANIFEST_HW_TYPE_Field is (TYPE_SYMMETRIC_KEY, TYPE_ECC_KEY, TYPE_RSA_KEY) with
        Size => 2;
    for LW_PRGNLCL_LWPKA_CORE_ECC_KEYMANIFEST_HW_TYPE_Field use (TYPE_SYMMETRIC_KEY => 16#0#, TYPE_ECC_KEY => 16#1#, TYPE_RSA_KEY => 16#2#);

    type LW_PRGNLCL_LWPKA_CORE_ECC_KEYMANIFEST_HW_Register is record
        Origin  : NvU4;
        User    : NvU4;
        Purpose : NvU4;
        Ex      : LW_PRGNLCL_LWPKA_CORE_ECC_KEYMANIFEST_HW_EX_Field;
        Size    : LW_PRGNLCL_LWPKA_CORE_ECC_KEYMANIFEST_HW_SIZE_Field;
        Sw      : NvU12;
        Dp_Idx  : NvU2;
        Hw_Type : LW_PRGNLCL_LWPKA_CORE_ECC_KEYMANIFEST_HW_TYPE_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_LWPKA_CORE_ECC_KEYMANIFEST_HW_Register use record
        Origin  at 0 range  0 ..  3;
        User    at 0 range  4 ..  7;
        Purpose at 0 range  8 .. 11;
        Ex      at 0 range 12 .. 12;
        Size    at 0 range 14 .. 15;
        Sw      at 0 range 16 .. 27;
        Dp_Idx  at 0 range 28 .. 29;
        Hw_Type at 0 range 30 .. 31;
    end record;

    type LW_PRGNLCL_LWPKA_CORE_ECC_KEYSTORE_CTRL_VLD_PRI_Field is (PRI_FALSE, PRI_TRUE) with
        Size => 1;
    for LW_PRGNLCL_LWPKA_CORE_ECC_KEYSTORE_CTRL_VLD_PRI_Field use (PRI_FALSE => 16#0#, PRI_TRUE => 16#1#);
    type LW_PRGNLCL_LWPKA_CORE_ECC_KEYSTORE_CTRL_VLD_PUB_Field is (PUB_FALSE, PUB_TRUE) with
        Size => 1;
    for LW_PRGNLCL_LWPKA_CORE_ECC_KEYSTORE_CTRL_VLD_PUB_Field use (PUB_FALSE => 16#0#, PUB_TRUE => 16#1#);
    type LW_PRGNLCL_LWPKA_CORE_ECC_KEYSTORE_CTRL_LOCK_Field is (LOCK_FALSE, LOCK_TRUE) with
        Size => 1;
    for LW_PRGNLCL_LWPKA_CORE_ECC_KEYSTORE_CTRL_LOCK_Field use (LOCK_FALSE => 16#0#, LOCK_TRUE => 16#1#);
    LW_PRGNLCL_LWPKA_CORE_ECC_KEYSTORE_CTRL_OWNER_NONE  : constant NvU4 := 16#0#;
    LW_PRGNLCL_LWPKA_CORE_ECC_KEYSTORE_CTRL_OWNER_PWR   : constant NvU4 := 16#1#;
    LW_PRGNLCL_LWPKA_CORE_ECC_KEYSTORE_CTRL_OWNER_LWDEC : constant NvU4 := 16#2#;
    LW_PRGNLCL_LWPKA_CORE_ECC_KEYSTORE_CTRL_OWNER_SEC   : constant NvU4 := 16#3#;
    LW_PRGNLCL_LWPKA_CORE_ECC_KEYSTORE_CTRL_OWNER_GSP   : constant NvU4 := 16#4#;
    LW_PRGNLCL_LWPKA_CORE_ECC_KEYSTORE_CTRL_OWNER_PRIV  : constant NvU4 := 16#5#;
    LW_PRGNLCL_LWPKA_CORE_ECC_KEYSTORE_CTRL_OWNER_FSP   : constant NvU4 := 16#6#;

    type LW_PRGNLCL_LWPKA_CORE_ECC_KEYSTORE_CTRL_Register is record
        Vld_Pri : LW_PRGNLCL_LWPKA_CORE_ECC_KEYSTORE_CTRL_VLD_PRI_Field;
        Vld_Pub : LW_PRGNLCL_LWPKA_CORE_ECC_KEYSTORE_CTRL_VLD_PUB_Field;
        Lock    : LW_PRGNLCL_LWPKA_CORE_ECC_KEYSTORE_CTRL_LOCK_Field;
        Owner   : NvU4;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_LWPKA_CORE_ECC_KEYSTORE_CTRL_Register use record
        Vld_Pri at 0 range 0 .. 0;
        Vld_Pub at 0 range 1 .. 1;
        Lock    at 0 range 3 .. 3;
        Owner   at 0 range 4 .. 7;
    end record;

    type LW_PRGNLCL_LWPKA_CORE_OPMASK_ECDSA_PROTECTION_Field is (PROTECTION_DISABLE, PROTECTION_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_LWPKA_CORE_OPMASK_ECDSA_PROTECTION_Field use (PROTECTION_DISABLE => 16#0#, PROTECTION_ENABLE => 16#1#);

    type LW_PRGNLCL_LWPKA_CORE_OPMASK_Register is record
        Ecdsa_Protection : LW_PRGNLCL_LWPKA_CORE_OPMASK_ECDSA_PROTECTION_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_LWPKA_CORE_OPMASK_Register use record
        Ecdsa_Protection at 0 range 0 .. 0;
    end record;

    type LW_PRGNLCL_LWPKA_CORE_DEBUG0_GENKEY_ITF_STATUS_Field is (STATUS_IDLE, STATUS_BUSY) with
        Size => 1;
    for LW_PRGNLCL_LWPKA_CORE_DEBUG0_GENKEY_ITF_STATUS_Field use (STATUS_IDLE => 16#0#, STATUS_BUSY => 16#1#);
    type LW_PRGNLCL_LWPKA_CORE_DEBUG0_LFSR_STATUS_Field is (STATUS_IDLE, STATUS_BUSY) with
        Size => 1;
    for LW_PRGNLCL_LWPKA_CORE_DEBUG0_LFSR_STATUS_Field use (STATUS_IDLE => 16#0#, STATUS_BUSY => 16#1#);
    type LW_PRGNLCL_LWPKA_CORE_DEBUG0_LFSR_SEEDED_Field is (SEEDED_FALSE, SEEDED_TRUE) with
        Size => 1;
    for LW_PRGNLCL_LWPKA_CORE_DEBUG0_LFSR_SEEDED_Field use (SEEDED_FALSE => 16#0#, SEEDED_TRUE => 16#1#);

    type LW_PRGNLCL_LWPKA_CORE_DEBUG0_Register is record
        Genkey_Itf_Status : LW_PRGNLCL_LWPKA_CORE_DEBUG0_GENKEY_ITF_STATUS_Field;
        Lfsr_Status       : LW_PRGNLCL_LWPKA_CORE_DEBUG0_LFSR_STATUS_Field;
        Lfsr_Seeded       : LW_PRGNLCL_LWPKA_CORE_DEBUG0_LFSR_SEEDED_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_LWPKA_CORE_DEBUG0_Register use record
        Genkey_Itf_Status at 0 range 2 .. 2;
        Lfsr_Status       at 0 range 1 .. 1;
        Lfsr_Seeded       at 0 range 0 .. 0;
    end record;

    LW_PRGNLCL_LWPKA_CORE_LOR_K0_VALUE_CLEAR : constant NvU32 := 16#0#;

    type LW_PRGNLCL_LWPKA_CORE_LOR_K0_Register is record
        Value : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_LWPKA_CORE_LOR_K0_Register use record
        Value at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_LWPKA_CORE_LOR_K1_VALUE_CLEAR : constant NvU32 := 16#0#;

    type LW_PRGNLCL_LWPKA_CORE_LOR_K1_Register is record
        Value : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_LWPKA_CORE_LOR_K1_Register use record
        Value at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_LWPKA_CORE_LOR_S0_VALUE_CLEAR : constant NvU32 := 16#0#;

    type LW_PRGNLCL_LWPKA_CORE_LOR_S0_Register is record
        Value : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_LWPKA_CORE_LOR_S0_Register use record
        Value at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_LWPKA_CORE_LOR_S1_VALUE_CLEAR : constant NvU32 := 16#0#;

    type LW_PRGNLCL_LWPKA_CORE_LOR_S1_Register is record
        Value : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_LWPKA_CORE_LOR_S1_Register use record
        Value at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_LWPKA_CORE_LOR_S2_VALUE_CLEAR : constant NvU32 := 16#0#;

    type LW_PRGNLCL_LWPKA_CORE_LOR_S2_Register is record
        Value : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_LWPKA_CORE_LOR_S2_Register use record
        Value at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_LWPKA_CORE_LOR_S3_VALUE_CLEAR : constant NvU32 := 16#0#;

    type LW_PRGNLCL_LWPKA_CORE_LOR_S3_Register is record
        Value : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_LWPKA_CORE_LOR_S3_Register use record
        Value at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_LWPKA_CORE_LOR_D0_VALUE_CLEAR : constant NvU32 := 16#0#;

    type LW_PRGNLCL_LWPKA_CORE_LOR_D0_Register is record
        Value : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_LWPKA_CORE_LOR_D0_Register use record
        Value at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_LWPKA_CORE_LOR_D1_VALUE_CLEAR : constant NvU32 := 16#0#;

    type LW_PRGNLCL_LWPKA_CORE_LOR_D1_Register is record
        Value : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_LWPKA_CORE_LOR_D1_Register use record
        Value at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_LWPKA_CORE_LOR_C0_VALUE_CLEAR : constant NvU32 := 16#0#;

    type LW_PRGNLCL_LWPKA_CORE_LOR_C0_Register is record
        Value : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_LWPKA_CORE_LOR_C0_Register use record
        Value at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_LWPKA_CORE_LOR_C1_VALUE_CLEAR : constant NvU32 := 16#0#;

    type LW_PRGNLCL_LWPKA_CORE_LOR_C1_Register is record
        Value : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_LWPKA_CORE_LOR_C1_Register use record
        Value at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_LWPKA_CORE_LOR_C2_VALUE_CLEAR : constant NvU32 := 16#0#;

    type LW_PRGNLCL_LWPKA_CORE_LOR_C2_Register is record
        Value : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_LWPKA_CORE_LOR_C2_Register use record
        Value at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_LWPKA_CORE_DEBUG_VIRTUAL_VALUE_CLEAR : constant NvU32 := 16#0#;

    type LW_PRGNLCL_LWPKA_CORE_DEBUG_VIRTUAL_Register is record
        Value : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_LWPKA_CORE_DEBUG_VIRTUAL_Register use record
        Value at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_LWPKA_CORE_KSTR0_VALUE_CLEAR : constant NvU32 := 16#0#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_PRI_IDX     : constant       := 16#0#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_PUB_X_IDX   : constant       := 16#20#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_PUB_Y_IDX   : constant       := 16#40#;

    type LW_PRGNLCL_LWPKA_CORE_KSTR0_Register is record
        Value : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_LWPKA_CORE_KSTR0_Register use record
        Value at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_P_IDX  : constant := 16#0#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_H_IDX  : constant := 16#20#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_N_IDX  : constant := 16#40#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_A_IDX  : constant := 16#60#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_B_IDX  : constant := 16#80#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_GX_IDX : constant := 16#a0#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_GY_IDX : constant := 16#c0#;

    type LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_Register is record
        Value : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_Register use record
        Value at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_P_IDX  : constant := 16#0#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_H_IDX  : constant := 16#20#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_N_IDX  : constant := 16#40#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_A_IDX  : constant := 16#60#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_B_IDX  : constant := 16#80#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_GX_IDX : constant := 16#a0#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_GY_IDX : constant := 16#c0#;

    type LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_Register is record
        Value : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_Register use record
        Value at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_P_IDX  : constant := 16#0#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_H_IDX  : constant := 16#20#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_N_IDX  : constant := 16#40#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_A_IDX  : constant := 16#60#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_B_IDX  : constant := 16#80#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_GX_IDX : constant := 16#a0#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_GY_IDX : constant := 16#c0#;

    type LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_Register is record
        Value : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_Register use record
        Value at 0 range 0 .. 31;
    end record;

    type LW_PRGNLCL_LWRNG_HWCFG00_Register is record
        Version_Major : NvU4;
        Version_Minor : NvU4;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_LWRNG_HWCFG00_Register use record
        Version_Major at 0 range 0 .. 3;
        Version_Minor at 0 range 4 .. 7;
    end record;

    type LW_PRGNLCL_LWRNG_HWCFG01_Register is record
        Build_Core              : NvU2;
        Build_Profile           : NvU1;
        Build_Support_Ais       : NvU1;
        Build_Sync_Rst          : NvU1;
        Build_Security_Strength : NvU1;
        Build_Dfifo_Depth       : NvU4;
        Build_Nfifo_Depth       : NvU4;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_LWRNG_HWCFG01_Register use record
        Build_Core              at 0 range  0 ..  1;
        Build_Profile           at 0 range  2 ..  2;
        Build_Support_Ais       at 0 range  4 ..  4;
        Build_Sync_Rst          at 0 range  6 ..  6;
        Build_Security_Strength at 0 range  8 ..  8;
        Build_Dfifo_Depth       at 0 range 16 .. 19;
        Build_Nfifo_Depth       at 0 range 24 .. 27;
    end record;

    type LW_PRGNLCL_LWRNG_B_LOCK00_B_CTRL0_Field is (CTRL0_UNLOCKED, CTRL0_LOCKED) with
        Size => 1;
    for LW_PRGNLCL_LWRNG_B_LOCK00_B_CTRL0_Field use (CTRL0_UNLOCKED => 16#0#, CTRL0_LOCKED => 16#1#);
    type LW_PRGNLCL_LWRNG_B_LOCK00_B_CTRL1_Field is (CTRL1_UNLOCKED, CTRL1_LOCKED) with
        Size => 1;
    for LW_PRGNLCL_LWRNG_B_LOCK00_B_CTRL1_Field use (CTRL1_UNLOCKED => 16#0#, CTRL1_LOCKED => 16#1#);
    type LW_PRGNLCL_LWRNG_B_LOCK00_B_CTRL2_Field is (CTRL2_UNLOCKED, CTRL2_LOCKED) with
        Size => 1;
    for LW_PRGNLCL_LWRNG_B_LOCK00_B_CTRL2_Field use (CTRL2_UNLOCKED => 16#0#, CTRL2_LOCKED => 16#1#);

    type LW_PRGNLCL_LWRNG_B_LOCK00_Register is record
        B_Ctrl0 : LW_PRGNLCL_LWRNG_B_LOCK00_B_CTRL0_Field;
        B_Ctrl1 : LW_PRGNLCL_LWRNG_B_LOCK00_B_CTRL1_Field;
        B_Ctrl2 : LW_PRGNLCL_LWRNG_B_LOCK00_B_CTRL2_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_LWRNG_B_LOCK00_Register use record
        B_Ctrl0 at 0 range 0 .. 0;
        B_Ctrl1 at 0 range 1 .. 1;
        B_Ctrl2 at 0 range 2 .. 2;
    end record;

    LW_PRGNLCL_LWRNG_B_CTRL0_RESEED_INTERVAL_RESET  : constant NvU8 := 16#7f#;
    LW_PRGNLCL_LWRNG_B_CTRL0_KAT_INTERVAL_RESET     : constant NvU8 := 16#7f#;
    LW_PRGNLCL_LWRNG_B_CTRL0_COND_BLK_NUM_RESET     : constant NvU8 := 16#0#;
    LW_PRGNLCL_LWRNG_B_CTRL0_NS_WAKEUP_CYCLE_RESET  : constant NvU4 := 16#4#;
    LW_PRGNLCL_LWRNG_B_CTRL0_NOISE_SOURCE_SEL_RESET : constant NvU4 := 16#f#;

    type LW_PRGNLCL_LWRNG_B_CTRL0_Register is record
        Reseed_Interval  : NvU8;
        Kat_Interval     : NvU8;
        Cond_Blk_Num     : NvU8;
        Ns_Wakeup_Cycle  : NvU4;
        Noise_Source_Sel : NvU4;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_LWRNG_B_CTRL0_Register use record
        Reseed_Interval  at 0 range  0 ..  7;
        Kat_Interval     at 0 range  8 .. 15;
        Cond_Blk_Num     at 0 range 16 .. 23;
        Ns_Wakeup_Cycle  at 0 range 24 .. 27;
        Noise_Source_Sel at 0 range 28 .. 31;
    end record;

    type LW_PRGNLCL_LWRNG_B_CTRL1_NIST_RCT_TEST_Field is (TEST_DISABLED, TEST_ENABLED) with
        Size => 1;
    for LW_PRGNLCL_LWRNG_B_CTRL1_NIST_RCT_TEST_Field use (TEST_DISABLED => 16#0#, TEST_ENABLED => 16#1#);
    type LW_PRGNLCL_LWRNG_B_CTRL1_NIST_APT_TEST_Field is (TEST_DISABLED, TEST_ENABLED) with
        Size => 1;
    for LW_PRGNLCL_LWRNG_B_CTRL1_NIST_APT_TEST_Field use (TEST_DISABLED => 16#0#, TEST_ENABLED => 16#1#);

    type LW_PRGNLCL_LWRNG_B_CTRL1_Register is record
        Nist_Rct_Test : LW_PRGNLCL_LWRNG_B_CTRL1_NIST_RCT_TEST_Field;
        Nist_Apt_Test : LW_PRGNLCL_LWRNG_B_CTRL1_NIST_APT_TEST_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_LWRNG_B_CTRL1_Register use record
        Nist_Rct_Test at 0 range 0 .. 0;
        Nist_Apt_Test at 0 range 1 .. 1;
    end record;

    LW_PRGNLCL_LWRNG_B_CTRL2_NIST_RCT_CUTOFF_RESET : constant NvU16 := 16#29#;
    LW_PRGNLCL_LWRNG_B_CTRL2_NIST_APT_CUTOFF_RESET : constant NvU16 := 16#319#;

    type LW_PRGNLCL_LWRNG_B_CTRL2_Register is record
        Nist_Rct_Cutoff : NvU16;
        Nist_Apt_Cutoff : NvU16;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_LWRNG_B_CTRL2_Register use record
        Nist_Rct_Cutoff at 0 range  0 .. 15;
        Nist_Apt_Cutoff at 0 range 16 .. 31;
    end record;

    type LW_PRGNLCL_LWRNG_T_CFG_VALIDATION_MODE_Field is (MODE_WORK, MODE_VALIDATION) with
        Size => 1;
    for LW_PRGNLCL_LWRNG_T_CFG_VALIDATION_MODE_Field use (MODE_WORK => 16#0#, MODE_VALIDATION => 16#1#);

    type LW_PRGNLCL_LWRNG_T_CFG_Register is record
        Validation_Mode : LW_PRGNLCL_LWRNG_T_CFG_VALIDATION_MODE_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_LWRNG_T_CFG_Register use record
        Validation_Mode at 0 range 0 .. 0;
    end record;

    type LW_PRGNLCL_LWRNG_T_CMD_CMD_Field is
        (CMD_NOP, CMD_DRBG_INSTANTIATE, CMD_DRBG_RESEED, CMD_DRBG_GENERATE, CMD_DRBG_UNINSTANTIATE, CMD_NRBG_GENERATE, CMD_AES128_ECB, CMD_AES256_ECB, CMD_AES128_CBC_MAC,
         CMD_GET_NOISE, CMD_GET_ENTROPY, CMD_BEHAVIOR_HT, CMD_KAT) with
        Size => 4;
    for LW_PRGNLCL_LWRNG_T_CMD_CMD_Field use
        (CMD_NOP        => 16#0#, CMD_DRBG_INSTANTIATE => 16#1#, CMD_DRBG_RESEED => 16#2#, CMD_DRBG_GENERATE => 16#3#, CMD_DRBG_UNINSTANTIATE => 16#4#, CMD_NRBG_GENERATE => 16#5#,
         CMD_AES128_ECB => 16#6#, CMD_AES256_ECB => 16#7#, CMD_AES128_CBC_MAC => 16#8#, CMD_GET_NOISE => 16#9#, CMD_GET_ENTROPY => 16#a#, CMD_BEHAVIOR_HT => 16#b#,
         CMD_KAT        => 16#c#);
    LW_PRGNLCL_LWRNG_T_CMD_ARG_RESET : constant NvU8 := 16#0#;

    type LW_PRGNLCL_LWRNG_T_CMD_Register is record
        Cmd : LW_PRGNLCL_LWRNG_T_CMD_CMD_Field;
        Arg : NvU8;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_LWRNG_T_CMD_Register use record
        Cmd at 0 range  0 ..  3;
        Arg at 0 range 16 .. 23;
    end record;

    type LW_PRGNLCL_LWRNG_T_STAT_CUR_CMD_Field is
        (CMD_NOP, CMD_DRBG_INSTANTIATE, CMD_DRBG_RESEED, CMD_DRBG_GENERATE, CMD_DRBG_UNINSTANTIATE, CMD_NRBG_GENERATE, CMD_AES128_ECB, CMD_AES256_ECB, CMD_AES128_CBC_MAC,
         CMD_GET_NOISE, CMD_GET_ENTROPY, CMD_BEHAVIOR_HT, CMD_KAT) with
        Size => 4;
    for LW_PRGNLCL_LWRNG_T_STAT_CUR_CMD_Field use
        (CMD_NOP        => 16#0#, CMD_DRBG_INSTANTIATE => 16#1#, CMD_DRBG_RESEED => 16#2#, CMD_DRBG_GENERATE => 16#3#, CMD_DRBG_UNINSTANTIATE => 16#4#, CMD_NRBG_GENERATE => 16#5#,
         CMD_AES128_ECB => 16#6#, CMD_AES256_ECB => 16#7#, CMD_AES128_CBC_MAC => 16#8#, CMD_GET_NOISE => 16#9#, CMD_GET_ENTROPY => 16#a#, CMD_BEHAVIOR_HT => 16#b#,
         CMD_KAT        => 16#c#);
    type LW_PRGNLCL_LWRNG_T_STAT_CUR_STAT_Field is (STAT_IDLE, STAT_BUSY, STAT_WAIT, STAT_ERROR) with
        Size => 2;
    for LW_PRGNLCL_LWRNG_T_STAT_CUR_STAT_Field use (STAT_IDLE => 16#0#, STAT_BUSY => 16#1#, STAT_WAIT => 16#2#, STAT_ERROR => 16#3#);

    type LW_PRGNLCL_LWRNG_T_STAT_Register is record
        Cur_Cmd  : LW_PRGNLCL_LWRNG_T_STAT_CUR_CMD_Field;
        Cur_Stat : LW_PRGNLCL_LWRNG_T_STAT_CUR_STAT_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_LWRNG_T_STAT_Register use record
        Cur_Cmd  at 0 range  0 ..  3;
        Cur_Stat at 0 range 28 .. 29;
    end record;

    LW_PRGNLCL_LWRNG_T_IDC_ADDR_V0             : constant NvU8 := 16#0#;
    LW_PRGNLCL_LWRNG_T_IDC_ADDR_V1             : constant NvU8 := 16#1#;
    LW_PRGNLCL_LWRNG_T_IDC_ADDR_V2             : constant NvU8 := 16#2#;
    LW_PRGNLCL_LWRNG_T_IDC_ADDR_V3             : constant NvU8 := 16#3#;
    LW_PRGNLCL_LWRNG_T_IDC_ADDR_K00            : constant NvU8 := 16#4#;
    LW_PRGNLCL_LWRNG_T_IDC_ADDR_K01            : constant NvU8 := 16#5#;
    LW_PRGNLCL_LWRNG_T_IDC_ADDR_K02            : constant NvU8 := 16#6#;
    LW_PRGNLCL_LWRNG_T_IDC_ADDR_K03            : constant NvU8 := 16#7#;
    LW_PRGNLCL_LWRNG_T_IDC_ADDR_K10            : constant NvU8 := 16#8#;
    LW_PRGNLCL_LWRNG_T_IDC_ADDR_K11            : constant NvU8 := 16#9#;
    LW_PRGNLCL_LWRNG_T_IDC_ADDR_K12            : constant NvU8 := 16#a#;
    LW_PRGNLCL_LWRNG_T_IDC_ADDR_K13            : constant NvU8 := 16#b#;
    LW_PRGNLCL_LWRNG_T_IDC_ADDR_N0             : constant NvU8 := 16#14#;
    LW_PRGNLCL_LWRNG_T_IDC_ADDR_N1             : constant NvU8 := 16#15#;
    LW_PRGNLCL_LWRNG_T_IDC_ADDR_N2             : constant NvU8 := 16#16#;
    LW_PRGNLCL_LWRNG_T_IDC_ADDR_N3             : constant NvU8 := 16#17#;
    LW_PRGNLCL_LWRNG_T_IDC_ADDR_RESEED_COUNTER : constant NvU8 := 16#20#;
    LW_PRGNLCL_LWRNG_T_IDC_ADDR_NS_BLK_COUNTER : constant NvU8 := 16#21#;
    type LW_PRGNLCL_LWRNG_T_IDC_AINCR_Field is (AINCR_DISABLED, AINCR_ENABLED) with
        Size => 1;
    for LW_PRGNLCL_LWRNG_T_IDC_AINCR_Field use (AINCR_DISABLED => 16#0#, AINCR_ENABLED => 16#1#);

    type LW_PRGNLCL_LWRNG_T_IDC_Register is record
        Addr  : NvU8;
        Aincr : LW_PRGNLCL_LWRNG_T_IDC_AINCR_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_LWRNG_T_IDC_Register use record
        Addr  at 0 range  0 ..  7;
        Aincr at 0 range 31 .. 31;
    end record;

    type LW_PRGNLCL_LWRNG_T_IDD_Register is record
        Data : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_LWRNG_T_IDD_Register use record
        Data at 0 range 0 .. 31;
    end record;

    type LW_PRGNLCL_LWRNG_R_IE_ERROR_Field is (ERROR_DISABLED, ERROR_ENABLED) with
        Size => 1;
    for LW_PRGNLCL_LWRNG_R_IE_ERROR_Field use (ERROR_DISABLED => 16#0#, ERROR_ENABLED => 16#1#);
    type LW_PRGNLCL_LWRNG_R_IE_STARTUP_DONE_Field is (DONE_DISABLED, DONE_ENABLED) with
        Size => 1;
    for LW_PRGNLCL_LWRNG_R_IE_STARTUP_DONE_Field use (DONE_DISABLED => 16#0#, DONE_ENABLED => 16#1#);
    type LW_PRGNLCL_LWRNG_R_IE_HALTED_Field is (HALTED_DISABLED, HALTED_ENABLED) with
        Size => 1;
    for LW_PRGNLCL_LWRNG_R_IE_HALTED_Field use (HALTED_DISABLED => 16#0#, HALTED_ENABLED => 16#1#);

    type LW_PRGNLCL_LWRNG_R_IE_Register is record
        Error        : LW_PRGNLCL_LWRNG_R_IE_ERROR_Field;
        Startup_Done : LW_PRGNLCL_LWRNG_R_IE_STARTUP_DONE_Field;
        Halted       : LW_PRGNLCL_LWRNG_R_IE_HALTED_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_LWRNG_R_IE_Register use record
        Error        at 0 range 0 .. 0;
        Startup_Done at 0 range 1 .. 1;
        Halted       at 0 range 2 .. 2;
    end record;

    type LW_PRGNLCL_LWRNG_R_ISTAT_ERROR_Field is (ERROR_FALSE, ERROR_TRUE) with
        Size => 1;
    for LW_PRGNLCL_LWRNG_R_ISTAT_ERROR_Field use (ERROR_FALSE => 16#0#, ERROR_TRUE => 16#1#);
    type LW_PRGNLCL_LWRNG_R_ISTAT_STARTUP_DONE_Field is (DONE_FALSE, DONE_TRUE) with
        Size => 1;
    for LW_PRGNLCL_LWRNG_R_ISTAT_STARTUP_DONE_Field use (DONE_FALSE => 16#0#, DONE_TRUE => 16#1#);
    type LW_PRGNLCL_LWRNG_R_ISTAT_HALTED_Field is (HALTED_FALSE, HALTED_TRUE) with
        Size => 1;
    for LW_PRGNLCL_LWRNG_R_ISTAT_HALTED_Field use (HALTED_FALSE => 16#0#, HALTED_TRUE => 16#1#);

    type LW_PRGNLCL_LWRNG_R_ISTAT_Register is record
        Error        : LW_PRGNLCL_LWRNG_R_ISTAT_ERROR_Field;
        Startup_Done : LW_PRGNLCL_LWRNG_R_ISTAT_STARTUP_DONE_Field;
        Halted       : LW_PRGNLCL_LWRNG_R_ISTAT_HALTED_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_LWRNG_R_ISTAT_Register use record
        Error        at 0 range 0 .. 0;
        Startup_Done at 0 range 1 .. 1;
        Halted       at 0 range 2 .. 2;
    end record;

    type LW_PRGNLCL_LWRNG_R_STAT_HW_PRODUCTION_MODE_Field is (MODE_FALSE, MODE_TRUE) with
        Size => 1;
    for LW_PRGNLCL_LWRNG_R_STAT_HW_PRODUCTION_MODE_Field use (MODE_FALSE => 16#0#, MODE_TRUE => 16#1#);
    type LW_PRGNLCL_LWRNG_R_STAT_PRODUCTION_MODE_FNL_Field is (FNL_FALSE, FNL_TRUE) with
        Size => 1;
    for LW_PRGNLCL_LWRNG_R_STAT_PRODUCTION_MODE_FNL_Field use (FNL_FALSE => 16#0#, FNL_TRUE => 16#1#);
    type LW_PRGNLCL_LWRNG_R_STAT_HW_ENGINE_ENABLED_Field is (ENABLED_FALSE, ENABLED_TRUE) with
        Size => 1;
    for LW_PRGNLCL_LWRNG_R_STAT_HW_ENGINE_ENABLED_Field use (ENABLED_FALSE => 16#0#, ENABLED_TRUE => 16#1#);
    type LW_PRGNLCL_LWRNG_R_STAT_ENGINE_ENABLED_FNL_Field is (FNL_FALSE, FNL_TRUE) with
        Size => 1;
    for LW_PRGNLCL_LWRNG_R_STAT_ENGINE_ENABLED_FNL_Field use (FNL_FALSE => 16#0#, FNL_TRUE => 16#1#);
    type LW_PRGNLCL_LWRNG_R_STAT_ENGINE_BUSY_Field is (BUSY_FALSE, BUSY_TRUE) with
        Size => 1;
    for LW_PRGNLCL_LWRNG_R_STAT_ENGINE_BUSY_Field use (BUSY_FALSE => 16#0#, BUSY_TRUE => 16#1#);
    type LW_PRGNLCL_LWRNG_R_STAT_KAT_ERROR_Field is (ERROR_FALSE, ERROR_TRUE) with
        Size => 1;
    for LW_PRGNLCL_LWRNG_R_STAT_KAT_ERROR_Field use (ERROR_FALSE => 16#0#, ERROR_TRUE => 16#1#);
    type LW_PRGNLCL_LWRNG_R_STAT_TAMPER_ERROR_Field is (ERROR_FALSE, ERROR_TRUE) with
        Size => 1;
    for LW_PRGNLCL_LWRNG_R_STAT_TAMPER_ERROR_Field use (ERROR_FALSE => 16#0#, ERROR_TRUE => 16#1#);
    type LW_PRGNLCL_LWRNG_R_STAT_STARTUP_ERROR_Field is (ERROR_FALSE, ERROR_TRUE) with
        Size => 1;
    for LW_PRGNLCL_LWRNG_R_STAT_STARTUP_ERROR_Field use (ERROR_FALSE => 16#0#, ERROR_TRUE => 16#1#);
    type LW_PRGNLCL_LWRNG_R_STAT_DRBG_INSTANTIATED_Field is (INSTANTIATED_FALSE, INSTANTIATED_TRUE) with
        Size => 1;
    for LW_PRGNLCL_LWRNG_R_STAT_DRBG_INSTANTIATED_Field use (INSTANTIATED_FALSE => 16#0#, INSTANTIATED_TRUE => 16#1#);
    type LW_PRGNLCL_LWRNG_R_STAT_RESEED_INTERVAL_EXHAUSTED_Field is (EXHAUSTED_FALSE, EXHAUSTED_TRUE) with
        Size => 1;
    for LW_PRGNLCL_LWRNG_R_STAT_RESEED_INTERVAL_EXHAUSTED_Field use (EXHAUSTED_FALSE => 16#0#, EXHAUSTED_TRUE => 16#1#);
    type LW_PRGNLCL_LWRNG_R_STAT_NIST_HT_RCT_ERROR_Field is (ERROR_FALSE, ERROR_TRUE) with
        Size => 1;
    for LW_PRGNLCL_LWRNG_R_STAT_NIST_HT_RCT_ERROR_Field use (ERROR_FALSE => 16#0#, ERROR_TRUE => 16#1#);
    type LW_PRGNLCL_LWRNG_R_STAT_NIST_HT_APT_ERROR_Field is (ERROR_FALSE, ERROR_TRUE) with
        Size => 1;
    for LW_PRGNLCL_LWRNG_R_STAT_NIST_HT_APT_ERROR_Field use (ERROR_FALSE => 16#0#, ERROR_TRUE => 16#1#);

    type LW_PRGNLCL_LWRNG_R_STAT_Register is record
        Hw_Production_Mode        : LW_PRGNLCL_LWRNG_R_STAT_HW_PRODUCTION_MODE_Field;
        Production_Mode_Fnl       : LW_PRGNLCL_LWRNG_R_STAT_PRODUCTION_MODE_FNL_Field;
        Hw_Engine_Enabled         : LW_PRGNLCL_LWRNG_R_STAT_HW_ENGINE_ENABLED_Field;
        Engine_Enabled_Fnl        : LW_PRGNLCL_LWRNG_R_STAT_ENGINE_ENABLED_FNL_Field;
        Engine_Busy               : LW_PRGNLCL_LWRNG_R_STAT_ENGINE_BUSY_Field;
        Kat_Error                 : LW_PRGNLCL_LWRNG_R_STAT_KAT_ERROR_Field;
        Tamper_Error              : LW_PRGNLCL_LWRNG_R_STAT_TAMPER_ERROR_Field;
        Startup_Error             : LW_PRGNLCL_LWRNG_R_STAT_STARTUP_ERROR_Field;
        Drbg_Instantiated         : LW_PRGNLCL_LWRNG_R_STAT_DRBG_INSTANTIATED_Field;
        Reseed_Interval_Exhausted : LW_PRGNLCL_LWRNG_R_STAT_RESEED_INTERVAL_EXHAUSTED_Field;
        Nist_Ht_Rct_Error         : LW_PRGNLCL_LWRNG_R_STAT_NIST_HT_RCT_ERROR_Field;
        Nist_Ht_Apt_Error         : LW_PRGNLCL_LWRNG_R_STAT_NIST_HT_APT_ERROR_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_LWRNG_R_STAT_Register use record
        Hw_Production_Mode        at 0 range  0 ..  0;
        Production_Mode_Fnl       at 0 range  1 ..  1;
        Hw_Engine_Enabled         at 0 range  2 ..  2;
        Engine_Enabled_Fnl        at 0 range  3 ..  3;
        Engine_Busy               at 0 range  4 ..  4;
        Kat_Error                 at 0 range  8 ..  8;
        Tamper_Error              at 0 range  9 ..  9;
        Startup_Error             at 0 range 10 .. 10;
        Drbg_Instantiated         at 0 range 11 .. 11;
        Reseed_Interval_Exhausted at 0 range 12 .. 12;
        Nist_Ht_Rct_Error         at 0 range 16 .. 16;
        Nist_Ht_Apt_Error         at 0 range 17 .. 17;
    end record;

    type LW_PRGNLCL_LWRNG_R_CTRL0_SW_ENGINE_ENABLED_Field is (ENABLED_FALSE, ENABLED_TRUE) with
        Size => 1;
    for LW_PRGNLCL_LWRNG_R_CTRL0_SW_ENGINE_ENABLED_Field use (ENABLED_FALSE => 16#0#, ENABLED_TRUE => 16#1#);
    type LW_PRGNLCL_LWRNG_R_CTRL0_SLCG_OVR_Field is (OVR_FALSE, OVR_TRUE) with
        Size => 1;
    for LW_PRGNLCL_LWRNG_R_CTRL0_SLCG_OVR_Field use (OVR_FALSE => 16#0#, OVR_TRUE => 16#1#);

    type LW_PRGNLCL_LWRNG_R_CTRL0_Register is record
        Sw_Engine_Enabled : LW_PRGNLCL_LWRNG_R_CTRL0_SW_ENGINE_ENABLED_Field;
        Slcg_Ovr          : LW_PRGNLCL_LWRNG_R_CTRL0_SLCG_OVR_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_LWRNG_R_CTRL0_Register use record
        Sw_Engine_Enabled at 0 range  2 ..  2;
        Slcg_Ovr          at 0 range 31 .. 31;
    end record;

    type LW_PRGNLCL_LWRNG_R_CTRL1_SOFT_RST_Field is (RST_FALSE, RST_TRUE) with
        Size => 1;
    for LW_PRGNLCL_LWRNG_R_CTRL1_SOFT_RST_Field use (RST_FALSE => 16#0#, RST_TRUE => 16#1#);
    type LW_PRGNLCL_LWRNG_R_CTRL1_HALT_Field is (HALT_FALSE, HALT_TRUE) with
        Size => 1;
    for LW_PRGNLCL_LWRNG_R_CTRL1_HALT_Field use (HALT_FALSE => 16#0#, HALT_TRUE => 16#1#);

    type LW_PRGNLCL_LWRNG_R_CTRL1_Register is record
        Soft_Rst : LW_PRGNLCL_LWRNG_R_CTRL1_SOFT_RST_Field;
        Halt     : LW_PRGNLCL_LWRNG_R_CTRL1_HALT_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_LWRNG_R_CTRL1_Register use record
        Soft_Rst at 0 range 0 .. 0;
        Halt     at 0 range 4 .. 4;
    end record;

    type LW_PRGNLCL_LWRNG_R_OUTPUT_Register is record
        Data : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_LWRNG_R_OUTPUT_Register use record
        Data at 0 range 0 .. 31;
    end record;

    type LW_PRGNLCL_LWRNG_R_OUTPUT_STAT_SEL_Field is (SEL_NONE, SEL_SFIFO, SEL_DFIFO, SEL_NFIFO) with
        Size => 2;
    for LW_PRGNLCL_LWRNG_R_OUTPUT_STAT_SEL_Field use (SEL_NONE => 16#0#, SEL_SFIFO => 16#1#, SEL_DFIFO => 16#2#, SEL_NFIFO => 16#3#);
    type LW_PRGNLCL_LWRNG_R_OUTPUT_STAT_ERROR_Field is (ERROR_FALSE, ERROR_TRUE) with
        Size => 1;
    for LW_PRGNLCL_LWRNG_R_OUTPUT_STAT_ERROR_Field use (ERROR_FALSE => 16#0#, ERROR_TRUE => 16#1#);

    type LW_PRGNLCL_LWRNG_R_OUTPUT_STAT_Register is record
        Sel   : LW_PRGNLCL_LWRNG_R_OUTPUT_STAT_SEL_Field;
        Error : LW_PRGNLCL_LWRNG_R_OUTPUT_STAT_ERROR_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_LWRNG_R_OUTPUT_STAT_Register use record
        Sel   at 0 range  0 ..  1;
        Error at 0 range 31 .. 31;
    end record;

    LW_PRGNLCL_LWRNG_DFIFO_STAT_NUM_RESET : constant NvU7 := 16#0#;
    type LW_PRGNLCL_LWRNG_DFIFO_STAT_EMPTY_Field is (EMPTY_FALSE, EMPTY_TRUE) with
        Size => 1;
    for LW_PRGNLCL_LWRNG_DFIFO_STAT_EMPTY_Field use (EMPTY_FALSE => 16#0#, EMPTY_TRUE => 16#1#);
    type LW_PRGNLCL_LWRNG_DFIFO_STAT_FULL_Field is (FULL_FALSE, FULL_TRUE) with
        Size => 1;
    for LW_PRGNLCL_LWRNG_DFIFO_STAT_FULL_Field use (FULL_FALSE => 16#0#, FULL_TRUE => 16#1#);

    type LW_PRGNLCL_LWRNG_DFIFO_STAT_Register is record
        Num   : NvU7;
        Empty : LW_PRGNLCL_LWRNG_DFIFO_STAT_EMPTY_Field;
        Full  : LW_PRGNLCL_LWRNG_DFIFO_STAT_FULL_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_LWRNG_DFIFO_STAT_Register use record
        Num   at 0 range  0 ..  6;
        Empty at 0 range 16 .. 16;
        Full  at 0 range 17 .. 17;
    end record;

    LW_PRGNLCL_LWRNG_NFIFO_STAT_NUM_RESET : constant NvU7 := 16#0#;
    type LW_PRGNLCL_LWRNG_NFIFO_STAT_EMPTY_Field is (EMPTY_FALSE, EMPTY_TRUE) with
        Size => 1;
    for LW_PRGNLCL_LWRNG_NFIFO_STAT_EMPTY_Field use (EMPTY_FALSE => 16#0#, EMPTY_TRUE => 16#1#);
    type LW_PRGNLCL_LWRNG_NFIFO_STAT_FULL_Field is (FULL_FALSE, FULL_TRUE) with
        Size => 1;
    for LW_PRGNLCL_LWRNG_NFIFO_STAT_FULL_Field use (FULL_FALSE => 16#0#, FULL_TRUE => 16#1#);

    type LW_PRGNLCL_LWRNG_NFIFO_STAT_Register is record
        Num   : NvU7;
        Empty : LW_PRGNLCL_LWRNG_NFIFO_STAT_EMPTY_Field;
        Full  : LW_PRGNLCL_LWRNG_NFIFO_STAT_FULL_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_LWRNG_NFIFO_STAT_Register use record
        Num   at 0 range  0 ..  6;
        Empty at 0 range 16 .. 16;
        Full  at 0 range 17 .. 17;
    end record;

    LW_PRGNLCL_LWRNG_SFIFO_STAT_NUM_RESET : constant NvU7 := 16#0#;
    type LW_PRGNLCL_LWRNG_SFIFO_STAT_EMPTY_Field is (EMPTY_FALSE, EMPTY_TRUE) with
        Size => 1;
    for LW_PRGNLCL_LWRNG_SFIFO_STAT_EMPTY_Field use (EMPTY_FALSE => 16#0#, EMPTY_TRUE => 16#1#);
    type LW_PRGNLCL_LWRNG_SFIFO_STAT_FULL_Field is (FULL_FALSE, FULL_TRUE) with
        Size => 1;
    for LW_PRGNLCL_LWRNG_SFIFO_STAT_FULL_Field use (FULL_FALSE => 16#0#, FULL_TRUE => 16#1#);

    type LW_PRGNLCL_LWRNG_SFIFO_STAT_Register is record
        Num   : NvU7;
        Empty : LW_PRGNLCL_LWRNG_SFIFO_STAT_EMPTY_Field;
        Full  : LW_PRGNLCL_LWRNG_SFIFO_STAT_FULL_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_LWRNG_SFIFO_STAT_Register use record
        Num   at 0 range  0 ..  6;
        Empty at 0 range 16 .. 16;
        Full  at 0 range 17 .. 17;
    end record;

    type LW_PRGNLCL_LWRNG_HWCFG10_Register is record
        Mqueue_Depth : NvU5;
        Client_M     : NvU6;
        Client_X     : NvU6;
        Client_Y     : NvU6;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_LWRNG_HWCFG10_Register use record
        Mqueue_Depth at 0 range  0 ..  4;
        Client_M     at 0 range  8 .. 13;
        Client_X     at 0 range 16 .. 21;
        Client_Y     at 0 range 24 .. 29;
    end record;

    type LW_PRGNLCL_LWRNG_B_LOCK10_B_P0BLF_CTL_Field is (CTL_UNLOCKED, CTL_LOCKED) with
        Size => 1;
    for LW_PRGNLCL_LWRNG_B_LOCK10_B_P0BLF_CTL_Field use (CTL_UNLOCKED => 16#0#, CTL_LOCKED => 16#1#);

    type LW_PRGNLCL_LWRNG_B_LOCK10_Register is record
        B_P0blf_Ctl : LW_PRGNLCL_LWRNG_B_LOCK10_B_P0BLF_CTL_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_LWRNG_B_LOCK10_Register use record
        B_P0blf_Ctl at 0 range 0 .. 0;
    end record;

    LW_PRGNLCL_LWRNG_B_MAP_MID0_QID_RESET : constant NvU6 := 16#0#;
    type LW_PRGNLCL_LWRNG_B_MAP_MID0_VALID_Field is (VALID_FALSE, VALID_TRUE) with
        Size => 1;
    for LW_PRGNLCL_LWRNG_B_MAP_MID0_VALID_Field use (VALID_FALSE => 16#0#, VALID_TRUE => 16#1#);
    LW_PRGNLCL_LWRNG_B_MAP_MID1_QID_RESET : constant NvU6 := 16#0#;
    type LW_PRGNLCL_LWRNG_B_MAP_MID1_VALID_Field is (VALID_FALSE, VALID_TRUE) with
        Size => 1;
    for LW_PRGNLCL_LWRNG_B_MAP_MID1_VALID_Field use (VALID_FALSE => 16#0#, VALID_TRUE => 16#1#);
    LW_PRGNLCL_LWRNG_B_MAP_MID2_QID_RESET : constant NvU6 := 16#0#;
    type LW_PRGNLCL_LWRNG_B_MAP_MID2_VALID_Field is (VALID_FALSE, VALID_TRUE) with
        Size => 1;
    for LW_PRGNLCL_LWRNG_B_MAP_MID2_VALID_Field use (VALID_FALSE => 16#0#, VALID_TRUE => 16#1#);
    LW_PRGNLCL_LWRNG_B_MAP_MID3_QID_RESET : constant NvU6 := 16#0#;
    type LW_PRGNLCL_LWRNG_B_MAP_MID3_VALID_Field is (VALID_FALSE, VALID_TRUE) with
        Size => 1;
    for LW_PRGNLCL_LWRNG_B_MAP_MID3_VALID_Field use (VALID_FALSE => 16#0#, VALID_TRUE => 16#1#);

    type LW_PRGNLCL_LWRNG_B_MAP_Register is record
        Mid0_Qid   : NvU6;
        Mid0_Valid : LW_PRGNLCL_LWRNG_B_MAP_MID0_VALID_Field;
        Mid1_Qid   : NvU6;
        Mid1_Valid : LW_PRGNLCL_LWRNG_B_MAP_MID1_VALID_Field;
        Mid2_Qid   : NvU6;
        Mid2_Valid : LW_PRGNLCL_LWRNG_B_MAP_MID2_VALID_Field;
        Mid3_Qid   : NvU6;
        Mid3_Valid : LW_PRGNLCL_LWRNG_B_MAP_MID3_VALID_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_LWRNG_B_MAP_Register use record
        Mid0_Qid   at 0 range  0 ..  5;
        Mid0_Valid at 0 range  7 ..  7;
        Mid1_Qid   at 0 range  8 .. 13;
        Mid1_Valid at 0 range 15 .. 15;
        Mid2_Qid   at 0 range 16 .. 21;
        Mid2_Valid at 0 range 23 .. 23;
        Mid3_Qid   at 0 range 24 .. 29;
        Mid3_Valid at 0 range 31 .. 31;
    end record;

    LW_PRGNLCL_LWRNG_B_P0BLF_CTL_MSTR_ID_RESET : constant NvU6 := 16#0#;
    type LW_PRGNLCL_LWRNG_B_P0BLF_CTL_REN_Field is (REN_FALSE, REN_TRUE) with
        Size => 1;
    for LW_PRGNLCL_LWRNG_B_P0BLF_CTL_REN_Field use (REN_FALSE => 16#0#, REN_TRUE => 16#1#);
    type LW_PRGNLCL_LWRNG_B_P0BLF_CTL_WEN_Field is (WEN_FALSE, WEN_TRUE) with
        Size => 1;
    for LW_PRGNLCL_LWRNG_B_P0BLF_CTL_WEN_Field use (WEN_FALSE => 16#0#, WEN_TRUE => 16#1#);

    type LW_PRGNLCL_LWRNG_B_P0BLF_CTL_Register is record
        Mstr_Id : NvU6;
        Ren     : LW_PRGNLCL_LWRNG_B_P0BLF_CTL_REN_Field;
        Wen     : LW_PRGNLCL_LWRNG_B_P0BLF_CTL_WEN_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_LWRNG_B_P0BLF_CTL_Register use record
        Mstr_Id at 0 range  0 ..  5;
        Ren     at 0 range 16 .. 16;
        Wen     at 0 range 17 .. 17;
    end record;

    type LW_PRGNLCL_LWRNG_DFIFO_OUT_VALID_Field is (VALID_FALSE, VALID_TRUE) with
        Size => 1;
    for LW_PRGNLCL_LWRNG_DFIFO_OUT_VALID_Field use (VALID_FALSE => 16#0#, VALID_TRUE => 16#1#);

    type LW_PRGNLCL_LWRNG_DFIFO_OUT_Register is record
        Data  : NvU16;
        Valid : LW_PRGNLCL_LWRNG_DFIFO_OUT_VALID_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_LWRNG_DFIFO_OUT_Register use record
        Data  at 0 range  0 .. 15;
        Valid at 0 range 31 .. 31;
    end record;

    type LW_PRGNLCL_LWRNG_NFIFO_OUT_VALID_Field is (VALID_FALSE, VALID_TRUE) with
        Size => 1;
    for LW_PRGNLCL_LWRNG_NFIFO_OUT_VALID_Field use (VALID_FALSE => 16#0#, VALID_TRUE => 16#1#);

    type LW_PRGNLCL_LWRNG_NFIFO_OUT_Register is record
        Data  : NvU16;
        Valid : LW_PRGNLCL_LWRNG_NFIFO_OUT_VALID_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_LWRNG_NFIFO_OUT_Register use record
        Data  at 0 range  0 .. 15;
        Valid at 0 range 31 .. 31;
    end record;

    LW_PRGNLCL_GDMA_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#f#;
    LW_PRGNLCL_GDMA_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_GDMA_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_GDMA_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_GDMA_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_GDMA_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    LW_PRGNLCL_GDMA_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    type LW_PRGNLCL_GDMA_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_GDMA_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_GDMA_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_GDMA_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_GDMA_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_GDMA_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_GDMA_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_GDMA_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_GDMA_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED  : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_GDMA_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_DISABLED : constant NvU20 := 16#0#;
    LW_PRGNLCL_GDMA_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE      : constant       := 16#1#;
    LW_PRGNLCL_GDMA_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE     : constant       := 16#0#;
    LW_PRGNLCL_GDMA_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE      : constant       := 16#1#;
    LW_PRGNLCL_GDMA_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE     : constant       := 16#0#;
    LW_PRGNLCL_GDMA_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE      : constant       := 16#1#;
    LW_PRGNLCL_GDMA_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE     : constant       := 16#0#;
    LW_PRGNLCL_GDMA_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE      : constant       := 16#1#;
    LW_PRGNLCL_GDMA_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE     : constant       := 16#0#;
    LW_PRGNLCL_GDMA_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_GDMA_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_GDMA_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_GDMA_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_GDMA_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_GDMA_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_GDMA_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_GDMA_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;

    type LW_PRGNLCL_GDMA_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_GDMA_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_GDMA_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_GDMA_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_GDMA_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_GDMA_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    type LW_PRGNLCL_GDMA_IRQSTAT_CHAN0_Field is (CHAN0_FALSE, CHAN0_TRUE) with
        Size => 1;
    for LW_PRGNLCL_GDMA_IRQSTAT_CHAN0_Field use (CHAN0_FALSE => 16#0#, CHAN0_TRUE => 16#1#);
    type LW_PRGNLCL_GDMA_IRQSTAT_CHAN1_Field is (CHAN1_FALSE, CHAN1_TRUE) with
        Size => 1;
    for LW_PRGNLCL_GDMA_IRQSTAT_CHAN1_Field use (CHAN1_FALSE => 16#0#, CHAN1_TRUE => 16#1#);
    type LW_PRGNLCL_GDMA_IRQSTAT_CHAN2_Field is (CHAN2_FALSE, CHAN2_TRUE) with
        Size => 1;
    for LW_PRGNLCL_GDMA_IRQSTAT_CHAN2_Field use (CHAN2_FALSE => 16#0#, CHAN2_TRUE => 16#1#);
    type LW_PRGNLCL_GDMA_IRQSTAT_CHAN3_Field is (CHAN3_FALSE, CHAN3_TRUE) with
        Size => 1;
    for LW_PRGNLCL_GDMA_IRQSTAT_CHAN3_Field use (CHAN3_FALSE => 16#0#, CHAN3_TRUE => 16#1#);

    type LW_PRGNLCL_GDMA_IRQSTAT_Register is record
        Chan0 : LW_PRGNLCL_GDMA_IRQSTAT_CHAN0_Field;
        Chan1 : LW_PRGNLCL_GDMA_IRQSTAT_CHAN1_Field;
        Chan2 : LW_PRGNLCL_GDMA_IRQSTAT_CHAN2_Field;
        Chan3 : LW_PRGNLCL_GDMA_IRQSTAT_CHAN3_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_GDMA_IRQSTAT_Register use record
        Chan0 at 0 range 0 .. 0;
        Chan1 at 0 range 1 .. 1;
        Chan2 at 0 range 2 .. 2;
        Chan3 at 0 range 3 .. 3;
    end record;

    type LW_PRGNLCL_GDMA_STATUS_CHAN0_BUSY_Field is (BUSY_FALSE, BUSY_TRUE) with
        Size => 1;
    for LW_PRGNLCL_GDMA_STATUS_CHAN0_BUSY_Field use (BUSY_FALSE => 16#0#, BUSY_TRUE => 16#1#);
    type LW_PRGNLCL_GDMA_STATUS_CHAN1_BUSY_Field is (BUSY_FALSE, BUSY_TRUE) with
        Size => 1;
    for LW_PRGNLCL_GDMA_STATUS_CHAN1_BUSY_Field use (BUSY_FALSE => 16#0#, BUSY_TRUE => 16#1#);
    type LW_PRGNLCL_GDMA_STATUS_CHAN2_BUSY_Field is (BUSY_FALSE, BUSY_TRUE) with
        Size => 1;
    for LW_PRGNLCL_GDMA_STATUS_CHAN2_BUSY_Field use (BUSY_FALSE => 16#0#, BUSY_TRUE => 16#1#);
    type LW_PRGNLCL_GDMA_STATUS_CHAN3_BUSY_Field is (BUSY_FALSE, BUSY_TRUE) with
        Size => 1;
    for LW_PRGNLCL_GDMA_STATUS_CHAN3_BUSY_Field use (BUSY_FALSE => 16#0#, BUSY_TRUE => 16#1#);

    type LW_PRGNLCL_GDMA_STATUS_Register is record
        Chan0_Busy : LW_PRGNLCL_GDMA_STATUS_CHAN0_BUSY_Field;
        Chan1_Busy : LW_PRGNLCL_GDMA_STATUS_CHAN1_BUSY_Field;
        Chan2_Busy : LW_PRGNLCL_GDMA_STATUS_CHAN2_BUSY_Field;
        Chan3_Busy : LW_PRGNLCL_GDMA_STATUS_CHAN3_BUSY_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_GDMA_STATUS_Register use record
        Chan0_Busy at 0 range 0 .. 0;
        Chan1_Busy at 0 range 1 .. 1;
        Chan2_Busy at 0 range 2 .. 2;
        Chan3_Busy at 0 range 3 .. 3;
    end record;

    LW_PRGNLCL_GDMA_CFG_CHANS_VAL : constant NvU5 := 16#2#;

    type LW_PRGNLCL_GDMA_CFG_Register is record
        Chans : NvU5;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_GDMA_CFG_Register use record
        Chans at 0 range 0 .. 4;
    end record;

    type LW_PRGNLCL_GDMA_IRQ_CTRL_CHAN0_DIS_Field is (DIS_FALSE, DIS_TRUE) with
        Size => 1;
    for LW_PRGNLCL_GDMA_IRQ_CTRL_CHAN0_DIS_Field use (DIS_FALSE => 16#0#, DIS_TRUE => 16#1#);
    type LW_PRGNLCL_GDMA_IRQ_CTRL_CHAN1_DIS_Field is (DIS_FALSE, DIS_TRUE) with
        Size => 1;
    for LW_PRGNLCL_GDMA_IRQ_CTRL_CHAN1_DIS_Field use (DIS_FALSE => 16#0#, DIS_TRUE => 16#1#);
    type LW_PRGNLCL_GDMA_IRQ_CTRL_CHAN2_DIS_Field is (DIS_FALSE, DIS_TRUE) with
        Size => 1;
    for LW_PRGNLCL_GDMA_IRQ_CTRL_CHAN2_DIS_Field use (DIS_FALSE => 16#0#, DIS_TRUE => 16#1#);
    type LW_PRGNLCL_GDMA_IRQ_CTRL_CHAN3_DIS_Field is (DIS_FALSE, DIS_TRUE) with
        Size => 1;
    for LW_PRGNLCL_GDMA_IRQ_CTRL_CHAN3_DIS_Field use (DIS_FALSE => 16#0#, DIS_TRUE => 16#1#);

    type LW_PRGNLCL_GDMA_IRQ_CTRL_Register is record
        Chan0_Dis : LW_PRGNLCL_GDMA_IRQ_CTRL_CHAN0_DIS_Field;
        Chan1_Dis : LW_PRGNLCL_GDMA_IRQ_CTRL_CHAN1_DIS_Field;
        Chan2_Dis : LW_PRGNLCL_GDMA_IRQ_CTRL_CHAN2_DIS_Field;
        Chan3_Dis : LW_PRGNLCL_GDMA_IRQ_CTRL_CHAN3_DIS_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_GDMA_IRQ_CTRL_Register use record
        Chan0_Dis at 0 range 0 .. 0;
        Chan1_Dis at 0 range 1 .. 1;
        Chan2_Dis at 0 range 2 .. 2;
        Chan3_Dis at 0 range 3 .. 3;
    end record;

    LW_PRGNLCL_GDMA_CHAN_CONTROL_CLEAR_COMPLETE_IRQ_TRUE : constant NvU1 := 16#1#;
    LW_PRGNLCL_GDMA_CHAN_CONTROL_CLEAR_ERROR_IRQ_TRUE    : constant NvU1 := 16#1#;
    LW_PRGNLCL_GDMA_CHAN_CONTROL_RESET_TRUE              : constant NvU1 := 16#1#;

    type LW_PRGNLCL_GDMA_CHAN_CONTROL_Register is record
        Clear_Complete_Irq : NvU1;
        Clear_Error_Irq    : NvU1;
        Reset              : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_GDMA_CHAN_CONTROL_Register use record
        Clear_Complete_Irq at 0 range 0 .. 0;
        Clear_Error_Irq    at 0 range 1 .. 1;
        Reset              at 0 range 2 .. 2;
    end record;

    type LW_PRGNLCL_GDMA_CHAN_COMMON_CONFIG_MEMQ_Field is (MEMQ_FALSE, MEMQ_TRUE) with
        Size => 1;
    for LW_PRGNLCL_GDMA_CHAN_COMMON_CONFIG_MEMQ_Field use (MEMQ_FALSE => 16#0#, MEMQ_TRUE => 16#1#);
    LW_PRGNLCL_GDMA_CHAN_COMMON_CONFIG_RR_WEIGHT_INIT : constant NvU4 := 16#7#;
    type LW_PRGNLCL_GDMA_CHAN_COMMON_CONFIG_MAX_INFLIGHT_Field is
        (INFLIGHT_UNLIMITED, INFLIGHT_64B, INFLIGHT_128B, INFLIGHT_256B, INFLIGHT_512B, INFLIGHT_1KB, INFLIGHT_2KB, INFLIGHT_4KB) with
        Size => 3;
    for LW_PRGNLCL_GDMA_CHAN_COMMON_CONFIG_MAX_INFLIGHT_Field use
        (INFLIGHT_UNLIMITED => 16#0#, INFLIGHT_64B => 16#1#, INFLIGHT_128B => 16#2#, INFLIGHT_256B => 16#3#, INFLIGHT_512B => 16#4#, INFLIGHT_1KB => 16#5#, INFLIGHT_2KB => 16#6#,
         INFLIGHT_4KB       => 16#7#);
    type LW_PRGNLCL_GDMA_CHAN_COMMON_CONFIG_RESET_CYA_Field is (CYA_DISABLED, CYA_ENABLED) with
        Size => 1;
    for LW_PRGNLCL_GDMA_CHAN_COMMON_CONFIG_RESET_CYA_Field use (CYA_DISABLED => 16#0#, CYA_ENABLED => 16#1#);

    type LW_PRGNLCL_GDMA_CHAN_COMMON_CONFIG_Register is record
        Memq         : LW_PRGNLCL_GDMA_CHAN_COMMON_CONFIG_MEMQ_Field;
        Rr_Weight    : NvU4;
        Max_Inflight : LW_PRGNLCL_GDMA_CHAN_COMMON_CONFIG_MAX_INFLIGHT_Field;
        Reset_Cya    : LW_PRGNLCL_GDMA_CHAN_COMMON_CONFIG_RESET_CYA_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_GDMA_CHAN_COMMON_CONFIG_Register use record
        Memq         at 0 range  0 ..  0;
        Rr_Weight    at 0 range  4 ..  7;
        Max_Inflight at 0 range  8 .. 10;
        Reset_Cya    at 0 range 11 .. 11;
    end record;

    LW_PRGNLCL_GDMA_CHAN_MEMQ_CONFIG_START_ADDR_INIT     : constant NvU27 := 16#0#;
    LW_PRGNLCL_GDMA_CHAN_MEMQ_CONFIG_START_LOG_SIZE_INIT : constant NvU5  := 16#0#;

    type LW_PRGNLCL_GDMA_CHAN_MEMQ_CONFIG_Register is record
        Start_Addr     : NvU27;
        Start_Log_Size : NvU5;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_GDMA_CHAN_MEMQ_CONFIG_Register use record
        Start_Addr     at 0 range 5 .. 31;
        Start_Log_Size at 0 range 0 ..  4;
    end record;

    type LW_PRGNLCL_GDMA_CHAN_MEMQ_PRODUCE_Register is record
        Val : NvU8;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_GDMA_CHAN_MEMQ_PRODUCE_Register use record
        Val at 0 range 0 .. 7;
    end record;

    LW_PRGNLCL_GDMA_CHAN_SRC_ADDR_VAL_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_GDMA_CHAN_SRC_ADDR_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_GDMA_CHAN_SRC_ADDR_Register use record
        Val at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_GDMA_CHAN_SRC_ADDR_HI_VAL_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_GDMA_CHAN_SRC_ADDR_HI_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_GDMA_CHAN_SRC_ADDR_HI_Register use record
        Val at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_GDMA_CHAN_DEST_ADDR_VAL_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_GDMA_CHAN_DEST_ADDR_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_GDMA_CHAN_DEST_ADDR_Register use record
        Val at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_GDMA_CHAN_DEST_ADDR_HI_VAL_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_GDMA_CHAN_DEST_ADDR_HI_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_GDMA_CHAN_DEST_ADDR_HI_Register use record
        Val at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_GDMA_CHAN_TRANS_CONFIG0_LENGTH_INIT : constant NvU22 := 16#0#;
    type LW_PRGNLCL_GDMA_CHAN_TRANS_CONFIG0_SUBCHAN_Field is (SUBCHAN_0, SUBCHAN_1) with
        Size => 1;
    for LW_PRGNLCL_GDMA_CHAN_TRANS_CONFIG0_SUBCHAN_Field use (SUBCHAN_0 => 16#0#, SUBCHAN_1 => 16#1#);
    type LW_PRGNLCL_GDMA_CHAN_TRANS_CONFIG0_COMPLETE_IRQEN_Field is (IRQEN_FALSE, IRQEN_TRUE) with
        Size => 1;
    for LW_PRGNLCL_GDMA_CHAN_TRANS_CONFIG0_COMPLETE_IRQEN_Field use (IRQEN_FALSE => 16#0#, IRQEN_TRUE => 16#1#);
    type LW_PRGNLCL_GDMA_CHAN_TRANS_CONFIG0_LAUNCH_Field is (LAUNCH_FALSE, LAUNCH_TRUE) with
        Size => 1;
    for LW_PRGNLCL_GDMA_CHAN_TRANS_CONFIG0_LAUNCH_Field use (LAUNCH_FALSE => 16#0#, LAUNCH_TRUE => 16#1#);

    type LW_PRGNLCL_GDMA_CHAN_TRANS_CONFIG0_Register is record
        Length         : NvU22;
        Subchan        : LW_PRGNLCL_GDMA_CHAN_TRANS_CONFIG0_SUBCHAN_Field;
        Complete_Irqen : LW_PRGNLCL_GDMA_CHAN_TRANS_CONFIG0_COMPLETE_IRQEN_Field;
        Launch         : LW_PRGNLCL_GDMA_CHAN_TRANS_CONFIG0_LAUNCH_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_GDMA_CHAN_TRANS_CONFIG0_Register use record
        Length         at 0 range  2 .. 23;
        Subchan        at 0 range 24 .. 24;
        Complete_Irqen at 0 range 28 .. 28;
        Launch         at 0 range 31 .. 31;
    end record;

    type LW_PRGNLCL_GDMA_CHAN_TRANS_CONFIG1_SRC_ADDR_MODE_Field is (MODE_INC, MODE_FIX, MODE_WRAP, MODE_STRIDE) with
        Size => 3;
    for LW_PRGNLCL_GDMA_CHAN_TRANS_CONFIG1_SRC_ADDR_MODE_Field use (MODE_INC => 16#0#, MODE_FIX => 16#1#, MODE_WRAP => 16#2#, MODE_STRIDE => 16#3#);
    type LW_PRGNLCL_GDMA_CHAN_TRANS_CONFIG1_DEST_ADDR_MODE_Field is (MODE_INC, MODE_FIX, MODE_WRAP, MODE_STRIDE) with
        Size => 3;
    for LW_PRGNLCL_GDMA_CHAN_TRANS_CONFIG1_DEST_ADDR_MODE_Field use (MODE_INC => 16#0#, MODE_FIX => 16#1#, MODE_WRAP => 16#2#, MODE_STRIDE => 16#3#);
    LW_PRGNLCL_GDMA_CHAN_TRANS_CONFIG1_WRAP_LEN_INIT    : constant NvU8 := 16#0#;
    LW_PRGNLCL_GDMA_CHAN_TRANS_CONFIG1_STRIDE_LENLOG_4B : constant NvU5 := 16#0#;
    type LW_PRGNLCL_GDMA_CHAN_TRANS_CONFIG1_DEST_POSTED_Field is (POSTED_FALSE, POSTED_TRUE) with
        Size => 1;
    for LW_PRGNLCL_GDMA_CHAN_TRANS_CONFIG1_DEST_POSTED_Field use (POSTED_FALSE => 16#0#, POSTED_TRUE => 16#1#);

    type LW_PRGNLCL_GDMA_CHAN_TRANS_CONFIG1_Register is record
        Src_Addr_Mode  : LW_PRGNLCL_GDMA_CHAN_TRANS_CONFIG1_SRC_ADDR_MODE_Field;
        Dest_Addr_Mode : LW_PRGNLCL_GDMA_CHAN_TRANS_CONFIG1_DEST_ADDR_MODE_Field;
        Wrap_Len       : NvU8;
        Stride_Lenlog  : NvU5;
        Dest_Posted    : LW_PRGNLCL_GDMA_CHAN_TRANS_CONFIG1_DEST_POSTED_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_GDMA_CHAN_TRANS_CONFIG1_Register use record
        Src_Addr_Mode  at 0 range  0 ..  2;
        Dest_Addr_Mode at 0 range  4 ..  6;
        Wrap_Len       at 0 range  8 .. 15;
        Stride_Lenlog  at 0 range 16 .. 20;
        Dest_Posted    at 0 range 24 .. 24;
    end record;

    LW_PRGNLCL_GDMA_CHAN_TRANS_CONFIG2_SRC_INIT  : constant NvU16 := 16#0#;
    LW_PRGNLCL_GDMA_CHAN_TRANS_CONFIG2_DEST_INIT : constant NvU16 := 16#0#;

    type LW_PRGNLCL_GDMA_CHAN_TRANS_CONFIG2_Register is record
        Src  : NvU16;
        Dest : NvU16;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_GDMA_CHAN_TRANS_CONFIG2_Register use record
        Src  at 0 range  0 .. 15;
        Dest at 0 range 16 .. 31;
    end record;

    type LW_PRGNLCL_GDMA_CHAN_STATUS_BUSY_Field is (BUSY_FALSE, BUSY_TRUE) with
        Size => 1;
    for LW_PRGNLCL_GDMA_CHAN_STATUS_BUSY_Field use (BUSY_FALSE => 16#0#, BUSY_TRUE => 16#1#);
    type LW_PRGNLCL_GDMA_CHAN_STATUS_COMPLETE_IRQ_Field is (IRQ_FALSE, IRQ_TRUE) with
        Size => 1;
    for LW_PRGNLCL_GDMA_CHAN_STATUS_COMPLETE_IRQ_Field use (IRQ_FALSE => 16#0#, IRQ_TRUE => 16#1#);
    type LW_PRGNLCL_GDMA_CHAN_STATUS_ERROR_IRQ_Field is (IRQ_FALSE, IRQ_TRUE) with
        Size => 1;
    for LW_PRGNLCL_GDMA_CHAN_STATUS_ERROR_IRQ_Field use (IRQ_FALSE => 16#0#, IRQ_TRUE => 16#1#);
    type LW_PRGNLCL_GDMA_CHAN_STATUS_ERROR_VLD_Field is (VLD_FALSE, VLD_TRUE) with
        Size => 1;
    for LW_PRGNLCL_GDMA_CHAN_STATUS_ERROR_VLD_Field use (VLD_FALSE => 16#0#, VLD_TRUE => 16#1#);
    type LW_PRGNLCL_GDMA_CHAN_STATUS_ERROR_IS_READ_Field is (READ_FALSE, READ_TRUE) with
        Size => 1;
    for LW_PRGNLCL_GDMA_CHAN_STATUS_ERROR_IS_READ_Field use (READ_FALSE => 16#0#, READ_TRUE => 16#1#);
    type LW_PRGNLCL_GDMA_CHAN_STATUS_FAULTED_Field is (FAULTED_FALSE, FAULTED_TRUE) with
        Size => 1;
    for LW_PRGNLCL_GDMA_CHAN_STATUS_FAULTED_Field use (FAULTED_FALSE => 16#0#, FAULTED_TRUE => 16#1#);
    LW_PRGNLCL_GDMA_CHAN_STATUS_ERROR_CAUSE_REQ_OVERFLOW  : constant NvU4 := 16#0#;
    LW_PRGNLCL_GDMA_CHAN_STATUS_ERROR_CAUSE_VA_FAULT      : constant NvU4 := 16#1#;
    LW_PRGNLCL_GDMA_CHAN_STATUS_ERROR_CAUSE_PA_FAULT      : constant NvU4 := 16#2#;
    LW_PRGNLCL_GDMA_CHAN_STATUS_ERROR_CAUSE_INVALID_COMB  : constant NvU4 := 16#3#;
    LW_PRGNLCL_GDMA_CHAN_STATUS_ERROR_CAUSE_IOPMP_FAULT   : constant NvU4 := 16#4#;
    LW_PRGNLCL_GDMA_CHAN_STATUS_ERROR_CAUSE_BUS_ERROR_ACK : constant NvU4 := 16#5#;
    LW_PRGNLCL_GDMA_CHAN_STATUS_REQ_QUEUE_SPACE_INIT      : constant NvU6 := 16#10#;

    type LW_PRGNLCL_GDMA_CHAN_STATUS_Register is record
        Busy            : LW_PRGNLCL_GDMA_CHAN_STATUS_BUSY_Field;
        Complete_Irq    : LW_PRGNLCL_GDMA_CHAN_STATUS_COMPLETE_IRQ_Field;
        Error_Irq       : LW_PRGNLCL_GDMA_CHAN_STATUS_ERROR_IRQ_Field;
        Error_Vld       : LW_PRGNLCL_GDMA_CHAN_STATUS_ERROR_VLD_Field;
        Error_Is_Read   : LW_PRGNLCL_GDMA_CHAN_STATUS_ERROR_IS_READ_Field;
        Faulted         : LW_PRGNLCL_GDMA_CHAN_STATUS_FAULTED_Field;
        Error_Cause     : NvU4;
        Req_Queue_Space : NvU6;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_GDMA_CHAN_STATUS_Register use record
        Busy            at 0 range  0 ..  0;
        Complete_Irq    at 0 range  4 ..  4;
        Error_Irq       at 0 range  8 ..  8;
        Error_Vld       at 0 range  9 ..  9;
        Error_Is_Read   at 0 range 10 .. 10;
        Faulted         at 0 range 11 .. 11;
        Error_Cause     at 0 range 12 .. 15;
        Req_Queue_Space at 0 range 16 .. 21;
    end record;

    LW_PRGNLCL_GDMA_CHAN_REQ_PRODUCE_VAL_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_GDMA_CHAN_REQ_PRODUCE_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_GDMA_CHAN_REQ_PRODUCE_Register use record
        Val at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_GDMA_CHAN_REQ_CONSUME_VAL_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_GDMA_CHAN_REQ_CONSUME_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_GDMA_CHAN_REQ_CONSUME_Register use record
        Val at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_GDMA_CHAN_REQ_COMPLETE_VAL_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_GDMA_CHAN_REQ_COMPLETE_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_GDMA_CHAN_REQ_COMPLETE_Register use record
        Val at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_GDMA_CHAN_REQ_ERROR_VAL_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_GDMA_CHAN_REQ_ERROR_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_GDMA_CHAN_REQ_ERROR_Register use record
        Val at 0 range 0 .. 31;
    end record;

    -- offsets of registers --
    LW_PRGNLCL_FALCON_ENGCTL_PRIV_LEVEL_MASK_Address                 : constant := 16#140_027c#;
    LW_PRGNLCL_FALCON_IMEM_PRIV_LEVEL_MASK_Address                   : constant := 16#140_0280#;
    LW_PRGNLCL_FALCON_DMEM_PRIV_LEVEL_MASK_Address                   : constant := 16#140_0284#;
    LW_PRGNLCL_FALCON_CPUCTL_PRIV_LEVEL_MASK_Address                 : constant := 16#140_0288#;
    LW_PRGNLCL_FALCON_EXE_PRIV_LEVEL_MASK_Address                    : constant := 16#140_028c#;
    LW_PRGNLCL_FALCON_IRQTMR_PRIV_LEVEL_MASK_Address                 : constant := 16#140_0290#;
    LW_PRGNLCL_FALCON_MTHDCTX_PRIV_LEVEL_MASK_Address                : constant := 16#140_0294#;
    LW_PRGNLCL_FALCON_HSCTL_PRIV_LEVEL_MASK_Address                  : constant := 16#140_00e8#;
    LW_PRGNLCL_FALCON_DIODT_PRIV_LEVEL_MASK_Address                  : constant := 16#140_00ec#;
    LW_PRGNLCL_FALCON_DIODTA_PRIV_LEVEL_MASK_Address                 : constant := 16#140_00f0#;
    LW_PRGNLCL_FALCON_SCTL_PRIV_LEVEL_MASK_Address                   : constant := 16#140_0298#;
    LW_PRGNLCL_FALCON_WDTMR_PRIV_LEVEL_MASK_Address                  : constant := 16#140_029c#;
    LW_PRGNLCL_FALCON_PRIVSTATE_PRIV_LEVEL_MASK_Address              : constant := 16#140_03d0#;
    LW_PRGNLCL_FALCON_RESET_PRIV_LEVEL_MASK_Address                  : constant := 16#140_03c4#;
    LW_PRGNLCL_FALCON_CYA_CTL_PRIV_LEVEL_MASK_Address                : constant := 16#140_023c#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_0_PRIV_LEVEL_MASK_Address : constant := 16#140_03f0#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_1_PRIV_LEVEL_MASK_Address : constant := 16#140_03f4#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_2_PRIV_LEVEL_MASK_Address : constant := 16#140_03f8#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_3_PRIV_LEVEL_MASK_Address : constant := 16#140_03fc#;
    LW_PRGNLCL_FALCON_INTR_CTRL_PRIV_LEVEL_MASK_0_Address            : constant := 16#140_03d8#;
    LW_PRGNLCL_FALCON_INTR_CTRL_PRIV_LEVEL_MASK_1_Address            : constant := 16#140_03dc#;
    LW_PRGNLCL_FALCON_INTR_CTRL_PRIV_LEVEL_MASK_0_Size               : constant := 16#2#;
    LW_PRGNLCL_FALCON_INTR_RETRIGGER_PRIV_LEVEL_MASK_0_Address       : constant := 16#140_0230#;
    LW_PRGNLCL_FALCON_INTR_RETRIGGER_PRIV_LEVEL_MASK_1_Address       : constant := 16#140_0234#;
    LW_PRGNLCL_FALCON_INTR_RETRIGGER_PRIV_LEVEL_MASK_0_Size          : constant := 16#2#;
    LW_PRGNLCL_FALCON_PMB_IMEM_PRIV_LEVEL_MASK_0_Address             : constant := 16#140_018c#;
    LW_PRGNLCL_FALCON_PMB_IMEM_PRIV_LEVEL_MASK_0_Size                : constant := 16#1#;
    LW_PRGNLCL_FALCON_PMB_DMEM_PRIV_LEVEL_MASK_0_Address             : constant := 16#140_02b0#;
    LW_PRGNLCL_FALCON_PMB_DMEM_PRIV_LEVEL_MASK_1_Address             : constant := 16#140_02b4#;
    LW_PRGNLCL_FALCON_PMB_DMEM_PRIV_LEVEL_MASK_2_Address             : constant := 16#140_02b8#;
    LW_PRGNLCL_FALCON_PMB_DMEM_PRIV_LEVEL_MASK_3_Address             : constant := 16#140_02bc#;
    LW_PRGNLCL_FALCON_PMB_DMEM_PRIV_LEVEL_MASK_0_Size                : constant := 16#4#;
    LW_PRGNLCL_FALCON_DMA_PRIV_LEVEL_MASK_Address                    : constant := 16#140_0190#;
    LW_PRGNLCL_FALCON_BOOTVEC_PRIV_LEVEL_MASK_Address                : constant := 16#140_0194#;
    LW_PRGNLCL_FALCON_AMAP_PRIV_LEVEL_MASK_Address                   : constant := 16#140_0198#;
    LW_PRGNLCL_FALCON_TRACEBUF_PRIV_LEVEL_MASK_Address               : constant := 16#140_019c#;
    LW_PRGNLCL_FALCON_TMR_PRIV_LEVEL_MASK_Address                    : constant := 16#140_01a0#;
    LW_PRGNLCL_FALCON_IRQSCMASK_PRIV_LEVEL_MASK_Address              : constant := 16#140_01a4#;
    LW_PRGNLCL_FALCON_DBGCTL_PRIV_LEVEL_MASK_Address                 : constant := 16#140_01a8#;
    LW_PRGNLCL_FALCON_SAFETY_CTRL_PRIV_LEVEL_MASK_Address            : constant := 16#140_01b0#;
    LW_PRGNLCL_FALCON_NO_ACCESS_PRIV_LEVEL_MASK_Address              : constant := 16#140_01b8#;
    LW_PRGNLCL_FALCON_PTIMER_PRIV_LEVEL_MASK_Address                 : constant := 16#140_01bc#;
    LW_PRGNLCL_FALCON_IDLESTATE_PRIV_LEVEL_MASK_Address              : constant := 16#140_01e0#;
    LW_PRGNLCL_FALCON_ENG_STATE_PRIV_LEVEL_MASK_Address              : constant := 16#140_01e4#;
    LW_PRGNLCL_FALCON_CG2_PRIV_LEVEL_MASK_Address                    : constant := 16#140_01e8#;
    LW_PRGNLCL_FALCON_PM_PRIV_LEVEL_MASK_Address                     : constant := 16#140_01ec#;
    LW_PRGNLCL_FALCON_SP_MIN_PRIV_LEVEL_MASK_Address                 : constant := 16#140_01f0#;
    LW_PRGNLCL_FALCON_EXCI_PRIV_LEVEL_MASK_Address                   : constant := 16#140_01f4#;
    LW_PRGNLCL_FALCON_SVEC_SPR_PRIV_LEVEL_MASK_Address               : constant := 16#140_01f8#;
    LW_PRGNLCL_FALCON_BRKPT_PRIV_LEVEL_MASK_Address                  : constant := 16#140_01fc#;
    LW_PRGNLCL_FALCON_ICD_PRIV_LEVEL_MASK_Address                    : constant := 16#140_0220#;
    LW_PRGNLCL_FALCON_RSTAT0_PRIV_LEVEL_MASK_Address                 : constant := 16#140_0224#;
    LW_PRGNLCL_FALCON_EXTERR_PRIV_LEVEL_MASK_Address                 : constant := 16#140_0228#;
    LW_PRGNLCL_FALCON_CSBERR_PRIV_LEVEL_MASK_Address                 : constant := 16#140_022c#;
    LW_PRGNLCL_FALCON_IRQSSET_Address                                : constant := 16#140_0000#;
    LW_PRGNLCL_FALCON_IRQSCLR_Address                                : constant := 16#140_0004#;
    LW_PRGNLCL_FALCON_IRQSTAT_Address                                : constant := 16#140_0008#;
    LW_PRGNLCL_FALCON_IRQMODE_Address                                : constant := 16#140_000c#;
    LW_PRGNLCL_FALCON_IRQSCMASK_Address                              : constant := 16#140_00e0#;
    LW_PRGNLCL_FALCON_INTR_CTRL_0_Address                            : constant := 16#140_03e0#;
    LW_PRGNLCL_FALCON_INTR_CTRL_1_Address                            : constant := 16#140_03e4#;
    LW_PRGNLCL_FALCON_INTR_CTRL_0_Size                               : constant := 16#2#;
    LW_PRGNLCL_FALCON_INTR_RETRIGGER_0_Address                       : constant := 16#140_03e8#;
    LW_PRGNLCL_FALCON_INTR_RETRIGGER_1_Address                       : constant := 16#140_03ec#;
    LW_PRGNLCL_FALCON_INTR_RETRIGGER_0_Size                          : constant := 16#2#;
    LW_PRGNLCL_FALCON_IRQMSET_Address                                : constant := 16#140_0010#;
    LW_PRGNLCL_FALCON_IRQMCLR_Address                                : constant := 16#140_0014#;
    LW_PRGNLCL_FALCON_IRQMASK_Address                                : constant := 16#140_0018#;
    LW_PRGNLCL_FALCON_IRQDEST_Address                                : constant := 16#140_001c#;
    LW_PRGNLCL_FALCON_IRQDEST2_Address                               : constant := 16#140_003c#;
    LW_PRGNLCL_FALCON_GPTMRINT_Address                               : constant := 16#140_0020#;
    LW_PRGNLCL_FALCON_GPTMRVAL_Address                               : constant := 16#140_0024#;
    LW_PRGNLCL_FALCON_GPTMRCTL_Address                               : constant := 16#140_0028#;
    LW_PRGNLCL_FALCON_PTIMER0_Address                                : constant := 16#140_002c#;
    LW_PRGNLCL_FALCON_PTIMER1_Address                                : constant := 16#140_0030#;
    LW_PRGNLCL_FALCON_PTIMER_CTL_Address                             : constant := 16#140_03b4#;
    LW_PRGNLCL_FALCON_WDTMRVAL_Address                               : constant := 16#140_0034#;
    LW_PRGNLCL_FALCON_WDTMRCTL_Address                               : constant := 16#140_0038#;
    LW_PRGNLCL_FALCON_MTHDDATA_Address                               : constant := 16#140_0064#;
    LW_PRGNLCL_FALCON_MTHDID_Address                                 : constant := 16#140_0068#;
    LW_PRGNLCL_FALCON_MTHDWDAT_Address                               : constant := 16#140_006c#;
    LW_PRGNLCL_FALCON_MTHDCOUNT_Address                              : constant := 16#140_0070#;
    LW_PRGNLCL_FALCON_MTHDPOP_Address                                : constant := 16#140_0074#;
    LW_PRGNLCL_FALCON_MTHDRAMSZ_Address                              : constant := 16#140_0078#;
    LW_PRGNLCL_FALCON_CURCTX_Address                                 : constant := 16#140_0050#;
    LW_PRGNLCL_FALCON_NXTCTX_Address                                 : constant := 16#140_0054#;
    LW_PRGNLCL_FALCON_CTXACK_Address                                 : constant := 16#140_0058#;
    LW_PRGNLCL_FALCON_CURCTX2_Address                                : constant := 16#140_03c8#;
    LW_PRGNLCL_FALCON_NXTCTX2_Address                                : constant := 16#140_03cc#;
    LW_PRGNLCL_FALCON_CTXSW_ERROR_Address                            : constant := 16#140_03b0#;
    LW_PRGNLCL_FALCON_MAILBOX0_Address                               : constant := 16#140_0040#;
    LW_PRGNLCL_FALCON_MAILBOX1_Address                               : constant := 16#140_0044#;
    LW_PRGNLCL_FALCON_ITFEN_Address                                  : constant := 16#140_0048#;
    LW_PRGNLCL_FALCON_IDLESTATE_Address                              : constant := 16#140_004c#;
    LW_PRGNLCL_FALCON_FHSTATE_Address                                : constant := 16#140_005c#;
    LW_PRGNLCL_FALCON_PRIVSTATE_Address                              : constant := 16#140_0060#;
    LW_PRGNLCL_FALCON_SFTRESET_Address                               : constant := 16#140_007c#;
    LW_PRGNLCL_FALCON_ENGCTL_Address                                 : constant := 16#140_00a4#;
    LW_PRGNLCL_FALCON_ADDR_Address                                   : constant := 16#140_00ac#;
    LW_PRGNLCL_FALCON_PRICFG_Address                                 : constant := 16#140_00f8#;
    LW_PRGNLCL_FALCON_DMACTL_Address                                 : constant := 16#140_010c#;
    LW_PRGNLCL_FALCON_DMATRFBASE_Address                             : constant := 16#140_0110#;
    LW_PRGNLCL_FALCON_DMATRFMOFFS_Address                            : constant := 16#140_0114#;
    LW_PRGNLCL_FALCON_DMATRFCMD_Address                              : constant := 16#140_0118#;
    LW_PRGNLCL_FALCON_DMATRFFBOFFS_Address                           : constant := 16#140_011c#;
    LW_PRGNLCL_FALCON_DMAPOLL_FB_Address                             : constant := 16#140_0120#;
    LW_PRGNLCL_FALCON_DMAPOLL_CP_Address                             : constant := 16#140_0124#;
    LW_PRGNLCL_FALCON_DMATRFBASE1_Address                            : constant := 16#140_0128#;
    LW_PRGNLCL_FALCON_DMAINFO_FINISHED_FBRD_LOW_Address              : constant := 16#140_02c0#;
    LW_PRGNLCL_FALCON_DMAINFO_FINISHED_FBRD_HIGH_Address             : constant := 16#140_02c4#;
    LW_PRGNLCL_FALCON_DMAINFO_FINISHED_FBWR_LOW_Address              : constant := 16#140_02c8#;
    LW_PRGNLCL_FALCON_DMAINFO_FINISHED_FBWR_HIGH_Address             : constant := 16#140_02cc#;
    LW_PRGNLCL_FALCON_DMAINFO_CURRENT_FBRD_LOW_Address               : constant := 16#140_02d0#;
    LW_PRGNLCL_FALCON_DMAINFO_CURRENT_FBRD_HIGH_Address              : constant := 16#140_02d4#;
    LW_PRGNLCL_FALCON_DMAINFO_CURRENT_FBWR_LOW_Address               : constant := 16#140_02d8#;
    LW_PRGNLCL_FALCON_DMAINFO_CURRENT_FBWR_HIGH_Address              : constant := 16#140_02dc#;
    LW_PRGNLCL_FALCON_DMAINFO_CTL_Address                            : constant := 16#140_02e0#;
    LW_PRGNLCL_FALCON_DMAINFO_ERR_TAG_HIGH_Address                   : constant := 16#140_02e4#;
    LW_PRGNLCL_FALCON_DMAINFO_ERR_TAG_LOW_Address                    : constant := 16#140_02e8#;
    LW_PRGNLCL_FALCON_IMEMC_0_Address                                : constant := 16#140_0180#;
    LW_PRGNLCL_FALCON_IMEMC_0_Size                                   : constant := 16#1#;
    LW_PRGNLCL_FALCON_IMEMD_0_Address                                : constant := 16#140_0184#;
    LW_PRGNLCL_FALCON_IMEMD_0_Size                                   : constant := 16#1#;
    LW_PRGNLCL_FALCON_IMEMT_0_Address                                : constant := 16#140_0188#;
    LW_PRGNLCL_FALCON_IMEMT_0_Size                                   : constant := 16#1#;
    LW_PRGNLCL_FALCON_DMEMC_0_Address                                : constant := 16#140_01c0#;
    LW_PRGNLCL_FALCON_DMEMC_1_Address                                : constant := 16#140_01c8#;
    LW_PRGNLCL_FALCON_DMEMC_2_Address                                : constant := 16#140_01d0#;
    LW_PRGNLCL_FALCON_DMEMC_3_Address                                : constant := 16#140_01d8#;
    LW_PRGNLCL_FALCON_DMEMC_0_Size                                   : constant := 16#4#;
    LW_PRGNLCL_FALCON_DMEMD_0_Address                                : constant := 16#140_01c4#;
    LW_PRGNLCL_FALCON_DMEMD_1_Address                                : constant := 16#140_01cc#;
    LW_PRGNLCL_FALCON_DMEMD_2_Address                                : constant := 16#140_01d4#;
    LW_PRGNLCL_FALCON_DMEMD_3_Address                                : constant := 16#140_01dc#;
    LW_PRGNLCL_FALCON_DMEMD_0_Size                                   : constant := 16#4#;
    LW_PRGNLCL_FALCON_DMEMT_0_Address                                : constant := 16#140_0210#;
    LW_PRGNLCL_FALCON_DMEMT_1_Address                                : constant := 16#140_0214#;
    LW_PRGNLCL_FALCON_DMEMT_2_Address                                : constant := 16#140_0218#;
    LW_PRGNLCL_FALCON_DMEMT_3_Address                                : constant := 16#140_021c#;
    LW_PRGNLCL_FALCON_DMEMT_0_Size                                   : constant := 16#4#;
    LW_PRGNLCL_FALCON_DMEML_0_Address                                : constant := 16#140_02a0#;
    LW_PRGNLCL_FALCON_DMEML_1_Address                                : constant := 16#140_02a4#;
    LW_PRGNLCL_FALCON_DMEML_2_Address                                : constant := 16#140_02a8#;
    LW_PRGNLCL_FALCON_DMEML_3_Address                                : constant := 16#140_02ac#;
    LW_PRGNLCL_FALCON_DMEML_0_Size                                   : constant := 16#4#;
    LW_PRGNLCL_FALCON_LOCKPMB_Address                                : constant := 16#140_0170#;
    LW_PRGNLCL_FALCON_DMEM_DUMMY_Address                             : constant := 16#140_0258#;
    LW_PRGNLCL_FALCON_IMEM_DUMMY_Address                             : constant := 16#140_01b4#;
    LW_PRGNLCL_FALCON_DIO_RESET_DELAY_Address                        : constant := 16#140_0274#;
    LW_PRGNLCL_FALCON_DOC_CTRL_Address                               : constant := 16#140_0340#;
    LW_PRGNLCL_FALCON_DOC_D0_Address                                 : constant := 16#140_0344#;
    LW_PRGNLCL_FALCON_DOC_D1_Address                                 : constant := 16#140_0348#;
    LW_PRGNLCL_FALCON_DOC_D2_Address                                 : constant := 16#140_034c#;
    LW_PRGNLCL_FALCON_DIC_CTRL_Address                               : constant := 16#140_0350#;
    LW_PRGNLCL_FALCON_DIC_D0_Address                                 : constant := 16#140_0354#;
    LW_PRGNLCL_FALCON_DIC_D1_Address                                 : constant := 16#140_0358#;
    LW_PRGNLCL_FALCON_DIC_D2_Address                                 : constant := 16#140_035c#;
    LW_PRGNLCL_FALCON_DIO_ERR_Address                                : constant := 16#140_0360#;
    LW_PRGNLCL_FALCON_DIO_DOC_CTRL_0_Address                         : constant := 16#140_0370#;
    LW_PRGNLCL_FALCON_DIO_DOC_CTRL_0_Size                            : constant := 16#1#;
    LW_PRGNLCL_FALCON_DIO_DOC_D0_0_Address                           : constant := 16#140_0374#;
    LW_PRGNLCL_FALCON_DIO_DOC_D0_0_Size                              : constant := 16#1#;
    LW_PRGNLCL_FALCON_DIO_DOC_D1_0_Address                           : constant := 16#140_0378#;
    LW_PRGNLCL_FALCON_DIO_DOC_D1_0_Size                              : constant := 16#1#;
    LW_PRGNLCL_FALCON_DIO_DOC_D2_0_Address                           : constant := 16#140_037c#;
    LW_PRGNLCL_FALCON_DIO_DOC_D2_0_Size                              : constant := 16#1#;
    LW_PRGNLCL_FALCON_DIO_DIC_CTRL_0_Address                         : constant := 16#140_0380#;
    LW_PRGNLCL_FALCON_DIO_DIC_CTRL_0_Size                            : constant := 16#1#;
    LW_PRGNLCL_FALCON_DIO_DIC_D0_0_Address                           : constant := 16#140_0384#;
    LW_PRGNLCL_FALCON_DIO_DIC_D0_0_Size                              : constant := 16#1#;
    LW_PRGNLCL_FALCON_DIO_DIC_D1_0_Address                           : constant := 16#140_0388#;
    LW_PRGNLCL_FALCON_DIO_DIC_D1_0_Size                              : constant := 16#1#;
    LW_PRGNLCL_FALCON_DIO_DIC_D2_0_Address                           : constant := 16#140_038c#;
    LW_PRGNLCL_FALCON_DIO_DIC_D2_0_Size                              : constant := 16#1#;
    LW_PRGNLCL_FALCON_DIO_DIO_ERR_0_Address                          : constant := 16#140_0390#;
    LW_PRGNLCL_FALCON_DIO_DIO_ERR_0_Size                             : constant := 16#1#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_0_0_Address               : constant := 16#140_0300#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_0_1_Address               : constant := 16#140_0304#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_0_2_Address               : constant := 16#140_0308#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_0_3_Address               : constant := 16#140_030c#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_0_0_Size                  : constant := 16#4#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_1_0_Address               : constant := 16#140_0310#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_1_1_Address               : constant := 16#140_0314#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_1_2_Address               : constant := 16#140_0318#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_1_3_Address               : constant := 16#140_031c#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_1_0_Size                  : constant := 16#4#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_2_0_Address               : constant := 16#140_0320#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_2_1_Address               : constant := 16#140_0324#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_2_2_Address               : constant := 16#140_0328#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_2_3_Address               : constant := 16#140_032c#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_2_0_Size                  : constant := 16#4#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_3_0_Address               : constant := 16#140_0330#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_3_1_Address               : constant := 16#140_0334#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_3_2_Address               : constant := 16#140_0338#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_3_3_Address               : constant := 16#140_033c#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_3_0_Size                  : constant := 16#4#;
    LW_PRGNLCL_FALCON_PRGNVER_Address                                : constant := 16#140_03d4#;
    LW_PRGNLCL_FALCON_HWCFG_Address                                  : constant := 16#140_0108#;
    LW_PRGNLCL_FALCON_HWCFG1_Address                                 : constant := 16#140_012c#;
    LW_PRGNLCL_FALCON_HWCFG2_Address                                 : constant := 16#140_00f4#;
    LW_PRGNLCL_FALCON_HWCFG3_Address                                 : constant := 16#140_0278#;
    LW_PRGNLCL_FALCON_CGCTL_Address                                  : constant := 16#140_00a0#;
    LW_PRGNLCL_FALCON_CG2_Address                                    : constant := 16#140_0134#;
    LW_PRGNLCL_FALCON_ENGID_Address                                  : constant := 16#140_013c#;
    LW_PRGNLCL_FALCON_ENGINE_Address                                 : constant := 16#140_03c0#;
    LW_PRGNLCL_FALCON_RESETCTL_CYA_Address                           : constant := 16#140_0238#;
    LW_PRGNLCL_FALCON_SCTL_Address                                   : constant := 16#140_0240#;
    LW_PRGNLCL_FALCON_SCTL1_Address                                  : constant := 16#140_0250#;
    LW_PRGNLCL_FALCON_HSCTL_Address                                  : constant := 16#140_00e4#;
    LW_PRGNLCL_FALCON_SAFETY_CTRL_Address                            : constant := 16#140_02f4#;
    LW_PRGNLCL_FALCON_RISCV_DCLS_SECURITY_Address                    : constant := 16#140_03b8#;
    LW_PRGNLCL_FALCON_OS_Address                                     : constant := 16#140_0080#;
    LW_PRGNLCL_FALCON_RM_Address                                     : constant := 16#140_0084#;
    LW_PRGNLCL_FALCON_SOFT_PM_Address                                : constant := 16#140_0088#;
    LW_PRGNLCL_FALCON_SOFT_MODE_Address                              : constant := 16#140_008c#;
    LW_PRGNLCL_FALCON_PMM_Address                                    : constant := 16#140_00a8#;
    LW_PRGNLCL_FALCON_DEBUG1_Address                                 : constant := 16#140_0090#;
    LW_PRGNLCL_FALCON_DEBUGINFO_Address                              : constant := 16#140_0094#;
    LW_PRGNLCL_FALCON_SP_MIN_Address                                 : constant := 16#140_0270#;
    LW_PRGNLCL_FALCON_EXCI_Address                                   : constant := 16#140_00d0#;
    LW_PRGNLCL_FALCON_EXCI2_Address                                  : constant := 16#140_00bc#;
    LW_PRGNLCL_FALCON_SVEC_SPR_Address                               : constant := 16#140_00d4#;
    LW_PRGNLCL_FALCON_CPUCTL_Address                                 : constant := 16#140_0100#;
    LW_PRGNLCL_FALCON_CPUCTL_ALIAS_Address                           : constant := 16#140_0130#;
    LW_PRGNLCL_FALCON_STACKCFG_Address                               : constant := 16#140_0138#;
    LW_PRGNLCL_FALCON_BOOTVEC_Address                                : constant := 16#140_0104#;
    LW_PRGNLCL_FALCON_DBGCTL_Address                                 : constant := 16#140_0254#;
    LW_PRGNLCL_FALCON_IBRKPT1_Address                                : constant := 16#140_0098#;
    LW_PRGNLCL_FALCON_IBRKPT2_Address                                : constant := 16#140_009c#;
    LW_PRGNLCL_FALCON_IBRKPT3_Address                                : constant := 16#140_00b0#;
    LW_PRGNLCL_FALCON_IBRKPT4_Address                                : constant := 16#140_00b4#;
    LW_PRGNLCL_FALCON_IBRKPT5_Address                                : constant := 16#140_00b8#;
    LW_PRGNLCL_FALCON_ICD_CMD_Address                                : constant := 16#140_0200#;
    LW_PRGNLCL_FALCON_ICD_ADDR_Address                               : constant := 16#140_0204#;
    LW_PRGNLCL_FALCON_ICD_WDATA_Address                              : constant := 16#140_0208#;
    LW_PRGNLCL_FALCON_ICD_RDATA_Address                              : constant := 16#140_020c#;
    LW_PRGNLCL_FALCON_RSTAT0_Address                                 : constant := 16#140_00d8#;
    LW_PRGNLCL_FALCON_RSTAT3_Address                                 : constant := 16#140_00dc#;
    LW_PRGNLCL_FALCON_TRACEIDX_Address                               : constant := 16#140_0148#;
    LW_PRGNLCL_FALCON_TRACEPC_Address                                : constant := 16#140_014c#;
    LW_PRGNLCL_FALCON_TRACEINFO_Address                              : constant := 16#140_017c#;
    LW_PRGNLCL_FALCON_IMCTL_Address                                  : constant := 16#140_0140#;
    LW_PRGNLCL_FALCON_IMCTL_DEBUG_Address                            : constant := 16#140_015c#;
    LW_PRGNLCL_FALCON_IMSTAT_Address                                 : constant := 16#140_0144#;
    LW_PRGNLCL_FALCON_IMFILLRNG0_Address                             : constant := 16#140_0150#;
    LW_PRGNLCL_FALCON_IMFILLRNG1_Address                             : constant := 16#140_0154#;
    LW_PRGNLCL_FALCON_IMFILLCTL_Address                              : constant := 16#140_0158#;
    LW_PRGNLCL_FALCON_DMCTL_Address                                  : constant := 16#140_0260#;
    LW_PRGNLCL_FALCON_DMSTAT_Address                                 : constant := 16#140_0264#;
    LW_PRGNLCL_FALCON_DMVACTL_Address                                : constant := 16#140_0268#;
    LW_PRGNLCL_FALCON_DMCYA_Address                                  : constant := 16#140_026c#;
    LW_PRGNLCL_FALCON_CMEMBASE_Address                               : constant := 16#140_0160#;
    LW_PRGNLCL_FALCON_DMEMAPERT_Address                              : constant := 16#140_0164#;
    LW_PRGNLCL_FALCON_EXTERRSTAT_Address                             : constant := 16#140_016c#;
    LW_PRGNLCL_FALCON_EXTERRADDR_Address                             : constant := 16#140_0168#;
    LW_PRGNLCL_FALCON_EXTERR_INFO_Address                            : constant := 16#140_025c#;
    LW_PRGNLCL_FALCON_CSBERRSTAT_Address                             : constant := 16#140_0244#;
    LW_PRGNLCL_FALCON_CSBERR_ADDR_Address                            : constant := 16#140_024c#;
    LW_PRGNLCL_FALCON_CSBERR_INFO_Address                            : constant := 16#140_0248#;
    LW_PRGNLCL_FALCON_BR_PARAMS_PRIV_LEVEL_MASK_Address              : constant := 16#140_0650#;
    LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_PRIV_LEVEL_MASK_Address         : constant := 16#140_065c#;
    LW_PRGNLCL_FALCON_KMEM_PRIV_LEVEL_MASK_Address                   : constant := 16#140_0654#;
    LW_PRGNLCL_FALCON_SHA_RAL_PRIV_LEVEL_MASK_Address                : constant := 16#140_0528#;
    LW_PRGNLCL_FALCON_SHA_CONFIG_Address                             : constant := 16#140_0404#;
    LW_PRGNLCL_FALCON_SHA_TASK_CONFIG_Address                        : constant := 16#140_0408#;
    LW_PRGNLCL_FALCON_SHA_IN_ADDR_Address                            : constant := 16#140_040c#;
    LW_PRGNLCL_FALCON_SHA_IN_ADDR_HI_Address                         : constant := 16#140_0410#;
    LW_PRGNLCL_FALCON_SHA_MSG_LENGTH_0_Address                       : constant := 16#140_041c#;
    LW_PRGNLCL_FALCON_SHA_MSG_LENGTH_1_Address                       : constant := 16#140_0420#;
    LW_PRGNLCL_FALCON_SHA_MSG_LENGTH_2_Address                       : constant := 16#140_0424#;
    LW_PRGNLCL_FALCON_SHA_MSG_LENGTH_3_Address                       : constant := 16#140_0428#;
    LW_PRGNLCL_FALCON_SHA_MSG_LENGTH_0_Size                          : constant := 16#4#;
    LW_PRGNLCL_FALCON_SHA_MSG_LEFT_0_Address                         : constant := 16#140_042c#;
    LW_PRGNLCL_FALCON_SHA_MSG_LEFT_1_Address                         : constant := 16#140_0430#;
    LW_PRGNLCL_FALCON_SHA_MSG_LEFT_2_Address                         : constant := 16#140_0434#;
    LW_PRGNLCL_FALCON_SHA_MSG_LEFT_3_Address                         : constant := 16#140_0438#;
    LW_PRGNLCL_FALCON_SHA_MSG_LEFT_0_Size                            : constant := 16#4#;
    LW_PRGNLCL_FALCON_SHA_HASH_RESULT_0_Address                      : constant := 16#140_043c#;
    LW_PRGNLCL_FALCON_SHA_HASH_RESULT_1_Address                      : constant := 16#140_0440#;
    LW_PRGNLCL_FALCON_SHA_HASH_RESULT_2_Address                      : constant := 16#140_0444#;
    LW_PRGNLCL_FALCON_SHA_HASH_RESULT_3_Address                      : constant := 16#140_0448#;
    LW_PRGNLCL_FALCON_SHA_HASH_RESULT_4_Address                      : constant := 16#140_044c#;
    LW_PRGNLCL_FALCON_SHA_HASH_RESULT_5_Address                      : constant := 16#140_0450#;
    LW_PRGNLCL_FALCON_SHA_HASH_RESULT_6_Address                      : constant := 16#140_0454#;
    LW_PRGNLCL_FALCON_SHA_HASH_RESULT_7_Address                      : constant := 16#140_0458#;
    LW_PRGNLCL_FALCON_SHA_HASH_RESULT_8_Address                      : constant := 16#140_045c#;
    LW_PRGNLCL_FALCON_SHA_HASH_RESULT_9_Address                      : constant := 16#140_0460#;
    LW_PRGNLCL_FALCON_SHA_HASH_RESULT_10_Address                     : constant := 16#140_0464#;
    LW_PRGNLCL_FALCON_SHA_HASH_RESULT_11_Address                     : constant := 16#140_0468#;
    LW_PRGNLCL_FALCON_SHA_HASH_RESULT_12_Address                     : constant := 16#140_046c#;
    LW_PRGNLCL_FALCON_SHA_HASH_RESULT_13_Address                     : constant := 16#140_0470#;
    LW_PRGNLCL_FALCON_SHA_HASH_RESULT_14_Address                     : constant := 16#140_0474#;
    LW_PRGNLCL_FALCON_SHA_HASH_RESULT_15_Address                     : constant := 16#140_0478#;
    LW_PRGNLCL_FALCON_SHA_HASH_RESULT_0_Size                         : constant := 16#10#;
    LW_PRGNLCL_FALCON_SHA_OPERATION_Address                          : constant := 16#140_047c#;
    LW_PRGNLCL_FALCON_SHA_STATUS_Address                             : constant := 16#140_0480#;
    LW_PRGNLCL_FALCON_SHA_IN_REQ_CUR_BYTE_ADDR_Address               : constant := 16#140_0484#;
    LW_PRGNLCL_FALCON_SHA_IN_REQ_CUR_BYTE_ADDR_HI_Address            : constant := 16#140_0488#;
    LW_PRGNLCL_FALCON_SHA_PRIV_LOCKDOWN_Address                      : constant := 16#140_048c#;
    LW_PRGNLCL_FALCON_SHA_IN_RESP_CUR_BYTE_ADDR_Address              : constant := 16#140_0490#;
    LW_PRGNLCL_FALCON_SHA_IN_RESP_CUR_BYTE_ADDR_HI_Address           : constant := 16#140_0494#;
    LW_PRGNLCL_FALCON_SHA_ERR_STATUS_Address                         : constant := 16#140_0530#;
    LW_PRGNLCL_FALCON_SHA_ERR_ADDR_Address                           : constant := 16#140_0520#;
    LW_PRGNLCL_FALCON_SHA_ERR_ADDR_HI_Address                        : constant := 16#140_0524#;
    LW_PRGNLCL_FALCON_SHA_INT_STATUS_Address                         : constant := 16#140_0534#;
    LW_PRGNLCL_FALCON_SHA_INT_ENABLE_Address                         : constant := 16#140_0538#;
    LW_PRGNLCL_FALCON_SHA_MUTEX_Address                              : constant := 16#140_0500#;
    LW_PRGNLCL_FALCON_SHA_MUTEX_RELEASE_Address                      : constant := 16#140_0504#;
    LW_PRGNLCL_FALCON_SHA_MUTEX_STATUS_Address                       : constant := 16#140_0508#;
    LW_PRGNLCL_FALCON_SHA_SRC_CONFIG_Address                         : constant := 16#140_0510#;
    LW_PRGNLCL_FALCON_SHA_REQ_CTRL_Address                           : constant := 16#140_0514#;
    LW_PRGNLCL_FALCON_SHA_CTRL_Address                               : constant := 16#140_0498#;
    LW_PRGNLCL_FALCON_SHA_CYA_Address                                : constant := 16#140_0518#;
    LW_PRGNLCL_FALCON_SHA_DBG_INFO_Address                           : constant := 16#140_051c#;
    LW_PRGNLCL_FALCON_SHA_DBG_REG_0_Address                          : constant := 16#140_0540#;
    LW_PRGNLCL_FALCON_SHA_DBG_REG_1_Address                          : constant := 16#140_0544#;
    LW_PRGNLCL_FALCON_SHA_DBG_REG_2_Address                          : constant := 16#140_0548#;
    LW_PRGNLCL_FALCON_SHA_DBG_REG_3_Address                          : constant := 16#140_054c#;
    LW_PRGNLCL_FALCON_SHA_DBG_REG_4_Address                          : constant := 16#140_0550#;
    LW_PRGNLCL_FALCON_SHA_DBG_REG_5_Address                          : constant := 16#140_0554#;
    LW_PRGNLCL_FALCON_SHA_DBG_REG_6_Address                          : constant := 16#140_0558#;
    LW_PRGNLCL_FALCON_SHA_DBG_REG_7_Address                          : constant := 16#140_055c#;
    LW_PRGNLCL_FALCON_VER_Address                                    : constant := 16#140_0588#;
    LW_PRGNLCL_FALCON_MOD_SEL_Address                                : constant := 16#140_0580#;
    LW_PRGNLCL_FALCON_MOD_EN_Address                                 : constant := 16#140_0584#;
    LW_PRGNLCL_FALCON_PKCBROM_VER_Address                            : constant := 16#140_058c#;
    LW_PRGNLCL_FALCON_VHRCFG_BASE_Address                            : constant := 16#140_0590#;
    LW_PRGNLCL_FALCON_VHRCFG_ENTNUM_Address                          : constant := 16#140_05e8#;
    LW_PRGNLCL_FALCON_BMEMBASE_Address                               : constant := 16#140_0594#;
    LW_PRGNLCL_FALCON_BROM_CURR_UCODE_ID_Address                     : constant := 16#140_0598#;
    LW_PRGNLCL_FALCON_UCODE_VERSION_0_Address                        : constant := 16#140_05a8#;
    LW_PRGNLCL_FALCON_UCODE_VERSION_1_Address                        : constant := 16#140_05ac#;
    LW_PRGNLCL_FALCON_UCODE_VERSION_2_Address                        : constant := 16#140_05b0#;
    LW_PRGNLCL_FALCON_UCODE_VERSION_3_Address                        : constant := 16#140_05b4#;
    LW_PRGNLCL_FALCON_UCODE_VERSION_4_Address                        : constant := 16#140_05b8#;
    LW_PRGNLCL_FALCON_UCODE_VERSION_5_Address                        : constant := 16#140_05bc#;
    LW_PRGNLCL_FALCON_UCODE_VERSION_6_Address                        : constant := 16#140_05c0#;
    LW_PRGNLCL_FALCON_UCODE_VERSION_7_Address                        : constant := 16#140_05c4#;
    LW_PRGNLCL_FALCON_UCODE_VERSION_8_Address                        : constant := 16#140_05c8#;
    LW_PRGNLCL_FALCON_UCODE_VERSION_9_Address                        : constant := 16#140_05cc#;
    LW_PRGNLCL_FALCON_UCODE_VERSION_10_Address                       : constant := 16#140_05d0#;
    LW_PRGNLCL_FALCON_UCODE_VERSION_11_Address                       : constant := 16#140_05d4#;
    LW_PRGNLCL_FALCON_UCODE_VERSION_12_Address                       : constant := 16#140_05d8#;
    LW_PRGNLCL_FALCON_UCODE_VERSION_13_Address                       : constant := 16#140_05dc#;
    LW_PRGNLCL_FALCON_UCODE_VERSION_14_Address                       : constant := 16#140_05e0#;
    LW_PRGNLCL_FALCON_UCODE_VERSION_15_Address                       : constant := 16#140_05e4#;
    LW_PRGNLCL_FALCON_UCODE_VERSION_0_Size                           : constant := 16#10#;
    LW_PRGNLCL_FALCON_BROM_ENGIDMASK_Address                         : constant := 16#140_059c#;
    LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_Address                         : constant := 16#140_05ec#;
    LW_PRGNLCL_FALCON_PR_CTKID_Address                               : constant := 16#140_05f0#;
    LW_PRGNLCL_FALCON_BROM_FUNID_Address                             : constant := 16#140_05a0#;
    LW_PRGNLCL_FALCON_BROM_PARAADDR_0_Address                        : constant := 16#140_0610#;
    LW_PRGNLCL_FALCON_BROM_PARAADDR_0_Size                           : constant := 16#1#;
    LW_PRGNLCL_FALCON_BROM_RETCODE_Address                           : constant := 16#140_05a4#;
    LW_PRGNLCL_FALCON_KMEMBASE_Address                               : constant := 16#140_05f4#;
    LW_PRGNLCL_FALCON_KMEMC_0_Address                                : constant := 16#140_05f8#;
    LW_PRGNLCL_FALCON_KMEMC_1_Address                                : constant := 16#140_05fc#;
    LW_PRGNLCL_FALCON_KMEMC_0_Size                                   : constant := 16#2#;
    LW_PRGNLCL_FALCON_KMEMD_0_Address                                : constant := 16#140_0600#;
    LW_PRGNLCL_FALCON_KMEMD_1_Address                                : constant := 16#140_0604#;
    LW_PRGNLCL_FALCON_KMEMD_0_Size                                   : constant := 16#2#;
    LW_PRGNLCL_FALCON_KMEM_CTL_Address                               : constant := 16#140_0608#;
    LW_PRGNLCL_FALCON_KMEMCFG_Address                                : constant := 16#140_060c#;
    LW_PRGNLCL_FALCON_KMEM_VALID_0_Address                           : constant := 16#140_0618#;
    LW_PRGNLCL_FALCON_KMEM_VALID_1_Address                           : constant := 16#140_061c#;
    LW_PRGNLCL_FALCON_KMEM_VALID_2_Address                           : constant := 16#140_0620#;
    LW_PRGNLCL_FALCON_KMEM_VALID_3_Address                           : constant := 16#140_0624#;
    LW_PRGNLCL_FALCON_KMEM_VALID_4_Address                           : constant := 16#140_0628#;
    LW_PRGNLCL_FALCON_KMEM_VALID_5_Address                           : constant := 16#140_062c#;
    LW_PRGNLCL_FALCON_KMEM_VALID_6_Address                           : constant := 16#140_0630#;
    LW_PRGNLCL_FALCON_KMEM_VALID_7_Address                           : constant := 16#140_0634#;
    LW_PRGNLCL_FALCON_KMEM_VALID_0_Size                              : constant := 16#8#;
    LW_PRGNLCL_FALCON_KMEM_VIOLATION_CTL_Address                     : constant := 16#140_0638#;
    LW_PRGNLCL_FALCON_EXCI_KMEM_VIOLATION_DBGINF_Address             : constant := 16#140_063c#;
    LW_PRGNLCL_FALCON_KMEM_SLOT_MASK_Address                         : constant := 16#140_0640#;
    LW_PRGNLCL_FALCON_KEYGLOB_CTRL_Address                           : constant := 16#140_0648#;
    LW_PRGNLCL_FALCON_KEYGLOB_DATA_Address                           : constant := 16#140_064c#;
    LW_PRGNLCL_RISCV_EXE_PRIV_LEVEL_MASK_Address                     : constant := 16#140_0704#;
    LW_PRGNLCL_RISCV_CPUCTL_PRIV_LEVEL_MASK_Address                  : constant := 16#140_0708#;
    LW_PRGNLCL_RISCV_IRQ_PRIV_LEVEL_MASK_Address                     : constant := 16#140_0700#;
    LW_PRGNLCL_RISCV_DBGCTL_PRIV_LEVEL_MASK_Address                  : constant := 16#140_0714#;
    LW_PRGNLCL_RISCV_BOOTVEC_PRIV_LEVEL_MASK_Address                 : constant := 16#140_0710#;
    LW_PRGNLCL_RISCV_BCR_PRIV_LEVEL_MASK_Address                     : constant := 16#140_0a64#;
    LW_PRGNLCL_RISCV_BCR_DMACFG_SEC_PRIV_LEVEL_MASK_Address          : constant := 16#140_0a90#;
    LW_PRGNLCL_RISCV_BCR_UIDENABLEMASK_PRIV_LEVEL_MASK_Address       : constant := 16#140_0aa0#;
    LW_PRGNLCL_RISCV_LWCONFIG_PRIV_LEVEL_MASK_Address                : constant := 16#140_070c#;
    LW_PRGNLCL_RISCV_TRACEBUF_PRIV_LEVEL_MASK_Address                : constant := 16#140_0718#;
    LW_PRGNLCL_RISCV_MSIP_PRIV_LEVEL_MASK_Address                    : constant := 16#140_071c#;
    LW_PRGNLCL_RISCV_PIC_PRIV_LEVEL_MASK_Address                     : constant := 16#140_0914#;
    LW_PRGNLCL_RISCV_PICSCMASK_PRIV_LEVEL_MASK_Address               : constant := 16#140_0918#;
    LW_PRGNLCL_RISCV_ERR_PRIV_LEVEL_MASK_Address                     : constant := 16#140_091c#;
    LW_PRGNLCL_RISCV_NO_ACCESS_PRIV_LEVEL_MASK_Address               : constant := 16#140_0938#;
    LW_PRGNLCL_RISCV_LMSR_PRIV_LEVEL_MASK_Address                    : constant := 16#140_093c#;
    LW_PRGNLCL_RISCV_IRQMSET_Address                                 : constant := 16#140_0920#;
    LW_PRGNLCL_RISCV_IRQMCLR_Address                                 : constant := 16#140_0924#;
    LW_PRGNLCL_RISCV_IRQMASK_Address                                 : constant := 16#140_0928#;
    LW_PRGNLCL_RISCV_IRQDEST_Address                                 : constant := 16#140_092c#;
    LW_PRGNLCL_RISCV_IRQTYPE_Address                                 : constant := 16#140_0930#;
    LW_PRGNLCL_RISCV_IRQDELEG_Address                                : constant := 16#140_0934#;
    LW_PRGNLCL_RISCV_EXTIRQSSET_Address                              : constant := 16#140_0940#;
    LW_PRGNLCL_RISCV_EXTIRQSCLR_Address                              : constant := 16#140_0944#;
    LW_PRGNLCL_RISCV_EXTIRQSTAT_Address                              : constant := 16#140_0948#;
    LW_PRGNLCL_RISCV_EXTIRQMODE_Address                              : constant := 16#140_094c#;
    LW_PRGNLCL_RISCV_EXTIRQSCMASK_Address                            : constant := 16#140_0950#;
    LW_PRGNLCL_RISCV_EXTIRQMSET_Address                              : constant := 16#140_0954#;
    LW_PRGNLCL_RISCV_EXTIRQMCLR_Address                              : constant := 16#140_0958#;
    LW_PRGNLCL_RISCV_EXTIRQMASK_Address                              : constant := 16#140_095c#;
    LW_PRGNLCL_RISCV_EXTIRQDEST_Address                              : constant := 16#140_0960#;
    LW_PRGNLCL_RISCV_EXTIRQTYPE_Address                              : constant := 16#140_0964#;
    LW_PRGNLCL_RISCV_EXTIRQDELEG_Address                             : constant := 16#140_0968#;
    LW_PRGNLCL_RISCV_BOOT_VECTOR_HI_Address                          : constant := 16#140_0784#;
    LW_PRGNLCL_RISCV_BOOT_VECTOR_LO_Address                          : constant := 16#140_0780#;
    LW_PRGNLCL_RISCV_CPUCTL_Address                                  : constant := 16#140_0788#;
    LW_PRGNLCL_RISCV_LWCONFIG_Address                                : constant := 16#140_0790#;
    LW_PRGNLCL_RISCV_CG_Address                                      : constant := 16#140_0798#;
    LW_PRGNLCL_RISCV_CYA_Address                                     : constant := 16#140_079c#;
    LW_PRGNLCL_RISCV_MSPM_Address                                    : constant := 16#140_0aa8#;
    LW_PRGNLCL_RISCV_DBGCTL_Address                                  : constant := 16#140_07c8#;
    LW_PRGNLCL_RISCV_DBGCTL_LOCK_Address                             : constant := 16#140_07cc#;
    LW_PRGNLCL_RISCV_ICD_CMD_Address                                 : constant := 16#140_07d0#;
    LW_PRGNLCL_RISCV_ICD_ADDR0_Address                               : constant := 16#140_07d4#;
    LW_PRGNLCL_RISCV_ICD_ADDR1_Address                               : constant := 16#140_07d8#;
    LW_PRGNLCL_RISCV_ICD_WDATA0_Address                              : constant := 16#140_07dc#;
    LW_PRGNLCL_RISCV_ICD_WDATA1_Address                              : constant := 16#140_07e0#;
    LW_PRGNLCL_RISCV_ICD_RDATA0_Address                              : constant := 16#140_07e4#;
    LW_PRGNLCL_RISCV_ICD_RDATA1_Address                              : constant := 16#140_07e8#;
    LW_PRGNLCL_RISCV_RPC_Address                                     : constant := 16#140_07ec#;
    LW_PRGNLCL_RISCV_RSTAT0_Address                                  : constant := 16#140_07f0#;
    LW_PRGNLCL_RISCV_TRACECTL_Address                                : constant := 16#140_0800#;
    LW_PRGNLCL_RISCV_TRACE_RDIDX_Address                             : constant := 16#140_0804#;
    LW_PRGNLCL_RISCV_TRACE_WTIDX_Address                             : constant := 16#140_0808#;
    LW_PRGNLCL_RISCV_TRACEPC_HI_Address                              : constant := 16#140_0810#;
    LW_PRGNLCL_RISCV_TRACEPC_LO_Address                              : constant := 16#140_080c#;
    LW_PRGNLCL_RISCV_MTIMECMP_HI_Address                             : constant := 16#140_07c4#;
    LW_PRGNLCL_RISCV_MTIMECMP_LO_Address                             : constant := 16#140_07c0#;
    LW_PRGNLCL_RISCV_INTR_STATUS_Address                             : constant := 16#140_0794#;
    LW_PRGNLCL_RISCV_MSIP_Address                                    : constant := 16#140_078c#;
    LW_PRGNLCL_RISCV_PRIV_ERR_STAT_Address                           : constant := 16#140_0900#;
    LW_PRGNLCL_RISCV_PRIV_ERR_INFO_Address                           : constant := 16#140_0904#;
    LW_PRGNLCL_RISCV_PRIV_ERR_ADDR_Address                           : constant := 16#140_0908#;
    LW_PRGNLCL_RISCV_PRIV_ERR_ADDR_HI_Address                        : constant := 16#140_090c#;
    LW_PRGNLCL_RISCV_HUB_ERR_STAT_Address                            : constant := 16#140_0910#;
    LW_PRGNLCL_RISCV_IROM_PATCH_CAM_INDEX_Address                    : constant := 16#140_0990#;
    LW_PRGNLCL_RISCV_IROM_PATCH_CAM_ADDR_VALID_Address               : constant := 16#140_0994#;
    LW_PRGNLCL_RISCV_IROM_PATCH_CAM_DATA_Address                     : constant := 16#140_0998#;
    LW_PRGNLCL_RISCV_IROM_PATCH_SECURE_Address                       : constant := 16#140_099c#;
    LW_PRGNLCL_RISCV_IOPMP_INDEX_Address                             : constant := 16#140_09b0#;
    LW_PRGNLCL_RISCV_IOPMP_CFG_Address                               : constant := 16#140_09b4#;
    LW_PRGNLCL_RISCV_IOPMP_ADDR_HI_Address                           : constant := 16#140_09bc#;
    LW_PRGNLCL_RISCV_IOPMP_ADDR_LO_Address                           : constant := 16#140_09b8#;
    LW_PRGNLCL_RISCV_IOPMP_MODE_0_Address                            : constant := 16#140_09c0#;
    LW_PRGNLCL_RISCV_IOPMP_MODE_1_Address                            : constant := 16#140_09c4#;
    LW_PRGNLCL_RISCV_IOPMP_MODE_0_Size                               : constant := 16#2#;
    LW_PRGNLCL_RISCV_IOPMP_ERR_STAT_Address                          : constant := 16#140_09e0#;
    LW_PRGNLCL_RISCV_IOPMP_ERR_INFO_Address                          : constant := 16#140_09e4#;
    LW_PRGNLCL_RISCV_IOPMP_ERR_ADDR_HI_Address                       : constant := 16#140_09ec#;
    LW_PRGNLCL_RISCV_IOPMP_ERR_ADDR_LO_Address                       : constant := 16#140_09e8#;
    LW_PRGNLCL_RISCV_IOPMP_ERR_CAPEN_Address                         : constant := 16#140_09f0#;
    LW_PRGNLCL_RISCV_IOPMP_USER_CFG_Address                          : constant := 16#140_09f4#;
    LW_PRGNLCL_RISCV_SCPDMATRFMOFFS_Address                          : constant := 16#140_0970#;
    LW_PRGNLCL_RISCV_SCPDMATRFCMD_Address                            : constant := 16#140_0974#;
    LW_PRGNLCL_RISCV_SCPDMAPOLL_Address                              : constant := 16#140_0978#;
    LW_PRGNLCL_RISCV_SCP_SECRET_MASK_0_Address                       : constant := 16#140_0980#;
    LW_PRGNLCL_RISCV_SCP_SECRET_MASK_1_Address                       : constant := 16#140_0984#;
    LW_PRGNLCL_RISCV_SCP_SECRET_MASK_0_Size                          : constant := 16#2#;
    LW_PRGNLCL_RISCV_SCP_SECRET_MASK_LOCK_0_Address                  : constant := 16#140_0988#;
    LW_PRGNLCL_RISCV_SCP_SECRET_MASK_LOCK_1_Address                  : constant := 16#140_098c#;
    LW_PRGNLCL_RISCV_SCP_SECRET_MASK_LOCK_0_Size                     : constant := 16#2#;
    LW_PRGNLCL_RISCV_BR_VER_Address                                  : constant := 16#140_0a58#;
    LW_PRGNLCL_RISCV_BR_RETCODE_Address                              : constant := 16#140_0a5c#;
    LW_PRGNLCL_RISCV_BR_PRIV_LOCKDOWN_Address                        : constant := 16#140_0a60#;
    LW_PRGNLCL_RISCV_BCR_CTRL_Address                                : constant := 16#140_0a68#;
    LW_PRGNLCL_RISCV_BCR_DMACFG_Address                              : constant := 16#140_0a6c#;
    LW_PRGNLCL_RISCV_BCR_DMACFG_SEC_Address                          : constant := 16#140_0a94#;
    LW_PRGNLCL_RISCV_BCR_DMAADDR_PKCPARAM_LO_Address                 : constant := 16#140_0a70#;
    LW_PRGNLCL_RISCV_BCR_DMAADDR_PKCPARAM_HI_Address                 : constant := 16#140_0a74#;
    LW_PRGNLCL_RISCV_BCR_DMAADDR_FMCCODE_LO_Address                  : constant := 16#140_0a78#;
    LW_PRGNLCL_RISCV_BCR_DMAADDR_FMCCODE_HI_Address                  : constant := 16#140_0a7c#;
    LW_PRGNLCL_RISCV_BCR_DMAADDR_FMCDATA_LO_Address                  : constant := 16#140_0a80#;
    LW_PRGNLCL_RISCV_BCR_DMAADDR_FMCDATA_HI_Address                  : constant := 16#140_0a84#;
    LW_PRGNLCL_RISCV_BCR_DMAADDR_PUBKEY_LO_Address                   : constant := 16#140_0a88#;
    LW_PRGNLCL_RISCV_BCR_DMAADDR_PUBKEY_HI_Address                   : constant := 16#140_0a8c#;
    LW_PRGNLCL_RISCV_BCR_DMAADDR_STAGE2_PKCPARAM_LO_Address          : constant := 16#140_0a98#;
    LW_PRGNLCL_RISCV_BCR_DMAADDR_STAGE2_PKCPARAM_HI_Address          : constant := 16#140_0a9c#;
    LW_PRGNLCL_RISCV_BCR_UIDENABLEMASK_Address                       : constant := 16#140_0aa4#;
    LW_PRGNLCL_RISCV_BROM_KEY_Address                                : constant := 16#140_0a50#;
    LW_PRGNLCL_RISCV_LMSR_0_Address                                  : constant := 16#140_0ab0#;
    LW_PRGNLCL_RISCV_LMSR_1_Address                                  : constant := 16#140_0ab4#;
    LW_PRGNLCL_RISCV_LMSR_2_Address                                  : constant := 16#140_0ab8#;
    LW_PRGNLCL_RISCV_LMSR_3_Address                                  : constant := 16#140_0abc#;
    LW_PRGNLCL_RISCV_LMSR_4_Address                                  : constant := 16#140_0ac0#;
    LW_PRGNLCL_RISCV_LMSR_5_Address                                  : constant := 16#140_0ac4#;
    LW_PRGNLCL_RISCV_LMSR_6_Address                                  : constant := 16#140_0ac8#;
    LW_PRGNLCL_RISCV_LMSR_7_Address                                  : constant := 16#140_0acc#;
    LW_PRGNLCL_RISCV_LMSR_8_Address                                  : constant := 16#140_0ad0#;
    LW_PRGNLCL_RISCV_LMSR_9_Address                                  : constant := 16#140_0ad4#;
    LW_PRGNLCL_RISCV_LMSR_10_Address                                 : constant := 16#140_0ad8#;
    LW_PRGNLCL_RISCV_LMSR_11_Address                                 : constant := 16#140_0adc#;
    LW_PRGNLCL_RISCV_LMSR_12_Address                                 : constant := 16#140_0ae0#;
    LW_PRGNLCL_RISCV_LMSR_13_Address                                 : constant := 16#140_0ae4#;
    LW_PRGNLCL_RISCV_LMSR_14_Address                                 : constant := 16#140_0ae8#;
    LW_PRGNLCL_RISCV_LMSR_15_Address                                 : constant := 16#140_0aec#;
    LW_PRGNLCL_RISCV_LMSR_0_Size                                     : constant := 16#10#;
    LW_PRGNLCL_RISCV_DEVICEMAP_RISCVMMODE_0_Address                  : constant := 16#140_0a10#;
    LW_PRGNLCL_RISCV_DEVICEMAP_RISCVMMODE_1_Address                  : constant := 16#140_0a18#;
    LW_PRGNLCL_RISCV_DEVICEMAP_RISCVMMODE_2_Address                  : constant := 16#140_0a20#;
    LW_PRGNLCL_RISCV_DEVICEMAP_RISCVMMODE_3_Address                  : constant := 16#140_0a28#;
    LW_PRGNLCL_RISCV_DEVICEMAP_RISCVMMODE_0_Size                     : constant := 16#4#;
    LW_PRGNLCL_RISCV_DEVICEMAP_RISCVSUBMMODE_0_Address               : constant := 16#140_0a14#;
    LW_PRGNLCL_RISCV_DEVICEMAP_RISCVSUBMMODE_1_Address               : constant := 16#140_0a1c#;
    LW_PRGNLCL_RISCV_DEVICEMAP_RISCVSUBMMODE_2_Address               : constant := 16#140_0a24#;
    LW_PRGNLCL_RISCV_DEVICEMAP_RISCVSUBMMODE_3_Address               : constant := 16#140_0a2c#;
    LW_PRGNLCL_RISCV_DEVICEMAP_RISCVSUBMMODE_0_Size                  : constant := 16#4#;
    LW_PRGNLCL_SCP_CTL0_Address                                      : constant := 16#140_1000#;
    LW_PRGNLCL_SCP_CTL1_Address                                      : constant := 16#140_1004#;
    LW_PRGNLCL_SCP_CTL_STAT_Address                                  : constant := 16#140_1008#;
    LW_PRGNLCL_SCP_CTL_CFG_Address                                   : constant := 16#140_100c#;
    LW_PRGNLCL_SCP_CFG0_Address                                      : constant := 16#140_1010#;
    LW_PRGNLCL_SCP_CTL_PKEY_Address                                  : constant := 16#140_1018#;
    LW_PRGNLCL_SCP_CTL_DEBUG_Address                                 : constant := 16#140_101c#;
    LW_PRGNLCL_SCP_DEBUG0_Address                                    : constant := 16#140_1020#;
    LW_PRGNLCL_SCP_DEBUG1_Address                                    : constant := 16#140_1024#;
    LW_PRGNLCL_SCP_DEBUG2_Address                                    : constant := 16#140_1028#;
    LW_PRGNLCL_SCP_DEBUG_CMD_Address                                 : constant := 16#140_1030#;
    LW_PRGNLCL_SCP_ACL_FETCH_Address                                 : constant := 16#140_1040#;
    LW_PRGNLCL_SCP_ACL_KEYABLE_Address                               : constant := 16#140_1044#;
    LW_PRGNLCL_SCP_ACL_WRITE_Address                                 : constant := 16#140_1048#;
    LW_PRGNLCL_SCP_STATUS_Address                                    : constant := 16#140_1050#;
    LW_PRGNLCL_SCP_STAT0_Address                                     : constant := 16#140_1054#;
    LW_PRGNLCL_SCP_STAT1_Address                                     : constant := 16#140_1058#;
    LW_PRGNLCL_SCP_SECRET63_CTL_Address                              : constant := 16#140_1060#;
    LW_PRGNLCL_SCP_RNG_STAT0_Address                                 : constant := 16#140_1070#;
    LW_PRGNLCL_SCP_RNG_STAT1_Address                                 : constant := 16#140_1074#;
    LW_PRGNLCL_SCP_INTR_Address                                      : constant := 16#140_1080#;
    LW_PRGNLCL_SCP_INTR_EN_Address                                   : constant := 16#140_1084#;
    LW_PRGNLCL_SCP_ACL_VIO_Address                                   : constant := 16#140_1090#;
    LW_PRGNLCL_SCP_SECURITY_VIO_Address                              : constant := 16#140_1094#;
    LW_PRGNLCL_SCP_CMD_ERROR_Address                                 : constant := 16#140_1098#;
    LW_PRGNLCL_SCP_RNDCTL0_Address                                   : constant := 16#140_1100#;
    LW_PRGNLCL_SCP_RNDCTL1_Address                                   : constant := 16#140_1104#;
    LW_PRGNLCL_SCP_RNDCTL2_Address                                   : constant := 16#140_1108#;
    LW_PRGNLCL_SCP_RNDCTL3_Address                                   : constant := 16#140_110c#;
    LW_PRGNLCL_SCP_RNDCTL4_Address                                   : constant := 16#140_1110#;
    LW_PRGNLCL_SCP_RNDCTL5_Address                                   : constant := 16#140_1114#;
    LW_PRGNLCL_SCP_RNDCTL6_Address                                   : constant := 16#140_1118#;
    LW_PRGNLCL_SCP_RNDCTL7_Address                                   : constant := 16#140_111c#;
    LW_PRGNLCL_SCP_RNDCTL8_Address                                   : constant := 16#140_1120#;
    LW_PRGNLCL_SCP_RNDCTL9_Address                                   : constant := 16#140_1124#;
    LW_PRGNLCL_SCP_RNDCTL10_Address                                  : constant := 16#140_1128#;
    LW_PRGNLCL_SCP_RNDCTL11_Address                                  : constant := 16#140_112c#;
    LW_PRGNLCL_SCP_CTL_P2PRX_Address                                 : constant := 16#140_1130#;
    LW_PRGNLCL_SCP_SCC_DEBUG_HWCFG0_Address                          : constant := 16#140_1140#;
    LW_PRGNLCL_SCP_SCC_DEBUG_HWCFG1_Address                          : constant := 16#140_1144#;
    LW_PRGNLCL_SCP_SCC_DEBUG_HWCFG2_Address                          : constant := 16#140_1148#;
    LW_PRGNLCL_SCP_SCC_DEBUG_STAT0_Address                           : constant := 16#140_114c#;
    LW_PRGNLCL_SCP_SCC_DEBUG_STAT1_Address                           : constant := 16#140_1150#;
    LW_PRGNLCL_SCP_PUBKEYC_Address                                   : constant := 16#140_1160#;
    LW_PRGNLCL_SCP_PUBKEYD_Address                                   : constant := 16#140_1164#;
    LW_PRGNLCL_SCP_PK_ADDR_Address                                   : constant := 16#140_1170#;
    LW_PRGNLCL_SCP_PK_DATA_Address                                   : constant := 16#140_1174#;
    LW_PRGNLCL_SCP_SU_DBG0_Address                                   : constant := 16#140_1180#;
    LW_PRGNLCL_SCP_SU_DBG1_Address                                   : constant := 16#140_1184#;
    LW_PRGNLCL_FBIF_REGIONCFG_PRIV_LEVEL_MASK_Address                : constant := 16#140_1270#;
    LW_PRGNLCL_FBIF_CTL2_PRIV_LEVEL_MASK_Address                     : constant := 16#140_1288#;
    LW_PRGNLCL_FBIF_CTL_PRIV_LEVEL_MASK_Address                      : constant := 16#140_128c#;
    LW_PRGNLCL_FBIF_ENGID_CTRL_PRIV_LEVEL_MASK_Address               : constant := 16#140_129c#;
    LW_PRGNLCL_FBIF_TRANSCFG_0_Address                               : constant := 16#140_1200#;
    LW_PRGNLCL_FBIF_TRANSCFG_1_Address                               : constant := 16#140_1204#;
    LW_PRGNLCL_FBIF_TRANSCFG_2_Address                               : constant := 16#140_1208#;
    LW_PRGNLCL_FBIF_TRANSCFG_3_Address                               : constant := 16#140_120c#;
    LW_PRGNLCL_FBIF_TRANSCFG_4_Address                               : constant := 16#140_1210#;
    LW_PRGNLCL_FBIF_TRANSCFG_5_Address                               : constant := 16#140_1214#;
    LW_PRGNLCL_FBIF_TRANSCFG_6_Address                               : constant := 16#140_1218#;
    LW_PRGNLCL_FBIF_TRANSCFG_7_Address                               : constant := 16#140_121c#;
    LW_PRGNLCL_FBIF_TRANSCFG_0_Size                                  : constant := 16#8#;
    LW_PRGNLCL_FBIF_INSTBLK_Address                                  : constant := 16#140_1220#;
    LW_PRGNLCL_FBIF_BIND_STATUS_Address                              : constant := 16#140_1228#;
    LW_PRGNLCL_FBIF_INSTBLK2_Address                                 : constant := 16#140_12a0#;
    LW_PRGNLCL_FBIF_TLB_INVALIDATE_PARAM1_LO_Address                 : constant := 16#140_1290#;
    LW_PRGNLCL_FBIF_TLB_INVALIDATE_PARAM1_HI_Address                 : constant := 16#140_1294#;
    LW_PRGNLCL_FBIF_CTL_Address                                      : constant := 16#140_1224#;
    LW_PRGNLCL_FBIF_CTL2_Address                                     : constant := 16#140_1284#;
    LW_PRGNLCL_FBIF_ENGID_CTRL_Address                               : constant := 16#140_1298#;
    LW_PRGNLCL_FBIF_THROTTLE_Address                                 : constant := 16#140_122c#;
    LW_PRGNLCL_FBIF_REGIONCFG_Address                                : constant := 16#140_126c#;
    LW_PRGNLCL_FBIF_CG1_Address                                      : constant := 16#140_1274#;
    LW_PRGNLCL_FBIF_ACHK_BLK_0_Address                               : constant := 16#140_1230#;
    LW_PRGNLCL_FBIF_ACHK_BLK_1_Address                               : constant := 16#140_1238#;
    LW_PRGNLCL_FBIF_ACHK_BLK_0_Size                                  : constant := 16#2#;
    LW_PRGNLCL_FBIF_ACHK_CTL_0_Address                               : constant := 16#140_1234#;
    LW_PRGNLCL_FBIF_ACHK_CTL_1_Address                               : constant := 16#140_123c#;
    LW_PRGNLCL_FBIF_ACHK_CTL_0_Size                                  : constant := 16#2#;
    LW_PRGNLCL_FBIF_DBG_STAT0_Address                                : constant := 16#140_1240#;
    LW_PRGNLCL_FBIF_DBG_STAT1_Address                                : constant := 16#140_1244#;
    LW_PRGNLCL_FBIF_DBG_STAT2_Address                                : constant := 16#140_1248#;
    LW_PRGNLCL_FBIF_DBG_RDCOUNT_LO_Address                           : constant := 16#140_1250#;
    LW_PRGNLCL_FBIF_DBG_RDCOUNT_HI_Address                           : constant := 16#140_1254#;
    LW_PRGNLCL_FBIF_DBG_WRCOUNT_LO_Address                           : constant := 16#140_1258#;
    LW_PRGNLCL_FBIF_DBG_WRCOUNT_HI_Address                           : constant := 16#140_125c#;
    LW_PRGNLCL_FBIF_BW_ALLOC_Address                                 : constant := 16#140_124c#;
    LW_PRGNLCL_SE0_INCR_SYNCPT_Address                               : constant := 16#150_0000#;
    LW_PRGNLCL_SE0_INCR_SYNCPT_CTRL_Address                          : constant := 16#150_0004#;
    LW_PRGNLCL_SE0_INCR_SYNCPT_ERROR_Address                         : constant := 16#150_0008#;
    LW_PRGNLCL_SE0_CTXSW_Address                                     : constant := 16#150_000c#;
    LW_PRGNLCL_SE0_CTXSW_NEXT_Address                                : constant := 16#150_0010#;
    LW_PRGNLCL_SE0_OWNERSHIP_Address                                 : constant := 16#150_0014#;
    LW_PRGNLCL_SE0_SE_SECURITY_Address                               : constant := 16#150_0018#;
    LW_PRGNLCL_SE0_INT_STATUS_SRC_Address                            : constant := 16#150_0020#;
    LW_PRGNLCL_SE0_CG1_Address                                       : constant := 16#150_0024#;
    LW_PRGNLCL_SE0_SWCLKCTL_Address                                  : constant := 16#150_0028#;
    LW_PRGNLCL_SE0_SOFTRESET_Address                                 : constant := 16#150_0060#;
    LW_PRGNLCL_SE0_MISC_CTRL_STATUS_Address                          : constant := 16#150_0064#;
    LW_PRGNLCL_SE0_INT_ENABLE_Address                                : constant := 16#150_0088#;
    LW_PRGNLCL_SE0_INT_STATUS_Address                                : constant := 16#150_008c#;
    LW_PRGNLCL_SE0_STREAMID_Address                                  : constant := 16#150_0090#;
    LW_PRGNLCL_SE0_KEYMOVER_CTRL_Address                             : constant := 16#150_00b8#;
    LW_PRGNLCL_SE0_SC7_CTRL_Address                                  : constant := 16#150_00bc#;
    LW_PRGNLCL_SE0_SC7_STATUS_Address                                : constant := 16#150_00c0#;
    LW_PRGNLCL_SE0_CRYPTO_KEYTABLE_VM_CTRL_Address                   : constant := 16#150_00c8#;
    LW_PRGNLCL_SE0_CRYPTO_KEYTABLE_VM_MAP_0_Address                  : constant := 16#150_00cc#;
    LW_PRGNLCL_SE0_CRYPTO_KEYTABLE_VM_MAP_1_Address                  : constant := 16#150_00d0#;
    LW_PRGNLCL_SE0_CRYPTO_KEYTABLE_VM_MAP_2_Address                  : constant := 16#150_00d4#;
    LW_PRGNLCL_SE0_CRYPTO_KEYTABLE_VM_MAP_3_Address                  : constant := 16#150_00d8#;
    LW_PRGNLCL_SE0_CRYPTO_KEYTABLE_VM_MAP_4_Address                  : constant := 16#150_00dc#;
    LW_PRGNLCL_SE0_CRYPTO_KEYTABLE_VM_MAP_5_Address                  : constant := 16#150_00e0#;
    LW_PRGNLCL_SE0_CRYPTO_KEYTABLE_VM_MAP_6_Address                  : constant := 16#150_00e4#;
    LW_PRGNLCL_SE0_CRYPTO_KEYTABLE_VM_MAP_7_Address                  : constant := 16#150_00e8#;
    LW_PRGNLCL_SE0_CRYPTO_KEYTABLE_VM_MAP_8_Address                  : constant := 16#150_00ec#;
    LW_PRGNLCL_SE0_CRYPTO_KEYTABLE_VM_MAP_9_Address                  : constant := 16#150_00f0#;
    LW_PRGNLCL_SE0_CRYPTO_KEYTABLE_VM_MAP_10_Address                 : constant := 16#150_00f4#;
    LW_PRGNLCL_SE0_CRYPTO_KEYTABLE_VM_MAP_11_Address                 : constant := 16#150_00f8#;
    LW_PRGNLCL_SE0_CRYPTO_KEYTABLE_VM_MAP_12_Address                 : constant := 16#150_00fc#;
    LW_PRGNLCL_SE0_CRYPTO_KEYTABLE_VM_MAP_13_Address                 : constant := 16#150_0100#;
    LW_PRGNLCL_SE0_CRYPTO_KEYTABLE_VM_MAP_14_Address                 : constant := 16#150_0104#;
    LW_PRGNLCL_SE0_CRYPTO_KEYTABLE_VM_MAP_15_Address                 : constant := 16#150_0108#;
    LW_PRGNLCL_SE0_CRYPTO_KEYTABLE_VM_MAP_0_Size                     : constant := 16#10#;
    LW_PRGNLCL_SE0_PORT_ACCESS_CONTROL_Address                       : constant := 16#150_010c#;
    LW_PRGNLCL_SE0_ERROR_CAPTURE_Address                             : constant := 16#150_0110#;
    LW_PRGNLCL_SE0_FEATURES_Address                                  : constant := 16#150_0114#;
    LW_PRGNLCL_SE0_FUSE_STATUS_Address                               : constant := 16#150_0118#;
    LW_PRGNLCL_SE0_AES0_GSCID_Address                                : constant := 16#150_1000#;
    LW_PRGNLCL_SE0_AES0_CONFIG_Address                               : constant := 16#150_1004#;
    LW_PRGNLCL_SE0_AES0_CRYPTO_CONFIG_Address                        : constant := 16#150_1008#;
    LW_PRGNLCL_SE0_AES0_IN_ADDR_Address                              : constant := 16#150_100c#;
    LW_PRGNLCL_SE0_AES0_IN_ADDR_HI_Address                           : constant := 16#150_1010#;
    LW_PRGNLCL_SE0_AES0_OUT_ADDR_Address                             : constant := 16#150_1014#;
    LW_PRGNLCL_SE0_AES0_OUT_ADDR_HI_Address                          : constant := 16#150_1018#;
    LW_PRGNLCL_SE0_AES0_CRYPTO_LINEAR_CTR_0_Address                  : constant := 16#150_101c#;
    LW_PRGNLCL_SE0_AES0_CRYPTO_LINEAR_CTR_1_Address                  : constant := 16#150_1020#;
    LW_PRGNLCL_SE0_AES0_CRYPTO_LINEAR_CTR_2_Address                  : constant := 16#150_1024#;
    LW_PRGNLCL_SE0_AES0_CRYPTO_LINEAR_CTR_3_Address                  : constant := 16#150_1028#;
    LW_PRGNLCL_SE0_AES0_CRYPTO_LINEAR_CTR_0_Size                     : constant := 16#4#;
    LW_PRGNLCL_SE0_AES0_CRYPTO_LAST_BLOCK_Address                    : constant := 16#150_102c#;
    LW_PRGNLCL_SE0_AES0_CRYPTO_KEYTABLE_DST_Address                  : constant := 16#150_1030#;
    LW_PRGNLCL_SE0_AES0_OPERATION_Address                            : constant := 16#150_1038#;
    LW_PRGNLCL_SE0_AES0_CRYPTO_KEYTABLE_ADDR_Address                 : constant := 16#150_10bc#;
    LW_PRGNLCL_SE0_AES0_CRYPTO_KEYTABLE_DATA_Address                 : constant := 16#150_10c0#;
    LW_PRGNLCL_SE0_AES0_CMAC_RESULT_0_Address                        : constant := 16#150_10c4#;
    LW_PRGNLCL_SE0_AES0_CMAC_RESULT_1_Address                        : constant := 16#150_10c8#;
    LW_PRGNLCL_SE0_AES0_CMAC_RESULT_2_Address                        : constant := 16#150_10cc#;
    LW_PRGNLCL_SE0_AES0_CMAC_RESULT_3_Address                        : constant := 16#150_10d0#;
    LW_PRGNLCL_SE0_AES0_CMAC_RESULT_0_Size                           : constant := 16#4#;
    LW_PRGNLCL_SE0_AES0_INT_ENABLE_Address                           : constant := 16#150_10ec#;
    LW_PRGNLCL_SE0_AES0_INT_STATUS_Address                           : constant := 16#150_10f0#;
    LW_PRGNLCL_SE0_AES0_STATUS_Address                               : constant := 16#150_10f4#;
    LW_PRGNLCL_SE0_AES0_ERR_STATUS_Address                           : constant := 16#150_10f8#;
    LW_PRGNLCL_SE0_AES0_SPARE_Address                                : constant := 16#150_1110#;
    LW_PRGNLCL_SE0_AES0_CRYPTO_KEYTABLE_KEYMANIFEST_Address          : constant := 16#150_1114#;
    LW_PRGNLCL_SE0_AES0_CRYPTO_KEYTABLE_CTRL_Address                 : constant := 16#150_1118#;
    LW_PRGNLCL_SE0_AES0_CRYPTO_TAG_0_Address                         : constant := 16#150_111c#;
    LW_PRGNLCL_SE0_AES0_CRYPTO_TAG_1_Address                         : constant := 16#150_1120#;
    LW_PRGNLCL_SE0_AES0_CRYPTO_TAG_2_Address                         : constant := 16#150_1124#;
    LW_PRGNLCL_SE0_AES0_CRYPTO_TAG_3_Address                         : constant := 16#150_1128#;
    LW_PRGNLCL_SE0_AES0_CRYPTO_TAG_0_Size                            : constant := 16#4#;
    LW_PRGNLCL_SE0_AES0_CRYPTO_AAD_LENGTH_0_Address                  : constant := 16#150_112c#;
    LW_PRGNLCL_SE0_AES0_CRYPTO_AAD_LENGTH_1_Address                  : constant := 16#150_1130#;
    LW_PRGNLCL_SE0_AES0_CRYPTO_AAD_LENGTH_0_Size                     : constant := 16#2#;
    LW_PRGNLCL_SE0_AES0_CRYPTO_MSG_LENGTH_0_Address                  : constant := 16#150_1134#;
    LW_PRGNLCL_SE0_AES0_CRYPTO_MSG_LENGTH_1_Address                  : constant := 16#150_1138#;
    LW_PRGNLCL_SE0_AES0_CRYPTO_MSG_LENGTH_0_Size                     : constant := 16#2#;
    LW_PRGNLCL_SE0_AES1_GSCID_Address                                : constant := 16#150_2000#;
    LW_PRGNLCL_SE0_AES1_CONFIG_Address                               : constant := 16#150_2004#;
    LW_PRGNLCL_SE0_AES1_CRYPTO_CONFIG_Address                        : constant := 16#150_2008#;
    LW_PRGNLCL_SE0_AES1_IN_ADDR_Address                              : constant := 16#150_200c#;
    LW_PRGNLCL_SE0_AES1_IN_ADDR_HI_Address                           : constant := 16#150_2010#;
    LW_PRGNLCL_SE0_AES1_OUT_ADDR_Address                             : constant := 16#150_2014#;
    LW_PRGNLCL_SE0_AES1_OUT_ADDR_HI_Address                          : constant := 16#150_2018#;
    LW_PRGNLCL_SE0_AES1_CRYPTO_LINEAR_CTR_0_Address                  : constant := 16#150_201c#;
    LW_PRGNLCL_SE0_AES1_CRYPTO_LINEAR_CTR_1_Address                  : constant := 16#150_2020#;
    LW_PRGNLCL_SE0_AES1_CRYPTO_LINEAR_CTR_2_Address                  : constant := 16#150_2024#;
    LW_PRGNLCL_SE0_AES1_CRYPTO_LINEAR_CTR_3_Address                  : constant := 16#150_2028#;
    LW_PRGNLCL_SE0_AES1_CRYPTO_LINEAR_CTR_0_Size                     : constant := 16#4#;
    LW_PRGNLCL_SE0_AES1_CRYPTO_LAST_BLOCK_Address                    : constant := 16#150_202c#;
    LW_PRGNLCL_SE0_AES1_CRYPTO_KEYTABLE_DST_Address                  : constant := 16#150_2030#;
    LW_PRGNLCL_SE0_AES1_OPERATION_Address                            : constant := 16#150_2038#;
    LW_PRGNLCL_SE0_AES1_CRYPTO_KEYTABLE_ADDR_Address                 : constant := 16#150_20bc#;
    LW_PRGNLCL_SE0_AES1_CRYPTO_KEYTABLE_DATA_Address                 : constant := 16#150_20c0#;
    LW_PRGNLCL_SE0_AES1_CMAC_RESULT_0_Address                        : constant := 16#150_20c4#;
    LW_PRGNLCL_SE0_AES1_CMAC_RESULT_1_Address                        : constant := 16#150_20c8#;
    LW_PRGNLCL_SE0_AES1_CMAC_RESULT_2_Address                        : constant := 16#150_20cc#;
    LW_PRGNLCL_SE0_AES1_CMAC_RESULT_3_Address                        : constant := 16#150_20d0#;
    LW_PRGNLCL_SE0_AES1_CMAC_RESULT_0_Size                           : constant := 16#4#;
    LW_PRGNLCL_SE0_AES1_INT_ENABLE_Address                           : constant := 16#150_20ec#;
    LW_PRGNLCL_SE0_AES1_INT_STATUS_Address                           : constant := 16#150_20f0#;
    LW_PRGNLCL_SE0_AES1_STATUS_Address                               : constant := 16#150_20f4#;
    LW_PRGNLCL_SE0_AES1_ERR_STATUS_Address                           : constant := 16#150_20f8#;
    LW_PRGNLCL_SE0_AES1_SPARE_Address                                : constant := 16#150_2110#;
    LW_PRGNLCL_SE0_AES1_CRYPTO_KEYTABLE_KEYMANIFEST_Address          : constant := 16#150_2114#;
    LW_PRGNLCL_SE0_AES1_CRYPTO_KEYTABLE_CTRL_Address                 : constant := 16#150_2118#;
    LW_PRGNLCL_SE0_AES1_CRYPTO_TAG_0_Address                         : constant := 16#150_211c#;
    LW_PRGNLCL_SE0_AES1_CRYPTO_TAG_1_Address                         : constant := 16#150_2120#;
    LW_PRGNLCL_SE0_AES1_CRYPTO_TAG_2_Address                         : constant := 16#150_2124#;
    LW_PRGNLCL_SE0_AES1_CRYPTO_TAG_3_Address                         : constant := 16#150_2128#;
    LW_PRGNLCL_SE0_AES1_CRYPTO_TAG_0_Size                            : constant := 16#4#;
    LW_PRGNLCL_SE0_AES1_CRYPTO_AAD_LENGTH_0_Address                  : constant := 16#150_212c#;
    LW_PRGNLCL_SE0_AES1_CRYPTO_AAD_LENGTH_1_Address                  : constant := 16#150_2130#;
    LW_PRGNLCL_SE0_AES1_CRYPTO_AAD_LENGTH_0_Size                     : constant := 16#2#;
    LW_PRGNLCL_SE0_AES1_CRYPTO_MSG_LENGTH_0_Address                  : constant := 16#150_2134#;
    LW_PRGNLCL_SE0_AES1_CRYPTO_MSG_LENGTH_1_Address                  : constant := 16#150_2138#;
    LW_PRGNLCL_SE0_AES1_CRYPTO_MSG_LENGTH_0_Size                     : constant := 16#2#;
    LW_PRGNLCL_SE0_SHA_GSCID_Address                                 : constant := 16#150_4000#;
    LW_PRGNLCL_SE0_SHA_CONFIG_Address                                : constant := 16#150_4004#;
    LW_PRGNLCL_SE0_SHA_TASK_CONFIG_Address                           : constant := 16#150_4008#;
    LW_PRGNLCL_SE0_SHA_IN_ADDR_Address                               : constant := 16#150_400c#;
    LW_PRGNLCL_SE0_SHA_IN_ADDR_HI_Address                            : constant := 16#150_4010#;
    LW_PRGNLCL_SE0_SHA_OUT_ADDR_Address                              : constant := 16#150_4014#;
    LW_PRGNLCL_SE0_SHA_OUT_ADDR_HI_Address                           : constant := 16#150_4018#;
    LW_PRGNLCL_SE0_SHA_MSG_LENGTH_0_Address                          : constant := 16#150_401c#;
    LW_PRGNLCL_SE0_SHA_MSG_LENGTH_1_Address                          : constant := 16#150_4020#;
    LW_PRGNLCL_SE0_SHA_MSG_LENGTH_2_Address                          : constant := 16#150_4024#;
    LW_PRGNLCL_SE0_SHA_MSG_LENGTH_3_Address                          : constant := 16#150_4028#;
    LW_PRGNLCL_SE0_SHA_MSG_LENGTH_0_Size                             : constant := 16#4#;
    LW_PRGNLCL_SE0_SHA_MSG_LEFT_0_Address                            : constant := 16#150_402c#;
    LW_PRGNLCL_SE0_SHA_MSG_LEFT_1_Address                            : constant := 16#150_4030#;
    LW_PRGNLCL_SE0_SHA_MSG_LEFT_2_Address                            : constant := 16#150_4034#;
    LW_PRGNLCL_SE0_SHA_MSG_LEFT_3_Address                            : constant := 16#150_4038#;
    LW_PRGNLCL_SE0_SHA_MSG_LEFT_0_Size                               : constant := 16#4#;
    LW_PRGNLCL_SE0_SHA_OPERATION_Address                             : constant := 16#150_407c#;
    LW_PRGNLCL_SE0_SHA_INT_ENABLE_Address                            : constant := 16#150_4080#;
    LW_PRGNLCL_SE0_SHA_INT_STATUS_Address                            : constant := 16#150_4084#;
    LW_PRGNLCL_SE0_SHA_STATUS_Address                                : constant := 16#150_4088#;
    LW_PRGNLCL_SE0_SHA_ERR_STATUS_Address                            : constant := 16#150_408c#;
    LW_PRGNLCL_SE0_SHA_SPARE_Address                                 : constant := 16#150_4090#;
    LW_PRGNLCL_SE0_SHA_CRYPTO_KEYTABLE_ADDR_Address                  : constant := 16#150_4094#;
    LW_PRGNLCL_SE0_SHA_CRYPTO_KEYTABLE_DATA_Address                  : constant := 16#150_4098#;
    LW_PRGNLCL_SE0_SHA_CRYPTO_KEYTABLE_KEYMANIFEST_Address           : constant := 16#150_409c#;
    LW_PRGNLCL_SE0_SHA_CRYPTO_KEYTABLE_CTRL_Address                  : constant := 16#150_40a0#;
    LW_PRGNLCL_SE0_SHA_CRYPTO_CONFIG_Address                         : constant := 16#150_40a4#;
    LW_PRGNLCL_SE0_SHA_CRYPTO_KEYTABLE_DST_Address                   : constant := 16#150_40a8#;
    LW_PRGNLCL_SE0_SHA_HASH_LENGTH_Address                           : constant := 16#150_40ac#;
    LW_PRGNLCL_SE0_SHA_HASH_RESULT_0_Address                         : constant := 16#150_40b0#;
    LW_PRGNLCL_SE0_SHA_HASH_RESULT_1_Address                         : constant := 16#150_40b4#;
    LW_PRGNLCL_SE0_SHA_HASH_RESULT_2_Address                         : constant := 16#150_40b8#;
    LW_PRGNLCL_SE0_SHA_HASH_RESULT_3_Address                         : constant := 16#150_40bc#;
    LW_PRGNLCL_SE0_SHA_HASH_RESULT_4_Address                         : constant := 16#150_40c0#;
    LW_PRGNLCL_SE0_SHA_HASH_RESULT_5_Address                         : constant := 16#150_40c4#;
    LW_PRGNLCL_SE0_SHA_HASH_RESULT_6_Address                         : constant := 16#150_40c8#;
    LW_PRGNLCL_SE0_SHA_HASH_RESULT_7_Address                         : constant := 16#150_40cc#;
    LW_PRGNLCL_SE0_SHA_HASH_RESULT_8_Address                         : constant := 16#150_40d0#;
    LW_PRGNLCL_SE0_SHA_HASH_RESULT_9_Address                         : constant := 16#150_40d4#;
    LW_PRGNLCL_SE0_SHA_HASH_RESULT_10_Address                        : constant := 16#150_40d8#;
    LW_PRGNLCL_SE0_SHA_HASH_RESULT_11_Address                        : constant := 16#150_40dc#;
    LW_PRGNLCL_SE0_SHA_HASH_RESULT_12_Address                        : constant := 16#150_40e0#;
    LW_PRGNLCL_SE0_SHA_HASH_RESULT_13_Address                        : constant := 16#150_40e4#;
    LW_PRGNLCL_SE0_SHA_HASH_RESULT_14_Address                        : constant := 16#150_40e8#;
    LW_PRGNLCL_SE0_SHA_HASH_RESULT_15_Address                        : constant := 16#150_40ec#;
    LW_PRGNLCL_SE0_SHA_HASH_RESULT_16_Address                        : constant := 16#150_40f0#;
    LW_PRGNLCL_SE0_SHA_HASH_RESULT_17_Address                        : constant := 16#150_40f4#;
    LW_PRGNLCL_SE0_SHA_HASH_RESULT_18_Address                        : constant := 16#150_40f8#;
    LW_PRGNLCL_SE0_SHA_HASH_RESULT_19_Address                        : constant := 16#150_40fc#;
    LW_PRGNLCL_SE0_SHA_HASH_RESULT_20_Address                        : constant := 16#150_4100#;
    LW_PRGNLCL_SE0_SHA_HASH_RESULT_21_Address                        : constant := 16#150_4104#;
    LW_PRGNLCL_SE0_SHA_HASH_RESULT_22_Address                        : constant := 16#150_4108#;
    LW_PRGNLCL_SE0_SHA_HASH_RESULT_23_Address                        : constant := 16#150_410c#;
    LW_PRGNLCL_SE0_SHA_HASH_RESULT_24_Address                        : constant := 16#150_4110#;
    LW_PRGNLCL_SE0_SHA_HASH_RESULT_25_Address                        : constant := 16#150_4114#;
    LW_PRGNLCL_SE0_SHA_HASH_RESULT_26_Address                        : constant := 16#150_4118#;
    LW_PRGNLCL_SE0_SHA_HASH_RESULT_27_Address                        : constant := 16#150_411c#;
    LW_PRGNLCL_SE0_SHA_HASH_RESULT_28_Address                        : constant := 16#150_4120#;
    LW_PRGNLCL_SE0_SHA_HASH_RESULT_29_Address                        : constant := 16#150_4124#;
    LW_PRGNLCL_SE0_SHA_HASH_RESULT_30_Address                        : constant := 16#150_4128#;
    LW_PRGNLCL_SE0_SHA_HASH_RESULT_31_Address                        : constant := 16#150_412c#;
    LW_PRGNLCL_SE0_SHA_HASH_RESULT_32_Address                        : constant := 16#150_4130#;
    LW_PRGNLCL_SE0_SHA_HASH_RESULT_33_Address                        : constant := 16#150_4134#;
    LW_PRGNLCL_SE0_SHA_HASH_RESULT_34_Address                        : constant := 16#150_4138#;
    LW_PRGNLCL_SE0_SHA_HASH_RESULT_35_Address                        : constant := 16#150_413c#;
    LW_PRGNLCL_SE0_SHA_HASH_RESULT_36_Address                        : constant := 16#150_4140#;
    LW_PRGNLCL_SE0_SHA_HASH_RESULT_37_Address                        : constant := 16#150_4144#;
    LW_PRGNLCL_SE0_SHA_HASH_RESULT_38_Address                        : constant := 16#150_4148#;
    LW_PRGNLCL_SE0_SHA_HASH_RESULT_39_Address                        : constant := 16#150_414c#;
    LW_PRGNLCL_SE0_SHA_HASH_RESULT_40_Address                        : constant := 16#150_4150#;
    LW_PRGNLCL_SE0_SHA_HASH_RESULT_41_Address                        : constant := 16#150_4154#;
    LW_PRGNLCL_SE0_SHA_HASH_RESULT_42_Address                        : constant := 16#150_4158#;
    LW_PRGNLCL_SE0_SHA_HASH_RESULT_43_Address                        : constant := 16#150_415c#;
    LW_PRGNLCL_SE0_SHA_HASH_RESULT_44_Address                        : constant := 16#150_4160#;
    LW_PRGNLCL_SE0_SHA_HASH_RESULT_45_Address                        : constant := 16#150_4164#;
    LW_PRGNLCL_SE0_SHA_HASH_RESULT_46_Address                        : constant := 16#150_4168#;
    LW_PRGNLCL_SE0_SHA_HASH_RESULT_47_Address                        : constant := 16#150_416c#;
    LW_PRGNLCL_SE0_SHA_HASH_RESULT_48_Address                        : constant := 16#150_4170#;
    LW_PRGNLCL_SE0_SHA_HASH_RESULT_49_Address                        : constant := 16#150_4174#;
    LW_PRGNLCL_SE0_SHA_HASH_RESULT_0_Size                            : constant := 16#32#;
    LW_PRGNLCL_KEY_MOVER_CONFIG_Address                              : constant := 16#153_0000#;
    LW_PRGNLCL_KEY_MOVER_OPERATION_Address                           : constant := 16#153_0004#;
    LW_PRGNLCL_KEY_MOVER_STATUS_Address                              : constant := 16#153_0008#;
    LW_PRGNLCL_KEY_MOVER_INTR_EN_Address                             : constant := 16#153_000c#;
    LW_PRGNLCL_KEY_MOVER_KEY_MOVER_TIMEOUT_Address                   : constant := 16#153_0010#;
    LW_PRGNLCL_KEYSTORE_FUSE_STATUS_Address                          : constant := 16#153_1000#;
    LW_PRGNLCL_KEYSTORE_FUSE_DEV_KEY_STATUS_Address                  : constant := 16#153_1004#;
    LW_PRGNLCL_KEYSTORE_FUSE_CONTROL_Address                         : constant := 16#153_1008#;
    LW_PRGNLCL_KEYSTORE_FUSE_ACCESS_INDEX_Address                    : constant := 16#153_100c#;
    LW_PRGNLCL_KEYSTORE_FUSE_ACCESS_STATUS_Address                   : constant := 16#153_1010#;
    LW_PRGNLCL_KEYSTORE_FUSE_ACCESS_VALUE_Address                    : constant := 16#153_1014#;
    LW_PRGNLCL_KEYSTORE_KROM_DEV_KEY_STATUS_Address                  : constant := 16#153_1018#;
    LW_PRGNLCL_KEYSTORE_KROM_CONTROL_Address                         : constant := 16#153_101c#;
    LW_PRGNLCL_KEYSTORE_KROM_ACCESS_INDEX_Address                    : constant := 16#153_1020#;
    LW_PRGNLCL_KEYSTORE_KROM_ACCESS_STATUS_Address                   : constant := 16#153_1024#;
    LW_PRGNLCL_KEYSTORE_KROM_ACCESS_VALUE_Address                    : constant := 16#153_1028#;
    LW_PRGNLCL_KEYSTORE_RTL_DEV_KEY_STATUS_Address                   : constant := 16#153_102c#;
    LW_PRGNLCL_KEYSTORE_RTL_KEYS_CONTROL_Address                     : constant := 16#153_1030#;
    LW_PRGNLCL_LWPKA_CTRL_PRIV_LEVEL_MASK_Address                    : constant := 16#151_0000#;
    LW_PRGNLCL_LWPKA_CTRL_OPMASK_PRIV_LEVEL_MASK_Address             : constant := 16#151_4044#;
    LW_PRGNLCL_LWPKA_CTRL_RESET_Address                              : constant := 16#151_0100#;
    LW_PRGNLCL_LWPKA_CTRL_KSLT_CONTROL_Address                       : constant := 16#151_0104#;
    LW_PRGNLCL_LWPKA_CTRL_CORE_CONTROL_Address                       : constant := 16#151_0108#;
    LW_PRGNLCL_LWPKA_CTRL_STATUS_Address                             : constant := 16#151_010c#;
    LW_PRGNLCL_LWPKA_CTRL_MUTEX_Address                              : constant := 16#151_0114#;
    LW_PRGNLCL_LWPKA_CTRL_MUTEX_RELEASE_Address                      : constant := 16#151_0118#;
    LW_PRGNLCL_LWPKA_CTRL_MUTEX_STATUS_Address                       : constant := 16#151_011c#;
    LW_PRGNLCL_LWPKA_CTRL_SCC_CONTROL_Address                        : constant := 16#151_012c#;
    LW_PRGNLCL_LWPKA_CTRL_ERROR_CAPTURE_Address                      : constant := 16#151_0134#;
    LW_PRGNLCL_LWPKA_CTRL_CG_Address                                 : constant := 16#151_0138#;
    LW_PRGNLCL_LWPKA_CTRL_INTR_STATUS_Address                        : constant := 16#151_013c#;
    LW_PRGNLCL_LWPKA_CTRL_INTR_MASK_Address                          : constant := 16#151_0140#;
    LW_PRGNLCL_LWPKA_CTRL_VERSION_Address                            : constant := 16#151_0148#;
    LW_PRGNLCL_LWPKA_CTRL_BUILD_CONFIG_Address                       : constant := 16#151_014c#;
    LW_PRGNLCL_LWPKA_CTRL_KSLT_ADDR_0_Address                        : constant := 16#151_0800#;
    LW_PRGNLCL_LWPKA_CTRL_KSLT_ADDR_1_Address                        : constant := 16#151_0804#;
    LW_PRGNLCL_LWPKA_CTRL_KSLT_ADDR_2_Address                        : constant := 16#151_0808#;
    LW_PRGNLCL_LWPKA_CTRL_KSLT_ADDR_3_Address                        : constant := 16#151_080c#;
    LW_PRGNLCL_LWPKA_CTRL_KSLT_ADDR_0_Size                           : constant := 16#4#;
    LW_PRGNLCL_LWPKA_CTRL_KSLT_DATA_0_Address                        : constant := 16#151_0810#;
    LW_PRGNLCL_LWPKA_CTRL_KSLT_DATA_1_Address                        : constant := 16#151_0814#;
    LW_PRGNLCL_LWPKA_CTRL_KSLT_DATA_2_Address                        : constant := 16#151_0818#;
    LW_PRGNLCL_LWPKA_CTRL_KSLT_DATA_3_Address                        : constant := 16#151_081c#;
    LW_PRGNLCL_LWPKA_CTRL_KSLT_DATA_0_Size                           : constant := 16#4#;
    LW_PRGNLCL_LWPKA_CTRL_KSLT_OWNER_0_Address                       : constant := 16#151_0860#;
    LW_PRGNLCL_LWPKA_CTRL_KSLT_OWNER_1_Address                       : constant := 16#151_0864#;
    LW_PRGNLCL_LWPKA_CTRL_KSLT_OWNER_2_Address                       : constant := 16#151_0868#;
    LW_PRGNLCL_LWPKA_CTRL_KSLT_OWNER_3_Address                       : constant := 16#151_086c#;
    LW_PRGNLCL_LWPKA_CTRL_KSLT_OWNER_0_Size                          : constant := 16#4#;
    LW_PRGNLCL_LWPKA_CTRL_KSLT_ACCESS_0_Address                      : constant := 16#151_0870#;
    LW_PRGNLCL_LWPKA_CTRL_KSLT_ACCESS_1_Address                      : constant := 16#151_0874#;
    LW_PRGNLCL_LWPKA_CTRL_KSLT_ACCESS_2_Address                      : constant := 16#151_0878#;
    LW_PRGNLCL_LWPKA_CTRL_KSLT_ACCESS_3_Address                      : constant := 16#151_087c#;
    LW_PRGNLCL_LWPKA_CTRL_KSLT_ACCESS_0_Size                         : constant := 16#4#;
    LW_PRGNLCL_LWPKA_CTRL_FUSE_STATUS_Address                        : constant := 16#151_0880#;
    LW_PRGNLCL_LWPKA_CORE_CONFIG_Address                             : constant := 16#151_4000#;
    LW_PRGNLCL_LWPKA_CORE_OPERATION_Address                          : constant := 16#151_4004#;
    LW_PRGNLCL_LWPKA_CORE_STATUS_Address                             : constant := 16#151_4008#;
    LW_PRGNLCL_LWPKA_CORE_IRQ_ENABLE_Address                         : constant := 16#151_400c#;
    LW_PRGNLCL_LWPKA_CORE_IRQ_STATUS_Address                         : constant := 16#151_4010#;
    LW_PRGNLCL_LWPKA_CORE_ECC_KEYMANIFEST_SW_Address                 : constant := 16#151_4014#;
    LW_PRGNLCL_LWPKA_CORE_ECC_KEYMANIFEST_HW_Address                 : constant := 16#151_4018#;
    LW_PRGNLCL_LWPKA_CORE_ECC_KEYSTORE_CTRL_Address                  : constant := 16#151_401c#;
    LW_PRGNLCL_LWPKA_CORE_OPMASK_Address                             : constant := 16#151_4040#;
    LW_PRGNLCL_LWPKA_CORE_DEBUG0_Address                             : constant := 16#151_4080#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_0_Address                           : constant := 16#151_4200#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_1_Address                           : constant := 16#151_4204#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_2_Address                           : constant := 16#151_4208#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_3_Address                           : constant := 16#151_420c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_4_Address                           : constant := 16#151_4210#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_5_Address                           : constant := 16#151_4214#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_6_Address                           : constant := 16#151_4218#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_7_Address                           : constant := 16#151_421c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_8_Address                           : constant := 16#151_4220#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_9_Address                           : constant := 16#151_4224#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_10_Address                          : constant := 16#151_4228#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_11_Address                          : constant := 16#151_422c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_12_Address                          : constant := 16#151_4230#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_13_Address                          : constant := 16#151_4234#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_14_Address                          : constant := 16#151_4238#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_15_Address                          : constant := 16#151_423c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_16_Address                          : constant := 16#151_4240#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_17_Address                          : constant := 16#151_4244#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_18_Address                          : constant := 16#151_4248#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_19_Address                          : constant := 16#151_424c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_20_Address                          : constant := 16#151_4250#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_21_Address                          : constant := 16#151_4254#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_22_Address                          : constant := 16#151_4258#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_23_Address                          : constant := 16#151_425c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_24_Address                          : constant := 16#151_4260#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_25_Address                          : constant := 16#151_4264#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_26_Address                          : constant := 16#151_4268#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_27_Address                          : constant := 16#151_426c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_28_Address                          : constant := 16#151_4270#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_29_Address                          : constant := 16#151_4274#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_30_Address                          : constant := 16#151_4278#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_31_Address                          : constant := 16#151_427c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_32_Address                          : constant := 16#151_4280#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_33_Address                          : constant := 16#151_4284#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_34_Address                          : constant := 16#151_4288#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_35_Address                          : constant := 16#151_428c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_36_Address                          : constant := 16#151_4290#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_37_Address                          : constant := 16#151_4294#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_38_Address                          : constant := 16#151_4298#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_39_Address                          : constant := 16#151_429c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_40_Address                          : constant := 16#151_42a0#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_41_Address                          : constant := 16#151_42a4#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_42_Address                          : constant := 16#151_42a8#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_43_Address                          : constant := 16#151_42ac#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_44_Address                          : constant := 16#151_42b0#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_45_Address                          : constant := 16#151_42b4#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_46_Address                          : constant := 16#151_42b8#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_47_Address                          : constant := 16#151_42bc#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_48_Address                          : constant := 16#151_42c0#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_49_Address                          : constant := 16#151_42c4#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_50_Address                          : constant := 16#151_42c8#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_51_Address                          : constant := 16#151_42cc#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_52_Address                          : constant := 16#151_42d0#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_53_Address                          : constant := 16#151_42d4#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_54_Address                          : constant := 16#151_42d8#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_55_Address                          : constant := 16#151_42dc#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_56_Address                          : constant := 16#151_42e0#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_57_Address                          : constant := 16#151_42e4#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_58_Address                          : constant := 16#151_42e8#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_59_Address                          : constant := 16#151_42ec#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_60_Address                          : constant := 16#151_42f0#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_61_Address                          : constant := 16#151_42f4#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_62_Address                          : constant := 16#151_42f8#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_63_Address                          : constant := 16#151_42fc#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_64_Address                          : constant := 16#151_4300#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_65_Address                          : constant := 16#151_4304#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_66_Address                          : constant := 16#151_4308#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_67_Address                          : constant := 16#151_430c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_68_Address                          : constant := 16#151_4310#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_69_Address                          : constant := 16#151_4314#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_70_Address                          : constant := 16#151_4318#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_71_Address                          : constant := 16#151_431c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_72_Address                          : constant := 16#151_4320#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_73_Address                          : constant := 16#151_4324#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_74_Address                          : constant := 16#151_4328#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_75_Address                          : constant := 16#151_432c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_76_Address                          : constant := 16#151_4330#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_77_Address                          : constant := 16#151_4334#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_78_Address                          : constant := 16#151_4338#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_79_Address                          : constant := 16#151_433c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_80_Address                          : constant := 16#151_4340#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_81_Address                          : constant := 16#151_4344#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_82_Address                          : constant := 16#151_4348#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_83_Address                          : constant := 16#151_434c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_84_Address                          : constant := 16#151_4350#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_85_Address                          : constant := 16#151_4354#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_86_Address                          : constant := 16#151_4358#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_87_Address                          : constant := 16#151_435c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_88_Address                          : constant := 16#151_4360#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_89_Address                          : constant := 16#151_4364#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_90_Address                          : constant := 16#151_4368#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_91_Address                          : constant := 16#151_436c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_92_Address                          : constant := 16#151_4370#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_93_Address                          : constant := 16#151_4374#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_94_Address                          : constant := 16#151_4378#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_95_Address                          : constant := 16#151_437c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_96_Address                          : constant := 16#151_4380#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_97_Address                          : constant := 16#151_4384#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_98_Address                          : constant := 16#151_4388#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_99_Address                          : constant := 16#151_438c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_100_Address                         : constant := 16#151_4390#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_101_Address                         : constant := 16#151_4394#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_102_Address                         : constant := 16#151_4398#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_103_Address                         : constant := 16#151_439c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_104_Address                         : constant := 16#151_43a0#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_105_Address                         : constant := 16#151_43a4#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_106_Address                         : constant := 16#151_43a8#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_107_Address                         : constant := 16#151_43ac#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_108_Address                         : constant := 16#151_43b0#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_109_Address                         : constant := 16#151_43b4#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_110_Address                         : constant := 16#151_43b8#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_111_Address                         : constant := 16#151_43bc#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_112_Address                         : constant := 16#151_43c0#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_113_Address                         : constant := 16#151_43c4#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_114_Address                         : constant := 16#151_43c8#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_115_Address                         : constant := 16#151_43cc#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_116_Address                         : constant := 16#151_43d0#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_117_Address                         : constant := 16#151_43d4#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_118_Address                         : constant := 16#151_43d8#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_119_Address                         : constant := 16#151_43dc#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_120_Address                         : constant := 16#151_43e0#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_121_Address                         : constant := 16#151_43e4#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_122_Address                         : constant := 16#151_43e8#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_123_Address                         : constant := 16#151_43ec#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_124_Address                         : constant := 16#151_43f0#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_125_Address                         : constant := 16#151_43f4#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_126_Address                         : constant := 16#151_43f8#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_127_Address                         : constant := 16#151_43fc#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K0_0_Size                              : constant := 16#80#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K1_0_Address                           : constant := 16#151_4400#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K1_1_Address                           : constant := 16#151_4404#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K1_2_Address                           : constant := 16#151_4408#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K1_3_Address                           : constant := 16#151_440c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K1_4_Address                           : constant := 16#151_4410#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K1_5_Address                           : constant := 16#151_4414#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K1_6_Address                           : constant := 16#151_4418#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K1_7_Address                           : constant := 16#151_441c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K1_8_Address                           : constant := 16#151_4420#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K1_9_Address                           : constant := 16#151_4424#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K1_10_Address                          : constant := 16#151_4428#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K1_11_Address                          : constant := 16#151_442c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K1_12_Address                          : constant := 16#151_4430#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K1_13_Address                          : constant := 16#151_4434#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K1_14_Address                          : constant := 16#151_4438#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K1_15_Address                          : constant := 16#151_443c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K1_16_Address                          : constant := 16#151_4440#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K1_17_Address                          : constant := 16#151_4444#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K1_18_Address                          : constant := 16#151_4448#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K1_19_Address                          : constant := 16#151_444c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K1_20_Address                          : constant := 16#151_4450#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K1_21_Address                          : constant := 16#151_4454#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K1_22_Address                          : constant := 16#151_4458#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K1_23_Address                          : constant := 16#151_445c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K1_24_Address                          : constant := 16#151_4460#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K1_25_Address                          : constant := 16#151_4464#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K1_26_Address                          : constant := 16#151_4468#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K1_27_Address                          : constant := 16#151_446c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K1_28_Address                          : constant := 16#151_4470#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K1_29_Address                          : constant := 16#151_4474#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K1_30_Address                          : constant := 16#151_4478#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K1_31_Address                          : constant := 16#151_447c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K1_32_Address                          : constant := 16#151_4480#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K1_33_Address                          : constant := 16#151_4484#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K1_34_Address                          : constant := 16#151_4488#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K1_35_Address                          : constant := 16#151_448c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K1_36_Address                          : constant := 16#151_4490#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K1_37_Address                          : constant := 16#151_4494#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K1_38_Address                          : constant := 16#151_4498#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K1_39_Address                          : constant := 16#151_449c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K1_40_Address                          : constant := 16#151_44a0#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K1_41_Address                          : constant := 16#151_44a4#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K1_42_Address                          : constant := 16#151_44a8#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K1_43_Address                          : constant := 16#151_44ac#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K1_44_Address                          : constant := 16#151_44b0#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K1_45_Address                          : constant := 16#151_44b4#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K1_46_Address                          : constant := 16#151_44b8#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K1_47_Address                          : constant := 16#151_44bc#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K1_48_Address                          : constant := 16#151_44c0#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K1_49_Address                          : constant := 16#151_44c4#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K1_50_Address                          : constant := 16#151_44c8#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K1_51_Address                          : constant := 16#151_44cc#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K1_52_Address                          : constant := 16#151_44d0#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K1_53_Address                          : constant := 16#151_44d4#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K1_54_Address                          : constant := 16#151_44d8#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K1_55_Address                          : constant := 16#151_44dc#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K1_56_Address                          : constant := 16#151_44e0#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K1_57_Address                          : constant := 16#151_44e4#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K1_58_Address                          : constant := 16#151_44e8#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K1_59_Address                          : constant := 16#151_44ec#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K1_60_Address                          : constant := 16#151_44f0#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K1_61_Address                          : constant := 16#151_44f4#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K1_62_Address                          : constant := 16#151_44f8#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K1_63_Address                          : constant := 16#151_44fc#;
    LW_PRGNLCL_LWPKA_CORE_LOR_K1_0_Size                              : constant := 16#40#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_0_Address                           : constant := 16#151_4800#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_1_Address                           : constant := 16#151_4804#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_2_Address                           : constant := 16#151_4808#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_3_Address                           : constant := 16#151_480c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_4_Address                           : constant := 16#151_4810#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_5_Address                           : constant := 16#151_4814#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_6_Address                           : constant := 16#151_4818#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_7_Address                           : constant := 16#151_481c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_8_Address                           : constant := 16#151_4820#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_9_Address                           : constant := 16#151_4824#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_10_Address                          : constant := 16#151_4828#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_11_Address                          : constant := 16#151_482c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_12_Address                          : constant := 16#151_4830#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_13_Address                          : constant := 16#151_4834#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_14_Address                          : constant := 16#151_4838#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_15_Address                          : constant := 16#151_483c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_16_Address                          : constant := 16#151_4840#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_17_Address                          : constant := 16#151_4844#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_18_Address                          : constant := 16#151_4848#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_19_Address                          : constant := 16#151_484c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_20_Address                          : constant := 16#151_4850#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_21_Address                          : constant := 16#151_4854#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_22_Address                          : constant := 16#151_4858#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_23_Address                          : constant := 16#151_485c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_24_Address                          : constant := 16#151_4860#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_25_Address                          : constant := 16#151_4864#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_26_Address                          : constant := 16#151_4868#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_27_Address                          : constant := 16#151_486c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_28_Address                          : constant := 16#151_4870#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_29_Address                          : constant := 16#151_4874#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_30_Address                          : constant := 16#151_4878#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_31_Address                          : constant := 16#151_487c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_32_Address                          : constant := 16#151_4880#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_33_Address                          : constant := 16#151_4884#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_34_Address                          : constant := 16#151_4888#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_35_Address                          : constant := 16#151_488c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_36_Address                          : constant := 16#151_4890#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_37_Address                          : constant := 16#151_4894#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_38_Address                          : constant := 16#151_4898#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_39_Address                          : constant := 16#151_489c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_40_Address                          : constant := 16#151_48a0#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_41_Address                          : constant := 16#151_48a4#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_42_Address                          : constant := 16#151_48a8#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_43_Address                          : constant := 16#151_48ac#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_44_Address                          : constant := 16#151_48b0#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_45_Address                          : constant := 16#151_48b4#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_46_Address                          : constant := 16#151_48b8#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_47_Address                          : constant := 16#151_48bc#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_48_Address                          : constant := 16#151_48c0#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_49_Address                          : constant := 16#151_48c4#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_50_Address                          : constant := 16#151_48c8#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_51_Address                          : constant := 16#151_48cc#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_52_Address                          : constant := 16#151_48d0#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_53_Address                          : constant := 16#151_48d4#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_54_Address                          : constant := 16#151_48d8#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_55_Address                          : constant := 16#151_48dc#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_56_Address                          : constant := 16#151_48e0#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_57_Address                          : constant := 16#151_48e4#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_58_Address                          : constant := 16#151_48e8#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_59_Address                          : constant := 16#151_48ec#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_60_Address                          : constant := 16#151_48f0#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_61_Address                          : constant := 16#151_48f4#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_62_Address                          : constant := 16#151_48f8#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_63_Address                          : constant := 16#151_48fc#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_64_Address                          : constant := 16#151_4900#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_65_Address                          : constant := 16#151_4904#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_66_Address                          : constant := 16#151_4908#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_67_Address                          : constant := 16#151_490c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_68_Address                          : constant := 16#151_4910#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_69_Address                          : constant := 16#151_4914#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_70_Address                          : constant := 16#151_4918#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_71_Address                          : constant := 16#151_491c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_72_Address                          : constant := 16#151_4920#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_73_Address                          : constant := 16#151_4924#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_74_Address                          : constant := 16#151_4928#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_75_Address                          : constant := 16#151_492c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_76_Address                          : constant := 16#151_4930#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_77_Address                          : constant := 16#151_4934#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_78_Address                          : constant := 16#151_4938#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_79_Address                          : constant := 16#151_493c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_80_Address                          : constant := 16#151_4940#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_81_Address                          : constant := 16#151_4944#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_82_Address                          : constant := 16#151_4948#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_83_Address                          : constant := 16#151_494c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_84_Address                          : constant := 16#151_4950#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_85_Address                          : constant := 16#151_4954#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_86_Address                          : constant := 16#151_4958#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_87_Address                          : constant := 16#151_495c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_88_Address                          : constant := 16#151_4960#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_89_Address                          : constant := 16#151_4964#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_90_Address                          : constant := 16#151_4968#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_91_Address                          : constant := 16#151_496c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_92_Address                          : constant := 16#151_4970#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_93_Address                          : constant := 16#151_4974#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_94_Address                          : constant := 16#151_4978#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_95_Address                          : constant := 16#151_497c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_96_Address                          : constant := 16#151_4980#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_97_Address                          : constant := 16#151_4984#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_98_Address                          : constant := 16#151_4988#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_99_Address                          : constant := 16#151_498c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_100_Address                         : constant := 16#151_4990#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_101_Address                         : constant := 16#151_4994#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_102_Address                         : constant := 16#151_4998#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_103_Address                         : constant := 16#151_499c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_104_Address                         : constant := 16#151_49a0#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_105_Address                         : constant := 16#151_49a4#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_106_Address                         : constant := 16#151_49a8#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_107_Address                         : constant := 16#151_49ac#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_108_Address                         : constant := 16#151_49b0#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_109_Address                         : constant := 16#151_49b4#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_110_Address                         : constant := 16#151_49b8#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_111_Address                         : constant := 16#151_49bc#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_112_Address                         : constant := 16#151_49c0#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_113_Address                         : constant := 16#151_49c4#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_114_Address                         : constant := 16#151_49c8#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_115_Address                         : constant := 16#151_49cc#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_116_Address                         : constant := 16#151_49d0#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_117_Address                         : constant := 16#151_49d4#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_118_Address                         : constant := 16#151_49d8#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_119_Address                         : constant := 16#151_49dc#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_120_Address                         : constant := 16#151_49e0#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_121_Address                         : constant := 16#151_49e4#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_122_Address                         : constant := 16#151_49e8#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_123_Address                         : constant := 16#151_49ec#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_124_Address                         : constant := 16#151_49f0#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_125_Address                         : constant := 16#151_49f4#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_126_Address                         : constant := 16#151_49f8#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_127_Address                         : constant := 16#151_49fc#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S0_0_Size                              : constant := 16#80#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_0_Address                           : constant := 16#151_4a00#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_1_Address                           : constant := 16#151_4a04#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_2_Address                           : constant := 16#151_4a08#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_3_Address                           : constant := 16#151_4a0c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_4_Address                           : constant := 16#151_4a10#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_5_Address                           : constant := 16#151_4a14#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_6_Address                           : constant := 16#151_4a18#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_7_Address                           : constant := 16#151_4a1c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_8_Address                           : constant := 16#151_4a20#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_9_Address                           : constant := 16#151_4a24#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_10_Address                          : constant := 16#151_4a28#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_11_Address                          : constant := 16#151_4a2c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_12_Address                          : constant := 16#151_4a30#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_13_Address                          : constant := 16#151_4a34#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_14_Address                          : constant := 16#151_4a38#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_15_Address                          : constant := 16#151_4a3c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_16_Address                          : constant := 16#151_4a40#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_17_Address                          : constant := 16#151_4a44#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_18_Address                          : constant := 16#151_4a48#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_19_Address                          : constant := 16#151_4a4c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_20_Address                          : constant := 16#151_4a50#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_21_Address                          : constant := 16#151_4a54#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_22_Address                          : constant := 16#151_4a58#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_23_Address                          : constant := 16#151_4a5c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_24_Address                          : constant := 16#151_4a60#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_25_Address                          : constant := 16#151_4a64#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_26_Address                          : constant := 16#151_4a68#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_27_Address                          : constant := 16#151_4a6c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_28_Address                          : constant := 16#151_4a70#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_29_Address                          : constant := 16#151_4a74#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_30_Address                          : constant := 16#151_4a78#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_31_Address                          : constant := 16#151_4a7c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_32_Address                          : constant := 16#151_4a80#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_33_Address                          : constant := 16#151_4a84#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_34_Address                          : constant := 16#151_4a88#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_35_Address                          : constant := 16#151_4a8c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_36_Address                          : constant := 16#151_4a90#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_37_Address                          : constant := 16#151_4a94#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_38_Address                          : constant := 16#151_4a98#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_39_Address                          : constant := 16#151_4a9c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_40_Address                          : constant := 16#151_4aa0#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_41_Address                          : constant := 16#151_4aa4#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_42_Address                          : constant := 16#151_4aa8#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_43_Address                          : constant := 16#151_4aac#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_44_Address                          : constant := 16#151_4ab0#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_45_Address                          : constant := 16#151_4ab4#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_46_Address                          : constant := 16#151_4ab8#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_47_Address                          : constant := 16#151_4abc#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_48_Address                          : constant := 16#151_4ac0#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_49_Address                          : constant := 16#151_4ac4#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_50_Address                          : constant := 16#151_4ac8#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_51_Address                          : constant := 16#151_4acc#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_52_Address                          : constant := 16#151_4ad0#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_53_Address                          : constant := 16#151_4ad4#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_54_Address                          : constant := 16#151_4ad8#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_55_Address                          : constant := 16#151_4adc#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_56_Address                          : constant := 16#151_4ae0#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_57_Address                          : constant := 16#151_4ae4#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_58_Address                          : constant := 16#151_4ae8#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_59_Address                          : constant := 16#151_4aec#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_60_Address                          : constant := 16#151_4af0#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_61_Address                          : constant := 16#151_4af4#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_62_Address                          : constant := 16#151_4af8#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_63_Address                          : constant := 16#151_4afc#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_64_Address                          : constant := 16#151_4b00#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_65_Address                          : constant := 16#151_4b04#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_66_Address                          : constant := 16#151_4b08#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_67_Address                          : constant := 16#151_4b0c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_68_Address                          : constant := 16#151_4b10#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_69_Address                          : constant := 16#151_4b14#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_70_Address                          : constant := 16#151_4b18#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_71_Address                          : constant := 16#151_4b1c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_72_Address                          : constant := 16#151_4b20#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_73_Address                          : constant := 16#151_4b24#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_74_Address                          : constant := 16#151_4b28#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_75_Address                          : constant := 16#151_4b2c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_76_Address                          : constant := 16#151_4b30#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_77_Address                          : constant := 16#151_4b34#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_78_Address                          : constant := 16#151_4b38#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_79_Address                          : constant := 16#151_4b3c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_80_Address                          : constant := 16#151_4b40#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_81_Address                          : constant := 16#151_4b44#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_82_Address                          : constant := 16#151_4b48#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_83_Address                          : constant := 16#151_4b4c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_84_Address                          : constant := 16#151_4b50#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_85_Address                          : constant := 16#151_4b54#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_86_Address                          : constant := 16#151_4b58#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_87_Address                          : constant := 16#151_4b5c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_88_Address                          : constant := 16#151_4b60#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_89_Address                          : constant := 16#151_4b64#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_90_Address                          : constant := 16#151_4b68#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_91_Address                          : constant := 16#151_4b6c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_92_Address                          : constant := 16#151_4b70#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_93_Address                          : constant := 16#151_4b74#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_94_Address                          : constant := 16#151_4b78#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_95_Address                          : constant := 16#151_4b7c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_96_Address                          : constant := 16#151_4b80#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_97_Address                          : constant := 16#151_4b84#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_98_Address                          : constant := 16#151_4b88#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_99_Address                          : constant := 16#151_4b8c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_100_Address                         : constant := 16#151_4b90#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_101_Address                         : constant := 16#151_4b94#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_102_Address                         : constant := 16#151_4b98#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_103_Address                         : constant := 16#151_4b9c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_104_Address                         : constant := 16#151_4ba0#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_105_Address                         : constant := 16#151_4ba4#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_106_Address                         : constant := 16#151_4ba8#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_107_Address                         : constant := 16#151_4bac#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_108_Address                         : constant := 16#151_4bb0#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_109_Address                         : constant := 16#151_4bb4#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_110_Address                         : constant := 16#151_4bb8#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_111_Address                         : constant := 16#151_4bbc#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_112_Address                         : constant := 16#151_4bc0#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_113_Address                         : constant := 16#151_4bc4#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_114_Address                         : constant := 16#151_4bc8#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_115_Address                         : constant := 16#151_4bcc#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_116_Address                         : constant := 16#151_4bd0#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_117_Address                         : constant := 16#151_4bd4#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_118_Address                         : constant := 16#151_4bd8#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_119_Address                         : constant := 16#151_4bdc#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_120_Address                         : constant := 16#151_4be0#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_121_Address                         : constant := 16#151_4be4#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_122_Address                         : constant := 16#151_4be8#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_123_Address                         : constant := 16#151_4bec#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_124_Address                         : constant := 16#151_4bf0#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_125_Address                         : constant := 16#151_4bf4#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_126_Address                         : constant := 16#151_4bf8#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_127_Address                         : constant := 16#151_4bfc#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S1_0_Size                              : constant := 16#80#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S2_0_Address                           : constant := 16#151_4c00#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S2_1_Address                           : constant := 16#151_4c04#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S2_2_Address                           : constant := 16#151_4c08#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S2_3_Address                           : constant := 16#151_4c0c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S2_4_Address                           : constant := 16#151_4c10#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S2_5_Address                           : constant := 16#151_4c14#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S2_6_Address                           : constant := 16#151_4c18#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S2_7_Address                           : constant := 16#151_4c1c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S2_8_Address                           : constant := 16#151_4c20#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S2_9_Address                           : constant := 16#151_4c24#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S2_10_Address                          : constant := 16#151_4c28#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S2_11_Address                          : constant := 16#151_4c2c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S2_12_Address                          : constant := 16#151_4c30#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S2_13_Address                          : constant := 16#151_4c34#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S2_14_Address                          : constant := 16#151_4c38#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S2_15_Address                          : constant := 16#151_4c3c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S2_16_Address                          : constant := 16#151_4c40#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S2_17_Address                          : constant := 16#151_4c44#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S2_18_Address                          : constant := 16#151_4c48#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S2_19_Address                          : constant := 16#151_4c4c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S2_20_Address                          : constant := 16#151_4c50#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S2_21_Address                          : constant := 16#151_4c54#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S2_22_Address                          : constant := 16#151_4c58#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S2_23_Address                          : constant := 16#151_4c5c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S2_24_Address                          : constant := 16#151_4c60#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S2_25_Address                          : constant := 16#151_4c64#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S2_26_Address                          : constant := 16#151_4c68#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S2_27_Address                          : constant := 16#151_4c6c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S2_28_Address                          : constant := 16#151_4c70#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S2_29_Address                          : constant := 16#151_4c74#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S2_30_Address                          : constant := 16#151_4c78#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S2_31_Address                          : constant := 16#151_4c7c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S2_0_Size                              : constant := 16#20#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S3_0_Address                           : constant := 16#151_4c80#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S3_1_Address                           : constant := 16#151_4c84#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S3_2_Address                           : constant := 16#151_4c88#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S3_3_Address                           : constant := 16#151_4c8c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S3_4_Address                           : constant := 16#151_4c90#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S3_5_Address                           : constant := 16#151_4c94#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S3_6_Address                           : constant := 16#151_4c98#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S3_7_Address                           : constant := 16#151_4c9c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S3_8_Address                           : constant := 16#151_4ca0#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S3_9_Address                           : constant := 16#151_4ca4#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S3_10_Address                          : constant := 16#151_4ca8#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S3_11_Address                          : constant := 16#151_4cac#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S3_12_Address                          : constant := 16#151_4cb0#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S3_13_Address                          : constant := 16#151_4cb4#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S3_14_Address                          : constant := 16#151_4cb8#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S3_15_Address                          : constant := 16#151_4cbc#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S3_16_Address                          : constant := 16#151_4cc0#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S3_17_Address                          : constant := 16#151_4cc4#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S3_18_Address                          : constant := 16#151_4cc8#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S3_19_Address                          : constant := 16#151_4ccc#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S3_20_Address                          : constant := 16#151_4cd0#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S3_21_Address                          : constant := 16#151_4cd4#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S3_22_Address                          : constant := 16#151_4cd8#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S3_23_Address                          : constant := 16#151_4cdc#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S3_24_Address                          : constant := 16#151_4ce0#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S3_25_Address                          : constant := 16#151_4ce4#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S3_26_Address                          : constant := 16#151_4ce8#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S3_27_Address                          : constant := 16#151_4cec#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S3_28_Address                          : constant := 16#151_4cf0#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S3_29_Address                          : constant := 16#151_4cf4#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S3_30_Address                          : constant := 16#151_4cf8#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S3_31_Address                          : constant := 16#151_4cfc#;
    LW_PRGNLCL_LWPKA_CORE_LOR_S3_0_Size                              : constant := 16#20#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D0_0_Address                           : constant := 16#151_4d00#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D0_1_Address                           : constant := 16#151_4d04#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D0_2_Address                           : constant := 16#151_4d08#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D0_3_Address                           : constant := 16#151_4d0c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D0_4_Address                           : constant := 16#151_4d10#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D0_5_Address                           : constant := 16#151_4d14#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D0_6_Address                           : constant := 16#151_4d18#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D0_7_Address                           : constant := 16#151_4d1c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D0_8_Address                           : constant := 16#151_4d20#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D0_9_Address                           : constant := 16#151_4d24#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D0_10_Address                          : constant := 16#151_4d28#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D0_11_Address                          : constant := 16#151_4d2c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D0_12_Address                          : constant := 16#151_4d30#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D0_13_Address                          : constant := 16#151_4d34#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D0_14_Address                          : constant := 16#151_4d38#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D0_15_Address                          : constant := 16#151_4d3c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D0_16_Address                          : constant := 16#151_4d40#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D0_17_Address                          : constant := 16#151_4d44#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D0_18_Address                          : constant := 16#151_4d48#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D0_19_Address                          : constant := 16#151_4d4c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D0_20_Address                          : constant := 16#151_4d50#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D0_21_Address                          : constant := 16#151_4d54#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D0_22_Address                          : constant := 16#151_4d58#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D0_23_Address                          : constant := 16#151_4d5c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D0_24_Address                          : constant := 16#151_4d60#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D0_25_Address                          : constant := 16#151_4d64#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D0_26_Address                          : constant := 16#151_4d68#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D0_27_Address                          : constant := 16#151_4d6c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D0_28_Address                          : constant := 16#151_4d70#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D0_29_Address                          : constant := 16#151_4d74#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D0_30_Address                          : constant := 16#151_4d78#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D0_31_Address                          : constant := 16#151_4d7c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D0_32_Address                          : constant := 16#151_4d80#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D0_33_Address                          : constant := 16#151_4d84#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D0_34_Address                          : constant := 16#151_4d88#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D0_35_Address                          : constant := 16#151_4d8c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D0_36_Address                          : constant := 16#151_4d90#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D0_37_Address                          : constant := 16#151_4d94#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D0_38_Address                          : constant := 16#151_4d98#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D0_39_Address                          : constant := 16#151_4d9c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D0_40_Address                          : constant := 16#151_4da0#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D0_41_Address                          : constant := 16#151_4da4#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D0_42_Address                          : constant := 16#151_4da8#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D0_43_Address                          : constant := 16#151_4dac#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D0_44_Address                          : constant := 16#151_4db0#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D0_45_Address                          : constant := 16#151_4db4#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D0_46_Address                          : constant := 16#151_4db8#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D0_47_Address                          : constant := 16#151_4dbc#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D0_48_Address                          : constant := 16#151_4dc0#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D0_49_Address                          : constant := 16#151_4dc4#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D0_50_Address                          : constant := 16#151_4dc8#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D0_51_Address                          : constant := 16#151_4dcc#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D0_52_Address                          : constant := 16#151_4dd0#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D0_53_Address                          : constant := 16#151_4dd4#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D0_54_Address                          : constant := 16#151_4dd8#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D0_55_Address                          : constant := 16#151_4ddc#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D0_56_Address                          : constant := 16#151_4de0#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D0_57_Address                          : constant := 16#151_4de4#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D0_58_Address                          : constant := 16#151_4de8#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D0_59_Address                          : constant := 16#151_4dec#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D0_60_Address                          : constant := 16#151_4df0#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D0_61_Address                          : constant := 16#151_4df4#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D0_62_Address                          : constant := 16#151_4df8#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D0_63_Address                          : constant := 16#151_4dfc#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D0_0_Size                              : constant := 16#40#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_0_Address                           : constant := 16#151_4e00#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_1_Address                           : constant := 16#151_4e04#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_2_Address                           : constant := 16#151_4e08#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_3_Address                           : constant := 16#151_4e0c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_4_Address                           : constant := 16#151_4e10#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_5_Address                           : constant := 16#151_4e14#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_6_Address                           : constant := 16#151_4e18#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_7_Address                           : constant := 16#151_4e1c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_8_Address                           : constant := 16#151_4e20#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_9_Address                           : constant := 16#151_4e24#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_10_Address                          : constant := 16#151_4e28#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_11_Address                          : constant := 16#151_4e2c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_12_Address                          : constant := 16#151_4e30#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_13_Address                          : constant := 16#151_4e34#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_14_Address                          : constant := 16#151_4e38#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_15_Address                          : constant := 16#151_4e3c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_16_Address                          : constant := 16#151_4e40#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_17_Address                          : constant := 16#151_4e44#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_18_Address                          : constant := 16#151_4e48#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_19_Address                          : constant := 16#151_4e4c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_20_Address                          : constant := 16#151_4e50#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_21_Address                          : constant := 16#151_4e54#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_22_Address                          : constant := 16#151_4e58#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_23_Address                          : constant := 16#151_4e5c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_24_Address                          : constant := 16#151_4e60#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_25_Address                          : constant := 16#151_4e64#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_26_Address                          : constant := 16#151_4e68#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_27_Address                          : constant := 16#151_4e6c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_28_Address                          : constant := 16#151_4e70#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_29_Address                          : constant := 16#151_4e74#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_30_Address                          : constant := 16#151_4e78#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_31_Address                          : constant := 16#151_4e7c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_32_Address                          : constant := 16#151_4e80#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_33_Address                          : constant := 16#151_4e84#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_34_Address                          : constant := 16#151_4e88#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_35_Address                          : constant := 16#151_4e8c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_36_Address                          : constant := 16#151_4e90#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_37_Address                          : constant := 16#151_4e94#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_38_Address                          : constant := 16#151_4e98#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_39_Address                          : constant := 16#151_4e9c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_40_Address                          : constant := 16#151_4ea0#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_41_Address                          : constant := 16#151_4ea4#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_42_Address                          : constant := 16#151_4ea8#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_43_Address                          : constant := 16#151_4eac#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_44_Address                          : constant := 16#151_4eb0#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_45_Address                          : constant := 16#151_4eb4#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_46_Address                          : constant := 16#151_4eb8#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_47_Address                          : constant := 16#151_4ebc#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_48_Address                          : constant := 16#151_4ec0#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_49_Address                          : constant := 16#151_4ec4#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_50_Address                          : constant := 16#151_4ec8#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_51_Address                          : constant := 16#151_4ecc#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_52_Address                          : constant := 16#151_4ed0#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_53_Address                          : constant := 16#151_4ed4#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_54_Address                          : constant := 16#151_4ed8#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_55_Address                          : constant := 16#151_4edc#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_56_Address                          : constant := 16#151_4ee0#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_57_Address                          : constant := 16#151_4ee4#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_58_Address                          : constant := 16#151_4ee8#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_59_Address                          : constant := 16#151_4eec#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_60_Address                          : constant := 16#151_4ef0#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_61_Address                          : constant := 16#151_4ef4#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_62_Address                          : constant := 16#151_4ef8#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_63_Address                          : constant := 16#151_4efc#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_64_Address                          : constant := 16#151_4f00#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_65_Address                          : constant := 16#151_4f04#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_66_Address                          : constant := 16#151_4f08#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_67_Address                          : constant := 16#151_4f0c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_68_Address                          : constant := 16#151_4f10#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_69_Address                          : constant := 16#151_4f14#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_70_Address                          : constant := 16#151_4f18#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_71_Address                          : constant := 16#151_4f1c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_72_Address                          : constant := 16#151_4f20#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_73_Address                          : constant := 16#151_4f24#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_74_Address                          : constant := 16#151_4f28#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_75_Address                          : constant := 16#151_4f2c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_76_Address                          : constant := 16#151_4f30#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_77_Address                          : constant := 16#151_4f34#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_78_Address                          : constant := 16#151_4f38#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_79_Address                          : constant := 16#151_4f3c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_80_Address                          : constant := 16#151_4f40#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_81_Address                          : constant := 16#151_4f44#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_82_Address                          : constant := 16#151_4f48#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_83_Address                          : constant := 16#151_4f4c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_84_Address                          : constant := 16#151_4f50#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_85_Address                          : constant := 16#151_4f54#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_86_Address                          : constant := 16#151_4f58#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_87_Address                          : constant := 16#151_4f5c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_88_Address                          : constant := 16#151_4f60#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_89_Address                          : constant := 16#151_4f64#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_90_Address                          : constant := 16#151_4f68#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_91_Address                          : constant := 16#151_4f6c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_92_Address                          : constant := 16#151_4f70#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_93_Address                          : constant := 16#151_4f74#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_94_Address                          : constant := 16#151_4f78#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_95_Address                          : constant := 16#151_4f7c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_96_Address                          : constant := 16#151_4f80#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_97_Address                          : constant := 16#151_4f84#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_98_Address                          : constant := 16#151_4f88#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_99_Address                          : constant := 16#151_4f8c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_100_Address                         : constant := 16#151_4f90#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_101_Address                         : constant := 16#151_4f94#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_102_Address                         : constant := 16#151_4f98#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_103_Address                         : constant := 16#151_4f9c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_104_Address                         : constant := 16#151_4fa0#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_105_Address                         : constant := 16#151_4fa4#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_106_Address                         : constant := 16#151_4fa8#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_107_Address                         : constant := 16#151_4fac#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_108_Address                         : constant := 16#151_4fb0#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_109_Address                         : constant := 16#151_4fb4#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_110_Address                         : constant := 16#151_4fb8#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_111_Address                         : constant := 16#151_4fbc#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_112_Address                         : constant := 16#151_4fc0#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_113_Address                         : constant := 16#151_4fc4#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_114_Address                         : constant := 16#151_4fc8#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_115_Address                         : constant := 16#151_4fcc#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_116_Address                         : constant := 16#151_4fd0#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_117_Address                         : constant := 16#151_4fd4#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_118_Address                         : constant := 16#151_4fd8#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_119_Address                         : constant := 16#151_4fdc#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_120_Address                         : constant := 16#151_4fe0#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_121_Address                         : constant := 16#151_4fe4#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_122_Address                         : constant := 16#151_4fe8#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_123_Address                         : constant := 16#151_4fec#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_124_Address                         : constant := 16#151_4ff0#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_125_Address                         : constant := 16#151_4ff4#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_126_Address                         : constant := 16#151_4ff8#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_127_Address                         : constant := 16#151_4ffc#;
    LW_PRGNLCL_LWPKA_CORE_LOR_D1_0_Size                              : constant := 16#80#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_0_Address                           : constant := 16#151_5000#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_1_Address                           : constant := 16#151_5004#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_2_Address                           : constant := 16#151_5008#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_3_Address                           : constant := 16#151_500c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_4_Address                           : constant := 16#151_5010#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_5_Address                           : constant := 16#151_5014#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_6_Address                           : constant := 16#151_5018#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_7_Address                           : constant := 16#151_501c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_8_Address                           : constant := 16#151_5020#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_9_Address                           : constant := 16#151_5024#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_10_Address                          : constant := 16#151_5028#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_11_Address                          : constant := 16#151_502c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_12_Address                          : constant := 16#151_5030#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_13_Address                          : constant := 16#151_5034#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_14_Address                          : constant := 16#151_5038#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_15_Address                          : constant := 16#151_503c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_16_Address                          : constant := 16#151_5040#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_17_Address                          : constant := 16#151_5044#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_18_Address                          : constant := 16#151_5048#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_19_Address                          : constant := 16#151_504c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_20_Address                          : constant := 16#151_5050#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_21_Address                          : constant := 16#151_5054#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_22_Address                          : constant := 16#151_5058#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_23_Address                          : constant := 16#151_505c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_24_Address                          : constant := 16#151_5060#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_25_Address                          : constant := 16#151_5064#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_26_Address                          : constant := 16#151_5068#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_27_Address                          : constant := 16#151_506c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_28_Address                          : constant := 16#151_5070#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_29_Address                          : constant := 16#151_5074#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_30_Address                          : constant := 16#151_5078#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_31_Address                          : constant := 16#151_507c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_32_Address                          : constant := 16#151_5080#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_33_Address                          : constant := 16#151_5084#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_34_Address                          : constant := 16#151_5088#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_35_Address                          : constant := 16#151_508c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_36_Address                          : constant := 16#151_5090#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_37_Address                          : constant := 16#151_5094#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_38_Address                          : constant := 16#151_5098#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_39_Address                          : constant := 16#151_509c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_40_Address                          : constant := 16#151_50a0#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_41_Address                          : constant := 16#151_50a4#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_42_Address                          : constant := 16#151_50a8#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_43_Address                          : constant := 16#151_50ac#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_44_Address                          : constant := 16#151_50b0#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_45_Address                          : constant := 16#151_50b4#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_46_Address                          : constant := 16#151_50b8#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_47_Address                          : constant := 16#151_50bc#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_48_Address                          : constant := 16#151_50c0#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_49_Address                          : constant := 16#151_50c4#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_50_Address                          : constant := 16#151_50c8#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_51_Address                          : constant := 16#151_50cc#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_52_Address                          : constant := 16#151_50d0#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_53_Address                          : constant := 16#151_50d4#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_54_Address                          : constant := 16#151_50d8#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_55_Address                          : constant := 16#151_50dc#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_56_Address                          : constant := 16#151_50e0#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_57_Address                          : constant := 16#151_50e4#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_58_Address                          : constant := 16#151_50e8#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_59_Address                          : constant := 16#151_50ec#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_60_Address                          : constant := 16#151_50f0#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_61_Address                          : constant := 16#151_50f4#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_62_Address                          : constant := 16#151_50f8#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_63_Address                          : constant := 16#151_50fc#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_64_Address                          : constant := 16#151_5100#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_65_Address                          : constant := 16#151_5104#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_66_Address                          : constant := 16#151_5108#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_67_Address                          : constant := 16#151_510c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_68_Address                          : constant := 16#151_5110#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_69_Address                          : constant := 16#151_5114#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_70_Address                          : constant := 16#151_5118#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_71_Address                          : constant := 16#151_511c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_72_Address                          : constant := 16#151_5120#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_73_Address                          : constant := 16#151_5124#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_74_Address                          : constant := 16#151_5128#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_75_Address                          : constant := 16#151_512c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_76_Address                          : constant := 16#151_5130#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_77_Address                          : constant := 16#151_5134#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_78_Address                          : constant := 16#151_5138#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_79_Address                          : constant := 16#151_513c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_80_Address                          : constant := 16#151_5140#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_81_Address                          : constant := 16#151_5144#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_82_Address                          : constant := 16#151_5148#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_83_Address                          : constant := 16#151_514c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_84_Address                          : constant := 16#151_5150#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_85_Address                          : constant := 16#151_5154#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_86_Address                          : constant := 16#151_5158#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_87_Address                          : constant := 16#151_515c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_88_Address                          : constant := 16#151_5160#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_89_Address                          : constant := 16#151_5164#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_90_Address                          : constant := 16#151_5168#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_91_Address                          : constant := 16#151_516c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_92_Address                          : constant := 16#151_5170#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_93_Address                          : constant := 16#151_5174#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_94_Address                          : constant := 16#151_5178#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_95_Address                          : constant := 16#151_517c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_96_Address                          : constant := 16#151_5180#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_97_Address                          : constant := 16#151_5184#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_98_Address                          : constant := 16#151_5188#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_99_Address                          : constant := 16#151_518c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_100_Address                         : constant := 16#151_5190#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_101_Address                         : constant := 16#151_5194#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_102_Address                         : constant := 16#151_5198#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_103_Address                         : constant := 16#151_519c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_104_Address                         : constant := 16#151_51a0#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_105_Address                         : constant := 16#151_51a4#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_106_Address                         : constant := 16#151_51a8#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_107_Address                         : constant := 16#151_51ac#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_108_Address                         : constant := 16#151_51b0#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_109_Address                         : constant := 16#151_51b4#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_110_Address                         : constant := 16#151_51b8#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_111_Address                         : constant := 16#151_51bc#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_112_Address                         : constant := 16#151_51c0#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_113_Address                         : constant := 16#151_51c4#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_114_Address                         : constant := 16#151_51c8#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_115_Address                         : constant := 16#151_51cc#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_116_Address                         : constant := 16#151_51d0#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_117_Address                         : constant := 16#151_51d4#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_118_Address                         : constant := 16#151_51d8#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_119_Address                         : constant := 16#151_51dc#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_120_Address                         : constant := 16#151_51e0#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_121_Address                         : constant := 16#151_51e4#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_122_Address                         : constant := 16#151_51e8#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_123_Address                         : constant := 16#151_51ec#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_124_Address                         : constant := 16#151_51f0#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_125_Address                         : constant := 16#151_51f4#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_126_Address                         : constant := 16#151_51f8#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_127_Address                         : constant := 16#151_51fc#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C0_0_Size                              : constant := 16#80#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C1_0_Address                           : constant := 16#151_5200#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C1_1_Address                           : constant := 16#151_5204#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C1_2_Address                           : constant := 16#151_5208#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C1_3_Address                           : constant := 16#151_520c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C1_4_Address                           : constant := 16#151_5210#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C1_5_Address                           : constant := 16#151_5214#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C1_6_Address                           : constant := 16#151_5218#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C1_7_Address                           : constant := 16#151_521c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C1_8_Address                           : constant := 16#151_5220#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C1_9_Address                           : constant := 16#151_5224#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C1_10_Address                          : constant := 16#151_5228#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C1_11_Address                          : constant := 16#151_522c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C1_12_Address                          : constant := 16#151_5230#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C1_13_Address                          : constant := 16#151_5234#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C1_14_Address                          : constant := 16#151_5238#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C1_15_Address                          : constant := 16#151_523c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C1_16_Address                          : constant := 16#151_5240#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C1_17_Address                          : constant := 16#151_5244#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C1_18_Address                          : constant := 16#151_5248#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C1_19_Address                          : constant := 16#151_524c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C1_20_Address                          : constant := 16#151_5250#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C1_21_Address                          : constant := 16#151_5254#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C1_22_Address                          : constant := 16#151_5258#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C1_23_Address                          : constant := 16#151_525c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C1_24_Address                          : constant := 16#151_5260#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C1_25_Address                          : constant := 16#151_5264#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C1_26_Address                          : constant := 16#151_5268#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C1_27_Address                          : constant := 16#151_526c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C1_28_Address                          : constant := 16#151_5270#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C1_29_Address                          : constant := 16#151_5274#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C1_30_Address                          : constant := 16#151_5278#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C1_31_Address                          : constant := 16#151_527c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C1_0_Size                              : constant := 16#20#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C2_0_Address                           : constant := 16#151_5280#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C2_1_Address                           : constant := 16#151_5284#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C2_2_Address                           : constant := 16#151_5288#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C2_3_Address                           : constant := 16#151_528c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C2_4_Address                           : constant := 16#151_5290#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C2_5_Address                           : constant := 16#151_5294#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C2_6_Address                           : constant := 16#151_5298#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C2_7_Address                           : constant := 16#151_529c#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C2_8_Address                           : constant := 16#151_52a0#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C2_9_Address                           : constant := 16#151_52a4#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C2_10_Address                          : constant := 16#151_52a8#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C2_11_Address                          : constant := 16#151_52ac#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C2_12_Address                          : constant := 16#151_52b0#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C2_13_Address                          : constant := 16#151_52b4#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C2_14_Address                          : constant := 16#151_52b8#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C2_15_Address                          : constant := 16#151_52bc#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C2_16_Address                          : constant := 16#151_52c0#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C2_17_Address                          : constant := 16#151_52c4#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C2_18_Address                          : constant := 16#151_52c8#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C2_19_Address                          : constant := 16#151_52cc#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C2_20_Address                          : constant := 16#151_52d0#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C2_21_Address                          : constant := 16#151_52d4#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C2_22_Address                          : constant := 16#151_52d8#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C2_23_Address                          : constant := 16#151_52dc#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C2_24_Address                          : constant := 16#151_52e0#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C2_25_Address                          : constant := 16#151_52e4#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C2_26_Address                          : constant := 16#151_52e8#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C2_27_Address                          : constant := 16#151_52ec#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C2_28_Address                          : constant := 16#151_52f0#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C2_29_Address                          : constant := 16#151_52f4#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C2_30_Address                          : constant := 16#151_52f8#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C2_31_Address                          : constant := 16#151_52fc#;
    LW_PRGNLCL_LWPKA_CORE_LOR_C2_0_Size                              : constant := 16#20#;
    LW_PRGNLCL_LWPKA_CORE_DEBUG_VIRTUAL_0_Address                    : constant := 16#151_5800#;
    LW_PRGNLCL_LWPKA_CORE_DEBUG_VIRTUAL_1_Address                    : constant := 16#151_5804#;
    LW_PRGNLCL_LWPKA_CORE_DEBUG_VIRTUAL_2_Address                    : constant := 16#151_5808#;
    LW_PRGNLCL_LWPKA_CORE_DEBUG_VIRTUAL_3_Address                    : constant := 16#151_580c#;
    LW_PRGNLCL_LWPKA_CORE_DEBUG_VIRTUAL_4_Address                    : constant := 16#151_5810#;
    LW_PRGNLCL_LWPKA_CORE_DEBUG_VIRTUAL_5_Address                    : constant := 16#151_5814#;
    LW_PRGNLCL_LWPKA_CORE_DEBUG_VIRTUAL_6_Address                    : constant := 16#151_5818#;
    LW_PRGNLCL_LWPKA_CORE_DEBUG_VIRTUAL_7_Address                    : constant := 16#151_581c#;
    LW_PRGNLCL_LWPKA_CORE_DEBUG_VIRTUAL_8_Address                    : constant := 16#151_5820#;
    LW_PRGNLCL_LWPKA_CORE_DEBUG_VIRTUAL_9_Address                    : constant := 16#151_5824#;
    LW_PRGNLCL_LWPKA_CORE_DEBUG_VIRTUAL_10_Address                   : constant := 16#151_5828#;
    LW_PRGNLCL_LWPKA_CORE_DEBUG_VIRTUAL_11_Address                   : constant := 16#151_582c#;
    LW_PRGNLCL_LWPKA_CORE_DEBUG_VIRTUAL_12_Address                   : constant := 16#151_5830#;
    LW_PRGNLCL_LWPKA_CORE_DEBUG_VIRTUAL_13_Address                   : constant := 16#151_5834#;
    LW_PRGNLCL_LWPKA_CORE_DEBUG_VIRTUAL_14_Address                   : constant := 16#151_5838#;
    LW_PRGNLCL_LWPKA_CORE_DEBUG_VIRTUAL_15_Address                   : constant := 16#151_583c#;
    LW_PRGNLCL_LWPKA_CORE_DEBUG_VIRTUAL_16_Address                   : constant := 16#151_5840#;
    LW_PRGNLCL_LWPKA_CORE_DEBUG_VIRTUAL_17_Address                   : constant := 16#151_5844#;
    LW_PRGNLCL_LWPKA_CORE_DEBUG_VIRTUAL_18_Address                   : constant := 16#151_5848#;
    LW_PRGNLCL_LWPKA_CORE_DEBUG_VIRTUAL_19_Address                   : constant := 16#151_584c#;
    LW_PRGNLCL_LWPKA_CORE_DEBUG_VIRTUAL_20_Address                   : constant := 16#151_5850#;
    LW_PRGNLCL_LWPKA_CORE_DEBUG_VIRTUAL_21_Address                   : constant := 16#151_5854#;
    LW_PRGNLCL_LWPKA_CORE_DEBUG_VIRTUAL_22_Address                   : constant := 16#151_5858#;
    LW_PRGNLCL_LWPKA_CORE_DEBUG_VIRTUAL_23_Address                   : constant := 16#151_585c#;
    LW_PRGNLCL_LWPKA_CORE_DEBUG_VIRTUAL_24_Address                   : constant := 16#151_5860#;
    LW_PRGNLCL_LWPKA_CORE_DEBUG_VIRTUAL_25_Address                   : constant := 16#151_5864#;
    LW_PRGNLCL_LWPKA_CORE_DEBUG_VIRTUAL_26_Address                   : constant := 16#151_5868#;
    LW_PRGNLCL_LWPKA_CORE_DEBUG_VIRTUAL_27_Address                   : constant := 16#151_586c#;
    LW_PRGNLCL_LWPKA_CORE_DEBUG_VIRTUAL_28_Address                   : constant := 16#151_5870#;
    LW_PRGNLCL_LWPKA_CORE_DEBUG_VIRTUAL_29_Address                   : constant := 16#151_5874#;
    LW_PRGNLCL_LWPKA_CORE_DEBUG_VIRTUAL_30_Address                   : constant := 16#151_5878#;
    LW_PRGNLCL_LWPKA_CORE_DEBUG_VIRTUAL_31_Address                   : constant := 16#151_587c#;
    LW_PRGNLCL_LWPKA_CORE_DEBUG_VIRTUAL_0_Size                       : constant := 16#20#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_0_Address                            : constant := 16#151_6000#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_1_Address                            : constant := 16#151_6004#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_2_Address                            : constant := 16#151_6008#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_3_Address                            : constant := 16#151_600c#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_4_Address                            : constant := 16#151_6010#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_5_Address                            : constant := 16#151_6014#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_6_Address                            : constant := 16#151_6018#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_7_Address                            : constant := 16#151_601c#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_8_Address                            : constant := 16#151_6020#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_9_Address                            : constant := 16#151_6024#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_10_Address                           : constant := 16#151_6028#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_11_Address                           : constant := 16#151_602c#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_12_Address                           : constant := 16#151_6030#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_13_Address                           : constant := 16#151_6034#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_14_Address                           : constant := 16#151_6038#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_15_Address                           : constant := 16#151_603c#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_16_Address                           : constant := 16#151_6040#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_17_Address                           : constant := 16#151_6044#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_18_Address                           : constant := 16#151_6048#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_19_Address                           : constant := 16#151_604c#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_20_Address                           : constant := 16#151_6050#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_21_Address                           : constant := 16#151_6054#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_22_Address                           : constant := 16#151_6058#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_23_Address                           : constant := 16#151_605c#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_24_Address                           : constant := 16#151_6060#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_25_Address                           : constant := 16#151_6064#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_26_Address                           : constant := 16#151_6068#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_27_Address                           : constant := 16#151_606c#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_28_Address                           : constant := 16#151_6070#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_29_Address                           : constant := 16#151_6074#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_30_Address                           : constant := 16#151_6078#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_31_Address                           : constant := 16#151_607c#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_32_Address                           : constant := 16#151_6080#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_33_Address                           : constant := 16#151_6084#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_34_Address                           : constant := 16#151_6088#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_35_Address                           : constant := 16#151_608c#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_36_Address                           : constant := 16#151_6090#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_37_Address                           : constant := 16#151_6094#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_38_Address                           : constant := 16#151_6098#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_39_Address                           : constant := 16#151_609c#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_40_Address                           : constant := 16#151_60a0#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_41_Address                           : constant := 16#151_60a4#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_42_Address                           : constant := 16#151_60a8#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_43_Address                           : constant := 16#151_60ac#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_44_Address                           : constant := 16#151_60b0#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_45_Address                           : constant := 16#151_60b4#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_46_Address                           : constant := 16#151_60b8#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_47_Address                           : constant := 16#151_60bc#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_48_Address                           : constant := 16#151_60c0#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_49_Address                           : constant := 16#151_60c4#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_50_Address                           : constant := 16#151_60c8#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_51_Address                           : constant := 16#151_60cc#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_52_Address                           : constant := 16#151_60d0#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_53_Address                           : constant := 16#151_60d4#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_54_Address                           : constant := 16#151_60d8#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_55_Address                           : constant := 16#151_60dc#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_56_Address                           : constant := 16#151_60e0#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_57_Address                           : constant := 16#151_60e4#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_58_Address                           : constant := 16#151_60e8#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_59_Address                           : constant := 16#151_60ec#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_60_Address                           : constant := 16#151_60f0#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_61_Address                           : constant := 16#151_60f4#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_62_Address                           : constant := 16#151_60f8#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_63_Address                           : constant := 16#151_60fc#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_64_Address                           : constant := 16#151_6100#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_65_Address                           : constant := 16#151_6104#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_66_Address                           : constant := 16#151_6108#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_67_Address                           : constant := 16#151_610c#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_68_Address                           : constant := 16#151_6110#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_69_Address                           : constant := 16#151_6114#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_70_Address                           : constant := 16#151_6118#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_71_Address                           : constant := 16#151_611c#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_72_Address                           : constant := 16#151_6120#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_73_Address                           : constant := 16#151_6124#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_74_Address                           : constant := 16#151_6128#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_75_Address                           : constant := 16#151_612c#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_76_Address                           : constant := 16#151_6130#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_77_Address                           : constant := 16#151_6134#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_78_Address                           : constant := 16#151_6138#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_79_Address                           : constant := 16#151_613c#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_80_Address                           : constant := 16#151_6140#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_81_Address                           : constant := 16#151_6144#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_82_Address                           : constant := 16#151_6148#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_83_Address                           : constant := 16#151_614c#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_84_Address                           : constant := 16#151_6150#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_85_Address                           : constant := 16#151_6154#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_86_Address                           : constant := 16#151_6158#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_87_Address                           : constant := 16#151_615c#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_88_Address                           : constant := 16#151_6160#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_89_Address                           : constant := 16#151_6164#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_90_Address                           : constant := 16#151_6168#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_91_Address                           : constant := 16#151_616c#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_92_Address                           : constant := 16#151_6170#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_93_Address                           : constant := 16#151_6174#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_94_Address                           : constant := 16#151_6178#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_95_Address                           : constant := 16#151_617c#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_96_Address                           : constant := 16#151_6180#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_97_Address                           : constant := 16#151_6184#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_98_Address                           : constant := 16#151_6188#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_99_Address                           : constant := 16#151_618c#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_100_Address                          : constant := 16#151_6190#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_101_Address                          : constant := 16#151_6194#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_102_Address                          : constant := 16#151_6198#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_103_Address                          : constant := 16#151_619c#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_104_Address                          : constant := 16#151_61a0#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_105_Address                          : constant := 16#151_61a4#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_106_Address                          : constant := 16#151_61a8#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_107_Address                          : constant := 16#151_61ac#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_108_Address                          : constant := 16#151_61b0#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_109_Address                          : constant := 16#151_61b4#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_110_Address                          : constant := 16#151_61b8#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_111_Address                          : constant := 16#151_61bc#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_112_Address                          : constant := 16#151_61c0#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_113_Address                          : constant := 16#151_61c4#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_114_Address                          : constant := 16#151_61c8#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_115_Address                          : constant := 16#151_61cc#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_116_Address                          : constant := 16#151_61d0#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_117_Address                          : constant := 16#151_61d4#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_118_Address                          : constant := 16#151_61d8#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_119_Address                          : constant := 16#151_61dc#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_120_Address                          : constant := 16#151_61e0#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_121_Address                          : constant := 16#151_61e4#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_122_Address                          : constant := 16#151_61e8#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_123_Address                          : constant := 16#151_61ec#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_124_Address                          : constant := 16#151_61f0#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_125_Address                          : constant := 16#151_61f4#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_126_Address                          : constant := 16#151_61f8#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_127_Address                          : constant := 16#151_61fc#;
    LW_PRGNLCL_LWPKA_CORE_KSTR0_0_Size                               : constant := 16#80#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_0_Address                      : constant := 16#151_6400#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_1_Address                      : constant := 16#151_6404#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_2_Address                      : constant := 16#151_6408#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_3_Address                      : constant := 16#151_640c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_4_Address                      : constant := 16#151_6410#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_5_Address                      : constant := 16#151_6414#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_6_Address                      : constant := 16#151_6418#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_7_Address                      : constant := 16#151_641c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_8_Address                      : constant := 16#151_6420#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_9_Address                      : constant := 16#151_6424#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_10_Address                     : constant := 16#151_6428#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_11_Address                     : constant := 16#151_642c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_12_Address                     : constant := 16#151_6430#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_13_Address                     : constant := 16#151_6434#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_14_Address                     : constant := 16#151_6438#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_15_Address                     : constant := 16#151_643c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_16_Address                     : constant := 16#151_6440#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_17_Address                     : constant := 16#151_6444#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_18_Address                     : constant := 16#151_6448#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_19_Address                     : constant := 16#151_644c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_20_Address                     : constant := 16#151_6450#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_21_Address                     : constant := 16#151_6454#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_22_Address                     : constant := 16#151_6458#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_23_Address                     : constant := 16#151_645c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_24_Address                     : constant := 16#151_6460#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_25_Address                     : constant := 16#151_6464#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_26_Address                     : constant := 16#151_6468#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_27_Address                     : constant := 16#151_646c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_28_Address                     : constant := 16#151_6470#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_29_Address                     : constant := 16#151_6474#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_30_Address                     : constant := 16#151_6478#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_31_Address                     : constant := 16#151_647c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_32_Address                     : constant := 16#151_6480#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_33_Address                     : constant := 16#151_6484#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_34_Address                     : constant := 16#151_6488#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_35_Address                     : constant := 16#151_648c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_36_Address                     : constant := 16#151_6490#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_37_Address                     : constant := 16#151_6494#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_38_Address                     : constant := 16#151_6498#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_39_Address                     : constant := 16#151_649c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_40_Address                     : constant := 16#151_64a0#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_41_Address                     : constant := 16#151_64a4#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_42_Address                     : constant := 16#151_64a8#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_43_Address                     : constant := 16#151_64ac#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_44_Address                     : constant := 16#151_64b0#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_45_Address                     : constant := 16#151_64b4#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_46_Address                     : constant := 16#151_64b8#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_47_Address                     : constant := 16#151_64bc#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_48_Address                     : constant := 16#151_64c0#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_49_Address                     : constant := 16#151_64c4#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_50_Address                     : constant := 16#151_64c8#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_51_Address                     : constant := 16#151_64cc#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_52_Address                     : constant := 16#151_64d0#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_53_Address                     : constant := 16#151_64d4#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_54_Address                     : constant := 16#151_64d8#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_55_Address                     : constant := 16#151_64dc#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_56_Address                     : constant := 16#151_64e0#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_57_Address                     : constant := 16#151_64e4#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_58_Address                     : constant := 16#151_64e8#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_59_Address                     : constant := 16#151_64ec#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_60_Address                     : constant := 16#151_64f0#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_61_Address                     : constant := 16#151_64f4#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_62_Address                     : constant := 16#151_64f8#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_63_Address                     : constant := 16#151_64fc#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_64_Address                     : constant := 16#151_6500#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_65_Address                     : constant := 16#151_6504#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_66_Address                     : constant := 16#151_6508#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_67_Address                     : constant := 16#151_650c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_68_Address                     : constant := 16#151_6510#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_69_Address                     : constant := 16#151_6514#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_70_Address                     : constant := 16#151_6518#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_71_Address                     : constant := 16#151_651c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_72_Address                     : constant := 16#151_6520#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_73_Address                     : constant := 16#151_6524#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_74_Address                     : constant := 16#151_6528#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_75_Address                     : constant := 16#151_652c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_76_Address                     : constant := 16#151_6530#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_77_Address                     : constant := 16#151_6534#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_78_Address                     : constant := 16#151_6538#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_79_Address                     : constant := 16#151_653c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_80_Address                     : constant := 16#151_6540#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_81_Address                     : constant := 16#151_6544#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_82_Address                     : constant := 16#151_6548#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_83_Address                     : constant := 16#151_654c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_84_Address                     : constant := 16#151_6550#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_85_Address                     : constant := 16#151_6554#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_86_Address                     : constant := 16#151_6558#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_87_Address                     : constant := 16#151_655c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_88_Address                     : constant := 16#151_6560#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_89_Address                     : constant := 16#151_6564#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_90_Address                     : constant := 16#151_6568#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_91_Address                     : constant := 16#151_656c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_92_Address                     : constant := 16#151_6570#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_93_Address                     : constant := 16#151_6574#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_94_Address                     : constant := 16#151_6578#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_95_Address                     : constant := 16#151_657c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_96_Address                     : constant := 16#151_6580#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_97_Address                     : constant := 16#151_6584#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_98_Address                     : constant := 16#151_6588#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_99_Address                     : constant := 16#151_658c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_100_Address                    : constant := 16#151_6590#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_101_Address                    : constant := 16#151_6594#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_102_Address                    : constant := 16#151_6598#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_103_Address                    : constant := 16#151_659c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_104_Address                    : constant := 16#151_65a0#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_105_Address                    : constant := 16#151_65a4#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_106_Address                    : constant := 16#151_65a8#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_107_Address                    : constant := 16#151_65ac#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_108_Address                    : constant := 16#151_65b0#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_109_Address                    : constant := 16#151_65b4#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_110_Address                    : constant := 16#151_65b8#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_111_Address                    : constant := 16#151_65bc#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_112_Address                    : constant := 16#151_65c0#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_113_Address                    : constant := 16#151_65c4#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_114_Address                    : constant := 16#151_65c8#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_115_Address                    : constant := 16#151_65cc#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_116_Address                    : constant := 16#151_65d0#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_117_Address                    : constant := 16#151_65d4#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_118_Address                    : constant := 16#151_65d8#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_119_Address                    : constant := 16#151_65dc#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_120_Address                    : constant := 16#151_65e0#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_121_Address                    : constant := 16#151_65e4#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_122_Address                    : constant := 16#151_65e8#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_123_Address                    : constant := 16#151_65ec#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_124_Address                    : constant := 16#151_65f0#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_125_Address                    : constant := 16#151_65f4#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_126_Address                    : constant := 16#151_65f8#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_127_Address                    : constant := 16#151_65fc#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_128_Address                    : constant := 16#151_6600#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_129_Address                    : constant := 16#151_6604#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_130_Address                    : constant := 16#151_6608#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_131_Address                    : constant := 16#151_660c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_132_Address                    : constant := 16#151_6610#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_133_Address                    : constant := 16#151_6614#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_134_Address                    : constant := 16#151_6618#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_135_Address                    : constant := 16#151_661c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_136_Address                    : constant := 16#151_6620#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_137_Address                    : constant := 16#151_6624#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_138_Address                    : constant := 16#151_6628#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_139_Address                    : constant := 16#151_662c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_140_Address                    : constant := 16#151_6630#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_141_Address                    : constant := 16#151_6634#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_142_Address                    : constant := 16#151_6638#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_143_Address                    : constant := 16#151_663c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_144_Address                    : constant := 16#151_6640#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_145_Address                    : constant := 16#151_6644#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_146_Address                    : constant := 16#151_6648#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_147_Address                    : constant := 16#151_664c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_148_Address                    : constant := 16#151_6650#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_149_Address                    : constant := 16#151_6654#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_150_Address                    : constant := 16#151_6658#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_151_Address                    : constant := 16#151_665c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_152_Address                    : constant := 16#151_6660#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_153_Address                    : constant := 16#151_6664#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_154_Address                    : constant := 16#151_6668#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_155_Address                    : constant := 16#151_666c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_156_Address                    : constant := 16#151_6670#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_157_Address                    : constant := 16#151_6674#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_158_Address                    : constant := 16#151_6678#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_159_Address                    : constant := 16#151_667c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_160_Address                    : constant := 16#151_6680#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_161_Address                    : constant := 16#151_6684#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_162_Address                    : constant := 16#151_6688#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_163_Address                    : constant := 16#151_668c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_164_Address                    : constant := 16#151_6690#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_165_Address                    : constant := 16#151_6694#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_166_Address                    : constant := 16#151_6698#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_167_Address                    : constant := 16#151_669c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_168_Address                    : constant := 16#151_66a0#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_169_Address                    : constant := 16#151_66a4#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_170_Address                    : constant := 16#151_66a8#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_171_Address                    : constant := 16#151_66ac#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_172_Address                    : constant := 16#151_66b0#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_173_Address                    : constant := 16#151_66b4#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_174_Address                    : constant := 16#151_66b8#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_175_Address                    : constant := 16#151_66bc#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_176_Address                    : constant := 16#151_66c0#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_177_Address                    : constant := 16#151_66c4#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_178_Address                    : constant := 16#151_66c8#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_179_Address                    : constant := 16#151_66cc#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_180_Address                    : constant := 16#151_66d0#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_181_Address                    : constant := 16#151_66d4#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_182_Address                    : constant := 16#151_66d8#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_183_Address                    : constant := 16#151_66dc#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_184_Address                    : constant := 16#151_66e0#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_185_Address                    : constant := 16#151_66e4#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_186_Address                    : constant := 16#151_66e8#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_187_Address                    : constant := 16#151_66ec#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_188_Address                    : constant := 16#151_66f0#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_189_Address                    : constant := 16#151_66f4#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_190_Address                    : constant := 16#151_66f8#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_191_Address                    : constant := 16#151_66fc#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_192_Address                    : constant := 16#151_6700#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_193_Address                    : constant := 16#151_6704#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_194_Address                    : constant := 16#151_6708#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_195_Address                    : constant := 16#151_670c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_196_Address                    : constant := 16#151_6710#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_197_Address                    : constant := 16#151_6714#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_198_Address                    : constant := 16#151_6718#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_199_Address                    : constant := 16#151_671c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_200_Address                    : constant := 16#151_6720#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_201_Address                    : constant := 16#151_6724#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_202_Address                    : constant := 16#151_6728#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_203_Address                    : constant := 16#151_672c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_204_Address                    : constant := 16#151_6730#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_205_Address                    : constant := 16#151_6734#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_206_Address                    : constant := 16#151_6738#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_207_Address                    : constant := 16#151_673c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_208_Address                    : constant := 16#151_6740#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_209_Address                    : constant := 16#151_6744#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_210_Address                    : constant := 16#151_6748#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_211_Address                    : constant := 16#151_674c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_212_Address                    : constant := 16#151_6750#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_213_Address                    : constant := 16#151_6754#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_214_Address                    : constant := 16#151_6758#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_215_Address                    : constant := 16#151_675c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_216_Address                    : constant := 16#151_6760#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_217_Address                    : constant := 16#151_6764#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_218_Address                    : constant := 16#151_6768#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_219_Address                    : constant := 16#151_676c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_220_Address                    : constant := 16#151_6770#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_221_Address                    : constant := 16#151_6774#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_222_Address                    : constant := 16#151_6778#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_223_Address                    : constant := 16#151_677c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_224_Address                    : constant := 16#151_6780#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_225_Address                    : constant := 16#151_6784#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_226_Address                    : constant := 16#151_6788#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_227_Address                    : constant := 16#151_678c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_228_Address                    : constant := 16#151_6790#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_229_Address                    : constant := 16#151_6794#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_230_Address                    : constant := 16#151_6798#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_231_Address                    : constant := 16#151_679c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_232_Address                    : constant := 16#151_67a0#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_233_Address                    : constant := 16#151_67a4#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_234_Address                    : constant := 16#151_67a8#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_235_Address                    : constant := 16#151_67ac#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_236_Address                    : constant := 16#151_67b0#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_237_Address                    : constant := 16#151_67b4#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_238_Address                    : constant := 16#151_67b8#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_239_Address                    : constant := 16#151_67bc#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_240_Address                    : constant := 16#151_67c0#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_241_Address                    : constant := 16#151_67c4#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_242_Address                    : constant := 16#151_67c8#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_243_Address                    : constant := 16#151_67cc#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_244_Address                    : constant := 16#151_67d0#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_245_Address                    : constant := 16#151_67d4#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_246_Address                    : constant := 16#151_67d8#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_247_Address                    : constant := 16#151_67dc#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_248_Address                    : constant := 16#151_67e0#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_249_Address                    : constant := 16#151_67e4#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_250_Address                    : constant := 16#151_67e8#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_251_Address                    : constant := 16#151_67ec#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_252_Address                    : constant := 16#151_67f0#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_253_Address                    : constant := 16#151_67f4#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_254_Address                    : constant := 16#151_67f8#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_255_Address                    : constant := 16#151_67fc#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE0_0_Size                         : constant := 16#100#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_0_Address                      : constant := 16#151_6800#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_1_Address                      : constant := 16#151_6804#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_2_Address                      : constant := 16#151_6808#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_3_Address                      : constant := 16#151_680c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_4_Address                      : constant := 16#151_6810#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_5_Address                      : constant := 16#151_6814#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_6_Address                      : constant := 16#151_6818#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_7_Address                      : constant := 16#151_681c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_8_Address                      : constant := 16#151_6820#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_9_Address                      : constant := 16#151_6824#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_10_Address                     : constant := 16#151_6828#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_11_Address                     : constant := 16#151_682c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_12_Address                     : constant := 16#151_6830#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_13_Address                     : constant := 16#151_6834#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_14_Address                     : constant := 16#151_6838#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_15_Address                     : constant := 16#151_683c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_16_Address                     : constant := 16#151_6840#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_17_Address                     : constant := 16#151_6844#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_18_Address                     : constant := 16#151_6848#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_19_Address                     : constant := 16#151_684c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_20_Address                     : constant := 16#151_6850#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_21_Address                     : constant := 16#151_6854#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_22_Address                     : constant := 16#151_6858#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_23_Address                     : constant := 16#151_685c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_24_Address                     : constant := 16#151_6860#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_25_Address                     : constant := 16#151_6864#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_26_Address                     : constant := 16#151_6868#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_27_Address                     : constant := 16#151_686c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_28_Address                     : constant := 16#151_6870#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_29_Address                     : constant := 16#151_6874#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_30_Address                     : constant := 16#151_6878#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_31_Address                     : constant := 16#151_687c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_32_Address                     : constant := 16#151_6880#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_33_Address                     : constant := 16#151_6884#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_34_Address                     : constant := 16#151_6888#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_35_Address                     : constant := 16#151_688c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_36_Address                     : constant := 16#151_6890#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_37_Address                     : constant := 16#151_6894#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_38_Address                     : constant := 16#151_6898#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_39_Address                     : constant := 16#151_689c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_40_Address                     : constant := 16#151_68a0#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_41_Address                     : constant := 16#151_68a4#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_42_Address                     : constant := 16#151_68a8#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_43_Address                     : constant := 16#151_68ac#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_44_Address                     : constant := 16#151_68b0#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_45_Address                     : constant := 16#151_68b4#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_46_Address                     : constant := 16#151_68b8#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_47_Address                     : constant := 16#151_68bc#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_48_Address                     : constant := 16#151_68c0#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_49_Address                     : constant := 16#151_68c4#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_50_Address                     : constant := 16#151_68c8#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_51_Address                     : constant := 16#151_68cc#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_52_Address                     : constant := 16#151_68d0#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_53_Address                     : constant := 16#151_68d4#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_54_Address                     : constant := 16#151_68d8#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_55_Address                     : constant := 16#151_68dc#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_56_Address                     : constant := 16#151_68e0#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_57_Address                     : constant := 16#151_68e4#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_58_Address                     : constant := 16#151_68e8#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_59_Address                     : constant := 16#151_68ec#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_60_Address                     : constant := 16#151_68f0#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_61_Address                     : constant := 16#151_68f4#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_62_Address                     : constant := 16#151_68f8#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_63_Address                     : constant := 16#151_68fc#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_64_Address                     : constant := 16#151_6900#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_65_Address                     : constant := 16#151_6904#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_66_Address                     : constant := 16#151_6908#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_67_Address                     : constant := 16#151_690c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_68_Address                     : constant := 16#151_6910#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_69_Address                     : constant := 16#151_6914#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_70_Address                     : constant := 16#151_6918#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_71_Address                     : constant := 16#151_691c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_72_Address                     : constant := 16#151_6920#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_73_Address                     : constant := 16#151_6924#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_74_Address                     : constant := 16#151_6928#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_75_Address                     : constant := 16#151_692c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_76_Address                     : constant := 16#151_6930#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_77_Address                     : constant := 16#151_6934#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_78_Address                     : constant := 16#151_6938#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_79_Address                     : constant := 16#151_693c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_80_Address                     : constant := 16#151_6940#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_81_Address                     : constant := 16#151_6944#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_82_Address                     : constant := 16#151_6948#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_83_Address                     : constant := 16#151_694c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_84_Address                     : constant := 16#151_6950#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_85_Address                     : constant := 16#151_6954#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_86_Address                     : constant := 16#151_6958#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_87_Address                     : constant := 16#151_695c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_88_Address                     : constant := 16#151_6960#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_89_Address                     : constant := 16#151_6964#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_90_Address                     : constant := 16#151_6968#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_91_Address                     : constant := 16#151_696c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_92_Address                     : constant := 16#151_6970#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_93_Address                     : constant := 16#151_6974#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_94_Address                     : constant := 16#151_6978#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_95_Address                     : constant := 16#151_697c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_96_Address                     : constant := 16#151_6980#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_97_Address                     : constant := 16#151_6984#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_98_Address                     : constant := 16#151_6988#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_99_Address                     : constant := 16#151_698c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_100_Address                    : constant := 16#151_6990#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_101_Address                    : constant := 16#151_6994#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_102_Address                    : constant := 16#151_6998#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_103_Address                    : constant := 16#151_699c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_104_Address                    : constant := 16#151_69a0#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_105_Address                    : constant := 16#151_69a4#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_106_Address                    : constant := 16#151_69a8#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_107_Address                    : constant := 16#151_69ac#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_108_Address                    : constant := 16#151_69b0#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_109_Address                    : constant := 16#151_69b4#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_110_Address                    : constant := 16#151_69b8#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_111_Address                    : constant := 16#151_69bc#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_112_Address                    : constant := 16#151_69c0#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_113_Address                    : constant := 16#151_69c4#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_114_Address                    : constant := 16#151_69c8#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_115_Address                    : constant := 16#151_69cc#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_116_Address                    : constant := 16#151_69d0#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_117_Address                    : constant := 16#151_69d4#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_118_Address                    : constant := 16#151_69d8#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_119_Address                    : constant := 16#151_69dc#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_120_Address                    : constant := 16#151_69e0#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_121_Address                    : constant := 16#151_69e4#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_122_Address                    : constant := 16#151_69e8#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_123_Address                    : constant := 16#151_69ec#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_124_Address                    : constant := 16#151_69f0#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_125_Address                    : constant := 16#151_69f4#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_126_Address                    : constant := 16#151_69f8#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_127_Address                    : constant := 16#151_69fc#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_128_Address                    : constant := 16#151_6a00#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_129_Address                    : constant := 16#151_6a04#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_130_Address                    : constant := 16#151_6a08#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_131_Address                    : constant := 16#151_6a0c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_132_Address                    : constant := 16#151_6a10#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_133_Address                    : constant := 16#151_6a14#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_134_Address                    : constant := 16#151_6a18#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_135_Address                    : constant := 16#151_6a1c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_136_Address                    : constant := 16#151_6a20#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_137_Address                    : constant := 16#151_6a24#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_138_Address                    : constant := 16#151_6a28#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_139_Address                    : constant := 16#151_6a2c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_140_Address                    : constant := 16#151_6a30#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_141_Address                    : constant := 16#151_6a34#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_142_Address                    : constant := 16#151_6a38#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_143_Address                    : constant := 16#151_6a3c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_144_Address                    : constant := 16#151_6a40#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_145_Address                    : constant := 16#151_6a44#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_146_Address                    : constant := 16#151_6a48#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_147_Address                    : constant := 16#151_6a4c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_148_Address                    : constant := 16#151_6a50#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_149_Address                    : constant := 16#151_6a54#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_150_Address                    : constant := 16#151_6a58#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_151_Address                    : constant := 16#151_6a5c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_152_Address                    : constant := 16#151_6a60#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_153_Address                    : constant := 16#151_6a64#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_154_Address                    : constant := 16#151_6a68#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_155_Address                    : constant := 16#151_6a6c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_156_Address                    : constant := 16#151_6a70#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_157_Address                    : constant := 16#151_6a74#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_158_Address                    : constant := 16#151_6a78#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_159_Address                    : constant := 16#151_6a7c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_160_Address                    : constant := 16#151_6a80#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_161_Address                    : constant := 16#151_6a84#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_162_Address                    : constant := 16#151_6a88#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_163_Address                    : constant := 16#151_6a8c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_164_Address                    : constant := 16#151_6a90#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_165_Address                    : constant := 16#151_6a94#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_166_Address                    : constant := 16#151_6a98#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_167_Address                    : constant := 16#151_6a9c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_168_Address                    : constant := 16#151_6aa0#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_169_Address                    : constant := 16#151_6aa4#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_170_Address                    : constant := 16#151_6aa8#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_171_Address                    : constant := 16#151_6aac#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_172_Address                    : constant := 16#151_6ab0#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_173_Address                    : constant := 16#151_6ab4#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_174_Address                    : constant := 16#151_6ab8#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_175_Address                    : constant := 16#151_6abc#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_176_Address                    : constant := 16#151_6ac0#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_177_Address                    : constant := 16#151_6ac4#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_178_Address                    : constant := 16#151_6ac8#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_179_Address                    : constant := 16#151_6acc#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_180_Address                    : constant := 16#151_6ad0#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_181_Address                    : constant := 16#151_6ad4#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_182_Address                    : constant := 16#151_6ad8#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_183_Address                    : constant := 16#151_6adc#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_184_Address                    : constant := 16#151_6ae0#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_185_Address                    : constant := 16#151_6ae4#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_186_Address                    : constant := 16#151_6ae8#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_187_Address                    : constant := 16#151_6aec#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_188_Address                    : constant := 16#151_6af0#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_189_Address                    : constant := 16#151_6af4#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_190_Address                    : constant := 16#151_6af8#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_191_Address                    : constant := 16#151_6afc#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_192_Address                    : constant := 16#151_6b00#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_193_Address                    : constant := 16#151_6b04#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_194_Address                    : constant := 16#151_6b08#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_195_Address                    : constant := 16#151_6b0c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_196_Address                    : constant := 16#151_6b10#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_197_Address                    : constant := 16#151_6b14#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_198_Address                    : constant := 16#151_6b18#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_199_Address                    : constant := 16#151_6b1c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_200_Address                    : constant := 16#151_6b20#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_201_Address                    : constant := 16#151_6b24#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_202_Address                    : constant := 16#151_6b28#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_203_Address                    : constant := 16#151_6b2c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_204_Address                    : constant := 16#151_6b30#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_205_Address                    : constant := 16#151_6b34#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_206_Address                    : constant := 16#151_6b38#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_207_Address                    : constant := 16#151_6b3c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_208_Address                    : constant := 16#151_6b40#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_209_Address                    : constant := 16#151_6b44#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_210_Address                    : constant := 16#151_6b48#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_211_Address                    : constant := 16#151_6b4c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_212_Address                    : constant := 16#151_6b50#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_213_Address                    : constant := 16#151_6b54#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_214_Address                    : constant := 16#151_6b58#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_215_Address                    : constant := 16#151_6b5c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_216_Address                    : constant := 16#151_6b60#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_217_Address                    : constant := 16#151_6b64#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_218_Address                    : constant := 16#151_6b68#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_219_Address                    : constant := 16#151_6b6c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_220_Address                    : constant := 16#151_6b70#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_221_Address                    : constant := 16#151_6b74#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_222_Address                    : constant := 16#151_6b78#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_223_Address                    : constant := 16#151_6b7c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_224_Address                    : constant := 16#151_6b80#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_225_Address                    : constant := 16#151_6b84#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_226_Address                    : constant := 16#151_6b88#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_227_Address                    : constant := 16#151_6b8c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_228_Address                    : constant := 16#151_6b90#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_229_Address                    : constant := 16#151_6b94#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_230_Address                    : constant := 16#151_6b98#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_231_Address                    : constant := 16#151_6b9c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_232_Address                    : constant := 16#151_6ba0#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_233_Address                    : constant := 16#151_6ba4#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_234_Address                    : constant := 16#151_6ba8#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_235_Address                    : constant := 16#151_6bac#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_236_Address                    : constant := 16#151_6bb0#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_237_Address                    : constant := 16#151_6bb4#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_238_Address                    : constant := 16#151_6bb8#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_239_Address                    : constant := 16#151_6bbc#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_240_Address                    : constant := 16#151_6bc0#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_241_Address                    : constant := 16#151_6bc4#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_242_Address                    : constant := 16#151_6bc8#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_243_Address                    : constant := 16#151_6bcc#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_244_Address                    : constant := 16#151_6bd0#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_245_Address                    : constant := 16#151_6bd4#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_246_Address                    : constant := 16#151_6bd8#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_247_Address                    : constant := 16#151_6bdc#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_248_Address                    : constant := 16#151_6be0#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_249_Address                    : constant := 16#151_6be4#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_250_Address                    : constant := 16#151_6be8#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_251_Address                    : constant := 16#151_6bec#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_252_Address                    : constant := 16#151_6bf0#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_253_Address                    : constant := 16#151_6bf4#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_254_Address                    : constant := 16#151_6bf8#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_255_Address                    : constant := 16#151_6bfc#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE1_0_Size                         : constant := 16#100#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_0_Address                      : constant := 16#151_6c00#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_1_Address                      : constant := 16#151_6c04#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_2_Address                      : constant := 16#151_6c08#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_3_Address                      : constant := 16#151_6c0c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_4_Address                      : constant := 16#151_6c10#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_5_Address                      : constant := 16#151_6c14#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_6_Address                      : constant := 16#151_6c18#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_7_Address                      : constant := 16#151_6c1c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_8_Address                      : constant := 16#151_6c20#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_9_Address                      : constant := 16#151_6c24#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_10_Address                     : constant := 16#151_6c28#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_11_Address                     : constant := 16#151_6c2c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_12_Address                     : constant := 16#151_6c30#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_13_Address                     : constant := 16#151_6c34#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_14_Address                     : constant := 16#151_6c38#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_15_Address                     : constant := 16#151_6c3c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_16_Address                     : constant := 16#151_6c40#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_17_Address                     : constant := 16#151_6c44#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_18_Address                     : constant := 16#151_6c48#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_19_Address                     : constant := 16#151_6c4c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_20_Address                     : constant := 16#151_6c50#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_21_Address                     : constant := 16#151_6c54#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_22_Address                     : constant := 16#151_6c58#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_23_Address                     : constant := 16#151_6c5c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_24_Address                     : constant := 16#151_6c60#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_25_Address                     : constant := 16#151_6c64#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_26_Address                     : constant := 16#151_6c68#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_27_Address                     : constant := 16#151_6c6c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_28_Address                     : constant := 16#151_6c70#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_29_Address                     : constant := 16#151_6c74#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_30_Address                     : constant := 16#151_6c78#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_31_Address                     : constant := 16#151_6c7c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_32_Address                     : constant := 16#151_6c80#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_33_Address                     : constant := 16#151_6c84#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_34_Address                     : constant := 16#151_6c88#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_35_Address                     : constant := 16#151_6c8c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_36_Address                     : constant := 16#151_6c90#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_37_Address                     : constant := 16#151_6c94#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_38_Address                     : constant := 16#151_6c98#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_39_Address                     : constant := 16#151_6c9c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_40_Address                     : constant := 16#151_6ca0#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_41_Address                     : constant := 16#151_6ca4#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_42_Address                     : constant := 16#151_6ca8#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_43_Address                     : constant := 16#151_6cac#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_44_Address                     : constant := 16#151_6cb0#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_45_Address                     : constant := 16#151_6cb4#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_46_Address                     : constant := 16#151_6cb8#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_47_Address                     : constant := 16#151_6cbc#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_48_Address                     : constant := 16#151_6cc0#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_49_Address                     : constant := 16#151_6cc4#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_50_Address                     : constant := 16#151_6cc8#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_51_Address                     : constant := 16#151_6ccc#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_52_Address                     : constant := 16#151_6cd0#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_53_Address                     : constant := 16#151_6cd4#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_54_Address                     : constant := 16#151_6cd8#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_55_Address                     : constant := 16#151_6cdc#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_56_Address                     : constant := 16#151_6ce0#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_57_Address                     : constant := 16#151_6ce4#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_58_Address                     : constant := 16#151_6ce8#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_59_Address                     : constant := 16#151_6cec#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_60_Address                     : constant := 16#151_6cf0#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_61_Address                     : constant := 16#151_6cf4#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_62_Address                     : constant := 16#151_6cf8#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_63_Address                     : constant := 16#151_6cfc#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_64_Address                     : constant := 16#151_6d00#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_65_Address                     : constant := 16#151_6d04#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_66_Address                     : constant := 16#151_6d08#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_67_Address                     : constant := 16#151_6d0c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_68_Address                     : constant := 16#151_6d10#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_69_Address                     : constant := 16#151_6d14#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_70_Address                     : constant := 16#151_6d18#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_71_Address                     : constant := 16#151_6d1c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_72_Address                     : constant := 16#151_6d20#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_73_Address                     : constant := 16#151_6d24#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_74_Address                     : constant := 16#151_6d28#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_75_Address                     : constant := 16#151_6d2c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_76_Address                     : constant := 16#151_6d30#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_77_Address                     : constant := 16#151_6d34#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_78_Address                     : constant := 16#151_6d38#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_79_Address                     : constant := 16#151_6d3c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_80_Address                     : constant := 16#151_6d40#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_81_Address                     : constant := 16#151_6d44#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_82_Address                     : constant := 16#151_6d48#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_83_Address                     : constant := 16#151_6d4c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_84_Address                     : constant := 16#151_6d50#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_85_Address                     : constant := 16#151_6d54#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_86_Address                     : constant := 16#151_6d58#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_87_Address                     : constant := 16#151_6d5c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_88_Address                     : constant := 16#151_6d60#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_89_Address                     : constant := 16#151_6d64#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_90_Address                     : constant := 16#151_6d68#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_91_Address                     : constant := 16#151_6d6c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_92_Address                     : constant := 16#151_6d70#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_93_Address                     : constant := 16#151_6d74#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_94_Address                     : constant := 16#151_6d78#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_95_Address                     : constant := 16#151_6d7c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_96_Address                     : constant := 16#151_6d80#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_97_Address                     : constant := 16#151_6d84#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_98_Address                     : constant := 16#151_6d88#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_99_Address                     : constant := 16#151_6d8c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_100_Address                    : constant := 16#151_6d90#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_101_Address                    : constant := 16#151_6d94#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_102_Address                    : constant := 16#151_6d98#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_103_Address                    : constant := 16#151_6d9c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_104_Address                    : constant := 16#151_6da0#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_105_Address                    : constant := 16#151_6da4#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_106_Address                    : constant := 16#151_6da8#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_107_Address                    : constant := 16#151_6dac#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_108_Address                    : constant := 16#151_6db0#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_109_Address                    : constant := 16#151_6db4#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_110_Address                    : constant := 16#151_6db8#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_111_Address                    : constant := 16#151_6dbc#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_112_Address                    : constant := 16#151_6dc0#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_113_Address                    : constant := 16#151_6dc4#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_114_Address                    : constant := 16#151_6dc8#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_115_Address                    : constant := 16#151_6dcc#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_116_Address                    : constant := 16#151_6dd0#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_117_Address                    : constant := 16#151_6dd4#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_118_Address                    : constant := 16#151_6dd8#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_119_Address                    : constant := 16#151_6ddc#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_120_Address                    : constant := 16#151_6de0#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_121_Address                    : constant := 16#151_6de4#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_122_Address                    : constant := 16#151_6de8#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_123_Address                    : constant := 16#151_6dec#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_124_Address                    : constant := 16#151_6df0#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_125_Address                    : constant := 16#151_6df4#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_126_Address                    : constant := 16#151_6df8#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_127_Address                    : constant := 16#151_6dfc#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_128_Address                    : constant := 16#151_6e00#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_129_Address                    : constant := 16#151_6e04#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_130_Address                    : constant := 16#151_6e08#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_131_Address                    : constant := 16#151_6e0c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_132_Address                    : constant := 16#151_6e10#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_133_Address                    : constant := 16#151_6e14#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_134_Address                    : constant := 16#151_6e18#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_135_Address                    : constant := 16#151_6e1c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_136_Address                    : constant := 16#151_6e20#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_137_Address                    : constant := 16#151_6e24#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_138_Address                    : constant := 16#151_6e28#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_139_Address                    : constant := 16#151_6e2c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_140_Address                    : constant := 16#151_6e30#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_141_Address                    : constant := 16#151_6e34#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_142_Address                    : constant := 16#151_6e38#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_143_Address                    : constant := 16#151_6e3c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_144_Address                    : constant := 16#151_6e40#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_145_Address                    : constant := 16#151_6e44#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_146_Address                    : constant := 16#151_6e48#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_147_Address                    : constant := 16#151_6e4c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_148_Address                    : constant := 16#151_6e50#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_149_Address                    : constant := 16#151_6e54#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_150_Address                    : constant := 16#151_6e58#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_151_Address                    : constant := 16#151_6e5c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_152_Address                    : constant := 16#151_6e60#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_153_Address                    : constant := 16#151_6e64#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_154_Address                    : constant := 16#151_6e68#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_155_Address                    : constant := 16#151_6e6c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_156_Address                    : constant := 16#151_6e70#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_157_Address                    : constant := 16#151_6e74#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_158_Address                    : constant := 16#151_6e78#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_159_Address                    : constant := 16#151_6e7c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_160_Address                    : constant := 16#151_6e80#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_161_Address                    : constant := 16#151_6e84#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_162_Address                    : constant := 16#151_6e88#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_163_Address                    : constant := 16#151_6e8c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_164_Address                    : constant := 16#151_6e90#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_165_Address                    : constant := 16#151_6e94#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_166_Address                    : constant := 16#151_6e98#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_167_Address                    : constant := 16#151_6e9c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_168_Address                    : constant := 16#151_6ea0#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_169_Address                    : constant := 16#151_6ea4#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_170_Address                    : constant := 16#151_6ea8#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_171_Address                    : constant := 16#151_6eac#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_172_Address                    : constant := 16#151_6eb0#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_173_Address                    : constant := 16#151_6eb4#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_174_Address                    : constant := 16#151_6eb8#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_175_Address                    : constant := 16#151_6ebc#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_176_Address                    : constant := 16#151_6ec0#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_177_Address                    : constant := 16#151_6ec4#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_178_Address                    : constant := 16#151_6ec8#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_179_Address                    : constant := 16#151_6ecc#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_180_Address                    : constant := 16#151_6ed0#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_181_Address                    : constant := 16#151_6ed4#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_182_Address                    : constant := 16#151_6ed8#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_183_Address                    : constant := 16#151_6edc#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_184_Address                    : constant := 16#151_6ee0#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_185_Address                    : constant := 16#151_6ee4#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_186_Address                    : constant := 16#151_6ee8#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_187_Address                    : constant := 16#151_6eec#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_188_Address                    : constant := 16#151_6ef0#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_189_Address                    : constant := 16#151_6ef4#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_190_Address                    : constant := 16#151_6ef8#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_191_Address                    : constant := 16#151_6efc#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_192_Address                    : constant := 16#151_6f00#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_193_Address                    : constant := 16#151_6f04#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_194_Address                    : constant := 16#151_6f08#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_195_Address                    : constant := 16#151_6f0c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_196_Address                    : constant := 16#151_6f10#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_197_Address                    : constant := 16#151_6f14#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_198_Address                    : constant := 16#151_6f18#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_199_Address                    : constant := 16#151_6f1c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_200_Address                    : constant := 16#151_6f20#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_201_Address                    : constant := 16#151_6f24#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_202_Address                    : constant := 16#151_6f28#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_203_Address                    : constant := 16#151_6f2c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_204_Address                    : constant := 16#151_6f30#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_205_Address                    : constant := 16#151_6f34#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_206_Address                    : constant := 16#151_6f38#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_207_Address                    : constant := 16#151_6f3c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_208_Address                    : constant := 16#151_6f40#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_209_Address                    : constant := 16#151_6f44#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_210_Address                    : constant := 16#151_6f48#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_211_Address                    : constant := 16#151_6f4c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_212_Address                    : constant := 16#151_6f50#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_213_Address                    : constant := 16#151_6f54#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_214_Address                    : constant := 16#151_6f58#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_215_Address                    : constant := 16#151_6f5c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_216_Address                    : constant := 16#151_6f60#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_217_Address                    : constant := 16#151_6f64#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_218_Address                    : constant := 16#151_6f68#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_219_Address                    : constant := 16#151_6f6c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_220_Address                    : constant := 16#151_6f70#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_221_Address                    : constant := 16#151_6f74#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_222_Address                    : constant := 16#151_6f78#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_223_Address                    : constant := 16#151_6f7c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_224_Address                    : constant := 16#151_6f80#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_225_Address                    : constant := 16#151_6f84#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_226_Address                    : constant := 16#151_6f88#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_227_Address                    : constant := 16#151_6f8c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_228_Address                    : constant := 16#151_6f90#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_229_Address                    : constant := 16#151_6f94#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_230_Address                    : constant := 16#151_6f98#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_231_Address                    : constant := 16#151_6f9c#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_232_Address                    : constant := 16#151_6fa0#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_233_Address                    : constant := 16#151_6fa4#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_234_Address                    : constant := 16#151_6fa8#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_235_Address                    : constant := 16#151_6fac#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_236_Address                    : constant := 16#151_6fb0#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_237_Address                    : constant := 16#151_6fb4#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_238_Address                    : constant := 16#151_6fb8#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_239_Address                    : constant := 16#151_6fbc#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_240_Address                    : constant := 16#151_6fc0#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_241_Address                    : constant := 16#151_6fc4#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_242_Address                    : constant := 16#151_6fc8#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_243_Address                    : constant := 16#151_6fcc#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_244_Address                    : constant := 16#151_6fd0#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_245_Address                    : constant := 16#151_6fd4#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_246_Address                    : constant := 16#151_6fd8#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_247_Address                    : constant := 16#151_6fdc#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_248_Address                    : constant := 16#151_6fe0#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_249_Address                    : constant := 16#151_6fe4#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_250_Address                    : constant := 16#151_6fe8#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_251_Address                    : constant := 16#151_6fec#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_252_Address                    : constant := 16#151_6ff0#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_253_Address                    : constant := 16#151_6ff4#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_254_Address                    : constant := 16#151_6ff8#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_255_Address                    : constant := 16#151_6ffc#;
    LW_PRGNLCL_LWPKA_CORE_CROM_CURVE2_0_Size                         : constant := 16#100#;
    LW_PRGNLCL_LWRNG_HWCFG00_Address                                 : constant := 16#152_0000#;
    LW_PRGNLCL_LWRNG_HWCFG01_Address                                 : constant := 16#152_0004#;
    LW_PRGNLCL_LWRNG_B_LOCK00_Address                                : constant := 16#152_0010#;
    LW_PRGNLCL_LWRNG_B_CTRL0_Address                                 : constant := 16#152_0020#;
    LW_PRGNLCL_LWRNG_B_CTRL1_Address                                 : constant := 16#152_0024#;
    LW_PRGNLCL_LWRNG_B_CTRL2_Address                                 : constant := 16#152_0028#;
    LW_PRGNLCL_LWRNG_T_CFG_Address                                   : constant := 16#152_0060#;
    LW_PRGNLCL_LWRNG_T_CMD_Address                                   : constant := 16#152_0064#;
    LW_PRGNLCL_LWRNG_T_STAT_Address                                  : constant := 16#152_0068#;
    LW_PRGNLCL_LWRNG_T_IDC_Address                                   : constant := 16#152_006c#;
    LW_PRGNLCL_LWRNG_T_IDD_Address                                   : constant := 16#152_0070#;
    LW_PRGNLCL_LWRNG_R_IE_Address                                    : constant := 16#152_0080#;
    LW_PRGNLCL_LWRNG_R_ISTAT_Address                                 : constant := 16#152_0084#;
    LW_PRGNLCL_LWRNG_R_STAT_Address                                  : constant := 16#152_0088#;
    LW_PRGNLCL_LWRNG_R_CTRL0_Address                                 : constant := 16#152_008c#;
    LW_PRGNLCL_LWRNG_R_CTRL1_Address                                 : constant := 16#152_0090#;
    LW_PRGNLCL_LWRNG_R_OUTPUT_0_Address                              : constant := 16#152_00d0#;
    LW_PRGNLCL_LWRNG_R_OUTPUT_1_Address                              : constant := 16#152_00d4#;
    LW_PRGNLCL_LWRNG_R_OUTPUT_2_Address                              : constant := 16#152_00d8#;
    LW_PRGNLCL_LWRNG_R_OUTPUT_3_Address                              : constant := 16#152_00dc#;
    LW_PRGNLCL_LWRNG_R_OUTPUT_0_Size                                 : constant := 16#4#;
    LW_PRGNLCL_LWRNG_R_OUTPUT_STAT_Address                           : constant := 16#152_00e0#;
    LW_PRGNLCL_LWRNG_DFIFO_STAT_Address                              : constant := 16#152_00f0#;
    LW_PRGNLCL_LWRNG_NFIFO_STAT_Address                              : constant := 16#152_00f4#;
    LW_PRGNLCL_LWRNG_SFIFO_STAT_Address                              : constant := 16#152_00f8#;
    LW_PRGNLCL_LWRNG_HWCFG10_Address                                 : constant := 16#152_1000#;
    LW_PRGNLCL_LWRNG_B_LOCK10_Address                                : constant := 16#152_1010#;
    LW_PRGNLCL_LWRNG_B_MAP_0_Address                                 : constant := 16#152_1020#;
    LW_PRGNLCL_LWRNG_B_MAP_1_Address                                 : constant := 16#152_1024#;
    LW_PRGNLCL_LWRNG_B_MAP_2_Address                                 : constant := 16#152_1028#;
    LW_PRGNLCL_LWRNG_B_MAP_3_Address                                 : constant := 16#152_102c#;
    LW_PRGNLCL_LWRNG_B_MAP_4_Address                                 : constant := 16#152_1030#;
    LW_PRGNLCL_LWRNG_B_MAP_5_Address                                 : constant := 16#152_1034#;
    LW_PRGNLCL_LWRNG_B_MAP_6_Address                                 : constant := 16#152_1038#;
    LW_PRGNLCL_LWRNG_B_MAP_7_Address                                 : constant := 16#152_103c#;
    LW_PRGNLCL_LWRNG_B_MAP_8_Address                                 : constant := 16#152_1040#;
    LW_PRGNLCL_LWRNG_B_MAP_9_Address                                 : constant := 16#152_1044#;
    LW_PRGNLCL_LWRNG_B_MAP_10_Address                                : constant := 16#152_1048#;
    LW_PRGNLCL_LWRNG_B_MAP_11_Address                                : constant := 16#152_104c#;
    LW_PRGNLCL_LWRNG_B_MAP_12_Address                                : constant := 16#152_1050#;
    LW_PRGNLCL_LWRNG_B_MAP_13_Address                                : constant := 16#152_1054#;
    LW_PRGNLCL_LWRNG_B_MAP_14_Address                                : constant := 16#152_1058#;
    LW_PRGNLCL_LWRNG_B_MAP_15_Address                                : constant := 16#152_105c#;
    LW_PRGNLCL_LWRNG_B_MAP_0_Size                                    : constant := 16#10#;
    LW_PRGNLCL_LWRNG_B_P0BLF_CTL_Address                             : constant := 16#152_1080#;
    LW_PRGNLCL_LWRNG_DFIFO_OUT_Address                               : constant := 16#152_10f0#;
    LW_PRGNLCL_LWRNG_NFIFO_OUT_Address                               : constant := 16#152_10f4#;
    LW_PRGNLCL_GDMA_PRIV_LEVEL_MASK_Address                          : constant := 16#154_0000#;
    LW_PRGNLCL_GDMA_IRQSTAT_Address                                  : constant := 16#154_0004#;
    LW_PRGNLCL_GDMA_STATUS_Address                                   : constant := 16#154_0008#;
    LW_PRGNLCL_GDMA_CFG_Address                                      : constant := 16#154_000c#;
    LW_PRGNLCL_GDMA_IRQ_CTRL_Address                                 : constant := 16#154_0010#;
    LW_PRGNLCL_GDMA_CHAN_CONTROL_0_Address                           : constant := 16#154_1000#;
    LW_PRGNLCL_GDMA_CHAN_CONTROL_1_Address                           : constant := 16#154_2000#;
    LW_PRGNLCL_GDMA_CHAN_CONTROL_0_Size                              : constant := 16#2#;
    LW_PRGNLCL_GDMA_CHAN_COMMON_CONFIG_0_Address                     : constant := 16#154_1004#;
    LW_PRGNLCL_GDMA_CHAN_COMMON_CONFIG_1_Address                     : constant := 16#154_2004#;
    LW_PRGNLCL_GDMA_CHAN_COMMON_CONFIG_0_Size                        : constant := 16#2#;
    LW_PRGNLCL_GDMA_CHAN_MEMQ_CONFIG_0_Address                       : constant := 16#154_1008#;
    LW_PRGNLCL_GDMA_CHAN_MEMQ_CONFIG_1_Address                       : constant := 16#154_2008#;
    LW_PRGNLCL_GDMA_CHAN_MEMQ_CONFIG_0_Size                          : constant := 16#2#;
    LW_PRGNLCL_GDMA_CHAN_MEMQ_PRODUCE_0_Address                      : constant := 16#154_100c#;
    LW_PRGNLCL_GDMA_CHAN_MEMQ_PRODUCE_1_Address                      : constant := 16#154_200c#;
    LW_PRGNLCL_GDMA_CHAN_MEMQ_PRODUCE_0_Size                         : constant := 16#2#;
    LW_PRGNLCL_GDMA_CHAN_SRC_ADDR_0_Address                          : constant := 16#154_1010#;
    LW_PRGNLCL_GDMA_CHAN_SRC_ADDR_1_Address                          : constant := 16#154_2010#;
    LW_PRGNLCL_GDMA_CHAN_SRC_ADDR_0_Size                             : constant := 16#2#;
    LW_PRGNLCL_GDMA_CHAN_SRC_ADDR_HI_0_Address                       : constant := 16#154_1014#;
    LW_PRGNLCL_GDMA_CHAN_SRC_ADDR_HI_1_Address                       : constant := 16#154_2014#;
    LW_PRGNLCL_GDMA_CHAN_SRC_ADDR_HI_0_Size                          : constant := 16#2#;
    LW_PRGNLCL_GDMA_CHAN_DEST_ADDR_0_Address                         : constant := 16#154_1018#;
    LW_PRGNLCL_GDMA_CHAN_DEST_ADDR_1_Address                         : constant := 16#154_2018#;
    LW_PRGNLCL_GDMA_CHAN_DEST_ADDR_0_Size                            : constant := 16#2#;
    LW_PRGNLCL_GDMA_CHAN_DEST_ADDR_HI_0_Address                      : constant := 16#154_101c#;
    LW_PRGNLCL_GDMA_CHAN_DEST_ADDR_HI_1_Address                      : constant := 16#154_201c#;
    LW_PRGNLCL_GDMA_CHAN_DEST_ADDR_HI_0_Size                         : constant := 16#2#;
    LW_PRGNLCL_GDMA_CHAN_TRANS_CONFIG0_0_Address                     : constant := 16#154_1020#;
    LW_PRGNLCL_GDMA_CHAN_TRANS_CONFIG0_1_Address                     : constant := 16#154_2020#;
    LW_PRGNLCL_GDMA_CHAN_TRANS_CONFIG0_0_Size                        : constant := 16#2#;
    LW_PRGNLCL_GDMA_CHAN_TRANS_CONFIG1_0_Address                     : constant := 16#154_1024#;
    LW_PRGNLCL_GDMA_CHAN_TRANS_CONFIG1_1_Address                     : constant := 16#154_2024#;
    LW_PRGNLCL_GDMA_CHAN_TRANS_CONFIG1_0_Size                        : constant := 16#2#;
    LW_PRGNLCL_GDMA_CHAN_TRANS_CONFIG2_0_Address                     : constant := 16#154_1028#;
    LW_PRGNLCL_GDMA_CHAN_TRANS_CONFIG2_1_Address                     : constant := 16#154_2028#;
    LW_PRGNLCL_GDMA_CHAN_TRANS_CONFIG2_0_Size                        : constant := 16#2#;
    LW_PRGNLCL_GDMA_CHAN_STATUS_0_Address                            : constant := 16#154_1030#;
    LW_PRGNLCL_GDMA_CHAN_STATUS_1_Address                            : constant := 16#154_2030#;
    LW_PRGNLCL_GDMA_CHAN_STATUS_0_Size                               : constant := 16#2#;
    LW_PRGNLCL_GDMA_CHAN_REQ_PRODUCE_0_Address                       : constant := 16#154_103c#;
    LW_PRGNLCL_GDMA_CHAN_REQ_PRODUCE_1_Address                       : constant := 16#154_203c#;
    LW_PRGNLCL_GDMA_CHAN_REQ_PRODUCE_0_Size                          : constant := 16#2#;
    LW_PRGNLCL_GDMA_CHAN_REQ_CONSUME_0_Address                       : constant := 16#154_1040#;
    LW_PRGNLCL_GDMA_CHAN_REQ_CONSUME_1_Address                       : constant := 16#154_2040#;
    LW_PRGNLCL_GDMA_CHAN_REQ_CONSUME_0_Size                          : constant := 16#2#;
    LW_PRGNLCL_GDMA_CHAN_REQ_COMPLETE_0_Address                      : constant := 16#154_1044#;
    LW_PRGNLCL_GDMA_CHAN_REQ_COMPLETE_1_Address                      : constant := 16#154_2044#;
    LW_PRGNLCL_GDMA_CHAN_REQ_COMPLETE_0_Size                         : constant := 16#2#;
    LW_PRGNLCL_GDMA_CHAN_REQ_ERROR_0_Address                         : constant := 16#154_1048#;
    LW_PRGNLCL_GDMA_CHAN_REQ_ERROR_1_Address                         : constant := 16#154_2048#;
    LW_PRGNLCL_GDMA_CHAN_REQ_ERROR_0_Size                            : constant := 16#2#;
    LW_REF_DEV_PRGNLCL_FIRST_Address                                 : constant := 16#140_0000#;
    LW_REF_DEV_PRGNLCL_LAST_Address                                  : constant := 16#154_2048#;
end Dev_Prgnlcl;
