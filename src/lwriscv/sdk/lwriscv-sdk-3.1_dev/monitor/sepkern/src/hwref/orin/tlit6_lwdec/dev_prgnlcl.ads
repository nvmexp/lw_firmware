with Nv_Types; use Nv_Types;

package Dev_Prgnlcl with
    SPARK_Mode => On
is
    LW_PRGNLCL_DEVICE_MAP_GROUP_MMODE          : constant := 16#0#;
    LW_PRGNLCL_DEVICE_MAP_GROUP_RISCV_CTL      : constant := 16#1#;
    LW_PRGNLCL_DEVICE_MAP_GROUP_PIC            : constant := 16#2#;
    LW_PRGNLCL_DEVICE_MAP_GROUP_TIMER          : constant := 16#3#;
    LW_PRGNLCL_DEVICE_MAP_GROUP_HOSTIF         : constant := 16#4#;
    LW_PRGNLCL_DEVICE_MAP_GROUP_DMA            : constant := 16#5#;
    LW_PRGNLCL_DEVICE_MAP_GROUP_PMB            : constant := 16#6#;
    LW_PRGNLCL_DEVICE_MAP_GROUP_DIO            : constant := 16#7#;
    LW_PRGNLCL_DEVICE_MAP_GROUP_KEY            : constant := 16#8#;
    LW_PRGNLCL_DEVICE_MAP_GROUP_DEBUG          : constant := 16#9#;
    LW_PRGNLCL_DEVICE_MAP_GROUP_SHA            : constant := 16#a#;
    LW_PRGNLCL_DEVICE_MAP_GROUP_KMEM           : constant := 16#b#;
    LW_PRGNLCL_DEVICE_MAP_GROUP_BROM           : constant := 16#c#;
    LW_PRGNLCL_DEVICE_MAP_GROUP_ROM_PATCH      : constant := 16#d#;
    LW_PRGNLCL_DEVICE_MAP_GROUP_IOPMP          : constant := 16#e#;
    LW_PRGNLCL_DEVICE_MAP_GROUP_NOACCESS       : constant := 16#f#;
    LW_PRGNLCL_DEVICE_MAP_GROUP_SCP            : constant := 16#10#;
    LW_PRGNLCL_DEVICE_MAP_GROUP_TFBIF          : constant := 16#11#;
    LW_PRGNLCL_DEVICE_MAP_GROUP_FALCON_ONLY    : constant := 16#12#;
    LW_PRGNLCL_DEVICE_MAP_GROUP_PRGN_CTL       : constant := 16#13#;
    LW_PRGNLCL_DEVICE_MAP_GROUP_SCRATCH_GROUP0 : constant := 16#14#;
    LW_PRGNLCL_DEVICE_MAP_GROUP_SCRATCH_GROUP1 : constant := 16#15#;
    LW_PRGNLCL_DEVICE_MAP_GROUP_SCRATCH_GROUP2 : constant := 16#16#;
    LW_PRGNLCL_DEVICE_MAP_GROUP_SCRATCH_GROUP3 : constant := 16#17#;
    LW_PRGNLCL_DEVICE_MAP_GROUP_PLM            : constant := 16#18#;
    LW_PRGNLCL_DEVICE_MAP_GROUP_HUB_DIO        : constant := 16#19#;

    LW_PRGNLCL_FALCON_IMEM_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_IMEM_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_IMEM_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_IMEM_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_IMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_IMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_IMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    type LW_PRGNLCL_FALCON_IMEM_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IMEM_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_IMEM_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IMEM_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_IMEM_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IMEM_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_FALCON_IMEM_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IMEM_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_FALCON_IMEM_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FALCON_IMEM_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_IMEM_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_IMEM_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_IMEM_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_IMEM_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_IMEM_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_IMEM_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_IMEM_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_IMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_IMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_IMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_IMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_IMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_IMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_IMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_IMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_FALCON_IMEM_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_FALCON_IMEM_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_FALCON_IMEM_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_FALCON_IMEM_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_FALCON_IMEM_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_IMEM_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_FALCON_DMEM_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_DMEM_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_DMEM_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_DMEM_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_DMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_DMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_DMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    type LW_PRGNLCL_FALCON_DMEM_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_DMEM_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_DMEM_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_DMEM_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_DMEM_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_DMEM_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_FALCON_DMEM_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_DMEM_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_FALCON_DMEM_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FALCON_DMEM_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_DMEM_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_DMEM_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_DMEM_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_DMEM_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_DMEM_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_DMEM_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_DMEM_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_DMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_DMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_DMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_DMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_DMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_DMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_DMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_DMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_FALCON_DMEM_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_FALCON_DMEM_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_FALCON_DMEM_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_FALCON_DMEM_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_FALCON_DMEM_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DMEM_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_FALCON_CPUCTL_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_CPUCTL_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_CPUCTL_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_CPUCTL_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_CPUCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_CPUCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_CPUCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    type LW_PRGNLCL_FALCON_CPUCTL_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_CPUCTL_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_CPUCTL_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_CPUCTL_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_CPUCTL_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_CPUCTL_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_FALCON_CPUCTL_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_CPUCTL_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_FALCON_CPUCTL_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FALCON_CPUCTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_CPUCTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_CPUCTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_CPUCTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_CPUCTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_CPUCTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_CPUCTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_CPUCTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_CPUCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_CPUCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_CPUCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_CPUCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_CPUCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_CPUCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_CPUCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_CPUCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_FALCON_CPUCTL_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_FALCON_CPUCTL_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_FALCON_CPUCTL_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_FALCON_CPUCTL_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_FALCON_CPUCTL_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_CPUCTL_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_FALCON_EXE_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_EXE_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_EXE_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_EXE_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_EXE_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_EXE_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_EXE_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    type LW_PRGNLCL_FALCON_EXE_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_EXE_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_EXE_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_EXE_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_EXE_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_EXE_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_FALCON_EXE_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_EXE_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_FALCON_EXE_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FALCON_EXE_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_EXE_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_EXE_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_EXE_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_EXE_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_EXE_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_EXE_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_EXE_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_EXE_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_EXE_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_EXE_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_EXE_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_EXE_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_EXE_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_EXE_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_EXE_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_FALCON_EXE_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_FALCON_EXE_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_FALCON_EXE_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_FALCON_EXE_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_FALCON_EXE_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_EXE_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_FALCON_IRQTMR_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_IRQTMR_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_IRQTMR_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_IRQTMR_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_IRQTMR_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_IRQTMR_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_IRQTMR_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    type LW_PRGNLCL_FALCON_IRQTMR_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQTMR_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_IRQTMR_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQTMR_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_IRQTMR_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQTMR_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_FALCON_IRQTMR_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQTMR_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_FALCON_IRQTMR_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FALCON_IRQTMR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_IRQTMR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_IRQTMR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_IRQTMR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_IRQTMR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_IRQTMR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_IRQTMR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_IRQTMR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_IRQTMR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_IRQTMR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_IRQTMR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_IRQTMR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_IRQTMR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_IRQTMR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_IRQTMR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_IRQTMR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_FALCON_IRQTMR_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_FALCON_IRQTMR_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_FALCON_IRQTMR_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_FALCON_IRQTMR_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_FALCON_IRQTMR_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_IRQTMR_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_FALCON_MTHDCTX_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_MTHDCTX_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_MTHDCTX_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_MTHDCTX_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_MTHDCTX_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_MTHDCTX_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_MTHDCTX_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    type LW_PRGNLCL_FALCON_MTHDCTX_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_MTHDCTX_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_MTHDCTX_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_MTHDCTX_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_MTHDCTX_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_MTHDCTX_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_FALCON_MTHDCTX_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_MTHDCTX_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_FALCON_MTHDCTX_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FALCON_MTHDCTX_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_MTHDCTX_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_MTHDCTX_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_MTHDCTX_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_MTHDCTX_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_MTHDCTX_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_MTHDCTX_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_MTHDCTX_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_MTHDCTX_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_MTHDCTX_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_MTHDCTX_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_MTHDCTX_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_MTHDCTX_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_MTHDCTX_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_MTHDCTX_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_MTHDCTX_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_FALCON_MTHDCTX_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_FALCON_MTHDCTX_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_FALCON_MTHDCTX_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_FALCON_MTHDCTX_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_FALCON_MTHDCTX_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_MTHDCTX_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_FALCON_HSCTL_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_HSCTL_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_HSCTL_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_HSCTL_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_HSCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_HSCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_HSCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    type LW_PRGNLCL_FALCON_HSCTL_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_HSCTL_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_HSCTL_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_HSCTL_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_HSCTL_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_HSCTL_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_FALCON_HSCTL_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_HSCTL_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_FALCON_HSCTL_PRIV_LEVEL_MASK_SOURCE_ENABLE_RESET_FUSE0         : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FALCON_HSCTL_PRIV_LEVEL_MASK_SOURCE_ENABLE_RESET_FUSE1         : constant NvU20 := 16#8_0000#;
    LW_PRGNLCL_FALCON_HSCTL_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FALCON_HSCTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_HSCTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_HSCTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_HSCTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_HSCTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_HSCTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_HSCTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_HSCTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_HSCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_HSCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_HSCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_HSCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_HSCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_HSCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_HSCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_HSCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_FALCON_HSCTL_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_FALCON_HSCTL_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_FALCON_HSCTL_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_FALCON_HSCTL_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_FALCON_HSCTL_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_HSCTL_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_FALCON_DIODT_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_DIODT_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_DIODT_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_DIODT_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_DIODT_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_DIODT_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_DIODT_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    type LW_PRGNLCL_FALCON_DIODT_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_DIODT_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_DIODT_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_DIODT_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_DIODT_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_DIODT_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_FALCON_DIODT_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_DIODT_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_FALCON_DIODT_PRIV_LEVEL_MASK_SOURCE_ENABLE_RESET_FUSE0         : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FALCON_DIODT_PRIV_LEVEL_MASK_SOURCE_ENABLE_RESET_FUSE1         : constant NvU20 := 16#8_0000#;
    LW_PRGNLCL_FALCON_DIODT_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FALCON_DIODT_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_DIODT_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_DIODT_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_DIODT_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_DIODT_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_DIODT_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_DIODT_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_DIODT_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_DIODT_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_DIODT_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_DIODT_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_DIODT_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_DIODT_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_DIODT_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_DIODT_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_DIODT_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_FALCON_DIODT_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_FALCON_DIODT_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_FALCON_DIODT_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_FALCON_DIODT_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_FALCON_DIODT_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DIODT_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_FALCON_DIODTA_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_DIODTA_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_DIODTA_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_DIODTA_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_DIODTA_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_DIODTA_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_DIODTA_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    type LW_PRGNLCL_FALCON_DIODTA_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_DIODTA_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_DIODTA_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_DIODTA_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_DIODTA_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_DIODTA_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_FALCON_DIODTA_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_DIODTA_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_FALCON_DIODTA_PRIV_LEVEL_MASK_SOURCE_ENABLE_RESET_FUSE0         : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FALCON_DIODTA_PRIV_LEVEL_MASK_SOURCE_ENABLE_RESET_FUSE1         : constant NvU20 := 16#8_0000#;
    LW_PRGNLCL_FALCON_DIODTA_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FALCON_DIODTA_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_DIODTA_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_DIODTA_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_DIODTA_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_DIODTA_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_DIODTA_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_DIODTA_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_DIODTA_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_DIODTA_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_DIODTA_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_DIODTA_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_DIODTA_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_DIODTA_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_DIODTA_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_DIODTA_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_DIODTA_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_FALCON_DIODTA_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_FALCON_DIODTA_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_FALCON_DIODTA_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_FALCON_DIODTA_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_FALCON_DIODTA_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DIODTA_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_FALCON_SCTL_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_SCTL_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_SCTL_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_SCTL_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_SCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_INIT                : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_SCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_SCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_SCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    type LW_PRGNLCL_FALCON_SCTL_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SCTL_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_SCTL_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SCTL_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_SCTL_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SCTL_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_FALCON_SCTL_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SCTL_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_FALCON_SCTL_PRIV_LEVEL_MASK_SOURCE_ENABLE_INIT                : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FALCON_SCTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_SCTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_SCTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_SCTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_SCTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_SCTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_SCTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_SCTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_SCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_SCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_SCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_SCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_SCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_SCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_SCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_SCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_SCTL_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant       := 16#f_ffff#;

    type LW_PRGNLCL_FALCON_SCTL_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_FALCON_SCTL_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_FALCON_SCTL_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_FALCON_SCTL_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_FALCON_SCTL_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_SCTL_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_FALCON_WDTMR_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_WDTMR_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_WDTMR_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_WDTMR_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_WDTMR_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_WDTMR_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_WDTMR_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    type LW_PRGNLCL_FALCON_WDTMR_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_WDTMR_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_WDTMR_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_WDTMR_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_WDTMR_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_WDTMR_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_FALCON_WDTMR_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_WDTMR_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_FALCON_WDTMR_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FALCON_WDTMR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_WDTMR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_WDTMR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_WDTMR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_WDTMR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_WDTMR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_WDTMR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_WDTMR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_WDTMR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_WDTMR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_WDTMR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_WDTMR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_WDTMR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_WDTMR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_WDTMR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_WDTMR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_FALCON_WDTMR_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_FALCON_WDTMR_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_FALCON_WDTMR_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_FALCON_WDTMR_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_FALCON_WDTMR_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_WDTMR_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_FALCON_PRIVSTATE_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_PRIVSTATE_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_PRIVSTATE_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_PRIVSTATE_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_PRIVSTATE_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_PRIVSTATE_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_PRIVSTATE_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    type LW_PRGNLCL_FALCON_PRIVSTATE_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_PRIVSTATE_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_PRIVSTATE_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_PRIVSTATE_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_PRIVSTATE_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_PRIVSTATE_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_FALCON_PRIVSTATE_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_PRIVSTATE_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_FALCON_PRIVSTATE_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FALCON_PRIVSTATE_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_PRIVSTATE_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_PRIVSTATE_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_PRIVSTATE_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_PRIVSTATE_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_PRIVSTATE_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_PRIVSTATE_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_PRIVSTATE_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_PRIVSTATE_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_PRIVSTATE_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_PRIVSTATE_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_PRIVSTATE_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_PRIVSTATE_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_PRIVSTATE_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_PRIVSTATE_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_PRIVSTATE_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_FALCON_PRIVSTATE_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_FALCON_PRIVSTATE_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_FALCON_PRIVSTATE_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_FALCON_PRIVSTATE_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_FALCON_PRIVSTATE_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_PRIVSTATE_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_0_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_0_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_0_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLED       : constant NvU4 := 16#c#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_0_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_0_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_0_PRIV_LEVEL_MASK_WRITE_PROTECTION_DEFAULT_PRIV_LEVEL  : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_0_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_0_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLED      : constant NvU4 := 16#c#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_0_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_0_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    type LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_0_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_0_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_0_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_0_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_0_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_0_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_0_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_0_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_0_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_0_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_0_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_0_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_0_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_0_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_0_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_0_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_0_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_0_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_0_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_0_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_0_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_0_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_0_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_0_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_0_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_0_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_0_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_0_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_0_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_0_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_0_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_1_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_1_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_1_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLED       : constant NvU4 := 16#c#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_1_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_1_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_1_PRIV_LEVEL_MASK_WRITE_PROTECTION_DEFAULT_PRIV_LEVEL  : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_1_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_1_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLED      : constant NvU4 := 16#c#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_1_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_1_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    type LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_1_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_1_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_1_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_1_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_1_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_1_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_1_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_1_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_1_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_1_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_1_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_1_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_1_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_1_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_1_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_1_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_1_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_1_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_1_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_1_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_1_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_1_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_1_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_1_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_1_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_1_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_1_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_1_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_1_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_1_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_1_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_2_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_2_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_2_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLED       : constant NvU4 := 16#c#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_2_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_2_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_2_PRIV_LEVEL_MASK_WRITE_PROTECTION_DEFAULT_PRIV_LEVEL  : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_2_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_2_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLED      : constant NvU4 := 16#c#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_2_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_2_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    type LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_2_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_2_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_2_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_2_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_2_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_2_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_2_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_2_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_2_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_2_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_2_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_2_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_2_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_2_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_2_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_2_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_2_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_2_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_2_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_2_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_2_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_2_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_2_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_2_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_2_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_2_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_2_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_2_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_2_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_2_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_2_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_3_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_3_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_3_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLED       : constant NvU4 := 16#c#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_3_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_3_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_3_PRIV_LEVEL_MASK_WRITE_PROTECTION_DEFAULT_PRIV_LEVEL  : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_3_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_3_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLED      : constant NvU4 := 16#c#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_3_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_3_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    type LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_3_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_3_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_3_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_3_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_3_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_3_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_3_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_3_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_3_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_3_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_3_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_3_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_3_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_3_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_3_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_3_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_3_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_3_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_3_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_3_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_3_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_3_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_3_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_3_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_3_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_3_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_3_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_3_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_3_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_3_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_3_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_FALCON_PMB_IMEM_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_PMB_IMEM_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_PMB_IMEM_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_PMB_IMEM_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_PMB_IMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_PMB_IMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_PMB_IMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    type LW_PRGNLCL_FALCON_PMB_IMEM_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_PMB_IMEM_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_PMB_IMEM_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_PMB_IMEM_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_PMB_IMEM_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_PMB_IMEM_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_FALCON_PMB_IMEM_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_PMB_IMEM_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_FALCON_PMB_IMEM_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FALCON_PMB_IMEM_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_PMB_IMEM_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_PMB_IMEM_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_PMB_IMEM_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_PMB_IMEM_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_PMB_IMEM_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_PMB_IMEM_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_PMB_IMEM_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_PMB_IMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_PMB_IMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_PMB_IMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_PMB_IMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_PMB_IMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_PMB_IMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_PMB_IMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_PMB_IMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_FALCON_PMB_IMEM_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_FALCON_PMB_IMEM_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_FALCON_PMB_IMEM_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_FALCON_PMB_IMEM_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_FALCON_PMB_IMEM_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_PMB_IMEM_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_FALCON_PMB_DMEM_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_PMB_DMEM_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_PMB_DMEM_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_PMB_DMEM_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_PMB_DMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_PMB_DMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_PMB_DMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    type LW_PRGNLCL_FALCON_PMB_DMEM_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_PMB_DMEM_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_PMB_DMEM_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_PMB_DMEM_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_PMB_DMEM_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_PMB_DMEM_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_FALCON_PMB_DMEM_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_PMB_DMEM_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_FALCON_PMB_DMEM_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FALCON_PMB_DMEM_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_PMB_DMEM_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_PMB_DMEM_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_PMB_DMEM_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_PMB_DMEM_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_PMB_DMEM_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_PMB_DMEM_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_PMB_DMEM_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_PMB_DMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_PMB_DMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_PMB_DMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_PMB_DMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_PMB_DMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_PMB_DMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_PMB_DMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_PMB_DMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_FALCON_PMB_DMEM_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_FALCON_PMB_DMEM_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_FALCON_PMB_DMEM_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_FALCON_PMB_DMEM_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_FALCON_PMB_DMEM_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_PMB_DMEM_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_FALCON_DMA_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_DMA_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_DMA_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_DMA_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_DMA_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_DMA_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_DMA_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    type LW_PRGNLCL_FALCON_DMA_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_DMA_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_DMA_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_DMA_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_DMA_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_DMA_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_FALCON_DMA_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_DMA_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_FALCON_DMA_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FALCON_DMA_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_DMA_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_DMA_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_DMA_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_DMA_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_DMA_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_DMA_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_DMA_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_DMA_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_DMA_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_DMA_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_DMA_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_DMA_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_DMA_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_DMA_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_DMA_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_FALCON_DMA_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_FALCON_DMA_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_FALCON_DMA_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_FALCON_DMA_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_FALCON_DMA_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DMA_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_FALCON_BOOTVEC_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_BOOTVEC_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_BOOTVEC_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_BOOTVEC_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_BOOTVEC_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_BOOTVEC_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_BOOTVEC_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    type LW_PRGNLCL_FALCON_BOOTVEC_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_BOOTVEC_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_BOOTVEC_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_BOOTVEC_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_BOOTVEC_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_BOOTVEC_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_FALCON_BOOTVEC_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_BOOTVEC_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_FALCON_BOOTVEC_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FALCON_BOOTVEC_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_BOOTVEC_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_BOOTVEC_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_BOOTVEC_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_BOOTVEC_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_BOOTVEC_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_BOOTVEC_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_BOOTVEC_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_BOOTVEC_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_BOOTVEC_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_BOOTVEC_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_BOOTVEC_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_BOOTVEC_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_BOOTVEC_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_BOOTVEC_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_BOOTVEC_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_FALCON_BOOTVEC_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_FALCON_BOOTVEC_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_FALCON_BOOTVEC_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_FALCON_BOOTVEC_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_FALCON_BOOTVEC_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_BOOTVEC_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_FALCON_AMAP_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_AMAP_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_AMAP_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_AMAP_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_AMAP_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_AMAP_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_AMAP_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    type LW_PRGNLCL_FALCON_AMAP_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_AMAP_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_AMAP_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_AMAP_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_AMAP_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_AMAP_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_FALCON_AMAP_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_AMAP_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_FALCON_AMAP_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FALCON_AMAP_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_AMAP_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_AMAP_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_AMAP_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_AMAP_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_AMAP_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_AMAP_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_AMAP_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_AMAP_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_AMAP_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_AMAP_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_AMAP_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_AMAP_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_AMAP_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_AMAP_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_AMAP_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_FALCON_AMAP_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_FALCON_AMAP_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_FALCON_AMAP_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_FALCON_AMAP_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_FALCON_AMAP_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_AMAP_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_FALCON_TRACEBUF_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_TRACEBUF_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_TRACEBUF_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_TRACEBUF_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_TRACEBUF_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_TRACEBUF_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_TRACEBUF_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    type LW_PRGNLCL_FALCON_TRACEBUF_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_TRACEBUF_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_TRACEBUF_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_TRACEBUF_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_TRACEBUF_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_TRACEBUF_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_FALCON_TRACEBUF_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_TRACEBUF_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_FALCON_TRACEBUF_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FALCON_TRACEBUF_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_TRACEBUF_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_TRACEBUF_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_TRACEBUF_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_TRACEBUF_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_TRACEBUF_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_TRACEBUF_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_TRACEBUF_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_TRACEBUF_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_TRACEBUF_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_TRACEBUF_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_TRACEBUF_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_TRACEBUF_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_TRACEBUF_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_TRACEBUF_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_TRACEBUF_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_FALCON_TRACEBUF_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_FALCON_TRACEBUF_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_FALCON_TRACEBUF_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_FALCON_TRACEBUF_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_FALCON_TRACEBUF_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_TRACEBUF_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_FALCON_TMR_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_TMR_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_TMR_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_TMR_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_TMR_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_TMR_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_TMR_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    type LW_PRGNLCL_FALCON_TMR_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_TMR_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_TMR_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_TMR_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_TMR_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_TMR_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_FALCON_TMR_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_TMR_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_FALCON_TMR_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FALCON_TMR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_TMR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_TMR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_TMR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_TMR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_TMR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_TMR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_TMR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_TMR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_TMR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_TMR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_TMR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_TMR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_TMR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_TMR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_TMR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_FALCON_TMR_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_FALCON_TMR_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_FALCON_TMR_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_FALCON_TMR_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_FALCON_TMR_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_TMR_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_FALCON_IRQSCMASK_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_IRQSCMASK_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_IRQSCMASK_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_IRQSCMASK_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_IRQSCMASK_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_IRQSCMASK_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_IRQSCMASK_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    type LW_PRGNLCL_FALCON_IRQSCMASK_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQSCMASK_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_IRQSCMASK_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQSCMASK_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_IRQSCMASK_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQSCMASK_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_FALCON_IRQSCMASK_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQSCMASK_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_FALCON_IRQSCMASK_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FALCON_IRQSCMASK_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_IRQSCMASK_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_IRQSCMASK_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_IRQSCMASK_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_IRQSCMASK_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_IRQSCMASK_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_IRQSCMASK_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_IRQSCMASK_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_IRQSCMASK_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_IRQSCMASK_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_IRQSCMASK_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_IRQSCMASK_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_IRQSCMASK_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_IRQSCMASK_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_IRQSCMASK_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_IRQSCMASK_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_FALCON_IRQSCMASK_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_FALCON_IRQSCMASK_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_FALCON_IRQSCMASK_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_FALCON_IRQSCMASK_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_FALCON_IRQSCMASK_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_IRQSCMASK_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_FALCON_DBGCTL_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_DBGCTL_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_DBGCTL_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_DBGCTL_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_DBGCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_RESET_FUSE0         : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_DBGCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_RESET_FUSE1         : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_DBGCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_DBGCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_DBGCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    type LW_PRGNLCL_FALCON_DBGCTL_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_DBGCTL_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_DBGCTL_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_DBGCTL_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_DBGCTL_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_DBGCTL_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_FALCON_DBGCTL_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_DBGCTL_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_FALCON_DBGCTL_PRIV_LEVEL_MASK_SOURCE_ENABLE_RESET_FUSE0         : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FALCON_DBGCTL_PRIV_LEVEL_MASK_SOURCE_ENABLE_RESET_FUSE1         : constant NvU20 := 16#8_0000#;
    LW_PRGNLCL_FALCON_DBGCTL_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FALCON_DBGCTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_DBGCTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_DBGCTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_DBGCTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_DBGCTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_DBGCTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_DBGCTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_DBGCTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_DBGCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_DBGCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_DBGCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_DBGCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_DBGCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_DBGCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_DBGCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_DBGCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_FALCON_DBGCTL_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_FALCON_DBGCTL_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_FALCON_DBGCTL_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_FALCON_DBGCTL_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_FALCON_DBGCTL_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DBGCTL_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_FALCON_NO_ACCESS_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_NO_ACCESS_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_NO_ACCESS_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_NO_ACCESS_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_NO_ACCESS_PRIV_LEVEL_MASK_WRITE_PROTECTION_DEFAULT_PRIV_LEVEL  : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_NO_ACCESS_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_NO_ACCESS_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_NO_ACCESS_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    type LW_PRGNLCL_FALCON_NO_ACCESS_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_NO_ACCESS_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_NO_ACCESS_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_NO_ACCESS_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_NO_ACCESS_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_NO_ACCESS_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_FALCON_NO_ACCESS_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_NO_ACCESS_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_FALCON_NO_ACCESS_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_DISABLED : constant NvU20 := 16#0#;
    LW_PRGNLCL_FALCON_NO_ACCESS_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED  : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FALCON_NO_ACCESS_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE      : constant       := 16#1#;
    LW_PRGNLCL_FALCON_NO_ACCESS_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE     : constant       := 16#0#;
    LW_PRGNLCL_FALCON_NO_ACCESS_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE      : constant       := 16#1#;
    LW_PRGNLCL_FALCON_NO_ACCESS_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE     : constant       := 16#0#;
    LW_PRGNLCL_FALCON_NO_ACCESS_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE      : constant       := 16#1#;
    LW_PRGNLCL_FALCON_NO_ACCESS_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE     : constant       := 16#0#;
    LW_PRGNLCL_FALCON_NO_ACCESS_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE      : constant       := 16#1#;
    LW_PRGNLCL_FALCON_NO_ACCESS_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE     : constant       := 16#0#;
    LW_PRGNLCL_FALCON_NO_ACCESS_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_NO_ACCESS_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_NO_ACCESS_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_NO_ACCESS_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_NO_ACCESS_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_NO_ACCESS_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_NO_ACCESS_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_NO_ACCESS_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;

    type LW_PRGNLCL_FALCON_NO_ACCESS_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_FALCON_NO_ACCESS_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_FALCON_NO_ACCESS_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_FALCON_NO_ACCESS_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_FALCON_NO_ACCESS_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_NO_ACCESS_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_FALCON_PTIMER_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_PTIMER_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_PTIMER_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_PTIMER_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_PTIMER_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_PTIMER_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_PTIMER_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    type LW_PRGNLCL_FALCON_PTIMER_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_PTIMER_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_PTIMER_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_PTIMER_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_PTIMER_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_PTIMER_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_FALCON_PTIMER_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_PTIMER_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_FALCON_PTIMER_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FALCON_PTIMER_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_PTIMER_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_PTIMER_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_PTIMER_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_PTIMER_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_PTIMER_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_PTIMER_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_PTIMER_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_PTIMER_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_PTIMER_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_PTIMER_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_PTIMER_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_PTIMER_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_PTIMER_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_PTIMER_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_PTIMER_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_FALCON_PTIMER_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_FALCON_PTIMER_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_FALCON_PTIMER_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_FALCON_PTIMER_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_FALCON_PTIMER_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_PTIMER_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_FALCON_IDLESTATE_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_IDLESTATE_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_IDLESTATE_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_IDLESTATE_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_IDLESTATE_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_IDLESTATE_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_IDLESTATE_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    type LW_PRGNLCL_FALCON_IDLESTATE_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IDLESTATE_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_IDLESTATE_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IDLESTATE_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_IDLESTATE_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IDLESTATE_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_FALCON_IDLESTATE_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IDLESTATE_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_FALCON_IDLESTATE_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FALCON_IDLESTATE_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_IDLESTATE_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_IDLESTATE_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_IDLESTATE_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_IDLESTATE_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_IDLESTATE_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_IDLESTATE_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_IDLESTATE_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_IDLESTATE_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_IDLESTATE_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_IDLESTATE_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_IDLESTATE_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_IDLESTATE_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_IDLESTATE_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_IDLESTATE_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_IDLESTATE_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_FALCON_IDLESTATE_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_FALCON_IDLESTATE_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_FALCON_IDLESTATE_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_FALCON_IDLESTATE_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_FALCON_IDLESTATE_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_IDLESTATE_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_FALCON_ENG_STATE_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_ENG_STATE_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_ENG_STATE_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_ENG_STATE_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_ENG_STATE_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_ENG_STATE_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_ENG_STATE_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    type LW_PRGNLCL_FALCON_ENG_STATE_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_ENG_STATE_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_ENG_STATE_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_ENG_STATE_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_ENG_STATE_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_ENG_STATE_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_FALCON_ENG_STATE_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_ENG_STATE_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_FALCON_ENG_STATE_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FALCON_ENG_STATE_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_ENG_STATE_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_ENG_STATE_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_ENG_STATE_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_ENG_STATE_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_ENG_STATE_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_ENG_STATE_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_ENG_STATE_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_ENG_STATE_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_ENG_STATE_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_ENG_STATE_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_ENG_STATE_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_ENG_STATE_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_ENG_STATE_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_ENG_STATE_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_ENG_STATE_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_FALCON_ENG_STATE_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_FALCON_ENG_STATE_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_FALCON_ENG_STATE_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_FALCON_ENG_STATE_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_FALCON_ENG_STATE_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_ENG_STATE_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_FALCON_CG2_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_CG2_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_CG2_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_CG2_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_CG2_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_CG2_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_CG2_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    type LW_PRGNLCL_FALCON_CG2_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_CG2_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_CG2_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_CG2_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_CG2_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_CG2_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_FALCON_CG2_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_CG2_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_FALCON_CG2_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FALCON_CG2_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_CG2_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_CG2_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_CG2_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_CG2_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_CG2_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_CG2_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_CG2_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_CG2_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_CG2_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_CG2_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_CG2_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_CG2_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_CG2_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_CG2_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_CG2_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_FALCON_CG2_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_FALCON_CG2_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_FALCON_CG2_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_FALCON_CG2_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_FALCON_CG2_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_CG2_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_FALCON_PM_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_PM_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_PM_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_PM_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_PM_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_PM_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_PM_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    type LW_PRGNLCL_FALCON_PM_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_PM_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_PM_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_PM_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_PM_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_PM_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_FALCON_PM_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_PM_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_FALCON_PM_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FALCON_PM_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_PM_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_PM_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_PM_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_PM_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_PM_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_PM_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_PM_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_PM_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_PM_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_PM_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_PM_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_PM_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_PM_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_PM_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_PM_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_FALCON_PM_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_FALCON_PM_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_FALCON_PM_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_FALCON_PM_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_FALCON_PM_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_PM_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_FALCON_SP_MIN_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_SP_MIN_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_SP_MIN_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_SP_MIN_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_SP_MIN_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_SP_MIN_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_SP_MIN_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    type LW_PRGNLCL_FALCON_SP_MIN_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SP_MIN_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_SP_MIN_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SP_MIN_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_SP_MIN_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SP_MIN_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_FALCON_SP_MIN_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SP_MIN_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_FALCON_SP_MIN_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FALCON_SP_MIN_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_SP_MIN_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_SP_MIN_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_SP_MIN_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_SP_MIN_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_SP_MIN_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_SP_MIN_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_SP_MIN_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_SP_MIN_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_SP_MIN_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_SP_MIN_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_SP_MIN_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_SP_MIN_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_SP_MIN_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_SP_MIN_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_SP_MIN_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_FALCON_SP_MIN_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_FALCON_SP_MIN_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_FALCON_SP_MIN_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_FALCON_SP_MIN_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_FALCON_SP_MIN_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_SP_MIN_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_FALCON_EXCI_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_EXCI_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_EXCI_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_EXCI_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_EXCI_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_EXCI_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_EXCI_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    type LW_PRGNLCL_FALCON_EXCI_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_EXCI_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_EXCI_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_EXCI_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_EXCI_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_EXCI_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_FALCON_EXCI_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_EXCI_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_FALCON_EXCI_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FALCON_EXCI_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_EXCI_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_EXCI_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_EXCI_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_EXCI_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_EXCI_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_EXCI_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_EXCI_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_EXCI_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_EXCI_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_EXCI_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_EXCI_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_EXCI_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_EXCI_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_EXCI_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_EXCI_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_FALCON_EXCI_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_FALCON_EXCI_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_FALCON_EXCI_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_FALCON_EXCI_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_FALCON_EXCI_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_EXCI_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_FALCON_SVEC_SPR_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_SVEC_SPR_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_SVEC_SPR_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_SVEC_SPR_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_SVEC_SPR_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_SVEC_SPR_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_SVEC_SPR_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    type LW_PRGNLCL_FALCON_SVEC_SPR_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SVEC_SPR_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_SVEC_SPR_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SVEC_SPR_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_SVEC_SPR_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SVEC_SPR_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_FALCON_SVEC_SPR_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SVEC_SPR_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_FALCON_SVEC_SPR_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FALCON_SVEC_SPR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_SVEC_SPR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_SVEC_SPR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_SVEC_SPR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_SVEC_SPR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_SVEC_SPR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_SVEC_SPR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_SVEC_SPR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_SVEC_SPR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_SVEC_SPR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_SVEC_SPR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_SVEC_SPR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_SVEC_SPR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_SVEC_SPR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_SVEC_SPR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_SVEC_SPR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_FALCON_SVEC_SPR_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_FALCON_SVEC_SPR_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_FALCON_SVEC_SPR_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_FALCON_SVEC_SPR_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_FALCON_SVEC_SPR_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_SVEC_SPR_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_FALCON_BRKPT_PRIV_LEVEL_MASK_READ_PROTECTION_RESET_FUSE0          : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_BRKPT_PRIV_LEVEL_MASK_READ_PROTECTION_RESET_FUSE1          : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_BRKPT_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_BRKPT_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_BRKPT_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_BRKPT_PRIV_LEVEL_MASK_WRITE_PROTECTION_RESET_FUSE0         : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_BRKPT_PRIV_LEVEL_MASK_WRITE_PROTECTION_RESET_FUSE1         : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_BRKPT_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_BRKPT_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_BRKPT_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    type LW_PRGNLCL_FALCON_BRKPT_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_BRKPT_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_BRKPT_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_BRKPT_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_BRKPT_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_BRKPT_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_FALCON_BRKPT_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_BRKPT_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_FALCON_BRKPT_PRIV_LEVEL_MASK_SOURCE_ENABLE_RESET_FUSE0         : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FALCON_BRKPT_PRIV_LEVEL_MASK_SOURCE_ENABLE_RESET_FUSE1         : constant NvU20 := 16#8_0000#;
    LW_PRGNLCL_FALCON_BRKPT_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FALCON_BRKPT_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_BRKPT_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_BRKPT_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_BRKPT_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_BRKPT_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_BRKPT_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_BRKPT_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_BRKPT_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_BRKPT_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_BRKPT_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_BRKPT_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_BRKPT_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_BRKPT_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_BRKPT_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_BRKPT_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_BRKPT_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_FALCON_BRKPT_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_FALCON_BRKPT_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_FALCON_BRKPT_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_FALCON_BRKPT_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_FALCON_BRKPT_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_BRKPT_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_FALCON_ICD_PRIV_LEVEL_MASK_READ_PROTECTION_RESET_FUSE0          : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_ICD_PRIV_LEVEL_MASK_READ_PROTECTION_RESET_FUSE1          : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_ICD_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_ICD_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_ICD_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_ICD_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_ICD_PRIV_LEVEL_MASK_WRITE_PROTECTION_RESET_FUSE0         : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_ICD_PRIV_LEVEL_MASK_WRITE_PROTECTION_RESET_FUSE1         : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_ICD_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_ICD_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_ICD_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    type LW_PRGNLCL_FALCON_ICD_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_ICD_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_ICD_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_ICD_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_ICD_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_ICD_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_FALCON_ICD_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_ICD_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_FALCON_ICD_PRIV_LEVEL_MASK_SOURCE_ENABLE_RESET_FUSE0         : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FALCON_ICD_PRIV_LEVEL_MASK_SOURCE_ENABLE_RESET_FUSE1         : constant NvU20 := 16#8_0000#;
    LW_PRGNLCL_FALCON_ICD_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FALCON_ICD_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_ICD_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_ICD_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_ICD_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_ICD_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_ICD_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_ICD_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_ICD_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_ICD_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_ICD_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_ICD_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_ICD_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_ICD_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_ICD_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_ICD_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_ICD_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_FALCON_ICD_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_FALCON_ICD_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_FALCON_ICD_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_FALCON_ICD_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_FALCON_ICD_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_ICD_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_FALCON_RSTAT0_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_RSTAT0_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_RSTAT0_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_RSTAT0_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_RSTAT0_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_RSTAT0_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_RSTAT0_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    type LW_PRGNLCL_FALCON_RSTAT0_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_RSTAT0_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_RSTAT0_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_RSTAT0_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_RSTAT0_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_RSTAT0_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_FALCON_RSTAT0_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_RSTAT0_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_FALCON_RSTAT0_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FALCON_RSTAT0_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_RSTAT0_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_RSTAT0_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_RSTAT0_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_RSTAT0_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_RSTAT0_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_RSTAT0_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_RSTAT0_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_RSTAT0_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_RSTAT0_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_RSTAT0_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_RSTAT0_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_RSTAT0_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_RSTAT0_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_RSTAT0_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_RSTAT0_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_FALCON_RSTAT0_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_FALCON_RSTAT0_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_FALCON_RSTAT0_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_FALCON_RSTAT0_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_FALCON_RSTAT0_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_RSTAT0_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_FALCON_EXTERR_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_EXTERR_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_EXTERR_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_EXTERR_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_EXTERR_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_EXTERR_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_EXTERR_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    type LW_PRGNLCL_FALCON_EXTERR_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_EXTERR_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_EXTERR_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_EXTERR_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_EXTERR_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_EXTERR_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_FALCON_EXTERR_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_EXTERR_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_FALCON_EXTERR_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FALCON_EXTERR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_EXTERR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_EXTERR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_EXTERR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_EXTERR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_EXTERR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_EXTERR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_EXTERR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_EXTERR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_EXTERR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_EXTERR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_EXTERR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_EXTERR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_EXTERR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_EXTERR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_EXTERR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_FALCON_EXTERR_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_FALCON_EXTERR_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_FALCON_EXTERR_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_FALCON_EXTERR_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_FALCON_EXTERR_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_EXTERR_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_FALCON_CSBERR_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_CSBERR_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_CSBERR_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_CSBERR_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_CSBERR_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_CSBERR_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_CSBERR_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    type LW_PRGNLCL_FALCON_CSBERR_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_CSBERR_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_CSBERR_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_CSBERR_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_CSBERR_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_CSBERR_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_FALCON_CSBERR_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_CSBERR_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_FALCON_CSBERR_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FALCON_CSBERR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_CSBERR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_CSBERR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_CSBERR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_CSBERR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_CSBERR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_CSBERR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_CSBERR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_CSBERR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_CSBERR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_CSBERR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_CSBERR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_CSBERR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_CSBERR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_CSBERR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_CSBERR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_FALCON_CSBERR_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_FALCON_CSBERR_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_FALCON_CSBERR_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_FALCON_CSBERR_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_FALCON_CSBERR_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_CSBERR_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_FALCON_IRQSSET_GPTMR_SET       : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQSSET_WDTMR_SET       : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQSSET_MTHD_SET        : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQSSET_CTXSW_SET       : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQSSET_HALT_SET        : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQSSET_EXTERR_SET      : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQSSET_SWGEN0_SET      : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQSSET_SWGEN1_SET      : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQSSET_DMA_SET         : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQSSET_SHA_SET         : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQSSET_MEMERR_SET      : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQSSET_ICD_SET         : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQSSET_IOPMP_SET       : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQSSET_EXT_EXTIRQ1_SET : constant      := 16#1#;
    LW_PRGNLCL_FALCON_IRQSSET_EXT_EXTIRQ2_SET : constant      := 16#1#;
    LW_PRGNLCL_FALCON_IRQSSET_EXT_EXTIRQ3_SET : constant      := 16#1#;
    LW_PRGNLCL_FALCON_IRQSSET_EXT_EXTIRQ4_SET : constant      := 16#1#;
    LW_PRGNLCL_FALCON_IRQSSET_EXT_EXTIRQ5_SET : constant      := 16#1#;
    LW_PRGNLCL_FALCON_IRQSSET_EXT_EXTIRQ6_SET : constant      := 16#1#;
    LW_PRGNLCL_FALCON_IRQSSET_EXT_EXTIRQ7_SET : constant      := 16#1#;
    LW_PRGNLCL_FALCON_IRQSSET_EXT_EXTIRQ8_SET : constant      := 16#1#;

    type LW_PRGNLCL_FALCON_IRQSSET_Register is record
        Gptmr  : NvU1;
        Wdtmr  : NvU1;
        Mthd   : NvU1;
        Ctxsw  : NvU1;
        Halt   : NvU1;
        Exterr : NvU1;
        Swgen0 : NvU1;
        Swgen1 : NvU1;
        Ext    : NvU8;
        Dma    : NvU1;
        Sha    : NvU1;
        Memerr : NvU1;
        Icd    : NvU1;
        Iopmp  : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_IRQSSET_Register use record
        Gptmr  at 0 range  0 ..  0;
        Wdtmr  at 0 range  1 ..  1;
        Mthd   at 0 range  2 ..  2;
        Ctxsw  at 0 range  3 ..  3;
        Halt   at 0 range  4 ..  4;
        Exterr at 0 range  5 ..  5;
        Swgen0 at 0 range  6 ..  6;
        Swgen1 at 0 range  7 ..  7;
        Ext    at 0 range  8 .. 15;
        Dma    at 0 range 16 .. 16;
        Sha    at 0 range 17 .. 17;
        Memerr at 0 range 18 .. 18;
        Icd    at 0 range 22 .. 22;
        Iopmp  at 0 range 23 .. 23;
    end record;

    LW_PRGNLCL_FALCON_IRQSCLR_GPTMR_SET       : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQSCLR_WDTMR_SET       : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQSCLR_MTHD_SET        : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQSCLR_CTXSW_SET       : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQSCLR_HALT_SET        : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQSCLR_EXTERR_SET      : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQSCLR_SWGEN0_SET      : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQSCLR_SWGEN1_SET      : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQSCLR_EXT_EXTIRQ1_SET : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQSCLR_EXT_EXTIRQ2_SET : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQSCLR_EXT_EXTIRQ3_SET : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQSCLR_EXT_EXTIRQ4_SET : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQSCLR_EXT_EXTIRQ5_SET : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQSCLR_EXT_EXTIRQ6_SET : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQSCLR_EXT_EXTIRQ7_SET : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQSCLR_EXT_EXTIRQ8_SET : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQSCLR_DMA_SET         : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQSCLR_SHA_SET         : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQSCLR_MEMERR_SET      : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQSCLR_ICD_SET         : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQSCLR_IOPMP_SET       : constant NvU1 := 16#1#;

    type LW_PRGNLCL_FALCON_IRQSCLR_Register is record
        Gptmr       : NvU1;
        Wdtmr       : NvU1;
        Mthd        : NvU1;
        Ctxsw       : NvU1;
        Halt        : NvU1;
        Exterr      : NvU1;
        Swgen0      : NvU1;
        Swgen1      : NvU1;
        Ext_Extirq1 : NvU1;
        Ext_Extirq2 : NvU1;
        Ext_Extirq3 : NvU1;
        Ext_Extirq4 : NvU1;
        Ext_Extirq5 : NvU1;
        Ext_Extirq6 : NvU1;
        Ext_Extirq7 : NvU1;
        Ext_Extirq8 : NvU1;
        Dma         : NvU1;
        Sha         : NvU1;
        Memerr      : NvU1;
        Icd         : NvU1;
        Iopmp       : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_IRQSCLR_Register use record
        Gptmr       at 0 range  0 ..  0;
        Wdtmr       at 0 range  1 ..  1;
        Mthd        at 0 range  2 ..  2;
        Ctxsw       at 0 range  3 ..  3;
        Halt        at 0 range  4 ..  4;
        Exterr      at 0 range  5 ..  5;
        Swgen0      at 0 range  6 ..  6;
        Swgen1      at 0 range  7 ..  7;
        Ext_Extirq1 at 0 range  8 ..  8;
        Ext_Extirq2 at 0 range  9 ..  9;
        Ext_Extirq3 at 0 range 10 .. 10;
        Ext_Extirq4 at 0 range 11 .. 11;
        Ext_Extirq5 at 0 range 12 .. 12;
        Ext_Extirq6 at 0 range 13 .. 13;
        Ext_Extirq7 at 0 range 14 .. 14;
        Ext_Extirq8 at 0 range 15 .. 15;
        Dma         at 0 range 16 .. 16;
        Sha         at 0 range 17 .. 17;
        Memerr      at 0 range 18 .. 18;
        Icd         at 0 range 22 .. 22;
        Iopmp       at 0 range 23 .. 23;
    end record;

    type LW_PRGNLCL_FALCON_IRQSTAT_GPTMR_Field is (GPTMR_FALSE, GPTMR_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQSTAT_GPTMR_Field use (GPTMR_FALSE => 16#0#, GPTMR_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQSTAT_WDTMR_Field is (WDTMR_FALSE, WDTMR_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQSTAT_WDTMR_Field use (WDTMR_FALSE => 16#0#, WDTMR_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQSTAT_MTHD_Field is (MTHD_FALSE, MTHD_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQSTAT_MTHD_Field use (MTHD_FALSE => 16#0#, MTHD_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQSTAT_CTXSW_Field is (CTXSW_FALSE, CTXSW_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQSTAT_CTXSW_Field use (CTXSW_FALSE => 16#0#, CTXSW_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQSTAT_HALT_Field is (HALT_FALSE, HALT_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQSTAT_HALT_Field use (HALT_FALSE => 16#0#, HALT_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQSTAT_EXTERR_Field is (EXTERR_FALSE, EXTERR_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQSTAT_EXTERR_Field use (EXTERR_FALSE => 16#0#, EXTERR_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQSTAT_SWGEN0_Field is (SWGEN0_FALSE, SWGEN0_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQSTAT_SWGEN0_Field use (SWGEN0_FALSE => 16#0#, SWGEN0_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQSTAT_SWGEN1_Field is (SWGEN1_FALSE, SWGEN1_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQSTAT_SWGEN1_Field use (SWGEN1_FALSE => 16#0#, SWGEN1_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQSTAT_EXT_EXTIRQ1_Field is (EXTIRQ1_FALSE, EXTIRQ1_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQSTAT_EXT_EXTIRQ1_Field use (EXTIRQ1_FALSE => 16#0#, EXTIRQ1_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQSTAT_EXT_EXTIRQ2_Field is (EXTIRQ2_FALSE, EXTIRQ2_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQSTAT_EXT_EXTIRQ2_Field use (EXTIRQ2_FALSE => 16#0#, EXTIRQ2_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQSTAT_EXT_EXTIRQ3_Field is (EXTIRQ3_FALSE, EXTIRQ3_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQSTAT_EXT_EXTIRQ3_Field use (EXTIRQ3_FALSE => 16#0#, EXTIRQ3_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQSTAT_EXT_EXTIRQ4_Field is (EXTIRQ4_FALSE, EXTIRQ4_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQSTAT_EXT_EXTIRQ4_Field use (EXTIRQ4_FALSE => 16#0#, EXTIRQ4_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQSTAT_EXT_EXTIRQ5_Field is (EXTIRQ5_FALSE, EXTIRQ5_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQSTAT_EXT_EXTIRQ5_Field use (EXTIRQ5_FALSE => 16#0#, EXTIRQ5_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQSTAT_EXT_EXTIRQ6_Field is (EXTIRQ6_FALSE, EXTIRQ6_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQSTAT_EXT_EXTIRQ6_Field use (EXTIRQ6_FALSE => 16#0#, EXTIRQ6_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQSTAT_EXT_EXTIRQ7_Field is (EXTIRQ7_FALSE, EXTIRQ7_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQSTAT_EXT_EXTIRQ7_Field use (EXTIRQ7_FALSE => 16#0#, EXTIRQ7_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQSTAT_EXT_EXTIRQ8_Field is (EXTIRQ8_FALSE, EXTIRQ8_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQSTAT_EXT_EXTIRQ8_Field use (EXTIRQ8_FALSE => 16#0#, EXTIRQ8_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQSTAT_DMA_Field is (DMA_FALSE, DMA_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQSTAT_DMA_Field use (DMA_FALSE => 16#0#, DMA_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQSTAT_SHA_Field is (SHA_FALSE, SHA_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQSTAT_SHA_Field use (SHA_FALSE => 16#0#, SHA_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQSTAT_MEMERR_Field is (MEMERR_FALSE, MEMERR_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQSTAT_MEMERR_Field use (MEMERR_FALSE => 16#0#, MEMERR_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQSTAT_ICD_Field is (ICD_FALSE, ICD_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQSTAT_ICD_Field use (ICD_FALSE => 16#0#, ICD_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQSTAT_IOPMP_Field is (IOPMP_FALSE, IOPMP_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQSTAT_IOPMP_Field use (IOPMP_FALSE => 16#0#, IOPMP_TRUE => 16#1#);

    type LW_PRGNLCL_FALCON_IRQSTAT_Register is record
        Gptmr       : LW_PRGNLCL_FALCON_IRQSTAT_GPTMR_Field;
        Wdtmr       : LW_PRGNLCL_FALCON_IRQSTAT_WDTMR_Field;
        Mthd        : LW_PRGNLCL_FALCON_IRQSTAT_MTHD_Field;
        Ctxsw       : LW_PRGNLCL_FALCON_IRQSTAT_CTXSW_Field;
        Halt        : LW_PRGNLCL_FALCON_IRQSTAT_HALT_Field;
        Exterr      : LW_PRGNLCL_FALCON_IRQSTAT_EXTERR_Field;
        Swgen0      : LW_PRGNLCL_FALCON_IRQSTAT_SWGEN0_Field;
        Swgen1      : LW_PRGNLCL_FALCON_IRQSTAT_SWGEN1_Field;
        Ext_Extirq1 : LW_PRGNLCL_FALCON_IRQSTAT_EXT_EXTIRQ1_Field;
        Ext_Extirq2 : LW_PRGNLCL_FALCON_IRQSTAT_EXT_EXTIRQ2_Field;
        Ext_Extirq3 : LW_PRGNLCL_FALCON_IRQSTAT_EXT_EXTIRQ3_Field;
        Ext_Extirq4 : LW_PRGNLCL_FALCON_IRQSTAT_EXT_EXTIRQ4_Field;
        Ext_Extirq5 : LW_PRGNLCL_FALCON_IRQSTAT_EXT_EXTIRQ5_Field;
        Ext_Extirq6 : LW_PRGNLCL_FALCON_IRQSTAT_EXT_EXTIRQ6_Field;
        Ext_Extirq7 : LW_PRGNLCL_FALCON_IRQSTAT_EXT_EXTIRQ7_Field;
        Ext_Extirq8 : LW_PRGNLCL_FALCON_IRQSTAT_EXT_EXTIRQ8_Field;
        Dma         : LW_PRGNLCL_FALCON_IRQSTAT_DMA_Field;
        Sha         : LW_PRGNLCL_FALCON_IRQSTAT_SHA_Field;
        Memerr      : LW_PRGNLCL_FALCON_IRQSTAT_MEMERR_Field;
        Icd         : LW_PRGNLCL_FALCON_IRQSTAT_ICD_Field;
        Iopmp       : LW_PRGNLCL_FALCON_IRQSTAT_IOPMP_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_IRQSTAT_Register use record
        Gptmr       at 0 range  0 ..  0;
        Wdtmr       at 0 range  1 ..  1;
        Mthd        at 0 range  2 ..  2;
        Ctxsw       at 0 range  3 ..  3;
        Halt        at 0 range  4 ..  4;
        Exterr      at 0 range  5 ..  5;
        Swgen0      at 0 range  6 ..  6;
        Swgen1      at 0 range  7 ..  7;
        Ext_Extirq1 at 0 range  8 ..  8;
        Ext_Extirq2 at 0 range  9 ..  9;
        Ext_Extirq3 at 0 range 10 .. 10;
        Ext_Extirq4 at 0 range 11 .. 11;
        Ext_Extirq5 at 0 range 12 .. 12;
        Ext_Extirq6 at 0 range 13 .. 13;
        Ext_Extirq7 at 0 range 14 .. 14;
        Ext_Extirq8 at 0 range 15 .. 15;
        Dma         at 0 range 16 .. 16;
        Sha         at 0 range 17 .. 17;
        Memerr      at 0 range 18 .. 18;
        Icd         at 0 range 22 .. 22;
        Iopmp       at 0 range 23 .. 23;
    end record;

    LW_PRGNLCL_FALCON_IRQMODE_LVL_GPTMR_INIT        : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_GPTMR_FALSE       : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_GPTMR_TRUE        : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_WDTMR_INIT        : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_WDTMR_FALSE       : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_WDTMR_TRUE        : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_MTHD_INIT         : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_MTHD_FALSE        : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_MTHD_TRUE         : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_CTXSW_INIT        : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_CTXSW_FALSE       : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_CTXSW_TRUE        : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_HALT_INIT         : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_HALT_FALSE        : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_HALT_TRUE         : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_EXTERR_INIT       : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_EXTERR_FALSE      : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_EXTERR_TRUE       : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_SWGEN0_INIT       : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_SWGEN0_FALSE      : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_SWGEN0_TRUE       : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_SWGEN1_INIT       : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_SWGEN1_FALSE      : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_SWGEN1_TRUE       : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_EXT_INIT          : constant NvU8 := 16#fc#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_DMA_INIT          : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_DMA_TRUE          : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_DMA_FALSE         : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_SHA_INIT          : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_SHA_TRUE          : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_SHA_FALSE         : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_MEMERR_INIT       : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_MEMERR_TRUE       : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_MEMERR_FALSE      : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_ICD_INIT          : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_ICD_TRUE          : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_ICD_FALSE         : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_IOPMP_INIT        : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_IOPMP_TRUE        : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_IOPMP_FALSE       : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_EXT_EXTIRQ1_TRUE  : constant      := 16#1#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_EXT_EXTIRQ1_FALSE : constant      := 16#0#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_EXT_EXTIRQ2_TRUE  : constant      := 16#1#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_EXT_EXTIRQ2_FALSE : constant      := 16#0#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_EXT_EXTIRQ3_TRUE  : constant      := 16#1#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_EXT_EXTIRQ3_FALSE : constant      := 16#0#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_EXT_EXTIRQ4_TRUE  : constant      := 16#1#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_EXT_EXTIRQ4_FALSE : constant      := 16#0#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_EXT_EXTIRQ5_TRUE  : constant      := 16#1#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_EXT_EXTIRQ5_FALSE : constant      := 16#0#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_EXT_EXTIRQ6_TRUE  : constant      := 16#1#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_EXT_EXTIRQ6_FALSE : constant      := 16#0#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_EXT_EXTIRQ7_TRUE  : constant      := 16#1#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_EXT_EXTIRQ7_FALSE : constant      := 16#0#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_EXT_EXTIRQ8_TRUE  : constant      := 16#1#;
    LW_PRGNLCL_FALCON_IRQMODE_LVL_EXT_EXTIRQ8_FALSE : constant      := 16#0#;

    type LW_PRGNLCL_FALCON_IRQMODE_Register is record
        Lvl_Gptmr  : NvU1;
        Lvl_Wdtmr  : NvU1;
        Lvl_Mthd   : NvU1;
        Lvl_Ctxsw  : NvU1;
        Lvl_Halt   : NvU1;
        Lvl_Exterr : NvU1;
        Lvl_Swgen0 : NvU1;
        Lvl_Swgen1 : NvU1;
        Lvl_Ext    : NvU8;
        Lvl_Dma    : NvU1;
        Lvl_Sha    : NvU1;
        Lvl_Memerr : NvU1;
        Lvl_Icd    : NvU1;
        Lvl_Iopmp  : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_IRQMODE_Register use record
        Lvl_Gptmr  at 0 range  0 ..  0;
        Lvl_Wdtmr  at 0 range  1 ..  1;
        Lvl_Mthd   at 0 range  2 ..  2;
        Lvl_Ctxsw  at 0 range  3 ..  3;
        Lvl_Halt   at 0 range  4 ..  4;
        Lvl_Exterr at 0 range  5 ..  5;
        Lvl_Swgen0 at 0 range  6 ..  6;
        Lvl_Swgen1 at 0 range  7 ..  7;
        Lvl_Ext    at 0 range  8 .. 15;
        Lvl_Dma    at 0 range 16 .. 16;
        Lvl_Sha    at 0 range 17 .. 17;
        Lvl_Memerr at 0 range 18 .. 18;
        Lvl_Icd    at 0 range 22 .. 22;
        Lvl_Iopmp  at 0 range 23 .. 23;
    end record;

    type LW_PRGNLCL_FALCON_IRQSCMASK_GPTMR_Field is (GPTMR_DISABLE, GPTMR_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQSCMASK_GPTMR_Field use (GPTMR_DISABLE => 16#0#, GPTMR_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQSCMASK_WDTMR_Field is (WDTMR_DISABLE, WDTMR_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQSCMASK_WDTMR_Field use (WDTMR_DISABLE => 16#0#, WDTMR_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQSCMASK_MTHD_Field is (MTHD_DISABLE, MTHD_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQSCMASK_MTHD_Field use (MTHD_DISABLE => 16#0#, MTHD_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQSCMASK_CTXSW_Field is (CTXSW_DISABLE, CTXSW_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQSCMASK_CTXSW_Field use (CTXSW_DISABLE => 16#0#, CTXSW_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQSCMASK_HALT_Field is (HALT_DISABLE, HALT_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQSCMASK_HALT_Field use (HALT_DISABLE => 16#0#, HALT_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQSCMASK_EXTERR_Field is (EXTERR_DISABLE, EXTERR_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQSCMASK_EXTERR_Field use (EXTERR_DISABLE => 16#0#, EXTERR_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQSCMASK_SWGEN0_Field is (SWGEN0_DISABLE, SWGEN0_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQSCMASK_SWGEN0_Field use (SWGEN0_DISABLE => 16#0#, SWGEN0_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQSCMASK_SWGEN1_Field is (SWGEN1_DISABLE, SWGEN1_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQSCMASK_SWGEN1_Field use (SWGEN1_DISABLE => 16#0#, SWGEN1_ENABLE => 16#1#);
    LW_PRGNLCL_FALCON_IRQSCMASK_EXT_ENABLE  : constant NvU8 := 16#ff#;
    LW_PRGNLCL_FALCON_IRQSCMASK_EXT_DISABLE : constant NvU8 := 16#0#;
    type LW_PRGNLCL_FALCON_IRQSCMASK_DMA_Field is (DMA_DISABLE, DMA_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQSCMASK_DMA_Field use (DMA_DISABLE => 16#0#, DMA_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQSCMASK_SHA_Field is (SHA_DISABLE, SHA_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQSCMASK_SHA_Field use (SHA_DISABLE => 16#0#, SHA_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQSCMASK_MEMERR_Field is (MEMERR_DISABLE, MEMERR_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQSCMASK_MEMERR_Field use (MEMERR_DISABLE => 16#0#, MEMERR_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQSCMASK_ICD_Field is (ICD_DISABLE, ICD_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQSCMASK_ICD_Field use (ICD_DISABLE => 16#0#, ICD_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQSCMASK_IOPMP_Field is (IOPMP_DISABLE, IOPMP_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQSCMASK_IOPMP_Field use (IOPMP_DISABLE => 16#0#, IOPMP_ENABLE => 16#1#);
    LW_PRGNLCL_FALCON_IRQSCMASK_EXT_EXTIRQ1_ENABLE  : constant := 16#1#;
    LW_PRGNLCL_FALCON_IRQSCMASK_EXT_EXTIRQ1_DISABLE : constant := 16#0#;
    LW_PRGNLCL_FALCON_IRQSCMASK_EXT_EXTIRQ2_ENABLE  : constant := 16#1#;
    LW_PRGNLCL_FALCON_IRQSCMASK_EXT_EXTIRQ2_DISABLE : constant := 16#0#;
    LW_PRGNLCL_FALCON_IRQSCMASK_EXT_EXTIRQ3_ENABLE  : constant := 16#1#;
    LW_PRGNLCL_FALCON_IRQSCMASK_EXT_EXTIRQ3_DISABLE : constant := 16#0#;
    LW_PRGNLCL_FALCON_IRQSCMASK_EXT_EXTIRQ4_ENABLE  : constant := 16#1#;
    LW_PRGNLCL_FALCON_IRQSCMASK_EXT_EXTIRQ4_DISABLE : constant := 16#0#;
    LW_PRGNLCL_FALCON_IRQSCMASK_EXT_EXTIRQ5_ENABLE  : constant := 16#1#;
    LW_PRGNLCL_FALCON_IRQSCMASK_EXT_EXTIRQ5_DISABLE : constant := 16#0#;
    LW_PRGNLCL_FALCON_IRQSCMASK_EXT_EXTIRQ6_ENABLE  : constant := 16#1#;
    LW_PRGNLCL_FALCON_IRQSCMASK_EXT_EXTIRQ6_DISABLE : constant := 16#0#;
    LW_PRGNLCL_FALCON_IRQSCMASK_EXT_EXTIRQ7_ENABLE  : constant := 16#1#;
    LW_PRGNLCL_FALCON_IRQSCMASK_EXT_EXTIRQ7_DISABLE : constant := 16#0#;
    LW_PRGNLCL_FALCON_IRQSCMASK_EXT_EXTIRQ8_ENABLE  : constant := 16#1#;
    LW_PRGNLCL_FALCON_IRQSCMASK_EXT_EXTIRQ8_DISABLE : constant := 16#0#;

    type LW_PRGNLCL_FALCON_IRQSCMASK_Register is record
        Gptmr  : LW_PRGNLCL_FALCON_IRQSCMASK_GPTMR_Field;
        Wdtmr  : LW_PRGNLCL_FALCON_IRQSCMASK_WDTMR_Field;
        Mthd   : LW_PRGNLCL_FALCON_IRQSCMASK_MTHD_Field;
        Ctxsw  : LW_PRGNLCL_FALCON_IRQSCMASK_CTXSW_Field;
        Halt   : LW_PRGNLCL_FALCON_IRQSCMASK_HALT_Field;
        Exterr : LW_PRGNLCL_FALCON_IRQSCMASK_EXTERR_Field;
        Swgen0 : LW_PRGNLCL_FALCON_IRQSCMASK_SWGEN0_Field;
        Swgen1 : LW_PRGNLCL_FALCON_IRQSCMASK_SWGEN1_Field;
        Ext    : NvU8;
        Dma    : LW_PRGNLCL_FALCON_IRQSCMASK_DMA_Field;
        Sha    : LW_PRGNLCL_FALCON_IRQSCMASK_SHA_Field;
        Memerr : LW_PRGNLCL_FALCON_IRQSCMASK_MEMERR_Field;
        Icd    : LW_PRGNLCL_FALCON_IRQSCMASK_ICD_Field;
        Iopmp  : LW_PRGNLCL_FALCON_IRQSCMASK_IOPMP_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_IRQSCMASK_Register use record
        Gptmr  at 0 range  0 ..  0;
        Wdtmr  at 0 range  1 ..  1;
        Mthd   at 0 range  2 ..  2;
        Ctxsw  at 0 range  3 ..  3;
        Halt   at 0 range  4 ..  4;
        Exterr at 0 range  5 ..  5;
        Swgen0 at 0 range  6 ..  6;
        Swgen1 at 0 range  7 ..  7;
        Ext    at 0 range  8 .. 15;
        Dma    at 0 range 16 .. 16;
        Sha    at 0 range 17 .. 17;
        Memerr at 0 range 18 .. 18;
        Icd    at 0 range 22 .. 22;
        Iopmp  at 0 range 23 .. 23;
    end record;

    LW_PRGNLCL_FALCON_IRQMSET_GPTMR_SET       : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMSET_WDTMR_SET       : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMSET_MTHD_SET        : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMSET_CTXSW_SET       : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMSET_HALT_SET        : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMSET_EXTERR_SET      : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMSET_SWGEN0_SET      : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMSET_SWGEN1_SET      : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMSET_EXT_EXTIRQ1_SET : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMSET_EXT_EXTIRQ2_SET : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMSET_EXT_EXTIRQ3_SET : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMSET_EXT_EXTIRQ4_SET : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMSET_EXT_EXTIRQ5_SET : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMSET_EXT_EXTIRQ6_SET : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMSET_EXT_EXTIRQ7_SET : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMSET_EXT_EXTIRQ8_SET : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMSET_DMA_SET         : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMSET_SHA_SET         : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMSET_MEMERR_SET      : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMSET_ICD_SET         : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMSET_IOPMP_SET       : constant NvU1 := 16#1#;

    type LW_PRGNLCL_FALCON_IRQMSET_Register is record
        Gptmr       : NvU1;
        Wdtmr       : NvU1;
        Mthd        : NvU1;
        Ctxsw       : NvU1;
        Halt        : NvU1;
        Exterr      : NvU1;
        Swgen0      : NvU1;
        Swgen1      : NvU1;
        Ext_Extirq1 : NvU1;
        Ext_Extirq2 : NvU1;
        Ext_Extirq3 : NvU1;
        Ext_Extirq4 : NvU1;
        Ext_Extirq5 : NvU1;
        Ext_Extirq6 : NvU1;
        Ext_Extirq7 : NvU1;
        Ext_Extirq8 : NvU1;
        Dma         : NvU1;
        Sha         : NvU1;
        Memerr      : NvU1;
        Icd         : NvU1;
        Iopmp       : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_IRQMSET_Register use record
        Gptmr       at 0 range  0 ..  0;
        Wdtmr       at 0 range  1 ..  1;
        Mthd        at 0 range  2 ..  2;
        Ctxsw       at 0 range  3 ..  3;
        Halt        at 0 range  4 ..  4;
        Exterr      at 0 range  5 ..  5;
        Swgen0      at 0 range  6 ..  6;
        Swgen1      at 0 range  7 ..  7;
        Ext_Extirq1 at 0 range  8 ..  8;
        Ext_Extirq2 at 0 range  9 ..  9;
        Ext_Extirq3 at 0 range 10 .. 10;
        Ext_Extirq4 at 0 range 11 .. 11;
        Ext_Extirq5 at 0 range 12 .. 12;
        Ext_Extirq6 at 0 range 13 .. 13;
        Ext_Extirq7 at 0 range 14 .. 14;
        Ext_Extirq8 at 0 range 15 .. 15;
        Dma         at 0 range 16 .. 16;
        Sha         at 0 range 17 .. 17;
        Memerr      at 0 range 18 .. 18;
        Icd         at 0 range 22 .. 22;
        Iopmp       at 0 range 23 .. 23;
    end record;

    LW_PRGNLCL_FALCON_IRQMCLR_GPTMR_SET       : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMCLR_WDTMR_SET       : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMCLR_MTHD_SET        : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMCLR_CTXSW_SET       : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMCLR_HALT_SET        : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMCLR_EXTERR_SET      : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMCLR_SWGEN0_SET      : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMCLR_SWGEN1_SET      : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMCLR_EXT_EXTIRQ1_SET : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMCLR_EXT_EXTIRQ2_SET : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMCLR_EXT_EXTIRQ3_SET : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMCLR_EXT_EXTIRQ4_SET : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMCLR_EXT_EXTIRQ5_SET : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMCLR_EXT_EXTIRQ6_SET : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMCLR_EXT_EXTIRQ7_SET : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMCLR_EXT_EXTIRQ8_SET : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMCLR_DMA_SET         : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMCLR_SHA_SET         : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMCLR_MEMERR_SET      : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMCLR_ICD_SET         : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQMCLR_IOPMP_SET       : constant NvU1 := 16#1#;

    type LW_PRGNLCL_FALCON_IRQMCLR_Register is record
        Gptmr       : NvU1;
        Wdtmr       : NvU1;
        Mthd        : NvU1;
        Ctxsw       : NvU1;
        Halt        : NvU1;
        Exterr      : NvU1;
        Swgen0      : NvU1;
        Swgen1      : NvU1;
        Ext_Extirq1 : NvU1;
        Ext_Extirq2 : NvU1;
        Ext_Extirq3 : NvU1;
        Ext_Extirq4 : NvU1;
        Ext_Extirq5 : NvU1;
        Ext_Extirq6 : NvU1;
        Ext_Extirq7 : NvU1;
        Ext_Extirq8 : NvU1;
        Dma         : NvU1;
        Sha         : NvU1;
        Memerr      : NvU1;
        Icd         : NvU1;
        Iopmp       : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_IRQMCLR_Register use record
        Gptmr       at 0 range  0 ..  0;
        Wdtmr       at 0 range  1 ..  1;
        Mthd        at 0 range  2 ..  2;
        Ctxsw       at 0 range  3 ..  3;
        Halt        at 0 range  4 ..  4;
        Exterr      at 0 range  5 ..  5;
        Swgen0      at 0 range  6 ..  6;
        Swgen1      at 0 range  7 ..  7;
        Ext_Extirq1 at 0 range  8 ..  8;
        Ext_Extirq2 at 0 range  9 ..  9;
        Ext_Extirq3 at 0 range 10 .. 10;
        Ext_Extirq4 at 0 range 11 .. 11;
        Ext_Extirq5 at 0 range 12 .. 12;
        Ext_Extirq6 at 0 range 13 .. 13;
        Ext_Extirq7 at 0 range 14 .. 14;
        Ext_Extirq8 at 0 range 15 .. 15;
        Dma         at 0 range 16 .. 16;
        Sha         at 0 range 17 .. 17;
        Memerr      at 0 range 18 .. 18;
        Icd         at 0 range 22 .. 22;
        Iopmp       at 0 range 23 .. 23;
    end record;

    type LW_PRGNLCL_FALCON_IRQMASK_GPTMR_Field is (GPTMR_DISABLE, GPTMR_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQMASK_GPTMR_Field use (GPTMR_DISABLE => 16#0#, GPTMR_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQMASK_WDTMR_Field is (WDTMR_DISABLE, WDTMR_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQMASK_WDTMR_Field use (WDTMR_DISABLE => 16#0#, WDTMR_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQMASK_MTHD_Field is (MTHD_DISABLE, MTHD_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQMASK_MTHD_Field use (MTHD_DISABLE => 16#0#, MTHD_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQMASK_CTXSW_Field is (CTXSW_DISABLE, CTXSW_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQMASK_CTXSW_Field use (CTXSW_DISABLE => 16#0#, CTXSW_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQMASK_HALT_Field is (HALT_DISABLE, HALT_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQMASK_HALT_Field use (HALT_DISABLE => 16#0#, HALT_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQMASK_EXTERR_Field is (EXTERR_DISABLE, EXTERR_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQMASK_EXTERR_Field use (EXTERR_DISABLE => 16#0#, EXTERR_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQMASK_SWGEN0_Field is (SWGEN0_DISABLE, SWGEN0_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQMASK_SWGEN0_Field use (SWGEN0_DISABLE => 16#0#, SWGEN0_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQMASK_SWGEN1_Field is (SWGEN1_DISABLE, SWGEN1_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQMASK_SWGEN1_Field use (SWGEN1_DISABLE => 16#0#, SWGEN1_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQMASK_EXT_EXTIRQ1_Field is (EXTIRQ1_DISABLE, EXTIRQ1_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQMASK_EXT_EXTIRQ1_Field use (EXTIRQ1_DISABLE => 16#0#, EXTIRQ1_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQMASK_EXT_EXTIRQ2_Field is (EXTIRQ2_DISABLE, EXTIRQ2_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQMASK_EXT_EXTIRQ2_Field use (EXTIRQ2_DISABLE => 16#0#, EXTIRQ2_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQMASK_EXT_EXTIRQ3_Field is (EXTIRQ3_DISABLE, EXTIRQ3_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQMASK_EXT_EXTIRQ3_Field use (EXTIRQ3_DISABLE => 16#0#, EXTIRQ3_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQMASK_EXT_EXTIRQ4_Field is (EXTIRQ4_DISABLE, EXTIRQ4_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQMASK_EXT_EXTIRQ4_Field use (EXTIRQ4_DISABLE => 16#0#, EXTIRQ4_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQMASK_EXT_EXTIRQ5_Field is (EXTIRQ5_DISABLE, EXTIRQ5_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQMASK_EXT_EXTIRQ5_Field use (EXTIRQ5_DISABLE => 16#0#, EXTIRQ5_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQMASK_EXT_EXTIRQ6_Field is (EXTIRQ6_DISABLE, EXTIRQ6_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQMASK_EXT_EXTIRQ6_Field use (EXTIRQ6_DISABLE => 16#0#, EXTIRQ6_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQMASK_EXT_EXTIRQ7_Field is (EXTIRQ7_DISABLE, EXTIRQ7_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQMASK_EXT_EXTIRQ7_Field use (EXTIRQ7_DISABLE => 16#0#, EXTIRQ7_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQMASK_EXT_EXTIRQ8_Field is (EXTIRQ8_DISABLE, EXTIRQ8_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQMASK_EXT_EXTIRQ8_Field use (EXTIRQ8_DISABLE => 16#0#, EXTIRQ8_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQMASK_DMA_Field is (DMA_DISABLE, DMA_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQMASK_DMA_Field use (DMA_DISABLE => 16#0#, DMA_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQMASK_SHA_Field is (SHA_DISABLE, SHA_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQMASK_SHA_Field use (SHA_DISABLE => 16#0#, SHA_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQMASK_MEMERR_Field is (MEMERR_DISABLE, MEMERR_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQMASK_MEMERR_Field use (MEMERR_DISABLE => 16#0#, MEMERR_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQMASK_ICD_Field is (ICD_DISABLE, ICD_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQMASK_ICD_Field use (ICD_DISABLE => 16#0#, ICD_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_IRQMASK_IOPMP_Field is (IOPMP_DISABLE, IOPMP_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQMASK_IOPMP_Field use (IOPMP_DISABLE => 16#0#, IOPMP_ENABLE => 16#1#);

    type LW_PRGNLCL_FALCON_IRQMASK_Register is record
        Gptmr       : LW_PRGNLCL_FALCON_IRQMASK_GPTMR_Field;
        Wdtmr       : LW_PRGNLCL_FALCON_IRQMASK_WDTMR_Field;
        Mthd        : LW_PRGNLCL_FALCON_IRQMASK_MTHD_Field;
        Ctxsw       : LW_PRGNLCL_FALCON_IRQMASK_CTXSW_Field;
        Halt        : LW_PRGNLCL_FALCON_IRQMASK_HALT_Field;
        Exterr      : LW_PRGNLCL_FALCON_IRQMASK_EXTERR_Field;
        Swgen0      : LW_PRGNLCL_FALCON_IRQMASK_SWGEN0_Field;
        Swgen1      : LW_PRGNLCL_FALCON_IRQMASK_SWGEN1_Field;
        Ext_Extirq1 : LW_PRGNLCL_FALCON_IRQMASK_EXT_EXTIRQ1_Field;
        Ext_Extirq2 : LW_PRGNLCL_FALCON_IRQMASK_EXT_EXTIRQ2_Field;
        Ext_Extirq3 : LW_PRGNLCL_FALCON_IRQMASK_EXT_EXTIRQ3_Field;
        Ext_Extirq4 : LW_PRGNLCL_FALCON_IRQMASK_EXT_EXTIRQ4_Field;
        Ext_Extirq5 : LW_PRGNLCL_FALCON_IRQMASK_EXT_EXTIRQ5_Field;
        Ext_Extirq6 : LW_PRGNLCL_FALCON_IRQMASK_EXT_EXTIRQ6_Field;
        Ext_Extirq7 : LW_PRGNLCL_FALCON_IRQMASK_EXT_EXTIRQ7_Field;
        Ext_Extirq8 : LW_PRGNLCL_FALCON_IRQMASK_EXT_EXTIRQ8_Field;
        Dma         : LW_PRGNLCL_FALCON_IRQMASK_DMA_Field;
        Sha         : LW_PRGNLCL_FALCON_IRQMASK_SHA_Field;
        Memerr      : LW_PRGNLCL_FALCON_IRQMASK_MEMERR_Field;
        Icd         : LW_PRGNLCL_FALCON_IRQMASK_ICD_Field;
        Iopmp       : LW_PRGNLCL_FALCON_IRQMASK_IOPMP_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_IRQMASK_Register use record
        Gptmr       at 0 range  0 ..  0;
        Wdtmr       at 0 range  1 ..  1;
        Mthd        at 0 range  2 ..  2;
        Ctxsw       at 0 range  3 ..  3;
        Halt        at 0 range  4 ..  4;
        Exterr      at 0 range  5 ..  5;
        Swgen0      at 0 range  6 ..  6;
        Swgen1      at 0 range  7 ..  7;
        Ext_Extirq1 at 0 range  8 ..  8;
        Ext_Extirq2 at 0 range  9 ..  9;
        Ext_Extirq3 at 0 range 10 .. 10;
        Ext_Extirq4 at 0 range 11 .. 11;
        Ext_Extirq5 at 0 range 12 .. 12;
        Ext_Extirq6 at 0 range 13 .. 13;
        Ext_Extirq7 at 0 range 14 .. 14;
        Ext_Extirq8 at 0 range 15 .. 15;
        Dma         at 0 range 16 .. 16;
        Sha         at 0 range 17 .. 17;
        Memerr      at 0 range 18 .. 18;
        Icd         at 0 range 22 .. 22;
        Iopmp       at 0 range 23 .. 23;
    end record;

    LW_PRGNLCL_FALCON_IRQDEST_HOST_GPTMR_INIT    : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_HOST_GPTMR_FALCON  : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_HOST_GPTMR_HOST    : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST_HOST_WDTMR_INIT    : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_HOST_WDTMR_FALCON  : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_HOST_WDTMR_HOST    : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST_HOST_MTHD_INIT     : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_HOST_MTHD_FALCON   : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_HOST_MTHD_HOST     : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST_HOST_CTXSW_INIT    : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_HOST_CTXSW_FALCON  : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_HOST_CTXSW_HOST    : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST_HOST_HALT_INIT     : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_HOST_HALT_FALCON   : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_HOST_HALT_HOST     : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST_HOST_EXTERR_INIT   : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_HOST_EXTERR_FALCON : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_HOST_EXTERR_HOST   : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST_HOST_SWGEN0_INIT   : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_HOST_SWGEN0_FALCON : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_HOST_SWGEN0_HOST   : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST_HOST_SWGEN1_INIT   : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_HOST_SWGEN1_FALCON : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_HOST_SWGEN1_HOST   : constant NvU1 := 16#1#;
    type LW_PRGNLCL_FALCON_IRQDEST_HOST_EXT_EXTIRQ1_Field is (EXTIRQ1_FALCON, EXTIRQ1_HOST) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQDEST_HOST_EXT_EXTIRQ1_Field use (EXTIRQ1_FALCON => 16#0#, EXTIRQ1_HOST => 16#1#);
    type LW_PRGNLCL_FALCON_IRQDEST_HOST_EXT_EXTIRQ2_Field is (EXTIRQ2_FALCON, EXTIRQ2_HOST) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQDEST_HOST_EXT_EXTIRQ2_Field use (EXTIRQ2_FALCON => 16#0#, EXTIRQ2_HOST => 16#1#);
    type LW_PRGNLCL_FALCON_IRQDEST_HOST_EXT_EXTIRQ3_Field is (EXTIRQ3_FALCON, EXTIRQ3_HOST) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQDEST_HOST_EXT_EXTIRQ3_Field use (EXTIRQ3_FALCON => 16#0#, EXTIRQ3_HOST => 16#1#);
    type LW_PRGNLCL_FALCON_IRQDEST_HOST_EXT_EXTIRQ4_Field is (EXTIRQ4_FALCON, EXTIRQ4_HOST) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQDEST_HOST_EXT_EXTIRQ4_Field use (EXTIRQ4_FALCON => 16#0#, EXTIRQ4_HOST => 16#1#);
    type LW_PRGNLCL_FALCON_IRQDEST_HOST_EXT_EXTIRQ5_Field is (EXTIRQ5_FALCON, EXTIRQ5_HOST) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQDEST_HOST_EXT_EXTIRQ5_Field use (EXTIRQ5_FALCON => 16#0#, EXTIRQ5_HOST => 16#1#);
    type LW_PRGNLCL_FALCON_IRQDEST_HOST_EXT_EXTIRQ6_Field is (EXTIRQ6_FALCON, EXTIRQ6_HOST) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQDEST_HOST_EXT_EXTIRQ6_Field use (EXTIRQ6_FALCON => 16#0#, EXTIRQ6_HOST => 16#1#);
    type LW_PRGNLCL_FALCON_IRQDEST_HOST_EXT_EXTIRQ7_Field is (EXTIRQ7_FALCON, EXTIRQ7_HOST) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQDEST_HOST_EXT_EXTIRQ7_Field use (EXTIRQ7_FALCON => 16#0#, EXTIRQ7_HOST => 16#1#);
    type LW_PRGNLCL_FALCON_IRQDEST_HOST_EXT_EXTIRQ8_Field is (EXTIRQ8_FALCON, EXTIRQ8_HOST) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IRQDEST_HOST_EXT_EXTIRQ8_Field use (EXTIRQ8_FALCON => 16#0#, EXTIRQ8_HOST => 16#1#);
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_GPTMR_INIT                : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_GPTMR_FALCON_IRQ0         : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_GPTMR_FALCON_IRQ1         : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_GPTMR_HOST_NORMAL         : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_GPTMR_HOST_NONSTALL       : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_WDTMR_INIT                : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_WDTMR_FALCON_IRQ0         : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_WDTMR_FALCON_IRQ1         : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_WDTMR_HOST_NORMAL         : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_WDTMR_HOST_NONSTALL       : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_MTHD_INIT                 : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_MTHD_FALCON_IRQ0          : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_MTHD_FALCON_IRQ1          : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_MTHD_HOST_NORMAL          : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_MTHD_HOST_NONSTALL        : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_CTXSW_INIT                : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_CTXSW_FALCON_IRQ0         : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_CTXSW_FALCON_IRQ1         : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_CTXSW_HOST_NORMAL         : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_CTXSW_HOST_NONSTALL       : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_HALT_INIT                 : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_HALT_FALCON_IRQ0          : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_HALT_FALCON_IRQ1          : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_HALT_HOST_NORMAL          : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_HALT_HOST_NONSTALL        : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_EXTERR_INIT               : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_EXTERR_FALCON_IRQ0        : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_EXTERR_FALCON_IRQ1        : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_EXTERR_HOST_NORMAL        : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_EXTERR_HOST_NONSTALL      : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_SWGEN0_INIT               : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_SWGEN0_FALCON_IRQ0        : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_SWGEN0_FALCON_IRQ1        : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_SWGEN0_HOST_NORMAL        : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_SWGEN0_HOST_NONSTALL      : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_SWGEN1_INIT               : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_SWGEN1_FALCON_IRQ0        : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_SWGEN1_FALCON_IRQ1        : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_SWGEN1_HOST_NORMAL        : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_SWGEN1_HOST_NONSTALL      : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_EXT_EXTIRQ1_INIT          : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_EXT_EXTIRQ1_FALCON_IRQ0   : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_EXT_EXTIRQ1_FALCON_IRQ1   : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_EXT_EXTIRQ1_HOST_NORMAL   : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_EXT_EXTIRQ1_HOST_NONSTALL : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_EXT_EXTIRQ2_INIT          : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_EXT_EXTIRQ2_FALCON_IRQ0   : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_EXT_EXTIRQ2_FALCON_IRQ1   : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_EXT_EXTIRQ2_HOST_NORMAL   : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_EXT_EXTIRQ2_HOST_NONSTALL : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_EXT_EXTIRQ3_INIT          : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_EXT_EXTIRQ3_FALCON_IRQ0   : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_EXT_EXTIRQ3_FALCON_IRQ1   : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_EXT_EXTIRQ3_HOST_NORMAL   : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_EXT_EXTIRQ3_HOST_NONSTALL : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_EXT_EXTIRQ4_INIT          : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_EXT_EXTIRQ4_FALCON_IRQ0   : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_EXT_EXTIRQ4_FALCON_IRQ1   : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_EXT_EXTIRQ4_HOST_NORMAL   : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_EXT_EXTIRQ4_HOST_NONSTALL : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_EXT_EXTIRQ5_INIT          : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_EXT_EXTIRQ5_FALCON_IRQ0   : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_EXT_EXTIRQ5_FALCON_IRQ1   : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_EXT_EXTIRQ5_HOST_NORMAL   : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_EXT_EXTIRQ5_HOST_NONSTALL : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_EXT_EXTIRQ6_INIT          : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_EXT_EXTIRQ6_FALCON_IRQ0   : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_EXT_EXTIRQ6_FALCON_IRQ1   : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_EXT_EXTIRQ6_HOST_NORMAL   : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_EXT_EXTIRQ6_HOST_NONSTALL : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_EXT_EXTIRQ7_INIT          : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_EXT_EXTIRQ7_FALCON_IRQ0   : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_EXT_EXTIRQ7_FALCON_IRQ1   : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_EXT_EXTIRQ7_HOST_NORMAL   : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_EXT_EXTIRQ7_HOST_NONSTALL : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_EXT_EXTIRQ8_INIT          : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_EXT_EXTIRQ8_FALCON_IRQ0   : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_EXT_EXTIRQ8_FALCON_IRQ1   : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_EXT_EXTIRQ8_HOST_NORMAL   : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST_TARGET_EXT_EXTIRQ8_HOST_NONSTALL : constant NvU1 := 16#1#;

    type LW_PRGNLCL_FALCON_IRQDEST_Register is record
        Host_Gptmr         : NvU1;
        Host_Wdtmr         : NvU1;
        Host_Mthd          : NvU1;
        Host_Ctxsw         : NvU1;
        Host_Halt          : NvU1;
        Host_Exterr        : NvU1;
        Host_Swgen0        : NvU1;
        Host_Swgen1        : NvU1;
        Host_Ext_Extirq1   : LW_PRGNLCL_FALCON_IRQDEST_HOST_EXT_EXTIRQ1_Field;
        Host_Ext_Extirq2   : LW_PRGNLCL_FALCON_IRQDEST_HOST_EXT_EXTIRQ2_Field;
        Host_Ext_Extirq3   : LW_PRGNLCL_FALCON_IRQDEST_HOST_EXT_EXTIRQ3_Field;
        Host_Ext_Extirq4   : LW_PRGNLCL_FALCON_IRQDEST_HOST_EXT_EXTIRQ4_Field;
        Host_Ext_Extirq5   : LW_PRGNLCL_FALCON_IRQDEST_HOST_EXT_EXTIRQ5_Field;
        Host_Ext_Extirq6   : LW_PRGNLCL_FALCON_IRQDEST_HOST_EXT_EXTIRQ6_Field;
        Host_Ext_Extirq7   : LW_PRGNLCL_FALCON_IRQDEST_HOST_EXT_EXTIRQ7_Field;
        Host_Ext_Extirq8   : LW_PRGNLCL_FALCON_IRQDEST_HOST_EXT_EXTIRQ8_Field;
        Target_Gptmr       : NvU1;
        Target_Wdtmr       : NvU1;
        Target_Mthd        : NvU1;
        Target_Ctxsw       : NvU1;
        Target_Halt        : NvU1;
        Target_Exterr      : NvU1;
        Target_Swgen0      : NvU1;
        Target_Swgen1      : NvU1;
        Target_Ext_Extirq1 : NvU1;
        Target_Ext_Extirq2 : NvU1;
        Target_Ext_Extirq3 : NvU1;
        Target_Ext_Extirq4 : NvU1;
        Target_Ext_Extirq5 : NvU1;
        Target_Ext_Extirq6 : NvU1;
        Target_Ext_Extirq7 : NvU1;
        Target_Ext_Extirq8 : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_IRQDEST_Register use record
        Host_Gptmr         at 0 range  0 ..  0;
        Host_Wdtmr         at 0 range  1 ..  1;
        Host_Mthd          at 0 range  2 ..  2;
        Host_Ctxsw         at 0 range  3 ..  3;
        Host_Halt          at 0 range  4 ..  4;
        Host_Exterr        at 0 range  5 ..  5;
        Host_Swgen0        at 0 range  6 ..  6;
        Host_Swgen1        at 0 range  7 ..  7;
        Host_Ext_Extirq1   at 0 range  8 ..  8;
        Host_Ext_Extirq2   at 0 range  9 ..  9;
        Host_Ext_Extirq3   at 0 range 10 .. 10;
        Host_Ext_Extirq4   at 0 range 11 .. 11;
        Host_Ext_Extirq5   at 0 range 12 .. 12;
        Host_Ext_Extirq6   at 0 range 13 .. 13;
        Host_Ext_Extirq7   at 0 range 14 .. 14;
        Host_Ext_Extirq8   at 0 range 15 .. 15;
        Target_Gptmr       at 0 range 16 .. 16;
        Target_Wdtmr       at 0 range 17 .. 17;
        Target_Mthd        at 0 range 18 .. 18;
        Target_Ctxsw       at 0 range 19 .. 19;
        Target_Halt        at 0 range 20 .. 20;
        Target_Exterr      at 0 range 21 .. 21;
        Target_Swgen0      at 0 range 22 .. 22;
        Target_Swgen1      at 0 range 23 .. 23;
        Target_Ext_Extirq1 at 0 range 24 .. 24;
        Target_Ext_Extirq2 at 0 range 25 .. 25;
        Target_Ext_Extirq3 at 0 range 26 .. 26;
        Target_Ext_Extirq4 at 0 range 27 .. 27;
        Target_Ext_Extirq5 at 0 range 28 .. 28;
        Target_Ext_Extirq6 at 0 range 29 .. 29;
        Target_Ext_Extirq7 at 0 range 30 .. 30;
        Target_Ext_Extirq8 at 0 range 31 .. 31;
    end record;

    LW_PRGNLCL_FALCON_IRQDEST2_HOST_DMA_INIT               : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST2_HOST_DMA_FALCON             : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST2_HOST_DMA_HOST               : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST2_HOST_SHA_INIT               : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST2_HOST_SHA_FALCON             : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST2_HOST_SHA_HOST               : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST2_HOST_MEMERR_INIT            : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST2_HOST_MEMERR_FALCON          : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST2_HOST_MEMERR_HOST            : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST2_HOST_ICD_INIT               : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST2_HOST_ICD_FALCON             : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST2_HOST_ICD_HOST               : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST2_HOST_IOPMP_INIT             : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST2_HOST_IOPMP_FALCON           : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST2_HOST_IOPMP_HOST             : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST2_TARGET_DMA_INIT             : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST2_TARGET_DMA_FALCON_IRQ0      : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST2_TARGET_DMA_FALCON_IRQ1      : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST2_TARGET_DMA_HOST_NORMAL      : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST2_TARGET_DMA_HOST_NONSTALL    : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST2_TARGET_SHA_INIT             : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST2_TARGET_SHA_FALCON_IRQ0      : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST2_TARGET_SHA_FALCON_IRQ1      : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST2_TARGET_SHA_HOST_NORMAL      : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST2_TARGET_SHA_HOST_NONSTALL    : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST2_TARGET_MEMERR_INIT          : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST2_TARGET_MEMERR_FALCON_IRQ0   : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST2_TARGET_MEMERR_FALCON_IRQ1   : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST2_TARGET_MEMERR_HOST_NORMAL   : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST2_TARGET_MEMERR_HOST_NONSTALL : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST2_TARGET_ICD_INIT             : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST2_TARGET_ICD_FALCON_IRQ0      : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST2_TARGET_ICD_FALCON_IRQ1      : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST2_TARGET_ICD_HOST_NORMAL      : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST2_TARGET_ICD_HOST_NONSTALL    : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST2_TARGET_IOPMP_INIT           : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST2_TARGET_IOPMP_FALCON_IRQ0    : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST2_TARGET_IOPMP_FALCON_IRQ1    : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_IRQDEST2_TARGET_IOPMP_HOST_NORMAL    : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_IRQDEST2_TARGET_IOPMP_HOST_NONSTALL  : constant NvU1 := 16#1#;

    type LW_PRGNLCL_FALCON_IRQDEST2_Register is record
        Host_Dma      : NvU1;
        Host_Sha      : NvU1;
        Host_Memerr   : NvU1;
        Host_Icd      : NvU1;
        Host_Iopmp    : NvU1;
        Target_Dma    : NvU1;
        Target_Sha    : NvU1;
        Target_Memerr : NvU1;
        Target_Icd    : NvU1;
        Target_Iopmp  : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_IRQDEST2_Register use record
        Host_Dma      at 0 range  0 ..  0;
        Host_Sha      at 0 range  1 ..  1;
        Host_Memerr   at 0 range  2 ..  2;
        Host_Icd      at 0 range  6 ..  6;
        Host_Iopmp    at 0 range  7 ..  7;
        Target_Dma    at 0 range 16 .. 16;
        Target_Sha    at 0 range 17 .. 17;
        Target_Memerr at 0 range 18 .. 18;
        Target_Icd    at 0 range 22 .. 22;
        Target_Iopmp  at 0 range 23 .. 23;
    end record;

    LW_PRGNLCL_FALCON_GPTMRINT_VAL_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_FALCON_GPTMRINT_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_GPTMRINT_Register use record
        Val at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_FALCON_GPTMRVAL_VAL_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_FALCON_GPTMRVAL_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_GPTMRVAL_Register use record
        Val at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_FALCON_GPTMRCTL_GPTMREN_INIT          : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_GPTMRCTL_GPTMREN_DISABLE       : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_GPTMRCTL_GPTMREN_ENABLE        : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_GPTMRCTL_GPTMR_SRC_MODE_INIT   : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_GPTMRCTL_GPTMR_SRC_MODE_ENGCLK : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_GPTMRCTL_GPTMR_SRC_MODE_PTIMER : constant NvU1 := 16#1#;

    type LW_PRGNLCL_FALCON_GPTMRCTL_Register is record
        Gptmren        : NvU1;
        Gptmr_Src_Mode : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_GPTMRCTL_Register use record
        Gptmren        at 0 range 0 .. 0;
        Gptmr_Src_Mode at 0 range 1 .. 1;
    end record;

    LW_PRGNLCL_FALCON_PTIMER0_VAL_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_FALCON_PTIMER0_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_PTIMER0_Register use record
        Val at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_FALCON_PTIMER1_VAL_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_FALCON_PTIMER1_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_PTIMER1_Register use record
        Val at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_FALCON_WDTMRVAL_VAL_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_FALCON_WDTMRVAL_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_WDTMRVAL_Register use record
        Val at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_FALCON_WDTMRCTL_WDTMREN_INIT          : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_WDTMRCTL_WDTMREN_DISABLE       : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_WDTMRCTL_WDTMREN_ENABLE        : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_WDTMRCTL_WDTMR_SRC_MODE_INIT   : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_WDTMRCTL_WDTMR_SRC_MODE_ENGCLK : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_WDTMRCTL_WDTMR_SRC_MODE_PTIMER : constant NvU1 := 16#1#;

    type LW_PRGNLCL_FALCON_WDTMRCTL_Register is record
        Wdtmren        : NvU1;
        Wdtmr_Src_Mode : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_WDTMRCTL_Register use record
        Wdtmren        at 0 range 0 .. 0;
        Wdtmr_Src_Mode at 0 range 1 .. 1;
    end record;

    type LW_PRGNLCL_FALCON_MTHDDATA_Register is record
        Data : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_MTHDDATA_Register use record
        Data at 0 range 0 .. 31;
    end record;

    type LW_PRGNLCL_FALCON_MTHDID_PRIV_Field is (PRIV_DISABLE, PRIV_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_MTHDID_PRIV_Field use (PRIV_DISABLE => 16#0#, PRIV_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_MTHDID_WPEND_Field is (WPEND_DONE, WPEND_PENDING) with
        Size => 1;
    for LW_PRGNLCL_FALCON_MTHDID_WPEND_Field use (WPEND_DONE => 16#0#, WPEND_PENDING => 16#1#);

    type LW_PRGNLCL_FALCON_MTHDID_Register is record
        Id    : NvU12;
        Subch : NvU3;
        Priv  : LW_PRGNLCL_FALCON_MTHDID_PRIV_Field;
        Wpend : LW_PRGNLCL_FALCON_MTHDID_WPEND_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_MTHDID_Register use record
        Id    at 0 range  0 .. 11;
        Subch at 0 range 12 .. 14;
        Priv  at 0 range 15 .. 15;
        Wpend at 0 range 16 .. 16;
    end record;

    type LW_PRGNLCL_FALCON_MTHDWDAT_Register is record
        Data : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_MTHDWDAT_Register use record
        Data at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_FALCON_MTHDCOUNT_COUNT_INIT : constant NvU16 := 16#0#;

    type LW_PRGNLCL_FALCON_MTHDCOUNT_Register is record
        Count : NvU16;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_MTHDCOUNT_Register use record
        Count at 0 range 0 .. 15;
    end record;

    type LW_PRGNLCL_FALCON_MTHDPOP_POP_Field is (POP_FALSE, POP_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_MTHDPOP_POP_Field use (POP_FALSE => 16#0#, POP_TRUE => 16#1#);

    type LW_PRGNLCL_FALCON_MTHDPOP_Register is record
        Pop : LW_PRGNLCL_FALCON_MTHDPOP_POP_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_MTHDPOP_Register use record
        Pop at 0 range 0 .. 0;
    end record;

    LW_PRGNLCL_FALCON_MTHDRAMSZ_RAMSZ_INIT : constant NvU16 := 16#0#;

    type LW_PRGNLCL_FALCON_MTHDRAMSZ_Register is record
        Ramsz : NvU16;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_MTHDRAMSZ_Register use record
        Ramsz at 0 range 0 .. 15;
    end record;

    LW_PRGNLCL_FALCON_CURCTX_CTXVLD_INIT               : constant NvU1  := 16#0#;
    LW_PRGNLCL_FALCON_CURCTX_CTXVLD_FALSE              : constant NvU1  := 16#0#;
    LW_PRGNLCL_FALCON_CURCTX_CTXVLD_TRUE               : constant NvU1  := 16#1#;
    LW_PRGNLCL_FALCON_CURCTX_CTXTGT_INIT               : constant NvU2  := 16#0#;
    LW_PRGNLCL_FALCON_CURCTX_CTXTGT_LOCAL_FB           : constant NvU2  := 16#0#;
    LW_PRGNLCL_FALCON_CURCTX_CTXTGT_COHERENT_SYSMEM    : constant NvU2  := 16#2#;
    LW_PRGNLCL_FALCON_CURCTX_CTXTGT_NONCOHERENT_SYSMEM : constant NvU2  := 16#3#;
    LW_PRGNLCL_FALCON_CURCTX_CTXPTR_INIT               : constant NvU28 := 16#0#;

    type LW_PRGNLCL_FALCON_CURCTX_Register is record
        Ctxvld : NvU1;
        Ctxtgt : NvU2;
        Ctxptr : NvU28;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_CURCTX_Register use record
        Ctxvld at 0 range 30 .. 30;
        Ctxtgt at 0 range 28 .. 29;
        Ctxptr at 0 range  0 .. 27;
    end record;

    LW_PRGNLCL_FALCON_NXTCTX_CTXVLD_INIT               : constant NvU1  := 16#0#;
    LW_PRGNLCL_FALCON_NXTCTX_CTXVLD_FALSE              : constant NvU1  := 16#0#;
    LW_PRGNLCL_FALCON_NXTCTX_CTXVLD_TRUE               : constant NvU1  := 16#1#;
    LW_PRGNLCL_FALCON_NXTCTX_CTXTGT_INIT               : constant NvU2  := 16#0#;
    LW_PRGNLCL_FALCON_NXTCTX_CTXTGT_LOCAL_FB           : constant NvU2  := 16#0#;
    LW_PRGNLCL_FALCON_NXTCTX_CTXTGT_COHERENT_SYSMEM    : constant NvU2  := 16#2#;
    LW_PRGNLCL_FALCON_NXTCTX_CTXTGT_NONCOHERENT_SYSMEM : constant NvU2  := 16#3#;
    LW_PRGNLCL_FALCON_NXTCTX_CTXPTR_INIT               : constant NvU28 := 16#0#;

    type LW_PRGNLCL_FALCON_NXTCTX_Register is record
        Ctxvld : NvU1;
        Ctxtgt : NvU2;
        Ctxptr : NvU28;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_NXTCTX_Register use record
        Ctxvld at 0 range 30 .. 30;
        Ctxtgt at 0 range 28 .. 29;
        Ctxptr at 0 range  0 .. 27;
    end record;

    type LW_PRGNLCL_FALCON_CTXACK_SAVE_ACK_Field is (ACK_CLEAR, ACK_SET) with
        Size => 1;
    for LW_PRGNLCL_FALCON_CTXACK_SAVE_ACK_Field use (ACK_CLEAR => 16#0#, ACK_SET => 16#1#);
    type LW_PRGNLCL_FALCON_CTXACK_REST_ACK_Field is (ACK_CLEAR, ACK_SET) with
        Size => 1;
    for LW_PRGNLCL_FALCON_CTXACK_REST_ACK_Field use (ACK_CLEAR => 16#0#, ACK_SET => 16#1#);

    type LW_PRGNLCL_FALCON_CTXACK_Register is record
        Save_Ack : LW_PRGNLCL_FALCON_CTXACK_SAVE_ACK_Field;
        Rest_Ack : LW_PRGNLCL_FALCON_CTXACK_REST_ACK_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_CTXACK_Register use record
        Save_Ack at 0 range 0 .. 0;
        Rest_Ack at 0 range 1 .. 1;
    end record;

    LW_PRGNLCL_FALCON_MAILBOX0_DATA_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_FALCON_MAILBOX0_Register is record
        Data : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_MAILBOX0_Register use record
        Data at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_FALCON_MAILBOX1_DATA_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_FALCON_MAILBOX1_Register is record
        Data : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_MAILBOX1_Register use record
        Data at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_FALCON_ITFEN_CTXEN_INIT                    : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_ITFEN_CTXEN_DISABLE                 : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_ITFEN_CTXEN_ENABLE                  : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_ITFEN_MTHDEN_INIT                   : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_ITFEN_MTHDEN_DISABLE                : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_ITFEN_MTHDEN_ENABLE                 : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_ITFEN_PRIV_POSTWR_INIT              : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_ITFEN_PRIV_POSTWR_FALSE             : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_ITFEN_PRIV_POSTWR_TRUE              : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_ITFEN_PRIV_SECWL_CPUCTL_ALIAS_INIT  : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_ITFEN_PRIV_SECWL_CPUCTL_ALIAS_FALSE : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_ITFEN_PRIV_SECWL_CPUCTL_ALIAS_TRUE  : constant NvU1 := 16#1#;
    type LW_PRGNLCL_FALCON_ITFEN_CTXSW_NACK_Field is (NACK_FALSE, NACK_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_ITFEN_CTXSW_NACK_Field use (NACK_FALSE => 16#0#, NACK_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_ITFEN_HIRQ_NONSTALL_EDGE_Field is (EDGE_FALSE, EDGE_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_ITFEN_HIRQ_NONSTALL_EDGE_Field use (EDGE_FALSE => 16#0#, EDGE_TRUE => 16#1#);

    type LW_PRGNLCL_FALCON_ITFEN_Register is record
        Ctxen                   : NvU1;
        Mthden                  : NvU1;
        Priv_Postwr             : NvU1;
        Priv_Secwl_Cpuctl_Alias : NvU1;
        Ctxsw_Nack              : LW_PRGNLCL_FALCON_ITFEN_CTXSW_NACK_Field;
        Hirq_Nonstall_Edge      : LW_PRGNLCL_FALCON_ITFEN_HIRQ_NONSTALL_EDGE_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_ITFEN_Register use record
        Ctxen                   at 0 range  0 ..  0;
        Mthden                  at 0 range  1 ..  1;
        Priv_Postwr             at 0 range  2 ..  2;
        Priv_Secwl_Cpuctl_Alias at 0 range  4 ..  4;
        Ctxsw_Nack              at 0 range  8 ..  8;
        Hirq_Nonstall_Edge      at 0 range 12 .. 12;
    end record;

    type LW_PRGNLCL_FALCON_IDLESTATE_FALCON_BUSY_Field is (BUSY_FALSE, BUSY_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IDLESTATE_FALCON_BUSY_Field use (BUSY_FALSE => 16#0#, BUSY_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_IDLESTATE_ENGINE_BUSY_CYA_Field is (CYA_HW, CYA_RESERVED, CYA_SW_BUSY, CYA_SW_IDLE) with
        Size => 2;
    for LW_PRGNLCL_FALCON_IDLESTATE_ENGINE_BUSY_CYA_Field use (CYA_HW => 16#0#, CYA_RESERVED => 16#1#, CYA_SW_BUSY => 16#2#, CYA_SW_IDLE => 16#3#);
    type LW_PRGNLCL_FALCON_IDLESTATE_RISCV_BUSY_Field is (BUSY_FALSE, BUSY_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IDLESTATE_RISCV_BUSY_Field use (BUSY_FALSE => 16#0#, BUSY_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_IDLESTATE_INT_BUSY_SHA_Field is (SHA_FALSE, SHA_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IDLESTATE_INT_BUSY_SHA_Field use (SHA_FALSE => 16#0#, SHA_TRUE => 16#1#);

    type LW_PRGNLCL_FALCON_IDLESTATE_Register is record
        Falcon_Busy     : LW_PRGNLCL_FALCON_IDLESTATE_FALCON_BUSY_Field;
        Ext_Busy        : NvU15;
        Engine_Busy_Cya : LW_PRGNLCL_FALCON_IDLESTATE_ENGINE_BUSY_CYA_Field;
        Riscv_Busy      : LW_PRGNLCL_FALCON_IDLESTATE_RISCV_BUSY_Field;
        Int_Busy_Sha    : LW_PRGNLCL_FALCON_IDLESTATE_INT_BUSY_SHA_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_IDLESTATE_Register use record
        Falcon_Busy     at 0 range  0 ..  0;
        Ext_Busy        at 0 range  1 .. 15;
        Engine_Busy_Cya at 0 range 16 .. 17;
        Riscv_Busy      at 0 range 20 .. 20;
        Int_Busy_Sha    at 0 range 24 .. 24;
    end record;

    type LW_PRGNLCL_FALCON_FHSTATE_FALCON_HALTED_Field is (HALTED_FALSE, HALTED_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_FHSTATE_FALCON_HALTED_Field use (HALTED_FALSE => 16#0#, HALTED_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_FHSTATE_ENGINE_FAULTED_Field is (FAULTED_FALSE, FAULTED_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_FHSTATE_ENGINE_FAULTED_Field use (FAULTED_FALSE => 16#0#, FAULTED_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_FHSTATE_STALL_REQ_Field is (REQ_FALSE, REQ_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_FHSTATE_STALL_REQ_Field use (REQ_FALSE => 16#0#, REQ_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_FHSTATE_RISCV_HALTED_Field is (HALTED_FALSE, HALTED_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_FHSTATE_RISCV_HALTED_Field use (HALTED_FALSE => 16#0#, HALTED_TRUE => 16#1#);

    type LW_PRGNLCL_FALCON_FHSTATE_Register is record
        Falcon_Halted  : LW_PRGNLCL_FALCON_FHSTATE_FALCON_HALTED_Field;
        Ext_Halted     : NvU15;
        Engine_Faulted : LW_PRGNLCL_FALCON_FHSTATE_ENGINE_FAULTED_Field;
        Stall_Req      : LW_PRGNLCL_FALCON_FHSTATE_STALL_REQ_Field;
        Riscv_Halted   : LW_PRGNLCL_FALCON_FHSTATE_RISCV_HALTED_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_FHSTATE_Register use record
        Falcon_Halted  at 0 range  0 ..  0;
        Ext_Halted     at 0 range  1 .. 15;
        Engine_Faulted at 0 range 16 .. 16;
        Stall_Req      at 0 range 17 .. 17;
        Riscv_Halted   at 0 range 20 .. 20;
    end record;

    LW_PRGNLCL_FALCON_PRIVSTATE_PRIV_INIT    : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_PRIVSTATE_PRIV_DISABLE : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_PRIVSTATE_PRIV_ENABLE  : constant NvU1 := 16#1#;

    type LW_PRGNLCL_FALCON_PRIVSTATE_Register is record
        Priv : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_PRIVSTATE_Register use record
        Priv at 0 range 0 .. 0;
    end record;

    type LW_PRGNLCL_FALCON_SFTRESET_EXT_Field is (EXT_FALSE, EXT_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SFTRESET_EXT_Field use (EXT_FALSE => 16#0#, EXT_TRUE => 16#1#);

    type LW_PRGNLCL_FALCON_SFTRESET_Register is record
        Ext : LW_PRGNLCL_FALCON_SFTRESET_EXT_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_SFTRESET_Register use record
        Ext at 0 range 0 .. 0;
    end record;

    type LW_PRGNLCL_FALCON_ENGCTL_ILW_CONTEXT_Field is (CONTEXT_FALSE, CONTEXT_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_ENGCTL_ILW_CONTEXT_Field use (CONTEXT_FALSE => 16#0#, CONTEXT_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_ENGCTL_SET_STALLREQ_Field is (STALLREQ_FALSE, STALLREQ_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_ENGCTL_SET_STALLREQ_Field use (STALLREQ_FALSE => 16#0#, STALLREQ_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_ENGCTL_CLR_STALLREQ_Field is (STALLREQ_FALSE, STALLREQ_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_ENGCTL_CLR_STALLREQ_Field use (STALLREQ_FALSE => 16#0#, STALLREQ_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_ENGCTL_SWITCH_CONTEXT_Field is (CONTEXT_FALSE, CONTEXT_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_ENGCTL_SWITCH_CONTEXT_Field use (CONTEXT_FALSE => 16#0#, CONTEXT_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_ENGCTL_STALLREQ_Field is (STALLREQ_FALSE, STALLREQ_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_ENGCTL_STALLREQ_Field use (STALLREQ_FALSE => 16#0#, STALLREQ_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_ENGCTL_STALLACK_Field is (STALLACK_FALSE, STALLACK_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_ENGCTL_STALLACK_Field use (STALLACK_FALSE => 16#0#, STALLACK_TRUE => 16#1#);

    type LW_PRGNLCL_FALCON_ENGCTL_Register is record
        Inv_Context    : LW_PRGNLCL_FALCON_ENGCTL_ILW_CONTEXT_Field;
        Set_Stallreq   : LW_PRGNLCL_FALCON_ENGCTL_SET_STALLREQ_Field;
        Clr_Stallreq   : LW_PRGNLCL_FALCON_ENGCTL_CLR_STALLREQ_Field;
        Switch_Context : LW_PRGNLCL_FALCON_ENGCTL_SWITCH_CONTEXT_Field;
        Stallreq       : LW_PRGNLCL_FALCON_ENGCTL_STALLREQ_Field;
        Stallack       : LW_PRGNLCL_FALCON_ENGCTL_STALLACK_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_ENGCTL_Register use record
        Inv_Context    at 0 range 0 .. 0;
        Set_Stallreq   at 0 range 1 .. 1;
        Clr_Stallreq   at 0 range 2 .. 2;
        Switch_Context at 0 range 3 .. 3;
        Stallreq       at 0 range 8 .. 8;
        Stallack       at 0 range 9 .. 9;
    end record;

    LW_PRGNLCL_FALCON_ADDR_LSB_INIT : constant NvU6 := 16#0#;
    LW_PRGNLCL_FALCON_ADDR_MSB_INIT : constant NvU6 := 16#0#;

    type LW_PRGNLCL_FALCON_ADDR_Register is record
        Lsb : NvU6;
        Msb : NvU6;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_ADDR_Register use record
        Lsb at 0 range 0 ..  5;
        Msb at 0 range 6 .. 11;
    end record;

    type LW_PRGNLCL_FALCON_PRICFG_Register is record
        Pricfg_All : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_PRICFG_Register use record
        Pricfg_All at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_FALCON_DMACTL_REQUIRE_CTX_INIT  : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_DMACTL_REQUIRE_CTX_TRUE  : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_DMACTL_REQUIRE_CTX_FALSE : constant NvU1 := 16#0#;
    type LW_PRGNLCL_FALCON_DMACTL_DMEM_SCRUBBING_Field is (SCRUBBING_DONE, SCRUBBING_PENDING) with
        Size => 1;
    for LW_PRGNLCL_FALCON_DMACTL_DMEM_SCRUBBING_Field use (SCRUBBING_DONE => 16#0#, SCRUBBING_PENDING => 16#1#);
    type LW_PRGNLCL_FALCON_DMACTL_IMEM_SCRUBBING_Field is (SCRUBBING_DONE, SCRUBBING_PENDING) with
        Size => 1;
    for LW_PRGNLCL_FALCON_DMACTL_IMEM_SCRUBBING_Field use (SCRUBBING_DONE => 16#0#, SCRUBBING_PENDING => 16#1#);
    type LW_PRGNLCL_FALCON_DMACTL_DCACHE_INVALIDATING_Field is (INVALIDATING_DONE, INVALIDATING_PENDING) with
        Size => 1;
    for LW_PRGNLCL_FALCON_DMACTL_DCACHE_INVALIDATING_Field use (INVALIDATING_DONE => 16#0#, INVALIDATING_PENDING => 16#1#);
    type LW_PRGNLCL_FALCON_DMACTL_ICACHE_INVALIDATING_Field is (INVALIDATING_DONE, INVALIDATING_PENDING) with
        Size => 1;
    for LW_PRGNLCL_FALCON_DMACTL_ICACHE_INVALIDATING_Field use (INVALIDATING_DONE => 16#0#, INVALIDATING_PENDING => 16#1#);

    type LW_PRGNLCL_FALCON_DMACTL_Register is record
        Require_Ctx         : NvU1;
        Dmem_Scrubbing      : LW_PRGNLCL_FALCON_DMACTL_DMEM_SCRUBBING_Field;
        Imem_Scrubbing      : LW_PRGNLCL_FALCON_DMACTL_IMEM_SCRUBBING_Field;
        Secure_Stat         : NvU1;
        Dcache_Invalidating : LW_PRGNLCL_FALCON_DMACTL_DCACHE_INVALIDATING_Field;
        Icache_Invalidating : LW_PRGNLCL_FALCON_DMACTL_ICACHE_INVALIDATING_Field;
        Dmaq_Num            : NvU5;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DMACTL_Register use record
        Require_Ctx         at 0 range  0 ..  0;
        Dmem_Scrubbing      at 0 range  1 ..  1;
        Imem_Scrubbing      at 0 range  2 ..  2;
        Secure_Stat         at 0 range  7 ..  7;
        Dcache_Invalidating at 0 range  8 ..  8;
        Icache_Invalidating at 0 range  9 ..  9;
        Dmaq_Num            at 0 range 16 .. 20;
    end record;

    LW_PRGNLCL_FALCON_DMATRFBASE_BASE_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_FALCON_DMATRFBASE_Register is record
        Base : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DMATRFBASE_Register use record
        Base at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_FALCON_DMATRFMOFFS_OFFS_INIT : constant NvU24 := 16#0#;

    type LW_PRGNLCL_FALCON_DMATRFMOFFS_Register is record
        Offs : NvU24;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DMATRFMOFFS_Register use record
        Offs at 0 range 0 .. 23;
    end record;

    type LW_PRGNLCL_FALCON_DMATRFCMD_FULL_Field is (FULL_FALSE, FULL_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_DMATRFCMD_FULL_Field use (FULL_FALSE => 16#0#, FULL_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_DMATRFCMD_IDLE_Field is (IDLE_FALSE, IDLE_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_DMATRFCMD_IDLE_Field use (IDLE_FALSE => 16#0#, IDLE_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_DMATRFCMD_IMEM_Field is (IMEM_FALSE, IMEM_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_DMATRFCMD_IMEM_Field use (IMEM_FALSE => 16#0#, IMEM_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_DMATRFCMD_WRITE_Field is (WRITE_FALSE, WRITE_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_DMATRFCMD_WRITE_Field use (WRITE_FALSE => 16#0#, WRITE_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_DMATRFCMD_NOTIFY_Field is (NOTIFY_FALSE, NOTIFY_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_DMATRFCMD_NOTIFY_Field use (NOTIFY_FALSE => 16#0#, NOTIFY_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_DMATRFCMD_SIZE_Field is (SIZE_4B, SIZE_8B, SIZE_16B, SIZE_32B, SIZE_64B, SIZE_128B, SIZE_256B) with
        Size => 3;
    for LW_PRGNLCL_FALCON_DMATRFCMD_SIZE_Field use (SIZE_4B => 16#0#, SIZE_8B => 16#1#, SIZE_16B => 16#2#, SIZE_32B => 16#3#, SIZE_64B => 16#4#, SIZE_128B => 16#5#,
         SIZE_256B                                          => 16#6#);
    LW_PRGNLCL_FALCON_DMATRFCMD_SET_DMTAG_INIT  : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_DMATRFCMD_SET_DMTAG_TRUE  : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_DMATRFCMD_SET_DMTAG_FALSE : constant NvU1 := 16#0#;
    type LW_PRGNLCL_FALCON_DMATRFCMD_ERROR_Field is (ERROR_FALSE, ERROR_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_DMATRFCMD_ERROR_Field use (ERROR_FALSE => 16#0#, ERROR_TRUE => 16#1#);
    LW_PRGNLCL_FALCON_DMATRFCMD_SET_DMLVL_INIT  : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_DMATRFCMD_SET_DMLVL_TRUE  : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_DMATRFCMD_SET_DMLVL_FALSE : constant NvU1 := 16#0#;

    type LW_PRGNLCL_FALCON_DMATRFCMD_Register is record
        Full      : LW_PRGNLCL_FALCON_DMATRFCMD_FULL_Field;
        Idle      : LW_PRGNLCL_FALCON_DMATRFCMD_IDLE_Field;
        Sec       : NvU2;
        Imem      : LW_PRGNLCL_FALCON_DMATRFCMD_IMEM_Field;
        Write     : LW_PRGNLCL_FALCON_DMATRFCMD_WRITE_Field;
        Notify    : LW_PRGNLCL_FALCON_DMATRFCMD_NOTIFY_Field;
        Size      : LW_PRGNLCL_FALCON_DMATRFCMD_SIZE_Field;
        Ctxdma    : NvU3;
        Set_Dmtag : NvU1;
        Error     : LW_PRGNLCL_FALCON_DMATRFCMD_ERROR_Field;
        Lvl       : NvU3;
        Set_Dmlvl : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DMATRFCMD_Register use record
        Full      at 0 range  0 ..  0;
        Idle      at 0 range  1 ..  1;
        Sec       at 0 range  2 ..  3;
        Imem      at 0 range  4 ..  4;
        Write     at 0 range  5 ..  5;
        Notify    at 0 range  6 ..  6;
        Size      at 0 range  8 .. 10;
        Ctxdma    at 0 range 12 .. 14;
        Set_Dmtag at 0 range 16 .. 16;
        Error     at 0 range 20 .. 20;
        Lvl       at 0 range 24 .. 26;
        Set_Dmlvl at 0 range 27 .. 27;
    end record;

    LW_PRGNLCL_FALCON_DMATRFFBOFFS_OFFS_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_FALCON_DMATRFFBOFFS_Register is record
        Offs : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DMATRFFBOFFS_Register use record
        Offs at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_FALCON_DMAPOLL_FB_CFG_W_FENCE_INIT  : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_DMAPOLL_FB_CFG_W_FENCE_TRUE  : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_DMAPOLL_FB_CFG_W_FENCE_FALSE : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_DMAPOLL_FB_CFG_R_FENCE_INIT  : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_DMAPOLL_FB_CFG_R_FENCE_TRUE  : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_DMAPOLL_FB_CFG_R_FENCE_FALSE : constant NvU1 := 16#0#;
    type LW_PRGNLCL_FALCON_DMAPOLL_FB_DMA_ACTIVE_Field is (ACTIVE_FALSE, ACTIVE_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_DMAPOLL_FB_DMA_ACTIVE_Field use (ACTIVE_FALSE => 16#0#, ACTIVE_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_DMAPOLL_FB_FENCE_ACTIVE_Field is (ACTIVE_FALSE, ACTIVE_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_DMAPOLL_FB_FENCE_ACTIVE_Field use (ACTIVE_FALSE => 16#0#, ACTIVE_TRUE => 16#1#);

    type LW_PRGNLCL_FALCON_DMAPOLL_FB_Register is record
        Rcount       : NvU8;
        Wcount       : NvU8;
        Cfg_W_Fence  : NvU1;
        Cfg_R_Fence  : NvU1;
        Dma_Active   : LW_PRGNLCL_FALCON_DMAPOLL_FB_DMA_ACTIVE_Field;
        Fence_Active : LW_PRGNLCL_FALCON_DMAPOLL_FB_FENCE_ACTIVE_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DMAPOLL_FB_Register use record
        Rcount       at 0 range 24 .. 31;
        Wcount       at 0 range 16 .. 23;
        Cfg_W_Fence  at 0 range  5 ..  5;
        Cfg_R_Fence  at 0 range  4 ..  4;
        Dma_Active   at 0 range  1 ..  1;
        Fence_Active at 0 range  0 ..  0;
    end record;

    LW_PRGNLCL_FALCON_DMAPOLL_CP_CFG_W_FENCE_INIT  : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_DMAPOLL_CP_CFG_W_FENCE_TRUE  : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_DMAPOLL_CP_CFG_W_FENCE_FALSE : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_DMAPOLL_CP_CFG_R_FENCE_INIT  : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_DMAPOLL_CP_CFG_R_FENCE_TRUE  : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_DMAPOLL_CP_CFG_R_FENCE_FALSE : constant NvU1 := 16#0#;
    type LW_PRGNLCL_FALCON_DMAPOLL_CP_DMA_ACTIVE_Field is (ACTIVE_FALSE, ACTIVE_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_DMAPOLL_CP_DMA_ACTIVE_Field use (ACTIVE_FALSE => 16#0#, ACTIVE_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_DMAPOLL_CP_FENCE_ACTIVE_Field is (ACTIVE_FALSE, ACTIVE_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_DMAPOLL_CP_FENCE_ACTIVE_Field use (ACTIVE_FALSE => 16#0#, ACTIVE_TRUE => 16#1#);

    type LW_PRGNLCL_FALCON_DMAPOLL_CP_Register is record
        Rcount       : NvU8;
        Wcount       : NvU8;
        Cfg_W_Fence  : NvU1;
        Cfg_R_Fence  : NvU1;
        Dma_Active   : LW_PRGNLCL_FALCON_DMAPOLL_CP_DMA_ACTIVE_Field;
        Fence_Active : LW_PRGNLCL_FALCON_DMAPOLL_CP_FENCE_ACTIVE_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DMAPOLL_CP_Register use record
        Rcount       at 0 range 24 .. 31;
        Wcount       at 0 range 16 .. 23;
        Cfg_W_Fence  at 0 range  5 ..  5;
        Cfg_R_Fence  at 0 range  4 ..  4;
        Dma_Active   at 0 range  1 ..  1;
        Fence_Active at 0 range  0 ..  0;
    end record;

    type LW_PRGNLCL_FALCON_DMAINFO_FINISHED_FBRD_LOW_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DMAINFO_FINISHED_FBRD_LOW_Register use record
        Val at 0 range 0 .. 31;
    end record;

    type LW_PRGNLCL_FALCON_DMAINFO_FINISHED_FBRD_HIGH_Register is record
        Val  : NvU31;
        Obit : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DMAINFO_FINISHED_FBRD_HIGH_Register use record
        Val  at 0 range  0 .. 30;
        Obit at 0 range 31 .. 31;
    end record;

    type LW_PRGNLCL_FALCON_DMAINFO_FINISHED_FBWR_LOW_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DMAINFO_FINISHED_FBWR_LOW_Register use record
        Val at 0 range 0 .. 31;
    end record;

    type LW_PRGNLCL_FALCON_DMAINFO_FINISHED_FBWR_HIGH_Register is record
        Val  : NvU31;
        Obit : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DMAINFO_FINISHED_FBWR_HIGH_Register use record
        Val  at 0 range  0 .. 30;
        Obit at 0 range 31 .. 31;
    end record;

    type LW_PRGNLCL_FALCON_DMAINFO_CURRENT_FBRD_LOW_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DMAINFO_CURRENT_FBRD_LOW_Register use record
        Val at 0 range 0 .. 31;
    end record;

    type LW_PRGNLCL_FALCON_DMAINFO_CURRENT_FBRD_HIGH_Register is record
        Val  : NvU31;
        Obit : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DMAINFO_CURRENT_FBRD_HIGH_Register use record
        Val  at 0 range  0 .. 30;
        Obit at 0 range 31 .. 31;
    end record;

    type LW_PRGNLCL_FALCON_DMAINFO_CURRENT_FBWR_LOW_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DMAINFO_CURRENT_FBWR_LOW_Register use record
        Val at 0 range 0 .. 31;
    end record;

    type LW_PRGNLCL_FALCON_DMAINFO_CURRENT_FBWR_HIGH_Register is record
        Val  : NvU31;
        Obit : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DMAINFO_CURRENT_FBWR_HIGH_Register use record
        Val  at 0 range  0 .. 30;
        Obit at 0 range 31 .. 31;
    end record;

    type LW_PRGNLCL_FALCON_DMAINFO_CTL_CLR_FBRD_Field is (FBRD_FALSE, FBRD_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_DMAINFO_CTL_CLR_FBRD_Field use (FBRD_FALSE => 16#0#, FBRD_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_DMAINFO_CTL_CLR_FBWR_Field is (FBWR_FALSE, FBWR_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_DMAINFO_CTL_CLR_FBWR_Field use (FBWR_FALSE => 16#0#, FBWR_TRUE => 16#1#);
    LW_PRGNLCL_FALCON_DMAINFO_CTL_INTR_ERR_COMPLETION_FALSE : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_DMAINFO_CTL_INTR_ERR_COMPLETION_TRUE  : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_DMAINFO_CTL_INTR_ERR_COMPLETION_CLR   : constant NvU1 := 16#1#;
    type LW_PRGNLCL_FALCON_DMAINFO_CTL_INTR_ERR_DMATYPE_Field is (DMATYPE_NORMAL, DMATYPE_TAGGED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_DMAINFO_CTL_INTR_ERR_DMATYPE_Field use (DMATYPE_NORMAL => 16#0#, DMATYPE_TAGGED => 16#1#);
    type LW_PRGNLCL_FALCON_DMAINFO_CTL_INTR_ERR_DMAREAD_Field is (DMAREAD_FALSE, DMAREAD_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_DMAINFO_CTL_INTR_ERR_DMAREAD_Field use (DMAREAD_FALSE => 16#0#, DMAREAD_TRUE => 16#1#);

    type LW_PRGNLCL_FALCON_DMAINFO_CTL_Register is record
        Clr_Fbrd            : LW_PRGNLCL_FALCON_DMAINFO_CTL_CLR_FBRD_Field;
        Clr_Fbwr            : LW_PRGNLCL_FALCON_DMAINFO_CTL_CLR_FBWR_Field;
        Intr_Err_Completion : NvU1;
        Intr_Err_Dmatype    : LW_PRGNLCL_FALCON_DMAINFO_CTL_INTR_ERR_DMATYPE_Field;
        Intr_Err_Dmaread    : LW_PRGNLCL_FALCON_DMAINFO_CTL_INTR_ERR_DMAREAD_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DMAINFO_CTL_Register use record
        Clr_Fbrd            at 0 range 0 .. 0;
        Clr_Fbwr            at 0 range 1 .. 1;
        Intr_Err_Completion at 0 range 2 .. 2;
        Intr_Err_Dmatype    at 0 range 3 .. 3;
        Intr_Err_Dmaread    at 0 range 4 .. 4;
    end record;

    type LW_PRGNLCL_FALCON_DMAINFO_ERR_TAG_HIGH_Register is record
        Val : NvU31;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DMAINFO_ERR_TAG_HIGH_Register use record
        Val at 0 range 0 .. 30;
    end record;

    type LW_PRGNLCL_FALCON_DMAINFO_ERR_TAG_LOW_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DMAINFO_ERR_TAG_LOW_Register use record
        Val at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_FALCON_IMEMC_OFFS_INIT   : constant NvU6  := 16#0#;
    LW_PRGNLCL_FALCON_IMEMC_BLK_INIT    : constant NvU16 := 16#0#;
    LW_PRGNLCL_FALCON_IMEMC_AINCW_INIT  : constant NvU1  := 16#0#;
    LW_PRGNLCL_FALCON_IMEMC_AINCW_TRUE  : constant NvU1  := 16#1#;
    LW_PRGNLCL_FALCON_IMEMC_AINCW_FALSE : constant NvU1  := 16#0#;
    LW_PRGNLCL_FALCON_IMEMC_AINCR_INIT  : constant NvU1  := 16#0#;
    LW_PRGNLCL_FALCON_IMEMC_AINCR_TRUE  : constant NvU1  := 16#1#;
    LW_PRGNLCL_FALCON_IMEMC_AINCR_FALSE : constant NvU1  := 16#0#;
    LW_PRGNLCL_FALCON_IMEMC_SECURE_INIT : constant NvU1  := 16#0#;
    type LW_PRGNLCL_FALCON_IMEMC_SEC_ATOMIC_Field is (ATOMIC_FALSE, ATOMIC_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IMEMC_SEC_ATOMIC_Field use (ATOMIC_FALSE => 16#0#, ATOMIC_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_IMEMC_SEC_WR_VIO_Field is (VIO_FALSE, VIO_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IMEMC_SEC_WR_VIO_Field use (VIO_FALSE => 16#0#, VIO_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_IMEMC_SEC_LOCK_Field is (LOCK_FALSE, LOCK_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_IMEMC_SEC_LOCK_Field use (LOCK_FALSE => 16#0#, LOCK_TRUE => 16#1#);

    type LW_PRGNLCL_FALCON_IMEMC_Register is record
        Offs       : NvU6;
        Blk        : NvU16;
        Aincw      : NvU1;
        Aincr      : NvU1;
        Secure     : NvU1;
        Sec_Atomic : LW_PRGNLCL_FALCON_IMEMC_SEC_ATOMIC_Field;
        Sec_Wr_Vio : LW_PRGNLCL_FALCON_IMEMC_SEC_WR_VIO_Field;
        Sec_Lock   : LW_PRGNLCL_FALCON_IMEMC_SEC_LOCK_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_IMEMC_Register use record
        Offs       at 0 range  2 ..  7;
        Blk        at 0 range  8 .. 23;
        Aincw      at 0 range 24 .. 24;
        Aincr      at 0 range 25 .. 25;
        Secure     at 0 range 28 .. 28;
        Sec_Atomic at 0 range 29 .. 29;
        Sec_Wr_Vio at 0 range 30 .. 30;
        Sec_Lock   at 0 range 31 .. 31;
    end record;

    type LW_PRGNLCL_FALCON_IMEMD_Register is record
        Data : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_IMEMD_Register use record
        Data at 0 range 0 .. 31;
    end record;

    type LW_PRGNLCL_FALCON_IMEMT_Register is record
        Tag : NvU16;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_IMEMT_Register use record
        Tag at 0 range 0 .. 15;
    end record;

    LW_PRGNLCL_FALCON_DMEMC_ADDRESS_INIT : constant NvU24 := 16#0#;
    LW_PRGNLCL_FALCON_DMEMC_AINCW_INIT   : constant NvU1  := 16#0#;
    LW_PRGNLCL_FALCON_DMEMC_AINCW_TRUE   : constant NvU1  := 16#1#;
    LW_PRGNLCL_FALCON_DMEMC_AINCW_FALSE  : constant NvU1  := 16#0#;
    LW_PRGNLCL_FALCON_DMEMC_AINCR_INIT   : constant NvU1  := 16#0#;
    LW_PRGNLCL_FALCON_DMEMC_AINCR_TRUE   : constant NvU1  := 16#1#;
    LW_PRGNLCL_FALCON_DMEMC_AINCR_FALSE  : constant NvU1  := 16#0#;
    LW_PRGNLCL_FALCON_DMEMC_SETTAG_INIT  : constant NvU1  := 16#0#;
    LW_PRGNLCL_FALCON_DMEMC_SETTAG_TRUE  : constant NvU1  := 16#1#;
    LW_PRGNLCL_FALCON_DMEMC_SETTAG_FALSE : constant NvU1  := 16#0#;
    LW_PRGNLCL_FALCON_DMEMC_SETLVL_INIT  : constant NvU1  := 16#0#;
    LW_PRGNLCL_FALCON_DMEMC_SETLVL_TRUE  : constant NvU1  := 16#1#;
    LW_PRGNLCL_FALCON_DMEMC_SETLVL_FALSE : constant NvU1  := 16#0#;
    LW_PRGNLCL_FALCON_DMEMC_VA_INIT      : constant NvU1  := 16#0#;
    LW_PRGNLCL_FALCON_DMEMC_VA_TRUE      : constant NvU1  := 16#1#;
    LW_PRGNLCL_FALCON_DMEMC_VA_FALSE     : constant NvU1  := 16#0#;
    type LW_PRGNLCL_FALCON_DMEMC_MISS_Field is (MISS_FALSE, MISS_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_DMEMC_MISS_Field use (MISS_FALSE => 16#0#, MISS_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_DMEMC_MULTIHIT_Field is (MULTIHIT_FALSE, MULTIHIT_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_DMEMC_MULTIHIT_Field use (MULTIHIT_FALSE => 16#0#, MULTIHIT_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_DMEMC_LVLERR_Field is (LVLERR_FALSE, LVLERR_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_DMEMC_LVLERR_Field use (LVLERR_FALSE => 16#0#, LVLERR_TRUE => 16#1#);
    LW_PRGNLCL_FALCON_DMEMC_OFFS_INIT : constant := 16#0#;
    LW_PRGNLCL_FALCON_DMEMC_BLK_INIT  : constant := 16#0#;

    type LW_PRGNLCL_FALCON_DMEMC_Register is record
        Address  : NvU24;
        Aincw    : NvU1;
        Aincr    : NvU1;
        Settag   : NvU1;
        Setlvl   : NvU1;
        Va       : NvU1;
        Miss     : LW_PRGNLCL_FALCON_DMEMC_MISS_Field;
        Multihit : LW_PRGNLCL_FALCON_DMEMC_MULTIHIT_Field;
        Lvlerr   : LW_PRGNLCL_FALCON_DMEMC_LVLERR_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DMEMC_Register use record
        Address  at 0 range  0 .. 23;
        Aincw    at 0 range 24 .. 24;
        Aincr    at 0 range 25 .. 25;
        Settag   at 0 range 26 .. 26;
        Setlvl   at 0 range 27 .. 27;
        Va       at 0 range 28 .. 28;
        Miss     at 0 range 29 .. 29;
        Multihit at 0 range 30 .. 30;
        Lvlerr   at 0 range 31 .. 31;
    end record;

    type LW_PRGNLCL_FALCON_DMEMD_Register is record
        Data : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DMEMD_Register use record
        Data at 0 range 0 .. 31;
    end record;

    type LW_PRGNLCL_FALCON_DMEMT_Register is record
        Tag : NvU16;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DMEMT_Register use record
        Tag at 0 range 0 .. 15;
    end record;

    type LW_PRGNLCL_FALCON_DMEML_Register is record
        Lvl : NvU3;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DMEML_Register use record
        Lvl at 0 range 0 .. 2;
    end record;

    LW_PRGNLCL_FALCON_LOCKPMB_IMEM_INIT   : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_LOCKPMB_IMEM_LOCK   : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_LOCKPMB_IMEM_UNLOCK : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_LOCKPMB_DMEM_INIT   : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_LOCKPMB_DMEM_LOCK   : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_LOCKPMB_DMEM_UNLOCK : constant NvU1 := 16#0#;

    type LW_PRGNLCL_FALCON_LOCKPMB_Register is record
        Imem : NvU1;
        Dmem : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_LOCKPMB_Register use record
        Imem at 0 range 0 .. 0;
        Dmem at 0 range 1 .. 1;
    end record;

    LW_PRGNLCL_FALCON_DMEM_DUMMY_DATA_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_FALCON_DMEM_DUMMY_Register is record
        Data : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DMEM_DUMMY_Register use record
        Data at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_FALCON_IMEM_DUMMY_DATA_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_FALCON_IMEM_DUMMY_Register is record
        Data : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_IMEM_DUMMY_Register use record
        Data at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_FALCON_DIO_RESET_DELAY_VALUE_INIT : constant NvU16 := 16#100#;

    type LW_PRGNLCL_FALCON_DIO_RESET_DELAY_Register is record
        Value : NvU16;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DIO_RESET_DELAY_Register use record
        Value at 0 range 0 .. 15;
    end record;

    LW_PRGNLCL_FALCON_DOC_CTRL_COUNT_INIT          : constant NvU8 := 16#4#;
    LW_PRGNLCL_FALCON_DOC_CTRL_RESET_INIT          : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_DOC_CTRL_STOP_INIT           : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_DOC_CTRL_EMPTY_INIT          : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_DOC_CTRL_WR_FINISHED_INIT    : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_DOC_CTRL_RD_FINISHED_INIT    : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_DOC_CTRL_WR_ERROR_INIT       : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_DOC_CTRL_RD_ERROR_INIT       : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_DOC_CTRL_PROTOCOL_ERROR_INIT : constant NvU1 := 16#0#;

    type LW_PRGNLCL_FALCON_DOC_CTRL_Register is record
        Count          : NvU8;
        Reset          : NvU1;
        Stop           : NvU1;
        Empty          : NvU1;
        Wr_Finished    : NvU1;
        Rd_Finished    : NvU1;
        Wr_Error       : NvU1;
        Rd_Error       : NvU1;
        Protocol_Error : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DOC_CTRL_Register use record
        Count          at 0 range  0 ..  7;
        Reset          at 0 range 16 .. 16;
        Stop           at 0 range 17 .. 17;
        Empty          at 0 range 18 .. 18;
        Wr_Finished    at 0 range 19 .. 19;
        Rd_Finished    at 0 range 20 .. 20;
        Wr_Error       at 0 range 21 .. 21;
        Rd_Error       at 0 range 22 .. 22;
        Protocol_Error at 0 range 23 .. 23;
    end record;

    type LW_PRGNLCL_FALCON_DOC_D0_Register is record
        Data : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DOC_D0_Register use record
        Data at 0 range 0 .. 31;
    end record;

    type LW_PRGNLCL_FALCON_DOC_D1_Register is record
        Data : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DOC_D1_Register use record
        Data at 0 range 0 .. 31;
    end record;

    type LW_PRGNLCL_FALCON_DOC_D2_Register is record
        Data : NvU16;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DOC_D2_Register use record
        Data at 0 range 0 .. 15;
    end record;

    LW_PRGNLCL_FALCON_DIC_CTRL_COUNT_INIT : constant NvU8 := 16#0#;
    LW_PRGNLCL_FALCON_DIC_CTRL_RESET_INIT : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_DIC_CTRL_VALID_INIT : constant NvU1 := 16#0#;

    type LW_PRGNLCL_FALCON_DIC_CTRL_Register is record
        Count : NvU8;
        Reset : NvU1;
        Valid : NvU1;
        Pop   : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DIC_CTRL_Register use record
        Count at 0 range  0 ..  7;
        Reset at 0 range 16 .. 16;
        Valid at 0 range 19 .. 19;
        Pop   at 0 range 20 .. 20;
    end record;

    type LW_PRGNLCL_FALCON_DIC_D0_Register is record
        Data : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DIC_D0_Register use record
        Data at 0 range 0 .. 31;
    end record;

    type LW_PRGNLCL_FALCON_DIC_D1_Register is record
        Data : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DIC_D1_Register use record
        Data at 0 range 0 .. 31;
    end record;

    type LW_PRGNLCL_FALCON_DIC_D2_Register is record
        Data : NvU16;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DIC_D2_Register use record
        Data at 0 range 0 .. 15;
    end record;

    type LW_PRGNLCL_FALCON_DIO_ERR_Register is record
        Info : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DIO_ERR_Register use record
        Info at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_FALCON_DIO_DOC_CTRL_COUNT_INIT          : constant NvU8 := 16#4#;
    LW_PRGNLCL_FALCON_DIO_DOC_CTRL_RESET_INIT          : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_DIO_DOC_CTRL_STOP_INIT           : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_DIO_DOC_CTRL_EMPTY_INIT          : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_DIO_DOC_CTRL_WR_FINISHED_INIT    : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_DIO_DOC_CTRL_RD_FINISHED_INIT    : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_DIO_DOC_CTRL_WR_ERROR_INIT       : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_DIO_DOC_CTRL_RD_ERROR_INIT       : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_DIO_DOC_CTRL_PROTOCOL_ERROR_INIT : constant NvU1 := 16#0#;

    type LW_PRGNLCL_FALCON_DIO_DOC_CTRL_Register is record
        Count          : NvU8;
        Reset          : NvU1;
        Stop           : NvU1;
        Empty          : NvU1;
        Wr_Finished    : NvU1;
        Rd_Finished    : NvU1;
        Wr_Error       : NvU1;
        Rd_Error       : NvU1;
        Protocol_Error : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DIO_DOC_CTRL_Register use record
        Count          at 0 range  0 ..  7;
        Reset          at 0 range 16 .. 16;
        Stop           at 0 range 17 .. 17;
        Empty          at 0 range 18 .. 18;
        Wr_Finished    at 0 range 19 .. 19;
        Rd_Finished    at 0 range 20 .. 20;
        Wr_Error       at 0 range 21 .. 21;
        Rd_Error       at 0 range 22 .. 22;
        Protocol_Error at 0 range 23 .. 23;
    end record;

    type LW_PRGNLCL_FALCON_DIO_DOC_D0_Register is record
        Data : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DIO_DOC_D0_Register use record
        Data at 0 range 0 .. 31;
    end record;

    type LW_PRGNLCL_FALCON_DIO_DOC_D1_Register is record
        Data : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DIO_DOC_D1_Register use record
        Data at 0 range 0 .. 31;
    end record;

    type LW_PRGNLCL_FALCON_DIO_DOC_D2_Register is record
        Data : NvU16;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DIO_DOC_D2_Register use record
        Data at 0 range 0 .. 15;
    end record;

    LW_PRGNLCL_FALCON_DIO_DIC_CTRL_COUNT_INIT : constant NvU8 := 16#0#;
    LW_PRGNLCL_FALCON_DIO_DIC_CTRL_RESET_INIT : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_DIO_DIC_CTRL_VALID_INIT : constant NvU1 := 16#0#;

    type LW_PRGNLCL_FALCON_DIO_DIC_CTRL_Register is record
        Count : NvU8;
        Reset : NvU1;
        Valid : NvU1;
        Pop   : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DIO_DIC_CTRL_Register use record
        Count at 0 range  0 ..  7;
        Reset at 0 range 16 .. 16;
        Valid at 0 range 19 .. 19;
        Pop   at 0 range 20 .. 20;
    end record;

    type LW_PRGNLCL_FALCON_DIO_DIC_D0_Register is record
        Data : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DIO_DIC_D0_Register use record
        Data at 0 range 0 .. 31;
    end record;

    type LW_PRGNLCL_FALCON_DIO_DIC_D1_Register is record
        Data : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DIO_DIC_D1_Register use record
        Data at 0 range 0 .. 31;
    end record;

    type LW_PRGNLCL_FALCON_DIO_DIC_D2_Register is record
        Data : NvU16;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DIO_DIC_D2_Register use record
        Data at 0 range 0 .. 15;
    end record;

    type LW_PRGNLCL_FALCON_DIO_DIO_ERR_Register is record
        Info : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DIO_DIO_ERR_Register use record
        Info at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_0_VAL_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_0_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_0_Register use record
        Val at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_1_VAL_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_1_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_1_Register use record
        Val at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_2_VAL_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_2_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_2_Register use record
        Val at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_3_VAL_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_3_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_3_Register use record
        Val at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_FALCON_PRGNVER_MAJOR_DEFT  : constant NvU4  := 16#2#;
    LW_PRGNLCL_FALCON_PRGNVER_MINOR_DEFT  : constant NvU14 := 16#1#;
    LW_PRGNLCL_FALCON_PRGNVER_BUGFIX_DEFT : constant NvU14 := 16#0#;

    type LW_PRGNLCL_FALCON_PRGNVER_Register is record
        Major  : NvU4;
        Minor  : NvU14;
        Bugfix : NvU14;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_PRGNVER_Register use record
        Major  at 0 range  0 ..  3;
        Minor  at 0 range  4 .. 17;
        Bugfix at 0 range 18 .. 31;
    end record;

    type LW_PRGNLCL_FALCON_HWCFG_Register is record
        Imem_Size        : NvU9;
        Dmem_Size        : NvU9;
        Methodfifo_Depth : NvU9;
        Dmaqueue_Depth   : NvU5;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_HWCFG_Register use record
        Imem_Size        at 0 range  0 ..  8;
        Dmem_Size        at 0 range  9 .. 17;
        Methodfifo_Depth at 0 range 18 .. 26;
        Dmaqueue_Depth   at 0 range 27 .. 31;
    end record;

    LW_PRGNLCL_FALCON_HWCFG1_CORE_REV_INIT            : constant NvU4 := 16#6#;
    LW_PRGNLCL_FALCON_HWCFG1_CORE_REV_1_0             : constant NvU4 := 16#1#;
    LW_PRGNLCL_FALCON_HWCFG1_CORE_REV_2_0             : constant NvU4 := 16#2#;
    LW_PRGNLCL_FALCON_HWCFG1_CORE_REV_3_0             : constant NvU4 := 16#3#;
    LW_PRGNLCL_FALCON_HWCFG1_CORE_REV_4_0             : constant NvU4 := 16#4#;
    LW_PRGNLCL_FALCON_HWCFG1_CORE_REV_5_0             : constant NvU4 := 16#5#;
    LW_PRGNLCL_FALCON_HWCFG1_CORE_REV_6_0             : constant NvU4 := 16#6#;
    LW_PRGNLCL_FALCON_HWCFG1_CORE_REV_7_0             : constant NvU4 := 16#7#;
    LW_PRGNLCL_FALCON_HWCFG1_SECURITY_MODEL_INIT      : constant NvU2 := 16#3#;
    LW_PRGNLCL_FALCON_HWCFG1_SECURITY_MODEL_NONE      : constant NvU2 := 16#0#;
    LW_PRGNLCL_FALCON_HWCFG1_SECURITY_MODEL_LIGHT     : constant NvU2 := 16#2#;
    LW_PRGNLCL_FALCON_HWCFG1_SECURITY_MODEL_HEAVY     : constant NvU2 := 16#3#;
    LW_PRGNLCL_FALCON_HWCFG1_CORE_REV_SUBVERSION_INIT : constant NvU2 := 16#0#;
    LW_PRGNLCL_FALCON_HWCFG1_CORE_REV_SUBVERSION_0    : constant NvU2 := 16#0#;
    LW_PRGNLCL_FALCON_HWCFG1_CORE_REV_SUBVERSION_1    : constant NvU2 := 16#1#;
    LW_PRGNLCL_FALCON_HWCFG1_CORE_REV_SUBVERSION_2    : constant NvU2 := 16#2#;
    LW_PRGNLCL_FALCON_HWCFG1_CORE_REV_SUBVERSION_3    : constant NvU2 := 16#3#;
    LW_PRGNLCL_FALCON_HWCFG1_IMEM_PORTS_INIT          : constant NvU4 := 16#1#;
    LW_PRGNLCL_FALCON_HWCFG1_DMEM_PORTS_INIT          : constant NvU4 := 16#4#;
    LW_PRGNLCL_FALCON_HWCFG1_TAG_WIDTH_INIT           : constant NvU5 := 16#10#;
    LW_PRGNLCL_FALCON_HWCFG1_DMEM_TAG_WIDTH_INIT      : constant NvU5 := 16#10#;
    LW_PRGNLCL_FALCON_HWCFG1_DBG_PRIV_BUS_INIT        : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_HWCFG1_DBG_PRIV_BUS_ENABLE      : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_HWCFG1_DBG_PRIV_BUS_DISABLE     : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_HWCFG1_CSB_SIZE_16M_INIT        : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_HWCFG1_CSB_SIZE_16M_TRUE        : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_HWCFG1_CSB_SIZE_16M_FALSE       : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_HWCFG1_PRIV_DIRECT_INIT         : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_HWCFG1_PRIV_DIRECT_TRUE         : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_HWCFG1_PRIV_DIRECT_FALSE        : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_HWCFG1_DMEM_APERTURES_INIT      : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_HWCFG1_DMEM_APERTURES_ENABLE    : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_HWCFG1_DMEM_APERTURES_DISABLE   : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_HWCFG1_IMEM_AUTOFILL_INIT       : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_HWCFG1_IMEM_AUTOFILL_ENABLE     : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_HWCFG1_IMEM_AUTOFILL_DISABLE    : constant NvU1 := 16#0#;

    type LW_PRGNLCL_FALCON_HWCFG1_Register is record
        Core_Rev            : NvU4;
        Security_Model      : NvU2;
        Core_Rev_Subversion : NvU2;
        Imem_Ports          : NvU4;
        Dmem_Ports          : NvU4;
        Tag_Width           : NvU5;
        Dmem_Tag_Width      : NvU5;
        Dbg_Priv_Bus        : NvU1;
        Csb_Size_16m        : NvU1;
        Priv_Direct         : NvU1;
        Dmem_Apertures      : NvU1;
        Imem_Autofill       : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_HWCFG1_Register use record
        Core_Rev            at 0 range  0 ..  3;
        Security_Model      at 0 range  4 ..  5;
        Core_Rev_Subversion at 0 range  6 ..  7;
        Imem_Ports          at 0 range  8 .. 11;
        Dmem_Ports          at 0 range 12 .. 15;
        Tag_Width           at 0 range 16 .. 20;
        Dmem_Tag_Width      at 0 range 21 .. 25;
        Dbg_Priv_Bus        at 0 range 27 .. 27;
        Csb_Size_16m        at 0 range 28 .. 28;
        Priv_Direct         at 0 range 29 .. 29;
        Dmem_Apertures      at 0 range 30 .. 30;
        Imem_Autofill       at 0 range 31 .. 31;
    end record;

    type LW_PRGNLCL_FALCON_HWCFG2_SHA_Field is (SHA_DISABLE, SHA_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_HWCFG2_SHA_Field use (SHA_DISABLE => 16#0#, SHA_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_HWCFG2_BMEM_Field is (BMEM_DISABLE, BMEM_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_HWCFG2_BMEM_Field use (BMEM_DISABLE => 16#0#, BMEM_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_HWCFG2_PKCBOOT_Field is (PKCBOOT_DISABLE, PKCBOOT_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_HWCFG2_PKCBOOT_Field use (PKCBOOT_DISABLE => 16#0#, PKCBOOT_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_HWCFG2_DBGMODE_Field is (DBGMODE_DISABLE, DBGMODE_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_HWCFG2_DBGMODE_Field use (DBGMODE_DISABLE => 16#0#, DBGMODE_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_HWCFG2_KMEM_Field is (KMEM_DISABLE, KMEM_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_HWCFG2_KMEM_Field use (KMEM_DISABLE => 16#0#, KMEM_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_HWCFG2_HSCODE_REVOCATION_Field is (REVOCATION_DISABLE, REVOCATION_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_HWCFG2_HSCODE_REVOCATION_Field use (REVOCATION_DISABLE => 16#0#, REVOCATION_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_HWCFG2_STRAP_FUN_Field is (FUN_DISABLE, FUN_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_HWCFG2_STRAP_FUN_Field use (FUN_DISABLE => 16#0#, FUN_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_HWCFG2_VHR_Field is (VHR_DISABLE, VHR_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_HWCFG2_VHR_Field use (VHR_DISABLE => 16#0#, VHR_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_HWCFG2_HS_Field is (HS_DISABLE, HS_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_HWCFG2_HS_Field use (HS_DISABLE => 16#0#, HS_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_HWCFG2_SECUREBUS_Field is (SECUREBUS_DISABLE, SECUREBUS_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_HWCFG2_SECUREBUS_Field use (SECUREBUS_DISABLE => 16#0#, SECUREBUS_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_HWCFG2_RISCV_Field is (RISCV_DISABLE, RISCV_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_HWCFG2_RISCV_Field use (RISCV_DISABLE => 16#0#, RISCV_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_HWCFG2_RISCV_PL3_DISABLE_Field is (DISABLE_FALSE, DISABLE_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_HWCFG2_RISCV_PL3_DISABLE_Field use (DISABLE_FALSE => 16#0#, DISABLE_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_HWCFG2_MEM_SCRUBBING_Field is (SCRUBBING_DONE, SCRUBBING_PENDING) with
        Size => 1;
    for LW_PRGNLCL_FALCON_HWCFG2_MEM_SCRUBBING_Field use (SCRUBBING_DONE => 16#0#, SCRUBBING_PENDING => 16#1#);
    type LW_PRGNLCL_FALCON_HWCFG2_RISCV_BR_PRIV_LOCKDOWN_Field is (LOCKDOWN_UNLOCK, LOCKDOWN_LOCK) with
        Size => 1;
    for LW_PRGNLCL_FALCON_HWCFG2_RISCV_BR_PRIV_LOCKDOWN_Field use (LOCKDOWN_UNLOCK => 16#0#, LOCKDOWN_LOCK => 16#1#);
    type LW_PRGNLCL_FALCON_HWCFG2_BOOT_FROM_HS_Field is (HS_FALSE, HS_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_HWCFG2_BOOT_FROM_HS_Field use (HS_FALSE => 16#0#, HS_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_HWCFG2_RISCV_BR_ADPAIR_Field is (ADPAIR_DISABLE, ADPAIR_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_HWCFG2_RISCV_BR_ADPAIR_Field use (ADPAIR_DISABLE => 16#0#, ADPAIR_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_HWCFG2_SCP_Field is (SCP_DISABLE, SCP_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_HWCFG2_SCP_Field use (SCP_DISABLE => 16#0#, SCP_ENABLE => 16#1#);

    type LW_PRGNLCL_FALCON_HWCFG2_Register is record
        Sha                    : LW_PRGNLCL_FALCON_HWCFG2_SHA_Field;
        Bmem                   : LW_PRGNLCL_FALCON_HWCFG2_BMEM_Field;
        Pkcboot                : LW_PRGNLCL_FALCON_HWCFG2_PKCBOOT_Field;
        Dbgmode                : LW_PRGNLCL_FALCON_HWCFG2_DBGMODE_Field;
        Kmem                   : LW_PRGNLCL_FALCON_HWCFG2_KMEM_Field;
        Hscode_Revocation      : LW_PRGNLCL_FALCON_HWCFG2_HSCODE_REVOCATION_Field;
        Strap_Fun              : LW_PRGNLCL_FALCON_HWCFG2_STRAP_FUN_Field;
        Vhr                    : LW_PRGNLCL_FALCON_HWCFG2_VHR_Field;
        Hs                     : LW_PRGNLCL_FALCON_HWCFG2_HS_Field;
        Securebus              : LW_PRGNLCL_FALCON_HWCFG2_SECUREBUS_Field;
        Riscv                  : LW_PRGNLCL_FALCON_HWCFG2_RISCV_Field;
        Riscv_Pl3_Disable      : LW_PRGNLCL_FALCON_HWCFG2_RISCV_PL3_DISABLE_Field;
        Mem_Scrubbing          : LW_PRGNLCL_FALCON_HWCFG2_MEM_SCRUBBING_Field;
        Riscv_Br_Priv_Lockdown : LW_PRGNLCL_FALCON_HWCFG2_RISCV_BR_PRIV_LOCKDOWN_Field;
        Boot_From_Hs           : LW_PRGNLCL_FALCON_HWCFG2_BOOT_FROM_HS_Field;
        Riscv_Br_Adpair        : LW_PRGNLCL_FALCON_HWCFG2_RISCV_BR_ADPAIR_Field;
        Scp                    : LW_PRGNLCL_FALCON_HWCFG2_SCP_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_HWCFG2_Register use record
        Sha                    at 0 range  0 ..  0;
        Bmem                   at 0 range  1 ..  1;
        Pkcboot                at 0 range  2 ..  2;
        Dbgmode                at 0 range  3 ..  3;
        Kmem                   at 0 range  4 ..  4;
        Hscode_Revocation      at 0 range  5 ..  5;
        Strap_Fun              at 0 range  6 ..  6;
        Vhr                    at 0 range  7 ..  7;
        Hs                     at 0 range  8 ..  8;
        Securebus              at 0 range  9 ..  9;
        Riscv                  at 0 range 10 .. 10;
        Riscv_Pl3_Disable      at 0 range 11 .. 11;
        Mem_Scrubbing          at 0 range 12 .. 12;
        Riscv_Br_Priv_Lockdown at 0 range 13 .. 13;
        Boot_From_Hs           at 0 range 14 .. 14;
        Riscv_Br_Adpair        at 0 range 15 .. 15;
        Scp                    at 0 range 16 .. 16;
    end record;

    type LW_PRGNLCL_FALCON_HWCFG3_Register is record
        Imem_Total_Size : NvU12;
        Dmem_Total_Size : NvU12;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_HWCFG3_Register use record
        Imem_Total_Size at 0 range  0 .. 11;
        Dmem_Total_Size at 0 range 16 .. 27;
    end record;

    LW_PRGNLCL_FALCON_CGCTL_CG_OVERRIDE_INIT : constant NvU1 := 16#0#;

    type LW_PRGNLCL_FALCON_CGCTL_Register is record
        Cg_Override : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_CGCTL_Register use record
        Cg_Override at 0 range 0 .. 0;
    end record;

    type LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_DMA_Field is (DMA_ENABLED, DMA_DISABLED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_DMA_Field use (DMA_ENABLED => 16#0#, DMA_DISABLED => 16#1#);
    type LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_GC6_SR_FSM_Field is (FSM_ENABLED, FSM_DISABLED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_GC6_SR_FSM_Field use (FSM_ENABLED => 16#0#, FSM_DISABLED => 16#1#);
    type LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_PIPE_Field is (PIPE_ENABLED, PIPE_DISABLED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_PIPE_Field use (PIPE_ENABLED => 16#0#, PIPE_DISABLED => 16#1#);
    type LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_DIV_Field is (DIV_ENABLED, DIV_DISABLED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_DIV_Field use (DIV_ENABLED => 16#0#, DIV_DISABLED => 16#1#);
    type LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_ICD_Field is (ICD_ENABLED, ICD_DISABLED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_ICD_Field use (ICD_ENABLED => 16#0#, ICD_DISABLED => 16#1#);
    type LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_CFG_Field is (CFG_ENABLED, CFG_DISABLED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_CFG_Field use (CFG_ENABLED => 16#0#, CFG_DISABLED => 16#1#);
    type LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_CTXSW_Field is (CTXSW_ENABLED, CTXSW_DISABLED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_CTXSW_Field use (CTXSW_ENABLED => 16#0#, CTXSW_DISABLED => 16#1#);
    type LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_PMB_Field is (PMB_ENABLED, PMB_DISABLED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_PMB_Field use (PMB_ENABLED => 16#0#, PMB_DISABLED => 16#1#);
    type LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_RF_Field is (RF_ENABLED, RF_DISABLED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_RF_Field use (RF_ENABLED => 16#0#, RF_DISABLED => 16#1#);
    type LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_MUL_Field is (MUL_ENABLED, MUL_DISABLED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_MUL_Field use (MUL_ENABLED => 16#0#, MUL_DISABLED => 16#1#);
    type LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_LDST_Field is (LDST_ENABLED, LDST_DISABLED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_LDST_Field use (LDST_ENABLED => 16#0#, LDST_DISABLED => 16#1#);
    type LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_TSYNC_Field is (TSYNC_ENABLED, TSYNC_DISABLED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_TSYNC_Field use (TSYNC_ENABLED => 16#0#, TSYNC_DISABLED => 16#1#);
    type LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_GPTMR_Field is (GPTMR_ENABLED, GPTMR_DISABLED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_GPTMR_Field use (GPTMR_ENABLED => 16#0#, GPTMR_DISABLED => 16#1#);
    type LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_WDTMR_Field is (WDTMR_ENABLED, WDTMR_DISABLED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_WDTMR_Field use (WDTMR_ENABLED => 16#0#, WDTMR_DISABLED => 16#1#);
    type LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_IRQSTAT_Field is (IRQSTAT_ENABLED, IRQSTAT_DISABLED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_IRQSTAT_Field use (IRQSTAT_ENABLED => 16#0#, IRQSTAT_DISABLED => 16#1#);
    type LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_TOP_Field is (TOP_ENABLED, TOP_DISABLED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_TOP_Field use (TOP_ENABLED => 16#0#, TOP_DISABLED => 16#1#);
    type LW_PRGNLCL_FALCON_CG2_SLCG_FBIF_Field is (FBIF_ENABLED, FBIF_DISABLED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_CG2_SLCG_FBIF_Field use (FBIF_ENABLED => 16#0#, FBIF_DISABLED => 16#1#);
    type LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_SHA_Field is (SHA_ENABLED, SHA_DISABLED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_SHA_Field use (SHA_ENABLED => 16#0#, SHA_DISABLED => 16#1#);
    LW_PRGNLCL_FALCON_CG2_SLCG_ENABLED  : constant := 16#0#;
    LW_PRGNLCL_FALCON_CG2_SLCG_DISABLED : constant := 16#1_ffff#;

    type LW_PRGNLCL_FALCON_CG2_Register is record
        Slcg_Falcon_Dma        : LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_DMA_Field;
        Slcg_Falcon_Gc6_Sr_Fsm : LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_GC6_SR_FSM_Field;
        Slcg_Falcon_Pipe       : LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_PIPE_Field;
        Slcg_Falcon_Div        : LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_DIV_Field;
        Slcg_Falcon_Icd        : LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_ICD_Field;
        Slcg_Falcon_Cfg        : LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_CFG_Field;
        Slcg_Falcon_Ctxsw      : LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_CTXSW_Field;
        Slcg_Falcon_Pmb        : LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_PMB_Field;
        Slcg_Falcon_Rf         : LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_RF_Field;
        Slcg_Falcon_Mul        : LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_MUL_Field;
        Slcg_Falcon_Ldst       : LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_LDST_Field;
        Slcg_Falcon_Tsync      : LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_TSYNC_Field;
        Slcg_Falcon_Gptmr      : LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_GPTMR_Field;
        Slcg_Falcon_Wdtmr      : LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_WDTMR_Field;
        Slcg_Falcon_Irqstat    : LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_IRQSTAT_Field;
        Slcg_Falcon_Top        : LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_TOP_Field;
        Slcg_Fbif              : LW_PRGNLCL_FALCON_CG2_SLCG_FBIF_Field;
        Slcg_Falcon_Sha        : LW_PRGNLCL_FALCON_CG2_SLCG_FALCON_SHA_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_CG2_Register use record
        Slcg_Falcon_Dma        at 0 range  1 ..  1;
        Slcg_Falcon_Gc6_Sr_Fsm at 0 range  2 ..  2;
        Slcg_Falcon_Pipe       at 0 range  3 ..  3;
        Slcg_Falcon_Div        at 0 range  4 ..  4;
        Slcg_Falcon_Icd        at 0 range  5 ..  5;
        Slcg_Falcon_Cfg        at 0 range  6 ..  6;
        Slcg_Falcon_Ctxsw      at 0 range  7 ..  7;
        Slcg_Falcon_Pmb        at 0 range  8 ..  8;
        Slcg_Falcon_Rf         at 0 range  9 ..  9;
        Slcg_Falcon_Mul        at 0 range 10 .. 10;
        Slcg_Falcon_Ldst       at 0 range 11 .. 11;
        Slcg_Falcon_Tsync      at 0 range 12 .. 12;
        Slcg_Falcon_Gptmr      at 0 range 13 .. 13;
        Slcg_Falcon_Wdtmr      at 0 range 14 .. 14;
        Slcg_Falcon_Irqstat    at 0 range 15 .. 15;
        Slcg_Falcon_Top        at 0 range 16 .. 16;
        Slcg_Fbif              at 0 range 17 .. 17;
        Slcg_Falcon_Sha        at 0 range 18 .. 18;
    end record;

    LW_PRGNLCL_FALCON_ENGID_INSTID_INIT       : constant NvU8 := 16#0#;
    LW_PRGNLCL_FALCON_ENGID_FAMILYID_SEC      : constant NvU8 := 16#1#;
    LW_PRGNLCL_FALCON_ENGID_FAMILYID_DPU      : constant NvU8 := 16#2#;
    LW_PRGNLCL_FALCON_ENGID_FAMILYID_LWDEC    : constant NvU8 := 16#3#;
    LW_PRGNLCL_FALCON_ENGID_FAMILYID_PWR_PMU  : constant NvU8 := 16#4#;
    LW_PRGNLCL_FALCON_ENGID_FAMILYID_FBFACLON : constant NvU8 := 16#5#;
    LW_PRGNLCL_FALCON_ENGID_FAMILYID_LWENC    : constant NvU8 := 16#6#;
    LW_PRGNLCL_FALCON_ENGID_FAMILYID_GPCCS    : constant NvU8 := 16#7#;
    LW_PRGNLCL_FALCON_ENGID_FAMILYID_FECS     : constant NvU8 := 16#8#;
    LW_PRGNLCL_FALCON_ENGID_FAMILYID_MINION   : constant NvU8 := 16#9#;
    LW_PRGNLCL_FALCON_ENGID_FAMILYID_XUSB     : constant NvU8 := 16#a#;
    LW_PRGNLCL_FALCON_ENGID_FAMILYID_GSP      : constant NvU8 := 16#b#;
    LW_PRGNLCL_FALCON_ENGID_FAMILYID_LWJPG    : constant NvU8 := 16#c#;
    LW_PRGNLCL_FALCON_ENGID_FAMILYID_OFA      : constant NvU8 := 16#d#;
    LW_PRGNLCL_FALCON_ENGID_FAMILYID_PSC      : constant NvU8 := 16#e#;
    LW_PRGNLCL_FALCON_ENGID_FAMILYID_SOE      : constant NvU8 := 16#f#;
    LW_PRGNLCL_FALCON_ENGID_FAMILYID_LDPC     : constant NvU8 := 16#10#;
    LW_PRGNLCL_FALCON_ENGID_FAMILYID_FSP      : constant NvU8 := 16#11#;

    type LW_PRGNLCL_FALCON_ENGID_Register is record
        Instid   : NvU8;
        Familyid : NvU8;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_ENGID_Register use record
        Instid   at 0 range 0 ..  7;
        Familyid at 0 range 8 .. 15;
    end record;

    type LW_PRGNLCL_FALCON_SCTL_LSMODE_Field is (LSMODE_FALSE, LSMODE_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SCTL_LSMODE_Field use (LSMODE_FALSE => 16#0#, LSMODE_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_SCTL_HSMODE_Field is (HSMODE_FALSE, HSMODE_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SCTL_HSMODE_Field use (HSMODE_FALSE => 16#0#, HSMODE_TRUE => 16#1#);
    LW_PRGNLCL_FALCON_SCTL_LSMODE_LEVEL_INIT     : constant NvU2 := 16#0#;
    LW_PRGNLCL_FALCON_SCTL_DEBUG_PRIV_LEVEL_INIT : constant NvU2 := 16#0#;
    type LW_PRGNLCL_FALCON_SCTL_RESET_LVLM_EN_Field is (EN_FALSE, EN_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SCTL_RESET_LVLM_EN_Field use (EN_FALSE => 16#0#, EN_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_SCTL_STALLREQ_CLR_EN_Field is (EN_FALSE, EN_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SCTL_STALLREQ_CLR_EN_Field use (EN_FALSE => 16#0#, EN_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_SCTL_AUTH_EN_Field is (EN_FALSE, EN_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SCTL_AUTH_EN_Field use (EN_FALSE => 16#0#, EN_TRUE => 16#1#);
    LW_PRGNLCL_FALCON_SCTL_UCODE_LEVEL_INIT : constant := 16#0#;

    type LW_PRGNLCL_FALCON_SCTL_Register is record
        Lsmode           : LW_PRGNLCL_FALCON_SCTL_LSMODE_Field;
        Hsmode           : LW_PRGNLCL_FALCON_SCTL_HSMODE_Field;
        Lsmode_Level     : NvU2;
        Debug_Priv_Level : NvU2;
        Reset_Lvlm_En    : LW_PRGNLCL_FALCON_SCTL_RESET_LVLM_EN_Field;
        Stallreq_Clr_En  : LW_PRGNLCL_FALCON_SCTL_STALLREQ_CLR_EN_Field;
        Auth_En          : LW_PRGNLCL_FALCON_SCTL_AUTH_EN_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_SCTL_Register use record
        Lsmode           at 0 range  0 ..  0;
        Hsmode           at 0 range  1 ..  1;
        Lsmode_Level     at 0 range  4 ..  5;
        Debug_Priv_Level at 0 range  8 ..  9;
        Reset_Lvlm_En    at 0 range 12 .. 12;
        Stallreq_Clr_En  at 0 range 13 .. 13;
        Auth_En          at 0 range 14 .. 14;
    end record;

    LW_PRGNLCL_FALCON_SCTL1_CSBLVL_MASK_INIT : constant NvU2 := 16#3#;
    LW_PRGNLCL_FALCON_SCTL1_EXTLVL_MASK_INIT : constant NvU2 := 16#3#;

    type LW_PRGNLCL_FALCON_SCTL1_Register is record
        Csblvl_Mask : NvU2;
        Extlvl_Mask : NvU2;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_SCTL1_Register use record
        Csblvl_Mask at 0 range 0 .. 1;
        Extlvl_Mask at 0 range 2 .. 3;
    end record;

    type LW_PRGNLCL_FALCON_HSCTL_TRACEPC_Field is (TRACEPC_DISABLE, TRACEPC_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_HSCTL_TRACEPC_Field use (TRACEPC_DISABLE => 16#0#, TRACEPC_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_HSCTL_SP_MIN_Field is (MIN_DISABLE, MIN_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_HSCTL_SP_MIN_Field use (MIN_DISABLE => 16#0#, MIN_ENABLE => 16#1#);

    type LW_PRGNLCL_FALCON_HSCTL_Register is record
        Tracepc : LW_PRGNLCL_FALCON_HSCTL_TRACEPC_Field;
        Sp_Min  : LW_PRGNLCL_FALCON_HSCTL_SP_MIN_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_HSCTL_Register use record
        Tracepc at 0 range 0 .. 0;
        Sp_Min  at 0 range 1 .. 1;
    end record;

    LW_PRGNLCL_FALCON_OS_VERSION_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_FALCON_OS_Register is record
        Version : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_OS_Register use record
        Version at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_FALCON_RM_CONFIG_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_FALCON_RM_Register is record
        Config : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_RM_Register use record
        Config at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_FALCON_SOFT_PM_TRIGGER_START_INIT : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_SOFT_PM_TRIGGER_END_INIT   : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_SOFT_PM_PROBE_INIT         : constant NvU6 := 16#0#;

    type LW_PRGNLCL_FALCON_SOFT_PM_Register is record
        Trigger_Start : NvU1;
        Trigger_End   : NvU1;
        Probe         : NvU6;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_SOFT_PM_Register use record
        Trigger_Start at 0 range 17 .. 17;
        Trigger_End   at 0 range 16 .. 16;
        Probe         at 0 range  0 ..  5;
    end record;

    LW_PRGNLCL_FALCON_SOFT_MODE_PROBE_INIT : constant NvU6 := 16#0#;

    type LW_PRGNLCL_FALCON_SOFT_MODE_Register is record
        Probe : NvU6;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_SOFT_MODE_Register use record
        Probe at 0 range 0 .. 5;
    end record;

    type LW_PRGNLCL_FALCON_PMM_FALCON_STALL_SEL_Field is
        (SEL_ANY, SEL_CODE, SEL_DMAQ, SEL_DMFENCE, SEL_DMWAIT, SEL_IMWAIT, SEL_IPND, SEL_LDSTQ, SEL_SB, SEL_ANY_SC, SEL_CODE_SC, SEL_DMAQ_SC, SEL_DMFENCE_SC, SEL_DMWAIT_SC,
         SEL_IMWAIT_SC, SEL_IPND_SC, SEL_LDSTQ_SC, SEL_SB_SC) with
        Size => 5;
    for LW_PRGNLCL_FALCON_PMM_FALCON_STALL_SEL_Field use (SEL_ANY => 16#0#, SEL_CODE => 16#1#, SEL_DMAQ => 16#2#, SEL_DMFENCE => 16#3#, SEL_DMWAIT => 16#4#, SEL_IMWAIT => 16#5#,
         SEL_IPND => 16#6#, SEL_LDSTQ => 16#7#, SEL_SB => 16#8#, SEL_ANY_SC => 16#9#, SEL_CODE_SC => 16#a#, SEL_DMAQ_SC => 16#b#, SEL_DMFENCE_SC => 16#c#, SEL_DMWAIT_SC => 16#d#,
         SEL_IMWAIT_SC                                            => 16#e#, SEL_IPND_SC => 16#f#, SEL_LDSTQ_SC => 16#10#, SEL_SB_SC => 16#11#);
    type LW_PRGNLCL_FALCON_PMM_FALCON_IDLE_SEL_Field is (SEL_WAITING, SEL_ENG_IDLE, SEL_MTHD_FULL, SEL_WAITING_SC, SEL_ENG_IDLE_SC, SEL_MTHD_FULL_SC) with
        Size => 3;
    for LW_PRGNLCL_FALCON_PMM_FALCON_IDLE_SEL_Field use (SEL_WAITING => 16#0#, SEL_ENG_IDLE => 16#1#, SEL_MTHD_FULL => 16#2#, SEL_WAITING_SC => 16#3#, SEL_ENG_IDLE_SC => 16#4#,
         SEL_MTHD_FULL_SC                                            => 16#5#);
    type LW_PRGNLCL_FALCON_PMM_FALCON_SOFTPM0_SEL_Field is (SEL_0, SEL_1, SEL_2, SEL_3, SEL_4, SEL_5, SEL_0_SC, SEL_1_SC, SEL_2_SC, SEL_3_SC, SEL_4_SC, SEL_5_SC) with
        Size => 4;
    for LW_PRGNLCL_FALCON_PMM_FALCON_SOFTPM0_SEL_Field use (SEL_0 => 16#0#, SEL_1 => 16#1#, SEL_2 => 16#2#, SEL_3 => 16#3#, SEL_4 => 16#4#, SEL_5 => 16#5#, SEL_0_SC => 16#6#,
         SEL_1_SC                                                 => 16#7#, SEL_2_SC => 16#8#, SEL_3_SC => 16#9#, SEL_4_SC => 16#a#, SEL_5_SC => 16#b#);
    LW_PRGNLCL_FALCON_PMM_FALCON_SOFTPM1_SEL_0 : constant NvU4 := 16#0#;
    type LW_PRGNLCL_FALCON_PMM_TFBIF_DSTAT_SEL_Field is (SEL_1KTRANSFER, SEL_RREQ, SEL_WREQ, SEL_TWREQ, SEL_1KTRANSFER_SC, SEL_RREQ_SC, SEL_WREQ_SC, SEL_TWREQ_SC) with
        Size => 3;
    for LW_PRGNLCL_FALCON_PMM_TFBIF_DSTAT_SEL_Field use (SEL_1KTRANSFER => 16#0#, SEL_RREQ => 16#1#, SEL_WREQ => 16#2#, SEL_TWREQ => 16#3#, SEL_1KTRANSFER_SC => 16#4#,
         SEL_RREQ_SC                                                    => 16#5#, SEL_WREQ_SC => 16#6#, SEL_TWREQ_SC => 16#7#);
    type LW_PRGNLCL_FALCON_PMM_TFBIF_STALL0_SEL_Field is
        (SEL_RDATQ_FULL, SEL_RACKQ_FULL, SEL_WREQQ_FULL, SEL_WDATQ_FULL, SEL_WACKQ_FULL, SEL_MREQQ_FULL, SEL_RREQ_PEND, SEL_WREQ_PEND, SEL_RDATQ_FULL_SC, SEL_RACKQ_FULL_SC,
         SEL_WREQQ_FULL_SC, SEL_WDATQ_FULL_SC, SEL_WACKQ_FULL_SC, SEL_MREQQ_FULL_SC, SEL_RREQ_PEND_SC, SEL_WREQ_PEND_SC) with
        Size => 4;
    for LW_PRGNLCL_FALCON_PMM_TFBIF_STALL0_SEL_Field use (SEL_RDATQ_FULL => 16#0#, SEL_RACKQ_FULL => 16#1#, SEL_WREQQ_FULL => 16#2#, SEL_WDATQ_FULL => 16#3#,
         SEL_WACKQ_FULL => 16#4#, SEL_MREQQ_FULL => 16#5#, SEL_RREQ_PEND => 16#6#, SEL_WREQ_PEND => 16#7#, SEL_RDATQ_FULL_SC => 16#8#, SEL_RACKQ_FULL_SC => 16#9#,
         SEL_WREQQ_FULL_SC => 16#a#, SEL_WDATQ_FULL_SC => 16#b#, SEL_WACKQ_FULL_SC => 16#c#, SEL_MREQQ_FULL_SC => 16#d#, SEL_RREQ_PEND_SC => 16#e#, SEL_WREQ_PEND_SC => 16#f#);
    LW_PRGNLCL_FALCON_PMM_TFBIF_STALL1_SEL_RDATQ_FULL : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_PMM_TFBIF_STALL2_SEL_RDATQ_FULL : constant NvU4 := 16#0#;

    type LW_PRGNLCL_FALCON_PMM_Register is record
        Falcon_Stall_Sel   : LW_PRGNLCL_FALCON_PMM_FALCON_STALL_SEL_Field;
        Falcon_Idle_Sel    : LW_PRGNLCL_FALCON_PMM_FALCON_IDLE_SEL_Field;
        Falcon_Softpm0_Sel : LW_PRGNLCL_FALCON_PMM_FALCON_SOFTPM0_SEL_Field;
        Falcon_Softpm1_Sel : NvU4;
        Tfbif_Dstat_Sel    : LW_PRGNLCL_FALCON_PMM_TFBIF_DSTAT_SEL_Field;
        Tfbif_Stall0_Sel   : LW_PRGNLCL_FALCON_PMM_TFBIF_STALL0_SEL_Field;
        Tfbif_Stall1_Sel   : NvU4;
        Tfbif_Stall2_Sel   : NvU4;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_PMM_Register use record
        Falcon_Stall_Sel   at 0 range  0 ..  4;
        Falcon_Idle_Sel    at 0 range  5 ..  7;
        Falcon_Softpm0_Sel at 0 range  8 .. 11;
        Falcon_Softpm1_Sel at 0 range 12 .. 15;
        Tfbif_Dstat_Sel    at 0 range 17 .. 19;
        Tfbif_Stall0_Sel   at 0 range 20 .. 23;
        Tfbif_Stall1_Sel   at 0 range 24 .. 27;
        Tfbif_Stall2_Sel   at 0 range 28 .. 31;
    end record;

    LW_PRGNLCL_FALCON_DEBUG1_MTHD_DRAIN_TIME_INIT           : constant NvU16 := 16#40#;
    LW_PRGNLCL_FALCON_DEBUG1_CTXSW_MODE_INIT                : constant NvU1  := 16#0#;
    LW_PRGNLCL_FALCON_DEBUG1_TRACE_FORMAT_INIT              : constant NvU1  := 16#0#;
    LW_PRGNLCL_FALCON_DEBUG1_TRACE_FORMAT_UNCOMPRESSED      : constant NvU1  := 16#0#;
    LW_PRGNLCL_FALCON_DEBUG1_TRACE_FORMAT_COMPRESSED        : constant NvU1  := 16#1#;
    LW_PRGNLCL_FALCON_DEBUG1_CTXSW_MODE1_INIT               : constant NvU1  := 16#0#;
    LW_PRGNLCL_FALCON_DEBUG1_CTXSW_MODE1_BYPASS_IDLE_CHECKS : constant NvU1  := 16#1#;
    LW_PRGNLCL_FALCON_DEBUG1_CTXSW_MODE1_DEFAULT            : constant NvU1  := 16#0#;

    type LW_PRGNLCL_FALCON_DEBUG1_Register is record
        Mthd_Drain_Time : NvU16;
        Ctxsw_Mode      : NvU1;
        Trace_Format    : NvU1;
        Ctxsw_Mode1     : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DEBUG1_Register use record
        Mthd_Drain_Time at 0 range  0 .. 15;
        Ctxsw_Mode      at 0 range 16 .. 16;
        Trace_Format    at 0 range 17 .. 17;
        Ctxsw_Mode1     at 0 range 18 .. 18;
    end record;

    type LW_PRGNLCL_FALCON_DEBUGINFO_Register is record
        Data : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DEBUGINFO_Register use record
        Data at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_FALCON_SP_MIN_VALUE_INIT : constant NvU24 := 16#0#;

    type LW_PRGNLCL_FALCON_SP_MIN_Register is record
        Value : NvU24;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_SP_MIN_Register use record
        Value at 0 range 0 .. 23;
    end record;

    type LW_PRGNLCL_FALCON_EXCI_EXCAUSE_Field is
        (EXCAUSE_TRAP0, EXCAUSE_TRAP1, EXCAUSE_TRAP2, EXCAUSE_TRAP3, EXCAUSE_ILL_INS, EXCAUSE_ILW_INS, EXCAUSE_MISS_INS, EXCAUSE_DHIT_INS, EXCAUSE_SP_OVERFLOW, EXCAUSE_BRKPT_INS,
         EXCAUSE_DMEM_MISS_INS, EXCAUSE_DMEM_DHIT_INS, EXCAUSE_DMEM_PAFAULT_INS, EXCAUSE_DMEM_PERMISSION_INS, EXCAUSE_BROM_CALL_INS, EXCAUSE_KMEM_VIOLATION_INS,
         EXCAUSE_BMEM_PERMISSION_INS) with
        Size => 5;
    for LW_PRGNLCL_FALCON_EXCI_EXCAUSE_Field use (EXCAUSE_TRAP0 => 16#0#, EXCAUSE_TRAP1 => 16#1#, EXCAUSE_TRAP2 => 16#2#, EXCAUSE_TRAP3 => 16#3#, EXCAUSE_ILL_INS => 16#8#,
         EXCAUSE_ILW_INS => 16#9#, EXCAUSE_MISS_INS => 16#a#, EXCAUSE_DHIT_INS => 16#b#, EXCAUSE_SP_OVERFLOW => 16#d#, EXCAUSE_BRKPT_INS => 16#f#, EXCAUSE_DMEM_MISS_INS => 16#10#,
         EXCAUSE_DMEM_DHIT_INS => 16#11#, EXCAUSE_DMEM_PAFAULT_INS => 16#12#, EXCAUSE_DMEM_PERMISSION_INS => 16#13#, EXCAUSE_BROM_CALL_INS => 16#15#,
         EXCAUSE_KMEM_VIOLATION_INS                             => 16#16#, EXCAUSE_BMEM_PERMISSION_INS => 16#17#);

    type LW_PRGNLCL_FALCON_EXCI_Register is record
        Expc      : NvU20;
        Excause   : LW_PRGNLCL_FALCON_EXCI_EXCAUSE_Field;
        Expc_High : NvU4;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_EXCI_Register use record
        Expc      at 0 range  0 .. 19;
        Excause   at 0 range 20 .. 24;
        Expc_High at 0 range 28 .. 31;
    end record;

    LW_PRGNLCL_FALCON_EXCI2_ADDRESS_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_FALCON_EXCI2_Register is record
        Address : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_EXCI2_Register use record
        Address at 0 range 0 .. 31;
    end record;

    type LW_PRGNLCL_FALCON_SVEC_SPR_SIGPASS_Field is (SIGPASS_FALSE, SIGPASS_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SVEC_SPR_SIGPASS_Field use (SIGPASS_FALSE => 16#0#, SIGPASS_TRUE => 16#1#);

    type LW_PRGNLCL_FALCON_SVEC_SPR_Register is record
        Sigpass : LW_PRGNLCL_FALCON_SVEC_SPR_SIGPASS_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_SVEC_SPR_Register use record
        Sigpass at 0 range 18 .. 18;
    end record;

    type LW_PRGNLCL_FALCON_CPUCTL_IINVAL_Field is (IINVAL_FALSE, IINVAL_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_CPUCTL_IINVAL_Field use (IINVAL_FALSE => 16#0#, IINVAL_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_CPUCTL_STARTCPU_Field is (STARTCPU_FALSE, STARTCPU_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_CPUCTL_STARTCPU_Field use (STARTCPU_FALSE => 16#0#, STARTCPU_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_CPUCTL_SRESET_Field is (SRESET_FALSE, SRESET_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_CPUCTL_SRESET_Field use (SRESET_FALSE => 16#0#, SRESET_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_CPUCTL_HRESET_Field is (HRESET_FALSE, HRESET_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_CPUCTL_HRESET_Field use (HRESET_FALSE => 16#0#, HRESET_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_CPUCTL_HALTED_Field is (HALTED_FALSE, HALTED_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_CPUCTL_HALTED_Field use (HALTED_FALSE => 16#0#, HALTED_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_CPUCTL_STOPPED_Field is (STOPPED_FALSE, STOPPED_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_CPUCTL_STOPPED_Field use (STOPPED_FALSE => 16#0#, STOPPED_TRUE => 16#1#);
    LW_PRGNLCL_FALCON_CPUCTL_ALIAS_EN_TRUE  : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_CPUCTL_ALIAS_EN_FALSE : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_CPUCTL_ALIAS_EN_INIT  : constant NvU1 := 16#0#;

    type LW_PRGNLCL_FALCON_CPUCTL_Register is record
        Iinval   : LW_PRGNLCL_FALCON_CPUCTL_IINVAL_Field;
        Startcpu : LW_PRGNLCL_FALCON_CPUCTL_STARTCPU_Field;
        Sreset   : LW_PRGNLCL_FALCON_CPUCTL_SRESET_Field;
        Hreset   : LW_PRGNLCL_FALCON_CPUCTL_HRESET_Field;
        Halted   : LW_PRGNLCL_FALCON_CPUCTL_HALTED_Field;
        Stopped  : LW_PRGNLCL_FALCON_CPUCTL_STOPPED_Field;
        Alias_En : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_CPUCTL_Register use record
        Iinval   at 0 range 0 .. 0;
        Startcpu at 0 range 1 .. 1;
        Sreset   at 0 range 2 .. 2;
        Hreset   at 0 range 3 .. 3;
        Halted   at 0 range 4 .. 4;
        Stopped  at 0 range 5 .. 5;
        Alias_En at 0 range 6 .. 6;
    end record;

    type LW_PRGNLCL_FALCON_CPUCTL_ALIAS_STARTCPU_Field is (STARTCPU_FALSE, STARTCPU_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_CPUCTL_ALIAS_STARTCPU_Field use (STARTCPU_FALSE => 16#0#, STARTCPU_TRUE => 16#1#);

    type LW_PRGNLCL_FALCON_CPUCTL_ALIAS_Register is record
        Startcpu : LW_PRGNLCL_FALCON_CPUCTL_ALIAS_STARTCPU_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_CPUCTL_ALIAS_Register use record
        Startcpu at 0 range 1 .. 1;
    end record;

    LW_PRGNLCL_FALCON_STACKCFG_BOTTOM_INIT   : constant NvU24 := 16#0#;
    LW_PRGNLCL_FALCON_STACKCFG_SPEXC_INIT    : constant NvU1  := 16#0#;
    LW_PRGNLCL_FALCON_STACKCFG_SPEXC_DISABLE : constant NvU1  := 16#0#;
    LW_PRGNLCL_FALCON_STACKCFG_SPEXC_ENABLE  : constant NvU1  := 16#1#;

    type LW_PRGNLCL_FALCON_STACKCFG_Register is record
        Bottom : NvU24;
        Spexc  : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_STACKCFG_Register use record
        Bottom at 0 range  0 .. 23;
        Spexc  at 0 range 31 .. 31;
    end record;

    LW_PRGNLCL_FALCON_BOOTVEC_VEC_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_FALCON_BOOTVEC_Register is record
        Vec : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_BOOTVEC_Register use record
        Vec at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_FALCON_DBGCTL_ICD_CMDWL_STOP_INIT        : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_DBGCTL_ICD_CMDWL_STOP_DISABLE     : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_DBGCTL_ICD_CMDWL_STOP_ENABLE      : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_DBGCTL_ICD_CMDWL_RUN_INIT         : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_DBGCTL_ICD_CMDWL_RUN_DISABLE      : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_DBGCTL_ICD_CMDWL_RUN_ENABLE       : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_DBGCTL_ICD_CMDWL_RUNB_INIT        : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_DBGCTL_ICD_CMDWL_RUNB_DISABLE     : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_DBGCTL_ICD_CMDWL_RUNB_ENABLE      : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_DBGCTL_ICD_CMDWL_STEP_INIT        : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_DBGCTL_ICD_CMDWL_STEP_DISABLE     : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_DBGCTL_ICD_CMDWL_STEP_ENABLE      : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_DBGCTL_ICD_CMDWL_EMASK_INIT       : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_DBGCTL_ICD_CMDWL_EMASK_DISABLE    : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_DBGCTL_ICD_CMDWL_EMASK_ENABLE     : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_DBGCTL_ICD_CMDWL_RREG_SPR_INIT    : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_DBGCTL_ICD_CMDWL_RREG_SPR_DISABLE : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_DBGCTL_ICD_CMDWL_RREG_SPR_ENABLE  : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_DBGCTL_ICD_CMDWL_RSTAT_INIT       : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_DBGCTL_ICD_CMDWL_RSTAT_DISABLE    : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_DBGCTL_ICD_CMDWL_RSTAT_ENABLE     : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_DBGCTL_PRIVWL_IBRKPT_INIT         : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_DBGCTL_PRIVWL_IBRKPT_DISABLE      : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_DBGCTL_PRIVWL_IBRKPT_ENABLE       : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_DBGCTL_ICD_CMDWL_RREG_GPR_INIT    : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_DBGCTL_ICD_CMDWL_RREG_GPR_DISABLE : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_DBGCTL_ICD_CMDWL_RREG_GPR_ENABLE  : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_DBGCTL_ICD_CMDWL_RDM_INIT         : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_DBGCTL_ICD_CMDWL_RDM_DISABLE      : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_DBGCTL_ICD_CMDWL_RDM_ENABLE       : constant NvU1 := 16#1#;
    type LW_PRGNLCL_FALCON_DBGCTL_TRACE_MODE_Field is (MODE_FULL, MODE_REDUCED, MODE_STACK) with
        Size => 2;
    for LW_PRGNLCL_FALCON_DBGCTL_TRACE_MODE_Field use (MODE_FULL => 16#0#, MODE_REDUCED => 16#1#, MODE_STACK => 16#2#);
    LW_PRGNLCL_FALCON_DBGCTL_CYA_INIT   : constant NvU16 := 16#0#;
    LW_PRGNLCL_FALCON_DBGCTL_CYA_ENABLE : constant NvU16 := 16#8afe#;
    LW_PRGNLCL_FALCON_DBGCTL_VAL_INIT   : constant       := 16#0#;

    type LW_PRGNLCL_FALCON_DBGCTL_Register is record
        Icd_Cmdwl_Stop     : NvU1;
        Icd_Cmdwl_Run      : NvU1;
        Icd_Cmdwl_Runb     : NvU1;
        Icd_Cmdwl_Step     : NvU1;
        Icd_Cmdwl_Emask    : NvU1;
        Icd_Cmdwl_Rreg_Spr : NvU1;
        Icd_Cmdwl_Rstat    : NvU1;
        Privwl_Ibrkpt      : NvU1;
        Icd_Cmdwl_Rreg_Gpr : NvU1;
        Icd_Cmdwl_Rdm      : NvU1;
        Trace_Mode         : LW_PRGNLCL_FALCON_DBGCTL_TRACE_MODE_Field;
        Cya                : NvU16;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DBGCTL_Register use record
        Icd_Cmdwl_Stop     at 0 range  0 ..  0;
        Icd_Cmdwl_Run      at 0 range  1 ..  1;
        Icd_Cmdwl_Runb     at 0 range  2 ..  2;
        Icd_Cmdwl_Step     at 0 range  3 ..  3;
        Icd_Cmdwl_Emask    at 0 range  4 ..  4;
        Icd_Cmdwl_Rreg_Spr at 0 range  5 ..  5;
        Icd_Cmdwl_Rstat    at 0 range  6 ..  6;
        Privwl_Ibrkpt      at 0 range  7 ..  7;
        Icd_Cmdwl_Rreg_Gpr at 0 range  8 ..  8;
        Icd_Cmdwl_Rdm      at 0 range  9 ..  9;
        Trace_Mode         at 0 range 12 .. 13;
        Cya                at 0 range 16 .. 31;
    end record;

    LW_PRGNLCL_FALCON_IBRKPT1_PC_INIT          : constant NvU24 := 16#0#;
    LW_PRGNLCL_FALCON_IBRKPT1_SUPPRESS_INIT    : constant NvU1  := 16#0#;
    LW_PRGNLCL_FALCON_IBRKPT1_SUPPRESS_DISABLE : constant NvU1  := 16#0#;
    LW_PRGNLCL_FALCON_IBRKPT1_SUPPRESS_ENABLE  : constant NvU1  := 16#1#;
    LW_PRGNLCL_FALCON_IBRKPT1_SKIP_INIT        : constant NvU1  := 16#0#;
    LW_PRGNLCL_FALCON_IBRKPT1_SKIP_DISABLE     : constant NvU1  := 16#0#;
    LW_PRGNLCL_FALCON_IBRKPT1_SKIP_ENABLE      : constant NvU1  := 16#1#;
    LW_PRGNLCL_FALCON_IBRKPT1_EN_INIT          : constant NvU1  := 16#0#;
    LW_PRGNLCL_FALCON_IBRKPT1_EN_DISABLE       : constant NvU1  := 16#0#;
    LW_PRGNLCL_FALCON_IBRKPT1_EN_ENABLE        : constant NvU1  := 16#1#;

    type LW_PRGNLCL_FALCON_IBRKPT1_Register is record
        Pc       : NvU24;
        Suppress : NvU1;
        Skip     : NvU1;
        En       : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_IBRKPT1_Register use record
        Pc       at 0 range  0 .. 23;
        Suppress at 0 range 29 .. 29;
        Skip     at 0 range 30 .. 30;
        En       at 0 range 31 .. 31;
    end record;

    LW_PRGNLCL_FALCON_IBRKPT2_PC_INIT          : constant NvU24 := 16#0#;
    LW_PRGNLCL_FALCON_IBRKPT2_SUPPRESS_INIT    : constant NvU1  := 16#0#;
    LW_PRGNLCL_FALCON_IBRKPT2_SUPPRESS_DISABLE : constant NvU1  := 16#0#;
    LW_PRGNLCL_FALCON_IBRKPT2_SUPPRESS_ENABLE  : constant NvU1  := 16#1#;
    LW_PRGNLCL_FALCON_IBRKPT2_SKIP_INIT        : constant NvU1  := 16#0#;
    LW_PRGNLCL_FALCON_IBRKPT2_SKIP_DISABLE     : constant NvU1  := 16#0#;
    LW_PRGNLCL_FALCON_IBRKPT2_SKIP_ENABLE      : constant NvU1  := 16#1#;
    LW_PRGNLCL_FALCON_IBRKPT2_EN_INIT          : constant NvU1  := 16#0#;
    LW_PRGNLCL_FALCON_IBRKPT2_EN_DISABLE       : constant NvU1  := 16#0#;
    LW_PRGNLCL_FALCON_IBRKPT2_EN_ENABLE        : constant NvU1  := 16#1#;

    type LW_PRGNLCL_FALCON_IBRKPT2_Register is record
        Pc       : NvU24;
        Suppress : NvU1;
        Skip     : NvU1;
        En       : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_IBRKPT2_Register use record
        Pc       at 0 range  0 .. 23;
        Suppress at 0 range 29 .. 29;
        Skip     at 0 range 30 .. 30;
        En       at 0 range 31 .. 31;
    end record;

    LW_PRGNLCL_FALCON_IBRKPT3_PC_INIT          : constant NvU24 := 16#0#;
    LW_PRGNLCL_FALCON_IBRKPT3_SUPPRESS_INIT    : constant NvU1  := 16#0#;
    LW_PRGNLCL_FALCON_IBRKPT3_SUPPRESS_DISABLE : constant NvU1  := 16#0#;
    LW_PRGNLCL_FALCON_IBRKPT3_SUPPRESS_ENABLE  : constant NvU1  := 16#1#;
    LW_PRGNLCL_FALCON_IBRKPT3_SKIP_INIT        : constant NvU1  := 16#0#;
    LW_PRGNLCL_FALCON_IBRKPT3_SKIP_DISABLE     : constant NvU1  := 16#0#;
    LW_PRGNLCL_FALCON_IBRKPT3_SKIP_ENABLE      : constant NvU1  := 16#1#;
    LW_PRGNLCL_FALCON_IBRKPT3_EN_INIT          : constant NvU1  := 16#0#;
    LW_PRGNLCL_FALCON_IBRKPT3_EN_DISABLE       : constant NvU1  := 16#0#;
    LW_PRGNLCL_FALCON_IBRKPT3_EN_ENABLE        : constant NvU1  := 16#1#;

    type LW_PRGNLCL_FALCON_IBRKPT3_Register is record
        Pc       : NvU24;
        Suppress : NvU1;
        Skip     : NvU1;
        En       : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_IBRKPT3_Register use record
        Pc       at 0 range  0 .. 23;
        Suppress at 0 range 29 .. 29;
        Skip     at 0 range 30 .. 30;
        En       at 0 range 31 .. 31;
    end record;

    LW_PRGNLCL_FALCON_IBRKPT4_PC_INIT          : constant NvU24 := 16#0#;
    LW_PRGNLCL_FALCON_IBRKPT4_SUPPRESS_INIT    : constant NvU1  := 16#0#;
    LW_PRGNLCL_FALCON_IBRKPT4_SUPPRESS_DISABLE : constant NvU1  := 16#0#;
    LW_PRGNLCL_FALCON_IBRKPT4_SUPPRESS_ENABLE  : constant NvU1  := 16#1#;
    LW_PRGNLCL_FALCON_IBRKPT4_SKIP_INIT        : constant NvU1  := 16#0#;
    LW_PRGNLCL_FALCON_IBRKPT4_SKIP_DISABLE     : constant NvU1  := 16#0#;
    LW_PRGNLCL_FALCON_IBRKPT4_SKIP_ENABLE      : constant NvU1  := 16#1#;
    LW_PRGNLCL_FALCON_IBRKPT4_EN_INIT          : constant NvU1  := 16#0#;
    LW_PRGNLCL_FALCON_IBRKPT4_EN_DISABLE       : constant NvU1  := 16#0#;
    LW_PRGNLCL_FALCON_IBRKPT4_EN_ENABLE        : constant NvU1  := 16#1#;

    type LW_PRGNLCL_FALCON_IBRKPT4_Register is record
        Pc       : NvU24;
        Suppress : NvU1;
        Skip     : NvU1;
        En       : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_IBRKPT4_Register use record
        Pc       at 0 range  0 .. 23;
        Suppress at 0 range 29 .. 29;
        Skip     at 0 range 30 .. 30;
        En       at 0 range 31 .. 31;
    end record;

    LW_PRGNLCL_FALCON_IBRKPT5_PC_INIT          : constant NvU24 := 16#0#;
    LW_PRGNLCL_FALCON_IBRKPT5_SUPPRESS_INIT    : constant NvU1  := 16#0#;
    LW_PRGNLCL_FALCON_IBRKPT5_SUPPRESS_DISABLE : constant NvU1  := 16#0#;
    LW_PRGNLCL_FALCON_IBRKPT5_SUPPRESS_ENABLE  : constant NvU1  := 16#1#;
    LW_PRGNLCL_FALCON_IBRKPT5_SKIP_INIT        : constant NvU1  := 16#0#;
    LW_PRGNLCL_FALCON_IBRKPT5_SKIP_DISABLE     : constant NvU1  := 16#0#;
    LW_PRGNLCL_FALCON_IBRKPT5_SKIP_ENABLE      : constant NvU1  := 16#1#;
    LW_PRGNLCL_FALCON_IBRKPT5_EN_INIT          : constant NvU1  := 16#0#;
    LW_PRGNLCL_FALCON_IBRKPT5_EN_DISABLE       : constant NvU1  := 16#0#;
    LW_PRGNLCL_FALCON_IBRKPT5_EN_ENABLE        : constant NvU1  := 16#1#;

    type LW_PRGNLCL_FALCON_IBRKPT5_Register is record
        Pc       : NvU24;
        Suppress : NvU1;
        Skip     : NvU1;
        En       : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_IBRKPT5_Register use record
        Pc       at 0 range  0 .. 23;
        Suppress at 0 range 29 .. 29;
        Skip     at 0 range 30 .. 30;
        En       at 0 range 31 .. 31;
    end record;

    type LW_PRGNLCL_FALCON_ICD_CMD_OPC_Field is
        (OPC_STOP, OPC_RUN, OPC_JRUN, OPC_RUNB, OPC_JRUNB, OPC_STEP, OPC_JSTEP, OPC_EMASK, OPC_RREG, OPC_WREG, OPC_RDM, OPC_WDM, OPC_RCM, OPC_WCM, OPC_RSTAT, OPC_SBU) with
        Size => 4;
    for LW_PRGNLCL_FALCON_ICD_CMD_OPC_Field use (OPC_STOP => 16#0#, OPC_RUN => 16#1#, OPC_JRUN => 16#2#, OPC_RUNB => 16#3#, OPC_JRUNB => 16#4#, OPC_STEP => 16#5#,
         OPC_JSTEP => 16#6#, OPC_EMASK => 16#7#, OPC_RREG => 16#8#, OPC_WREG => 16#9#, OPC_RDM => 16#a#, OPC_WDM => 16#b#, OPC_RCM => 16#c#, OPC_WCM => 16#d#, OPC_RSTAT => 16#e#,
         OPC_SBU                                          => 16#f#);
    type LW_PRGNLCL_FALCON_ICD_CMD_SZ_Field is (SZ_B, SZ_HW, SZ_W) with
        Size => 2;
    for LW_PRGNLCL_FALCON_ICD_CMD_SZ_Field use (SZ_B => 16#0#, SZ_HW => 16#1#, SZ_W => 16#2#);
    LW_PRGNLCL_FALCON_ICD_CMD_IDX_REG0   : constant NvU5 := 16#0#;
    LW_PRGNLCL_FALCON_ICD_CMD_IDX_REG1   : constant NvU5 := 16#1#;
    LW_PRGNLCL_FALCON_ICD_CMD_IDX_REG2   : constant NvU5 := 16#2#;
    LW_PRGNLCL_FALCON_ICD_CMD_IDX_REG3   : constant NvU5 := 16#3#;
    LW_PRGNLCL_FALCON_ICD_CMD_IDX_REG4   : constant NvU5 := 16#4#;
    LW_PRGNLCL_FALCON_ICD_CMD_IDX_REG5   : constant NvU5 := 16#5#;
    LW_PRGNLCL_FALCON_ICD_CMD_IDX_REG6   : constant NvU5 := 16#6#;
    LW_PRGNLCL_FALCON_ICD_CMD_IDX_REG7   : constant NvU5 := 16#7#;
    LW_PRGNLCL_FALCON_ICD_CMD_IDX_REG8   : constant NvU5 := 16#8#;
    LW_PRGNLCL_FALCON_ICD_CMD_IDX_REG9   : constant NvU5 := 16#9#;
    LW_PRGNLCL_FALCON_ICD_CMD_IDX_REG10  : constant NvU5 := 16#a#;
    LW_PRGNLCL_FALCON_ICD_CMD_IDX_REG11  : constant NvU5 := 16#b#;
    LW_PRGNLCL_FALCON_ICD_CMD_IDX_REG12  : constant NvU5 := 16#c#;
    LW_PRGNLCL_FALCON_ICD_CMD_IDX_REG13  : constant NvU5 := 16#d#;
    LW_PRGNLCL_FALCON_ICD_CMD_IDX_REG14  : constant NvU5 := 16#e#;
    LW_PRGNLCL_FALCON_ICD_CMD_IDX_REG15  : constant NvU5 := 16#f#;
    LW_PRGNLCL_FALCON_ICD_CMD_IDX_IV0    : constant NvU5 := 16#10#;
    LW_PRGNLCL_FALCON_ICD_CMD_IDX_IV1    : constant NvU5 := 16#11#;
    LW_PRGNLCL_FALCON_ICD_CMD_IDX_EV     : constant NvU5 := 16#13#;
    LW_PRGNLCL_FALCON_ICD_CMD_IDX_SP     : constant NvU5 := 16#14#;
    LW_PRGNLCL_FALCON_ICD_CMD_IDX_PC     : constant NvU5 := 16#15#;
    LW_PRGNLCL_FALCON_ICD_CMD_IDX_IMB    : constant NvU5 := 16#16#;
    LW_PRGNLCL_FALCON_ICD_CMD_IDX_DMB    : constant NvU5 := 16#17#;
    LW_PRGNLCL_FALCON_ICD_CMD_IDX_CSW    : constant NvU5 := 16#18#;
    LW_PRGNLCL_FALCON_ICD_CMD_IDX_CCR    : constant NvU5 := 16#19#;
    LW_PRGNLCL_FALCON_ICD_CMD_IDX_SEC    : constant NvU5 := 16#1a#;
    LW_PRGNLCL_FALCON_ICD_CMD_IDX_CTX    : constant NvU5 := 16#1b#;
    LW_PRGNLCL_FALCON_ICD_CMD_IDX_EXCI   : constant NvU5 := 16#1c#;
    LW_PRGNLCL_FALCON_ICD_CMD_IDX_SEC1   : constant NvU5 := 16#1e#;
    LW_PRGNLCL_FALCON_ICD_CMD_IDX_IMB1   : constant NvU5 := 16#1e#;
    LW_PRGNLCL_FALCON_ICD_CMD_IDX_DMB1   : constant NvU5 := 16#1f#;
    LW_PRGNLCL_FALCON_ICD_CMD_IDX_RSTAT0 : constant NvU5 := 16#0#;
    LW_PRGNLCL_FALCON_ICD_CMD_IDX_RSTAT1 : constant NvU5 := 16#1#;
    LW_PRGNLCL_FALCON_ICD_CMD_IDX_RSTAT2 : constant NvU5 := 16#2#;
    LW_PRGNLCL_FALCON_ICD_CMD_IDX_RSTAT3 : constant NvU5 := 16#3#;
    LW_PRGNLCL_FALCON_ICD_CMD_IDX_RSTAT4 : constant NvU5 := 16#4#;
    LW_PRGNLCL_FALCON_ICD_CMD_IDX_RSTAT5 : constant NvU5 := 16#5#;
    LW_PRGNLCL_FALCON_ICD_CMD_IDX_WB0    : constant NvU5 := 16#0#;
    LW_PRGNLCL_FALCON_ICD_CMD_IDX_WB1    : constant NvU5 := 16#1#;
    LW_PRGNLCL_FALCON_ICD_CMD_IDX_WB2    : constant NvU5 := 16#2#;
    LW_PRGNLCL_FALCON_ICD_CMD_IDX_WB3    : constant NvU5 := 16#3#;
    type LW_PRGNLCL_FALCON_ICD_CMD_ERROR_Field is (ERROR_FALSE, ERROR_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_ICD_CMD_ERROR_Field use (ERROR_FALSE => 16#0#, ERROR_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_ICD_CMD_RDVLD_Field is (RDVLD_FALSE, RDVLD_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_ICD_CMD_RDVLD_Field use (RDVLD_FALSE => 16#0#, RDVLD_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_ICD_CMD_EMASK_TRAP0_Field is (TRAP0_FALSE, TRAP0_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_ICD_CMD_EMASK_TRAP0_Field use (TRAP0_FALSE => 16#0#, TRAP0_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_ICD_CMD_EMASK_TRAP1_Field is (TRAP1_FALSE, TRAP1_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_ICD_CMD_EMASK_TRAP1_Field use (TRAP1_FALSE => 16#0#, TRAP1_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_ICD_CMD_EMASK_TRAP2_Field is (TRAP2_FALSE, TRAP2_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_ICD_CMD_EMASK_TRAP2_Field use (TRAP2_FALSE => 16#0#, TRAP2_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_ICD_CMD_EMASK_TRAP3_Field is (TRAP3_FALSE, TRAP3_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_ICD_CMD_EMASK_TRAP3_Field use (TRAP3_FALSE => 16#0#, TRAP3_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_ICD_CMD_EMASK_EXC_UNIMP_Field is (UNIMP_FALSE, UNIMP_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_ICD_CMD_EMASK_EXC_UNIMP_Field use (UNIMP_FALSE => 16#0#, UNIMP_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_ICD_CMD_EMASK_EXC_IMISS_Field is (IMISS_FALSE, IMISS_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_ICD_CMD_EMASK_EXC_IMISS_Field use (IMISS_FALSE => 16#0#, IMISS_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_ICD_CMD_EMASK_EXC_IMHIT_Field is (IMHIT_FALSE, IMHIT_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_ICD_CMD_EMASK_EXC_IMHIT_Field use (IMHIT_FALSE => 16#0#, IMHIT_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_ICD_CMD_EMASK_EXC_IBREAK_Field is (IBREAK_FALSE, IBREAK_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_ICD_CMD_EMASK_EXC_IBREAK_Field use (IBREAK_FALSE => 16#0#, IBREAK_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_ICD_CMD_EMASK_IV0_Field is (IV0_FALSE, IV0_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_ICD_CMD_EMASK_IV0_Field use (IV0_FALSE => 16#0#, IV0_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_ICD_CMD_EMASK_IV1_Field is (IV1_FALSE, IV1_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_ICD_CMD_EMASK_IV1_Field use (IV1_FALSE => 16#0#, IV1_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_ICD_CMD_EMASK_IV2_Field is (IV2_FALSE, IV2_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_ICD_CMD_EMASK_IV2_Field use (IV2_FALSE => 16#0#, IV2_TRUE => 16#1#);

    type LW_PRGNLCL_FALCON_ICD_CMD_Register is record
        Opc              : LW_PRGNLCL_FALCON_ICD_CMD_OPC_Field;
        Sz               : LW_PRGNLCL_FALCON_ICD_CMD_SZ_Field;
        Idx              : NvU5;
        Error            : LW_PRGNLCL_FALCON_ICD_CMD_ERROR_Field;
        Rdvld            : LW_PRGNLCL_FALCON_ICD_CMD_RDVLD_Field;
        Emask_Trap0      : LW_PRGNLCL_FALCON_ICD_CMD_EMASK_TRAP0_Field;
        Emask_Trap1      : LW_PRGNLCL_FALCON_ICD_CMD_EMASK_TRAP1_Field;
        Emask_Trap2      : LW_PRGNLCL_FALCON_ICD_CMD_EMASK_TRAP2_Field;
        Emask_Trap3      : LW_PRGNLCL_FALCON_ICD_CMD_EMASK_TRAP3_Field;
        Emask_Exc_Unimp  : LW_PRGNLCL_FALCON_ICD_CMD_EMASK_EXC_UNIMP_Field;
        Emask_Exc_Imiss  : LW_PRGNLCL_FALCON_ICD_CMD_EMASK_EXC_IMISS_Field;
        Emask_Exc_Imhit  : LW_PRGNLCL_FALCON_ICD_CMD_EMASK_EXC_IMHIT_Field;
        Emask_Exc_Ibreak : LW_PRGNLCL_FALCON_ICD_CMD_EMASK_EXC_IBREAK_Field;
        Emask_Iv0        : LW_PRGNLCL_FALCON_ICD_CMD_EMASK_IV0_Field;
        Emask_Iv1        : LW_PRGNLCL_FALCON_ICD_CMD_EMASK_IV1_Field;
        Emask_Iv2        : LW_PRGNLCL_FALCON_ICD_CMD_EMASK_IV2_Field;
        Emask_Ext        : NvU5;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_ICD_CMD_Register use record
        Opc              at 0 range  0 ..  3;
        Sz               at 0 range  6 ..  7;
        Idx              at 0 range  8 .. 12;
        Error            at 0 range 14 .. 14;
        Rdvld            at 0 range 15 .. 15;
        Emask_Trap0      at 0 range 16 .. 16;
        Emask_Trap1      at 0 range 17 .. 17;
        Emask_Trap2      at 0 range 18 .. 18;
        Emask_Trap3      at 0 range 19 .. 19;
        Emask_Exc_Unimp  at 0 range 20 .. 20;
        Emask_Exc_Imiss  at 0 range 21 .. 21;
        Emask_Exc_Imhit  at 0 range 22 .. 22;
        Emask_Exc_Ibreak at 0 range 23 .. 23;
        Emask_Iv0        at 0 range 24 .. 24;
        Emask_Iv1        at 0 range 25 .. 25;
        Emask_Iv2        at 0 range 26 .. 26;
        Emask_Ext        at 0 range 27 .. 31;
    end record;

    type LW_PRGNLCL_FALCON_ICD_ADDR_Register is record
        Addr : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_ICD_ADDR_Register use record
        Addr at 0 range 0 .. 31;
    end record;

    type LW_PRGNLCL_FALCON_ICD_WDATA_Register is record
        Data : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_ICD_WDATA_Register use record
        Data at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT0_MEM_STALL_TRUE             : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT0_MEM_STALL_FALSE            : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT0_DMA_STALL_TRUE             : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT0_DMA_STALL_FALSE            : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT0_FENCE_STALL_TRUE           : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT0_FENCE_STALL_FALSE          : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT0_DIV_STALL_TRUE             : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT0_DIV_STALL_FALSE            : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT0_DMA_STALL_DMAQ_TRUE        : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT0_DMA_STALL_DMAQ_FALSE       : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT0_DMA_STALL_DMWAITING_TRUE   : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT0_DMA_STALL_DMWAITING_FALSE  : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT0_DMA_STALL_IMWAITING_TRUE   : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT0_DMA_STALL_IMWAITING_FALSE  : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT0_ANY_STALL_TRUE             : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT0_ANY_STALL_FALSE            : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT0_SBFULL_STALL_TRUE          : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT0_SBFULL_STALL_FALSE         : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT0_SBHIT_STALL_TRUE           : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT0_SBHIT_STALL_FALSE          : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT0_FLOW_STALL_TRUE            : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT0_FLOW_STALL_FALSE           : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT0_SP_STALL_TRUE              : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT0_SP_STALL_FALSE             : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT0_BL_STALL_TRUE              : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT0_BL_STALL_FALSE             : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT0_IPND_STALL_TRUE            : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT0_IPND_STALL_FALSE           : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT0_LDSTQ_STALL_TRUE           : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT0_LDSTQ_STALL_FALSE          : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT0_NOINSTR_STALL_TRUE         : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT0_NOINSTR_STALL_FALSE        : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT0_HALTSTOP_FLUSH_TRUE        : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT0_HALTSTOP_FLUSH_FALSE       : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT0_AFILL_FLUSH_TRUE           : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT0_AFILL_FLUSH_FALSE          : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT0_EXC_FLUSH_TRUE             : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT0_EXC_FLUSH_FASLE            : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT0_VALIDRD_TRUE               : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT0_VALIDRD_FALSE              : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT0_WAITING_TRUE               : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT0_WAITING_FALSE              : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT0_HALTED_TRUE                : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT0_HALTED_FALSE               : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT0_MTHD_FULL_TRUE             : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT0_MTHD_FULL_FALSE            : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT1_WB0_SZ_IS_BYTE             : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT1_WB0_SZ_IS_HALFWORD         : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT1_WB0_SZ_IS_WORD             : constant := 16#2#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT1_WB1_SZ_IS_BYTE             : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT1_WB1_SZ_IS_HALFWORD         : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT1_WB1_SZ_IS_WORD             : constant := 16#2#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT1_WB2_SZ_IS_BYTE             : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT1_WB2_SZ_IS_HALFWORD         : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT1_WB2_SZ_IS_WORD             : constant := 16#2#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT1_WB3_SZ_IS_BYTE             : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT1_WB3_SZ_IS_HALFWORD         : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT1_WB3_SZ_IS_WORD             : constant := 16#2#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT3_MTHD_IDLE_TRUE             : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT3_MTHD_IDLE_FALSE            : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT3_CTXSW_IDLE_TRUE            : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT3_CTXSW_IDLE_FALSE           : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT3_DMA_IDLE_TRUE              : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT3_DMA_IDLE_FALSE             : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT3_SCP_IDLE_TRUE              : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT3_SCP_IDLE_FALSE             : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT3_LDST_IDLE_TRUE             : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT3_LDST_IDLE_FALSE            : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT3_SBWB_EMPTY_TRUE            : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT3_SBWB_EMPTY_FALSE           : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT3_CTXSW_STATE_IDLE           : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT3_CTXSW_STATE_SM_CHECK       : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT3_CTXSW_STATE_SM_SAVE        : constant := 16#2#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT3_CTXSW_STATE_SM_SAVE_WAIT   : constant := 16#3#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT3_CTXSW_STATE_SM_BLK_BIND    : constant := 16#4#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT3_CTXSW_STATE_SM_RESET       : constant := 16#5#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT3_CTXSW_STATE_SM_RESETWAIT   : constant := 16#6#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT3_CTXSW_STATE_SM_ACK         : constant := 16#7#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT3_CTXSW_PEND_TRUE            : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT3_CTXSW_PEND_FALSE           : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT3_DMA_FBREQ_IDLE_TRUE        : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT3_DMA_FBREQ_IDLE_FALSE       : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT3_DMA_ACKQ_EMPTY_TRUE        : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT3_DMA_ACKQ_EMPTY_FALSE       : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT3_DMA_RDQ_EMPTY_TRUE         : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT3_DMA_RDQ_EMPTY_FALSE        : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT3_DMA_WR_BUSY_TRUE           : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT3_DMA_WR_BUSY_FALSE          : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT3_DMA_RD_BUSY_TRUE           : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT3_DMA_RD_BUSY_FALSE          : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT3_LDST_XT_BUSY_TRUE          : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT3_LDST_XT_BUSY_FALSE         : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT3_LDST_XT_BLOCK_TRUE         : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT3_LDST_XT_BLOCK_FALSE        : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT3_ENG_IDLE_TRUE              : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT3_ENG_IDLE_FALSE             : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT4_ICD_STATE_NORMAL           : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT4_ICD_STATE_WAIT_ISSUE_CLEAR : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT4_ICD_STATE_WAIT_EXLDQ_CLEAR : constant := 16#2#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT4_ICD_STATE_FULL_DBG_MODE    : constant := 16#3#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT4_ICD_MODE_SUPPRESSICD       : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT4_ICD_MODE_ENTERICD_IBRK     : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT4_ICD_MODE_ENTERICD_STEP     : constant := 16#2#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT4_ICD_EMASK_TRAP0_TRUE       : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT4_ICD_EMASK_TRAP0_FALSE      : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT4_ICD_EMASK_TRAP1_TRUE       : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT4_ICD_EMASK_TRAP1_FALSE      : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT4_ICD_EMASK_TRAP2_TRUE       : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT4_ICD_EMASK_TRAP2_FALSE      : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT4_ICD_EMASK_TRAP3_TRUE       : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT4_ICD_EMASK_TRAP3_FALSE      : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT4_ICD_EMASK_EXC_UNIMP_TRUE   : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT4_ICD_EMASK_EXC_UNIMP_FALSE  : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT4_ICD_EMASK_EXC_IMISS_TRUE   : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT4_ICD_EMASK_EXC_IMISS_FALSE  : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT4_ICD_EMASK_EXC_IMHIT_TRUE   : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT4_ICD_EMASK_EXC_IMHIT_FALSE  : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT4_ICD_EMASK_EXC_IBREAK_TRUE  : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT4_ICD_EMASK_EXC_IBREAK_FALSE : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT4_ICD_EMASK_IV0_TRUE         : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT4_ICD_EMASK_IV0_FALSE        : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT4_ICD_EMASK_IV1_TRUE         : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT4_ICD_EMASK_IV1_FALSE        : constant := 16#0#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT4_ICD_EMASK_IV2_TRUE         : constant := 16#1#;
    LW_PRGNLCL_FALCON_ICD_RDATA_RSTAT4_ICD_EMASK_IV2_FALSE        : constant := 16#0#;

    type LW_PRGNLCL_FALCON_ICD_RDATA_Register is record
        Data : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_ICD_RDATA_Register use record
        Data at 0 range 0 .. 31;
    end record;

    type LW_PRGNLCL_FALCON_RSTAT0_Register is record
        Mem_Stall      : NvU1;
        Dma_Stall      : NvU1;
        Fence_Stall    : NvU1;
        Div_Stall      : NvU1;
        Sb_Full_Stall  : NvU1;
        Sb_Hit_Stall   : NvU1;
        Flow_Stall     : NvU1;
        Sp_Stall       : NvU1;
        Bl_Stall       : NvU1;
        No_Instr_Stall : NvU1;
        Haltstop_Flush : NvU1;
        Afill_Flush    : NvU1;
        Exc_Flush      : NvU1;
        Irq_Flush      : NvU3;
        Valid          : NvU1;
        Waiting        : NvU1;
        Halted         : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_RSTAT0_Register use record
        Mem_Stall      at 0 range  0 ..  0;
        Dma_Stall      at 0 range  1 ..  1;
        Fence_Stall    at 0 range  2 ..  2;
        Div_Stall      at 0 range  3 ..  3;
        Sb_Full_Stall  at 0 range  8 ..  8;
        Sb_Hit_Stall   at 0 range  9 ..  9;
        Flow_Stall     at 0 range 10 .. 10;
        Sp_Stall       at 0 range 11 .. 11;
        Bl_Stall       at 0 range 12 .. 12;
        No_Instr_Stall at 0 range 16 .. 16;
        Haltstop_Flush at 0 range 20 .. 20;
        Afill_Flush    at 0 range 21 .. 21;
        Exc_Flush      at 0 range 22 .. 22;
        Irq_Flush      at 0 range 23 .. 25;
        Valid          at 0 range 28 .. 28;
        Waiting        at 0 range 29 .. 29;
        Halted         at 0 range 30 .. 30;
    end record;

    type LW_PRGNLCL_FALCON_RSTAT3_Register is record
        Mthd_Idle      : NvU1;
        Ctxsw_Idle     : NvU1;
        Dma_Idle       : NvU1;
        Scp_Idle       : NvU1;
        Ldst_Idle      : NvU1;
        Sbwb_Empty     : NvU1;
        Cswie          : NvU3;
        Cswe           : NvU1;
        Ctxsw_State    : NvU3;
        Ctxsw_Pend     : NvU1;
        Dma_Fbreq_Idle : NvU1;
        Dma_Ackq_Empty : NvU1;
        Dma_Rdq_Empty  : NvU1;
        Dma_Wr_Busy    : NvU1;
        Dma_Rd_Busy    : NvU1;
        Ldst_Xt_Busy   : NvU1;
        Ldst_Xt_Block  : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_RSTAT3_Register use record
        Mthd_Idle      at 0 range  0 ..  0;
        Ctxsw_Idle     at 0 range  1 ..  1;
        Dma_Idle       at 0 range  2 ..  2;
        Scp_Idle       at 0 range  3 ..  3;
        Ldst_Idle      at 0 range  4 ..  4;
        Sbwb_Empty     at 0 range  5 ..  5;
        Cswie          at 0 range  6 ..  8;
        Cswe           at 0 range 10 .. 10;
        Ctxsw_State    at 0 range 12 .. 14;
        Ctxsw_Pend     at 0 range 15 .. 15;
        Dma_Fbreq_Idle at 0 range 17 .. 17;
        Dma_Ackq_Empty at 0 range 18 .. 18;
        Dma_Rdq_Empty  at 0 range 19 .. 19;
        Dma_Wr_Busy    at 0 range 20 .. 20;
        Dma_Rd_Busy    at 0 range 21 .. 21;
        Ldst_Xt_Busy   at 0 range 22 .. 22;
        Ldst_Xt_Block  at 0 range 23 .. 23;
    end record;

    LW_PRGNLCL_FALCON_TRACEIDX_CNT_INIT : constant NvU8 := 16#0#;
    LW_PRGNLCL_FALCON_TRACEIDX_IDX_INIT : constant NvU8 := 16#0#;

    type LW_PRGNLCL_FALCON_TRACEIDX_Register is record
        Cnt    : NvU8;
        Maxidx : NvU8;
        Idx    : NvU8;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_TRACEIDX_Register use record
        Cnt    at 0 range 24 .. 31;
        Maxidx at 0 range 16 .. 23;
        Idx    at 0 range  0 ..  7;
    end record;

    type LW_PRGNLCL_FALCON_TRACEPC_Register is record
        Pc : NvU24;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_TRACEPC_Register use record
        Pc at 0 range 0 .. 23;
    end record;

    type LW_PRGNLCL_FALCON_TRACEINFO_Register is record
        Count : NvU16;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_TRACEINFO_Register use record
        Count at 0 range 0 .. 15;
    end record;

    type LW_PRGNLCL_FALCON_IMCTL_CMD_Field is (CMD_NOP, CMD_IMINV, CMD_IMBLK, CMD_IMTAG, CMD_IMTAG_SETVLD) with
        Size => 3;
    for LW_PRGNLCL_FALCON_IMCTL_CMD_Field use (CMD_NOP => 16#0#, CMD_IMINV => 16#1#, CMD_IMBLK => 16#2#, CMD_IMTAG => 16#3#, CMD_IMTAG_SETVLD => 16#4#);

    type LW_PRGNLCL_FALCON_IMCTL_Register is record
        Addr_Blk : NvU24;
        Cmd      : LW_PRGNLCL_FALCON_IMCTL_CMD_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_IMCTL_Register use record
        Addr_Blk at 0 range  0 .. 23;
        Cmd      at 0 range 24 .. 26;
    end record;

    LW_PRGNLCL_FALCON_IMCTL_DEBUG_CMD_NOP   : constant NvU3 := 16#0#;
    LW_PRGNLCL_FALCON_IMCTL_DEBUG_CMD_IMBLK : constant NvU3 := 16#2#;
    LW_PRGNLCL_FALCON_IMCTL_DEBUG_CMD_IMTAG : constant NvU3 := 16#3#;

    type LW_PRGNLCL_FALCON_IMCTL_DEBUG_Register is record
        Addr_Blk : NvU24;
        Cmd      : NvU3;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_IMCTL_DEBUG_Register use record
        Addr_Blk at 0 range  0 .. 23;
        Cmd      at 0 range 24 .. 26;
    end record;

    type LW_PRGNLCL_FALCON_IMSTAT_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_IMSTAT_Register use record
        Val at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_FALCON_IMFILLRNG0_TAG_LO_INIT : constant NvU16 := 16#0#;
    LW_PRGNLCL_FALCON_IMFILLRNG0_TAG_HI_INIT : constant NvU16 := 16#0#;

    type LW_PRGNLCL_FALCON_IMFILLRNG0_Register is record
        Tag_Lo : NvU16;
        Tag_Hi : NvU16;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_IMFILLRNG0_Register use record
        Tag_Lo at 0 range  0 .. 15;
        Tag_Hi at 0 range 16 .. 31;
    end record;

    LW_PRGNLCL_FALCON_IMFILLRNG1_TAG_LO_INIT : constant NvU16 := 16#0#;
    LW_PRGNLCL_FALCON_IMFILLRNG1_TAG_HI_INIT : constant NvU16 := 16#0#;

    type LW_PRGNLCL_FALCON_IMFILLRNG1_Register is record
        Tag_Lo : NvU16;
        Tag_Hi : NvU16;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_IMFILLRNG1_Register use record
        Tag_Lo at 0 range  0 .. 15;
        Tag_Hi at 0 range 16 .. 31;
    end record;

    LW_PRGNLCL_FALCON_IMFILLCTL_NBLOCKS_INIT : constant NvU9 := 16#0#;

    type LW_PRGNLCL_FALCON_IMFILLCTL_Register is record
        Nblocks : NvU9;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_IMFILLCTL_Register use record
        Nblocks at 0 range 0 .. 8;
    end record;

    type LW_PRGNLCL_FALCON_DMCTL_CMD_Field is (CMD_NOP, CMD_DMINV, CMD_DMBLK, CMD_DMTAG, CMD_DMTAG_SETVLD, CMD_DMCLEAN, CMD_DMLVL) with
        Size => 3;
    for LW_PRGNLCL_FALCON_DMCTL_CMD_Field use (CMD_NOP => 16#0#, CMD_DMINV => 16#1#, CMD_DMBLK => 16#2#, CMD_DMTAG => 16#3#, CMD_DMTAG_SETVLD => 16#4#, CMD_DMCLEAN => 16#5#,
         CMD_DMLVL                                     => 16#6#);

    type LW_PRGNLCL_FALCON_DMCTL_Register is record
        Addr_Blk : NvU24;
        Cmd      : LW_PRGNLCL_FALCON_DMCTL_CMD_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DMCTL_Register use record
        Addr_Blk at 0 range  0 .. 23;
        Cmd      at 0 range 24 .. 26;
    end record;

    type LW_PRGNLCL_FALCON_DMSTAT_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DMSTAT_Register use record
        Val at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_FALCON_DMVACTL_BOUND_INIT : constant NvU32 := 16#a0#;

    type LW_PRGNLCL_FALCON_DMVACTL_Register is record
        Bound : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DMVACTL_Register use record
        Bound at 0 range 0 .. 31;
    end record;

    type LW_PRGNLCL_FALCON_DMCYA_LDSTVA_DIS_Field is (DIS_FALSE, DIS_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_DMCYA_LDSTVA_DIS_Field use (DIS_FALSE => 16#0#, DIS_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_DMCYA_ROB_DIS_Field is (DIS_FALSE, DIS_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_DMCYA_ROB_DIS_Field use (DIS_FALSE => 16#0#, DIS_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_DMCYA_ROBWB_DIS_Field is (DIS_FALSE, DIS_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_DMCYA_ROBWB_DIS_Field use (DIS_FALSE => 16#0#, DIS_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_DMCYA_ROBSPR_DIS_Field is (DIS_FALSE, DIS_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_DMCYA_ROBSPR_DIS_Field use (DIS_FALSE => 16#0#, DIS_TRUE => 16#1#);

    type LW_PRGNLCL_FALCON_DMCYA_Register is record
        Ldstva_Dis : LW_PRGNLCL_FALCON_DMCYA_LDSTVA_DIS_Field;
        Rob_Dis    : LW_PRGNLCL_FALCON_DMCYA_ROB_DIS_Field;
        Robwb_Dis  : LW_PRGNLCL_FALCON_DMCYA_ROBWB_DIS_Field;
        Robspr_Dis : LW_PRGNLCL_FALCON_DMCYA_ROBSPR_DIS_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DMCYA_Register use record
        Ldstva_Dis at 0 range 0 .. 0;
        Rob_Dis    at 0 range 1 .. 1;
        Robwb_Dis  at 0 range 2 .. 2;
        Robspr_Dis at 0 range 3 .. 3;
    end record;

    LW_PRGNLCL_FALCON_CMEMBASE_VAL_INIT : constant NvU14 := 16#0#;

    type LW_PRGNLCL_FALCON_CMEMBASE_Register is record
        Val : NvU14;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_CMEMBASE_Register use record
        Val at 0 range 18 .. 31;
    end record;

    LW_PRGNLCL_FALCON_DMEMAPERT_TIME_OUT_INIT  : constant NvU8 := 16#0#;
    LW_PRGNLCL_FALCON_DMEMAPERT_TIME_UNIT_INIT : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_DMEMAPERT_ENABLE_INIT    : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_DMEMAPERT_ENABLE_TRUE    : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_DMEMAPERT_ENABLE_FALSE   : constant NvU1 := 16#0#;

    type LW_PRGNLCL_FALCON_DMEMAPERT_Register is record
        Time_Out  : NvU8;
        Time_Unit : NvU4;
        Enable    : NvU1;
        Ldstq_Num : NvU3;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_DMEMAPERT_Register use record
        Time_Out  at 0 range  0 ..  7;
        Time_Unit at 0 range  8 .. 11;
        Enable    at 0 range 16 .. 16;
        Ldstq_Num at 0 range 17 .. 19;
    end record;

    LW_PRGNLCL_FALCON_EXTERRSTAT_STAT_ACK_POS  : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_EXTERRSTAT_STAT_ACK_TOUT : constant NvU4 := 16#1#;
    LW_PRGNLCL_FALCON_EXTERRSTAT_VALID_INIT    : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_EXTERRSTAT_VALID_FALSE   : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_EXTERRSTAT_VALID_TRUE    : constant NvU1 := 16#1#;

    type LW_PRGNLCL_FALCON_EXTERRSTAT_Register is record
        Pc    : NvU24;
        Stat  : NvU4;
        Valid : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_EXTERRSTAT_Register use record
        Pc    at 0 range  0 .. 23;
        Stat  at 0 range 24 .. 27;
        Valid at 0 range 31 .. 31;
    end record;

    type LW_PRGNLCL_FALCON_EXTERRADDR_Register is record
        Addr : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_EXTERRADDR_Register use record
        Addr at 0 range 0 .. 31;
    end record;

    type LW_PRGNLCL_FALCON_EXTERR_INFO_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_EXTERR_INFO_Register use record
        Val at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_FALCON_CSBERRSTAT_ENABLE_INIT  : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_CSBERRSTAT_ENABLE_TRUE  : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_CSBERRSTAT_ENABLE_FALSE : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_CSBERRSTAT_VALID_INIT   : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_CSBERRSTAT_VALID_TRUE   : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_CSBERRSTAT_VALID_FALSE  : constant NvU1 := 16#0#;

    type LW_PRGNLCL_FALCON_CSBERRSTAT_Register is record
        Pc     : NvU24;
        Enable : NvU1;
        Valid  : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_CSBERRSTAT_Register use record
        Pc     at 0 range  0 .. 23;
        Enable at 0 range 30 .. 30;
        Valid  at 0 range 31 .. 31;
    end record;

    type LW_PRGNLCL_FALCON_CSBERR_ADDR_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_CSBERR_ADDR_Register use record
        Val at 0 range 0 .. 31;
    end record;

    type LW_PRGNLCL_FALCON_CSBERR_INFO_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_CSBERR_INFO_Register use record
        Val at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_FALCON_BR_PARAMS_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_BR_PARAMS_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLED       : constant NvU4 := 16#4#;
    LW_PRGNLCL_FALCON_BR_PARAMS_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_BR_PARAMS_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_BR_PARAMS_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_BR_PARAMS_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLED      : constant NvU4 := 16#4#;
    LW_PRGNLCL_FALCON_BR_PARAMS_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_BR_PARAMS_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    type LW_PRGNLCL_FALCON_BR_PARAMS_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_BR_PARAMS_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_BR_PARAMS_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_BR_PARAMS_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_BR_PARAMS_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_BR_PARAMS_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_FALCON_BR_PARAMS_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_BR_PARAMS_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_FALCON_BR_PARAMS_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FALCON_BR_PARAMS_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_BR_PARAMS_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_BR_PARAMS_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_BR_PARAMS_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_BR_PARAMS_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_BR_PARAMS_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_BR_PARAMS_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_BR_PARAMS_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_BR_PARAMS_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_BR_PARAMS_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_BR_PARAMS_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_BR_PARAMS_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_BR_PARAMS_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_BR_PARAMS_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_BR_PARAMS_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_BR_PARAMS_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_FALCON_BR_PARAMS_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_FALCON_BR_PARAMS_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_FALCON_BR_PARAMS_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_FALCON_BR_PARAMS_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_FALCON_BR_PARAMS_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_BR_PARAMS_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLED       : constant NvU4 := 16#4#;
    LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLED      : constant NvU4 := 16#4#;
    LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    type LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_FALCON_KMEM_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_KMEM_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLED       : constant NvU4 := 16#4#;
    LW_PRGNLCL_FALCON_KMEM_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_KMEM_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_KMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_KMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLED      : constant NvU4 := 16#4#;
    LW_PRGNLCL_FALCON_KMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_KMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    type LW_PRGNLCL_FALCON_KMEM_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_KMEM_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_KMEM_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_KMEM_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_KMEM_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_KMEM_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_FALCON_KMEM_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_KMEM_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_FALCON_KMEM_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FALCON_KMEM_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_KMEM_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_KMEM_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_KMEM_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_KMEM_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_KMEM_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_KMEM_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_KMEM_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_KMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_KMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_KMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_KMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_KMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_KMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_KMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_KMEM_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_FALCON_KMEM_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_FALCON_KMEM_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_FALCON_KMEM_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_FALCON_KMEM_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_FALCON_KMEM_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_KMEM_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_FALCON_SHA_RAL_PRIV_LEVEL_MASK_READ_PROTECTION_RESET_FUSE0          : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_SHA_RAL_PRIV_LEVEL_MASK_READ_PROTECTION_RESET_FUSE1          : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_SHA_RAL_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_SHA_RAL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLED       : constant NvU4 := 16#4#;
    LW_PRGNLCL_FALCON_SHA_RAL_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_SHA_RAL_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_SHA_RAL_PRIV_LEVEL_MASK_WRITE_PROTECTION_RESET_FUSE0         : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_SHA_RAL_PRIV_LEVEL_MASK_WRITE_PROTECTION_RESET_FUSE1         : constant NvU4 := 16#8#;
    LW_PRGNLCL_FALCON_SHA_RAL_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_FALCON_SHA_RAL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLED      : constant NvU4 := 16#4#;
    LW_PRGNLCL_FALCON_SHA_RAL_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_SHA_RAL_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    type LW_PRGNLCL_FALCON_SHA_RAL_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SHA_RAL_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_SHA_RAL_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SHA_RAL_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_FALCON_SHA_RAL_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SHA_RAL_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_FALCON_SHA_RAL_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SHA_RAL_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_FALCON_SHA_RAL_PRIV_LEVEL_MASK_SOURCE_ENABLE_RESET_FUSE0         : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FALCON_SHA_RAL_PRIV_LEVEL_MASK_SOURCE_ENABLE_RESET_FUSE1         : constant NvU20 := 16#8_0000#;
    LW_PRGNLCL_FALCON_SHA_RAL_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_FALCON_SHA_RAL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_SHA_RAL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_SHA_RAL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_SHA_RAL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_SHA_RAL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_SHA_RAL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_SHA_RAL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_FALCON_SHA_RAL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_FALCON_SHA_RAL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_SHA_RAL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_SHA_RAL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_SHA_RAL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_SHA_RAL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_SHA_RAL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_FALCON_SHA_RAL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_FALCON_SHA_RAL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_FALCON_SHA_RAL_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_FALCON_SHA_RAL_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_FALCON_SHA_RAL_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_FALCON_SHA_RAL_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_FALCON_SHA_RAL_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_SHA_RAL_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_FALCON_SHA_CONFIG_ENC_MODE_SHA1       : constant NvU8 := 16#0#;
    LW_PRGNLCL_FALCON_SHA_CONFIG_ENC_MODE_SHA224     : constant NvU8 := 16#4#;
    LW_PRGNLCL_FALCON_SHA_CONFIG_ENC_MODE_SHA256     : constant NvU8 := 16#5#;
    LW_PRGNLCL_FALCON_SHA_CONFIG_ENC_MODE_SHA384     : constant NvU8 := 16#6#;
    LW_PRGNLCL_FALCON_SHA_CONFIG_ENC_MODE_SHA512     : constant NvU8 := 16#7#;
    LW_PRGNLCL_FALCON_SHA_CONFIG_ENC_MODE_SHA512_224 : constant NvU8 := 16#7#;
    LW_PRGNLCL_FALCON_SHA_CONFIG_ENC_MODE_SHA512_256 : constant NvU8 := 16#7#;
    LW_PRGNLCL_FALCON_SHA_CONFIG_ENC_ALG_SHA         : constant NvU4 := 16#3#;
    LW_PRGNLCL_FALCON_SHA_CONFIG_ENC_ALG_INIT        : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_SHA_CONFIG_DST_HASH_REG        : constant NvU3 := 16#1#;
    LW_PRGNLCL_FALCON_SHA_CONFIG_DST_INIT            : constant NvU3 := 16#0#;

    type LW_PRGNLCL_FALCON_SHA_CONFIG_Register is record
        Enc_Mode : NvU8;
        Enc_Alg  : NvU4;
        Dst      : NvU3;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_SHA_CONFIG_Register use record
        Enc_Mode at 0 range 24 .. 31;
        Enc_Alg  at 0 range 12 .. 15;
        Dst      at 0 range  2 ..  4;
    end record;

    type LW_PRGNLCL_FALCON_SHA_TASK_CONFIG_HW_INIT_HASH_Field is (HASH_DISABLE, HASH_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SHA_TASK_CONFIG_HW_INIT_HASH_Field use (HASH_DISABLE => 16#0#, HASH_ENABLE => 16#1#);

    type LW_PRGNLCL_FALCON_SHA_TASK_CONFIG_Register is record
        Hw_Init_Hash : LW_PRGNLCL_FALCON_SHA_TASK_CONFIG_HW_INIT_HASH_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_SHA_TASK_CONFIG_Register use record
        Hw_Init_Hash at 0 range 0 .. 0;
    end record;

    type LW_PRGNLCL_FALCON_SHA_IN_ADDR_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_SHA_IN_ADDR_Register use record
        Val at 0 range 0 .. 31;
    end record;

    type LW_PRGNLCL_FALCON_SHA_IN_ADDR_HI_Register is record
        Msb : NvU8;
        Sz  : NvU24;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_SHA_IN_ADDR_HI_Register use record
        Msb at 0 range 24 .. 31;
        Sz  at 0 range  0 .. 23;
    end record;

    type LW_PRGNLCL_FALCON_SHA_MSG_LENGTH_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_SHA_MSG_LENGTH_Register use record
        Val at 0 range 0 .. 31;
    end record;

    type LW_PRGNLCL_FALCON_SHA_MSG_LEFT_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_SHA_MSG_LEFT_Register use record
        Val at 0 range 0 .. 31;
    end record;

    type LW_PRGNLCL_FALCON_SHA_HASH_RESULT_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_SHA_HASH_RESULT_Register use record
        Val at 0 range 0 .. 31;
    end record;

    type LW_PRGNLCL_FALCON_SHA_OPERATION_LAST_BUF_Field is (BUF_FALSE, BUF_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SHA_OPERATION_LAST_BUF_Field use (BUF_FALSE => 16#0#, BUF_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_SHA_OPERATION_SOFTRESET_Field is (SOFTRESET_DISABLE, SOFTRESET_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SHA_OPERATION_SOFTRESET_Field use (SOFTRESET_DISABLE => 16#0#, SOFTRESET_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_SHA_OPERATION_HALT_Field is (HALT_DISABLE, HALT_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SHA_OPERATION_HALT_Field use (HALT_DISABLE => 16#0#, HALT_ENABLE => 16#1#);
    LW_PRGNLCL_FALCON_SHA_OPERATION_OP_NOP   : constant NvU3 := 16#0#;
    LW_PRGNLCL_FALCON_SHA_OPERATION_OP_START : constant NvU3 := 16#1#;
    LW_PRGNLCL_FALCON_SHA_OPERATION_OP_INIT  : constant NvU3 := 16#0#;

    type LW_PRGNLCL_FALCON_SHA_OPERATION_Register is record
        Last_Buf  : LW_PRGNLCL_FALCON_SHA_OPERATION_LAST_BUF_Field;
        Softreset : LW_PRGNLCL_FALCON_SHA_OPERATION_SOFTRESET_Field;
        Halt      : LW_PRGNLCL_FALCON_SHA_OPERATION_HALT_Field;
        Op        : NvU3;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_SHA_OPERATION_Register use record
        Last_Buf  at 0 range 16 .. 16;
        Softreset at 0 range  6 ..  6;
        Halt      at 0 range  5 ..  5;
        Op        at 0 range  0 ..  2;
    end record;

    LW_PRGNLCL_FALCON_SHA_STATUS_STATE_INIT   : constant NvU3 := 16#0#;
    LW_PRGNLCL_FALCON_SHA_STATUS_STATE_IDLE   : constant NvU3 := 16#0#;
    LW_PRGNLCL_FALCON_SHA_STATUS_STATE_BUSY   : constant NvU3 := 16#1#;
    LW_PRGNLCL_FALCON_SHA_STATUS_STATE_HALTED : constant NvU3 := 16#7#;

    type LW_PRGNLCL_FALCON_SHA_STATUS_Register is record
        State : NvU3;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_SHA_STATUS_Register use record
        State at 0 range 0 .. 2;
    end record;

    type LW_PRGNLCL_FALCON_SHA_IN_REQ_CUR_BYTE_ADDR_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_SHA_IN_REQ_CUR_BYTE_ADDR_Register use record
        Val at 0 range 0 .. 31;
    end record;

    type LW_PRGNLCL_FALCON_SHA_IN_REQ_CUR_BYTE_ADDR_HI_Register is record
        Msb : NvU8;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_SHA_IN_REQ_CUR_BYTE_ADDR_HI_Register use record
        Msb at 0 range 24 .. 31;
    end record;

    LW_PRGNLCL_FALCON_SHA_PRIV_LOCKDOWN_WR_LOCK_INIT  : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_SHA_PRIV_LOCKDOWN_WR_LOCK_SET   : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_SHA_PRIV_LOCKDOWN_WR_LOCK_UNSET : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_SHA_PRIV_LOCKDOWN_RD_LOCK_INIT  : constant NvU1 := 16#0#;
    LW_PRGNLCL_FALCON_SHA_PRIV_LOCKDOWN_RD_LOCK_SET   : constant NvU1 := 16#1#;
    LW_PRGNLCL_FALCON_SHA_PRIV_LOCKDOWN_RD_LOCK_UNSET : constant NvU1 := 16#0#;

    type LW_PRGNLCL_FALCON_SHA_PRIV_LOCKDOWN_Register is record
        Wr_Lock : NvU1;
        Rd_Lock : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_SHA_PRIV_LOCKDOWN_Register use record
        Wr_Lock at 0 range 0 .. 0;
        Rd_Lock at 0 range 1 .. 1;
    end record;

    type LW_PRGNLCL_FALCON_SHA_IN_RESP_CUR_BYTE_ADDR_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_SHA_IN_RESP_CUR_BYTE_ADDR_Register use record
        Val at 0 range 0 .. 31;
    end record;

    type LW_PRGNLCL_FALCON_SHA_IN_RESP_CUR_BYTE_ADDR_HI_Register is record
        Msb : NvU8;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_SHA_IN_RESP_CUR_BYTE_ADDR_HI_Register use record
        Msb at 0 range 24 .. 31;
    end record;

    type LW_PRGNLCL_FALCON_SHA_ERR_STATUS_LEVEL_ERR_Field is (ERR_FALSE, ERR_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SHA_ERR_STATUS_LEVEL_ERR_Field use (ERR_FALSE => 16#0#, ERR_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_SHA_ERR_STATUS_MULTI_HIT_Field is (HIT_FALSE, HIT_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SHA_ERR_STATUS_MULTI_HIT_Field use (HIT_FALSE => 16#0#, HIT_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_SHA_ERR_STATUS_MISS_Field is (MISS_FALSE, MISS_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SHA_ERR_STATUS_MISS_Field use (MISS_FALSE => 16#0#, MISS_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_SHA_ERR_STATUS_PA_FAULT_Field is (FAULT_FALSE, FAULT_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SHA_ERR_STATUS_PA_FAULT_Field use (FAULT_FALSE => 16#0#, FAULT_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_SHA_ERR_STATUS_FBIF_ERR_Field is (ERR_FALSE, ERR_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SHA_ERR_STATUS_FBIF_ERR_Field use (ERR_FALSE => 16#0#, ERR_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_SHA_ERR_STATUS_ILLEGAL_CFG_Field is (CFG_FALSE, CFG_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SHA_ERR_STATUS_ILLEGAL_CFG_Field use (CFG_FALSE => 16#0#, CFG_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_SHA_ERR_STATUS_NS_ACCESS_Field is (ACCESS_FALSE, ACCESS_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SHA_ERR_STATUS_NS_ACCESS_Field use (ACCESS_FALSE => 16#0#, ACCESS_TRUE => 16#1#);
    LW_PRGNLCL_FALCON_SHA_ERR_STATUS_LEVEL_ERR_CLEAR   : constant := 16#1#;
    LW_PRGNLCL_FALCON_SHA_ERR_STATUS_MULTI_HIT_CLEAR   : constant := 16#1#;
    LW_PRGNLCL_FALCON_SHA_ERR_STATUS_MISS_CLEAR        : constant := 16#1#;
    LW_PRGNLCL_FALCON_SHA_ERR_STATUS_PA_FAULT_CLEAR    : constant := 16#1#;
    LW_PRGNLCL_FALCON_SHA_ERR_STATUS_FBIF_ERR_CLEAR    : constant := 16#1#;
    LW_PRGNLCL_FALCON_SHA_ERR_STATUS_ILLEGAL_CFG_CLEAR : constant := 16#1#;
    LW_PRGNLCL_FALCON_SHA_ERR_STATUS_NS_ACCESS_CLEAR   : constant := 16#1#;

    type LW_PRGNLCL_FALCON_SHA_ERR_STATUS_Register is record
        Level_Err   : LW_PRGNLCL_FALCON_SHA_ERR_STATUS_LEVEL_ERR_Field;
        Multi_Hit   : LW_PRGNLCL_FALCON_SHA_ERR_STATUS_MULTI_HIT_Field;
        Miss        : LW_PRGNLCL_FALCON_SHA_ERR_STATUS_MISS_Field;
        Pa_Fault    : LW_PRGNLCL_FALCON_SHA_ERR_STATUS_PA_FAULT_Field;
        Fbif_Err    : LW_PRGNLCL_FALCON_SHA_ERR_STATUS_FBIF_ERR_Field;
        Illegal_Cfg : LW_PRGNLCL_FALCON_SHA_ERR_STATUS_ILLEGAL_CFG_Field;
        Ns_Access   : LW_PRGNLCL_FALCON_SHA_ERR_STATUS_NS_ACCESS_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_SHA_ERR_STATUS_Register use record
        Level_Err   at 0 range 12 .. 12;
        Multi_Hit   at 0 range 11 .. 11;
        Miss        at 0 range 10 .. 10;
        Pa_Fault    at 0 range  9 ..  9;
        Fbif_Err    at 0 range  8 ..  8;
        Illegal_Cfg at 0 range  4 ..  4;
        Ns_Access   at 0 range  0 ..  0;
    end record;

    type LW_PRGNLCL_FALCON_SHA_ERR_ADDR_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_SHA_ERR_ADDR_Register use record
        Val at 0 range 0 .. 31;
    end record;

    type LW_PRGNLCL_FALCON_SHA_ERR_ADDR_HI_Register is record
        Msb : NvU8;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_SHA_ERR_ADDR_HI_Register use record
        Msb at 0 range 24 .. 31;
    end record;

    type LW_PRGNLCL_FALCON_SHA_INT_STATUS_ERR_STATUS_Field is (STATUS_FALSE, STATUS_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SHA_INT_STATUS_ERR_STATUS_Field use (STATUS_FALSE => 16#0#, STATUS_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_SHA_INT_STATUS_OP_DONE_Field is (DONE_FALSE, DONE_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SHA_INT_STATUS_OP_DONE_Field use (DONE_FALSE => 16#0#, DONE_TRUE => 16#1#);
    LW_PRGNLCL_FALCON_SHA_INT_STATUS_ERR_STATUS_CLEAR : constant := 16#1#;
    LW_PRGNLCL_FALCON_SHA_INT_STATUS_OP_DONE_CLEAR    : constant := 16#1#;

    type LW_PRGNLCL_FALCON_SHA_INT_STATUS_Register is record
        Err_Status : LW_PRGNLCL_FALCON_SHA_INT_STATUS_ERR_STATUS_Field;
        Op_Done    : LW_PRGNLCL_FALCON_SHA_INT_STATUS_OP_DONE_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_SHA_INT_STATUS_Register use record
        Err_Status at 0 range 16 .. 16;
        Op_Done    at 0 range  4 ..  4;
    end record;

    type LW_PRGNLCL_FALCON_SHA_INT_ENABLE_ERR_STATUS_Field is (STATUS_DISABLE, STATUS_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SHA_INT_ENABLE_ERR_STATUS_Field use (STATUS_DISABLE => 16#0#, STATUS_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_SHA_INT_ENABLE_OP_DONE_Field is (DONE_DISABLE, DONE_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SHA_INT_ENABLE_OP_DONE_Field use (DONE_DISABLE => 16#0#, DONE_ENABLE => 16#1#);

    type LW_PRGNLCL_FALCON_SHA_INT_ENABLE_Register is record
        Err_Status : LW_PRGNLCL_FALCON_SHA_INT_ENABLE_ERR_STATUS_Field;
        Op_Done    : LW_PRGNLCL_FALCON_SHA_INT_ENABLE_OP_DONE_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_SHA_INT_ENABLE_Register use record
        Err_Status at 0 range 16 .. 16;
        Op_Done    at 0 range  4 ..  4;
    end record;

    type LW_PRGNLCL_FALCON_SHA_MUTEX_Register is record
        Val : NvU8;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_SHA_MUTEX_Register use record
        Val at 0 range 0 .. 7;
    end record;

    type LW_PRGNLCL_FALCON_SHA_MUTEX_RELEASE_Register is record
        Val : NvU8;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_SHA_MUTEX_RELEASE_Register use record
        Val at 0 range 0 .. 7;
    end record;

    LW_PRGNLCL_FALCON_SHA_MUTEX_STATUS_LOCKED_INIT : constant NvU8 := 16#0#;

    type LW_PRGNLCL_FALCON_SHA_MUTEX_STATUS_Register is record
        Locked : NvU8;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_SHA_MUTEX_STATUS_Register use record
        Locked at 0 range 0 .. 7;
    end record;

    type LW_PRGNLCL_FALCON_SHA_SRC_CONFIG_TCM_NO_TRANSLATION_Field is (TRANSLATION_FALSE, TRANSLATION_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SHA_SRC_CONFIG_TCM_NO_TRANSLATION_Field use (TRANSLATION_FALSE => 16#0#, TRANSLATION_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_SHA_SRC_CONFIG_SRC_Field is (SRC_DMEM, SRC_IMEM, SRC_FB) with
        Size => 2;
    for LW_PRGNLCL_FALCON_SHA_SRC_CONFIG_SRC_Field use (SRC_DMEM => 16#0#, SRC_IMEM => 16#1#, SRC_FB => 16#2#);

    type LW_PRGNLCL_FALCON_SHA_SRC_CONFIG_Register is record
        Fb_Base            : NvU9;
        Tcm_No_Translation : LW_PRGNLCL_FALCON_SHA_SRC_CONFIG_TCM_NO_TRANSLATION_Field;
        Ctxdma             : NvU3;
        Src                : LW_PRGNLCL_FALCON_SHA_SRC_CONFIG_SRC_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_SHA_SRC_CONFIG_Register use record
        Fb_Base            at 0 range 16 .. 24;
        Tcm_No_Translation at 0 range  7 ..  7;
        Ctxdma             at 0 range  4 ..  6;
        Src                at 0 range  0 ..  1;
    end record;

    LW_PRGNLCL_FALCON_SHA_REQ_CTRL_WINDOW_INIT : constant NvU16 := 16#1000#;
    LW_PRGNLCL_FALCON_SHA_REQ_CTRL_LIMIT_INIT  : constant NvU16 := 16#800#;

    type LW_PRGNLCL_FALCON_SHA_REQ_CTRL_Register is record
        Window : NvU16;
        Limit  : NvU16;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_SHA_REQ_CTRL_Register use record
        Window at 0 range 16 .. 31;
        Limit  at 0 range  0 .. 15;
    end record;

    type LW_PRGNLCL_FALCON_SHA_CTRL_FB_DIS_Field is (DIS_FALSE, DIS_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SHA_CTRL_FB_DIS_Field use (DIS_FALSE => 16#0#, DIS_TRUE => 16#1#);

    type LW_PRGNLCL_FALCON_SHA_CTRL_Register is record
        Fb_Dis : LW_PRGNLCL_FALCON_SHA_CTRL_FB_DIS_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_SHA_CTRL_Register use record
        Fb_Dis at 0 range 0 .. 0;
    end record;

    type LW_PRGNLCL_FALCON_SHA_CYA_BW_THROTTLE_DIS_Field is (DIS_FALSE, DIS_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SHA_CYA_BW_THROTTLE_DIS_Field use (DIS_FALSE => 16#0#, DIS_TRUE => 16#1#);

    type LW_PRGNLCL_FALCON_SHA_CYA_Register is record
        Bw_Throttle_Dis : LW_PRGNLCL_FALCON_SHA_CYA_BW_THROTTLE_DIS_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_SHA_CYA_Register use record
        Bw_Throttle_Dis at 0 range 0 .. 0;
    end record;

    type LW_PRGNLCL_FALCON_SHA_DBG_INFO_PW_HALTED_Field is (HALTED_FALSE, HALTED_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SHA_DBG_INFO_PW_HALTED_Field use (HALTED_FALSE => 16#0#, HALTED_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_SHA_DBG_INFO_IDMA_HALTED_Field is (HALTED_FALSE, HALTED_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SHA_DBG_INFO_IDMA_HALTED_Field use (HALTED_FALSE => 16#0#, HALTED_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_SHA_DBG_INFO_ALU_HALTED_Field is (HALTED_FALSE, HALTED_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SHA_DBG_INFO_ALU_HALTED_Field use (HALTED_FALSE => 16#0#, HALTED_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_SHA_DBG_INFO_PW_IDLE_Field is (IDLE_FALSE, IDLE_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SHA_DBG_INFO_PW_IDLE_Field use (IDLE_FALSE => 16#0#, IDLE_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_SHA_DBG_INFO_IDMA_IDLE_Field is (IDLE_FALSE, IDLE_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SHA_DBG_INFO_IDMA_IDLE_Field use (IDLE_FALSE => 16#0#, IDLE_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_SHA_DBG_INFO_ALU_IDLE_Field is (IDLE_FALSE, IDLE_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SHA_DBG_INFO_ALU_IDLE_Field use (IDLE_FALSE => 16#0#, IDLE_TRUE => 16#1#);
    LW_PRGNLCL_FALCON_SHA_DBG_INFO_CORE_STATUS_IDLE  : constant NvU3 := 16#0#;
    LW_PRGNLCL_FALCON_SHA_DBG_INFO_CORE_STATUS_BUSY  : constant NvU3 := 16#1#;
    LW_PRGNLCL_FALCON_SHA_DBG_INFO_SECURE_LEVEL_INIT : constant NvU2 := 16#0#;

    type LW_PRGNLCL_FALCON_SHA_DBG_INFO_Register is record
        Pw_Halted    : LW_PRGNLCL_FALCON_SHA_DBG_INFO_PW_HALTED_Field;
        Idma_Halted  : LW_PRGNLCL_FALCON_SHA_DBG_INFO_IDMA_HALTED_Field;
        Alu_Halted   : LW_PRGNLCL_FALCON_SHA_DBG_INFO_ALU_HALTED_Field;
        Pw_Idle      : LW_PRGNLCL_FALCON_SHA_DBG_INFO_PW_IDLE_Field;
        Idma_Idle    : LW_PRGNLCL_FALCON_SHA_DBG_INFO_IDMA_IDLE_Field;
        Alu_Idle     : LW_PRGNLCL_FALCON_SHA_DBG_INFO_ALU_IDLE_Field;
        Core_Status  : NvU3;
        Secure_Level : NvU2;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_SHA_DBG_INFO_Register use record
        Pw_Halted    at 0 range 13 .. 13;
        Idma_Halted  at 0 range 12 .. 12;
        Alu_Halted   at 0 range 11 .. 11;
        Pw_Idle      at 0 range 10 .. 10;
        Idma_Idle    at 0 range  9 ..  9;
        Alu_Idle     at 0 range  8 ..  8;
        Core_Status  at 0 range  4 ..  6;
        Secure_Level at 0 range  0 ..  1;
    end record;

    type LW_PRGNLCL_FALCON_SHA_DBG_REG_0_Register is record
        Sha_Sha_Preproc_State : NvU2;
        Sha_Wd_Number         : NvU4;
        Sha_Sha_Hash_State    : NvU3;
        Sha_Byte_Counter      : NvU3;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_SHA_DBG_REG_0_Register use record
        Sha_Sha_Preproc_State at 0 range 10 .. 11;
        Sha_Wd_Number         at 0 range  6 ..  9;
        Sha_Sha_Hash_State    at 0 range  3 ..  5;
        Sha_Byte_Counter      at 0 range  0 ..  2;
    end record;

    type LW_PRGNLCL_FALCON_SHA_DBG_REG_1_SHA_IDMA_REQ_RUN_Field is (RUN_FALSE, RUN_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SHA_DBG_REG_1_SHA_IDMA_REQ_RUN_Field use (RUN_FALSE => 16#0#, RUN_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_SHA_DBG_REG_1_SHA_IDMA_RESP_RUN_Field is (RUN_FALSE, RUN_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SHA_DBG_REG_1_SHA_IDMA_RESP_RUN_Field use (RUN_FALSE => 16#0#, RUN_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_SHA_DBG_REG_1_SHA_IDMA_NO_INFLIGHTS_Field is (INFLIGHTS_FALSE, INFLIGHTS_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SHA_DBG_REG_1_SHA_IDMA_NO_INFLIGHTS_Field use (INFLIGHTS_FALSE => 16#0#, INFLIGHTS_TRUE => 16#1#);

    type LW_PRGNLCL_FALCON_SHA_DBG_REG_1_Register is record
        Sha_Idma_Req_Run      : LW_PRGNLCL_FALCON_SHA_DBG_REG_1_SHA_IDMA_REQ_RUN_Field;
        Sha_Idma_Resp_Run     : LW_PRGNLCL_FALCON_SHA_DBG_REG_1_SHA_IDMA_RESP_RUN_Field;
        Sha_Idma_No_Inflights : LW_PRGNLCL_FALCON_SHA_DBG_REG_1_SHA_IDMA_NO_INFLIGHTS_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_SHA_DBG_REG_1_Register use record
        Sha_Idma_Req_Run      at 0 range 18 .. 18;
        Sha_Idma_Resp_Run     at 0 range 17 .. 17;
        Sha_Idma_No_Inflights at 0 range 14 .. 14;
    end record;

    type LW_PRGNLCL_FALCON_SHA_DBG_REG_2_Register is record
        Sha_Idma_Resp_Dma_Size : NvU24;
        Sha_Idma_Resp_Dma_Addr : NvU8;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_SHA_DBG_REG_2_Register use record
        Sha_Idma_Resp_Dma_Size at 0 range  0 .. 23;
        Sha_Idma_Resp_Dma_Addr at 0 range 24 .. 31;
    end record;

    type LW_PRGNLCL_FALCON_SHA_DBG_REG_3_Register is record
        Sha_Idma_Resp_Dma_Addr : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_SHA_DBG_REG_3_Register use record
        Sha_Idma_Resp_Dma_Addr at 0 range 0 .. 31;
    end record;

    type LW_PRGNLCL_FALCON_SHA_DBG_REG_4_Register is record
        Sha_Idma_Resp_Dma_Addr           : NvU9;
        Sha_Idma_Corrected_Resp_Dma_Size : NvU21;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_SHA_DBG_REG_4_Register use record
        Sha_Idma_Resp_Dma_Addr           at 0 range  0 ..  8;
        Sha_Idma_Corrected_Resp_Dma_Size at 0 range 11 .. 31;
    end record;

    type LW_PRGNLCL_FALCON_SHA_DBG_REG_5_Register is record
        Sha_Idma_Corrected_Resp_Dma_Addr : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_SHA_DBG_REG_5_Register use record
        Sha_Idma_Corrected_Resp_Dma_Addr at 0 range 0 .. 31;
    end record;

    type LW_PRGNLCL_FALCON_SHA_DBG_REG_6_SHA_WILL_NOT_FINISH_Field is (FINISH_FALSE, FINISH_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SHA_DBG_REG_6_SHA_WILL_NOT_FINISH_Field use (FINISH_FALSE => 16#0#, FINISH_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_SHA_DBG_REG_6_SHA_SHA_HASH_IDLE_Field is (IDLE_FALSE, IDLE_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SHA_DBG_REG_6_SHA_SHA_HASH_IDLE_Field use (IDLE_FALSE => 16#0#, IDLE_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_SHA_DBG_REG_6_SHA_SHA_PREPROC_IDLE_Field is (IDLE_FALSE, IDLE_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SHA_DBG_REG_6_SHA_SHA_PREPROC_IDLE_Field use (IDLE_FALSE => 16#0#, IDLE_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_SHA_DBG_REG_6_SHA_IDMA_NO_PACKING_DATA_Field is (DATA_FALSE, DATA_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SHA_DBG_REG_6_SHA_IDMA_NO_PACKING_DATA_Field use (DATA_FALSE => 16#0#, DATA_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_SHA_DBG_REG_6_SHA_LASTBUF_Field is (LASTBUF_FALSE, LASTBUF_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SHA_DBG_REG_6_SHA_LASTBUF_Field use (LASTBUF_FALSE => 16#0#, LASTBUF_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_SHA_DBG_REG_6_SHA_MSG_LEFT_NON0_Field is (NON0_FALSE, NON0_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_SHA_DBG_REG_6_SHA_MSG_LEFT_NON0_Field use (NON0_FALSE => 16#0#, NON0_TRUE => 16#1#);

    type LW_PRGNLCL_FALCON_SHA_DBG_REG_6_Register is record
        Sha_Idma_Corrected_Resp_Dma_Addr : NvU13;
        Sha_Idma_Free_Count              : NvU6;
        Sha_Will_Not_Finish              : LW_PRGNLCL_FALCON_SHA_DBG_REG_6_SHA_WILL_NOT_FINISH_Field;
        Sha_Sha_Hash_Idle                : LW_PRGNLCL_FALCON_SHA_DBG_REG_6_SHA_SHA_HASH_IDLE_Field;
        Sha_Sha_Preproc_Idle             : LW_PRGNLCL_FALCON_SHA_DBG_REG_6_SHA_SHA_PREPROC_IDLE_Field;
        Sha_Idma_No_Packing_Data         : LW_PRGNLCL_FALCON_SHA_DBG_REG_6_SHA_IDMA_NO_PACKING_DATA_Field;
        Sha_Lastbuf                      : LW_PRGNLCL_FALCON_SHA_DBG_REG_6_SHA_LASTBUF_Field;
        Sha_Msg_Left_Non0                : LW_PRGNLCL_FALCON_SHA_DBG_REG_6_SHA_MSG_LEFT_NON0_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_SHA_DBG_REG_6_Register use record
        Sha_Idma_Corrected_Resp_Dma_Addr at 0 range  0 .. 12;
        Sha_Idma_Free_Count              at 0 range 16 .. 21;
        Sha_Will_Not_Finish              at 0 range 24 .. 24;
        Sha_Sha_Hash_Idle                at 0 range 25 .. 25;
        Sha_Sha_Preproc_Idle             at 0 range 26 .. 26;
        Sha_Idma_No_Packing_Data         at 0 range 27 .. 27;
        Sha_Lastbuf                      at 0 range 28 .. 28;
        Sha_Msg_Left_Non0                at 0 range 29 .. 29;
    end record;

    type LW_PRGNLCL_FALCON_SHA_DBG_REG_7_Register is record
        Sha_Sha_Agent_Treq_Pvld                : NvU1;
        Sha_Sha_Agent_Treq_Read                : NvU1;
        Sha_Idma_Req_Tbuf_Prdy                 : NvU1;
        Sha_Idma_Req_Tbuf_Pvld                 : NvU1;
        Sha_Idma_Resp_Tbuf_Prdy                : NvU1;
        Sha_Idma_Resp_Tbuf_Pvld                : NvU1;
        Sha_Blk_Wd_Valid                       : NvU1;
        Sha_Blk_Wd_Stall                       : NvU1;
        Sha_Idma2eng_Pvld                      : NvU1;
        Sha_Idma2eng_Stall                     : NvU1;
        Sha_Nv_Se_Sha2data2fbif_Sreq_Pvld      : NvU1;
        Sha_Nv_Se_Sha2data2fbif_Sreq_Prdy      : NvU1;
        Sha_Nv_Se_Sha2data_Fbif2pdma_Rdat_Pvld : NvU1;
        Sha_Nv_Se_Sha2data_Fbif2pdma_Rdat_Prdy : NvU1;
        Sha_Pe2afbif_Rd_Req                    : NvU1;
        Sha_Pe2afbif_Rd_Busy                   : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_SHA_DBG_REG_7_Register use record
        Sha_Sha_Agent_Treq_Pvld                at 0 range 25 .. 25;
        Sha_Sha_Agent_Treq_Read                at 0 range 24 .. 24;
        Sha_Idma_Req_Tbuf_Prdy                 at 0 range 23 .. 23;
        Sha_Idma_Req_Tbuf_Pvld                 at 0 range 22 .. 22;
        Sha_Idma_Resp_Tbuf_Prdy                at 0 range 21 .. 21;
        Sha_Idma_Resp_Tbuf_Pvld                at 0 range 20 .. 20;
        Sha_Blk_Wd_Valid                       at 0 range 15 .. 15;
        Sha_Blk_Wd_Stall                       at 0 range 14 .. 14;
        Sha_Idma2eng_Pvld                      at 0 range  9 ..  9;
        Sha_Idma2eng_Stall                     at 0 range  8 ..  8;
        Sha_Nv_Se_Sha2data2fbif_Sreq_Pvld      at 0 range  7 ..  7;
        Sha_Nv_Se_Sha2data2fbif_Sreq_Prdy      at 0 range  6 ..  6;
        Sha_Nv_Se_Sha2data_Fbif2pdma_Rdat_Pvld at 0 range  5 ..  5;
        Sha_Nv_Se_Sha2data_Fbif2pdma_Rdat_Prdy at 0 range  4 ..  4;
        Sha_Pe2afbif_Rd_Req                    at 0 range  1 ..  1;
        Sha_Pe2afbif_Rd_Busy                   at 0 range  0 ..  0;
    end record;

    LW_PRGNLCL_FALCON_VER_MAJOR_DEFT  : constant NvU4  := 16#2#;
    LW_PRGNLCL_FALCON_VER_MINOR_DEFT  : constant NvU14 := 16#1#;
    LW_PRGNLCL_FALCON_VER_BUGFIX_DEFT : constant NvU14 := 16#0#;

    type LW_PRGNLCL_FALCON_VER_Register is record
        Major  : NvU4;
        Minor  : NvU14;
        Bugfix : NvU14;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_VER_Register use record
        Major  at 0 range  0 ..  3;
        Minor  at 0 range  4 .. 17;
        Bugfix at 0 range 18 .. 31;
    end record;

    LW_PRGNLCL_FALCON_MOD_SEL_ALGO_AES   : constant NvU8 := 16#0#;
    LW_PRGNLCL_FALCON_MOD_SEL_ALGO_RSA3K : constant NvU8 := 16#1#;

    type LW_PRGNLCL_FALCON_MOD_SEL_Register is record
        Algo : NvU8;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_MOD_SEL_Register use record
        Algo at 0 range 0 .. 7;
    end record;

    type LW_PRGNLCL_FALCON_MOD_EN_AES_Field is (AES_DISABLE, AES_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_MOD_EN_AES_Field use (AES_DISABLE => 16#0#, AES_ENABLE => 16#1#);
    type LW_PRGNLCL_FALCON_MOD_EN_RSA3K_Field is (RSA3K_DISABLE, RSA3K_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_MOD_EN_RSA3K_Field use (RSA3K_DISABLE => 16#0#, RSA3K_ENABLE => 16#1#);

    type LW_PRGNLCL_FALCON_MOD_EN_Register is record
        Aes   : LW_PRGNLCL_FALCON_MOD_EN_AES_Field;
        Rsa3k : LW_PRGNLCL_FALCON_MOD_EN_RSA3K_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_MOD_EN_Register use record
        Aes   at 0 range 0 .. 0;
        Rsa3k at 0 range 1 .. 1;
    end record;

    type LW_PRGNLCL_FALCON_PKCBROM_VER_Register is record
        Dev   : NvU12;
        Eco   : NvU4;
        Minor : NvU8;
        Major : NvU8;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_PKCBROM_VER_Register use record
        Dev   at 0 range  0 .. 11;
        Eco   at 0 range 12 .. 15;
        Minor at 0 range 16 .. 23;
        Major at 0 range 24 .. 31;
    end record;

    LW_PRGNLCL_FALCON_VHRCFG_BASE_VAL_SEC     : constant NvU32 := 16#8200#;
    LW_PRGNLCL_FALCON_VHRCFG_BASE_VAL_PWR_PMU : constant NvU32 := 16#83f0#;
    LW_PRGNLCL_FALCON_VHRCFG_BASE_VAL_LWDEC   : constant NvU32 := 16#8490#;
    LW_PRGNLCL_FALCON_VHRCFG_BASE_VAL_GSP     : constant NvU32 := 16#87a0#;
    LW_PRGNLCL_FALCON_VHRCFG_BASE_VAL_SOE     : constant NvU32 := 16#8200#;
    LW_PRGNLCL_FALCON_VHRCFG_BASE_VAL_PSC     : constant NvU32 := 16#0#;
    LW_PRGNLCL_FALCON_VHRCFG_BASE_VAL_DEFT    : constant NvU32 := 16#0#;
    LW_PRGNLCL_FALCON_VHRCFG_BASE_VAL_LDPC    : constant NvU32 := 16#0#;
    LW_PRGNLCL_FALCON_VHRCFG_BASE_VAL_MINION  : constant NvU32 := 16#0#;
    LW_PRGNLCL_FALCON_VHRCFG_BASE_VAL_FSP     : constant NvU32 := 16#0#;

    type LW_PRGNLCL_FALCON_VHRCFG_BASE_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_VHRCFG_BASE_Register use record
        Val at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_FALCON_VHRCFG_ENTNUM_VAL_SEC     : constant NvU32 := 16#a#;
    LW_PRGNLCL_FALCON_VHRCFG_ENTNUM_VAL_PWR_PMU : constant NvU32 := 16#3#;
    LW_PRGNLCL_FALCON_VHRCFG_ENTNUM_VAL_LWDEC   : constant NvU32 := 16#10#;
    LW_PRGNLCL_FALCON_VHRCFG_ENTNUM_VAL_GSP     : constant NvU32 := 16#3#;
    LW_PRGNLCL_FALCON_VHRCFG_ENTNUM_VAL_SOE     : constant NvU32 := 16#a#;
    LW_PRGNLCL_FALCON_VHRCFG_ENTNUM_VAL_PSC     : constant NvU32 := 16#0#;
    LW_PRGNLCL_FALCON_VHRCFG_ENTNUM_VAL_DEFT    : constant NvU32 := 16#0#;
    LW_PRGNLCL_FALCON_VHRCFG_ENTNUM_VAL_LDPC    : constant NvU32 := 16#0#;
    LW_PRGNLCL_FALCON_VHRCFG_ENTNUM_VAL_MINION  : constant NvU32 := 16#0#;
    LW_PRGNLCL_FALCON_VHRCFG_ENTNUM_VAL_FSP     : constant NvU32 := 16#0#;

    type LW_PRGNLCL_FALCON_VHRCFG_ENTNUM_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_VHRCFG_ENTNUM_Register use record
        Val at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_FALCON_BMEMBASE_VAL_DEFT : constant NvU32 := 16#210_0000#;

    type LW_PRGNLCL_FALCON_BMEMBASE_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_BMEMBASE_Register use record
        Val at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_FALCON_BROM_CURR_UCODE_ID_VAL_DEFT : constant NvU8 := 16#0#;
    LW_PRGNLCL_FALCON_BROM_CURR_UCODE_ID_VAL_MAX  : constant NvU8 := 16#10#;

    type LW_PRGNLCL_FALCON_BROM_CURR_UCODE_ID_Register is record
        Val : NvU8;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_BROM_CURR_UCODE_ID_Register use record
        Val at 0 range 0 .. 7;
    end record;

    LW_PRGNLCL_FALCON_UCODE_VERSION_VER_DEF : constant NvU8 := 16#0#;

    type LW_PRGNLCL_FALCON_UCODE_VERSION_Register is record
        Ver : NvU8;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_UCODE_VERSION_Register use record
        Ver at 0 range 0 .. 7;
    end record;

    type LW_PRGNLCL_FALCON_BROM_ENGIDMASK_SEC_Field is (SEC_DISABLED, SEC_ENABLED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_BROM_ENGIDMASK_SEC_Field use (SEC_DISABLED => 16#0#, SEC_ENABLED => 16#1#);
    type LW_PRGNLCL_FALCON_BROM_ENGIDMASK_DPU_Field is (DPU_DISABLED, DPU_ENABLED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_BROM_ENGIDMASK_DPU_Field use (DPU_DISABLED => 16#0#, DPU_ENABLED => 16#1#);
    type LW_PRGNLCL_FALCON_BROM_ENGIDMASK_LWDEC_Field is (NVDEC_DISABLED, NVDEC_ENABLED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_BROM_ENGIDMASK_LWDEC_Field use (NVDEC_DISABLED => 16#0#, NVDEC_ENABLED => 16#1#);
    type LW_PRGNLCL_FALCON_BROM_ENGIDMASK_PMU_Field is (PMU_DISABLED, PMU_ENABLED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_BROM_ENGIDMASK_PMU_Field use (PMU_DISABLED => 16#0#, PMU_ENABLED => 16#1#);
    type LW_PRGNLCL_FALCON_BROM_ENGIDMASK_FBFALCON_Field is (FBFALCON_DISABLED, FBFALCON_ENABLED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_BROM_ENGIDMASK_FBFALCON_Field use (FBFALCON_DISABLED => 16#0#, FBFALCON_ENABLED => 16#1#);
    type LW_PRGNLCL_FALCON_BROM_ENGIDMASK_LWENC_Field is (NVENC_DISABLED, NVENC_ENABLED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_BROM_ENGIDMASK_LWENC_Field use (NVENC_DISABLED => 16#0#, NVENC_ENABLED => 16#1#);
    type LW_PRGNLCL_FALCON_BROM_ENGIDMASK_GPCCS_Field is (GPCCS_DISABLED, GPCCS_ENABLED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_BROM_ENGIDMASK_GPCCS_Field use (GPCCS_DISABLED => 16#0#, GPCCS_ENABLED => 16#1#);
    type LW_PRGNLCL_FALCON_BROM_ENGIDMASK_FECS_Field is (FECS_DISABLED, FECS_ENABLED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_BROM_ENGIDMASK_FECS_Field use (FECS_DISABLED => 16#0#, FECS_ENABLED => 16#1#);
    type LW_PRGNLCL_FALCON_BROM_ENGIDMASK_MINION_Field is (MINION_DISABLED, MINION_ENABLED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_BROM_ENGIDMASK_MINION_Field use (MINION_DISABLED => 16#0#, MINION_ENABLED => 16#1#);
    type LW_PRGNLCL_FALCON_BROM_ENGIDMASK_XUSB_Field is (XUSB_DISABLED, XUSB_ENABLED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_BROM_ENGIDMASK_XUSB_Field use (XUSB_DISABLED => 16#0#, XUSB_ENABLED => 16#1#);
    type LW_PRGNLCL_FALCON_BROM_ENGIDMASK_GSP_Field is (GSP_DISABLED, GSP_ENABLED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_BROM_ENGIDMASK_GSP_Field use (GSP_DISABLED => 16#0#, GSP_ENABLED => 16#1#);
    type LW_PRGNLCL_FALCON_BROM_ENGIDMASK_LWJPG_Field is (NVJPG_DISABLED, NVJPG_ENABLED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_BROM_ENGIDMASK_LWJPG_Field use (NVJPG_DISABLED => 16#0#, NVJPG_ENABLED => 16#1#);
    type LW_PRGNLCL_FALCON_BROM_ENGIDMASK_OFA_Field is (OFA_DISABLED, OFA_ENABLED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_BROM_ENGIDMASK_OFA_Field use (OFA_DISABLED => 16#0#, OFA_ENABLED => 16#1#);
    type LW_PRGNLCL_FALCON_BROM_ENGIDMASK_PSC_Field is (PSC_DISABLED, PSC_ENABLED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_BROM_ENGIDMASK_PSC_Field use (PSC_DISABLED => 16#0#, PSC_ENABLED => 16#1#);
    type LW_PRGNLCL_FALCON_BROM_ENGIDMASK_SOE_Field is (SOE_DISABLED, SOE_ENABLED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_BROM_ENGIDMASK_SOE_Field use (SOE_DISABLED => 16#0#, SOE_ENABLED => 16#1#);
    type LW_PRGNLCL_FALCON_BROM_ENGIDMASK_LDPC_Field is (LDPC_DISABLED, LDPC_ENABLED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_BROM_ENGIDMASK_LDPC_Field use (LDPC_DISABLED => 16#0#, LDPC_ENABLED => 16#1#);
    type LW_PRGNLCL_FALCON_BROM_ENGIDMASK_FSP_Field is (FSP_DISABLED, FSP_ENABLED) with
        Size => 1;
    for LW_PRGNLCL_FALCON_BROM_ENGIDMASK_FSP_Field use (FSP_DISABLED => 16#0#, FSP_ENABLED => 16#1#);

    type LW_PRGNLCL_FALCON_BROM_ENGIDMASK_Register is record
        Sec      : LW_PRGNLCL_FALCON_BROM_ENGIDMASK_SEC_Field;
        Dpu      : LW_PRGNLCL_FALCON_BROM_ENGIDMASK_DPU_Field;
        Nvdec    : LW_PRGNLCL_FALCON_BROM_ENGIDMASK_LWDEC_Field;
        Pmu      : LW_PRGNLCL_FALCON_BROM_ENGIDMASK_PMU_Field;
        Fbfalcon : LW_PRGNLCL_FALCON_BROM_ENGIDMASK_FBFALCON_Field;
        Nvenc    : LW_PRGNLCL_FALCON_BROM_ENGIDMASK_LWENC_Field;
        Gpccs    : LW_PRGNLCL_FALCON_BROM_ENGIDMASK_GPCCS_Field;
        Fecs     : LW_PRGNLCL_FALCON_BROM_ENGIDMASK_FECS_Field;
        Minion   : LW_PRGNLCL_FALCON_BROM_ENGIDMASK_MINION_Field;
        Xusb     : LW_PRGNLCL_FALCON_BROM_ENGIDMASK_XUSB_Field;
        Gsp      : LW_PRGNLCL_FALCON_BROM_ENGIDMASK_GSP_Field;
        Nvjpg    : LW_PRGNLCL_FALCON_BROM_ENGIDMASK_LWJPG_Field;
        Ofa      : LW_PRGNLCL_FALCON_BROM_ENGIDMASK_OFA_Field;
        Psc      : LW_PRGNLCL_FALCON_BROM_ENGIDMASK_PSC_Field;
        Soe      : LW_PRGNLCL_FALCON_BROM_ENGIDMASK_SOE_Field;
        Ldpc     : LW_PRGNLCL_FALCON_BROM_ENGIDMASK_LDPC_Field;
        Fsp      : LW_PRGNLCL_FALCON_BROM_ENGIDMASK_FSP_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_BROM_ENGIDMASK_Register use record
        Sec      at 0 range  0 ..  0;
        Dpu      at 0 range  1 ..  1;
        Nvdec    at 0 range  2 ..  2;
        Pmu      at 0 range  3 ..  3;
        Fbfalcon at 0 range  4 ..  4;
        Nvenc    at 0 range  5 ..  5;
        Gpccs    at 0 range  6 ..  6;
        Fecs     at 0 range  7 ..  7;
        Minion   at 0 range  8 ..  8;
        Xusb     at 0 range  9 ..  9;
        Gsp      at 0 range 10 .. 10;
        Nvjpg    at 0 range 11 .. 11;
        Ofa      at 0 range 12 .. 12;
        Psc      at 0 range 13 .. 13;
        Soe      at 0 range 14 .. 14;
        Ldpc     at 0 range 15 .. 15;
        Fsp      at 0 range 16 .. 16;
    end record;

    type LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_HWVER_VALID_Field is (VALID_FALSE, VALID_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_HWVER_VALID_Field use (VALID_FALSE => 16#0#, VALID_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_HWVER_BUSY_Field is (BUSY_FALSE, BUSY_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_HWVER_BUSY_Field use (BUSY_FALSE => 16#0#, BUSY_TRUE => 16#1#);
    LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_HWVER_RELOAD_INIT : constant NvU1 := 16#1#;
    type LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_CTKID_VALID_Field is (VALID_FALSE, VALID_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_CTKID_VALID_Field use (VALID_FALSE => 16#0#, VALID_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_CTKID_BUSY_Field is (BUSY_FALSE, BUSY_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_CTKID_BUSY_Field use (BUSY_FALSE => 16#0#, BUSY_TRUE => 16#1#);
    LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_CTKID_RELOAD_INIT : constant NvU1 := 16#1#;

    type LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_Register is record
        Hwver_Valid  : LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_HWVER_VALID_Field;
        Hwver_Busy   : LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_HWVER_BUSY_Field;
        Hwver_Reload : NvU1;
        Ctkid_Valid  : LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_CTKID_VALID_Field;
        Ctkid_Busy   : LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_CTKID_BUSY_Field;
        Ctkid_Reload : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_Register use record
        Hwver_Valid  at 0 range  0 ..  0;
        Hwver_Busy   at 0 range  1 ..  1;
        Hwver_Reload at 0 range  4 ..  4;
        Ctkid_Valid  at 0 range  8 ..  8;
        Ctkid_Busy   at 0 range  9 ..  9;
        Ctkid_Reload at 0 range 12 .. 12;
    end record;

    LW_PRGNLCL_FALCON_PR_CTKID_VAL_DEF : constant NvU8 := 16#0#;

    type LW_PRGNLCL_FALCON_PR_CTKID_Register is record
        Val : NvU8;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_PR_CTKID_Register use record
        Val at 0 range 0 .. 7;
    end record;

    LW_PRGNLCL_FALCON_BROM_FUNID_ID_DEFT       : constant NvU8 := 16#0#;
    LW_PRGNLCL_FALCON_BROM_FUNID_ID_DECFUSEKEY : constant NvU8 := 16#1#;
    LW_PRGNLCL_FALCON_BROM_FUNID_ID_GENTK      : constant NvU8 := 16#2#;
    LW_PRGNLCL_FALCON_BROM_FUNID_ID_DECMPK     : constant NvU8 := 16#3#;
    LW_PRGNLCL_FALCON_BROM_FUNID_ID_SIGBYMPK   : constant NvU8 := 16#4#;
    LW_PRGNLCL_FALCON_BROM_FUNID_ID_CLRMPK     : constant NvU8 := 16#5#;
    LW_PRGNLCL_FALCON_BROM_FUNID_ID_ECDSASIGN  : constant NvU8 := 16#6#;
    LW_PRGNLCL_FALCON_BROM_FUNID_ID_ECDSAVERIF : constant NvU8 := 16#7#;
    type LW_PRGNLCL_FALCON_BROM_FUNID_CALLER_LVL_Field is (LVL_0, LVL_1, LVL_2, LVL_3) with
        Size => 2;
    for LW_PRGNLCL_FALCON_BROM_FUNID_CALLER_LVL_Field use (LVL_0 => 16#0#, LVL_1 => 16#1#, LVL_2 => 16#2#, LVL_3 => 16#3#);

    type LW_PRGNLCL_FALCON_BROM_FUNID_Register is record
        Id         : NvU8;
        Caller_Lvl : LW_PRGNLCL_FALCON_BROM_FUNID_CALLER_LVL_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_BROM_FUNID_Register use record
        Id         at 0 range 0 .. 7;
        Caller_Lvl at 0 range 8 .. 9;
    end record;

    LW_PRGNLCL_FALCON_BROM_PARAADDR_VAL_DEFT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_FALCON_BROM_PARAADDR_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_BROM_PARAADDR_Register use record
        Val at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_FALCON_BROM_RETCODE_ERR_SUCCESS                       : constant NvU8  := 16#0#;
    LW_PRGNLCL_FALCON_BROM_RETCODE_ERR_ILLFUNID                      : constant NvU8  := 16#1#;
    LW_PRGNLCL_FALCON_BROM_RETCODE_ERR_ILLDMEMPTR_PA_FAULT           : constant NvU8  := 16#2#;
    LW_PRGNLCL_FALCON_BROM_RETCODE_ERR_ILLDMEMPTR_NOT_IN_DMEM        : constant NvU8  := 16#3#;
    LW_PRGNLCL_FALCON_BROM_RETCODE_ERR_ILLDMEMPTR_NO_ENOUGH_SPACE    : constant NvU8  := 16#4#;
    LW_PRGNLCL_FALCON_BROM_RETCODE_ERR_ILLDMEMPTR_VA_NOT_VALID       : constant NvU8  := 16#5#;
    LW_PRGNLCL_FALCON_BROM_RETCODE_ERR_ILLDMEMPTR_MISALIGN_4BYTES    : constant NvU8  := 16#6#;
    LW_PRGNLCL_FALCON_BROM_RETCODE_ERR_ILLDMEMPTR_MISALIGN_16BYTES   : constant NvU8  := 16#7#;
    LW_PRGNLCL_FALCON_BROM_RETCODE_ERR_ILLDMEMPTR_MISALIGN_32BYTES   : constant NvU8  := 16#8#;
    LW_PRGNLCL_FALCON_BROM_RETCODE_ERR_ILLDMEMPTR_OUTPUT_NOT_ALLOWED : constant NvU8  := 16#9#;
    LW_PRGNLCL_FALCON_BROM_RETCODE_ERR_TK_PTR_IS_NS_READABLE         : constant NvU8  := 16#a#;
    LW_PRGNLCL_FALCON_BROM_RETCODE_ERR_NOT_CALLED_BY_HS              : constant NvU8  := 16#b#;
    LW_PRGNLCL_FALCON_BROM_RETCODE_ERR_CALL_FROM_LVL0                : constant NvU8  := 16#c#;
    LW_PRGNLCL_FALCON_BROM_RETCODE_ERR_ILLUCODEID                    : constant NvU8  := 16#d#;
    LW_PRGNLCL_FALCON_BROM_RETCODE_ERR_DISPOSE_MPK_FAIL              : constant NvU8  := 16#e#;
    LW_PRGNLCL_FALCON_BROM_RETCODE_ERR_CTKID_INVALID                 : constant NvU8  := 16#f#;
    LW_PRGNLCL_FALCON_BROM_RETCODE_ERR_ILLTKID                       : constant NvU8  := 16#10#;
    LW_PRGNLCL_FALCON_BROM_RETCODE_ERR_INVLDPMUK                     : constant NvU8  := 16#11#;
    LW_PRGNLCL_FALCON_BROM_RETCODE_ERR_INVLDPDUK                     : constant NvU8  := 16#12#;
    LW_PRGNLCL_FALCON_BROM_RETCODE_ERR_INVLDMPK                      : constant NvU8  := 16#13#;
    LW_PRGNLCL_FALCON_BROM_RETCODE_ERR_SIGFAIL                       : constant NvU8  := 16#14#;
    LW_PRGNLCL_FALCON_BROM_RETCODE_ERR_PDI_INVALID                   : constant NvU8  := 16#15#;
    LW_PRGNLCL_FALCON_BROM_RETCODE_ERR_LOAD_KMEM2SCP_FAIL            : constant NvU8  := 16#16#;
    LW_PRGNLCL_FALCON_BROM_RETCODE_ERR_WRONG_PROTECTINFO             : constant NvU8  := 16#17#;
    LW_PRGNLCL_FALCON_BROM_RETCODE_ERR_KSLT_K3_IS_0                  : constant NvU8  := 16#18#;
    LW_PRGNLCL_FALCON_BROM_RETCODE_ERR_WRONG_HEADER_NUMOF16B         : constant NvU8  := 16#19#;
    LW_PRGNLCL_FALCON_BROM_RETCODE_ERR_WRONG_HEADER_NUMOF32B         : constant NvU8  := 16#1a#;
    LW_PRGNLCL_FALCON_BROM_RETCODE_ERR_WRONG_HEADER_RSVD_ZEROS       : constant NvU8  := 16#1b#;
    LW_PRGNLCL_FALCON_BROM_RETCODE_ERR_MPK_IS_VALID                  : constant NvU8  := 16#1c#;
    LW_PRGNLCL_FALCON_BROM_RETCODE_ERR_SCP_ERR                       : constant NvU8  := 16#1d#;
    LW_PRGNLCL_FALCON_BROM_RETCODE_ERR_ILLDMEMPTR_MISALIGN_256BYTES  : constant NvU8  := 16#1e#;
    LW_PRGNLCL_FALCON_BROM_RETCODE_ERRID_DEFT                        : constant NvU12 := 16#0#;
    LW_PRGNLCL_FALCON_BROM_RETCODE_FUNID_DEFT                        : constant NvU4  := 16#0#;
    LW_PRGNLCL_FALCON_BROM_RETCODE_ERRINFO_DEFT                      : constant NvU8  := 16#0#;

    type LW_PRGNLCL_FALCON_BROM_RETCODE_Register is record
        Err     : NvU8;
        Errid   : NvU12;
        Funid   : NvU4;
        Errinfo : NvU8;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_BROM_RETCODE_Register use record
        Err     at 0 range  0 ..  7;
        Errid   at 0 range  8 .. 19;
        Funid   at 0 range 20 .. 23;
        Errinfo at 0 range 24 .. 31;
    end record;

    LW_PRGNLCL_FALCON_KMEMBASE_VAL_DEF : constant NvU32 := 16#200_0000#;

    type LW_PRGNLCL_FALCON_KMEMBASE_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_KMEMBASE_Register use record
        Val at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_FALCON_KMEMC_OFFS_INIT     : constant NvU14 := 16#0#;
    LW_PRGNLCL_FALCON_KMEMC_OFFS_PROTINFO : constant NvU14 := 16#400#;
    LW_PRGNLCL_FALCON_KMEMC_OFFS_MAX      : constant NvU14 := 16#5ff#;
    type LW_PRGNLCL_FALCON_KMEMC_AINCW_Field is (AINCW_FALSE, AINCW_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_KMEMC_AINCW_Field use (AINCW_FALSE => 16#0#, AINCW_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_KMEMC_AINCR_Field is (AINCR_FALSE, AINCR_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_KMEMC_AINCR_Field use (AINCR_FALSE => 16#0#, AINCR_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_KMEMC_ERR_Field is (ERR_SUCCESS, ERR_1, ERR_2, ERR_3, ERR_4, ERR_5, ERR_6, ERR_7) with
        Size => 3;
    for LW_PRGNLCL_FALCON_KMEMC_ERR_Field use (ERR_SUCCESS => 16#0#, ERR_1 => 16#1#, ERR_2 => 16#2#, ERR_3 => 16#3#, ERR_4 => 16#4#, ERR_5 => 16#5#, ERR_6 => 16#6#,
         ERR_7                                             => 16#7#);

    type LW_PRGNLCL_FALCON_KMEMC_Register is record
        Offs  : NvU14;
        Aincw : LW_PRGNLCL_FALCON_KMEMC_AINCW_Field;
        Aincr : LW_PRGNLCL_FALCON_KMEMC_AINCR_Field;
        Err   : LW_PRGNLCL_FALCON_KMEMC_ERR_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_KMEMC_Register use record
        Offs  at 0 range  2 .. 15;
        Aincw at 0 range 24 .. 24;
        Aincr at 0 range 25 .. 25;
        Err   at 0 range 26 .. 28;
    end record;

    type LW_PRGNLCL_FALCON_KMEMD_Register is record
        Data : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_KMEMD_Register use record
        Data at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_FALCON_KMEM_CTL_IDX_INIT     : constant NvU8 := 16#0#;
    LW_PRGNLCL_FALCON_KMEM_CTL_CMD_NOP      : constant NvU4 := 16#0#;
    LW_PRGNLCL_FALCON_KMEM_CTL_CMD_DISPOSE  : constant NvU4 := 16#1#;
    LW_PRGNLCL_FALCON_KMEM_CTL_CMD_LOADTO63 : constant NvU4 := 16#2#;
    type LW_PRGNLCL_FALCON_KMEM_CTL_RESULT_Field is
        (RESULT_NOP, RESULT_DISPOSE_DONE, RESULT_DISPOSE_FAILED_BY_RECYCLABLE_IS_0, RESULT_DISPOSE_FAILED_BY_PRIVDISABLED, RESULT_DISPOSE_FAILED_BY_NOTWRITEABLE,
         RESULT_LOADTO63_DONE, RESULT_LOADTO63_FAILED_BY_LOADABLE_IS_0, RESULT_LOADTO63_FAILED_BY_PRIVDISABLED, RESULT_LOADTO63_FAILED_BY_UCODIDMASK_IS_0,
         RESULT_DISPOSE_FAILED_BY_SLOT_MASK, RESULT_LOADTO63_FAILED_BY_SLOT_MASK, RESULT_DISPOSE_FAILED_BY_NON_LEVEL3, RESULT_DISPOSE_FAILED_BY_UCODEIDMASK_IS_0) with
        Size => 4;
    for LW_PRGNLCL_FALCON_KMEM_CTL_RESULT_Field use (RESULT_NOP => 16#0#, RESULT_DISPOSE_DONE => 16#1#, RESULT_DISPOSE_FAILED_BY_RECYCLABLE_IS_0 => 16#2#,
         RESULT_DISPOSE_FAILED_BY_PRIVDISABLED                  => 16#3#, RESULT_DISPOSE_FAILED_BY_NOTWRITEABLE => 16#4#, RESULT_LOADTO63_DONE => 16#5#,
         RESULT_LOADTO63_FAILED_BY_LOADABLE_IS_0                => 16#6#, RESULT_LOADTO63_FAILED_BY_PRIVDISABLED => 16#7#, RESULT_LOADTO63_FAILED_BY_UCODIDMASK_IS_0 => 16#8#,
         RESULT_DISPOSE_FAILED_BY_SLOT_MASK                     => 16#9#, RESULT_LOADTO63_FAILED_BY_SLOT_MASK => 16#a#, RESULT_DISPOSE_FAILED_BY_NON_LEVEL3 => 16#b#,
         RESULT_DISPOSE_FAILED_BY_UCODEIDMASK_IS_0              => 16#c#);

    type LW_PRGNLCL_FALCON_KMEM_CTL_Register is record
        Idx    : NvU8;
        Cmd    : NvU4;
        Result : LW_PRGNLCL_FALCON_KMEM_CTL_RESULT_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_KMEM_CTL_Register use record
        Idx    at 0 range  0 ..  7;
        Cmd    at 0 range 16 .. 19;
        Result at 0 range 20 .. 23;
    end record;

    LW_PRGNLCL_FALCON_KMEMCFG_NUMOFKSLT_DEFT          : constant NvU16 := 16#100#;
    LW_PRGNLCL_FALCON_KMEMCFG_KSLT_LENGTH_DEFT        : constant NvU6  := 16#10#;
    LW_PRGNLCL_FALCON_KMEMCFG_PROTECTINFO_LENGTH_DEFT : constant NvU4  := 16#8#;
    LW_PRGNLCL_FALCON_KMEMCFG_BROM_USED_SLOTS_DEFT    : constant NvU6  := 16#10#;

    type LW_PRGNLCL_FALCON_KMEMCFG_Register is record
        Numofkslt          : NvU16;
        Kslt_Length        : NvU6;
        Protectinfo_Length : NvU4;
        Brom_Used_Slots    : NvU6;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_KMEMCFG_Register use record
        Numofkslt          at 0 range  0 .. 15;
        Kslt_Length        at 0 range 16 .. 21;
        Protectinfo_Length at 0 range 22 .. 25;
        Brom_Used_Slots    at 0 range 26 .. 31;
    end record;

    LW_PRGNLCL_FALCON_KMEM_VALID_VAL_DEFT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_FALCON_KMEM_VALID_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_KMEM_VALID_Register use record
        Val at 0 range 0 .. 31;
    end record;

    type LW_PRGNLCL_FALCON_KMEM_VIOLATION_CTL_ACT_Field is (ACT_HALT, ACT_EXC) with
        Size => 1;
    for LW_PRGNLCL_FALCON_KMEM_VIOLATION_CTL_ACT_Field use (ACT_HALT => 16#0#, ACT_EXC => 16#1#);

    type LW_PRGNLCL_FALCON_KMEM_VIOLATION_CTL_Register is record
        Act : LW_PRGNLCL_FALCON_KMEM_VIOLATION_CTL_ACT_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_KMEM_VIOLATION_CTL_Register use record
        Act at 0 range 0 .. 0;
    end record;

    type LW_PRGNLCL_FALCON_EXCI_KMEM_VIOLATION_DBGINF_OP_Field is (OP_READ, OP_WRITE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_EXCI_KMEM_VIOLATION_DBGINF_OP_Field use (OP_READ => 16#0#, OP_WRITE => 16#1#);
    LW_PRGNLCL_FALCON_EXCI_KMEM_VIOLATION_DBGINF_MASTER_LVL_INIT    : constant NvU2 := 16#0#;
    LW_PRGNLCL_FALCON_EXCI_KMEM_VIOLATION_DBGINF_MASTER_UCODID_INIT : constant NvU8 := 16#0#;
    LW_PRGNLCL_FALCON_EXCI_KMEM_VIOLATION_DBGINF_KSLT_IDX_INIT      : constant NvU8 := 16#0#;
    type LW_PRGNLCL_FALCON_EXCI_KMEM_VIOLATION_DBGINF_TARGET_Field is (TARGET_KSLT, TARGET_PROTINFO) with
        Size => 1;
    for LW_PRGNLCL_FALCON_EXCI_KMEM_VIOLATION_DBGINF_TARGET_Field use (TARGET_KSLT => 16#0#, TARGET_PROTINFO => 16#1#);

    type LW_PRGNLCL_FALCON_EXCI_KMEM_VIOLATION_DBGINF_Register is record
        Op            : LW_PRGNLCL_FALCON_EXCI_KMEM_VIOLATION_DBGINF_OP_Field;
        Master_Lvl    : NvU2;
        Master_Ucodid : NvU8;
        Kslt_Idx      : NvU8;
        Target        : LW_PRGNLCL_FALCON_EXCI_KMEM_VIOLATION_DBGINF_TARGET_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_EXCI_KMEM_VIOLATION_DBGINF_Register use record
        Op            at 0 range  0 ..  0;
        Master_Lvl    at 0 range  4 ..  5;
        Master_Ucodid at 0 range  8 .. 15;
        Kslt_Idx      at 0 range 16 .. 23;
        Target        at 0 range 24 .. 24;
    end record;

    LW_PRGNLCL_FALCON_KMEM_SLOT_MASK_VAL_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_FALCON_KMEM_SLOT_MASK_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_KMEM_SLOT_MASK_Register use record
        Val at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_FALCON_KEYGLOB_CTRL_INDEX_INIT : constant NvU8 := 16#0#;
    type LW_PRGNLCL_FALCON_KEYGLOB_CTRL_STAT_VALID_Field is (VALID_FALSE, VALID_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_KEYGLOB_CTRL_STAT_VALID_Field use (VALID_FALSE => 16#0#, VALID_TRUE => 16#1#);
    type LW_PRGNLCL_FALCON_KEYGLOB_CTRL_STAT_BUSY_Field is (BUSY_FALSE, BUSY_TRUE) with
        Size => 1;
    for LW_PRGNLCL_FALCON_KEYGLOB_CTRL_STAT_BUSY_Field use (BUSY_FALSE => 16#0#, BUSY_TRUE => 16#1#);
    LW_PRGNLCL_FALCON_KEYGLOB_CTRL_STAT_RELOAD_INIT : constant NvU1 := 16#1#;

    type LW_PRGNLCL_FALCON_KEYGLOB_CTRL_Register is record
        Index       : NvU8;
        Stat_Valid  : LW_PRGNLCL_FALCON_KEYGLOB_CTRL_STAT_VALID_Field;
        Stat_Busy   : LW_PRGNLCL_FALCON_KEYGLOB_CTRL_STAT_BUSY_Field;
        Stat_Reload : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_KEYGLOB_CTRL_Register use record
        Index       at 0 range  0 ..  7;
        Stat_Valid  at 0 range 16 .. 16;
        Stat_Busy   at 0 range 17 .. 17;
        Stat_Reload at 0 range 20 .. 20;
    end record;

    type LW_PRGNLCL_FALCON_KEYGLOB_DATA_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_FALCON_KEYGLOB_DATA_Register use record
        Val at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_RISCV_EXE_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#f#;
    LW_PRGNLCL_RISCV_EXE_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_RISCV_EXE_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_RISCV_EXE_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_RISCV_EXE_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_RISCV_EXE_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    LW_PRGNLCL_RISCV_EXE_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    type LW_PRGNLCL_RISCV_EXE_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_RISCV_EXE_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_RISCV_EXE_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_RISCV_EXE_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_RISCV_EXE_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_EXE_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_RISCV_EXE_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_EXE_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_RISCV_EXE_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_RISCV_EXE_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_EXE_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_EXE_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_EXE_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_EXE_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_EXE_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_EXE_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_EXE_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_EXE_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_EXE_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_RISCV_EXE_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_EXE_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_RISCV_EXE_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_EXE_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_RISCV_EXE_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_EXE_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_RISCV_EXE_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_RISCV_EXE_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_RISCV_EXE_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_RISCV_EXE_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_RISCV_EXE_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_EXE_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_RISCV_CPUCTL_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_RISCV_CPUCTL_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_RISCV_CPUCTL_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_RISCV_CPUCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_RISCV_CPUCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    LW_PRGNLCL_RISCV_CPUCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    type LW_PRGNLCL_RISCV_CPUCTL_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_RISCV_CPUCTL_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_RISCV_CPUCTL_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_RISCV_CPUCTL_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_RISCV_CPUCTL_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_CPUCTL_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_RISCV_CPUCTL_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_CPUCTL_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_RISCV_CPUCTL_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_RISCV_CPUCTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_CPUCTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_CPUCTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_CPUCTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_CPUCTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_CPUCTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_CPUCTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_CPUCTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_CPUCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_CPUCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_RISCV_CPUCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_CPUCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_RISCV_CPUCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_CPUCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_RISCV_CPUCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_CPUCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_RISCV_CPUCTL_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_RISCV_CPUCTL_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_RISCV_CPUCTL_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_RISCV_CPUCTL_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_RISCV_CPUCTL_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_CPUCTL_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_RISCV_IRQ_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#f#;
    LW_PRGNLCL_RISCV_IRQ_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_RISCV_IRQ_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_RISCV_IRQ_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_RISCV_IRQ_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_RISCV_IRQ_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    LW_PRGNLCL_RISCV_IRQ_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    type LW_PRGNLCL_RISCV_IRQ_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQ_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_RISCV_IRQ_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQ_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_RISCV_IRQ_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQ_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_RISCV_IRQ_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQ_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_RISCV_IRQ_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_RISCV_IRQ_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_IRQ_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_IRQ_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_IRQ_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_IRQ_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_IRQ_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_IRQ_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_IRQ_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_IRQ_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_IRQ_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_RISCV_IRQ_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_IRQ_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_RISCV_IRQ_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_IRQ_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_RISCV_IRQ_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_IRQ_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_RISCV_IRQ_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_RISCV_IRQ_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_RISCV_IRQ_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_RISCV_IRQ_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_RISCV_IRQ_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_IRQ_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_RISCV_DBGCTL_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#f#;
    LW_PRGNLCL_RISCV_DBGCTL_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_RISCV_DBGCTL_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_RISCV_DBGCTL_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_RISCV_DBGCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_RISCV_DBGCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    LW_PRGNLCL_RISCV_DBGCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    type LW_PRGNLCL_RISCV_DBGCTL_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_RISCV_DBGCTL_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_RISCV_DBGCTL_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_RISCV_DBGCTL_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_RISCV_DBGCTL_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_DBGCTL_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_RISCV_DBGCTL_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_DBGCTL_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_RISCV_DBGCTL_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_RISCV_DBGCTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_DBGCTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_DBGCTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_DBGCTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_DBGCTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_DBGCTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_DBGCTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_DBGCTL_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_DBGCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_DBGCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_RISCV_DBGCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_DBGCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_RISCV_DBGCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_DBGCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_RISCV_DBGCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_DBGCTL_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_RISCV_DBGCTL_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_RISCV_DBGCTL_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_RISCV_DBGCTL_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_RISCV_DBGCTL_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_RISCV_DBGCTL_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_DBGCTL_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_RISCV_BOOTVEC_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#f#;
    LW_PRGNLCL_RISCV_BOOTVEC_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_RISCV_BOOTVEC_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_RISCV_BOOTVEC_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_RISCV_BOOTVEC_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_RISCV_BOOTVEC_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    LW_PRGNLCL_RISCV_BOOTVEC_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    type LW_PRGNLCL_RISCV_BOOTVEC_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_RISCV_BOOTVEC_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_RISCV_BOOTVEC_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_RISCV_BOOTVEC_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_RISCV_BOOTVEC_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_BOOTVEC_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_RISCV_BOOTVEC_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_BOOTVEC_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_RISCV_BOOTVEC_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_RISCV_BOOTVEC_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_BOOTVEC_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_BOOTVEC_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_BOOTVEC_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_BOOTVEC_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_BOOTVEC_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_BOOTVEC_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_BOOTVEC_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_BOOTVEC_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_BOOTVEC_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_RISCV_BOOTVEC_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_BOOTVEC_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_RISCV_BOOTVEC_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_BOOTVEC_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_RISCV_BOOTVEC_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_BOOTVEC_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_RISCV_BOOTVEC_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_RISCV_BOOTVEC_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_RISCV_BOOTVEC_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_RISCV_BOOTVEC_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_RISCV_BOOTVEC_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_BOOTVEC_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_RISCV_BCR_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#f#;
    LW_PRGNLCL_RISCV_BCR_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_RISCV_BCR_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_RISCV_BCR_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_RISCV_BCR_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_RISCV_BCR_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    LW_PRGNLCL_RISCV_BCR_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    type LW_PRGNLCL_RISCV_BCR_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_RISCV_BCR_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_RISCV_BCR_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_RISCV_BCR_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_RISCV_BCR_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_BCR_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_RISCV_BCR_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_BCR_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_RISCV_BCR_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_RISCV_BCR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_BCR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_BCR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_BCR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_BCR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_BCR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_BCR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_BCR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_BCR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_BCR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_RISCV_BCR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_BCR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_RISCV_BCR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_BCR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_RISCV_BCR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_BCR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_RISCV_BCR_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_RISCV_BCR_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_RISCV_BCR_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_RISCV_BCR_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_RISCV_BCR_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_BCR_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_RISCV_BCR_DMACFG_SEC_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#f#;
    LW_PRGNLCL_RISCV_BCR_DMACFG_SEC_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_RISCV_BCR_DMACFG_SEC_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_RISCV_BCR_DMACFG_SEC_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_RISCV_BCR_DMACFG_SEC_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_RISCV_BCR_DMACFG_SEC_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    LW_PRGNLCL_RISCV_BCR_DMACFG_SEC_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    type LW_PRGNLCL_RISCV_BCR_DMACFG_SEC_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_RISCV_BCR_DMACFG_SEC_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_RISCV_BCR_DMACFG_SEC_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_RISCV_BCR_DMACFG_SEC_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_RISCV_BCR_DMACFG_SEC_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_BCR_DMACFG_SEC_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_RISCV_BCR_DMACFG_SEC_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_BCR_DMACFG_SEC_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_RISCV_BCR_DMACFG_SEC_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_RISCV_BCR_DMACFG_SEC_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_BCR_DMACFG_SEC_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_BCR_DMACFG_SEC_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_BCR_DMACFG_SEC_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_BCR_DMACFG_SEC_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_BCR_DMACFG_SEC_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_BCR_DMACFG_SEC_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_BCR_DMACFG_SEC_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_BCR_DMACFG_SEC_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_BCR_DMACFG_SEC_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_RISCV_BCR_DMACFG_SEC_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_BCR_DMACFG_SEC_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_RISCV_BCR_DMACFG_SEC_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_BCR_DMACFG_SEC_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_RISCV_BCR_DMACFG_SEC_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_BCR_DMACFG_SEC_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_RISCV_BCR_DMACFG_SEC_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_RISCV_BCR_DMACFG_SEC_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_RISCV_BCR_DMACFG_SEC_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_RISCV_BCR_DMACFG_SEC_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_RISCV_BCR_DMACFG_SEC_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_BCR_DMACFG_SEC_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_RISCV_LWCONFIG_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#f#;
    LW_PRGNLCL_RISCV_LWCONFIG_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_RISCV_LWCONFIG_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_RISCV_LWCONFIG_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_RISCV_LWCONFIG_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_RISCV_LWCONFIG_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    LW_PRGNLCL_RISCV_LWCONFIG_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    type LW_PRGNLCL_RISCV_LWCONFIG_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_RISCV_LWCONFIG_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_RISCV_LWCONFIG_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_RISCV_LWCONFIG_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_RISCV_LWCONFIG_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_LWCONFIG_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_RISCV_LWCONFIG_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_LWCONFIG_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_RISCV_LWCONFIG_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_RISCV_LWCONFIG_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_LWCONFIG_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_LWCONFIG_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_LWCONFIG_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_LWCONFIG_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_LWCONFIG_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_LWCONFIG_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_LWCONFIG_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_LWCONFIG_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_LWCONFIG_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_RISCV_LWCONFIG_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_LWCONFIG_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_RISCV_LWCONFIG_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_LWCONFIG_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_RISCV_LWCONFIG_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_LWCONFIG_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_RISCV_LWCONFIG_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_RISCV_LWCONFIG_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_RISCV_LWCONFIG_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_RISCV_LWCONFIG_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_RISCV_LWCONFIG_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_LWCONFIG_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_RISCV_TRACEBUF_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#f#;
    LW_PRGNLCL_RISCV_TRACEBUF_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_RISCV_TRACEBUF_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_RISCV_TRACEBUF_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_RISCV_TRACEBUF_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_RISCV_TRACEBUF_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    LW_PRGNLCL_RISCV_TRACEBUF_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    type LW_PRGNLCL_RISCV_TRACEBUF_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_RISCV_TRACEBUF_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_RISCV_TRACEBUF_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_RISCV_TRACEBUF_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_RISCV_TRACEBUF_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_TRACEBUF_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_RISCV_TRACEBUF_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_TRACEBUF_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_RISCV_TRACEBUF_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_RISCV_TRACEBUF_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_TRACEBUF_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_TRACEBUF_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_TRACEBUF_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_TRACEBUF_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_TRACEBUF_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_TRACEBUF_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_TRACEBUF_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_TRACEBUF_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_TRACEBUF_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_RISCV_TRACEBUF_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_TRACEBUF_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_RISCV_TRACEBUF_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_TRACEBUF_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_RISCV_TRACEBUF_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_TRACEBUF_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_RISCV_TRACEBUF_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_RISCV_TRACEBUF_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_RISCV_TRACEBUF_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_RISCV_TRACEBUF_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_RISCV_TRACEBUF_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_TRACEBUF_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_RISCV_MSIP_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#f#;
    LW_PRGNLCL_RISCV_MSIP_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_RISCV_MSIP_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_RISCV_MSIP_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_RISCV_MSIP_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_RISCV_MSIP_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    LW_PRGNLCL_RISCV_MSIP_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    type LW_PRGNLCL_RISCV_MSIP_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_RISCV_MSIP_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_RISCV_MSIP_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_RISCV_MSIP_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_RISCV_MSIP_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_MSIP_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_RISCV_MSIP_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_MSIP_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_RISCV_MSIP_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_RISCV_MSIP_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_MSIP_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_MSIP_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_MSIP_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_MSIP_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_MSIP_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_MSIP_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_MSIP_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_MSIP_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_MSIP_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_RISCV_MSIP_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_MSIP_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_RISCV_MSIP_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_MSIP_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_RISCV_MSIP_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_MSIP_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_RISCV_MSIP_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_RISCV_MSIP_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_RISCV_MSIP_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_RISCV_MSIP_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_RISCV_MSIP_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_MSIP_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_RISCV_MSPM_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#f#;
    LW_PRGNLCL_RISCV_MSPM_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_RISCV_MSPM_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_RISCV_MSPM_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_RISCV_MSPM_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_RISCV_MSPM_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    LW_PRGNLCL_RISCV_MSPM_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    type LW_PRGNLCL_RISCV_MSPM_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_RISCV_MSPM_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_RISCV_MSPM_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_RISCV_MSPM_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_RISCV_MSPM_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_MSPM_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_RISCV_MSPM_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_MSPM_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_RISCV_MSPM_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_RISCV_MSPM_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_MSPM_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_MSPM_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_MSPM_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_MSPM_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_MSPM_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_MSPM_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_MSPM_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_MSPM_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_MSPM_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_RISCV_MSPM_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_MSPM_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_RISCV_MSPM_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_MSPM_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_RISCV_MSPM_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_MSPM_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_RISCV_MSPM_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_RISCV_MSPM_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_RISCV_MSPM_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_RISCV_MSPM_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_RISCV_MSPM_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_MSPM_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_RISCV_PIC_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#f#;
    LW_PRGNLCL_RISCV_PIC_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_RISCV_PIC_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_RISCV_PIC_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_RISCV_PIC_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_RISCV_PIC_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    LW_PRGNLCL_RISCV_PIC_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    type LW_PRGNLCL_RISCV_PIC_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_RISCV_PIC_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_RISCV_PIC_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_RISCV_PIC_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_RISCV_PIC_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_PIC_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_RISCV_PIC_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_PIC_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_RISCV_PIC_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_RISCV_PIC_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_PIC_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_PIC_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_PIC_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_PIC_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_PIC_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_PIC_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_PIC_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_PIC_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_PIC_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_RISCV_PIC_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_PIC_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_RISCV_PIC_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_PIC_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_RISCV_PIC_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_PIC_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_RISCV_PIC_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_RISCV_PIC_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_RISCV_PIC_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_RISCV_PIC_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_RISCV_PIC_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_PIC_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_RISCV_PICSCMASK_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#f#;
    LW_PRGNLCL_RISCV_PICSCMASK_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_RISCV_PICSCMASK_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_RISCV_PICSCMASK_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_RISCV_PICSCMASK_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_RISCV_PICSCMASK_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    LW_PRGNLCL_RISCV_PICSCMASK_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    type LW_PRGNLCL_RISCV_PICSCMASK_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_RISCV_PICSCMASK_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_RISCV_PICSCMASK_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_RISCV_PICSCMASK_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_RISCV_PICSCMASK_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_PICSCMASK_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_RISCV_PICSCMASK_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_PICSCMASK_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_RISCV_PICSCMASK_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_RISCV_PICSCMASK_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_PICSCMASK_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_PICSCMASK_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_PICSCMASK_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_PICSCMASK_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_PICSCMASK_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_PICSCMASK_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_PICSCMASK_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_PICSCMASK_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_PICSCMASK_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_RISCV_PICSCMASK_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_PICSCMASK_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_RISCV_PICSCMASK_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_PICSCMASK_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_RISCV_PICSCMASK_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_PICSCMASK_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_RISCV_PICSCMASK_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_RISCV_PICSCMASK_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_RISCV_PICSCMASK_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_RISCV_PICSCMASK_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_RISCV_PICSCMASK_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_PICSCMASK_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_RISCV_ERR_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#f#;
    LW_PRGNLCL_RISCV_ERR_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_RISCV_ERR_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_RISCV_ERR_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_RISCV_ERR_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_RISCV_ERR_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    LW_PRGNLCL_RISCV_ERR_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    type LW_PRGNLCL_RISCV_ERR_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_RISCV_ERR_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_RISCV_ERR_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_RISCV_ERR_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_RISCV_ERR_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_ERR_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_RISCV_ERR_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_ERR_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_RISCV_ERR_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_RISCV_ERR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_ERR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_ERR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_ERR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_ERR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_ERR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_ERR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_ERR_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_ERR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_ERR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_RISCV_ERR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_ERR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_RISCV_ERR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_ERR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_RISCV_ERR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_RISCV_ERR_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_RISCV_ERR_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_RISCV_ERR_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_RISCV_ERR_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_RISCV_ERR_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_RISCV_ERR_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_ERR_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_RISCV_NO_ACCESS_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_RISCV_NO_ACCESS_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_RISCV_NO_ACCESS_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_RISCV_NO_ACCESS_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_RISCV_NO_ACCESS_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    LW_PRGNLCL_RISCV_NO_ACCESS_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    type LW_PRGNLCL_RISCV_NO_ACCESS_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_RISCV_NO_ACCESS_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_RISCV_NO_ACCESS_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_RISCV_NO_ACCESS_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_RISCV_NO_ACCESS_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_NO_ACCESS_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_RISCV_NO_ACCESS_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_NO_ACCESS_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_RISCV_NO_ACCESS_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_DISABLED : constant NvU20 := 16#0#;
    LW_PRGNLCL_RISCV_NO_ACCESS_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED  : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_RISCV_NO_ACCESS_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE      : constant       := 16#1#;
    LW_PRGNLCL_RISCV_NO_ACCESS_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE     : constant       := 16#0#;
    LW_PRGNLCL_RISCV_NO_ACCESS_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE      : constant       := 16#1#;
    LW_PRGNLCL_RISCV_NO_ACCESS_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE     : constant       := 16#0#;
    LW_PRGNLCL_RISCV_NO_ACCESS_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE      : constant       := 16#1#;
    LW_PRGNLCL_RISCV_NO_ACCESS_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE     : constant       := 16#0#;
    LW_PRGNLCL_RISCV_NO_ACCESS_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE      : constant       := 16#1#;
    LW_PRGNLCL_RISCV_NO_ACCESS_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE     : constant       := 16#0#;
    LW_PRGNLCL_RISCV_NO_ACCESS_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_NO_ACCESS_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_NO_ACCESS_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_NO_ACCESS_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_NO_ACCESS_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_NO_ACCESS_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_RISCV_NO_ACCESS_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_RISCV_NO_ACCESS_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;

    type LW_PRGNLCL_RISCV_NO_ACCESS_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_RISCV_NO_ACCESS_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_RISCV_NO_ACCESS_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_RISCV_NO_ACCESS_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_RISCV_NO_ACCESS_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_NO_ACCESS_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_RISCV_IRQMSET_GPTMR_SET       : constant NvU1 := 16#1#;
    LW_PRGNLCL_RISCV_IRQMSET_WDTMR_SET       : constant NvU1 := 16#1#;
    LW_PRGNLCL_RISCV_IRQMSET_MTHD_SET        : constant NvU1 := 16#1#;
    LW_PRGNLCL_RISCV_IRQMSET_CTXSW_SET       : constant NvU1 := 16#1#;
    LW_PRGNLCL_RISCV_IRQMSET_HALT_SET        : constant NvU1 := 16#1#;
    LW_PRGNLCL_RISCV_IRQMSET_EXTERR_SET      : constant NvU1 := 16#1#;
    LW_PRGNLCL_RISCV_IRQMSET_SWGEN0_SET      : constant NvU1 := 16#1#;
    LW_PRGNLCL_RISCV_IRQMSET_SWGEN1_SET      : constant NvU1 := 16#1#;
    LW_PRGNLCL_RISCV_IRQMSET_DMA_SET         : constant NvU1 := 16#1#;
    LW_PRGNLCL_RISCV_IRQMSET_SHA_SET         : constant NvU1 := 16#1#;
    LW_PRGNLCL_RISCV_IRQMSET_MEMERR_SET      : constant NvU1 := 16#1#;
    LW_PRGNLCL_RISCV_IRQMSET_ICD_SET         : constant NvU1 := 16#1#;
    LW_PRGNLCL_RISCV_IRQMSET_IOPMP_SET       : constant NvU1 := 16#1#;
    LW_PRGNLCL_RISCV_IRQMSET_EXT_EXTIRQ1_SET : constant      := 16#1#;
    LW_PRGNLCL_RISCV_IRQMSET_EXT_EXTIRQ2_SET : constant      := 16#1#;
    LW_PRGNLCL_RISCV_IRQMSET_EXT_EXTIRQ3_SET : constant      := 16#1#;
    LW_PRGNLCL_RISCV_IRQMSET_EXT_EXTIRQ4_SET : constant      := 16#1#;
    LW_PRGNLCL_RISCV_IRQMSET_EXT_EXTIRQ5_SET : constant      := 16#1#;
    LW_PRGNLCL_RISCV_IRQMSET_EXT_EXTIRQ6_SET : constant      := 16#1#;
    LW_PRGNLCL_RISCV_IRQMSET_EXT_EXTIRQ7_SET : constant      := 16#1#;
    LW_PRGNLCL_RISCV_IRQMSET_EXT_EXTIRQ8_SET : constant      := 16#1#;

    type LW_PRGNLCL_RISCV_IRQMSET_Register is record
        Gptmr  : NvU1;
        Wdtmr  : NvU1;
        Mthd   : NvU1;
        Ctxsw  : NvU1;
        Halt   : NvU1;
        Exterr : NvU1;
        Swgen0 : NvU1;
        Swgen1 : NvU1;
        Ext    : NvU8;
        Dma    : NvU1;
        Sha    : NvU1;
        Memerr : NvU1;
        Icd    : NvU1;
        Iopmp  : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_IRQMSET_Register use record
        Gptmr  at 0 range  0 ..  0;
        Wdtmr  at 0 range  1 ..  1;
        Mthd   at 0 range  2 ..  2;
        Ctxsw  at 0 range  3 ..  3;
        Halt   at 0 range  4 ..  4;
        Exterr at 0 range  5 ..  5;
        Swgen0 at 0 range  6 ..  6;
        Swgen1 at 0 range  7 ..  7;
        Ext    at 0 range  8 .. 15;
        Dma    at 0 range 16 .. 16;
        Sha    at 0 range 17 .. 17;
        Memerr at 0 range 18 .. 18;
        Icd    at 0 range 22 .. 22;
        Iopmp  at 0 range 23 .. 23;
    end record;

    LW_PRGNLCL_RISCV_IRQMCLR_GPTMR_SET       : constant NvU1 := 16#1#;
    LW_PRGNLCL_RISCV_IRQMCLR_WDTMR_SET       : constant NvU1 := 16#1#;
    LW_PRGNLCL_RISCV_IRQMCLR_MTHD_SET        : constant NvU1 := 16#1#;
    LW_PRGNLCL_RISCV_IRQMCLR_CTXSW_SET       : constant NvU1 := 16#1#;
    LW_PRGNLCL_RISCV_IRQMCLR_HALT_SET        : constant NvU1 := 16#1#;
    LW_PRGNLCL_RISCV_IRQMCLR_EXTERR_SET      : constant NvU1 := 16#1#;
    LW_PRGNLCL_RISCV_IRQMCLR_SWGEN0_SET      : constant NvU1 := 16#1#;
    LW_PRGNLCL_RISCV_IRQMCLR_SWGEN1_SET      : constant NvU1 := 16#1#;
    LW_PRGNLCL_RISCV_IRQMCLR_DMA_SET         : constant NvU1 := 16#1#;
    LW_PRGNLCL_RISCV_IRQMCLR_SHA_SET         : constant NvU1 := 16#1#;
    LW_PRGNLCL_RISCV_IRQMCLR_MEMERR_SET      : constant NvU1 := 16#1#;
    LW_PRGNLCL_RISCV_IRQMCLR_ICD_SET         : constant NvU1 := 16#1#;
    LW_PRGNLCL_RISCV_IRQMCLR_IOPMP_SET       : constant NvU1 := 16#1#;
    LW_PRGNLCL_RISCV_IRQMCLR_EXT_EXTIRQ1_SET : constant      := 16#1#;
    LW_PRGNLCL_RISCV_IRQMCLR_EXT_EXTIRQ2_SET : constant      := 16#1#;
    LW_PRGNLCL_RISCV_IRQMCLR_EXT_EXTIRQ3_SET : constant      := 16#1#;
    LW_PRGNLCL_RISCV_IRQMCLR_EXT_EXTIRQ4_SET : constant      := 16#1#;
    LW_PRGNLCL_RISCV_IRQMCLR_EXT_EXTIRQ5_SET : constant      := 16#1#;
    LW_PRGNLCL_RISCV_IRQMCLR_EXT_EXTIRQ6_SET : constant      := 16#1#;
    LW_PRGNLCL_RISCV_IRQMCLR_EXT_EXTIRQ7_SET : constant      := 16#1#;
    LW_PRGNLCL_RISCV_IRQMCLR_EXT_EXTIRQ8_SET : constant      := 16#1#;

    type LW_PRGNLCL_RISCV_IRQMCLR_Register is record
        Gptmr  : NvU1;
        Wdtmr  : NvU1;
        Mthd   : NvU1;
        Ctxsw  : NvU1;
        Halt   : NvU1;
        Exterr : NvU1;
        Swgen0 : NvU1;
        Swgen1 : NvU1;
        Ext    : NvU8;
        Dma    : NvU1;
        Sha    : NvU1;
        Memerr : NvU1;
        Icd    : NvU1;
        Iopmp  : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_IRQMCLR_Register use record
        Gptmr  at 0 range  0 ..  0;
        Wdtmr  at 0 range  1 ..  1;
        Mthd   at 0 range  2 ..  2;
        Ctxsw  at 0 range  3 ..  3;
        Halt   at 0 range  4 ..  4;
        Exterr at 0 range  5 ..  5;
        Swgen0 at 0 range  6 ..  6;
        Swgen1 at 0 range  7 ..  7;
        Ext    at 0 range  8 .. 15;
        Dma    at 0 range 16 .. 16;
        Sha    at 0 range 17 .. 17;
        Memerr at 0 range 18 .. 18;
        Icd    at 0 range 22 .. 22;
        Iopmp  at 0 range 23 .. 23;
    end record;

    type LW_PRGNLCL_RISCV_IRQMASK_GPTMR_Field is (GPTMR_UNSET, GPTMR_SET) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQMASK_GPTMR_Field use (GPTMR_UNSET => 16#0#, GPTMR_SET => 16#1#);
    type LW_PRGNLCL_RISCV_IRQMASK_WDTMR_Field is (WDTMR_UNSET, WDTMR_SET) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQMASK_WDTMR_Field use (WDTMR_UNSET => 16#0#, WDTMR_SET => 16#1#);
    type LW_PRGNLCL_RISCV_IRQMASK_MTHD_Field is (MTHD_UNSET, MTHD_SET) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQMASK_MTHD_Field use (MTHD_UNSET => 16#0#, MTHD_SET => 16#1#);
    type LW_PRGNLCL_RISCV_IRQMASK_CTXSW_Field is (CTXSW_UNSET, CTXSW_SET) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQMASK_CTXSW_Field use (CTXSW_UNSET => 16#0#, CTXSW_SET => 16#1#);
    type LW_PRGNLCL_RISCV_IRQMASK_HALT_Field is (HALT_UNSET, HALT_SET) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQMASK_HALT_Field use (HALT_UNSET => 16#0#, HALT_SET => 16#1#);
    type LW_PRGNLCL_RISCV_IRQMASK_EXTERR_Field is (EXTERR_UNSET, EXTERR_SET) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQMASK_EXTERR_Field use (EXTERR_UNSET => 16#0#, EXTERR_SET => 16#1#);
    type LW_PRGNLCL_RISCV_IRQMASK_SWGEN0_Field is (SWGEN0_UNSET, SWGEN0_SET) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQMASK_SWGEN0_Field use (SWGEN0_UNSET => 16#0#, SWGEN0_SET => 16#1#);
    type LW_PRGNLCL_RISCV_IRQMASK_SWGEN1_Field is (SWGEN1_UNSET, SWGEN1_SET) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQMASK_SWGEN1_Field use (SWGEN1_UNSET => 16#0#, SWGEN1_SET => 16#1#);
    LW_PRGNLCL_RISCV_IRQMASK_EXT_EXTIRQ1_UNSET : constant NvU1 := 16#0#;
    LW_PRGNLCL_RISCV_IRQMASK_EXT_EXTIRQ2_UNSET : constant NvU1 := 16#0#;
    LW_PRGNLCL_RISCV_IRQMASK_EXT_EXTIRQ3_UNSET : constant NvU1 := 16#0#;
    LW_PRGNLCL_RISCV_IRQMASK_EXT_EXTIRQ4_UNSET : constant NvU1 := 16#0#;
    LW_PRGNLCL_RISCV_IRQMASK_EXT_EXTIRQ5_UNSET : constant NvU1 := 16#0#;
    LW_PRGNLCL_RISCV_IRQMASK_EXT_EXTIRQ6_UNSET : constant NvU1 := 16#0#;
    LW_PRGNLCL_RISCV_IRQMASK_EXT_EXTIRQ7_UNSET : constant NvU1 := 16#0#;
    LW_PRGNLCL_RISCV_IRQMASK_EXT_EXTIRQ8_UNSET : constant NvU1 := 16#0#;
    type LW_PRGNLCL_RISCV_IRQMASK_DMA_Field is (DMA_UNSET, DMA_SET) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQMASK_DMA_Field use (DMA_UNSET => 16#0#, DMA_SET => 16#1#);
    type LW_PRGNLCL_RISCV_IRQMASK_SHA_Field is (SHA_UNSET, SHA_SET) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQMASK_SHA_Field use (SHA_UNSET => 16#0#, SHA_SET => 16#1#);
    type LW_PRGNLCL_RISCV_IRQMASK_MEMERR_Field is (MEMERR_UNSET, MEMERR_SET) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQMASK_MEMERR_Field use (MEMERR_UNSET => 16#0#, MEMERR_SET => 16#1#);
    type LW_PRGNLCL_RISCV_IRQMASK_ICD_Field is (ICD_UNSET, ICD_SET) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQMASK_ICD_Field use (ICD_UNSET => 16#0#, ICD_SET => 16#1#);
    type LW_PRGNLCL_RISCV_IRQMASK_IOPMP_Field is (IOPMP_UNSET, IOPMP_SET) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQMASK_IOPMP_Field use (IOPMP_UNSET => 16#0#, IOPMP_SET => 16#1#);
    LW_PRGNLCL_RISCV_IRQMASK_EXT_EXTIRQ1_SET : constant := 16#1#;
    LW_PRGNLCL_RISCV_IRQMASK_EXT_EXTIRQ2_SET : constant := 16#1#;
    LW_PRGNLCL_RISCV_IRQMASK_EXT_EXTIRQ3_SET : constant := 16#1#;
    LW_PRGNLCL_RISCV_IRQMASK_EXT_EXTIRQ4_SET : constant := 16#1#;
    LW_PRGNLCL_RISCV_IRQMASK_EXT_EXTIRQ5_SET : constant := 16#1#;
    LW_PRGNLCL_RISCV_IRQMASK_EXT_EXTIRQ6_SET : constant := 16#1#;
    LW_PRGNLCL_RISCV_IRQMASK_EXT_EXTIRQ7_SET : constant := 16#1#;
    LW_PRGNLCL_RISCV_IRQMASK_EXT_EXTIRQ8_SET : constant := 16#1#;

    type LW_PRGNLCL_RISCV_IRQMASK_Register is record
        Gptmr       : LW_PRGNLCL_RISCV_IRQMASK_GPTMR_Field;
        Wdtmr       : LW_PRGNLCL_RISCV_IRQMASK_WDTMR_Field;
        Mthd        : LW_PRGNLCL_RISCV_IRQMASK_MTHD_Field;
        Ctxsw       : LW_PRGNLCL_RISCV_IRQMASK_CTXSW_Field;
        Halt        : LW_PRGNLCL_RISCV_IRQMASK_HALT_Field;
        Exterr      : LW_PRGNLCL_RISCV_IRQMASK_EXTERR_Field;
        Swgen0      : LW_PRGNLCL_RISCV_IRQMASK_SWGEN0_Field;
        Swgen1      : LW_PRGNLCL_RISCV_IRQMASK_SWGEN1_Field;
        Ext_Extirq1 : NvU1;
        Ext_Extirq2 : NvU1;
        Ext_Extirq3 : NvU1;
        Ext_Extirq4 : NvU1;
        Ext_Extirq5 : NvU1;
        Ext_Extirq6 : NvU1;
        Ext_Extirq7 : NvU1;
        Ext_Extirq8 : NvU1;
        Dma         : LW_PRGNLCL_RISCV_IRQMASK_DMA_Field;
        Sha         : LW_PRGNLCL_RISCV_IRQMASK_SHA_Field;
        Memerr      : LW_PRGNLCL_RISCV_IRQMASK_MEMERR_Field;
        Icd         : LW_PRGNLCL_RISCV_IRQMASK_ICD_Field;
        Iopmp       : LW_PRGNLCL_RISCV_IRQMASK_IOPMP_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_IRQMASK_Register use record
        Gptmr       at 0 range  0 ..  0;
        Wdtmr       at 0 range  1 ..  1;
        Mthd        at 0 range  2 ..  2;
        Ctxsw       at 0 range  3 ..  3;
        Halt        at 0 range  4 ..  4;
        Exterr      at 0 range  5 ..  5;
        Swgen0      at 0 range  6 ..  6;
        Swgen1      at 0 range  7 ..  7;
        Ext_Extirq1 at 0 range  8 ..  8;
        Ext_Extirq2 at 0 range  9 ..  9;
        Ext_Extirq3 at 0 range 10 .. 10;
        Ext_Extirq4 at 0 range 11 .. 11;
        Ext_Extirq5 at 0 range 12 .. 12;
        Ext_Extirq6 at 0 range 13 .. 13;
        Ext_Extirq7 at 0 range 14 .. 14;
        Ext_Extirq8 at 0 range 15 .. 15;
        Dma         at 0 range 16 .. 16;
        Sha         at 0 range 17 .. 17;
        Memerr      at 0 range 18 .. 18;
        Icd         at 0 range 22 .. 22;
        Iopmp       at 0 range 23 .. 23;
    end record;

    type LW_PRGNLCL_RISCV_IRQDEST_GPTMR_Field is (GPTMR_RISCV, GPTMR_HOST) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQDEST_GPTMR_Field use (GPTMR_RISCV => 16#0#, GPTMR_HOST => 16#1#);
    type LW_PRGNLCL_RISCV_IRQDEST_WDTMR_Field is (WDTMR_RISCV, WDTMR_HOST) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQDEST_WDTMR_Field use (WDTMR_RISCV => 16#0#, WDTMR_HOST => 16#1#);
    type LW_PRGNLCL_RISCV_IRQDEST_MTHD_Field is (MTHD_RISCV, MTHD_HOST) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQDEST_MTHD_Field use (MTHD_RISCV => 16#0#, MTHD_HOST => 16#1#);
    type LW_PRGNLCL_RISCV_IRQDEST_CTXSW_Field is (CTXSW_RISCV, CTXSW_HOST) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQDEST_CTXSW_Field use (CTXSW_RISCV => 16#0#, CTXSW_HOST => 16#1#);
    type LW_PRGNLCL_RISCV_IRQDEST_HALT_Field is (HALT_RISCV, HALT_HOST) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQDEST_HALT_Field use (HALT_RISCV => 16#0#, HALT_HOST => 16#1#);
    type LW_PRGNLCL_RISCV_IRQDEST_EXTERR_Field is (EXTERR_RISCV, EXTERR_HOST) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQDEST_EXTERR_Field use (EXTERR_RISCV => 16#0#, EXTERR_HOST => 16#1#);
    type LW_PRGNLCL_RISCV_IRQDEST_SWGEN0_Field is (SWGEN0_RISCV, SWGEN0_HOST) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQDEST_SWGEN0_Field use (SWGEN0_RISCV => 16#0#, SWGEN0_HOST => 16#1#);
    type LW_PRGNLCL_RISCV_IRQDEST_SWGEN1_Field is (SWGEN1_RISCV, SWGEN1_HOST) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQDEST_SWGEN1_Field use (SWGEN1_RISCV => 16#0#, SWGEN1_HOST => 16#1#);
    type LW_PRGNLCL_RISCV_IRQDEST_EXT_EXTIRQ1_Field is (EXTIRQ1_RISCV, EXTIRQ1_HOST) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQDEST_EXT_EXTIRQ1_Field use (EXTIRQ1_RISCV => 16#0#, EXTIRQ1_HOST => 16#1#);
    type LW_PRGNLCL_RISCV_IRQDEST_EXT_EXTIRQ2_Field is (EXTIRQ2_RISCV, EXTIRQ2_HOST) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQDEST_EXT_EXTIRQ2_Field use (EXTIRQ2_RISCV => 16#0#, EXTIRQ2_HOST => 16#1#);
    type LW_PRGNLCL_RISCV_IRQDEST_EXT_EXTIRQ3_Field is (EXTIRQ3_RISCV, EXTIRQ3_HOST) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQDEST_EXT_EXTIRQ3_Field use (EXTIRQ3_RISCV => 16#0#, EXTIRQ3_HOST => 16#1#);
    type LW_PRGNLCL_RISCV_IRQDEST_EXT_EXTIRQ4_Field is (EXTIRQ4_RISCV, EXTIRQ4_HOST) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQDEST_EXT_EXTIRQ4_Field use (EXTIRQ4_RISCV => 16#0#, EXTIRQ4_HOST => 16#1#);
    type LW_PRGNLCL_RISCV_IRQDEST_EXT_EXTIRQ5_Field is (EXTIRQ5_RISCV, EXTIRQ5_HOST) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQDEST_EXT_EXTIRQ5_Field use (EXTIRQ5_RISCV => 16#0#, EXTIRQ5_HOST => 16#1#);
    type LW_PRGNLCL_RISCV_IRQDEST_EXT_EXTIRQ6_Field is (EXTIRQ6_RISCV, EXTIRQ6_HOST) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQDEST_EXT_EXTIRQ6_Field use (EXTIRQ6_RISCV => 16#0#, EXTIRQ6_HOST => 16#1#);
    type LW_PRGNLCL_RISCV_IRQDEST_EXT_EXTIRQ7_Field is (EXTIRQ7_RISCV, EXTIRQ7_HOST) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQDEST_EXT_EXTIRQ7_Field use (EXTIRQ7_RISCV => 16#0#, EXTIRQ7_HOST => 16#1#);
    type LW_PRGNLCL_RISCV_IRQDEST_EXT_EXTIRQ8_Field is (EXTIRQ8_RISCV, EXTIRQ8_HOST) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQDEST_EXT_EXTIRQ8_Field use (EXTIRQ8_RISCV => 16#0#, EXTIRQ8_HOST => 16#1#);
    type LW_PRGNLCL_RISCV_IRQDEST_DMA_Field is (DMA_RISCV, DMA_HOST) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQDEST_DMA_Field use (DMA_RISCV => 16#0#, DMA_HOST => 16#1#);
    type LW_PRGNLCL_RISCV_IRQDEST_SHA_Field is (SHA_RISCV, SHA_HOST) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQDEST_SHA_Field use (SHA_RISCV => 16#0#, SHA_HOST => 16#1#);
    type LW_PRGNLCL_RISCV_IRQDEST_MEMERR_Field is (MEMERR_RISCV, MEMERR_HOST) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQDEST_MEMERR_Field use (MEMERR_RISCV => 16#0#, MEMERR_HOST => 16#1#);
    type LW_PRGNLCL_RISCV_IRQDEST_ICD_Field is (ICD_RISCV, ICD_HOST) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQDEST_ICD_Field use (ICD_RISCV => 16#0#, ICD_HOST => 16#1#);
    type LW_PRGNLCL_RISCV_IRQDEST_IOPMP_Field is (IOPMP_RISCV, IOPMP_HOST) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQDEST_IOPMP_Field use (IOPMP_RISCV => 16#0#, IOPMP_HOST => 16#1#);

    type LW_PRGNLCL_RISCV_IRQDEST_Register is record
        Gptmr       : LW_PRGNLCL_RISCV_IRQDEST_GPTMR_Field;
        Wdtmr       : LW_PRGNLCL_RISCV_IRQDEST_WDTMR_Field;
        Mthd        : LW_PRGNLCL_RISCV_IRQDEST_MTHD_Field;
        Ctxsw       : LW_PRGNLCL_RISCV_IRQDEST_CTXSW_Field;
        Halt        : LW_PRGNLCL_RISCV_IRQDEST_HALT_Field;
        Exterr      : LW_PRGNLCL_RISCV_IRQDEST_EXTERR_Field;
        Swgen0      : LW_PRGNLCL_RISCV_IRQDEST_SWGEN0_Field;
        Swgen1      : LW_PRGNLCL_RISCV_IRQDEST_SWGEN1_Field;
        Ext_Extirq1 : LW_PRGNLCL_RISCV_IRQDEST_EXT_EXTIRQ1_Field;
        Ext_Extirq2 : LW_PRGNLCL_RISCV_IRQDEST_EXT_EXTIRQ2_Field;
        Ext_Extirq3 : LW_PRGNLCL_RISCV_IRQDEST_EXT_EXTIRQ3_Field;
        Ext_Extirq4 : LW_PRGNLCL_RISCV_IRQDEST_EXT_EXTIRQ4_Field;
        Ext_Extirq5 : LW_PRGNLCL_RISCV_IRQDEST_EXT_EXTIRQ5_Field;
        Ext_Extirq6 : LW_PRGNLCL_RISCV_IRQDEST_EXT_EXTIRQ6_Field;
        Ext_Extirq7 : LW_PRGNLCL_RISCV_IRQDEST_EXT_EXTIRQ7_Field;
        Ext_Extirq8 : LW_PRGNLCL_RISCV_IRQDEST_EXT_EXTIRQ8_Field;
        Dma         : LW_PRGNLCL_RISCV_IRQDEST_DMA_Field;
        Sha         : LW_PRGNLCL_RISCV_IRQDEST_SHA_Field;
        Memerr      : LW_PRGNLCL_RISCV_IRQDEST_MEMERR_Field;
        Icd         : LW_PRGNLCL_RISCV_IRQDEST_ICD_Field;
        Iopmp       : LW_PRGNLCL_RISCV_IRQDEST_IOPMP_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_IRQDEST_Register use record
        Gptmr       at 0 range  0 ..  0;
        Wdtmr       at 0 range  1 ..  1;
        Mthd        at 0 range  2 ..  2;
        Ctxsw       at 0 range  3 ..  3;
        Halt        at 0 range  4 ..  4;
        Exterr      at 0 range  5 ..  5;
        Swgen0      at 0 range  6 ..  6;
        Swgen1      at 0 range  7 ..  7;
        Ext_Extirq1 at 0 range  8 ..  8;
        Ext_Extirq2 at 0 range  9 ..  9;
        Ext_Extirq3 at 0 range 10 .. 10;
        Ext_Extirq4 at 0 range 11 .. 11;
        Ext_Extirq5 at 0 range 12 .. 12;
        Ext_Extirq6 at 0 range 13 .. 13;
        Ext_Extirq7 at 0 range 14 .. 14;
        Ext_Extirq8 at 0 range 15 .. 15;
        Dma         at 0 range 16 .. 16;
        Sha         at 0 range 17 .. 17;
        Memerr      at 0 range 18 .. 18;
        Icd         at 0 range 22 .. 22;
        Iopmp       at 0 range 23 .. 23;
    end record;

    type LW_PRGNLCL_RISCV_IRQTYPE_GPTMR_Field is (GPTMR_HOST_NORMAL, GPTMR_HOST_NONSTALL) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQTYPE_GPTMR_Field use (GPTMR_HOST_NORMAL => 16#0#, GPTMR_HOST_NONSTALL => 16#1#);
    type LW_PRGNLCL_RISCV_IRQTYPE_WDTMR_Field is (WDTMR_HOST_NORMAL, WDTMR_HOST_NONSTALL) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQTYPE_WDTMR_Field use (WDTMR_HOST_NORMAL => 16#0#, WDTMR_HOST_NONSTALL => 16#1#);
    type LW_PRGNLCL_RISCV_IRQTYPE_MTHD_Field is (MTHD_HOST_NORMAL, MTHD_HOST_NONSTALL) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQTYPE_MTHD_Field use (MTHD_HOST_NORMAL => 16#0#, MTHD_HOST_NONSTALL => 16#1#);
    type LW_PRGNLCL_RISCV_IRQTYPE_CTXSW_Field is (CTXSW_HOST_NORMAL, CTXSW_HOST_NONSTALL) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQTYPE_CTXSW_Field use (CTXSW_HOST_NORMAL => 16#0#, CTXSW_HOST_NONSTALL => 16#1#);
    type LW_PRGNLCL_RISCV_IRQTYPE_HALT_Field is (HALT_HOST_NORMAL, HALT_HOST_NONSTALL) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQTYPE_HALT_Field use (HALT_HOST_NORMAL => 16#0#, HALT_HOST_NONSTALL => 16#1#);
    type LW_PRGNLCL_RISCV_IRQTYPE_EXTERR_Field is (EXTERR_HOST_NORMAL, EXTERR_HOST_NONSTALL) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQTYPE_EXTERR_Field use (EXTERR_HOST_NORMAL => 16#0#, EXTERR_HOST_NONSTALL => 16#1#);
    type LW_PRGNLCL_RISCV_IRQTYPE_SWGEN0_Field is (SWGEN0_HOST_NORMAL, SWGEN0_HOST_NONSTALL) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQTYPE_SWGEN0_Field use (SWGEN0_HOST_NORMAL => 16#0#, SWGEN0_HOST_NONSTALL => 16#1#);
    type LW_PRGNLCL_RISCV_IRQTYPE_SWGEN1_Field is (SWGEN1_HOST_NORMAL, SWGEN1_HOST_NONSTALL) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQTYPE_SWGEN1_Field use (SWGEN1_HOST_NORMAL => 16#0#, SWGEN1_HOST_NONSTALL => 16#1#);
    type LW_PRGNLCL_RISCV_IRQTYPE_EXT_EXTIRQ1_Field is (EXTIRQ1_HOST_NORMAL, EXTIRQ1_HOST_NONSTALL) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQTYPE_EXT_EXTIRQ1_Field use (EXTIRQ1_HOST_NORMAL => 16#0#, EXTIRQ1_HOST_NONSTALL => 16#1#);
    type LW_PRGNLCL_RISCV_IRQTYPE_EXT_EXTIRQ2_Field is (EXTIRQ2_HOST_NORMAL, EXTIRQ2_HOST_NONSTALL) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQTYPE_EXT_EXTIRQ2_Field use (EXTIRQ2_HOST_NORMAL => 16#0#, EXTIRQ2_HOST_NONSTALL => 16#1#);
    type LW_PRGNLCL_RISCV_IRQTYPE_EXT_EXTIRQ3_Field is (EXTIRQ3_HOST_NORMAL, EXTIRQ3_HOST_NONSTALL) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQTYPE_EXT_EXTIRQ3_Field use (EXTIRQ3_HOST_NORMAL => 16#0#, EXTIRQ3_HOST_NONSTALL => 16#1#);
    type LW_PRGNLCL_RISCV_IRQTYPE_EXT_EXTIRQ4_Field is (EXTIRQ4_HOST_NORMAL, EXTIRQ4_HOST_NONSTALL) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQTYPE_EXT_EXTIRQ4_Field use (EXTIRQ4_HOST_NORMAL => 16#0#, EXTIRQ4_HOST_NONSTALL => 16#1#);
    type LW_PRGNLCL_RISCV_IRQTYPE_EXT_EXTIRQ5_Field is (EXTIRQ5_HOST_NORMAL, EXTIRQ5_HOST_NONSTALL) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQTYPE_EXT_EXTIRQ5_Field use (EXTIRQ5_HOST_NORMAL => 16#0#, EXTIRQ5_HOST_NONSTALL => 16#1#);
    type LW_PRGNLCL_RISCV_IRQTYPE_EXT_EXTIRQ6_Field is (EXTIRQ6_HOST_NORMAL, EXTIRQ6_HOST_NONSTALL) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQTYPE_EXT_EXTIRQ6_Field use (EXTIRQ6_HOST_NORMAL => 16#0#, EXTIRQ6_HOST_NONSTALL => 16#1#);
    type LW_PRGNLCL_RISCV_IRQTYPE_EXT_EXTIRQ7_Field is (EXTIRQ7_HOST_NORMAL, EXTIRQ7_HOST_NONSTALL) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQTYPE_EXT_EXTIRQ7_Field use (EXTIRQ7_HOST_NORMAL => 16#0#, EXTIRQ7_HOST_NONSTALL => 16#1#);
    type LW_PRGNLCL_RISCV_IRQTYPE_EXT_EXTIRQ8_Field is (EXTIRQ8_HOST_NORMAL, EXTIRQ8_HOST_NONSTALL) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQTYPE_EXT_EXTIRQ8_Field use (EXTIRQ8_HOST_NORMAL => 16#0#, EXTIRQ8_HOST_NONSTALL => 16#1#);
    type LW_PRGNLCL_RISCV_IRQTYPE_DMA_Field is (DMA_HOST_NORMAL, DMA_HOST_NONSTALL) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQTYPE_DMA_Field use (DMA_HOST_NORMAL => 16#0#, DMA_HOST_NONSTALL => 16#1#);
    type LW_PRGNLCL_RISCV_IRQTYPE_SHA_Field is (SHA_HOST_NORMAL, SHA_HOST_NONSTALL) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQTYPE_SHA_Field use (SHA_HOST_NORMAL => 16#0#, SHA_HOST_NONSTALL => 16#1#);
    type LW_PRGNLCL_RISCV_IRQTYPE_MEMERR_Field is (MEMERR_HOST_NORMAL, MEMERR_HOST_NONSTALL) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQTYPE_MEMERR_Field use (MEMERR_HOST_NORMAL => 16#0#, MEMERR_HOST_NONSTALL => 16#1#);
    type LW_PRGNLCL_RISCV_IRQTYPE_ICD_Field is (ICD_HOST_NORMAL, ICD_HOST_NONSTALL) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQTYPE_ICD_Field use (ICD_HOST_NORMAL => 16#0#, ICD_HOST_NONSTALL => 16#1#);
    type LW_PRGNLCL_RISCV_IRQTYPE_IOPMP_Field is (IOPMP_HOST_NORMAL, IOPMP_HOST_NONSTALL) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQTYPE_IOPMP_Field use (IOPMP_HOST_NORMAL => 16#0#, IOPMP_HOST_NONSTALL => 16#1#);

    type LW_PRGNLCL_RISCV_IRQTYPE_Register is record
        Gptmr       : LW_PRGNLCL_RISCV_IRQTYPE_GPTMR_Field;
        Wdtmr       : LW_PRGNLCL_RISCV_IRQTYPE_WDTMR_Field;
        Mthd        : LW_PRGNLCL_RISCV_IRQTYPE_MTHD_Field;
        Ctxsw       : LW_PRGNLCL_RISCV_IRQTYPE_CTXSW_Field;
        Halt        : LW_PRGNLCL_RISCV_IRQTYPE_HALT_Field;
        Exterr      : LW_PRGNLCL_RISCV_IRQTYPE_EXTERR_Field;
        Swgen0      : LW_PRGNLCL_RISCV_IRQTYPE_SWGEN0_Field;
        Swgen1      : LW_PRGNLCL_RISCV_IRQTYPE_SWGEN1_Field;
        Ext_Extirq1 : LW_PRGNLCL_RISCV_IRQTYPE_EXT_EXTIRQ1_Field;
        Ext_Extirq2 : LW_PRGNLCL_RISCV_IRQTYPE_EXT_EXTIRQ2_Field;
        Ext_Extirq3 : LW_PRGNLCL_RISCV_IRQTYPE_EXT_EXTIRQ3_Field;
        Ext_Extirq4 : LW_PRGNLCL_RISCV_IRQTYPE_EXT_EXTIRQ4_Field;
        Ext_Extirq5 : LW_PRGNLCL_RISCV_IRQTYPE_EXT_EXTIRQ5_Field;
        Ext_Extirq6 : LW_PRGNLCL_RISCV_IRQTYPE_EXT_EXTIRQ6_Field;
        Ext_Extirq7 : LW_PRGNLCL_RISCV_IRQTYPE_EXT_EXTIRQ7_Field;
        Ext_Extirq8 : LW_PRGNLCL_RISCV_IRQTYPE_EXT_EXTIRQ8_Field;
        Dma         : LW_PRGNLCL_RISCV_IRQTYPE_DMA_Field;
        Sha         : LW_PRGNLCL_RISCV_IRQTYPE_SHA_Field;
        Memerr      : LW_PRGNLCL_RISCV_IRQTYPE_MEMERR_Field;
        Icd         : LW_PRGNLCL_RISCV_IRQTYPE_ICD_Field;
        Iopmp       : LW_PRGNLCL_RISCV_IRQTYPE_IOPMP_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_IRQTYPE_Register use record
        Gptmr       at 0 range  0 ..  0;
        Wdtmr       at 0 range  1 ..  1;
        Mthd        at 0 range  2 ..  2;
        Ctxsw       at 0 range  3 ..  3;
        Halt        at 0 range  4 ..  4;
        Exterr      at 0 range  5 ..  5;
        Swgen0      at 0 range  6 ..  6;
        Swgen1      at 0 range  7 ..  7;
        Ext_Extirq1 at 0 range  8 ..  8;
        Ext_Extirq2 at 0 range  9 ..  9;
        Ext_Extirq3 at 0 range 10 .. 10;
        Ext_Extirq4 at 0 range 11 .. 11;
        Ext_Extirq5 at 0 range 12 .. 12;
        Ext_Extirq6 at 0 range 13 .. 13;
        Ext_Extirq7 at 0 range 14 .. 14;
        Ext_Extirq8 at 0 range 15 .. 15;
        Dma         at 0 range 16 .. 16;
        Sha         at 0 range 17 .. 17;
        Memerr      at 0 range 18 .. 18;
        Icd         at 0 range 22 .. 22;
        Iopmp       at 0 range 23 .. 23;
    end record;

    type LW_PRGNLCL_RISCV_IRQDELEG_GPTMR_Field is (GPTMR_RISCV_MEIP, GPTMR_RISCV_SEIP) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQDELEG_GPTMR_Field use (GPTMR_RISCV_MEIP => 16#0#, GPTMR_RISCV_SEIP => 16#1#);
    type LW_PRGNLCL_RISCV_IRQDELEG_WDTMR_Field is (WDTMR_RISCV_MEIP, WDTMR_RISCV_SEIP) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQDELEG_WDTMR_Field use (WDTMR_RISCV_MEIP => 16#0#, WDTMR_RISCV_SEIP => 16#1#);
    type LW_PRGNLCL_RISCV_IRQDELEG_MTHD_Field is (MTHD_RISCV_MEIP, MTHD_RISCV_SEIP) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQDELEG_MTHD_Field use (MTHD_RISCV_MEIP => 16#0#, MTHD_RISCV_SEIP => 16#1#);
    type LW_PRGNLCL_RISCV_IRQDELEG_CTXSW_Field is (CTXSW_RISCV_MEIP, CTXSW_RISCV_SEIP) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQDELEG_CTXSW_Field use (CTXSW_RISCV_MEIP => 16#0#, CTXSW_RISCV_SEIP => 16#1#);
    type LW_PRGNLCL_RISCV_IRQDELEG_HALT_Field is (HALT_RISCV_MEIP, HALT_RISCV_SEIP) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQDELEG_HALT_Field use (HALT_RISCV_MEIP => 16#0#, HALT_RISCV_SEIP => 16#1#);
    type LW_PRGNLCL_RISCV_IRQDELEG_EXTERR_Field is (EXTERR_RISCV_MEIP, EXTERR_RISCV_SEIP) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQDELEG_EXTERR_Field use (EXTERR_RISCV_MEIP => 16#0#, EXTERR_RISCV_SEIP => 16#1#);
    type LW_PRGNLCL_RISCV_IRQDELEG_SWGEN0_Field is (SWGEN0_RISCV_MEIP, SWGEN0_RISCV_SEIP) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQDELEG_SWGEN0_Field use (SWGEN0_RISCV_MEIP => 16#0#, SWGEN0_RISCV_SEIP => 16#1#);
    type LW_PRGNLCL_RISCV_IRQDELEG_SWGEN1_Field is (SWGEN1_RISCV_MEIP, SWGEN1_RISCV_SEIP) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQDELEG_SWGEN1_Field use (SWGEN1_RISCV_MEIP => 16#0#, SWGEN1_RISCV_SEIP => 16#1#);
    type LW_PRGNLCL_RISCV_IRQDELEG_EXT_EXTIRQ1_Field is (EXTIRQ1_RISCV_MEIP, EXTIRQ1_RISCV_SEIP) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQDELEG_EXT_EXTIRQ1_Field use (EXTIRQ1_RISCV_MEIP => 16#0#, EXTIRQ1_RISCV_SEIP => 16#1#);
    type LW_PRGNLCL_RISCV_IRQDELEG_EXT_EXTIRQ2_Field is (EXTIRQ2_RISCV_MEIP, EXTIRQ2_RISCV_SEIP) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQDELEG_EXT_EXTIRQ2_Field use (EXTIRQ2_RISCV_MEIP => 16#0#, EXTIRQ2_RISCV_SEIP => 16#1#);
    type LW_PRGNLCL_RISCV_IRQDELEG_EXT_EXTIRQ3_Field is (EXTIRQ3_RISCV_MEIP, EXTIRQ3_RISCV_SEIP) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQDELEG_EXT_EXTIRQ3_Field use (EXTIRQ3_RISCV_MEIP => 16#0#, EXTIRQ3_RISCV_SEIP => 16#1#);
    type LW_PRGNLCL_RISCV_IRQDELEG_EXT_EXTIRQ4_Field is (EXTIRQ4_RISCV_MEIP, EXTIRQ4_RISCV_SEIP) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQDELEG_EXT_EXTIRQ4_Field use (EXTIRQ4_RISCV_MEIP => 16#0#, EXTIRQ4_RISCV_SEIP => 16#1#);
    type LW_PRGNLCL_RISCV_IRQDELEG_EXT_EXTIRQ5_Field is (EXTIRQ5_RISCV_MEIP, EXTIRQ5_RISCV_SEIP) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQDELEG_EXT_EXTIRQ5_Field use (EXTIRQ5_RISCV_MEIP => 16#0#, EXTIRQ5_RISCV_SEIP => 16#1#);
    type LW_PRGNLCL_RISCV_IRQDELEG_EXT_EXTIRQ6_Field is (EXTIRQ6_RISCV_MEIP, EXTIRQ6_RISCV_SEIP) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQDELEG_EXT_EXTIRQ6_Field use (EXTIRQ6_RISCV_MEIP => 16#0#, EXTIRQ6_RISCV_SEIP => 16#1#);
    type LW_PRGNLCL_RISCV_IRQDELEG_EXT_EXTIRQ7_Field is (EXTIRQ7_RISCV_MEIP, EXTIRQ7_RISCV_SEIP) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQDELEG_EXT_EXTIRQ7_Field use (EXTIRQ7_RISCV_MEIP => 16#0#, EXTIRQ7_RISCV_SEIP => 16#1#);
    type LW_PRGNLCL_RISCV_IRQDELEG_EXT_EXTIRQ8_Field is (EXTIRQ8_RISCV_MEIP, EXTIRQ8_RISCV_SEIP) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQDELEG_EXT_EXTIRQ8_Field use (EXTIRQ8_RISCV_MEIP => 16#0#, EXTIRQ8_RISCV_SEIP => 16#1#);
    type LW_PRGNLCL_RISCV_IRQDELEG_DMA_Field is (DMA_RISCV_MEIP, DMA_RISCV_SEIP) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQDELEG_DMA_Field use (DMA_RISCV_MEIP => 16#0#, DMA_RISCV_SEIP => 16#1#);
    type LW_PRGNLCL_RISCV_IRQDELEG_SHA_Field is (SHA_RISCV_MEIP, SHA_RISCV_SEIP) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQDELEG_SHA_Field use (SHA_RISCV_MEIP => 16#0#, SHA_RISCV_SEIP => 16#1#);
    type LW_PRGNLCL_RISCV_IRQDELEG_MEMERR_Field is (MEMERR_RISCV_MEIP, MEMERR_RISCV_SEIP) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQDELEG_MEMERR_Field use (MEMERR_RISCV_MEIP => 16#0#, MEMERR_RISCV_SEIP => 16#1#);
    type LW_PRGNLCL_RISCV_IRQDELEG_ICD_Field is (ICD_RISCV_MEIP, ICD_RISCV_SEIP) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQDELEG_ICD_Field use (ICD_RISCV_MEIP => 16#0#, ICD_RISCV_SEIP => 16#1#);
    type LW_PRGNLCL_RISCV_IRQDELEG_IOPMP_Field is (IOPMP_RISCV_MEIP, IOPMP_RISCV_SEIP) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IRQDELEG_IOPMP_Field use (IOPMP_RISCV_MEIP => 16#0#, IOPMP_RISCV_SEIP => 16#1#);

    type LW_PRGNLCL_RISCV_IRQDELEG_Register is record
        Gptmr       : LW_PRGNLCL_RISCV_IRQDELEG_GPTMR_Field;
        Wdtmr       : LW_PRGNLCL_RISCV_IRQDELEG_WDTMR_Field;
        Mthd        : LW_PRGNLCL_RISCV_IRQDELEG_MTHD_Field;
        Ctxsw       : LW_PRGNLCL_RISCV_IRQDELEG_CTXSW_Field;
        Halt        : LW_PRGNLCL_RISCV_IRQDELEG_HALT_Field;
        Exterr      : LW_PRGNLCL_RISCV_IRQDELEG_EXTERR_Field;
        Swgen0      : LW_PRGNLCL_RISCV_IRQDELEG_SWGEN0_Field;
        Swgen1      : LW_PRGNLCL_RISCV_IRQDELEG_SWGEN1_Field;
        Ext_Extirq1 : LW_PRGNLCL_RISCV_IRQDELEG_EXT_EXTIRQ1_Field;
        Ext_Extirq2 : LW_PRGNLCL_RISCV_IRQDELEG_EXT_EXTIRQ2_Field;
        Ext_Extirq3 : LW_PRGNLCL_RISCV_IRQDELEG_EXT_EXTIRQ3_Field;
        Ext_Extirq4 : LW_PRGNLCL_RISCV_IRQDELEG_EXT_EXTIRQ4_Field;
        Ext_Extirq5 : LW_PRGNLCL_RISCV_IRQDELEG_EXT_EXTIRQ5_Field;
        Ext_Extirq6 : LW_PRGNLCL_RISCV_IRQDELEG_EXT_EXTIRQ6_Field;
        Ext_Extirq7 : LW_PRGNLCL_RISCV_IRQDELEG_EXT_EXTIRQ7_Field;
        Ext_Extirq8 : LW_PRGNLCL_RISCV_IRQDELEG_EXT_EXTIRQ8_Field;
        Dma         : LW_PRGNLCL_RISCV_IRQDELEG_DMA_Field;
        Sha         : LW_PRGNLCL_RISCV_IRQDELEG_SHA_Field;
        Memerr      : LW_PRGNLCL_RISCV_IRQDELEG_MEMERR_Field;
        Icd         : LW_PRGNLCL_RISCV_IRQDELEG_ICD_Field;
        Iopmp       : LW_PRGNLCL_RISCV_IRQDELEG_IOPMP_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_IRQDELEG_Register use record
        Gptmr       at 0 range  0 ..  0;
        Wdtmr       at 0 range  1 ..  1;
        Mthd        at 0 range  2 ..  2;
        Ctxsw       at 0 range  3 ..  3;
        Halt        at 0 range  4 ..  4;
        Exterr      at 0 range  5 ..  5;
        Swgen0      at 0 range  6 ..  6;
        Swgen1      at 0 range  7 ..  7;
        Ext_Extirq1 at 0 range  8 ..  8;
        Ext_Extirq2 at 0 range  9 ..  9;
        Ext_Extirq3 at 0 range 10 .. 10;
        Ext_Extirq4 at 0 range 11 .. 11;
        Ext_Extirq5 at 0 range 12 .. 12;
        Ext_Extirq6 at 0 range 13 .. 13;
        Ext_Extirq7 at 0 range 14 .. 14;
        Ext_Extirq8 at 0 range 15 .. 15;
        Dma         at 0 range 16 .. 16;
        Sha         at 0 range 17 .. 17;
        Memerr      at 0 range 18 .. 18;
        Icd         at 0 range 22 .. 22;
        Iopmp       at 0 range 23 .. 23;
    end record;

    LW_PRGNLCL_RISCV_EXTIRQSSET_EXT_USERDEF_SET : constant := 16#1#;

    type LW_PRGNLCL_RISCV_EXTIRQSSET_Register is record
        Ext : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_EXTIRQSSET_Register use record
        Ext at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_RISCV_EXTIRQSCLR_EXT_USERDEF_SET : constant := 16#1#;

    type LW_PRGNLCL_RISCV_EXTIRQSCLR_Register is record
        Ext : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_EXTIRQSCLR_Register use record
        Ext at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_RISCV_EXTIRQSTAT_EXT_INIT          : constant NvU32 := 16#0#;
    LW_PRGNLCL_RISCV_EXTIRQSTAT_EXT_USERDEF_TRUE  : constant       := 16#1#;
    LW_PRGNLCL_RISCV_EXTIRQSTAT_EXT_USERDEF_FALSE : constant       := 16#0#;

    type LW_PRGNLCL_RISCV_EXTIRQSTAT_Register is record
        Ext : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_EXTIRQSTAT_Register use record
        Ext at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_RISCV_EXTIRQMODE_LVL_EXT_INIT          : constant NvU32 := 16#0#;
    LW_PRGNLCL_RISCV_EXTIRQMODE_LVL_EXT_USERDEF_TRUE  : constant       := 16#1#;
    LW_PRGNLCL_RISCV_EXTIRQMODE_LVL_EXT_USERDEF_FALSE : constant       := 16#0#;

    type LW_PRGNLCL_RISCV_EXTIRQMODE_Register is record
        Lvl_Ext : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_EXTIRQMODE_Register use record
        Lvl_Ext at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_RISCV_EXTIRQSCMASK_EXT_ENABLE          : constant NvU32 := 16#ffff_ffff#;
    LW_PRGNLCL_RISCV_EXTIRQSCMASK_EXT_DISABLE         : constant NvU32 := 16#0#;
    LW_PRGNLCL_RISCV_EXTIRQSCMASK_EXT_USERDEF_ENABLE  : constant       := 16#1#;
    LW_PRGNLCL_RISCV_EXTIRQSCMASK_EXT_USERDEF_DISABLE : constant       := 16#0#;

    type LW_PRGNLCL_RISCV_EXTIRQSCMASK_Register is record
        Ext : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_EXTIRQSCMASK_Register use record
        Ext at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_RISCV_EXTIRQMSET_EXT_USERDEF_SET : constant := 16#1#;

    type LW_PRGNLCL_RISCV_EXTIRQMSET_Register is record
        Ext : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_EXTIRQMSET_Register use record
        Ext at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_RISCV_EXTIRQMCLR_EXT_USERDEF_SET : constant := 16#1#;

    type LW_PRGNLCL_RISCV_EXTIRQMCLR_Register is record
        Ext : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_EXTIRQMCLR_Register use record
        Ext at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_RISCV_EXTIRQMASK_EXT_UNSET         : constant NvU32 := 16#0#;
    LW_PRGNLCL_RISCV_EXTIRQMASK_EXT_SET           : constant NvU32 := 16#ffff_ffff#;
    LW_PRGNLCL_RISCV_EXTIRQMASK_EXT_USERDEF_UNSET : constant       := 16#0#;
    LW_PRGNLCL_RISCV_EXTIRQMASK_EXT_USERDEF_SET   : constant       := 16#1#;

    type LW_PRGNLCL_RISCV_EXTIRQMASK_Register is record
        Ext : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_EXTIRQMASK_Register use record
        Ext at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_RISCV_EXTIRQDEST_EXT_INIT          : constant NvU32 := 16#0#;
    LW_PRGNLCL_RISCV_EXTIRQDEST_EXT_USERDEF_RISCV : constant       := 16#0#;
    LW_PRGNLCL_RISCV_EXTIRQDEST_EXT_USERDEF_HOST  : constant       := 16#1#;

    type LW_PRGNLCL_RISCV_EXTIRQDEST_Register is record
        Ext : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_EXTIRQDEST_Register use record
        Ext at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_RISCV_EXTIRQTYPE_EXT_HOST_NORMAL           : constant NvU32 := 16#0#;
    LW_PRGNLCL_RISCV_EXTIRQTYPE_EXT_HOST_NONSTALL         : constant NvU32 := 16#ffff_ffff#;
    LW_PRGNLCL_RISCV_EXTIRQTYPE_EXT_USERDEF_HOST_NORMAL   : constant       := 16#0#;
    LW_PRGNLCL_RISCV_EXTIRQTYPE_EXT_USERDEF_HOST_NONSTALL : constant       := 16#1#;

    type LW_PRGNLCL_RISCV_EXTIRQTYPE_Register is record
        Ext : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_EXTIRQTYPE_Register use record
        Ext at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_RISCV_EXTIRQDELEG_EXT_RISCV_MEIP         : constant NvU32 := 16#0#;
    LW_PRGNLCL_RISCV_EXTIRQDELEG_EXT_RISCV_SEIP         : constant NvU32 := 16#ffff_ffff#;
    LW_PRGNLCL_RISCV_EXTIRQDELEG_EXT_USERDEF_RISCV_MEIP : constant       := 16#0#;
    LW_PRGNLCL_RISCV_EXTIRQDELEG_EXT_USERDEF_RISCV_SEIP : constant       := 16#1#;

    type LW_PRGNLCL_RISCV_EXTIRQDELEG_Register is record
        Ext : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_EXTIRQDELEG_Register use record
        Ext at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_RISCV_BOOT_VECTOR_HI_VECTOR_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_RISCV_BOOT_VECTOR_HI_Register is record
        Vector : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_BOOT_VECTOR_HI_Register use record
        Vector at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_RISCV_BOOT_VECTOR_LO_VECTOR_INIT : constant NvU32 := 16#8_0000#;

    type LW_PRGNLCL_RISCV_BOOT_VECTOR_LO_Register is record
        Vector : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_BOOT_VECTOR_LO_Register use record
        Vector at 0 range 0 .. 31;
    end record;

    type LW_PRGNLCL_RISCV_CPUCTL_STARTCPU_Field is (STARTCPU_FALSE, STARTCPU_TRUE) with
        Size => 1;
    for LW_PRGNLCL_RISCV_CPUCTL_STARTCPU_Field use (STARTCPU_FALSE => 16#0#, STARTCPU_TRUE => 16#1#);
    LW_PRGNLCL_RISCV_CPUCTL_HALTED_INIT  : constant NvU1 := 16#0#;
    LW_PRGNLCL_RISCV_CPUCTL_STOPPED_INIT : constant NvU1 := 16#0#;
    type LW_PRGNLCL_RISCV_CPUCTL_ACTIVE_STAT_Field is (STAT_INACTIVE, STAT_ACTIVE) with
        Size => 1;
    for LW_PRGNLCL_RISCV_CPUCTL_ACTIVE_STAT_Field use (STAT_INACTIVE => 16#0#, STAT_ACTIVE => 16#1#);

    type LW_PRGNLCL_RISCV_CPUCTL_Register is record
        Startcpu    : LW_PRGNLCL_RISCV_CPUCTL_STARTCPU_Field;
        Halted      : NvU1;
        Stopped     : NvU1;
        Active_Stat : LW_PRGNLCL_RISCV_CPUCTL_ACTIVE_STAT_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_CPUCTL_Register use record
        Startcpu    at 0 range 0 .. 0;
        Halted      at 0 range 4 .. 4;
        Stopped     at 0 range 5 .. 5;
        Active_Stat at 0 range 7 .. 7;
    end record;

    LW_PRGNLCL_RISCV_LWCONFIG_WR_ALLOC_EN_RST         : constant NvU1 := 16#0#;
    LW_PRGNLCL_RISCV_LWCONFIG_LD_MERGE_EN_RST         : constant NvU1 := 16#0#;
    LW_PRGNLCL_RISCV_LWCONFIG_ST_WAIT_CSB_ACK_EN_RST  : constant NvU1 := 16#0#;
    LW_PRGNLCL_RISCV_LWCONFIG_ST_WAIT_FBIF_ACK_EN_RST : constant NvU1 := 16#0#;
    LW_PRGNLCL_RISCV_LWCONFIG_VB_FWD_EN_RST           : constant NvU1 := 16#1#;
    LW_PRGNLCL_RISCV_LWCONFIG_WRITE_BACK_EN_RST       : constant NvU1 := 16#0#;
    LW_PRGNLCL_RISCV_LWCONFIG_ST_COMMIT_ISSUE_EN_RST  : constant NvU1 := 16#0#;
    LW_PRGNLCL_RISCV_LWCONFIG_TLB_FIX_SIZE_EN_RST     : constant NvU1 := 16#0#;
    LW_PRGNLCL_RISCV_LWCONFIG_SYSOP_CSR_EN_RST        : constant NvU1 := 16#0#;
    LW_PRGNLCL_RISCV_LWCONFIG_FENCE_FBFLUSH_EN_RST    : constant NvU1 := 16#0#;

    type LW_PRGNLCL_RISCV_LWCONFIG_Register is record
        Wr_Alloc_En         : NvU1;
        Ld_Merge_En         : NvU1;
        St_Wait_Csb_Ack_En  : NvU1;
        St_Wait_Fbif_Ack_En : NvU1;
        Vb_Fwd_En           : NvU1;
        Write_Back_En       : NvU1;
        St_Commit_Issue_En  : NvU1;
        Tlb_Fix_Size_En     : NvU1;
        Sysop_Csr_En        : NvU1;
        Fence_Fbflush_En    : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_LWCONFIG_Register use record
        Wr_Alloc_En         at 0 range  0 ..  0;
        Ld_Merge_En         at 0 range  1 ..  1;
        St_Wait_Csb_Ack_En  at 0 range  2 ..  2;
        St_Wait_Fbif_Ack_En at 0 range  3 ..  3;
        Vb_Fwd_En           at 0 range  4 ..  4;
        Write_Back_En       at 0 range  6 ..  6;
        St_Commit_Issue_En  at 0 range  7 ..  7;
        Tlb_Fix_Size_En     at 0 range  8 ..  8;
        Sysop_Csr_En        at 0 range  9 ..  9;
        Fence_Fbflush_En    at 0 range 10 .. 10;
    end record;

    type LW_PRGNLCL_RISCV_CG_SLCG_Field is (SLCG_DISABLE, SLCG_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_RISCV_CG_SLCG_Field use (SLCG_DISABLE => 16#0#, SLCG_ENABLE => 16#1#);
    type LW_PRGNLCL_RISCV_CG_CORE_SLCG_Field is (SLCG_DISABLE, SLCG_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_RISCV_CG_CORE_SLCG_Field use (SLCG_DISABLE => 16#0#, SLCG_ENABLE => 16#1#);
    LW_PRGNLCL_RISCV_CG_RSVD_INIT : constant NvU30 := 16#0#;

    type LW_PRGNLCL_RISCV_CG_Register is record
        Slcg      : LW_PRGNLCL_RISCV_CG_SLCG_Field;
        Core_Slcg : LW_PRGNLCL_RISCV_CG_CORE_SLCG_Field;
        Rsvd      : NvU30;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_CG_Register use record
        Slcg      at 0 range 0 ..  0;
        Core_Slcg at 0 range 1 ..  1;
        Rsvd      at 0 range 2 .. 31;
    end record;

    LW_PRGNLCL_RISCV_CYA_RSVD_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_RISCV_CYA_Register is record
        Rsvd : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_CYA_Register use record
        Rsvd at 0 range 0 .. 31;
    end record;

    type LW_PRGNLCL_RISCV_MSPM_MPLM_LEVEL1_Field is (LEVEL1_DISABLE, LEVEL1_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_RISCV_MSPM_MPLM_LEVEL1_Field use (LEVEL1_DISABLE => 16#0#, LEVEL1_ENABLE => 16#1#);
    type LW_PRGNLCL_RISCV_MSPM_MPLM_LEVEL2_Field is (LEVEL2_DISABLE, LEVEL2_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_RISCV_MSPM_MPLM_LEVEL2_Field use (LEVEL2_DISABLE => 16#0#, LEVEL2_ENABLE => 16#1#);

    type LW_PRGNLCL_RISCV_MSPM_Register is record
        Mplm_Level1 : LW_PRGNLCL_RISCV_MSPM_MPLM_LEVEL1_Field;
        Mplm_Level2 : LW_PRGNLCL_RISCV_MSPM_MPLM_LEVEL2_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_MSPM_Register use record
        Mplm_Level1 at 0 range 13 .. 13;
        Mplm_Level2 at 0 range 14 .. 14;
    end record;

    type LW_PRGNLCL_RISCV_DBGCTL_ICD_CMDWL_STOP_Field is (STOP_DISABLE, STOP_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_RISCV_DBGCTL_ICD_CMDWL_STOP_Field use (STOP_DISABLE => 16#0#, STOP_ENABLE => 16#1#);
    type LW_PRGNLCL_RISCV_DBGCTL_ICD_CMDWL_RUN_Field is (RUN_DISABLE, RUN_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_RISCV_DBGCTL_ICD_CMDWL_RUN_Field use (RUN_DISABLE => 16#0#, RUN_ENABLE => 16#1#);
    LW_PRGNLCL_RISCV_DBGCTL_RSVD1_INIT : constant NvU1 := 16#0#;
    type LW_PRGNLCL_RISCV_DBGCTL_ICD_CMDWL_STEP_Field is (STEP_DISABLE, STEP_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_RISCV_DBGCTL_ICD_CMDWL_STEP_Field use (STEP_DISABLE => 16#0#, STEP_ENABLE => 16#1#);
    type LW_PRGNLCL_RISCV_DBGCTL_ICD_CMDWL_J_Field is (J_DISABLE, J_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_RISCV_DBGCTL_ICD_CMDWL_J_Field use (J_DISABLE => 16#0#, J_ENABLE => 16#1#);
    type LW_PRGNLCL_RISCV_DBGCTL_ICD_CMDWL_EMASK_Field is (EMASK_DISABLE, EMASK_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_RISCV_DBGCTL_ICD_CMDWL_EMASK_Field use (EMASK_DISABLE => 16#0#, EMASK_ENABLE => 16#1#);
    type LW_PRGNLCL_RISCV_DBGCTL_ICD_CMDWL_RREG_Field is (RREG_DISABLE, RREG_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_RISCV_DBGCTL_ICD_CMDWL_RREG_Field use (RREG_DISABLE => 16#0#, RREG_ENABLE => 16#1#);
    type LW_PRGNLCL_RISCV_DBGCTL_ICD_CMDWL_WREG_Field is (WREG_DISABLE, WREG_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_RISCV_DBGCTL_ICD_CMDWL_WREG_Field use (WREG_DISABLE => 16#0#, WREG_ENABLE => 16#1#);
    type LW_PRGNLCL_RISCV_DBGCTL_ICD_CMDWL_RDM_Field is (RDM_DISABLE, RDM_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_RISCV_DBGCTL_ICD_CMDWL_RDM_Field use (RDM_DISABLE => 16#0#, RDM_ENABLE => 16#1#);
    type LW_PRGNLCL_RISCV_DBGCTL_ICD_CMDWL_WDM_Field is (WDM_DISABLE, WDM_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_RISCV_DBGCTL_ICD_CMDWL_WDM_Field use (WDM_DISABLE => 16#0#, WDM_ENABLE => 16#1#);
    type LW_PRGNLCL_RISCV_DBGCTL_ICD_CMDWL_RSTAT_Field is (RSTAT_DISABLE, RSTAT_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_RISCV_DBGCTL_ICD_CMDWL_RSTAT_Field use (RSTAT_DISABLE => 16#0#, RSTAT_ENABLE => 16#1#);
    type LW_PRGNLCL_RISCV_DBGCTL_ICD_CMDWL_IBRKPT_Field is (IBRKPT_DISABLE, IBRKPT_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_RISCV_DBGCTL_ICD_CMDWL_IBRKPT_Field use (IBRKPT_DISABLE => 16#0#, IBRKPT_ENABLE => 16#1#);
    type LW_PRGNLCL_RISCV_DBGCTL_ICD_CMDWL_RCSR_Field is (RCSR_DISABLE, RCSR_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_RISCV_DBGCTL_ICD_CMDWL_RCSR_Field use (RCSR_DISABLE => 16#0#, RCSR_ENABLE => 16#1#);
    type LW_PRGNLCL_RISCV_DBGCTL_ICD_CMDWL_WCSR_Field is (WCSR_DISABLE, WCSR_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_RISCV_DBGCTL_ICD_CMDWL_WCSR_Field use (WCSR_DISABLE => 16#0#, WCSR_ENABLE => 16#1#);
    type LW_PRGNLCL_RISCV_DBGCTL_ICD_CMDWL_RPC_Field is (RPC_DISABLE, RPC_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_RISCV_DBGCTL_ICD_CMDWL_RPC_Field use (RPC_DISABLE => 16#0#, RPC_ENABLE => 16#1#);
    type LW_PRGNLCL_RISCV_DBGCTL_ICD_CMDWL_RFREG_Field is (RFREG_DISABLE, RFREG_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_RISCV_DBGCTL_ICD_CMDWL_RFREG_Field use (RFREG_DISABLE => 16#0#, RFREG_ENABLE => 16#1#);
    type LW_PRGNLCL_RISCV_DBGCTL_ICD_CMDWL_WFREG_Field is (WFREG_DISABLE, WFREG_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_RISCV_DBGCTL_ICD_CMDWL_WFREG_Field use (WFREG_DISABLE => 16#0#, WFREG_ENABLE => 16#1#);
    LW_PRGNLCL_RISCV_DBGCTL_RSVD_INIT : constant NvU13 := 16#0#;
    type LW_PRGNLCL_RISCV_DBGCTL_START_IN_ICD_Field is (ICD_FALSE, ICD_TRUE) with
        Size => 1;
    for LW_PRGNLCL_RISCV_DBGCTL_START_IN_ICD_Field use (ICD_FALSE => 16#0#, ICD_TRUE => 16#1#);
    type LW_PRGNLCL_RISCV_DBGCTL_SINGLE_STEP_MODE_Field is (MODE_DISABLE, MODE_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_RISCV_DBGCTL_SINGLE_STEP_MODE_Field use (MODE_DISABLE => 16#0#, MODE_ENABLE => 16#1#);

    type LW_PRGNLCL_RISCV_DBGCTL_Register is record
        Icd_Cmdwl_Stop   : LW_PRGNLCL_RISCV_DBGCTL_ICD_CMDWL_STOP_Field;
        Icd_Cmdwl_Run    : LW_PRGNLCL_RISCV_DBGCTL_ICD_CMDWL_RUN_Field;
        Rsvd1            : NvU1;
        Icd_Cmdwl_Step   : LW_PRGNLCL_RISCV_DBGCTL_ICD_CMDWL_STEP_Field;
        Icd_Cmdwl_J      : LW_PRGNLCL_RISCV_DBGCTL_ICD_CMDWL_J_Field;
        Icd_Cmdwl_Emask  : LW_PRGNLCL_RISCV_DBGCTL_ICD_CMDWL_EMASK_Field;
        Icd_Cmdwl_Rreg   : LW_PRGNLCL_RISCV_DBGCTL_ICD_CMDWL_RREG_Field;
        Icd_Cmdwl_Wreg   : LW_PRGNLCL_RISCV_DBGCTL_ICD_CMDWL_WREG_Field;
        Icd_Cmdwl_Rdm    : LW_PRGNLCL_RISCV_DBGCTL_ICD_CMDWL_RDM_Field;
        Icd_Cmdwl_Wdm    : LW_PRGNLCL_RISCV_DBGCTL_ICD_CMDWL_WDM_Field;
        Icd_Cmdwl_Rstat  : LW_PRGNLCL_RISCV_DBGCTL_ICD_CMDWL_RSTAT_Field;
        Icd_Cmdwl_Ibrkpt : LW_PRGNLCL_RISCV_DBGCTL_ICD_CMDWL_IBRKPT_Field;
        Icd_Cmdwl_Rcsr   : LW_PRGNLCL_RISCV_DBGCTL_ICD_CMDWL_RCSR_Field;
        Icd_Cmdwl_Wcsr   : LW_PRGNLCL_RISCV_DBGCTL_ICD_CMDWL_WCSR_Field;
        Icd_Cmdwl_Rpc    : LW_PRGNLCL_RISCV_DBGCTL_ICD_CMDWL_RPC_Field;
        Icd_Cmdwl_Rfreg  : LW_PRGNLCL_RISCV_DBGCTL_ICD_CMDWL_RFREG_Field;
        Icd_Cmdwl_Wfreg  : LW_PRGNLCL_RISCV_DBGCTL_ICD_CMDWL_WFREG_Field;
        Rsvd             : NvU13;
        Start_In_Icd     : LW_PRGNLCL_RISCV_DBGCTL_START_IN_ICD_Field;
        Single_Step_Mode : LW_PRGNLCL_RISCV_DBGCTL_SINGLE_STEP_MODE_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_DBGCTL_Register use record
        Icd_Cmdwl_Stop   at 0 range  0 ..  0;
        Icd_Cmdwl_Run    at 0 range  1 ..  1;
        Rsvd1            at 0 range  2 ..  2;
        Icd_Cmdwl_Step   at 0 range  3 ..  3;
        Icd_Cmdwl_J      at 0 range  4 ..  4;
        Icd_Cmdwl_Emask  at 0 range  5 ..  5;
        Icd_Cmdwl_Rreg   at 0 range  6 ..  6;
        Icd_Cmdwl_Wreg   at 0 range  7 ..  7;
        Icd_Cmdwl_Rdm    at 0 range  8 ..  8;
        Icd_Cmdwl_Wdm    at 0 range  9 ..  9;
        Icd_Cmdwl_Rstat  at 0 range 10 .. 10;
        Icd_Cmdwl_Ibrkpt at 0 range 11 .. 11;
        Icd_Cmdwl_Rcsr   at 0 range 12 .. 12;
        Icd_Cmdwl_Wcsr   at 0 range 13 .. 13;
        Icd_Cmdwl_Rpc    at 0 range 14 .. 14;
        Icd_Cmdwl_Rfreg  at 0 range 15 .. 15;
        Icd_Cmdwl_Wfreg  at 0 range 16 .. 16;
        Rsvd             at 0 range 17 .. 29;
        Start_In_Icd     at 0 range 30 .. 30;
        Single_Step_Mode at 0 range 31 .. 31;
    end record;

    type LW_PRGNLCL_RISCV_DBGCTL_LOCK_ICD_CMDWL_STOP_Field is (STOP_UNLOCKED, STOP_LOCKED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_DBGCTL_LOCK_ICD_CMDWL_STOP_Field use (STOP_UNLOCKED => 16#0#, STOP_LOCKED => 16#1#);
    type LW_PRGNLCL_RISCV_DBGCTL_LOCK_ICD_CMDWL_RUN_Field is (RUN_UNLOCKED, RUN_LOCKED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_DBGCTL_LOCK_ICD_CMDWL_RUN_Field use (RUN_UNLOCKED => 16#0#, RUN_LOCKED => 16#1#);
    LW_PRGNLCL_RISCV_DBGCTL_LOCK_RSVD1_INIT : constant NvU1 := 16#0#;
    type LW_PRGNLCL_RISCV_DBGCTL_LOCK_ICD_CMDWL_STEP_Field is (STEP_UNLOCKED, STEP_LOCKED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_DBGCTL_LOCK_ICD_CMDWL_STEP_Field use (STEP_UNLOCKED => 16#0#, STEP_LOCKED => 16#1#);
    type LW_PRGNLCL_RISCV_DBGCTL_LOCK_ICD_CMDWL_J_Field is (J_UNLOCKED, J_LOCKED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_DBGCTL_LOCK_ICD_CMDWL_J_Field use (J_UNLOCKED => 16#0#, J_LOCKED => 16#1#);
    type LW_PRGNLCL_RISCV_DBGCTL_LOCK_ICD_CMDWL_EMASK_Field is (EMASK_UNLOCKED, EMASK_LOCKED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_DBGCTL_LOCK_ICD_CMDWL_EMASK_Field use (EMASK_UNLOCKED => 16#0#, EMASK_LOCKED => 16#1#);
    type LW_PRGNLCL_RISCV_DBGCTL_LOCK_ICD_CMDWL_RREG_Field is (RREG_UNLOCKED, RREG_LOCKED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_DBGCTL_LOCK_ICD_CMDWL_RREG_Field use (RREG_UNLOCKED => 16#0#, RREG_LOCKED => 16#1#);
    type LW_PRGNLCL_RISCV_DBGCTL_LOCK_ICD_CMDWL_WREG_Field is (WREG_UNLOCKED, WREG_LOCKED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_DBGCTL_LOCK_ICD_CMDWL_WREG_Field use (WREG_UNLOCKED => 16#0#, WREG_LOCKED => 16#1#);
    type LW_PRGNLCL_RISCV_DBGCTL_LOCK_ICD_CMDWL_RDM_Field is (RDM_UNLOCKED, RDM_LOCKED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_DBGCTL_LOCK_ICD_CMDWL_RDM_Field use (RDM_UNLOCKED => 16#0#, RDM_LOCKED => 16#1#);
    type LW_PRGNLCL_RISCV_DBGCTL_LOCK_ICD_CMDWL_WDM_Field is (WDM_UNLOCKED, WDM_LOCKED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_DBGCTL_LOCK_ICD_CMDWL_WDM_Field use (WDM_UNLOCKED => 16#0#, WDM_LOCKED => 16#1#);
    type LW_PRGNLCL_RISCV_DBGCTL_LOCK_ICD_CMDWL_RSTAT_Field is (RSTAT_UNLOCKED, RSTAT_LOCKED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_DBGCTL_LOCK_ICD_CMDWL_RSTAT_Field use (RSTAT_UNLOCKED => 16#0#, RSTAT_LOCKED => 16#1#);
    type LW_PRGNLCL_RISCV_DBGCTL_LOCK_ICD_CMDWL_IBRKPT_Field is (IBRKPT_UNLOCKED, IBRKPT_LOCKED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_DBGCTL_LOCK_ICD_CMDWL_IBRKPT_Field use (IBRKPT_UNLOCKED => 16#0#, IBRKPT_LOCKED => 16#1#);
    type LW_PRGNLCL_RISCV_DBGCTL_LOCK_ICD_CMDWL_RCSR_Field is (RCSR_UNLOCKED, RCSR_LOCKED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_DBGCTL_LOCK_ICD_CMDWL_RCSR_Field use (RCSR_UNLOCKED => 16#0#, RCSR_LOCKED => 16#1#);
    type LW_PRGNLCL_RISCV_DBGCTL_LOCK_ICD_CMDWL_WCSR_Field is (WCSR_UNLOCKED, WCSR_LOCKED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_DBGCTL_LOCK_ICD_CMDWL_WCSR_Field use (WCSR_UNLOCKED => 16#0#, WCSR_LOCKED => 16#1#);
    type LW_PRGNLCL_RISCV_DBGCTL_LOCK_ICD_CMDWL_RPC_Field is (RPC_UNLOCKED, RPC_LOCKED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_DBGCTL_LOCK_ICD_CMDWL_RPC_Field use (RPC_UNLOCKED => 16#0#, RPC_LOCKED => 16#1#);
    type LW_PRGNLCL_RISCV_DBGCTL_LOCK_ICD_CMDWL_RFREG_Field is (RFREG_UNLOCKED, RFREG_LOCKED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_DBGCTL_LOCK_ICD_CMDWL_RFREG_Field use (RFREG_UNLOCKED => 16#0#, RFREG_LOCKED => 16#1#);
    type LW_PRGNLCL_RISCV_DBGCTL_LOCK_ICD_CMDWL_WFREG_Field is (WFREG_UNLOCKED, WFREG_LOCKED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_DBGCTL_LOCK_ICD_CMDWL_WFREG_Field use (WFREG_UNLOCKED => 16#0#, WFREG_LOCKED => 16#1#);
    LW_PRGNLCL_RISCV_DBGCTL_LOCK_RSVD_INIT : constant NvU14 := 16#0#;
    type LW_PRGNLCL_RISCV_DBGCTL_LOCK_SINGLE_STEP_MODE_Field is (MODE_UNLOCKED, MODE_LOCKED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_DBGCTL_LOCK_SINGLE_STEP_MODE_Field use (MODE_UNLOCKED => 16#0#, MODE_LOCKED => 16#1#);

    type LW_PRGNLCL_RISCV_DBGCTL_LOCK_Register is record
        Icd_Cmdwl_Stop   : LW_PRGNLCL_RISCV_DBGCTL_LOCK_ICD_CMDWL_STOP_Field;
        Icd_Cmdwl_Run    : LW_PRGNLCL_RISCV_DBGCTL_LOCK_ICD_CMDWL_RUN_Field;
        Rsvd1            : NvU1;
        Icd_Cmdwl_Step   : LW_PRGNLCL_RISCV_DBGCTL_LOCK_ICD_CMDWL_STEP_Field;
        Icd_Cmdwl_J      : LW_PRGNLCL_RISCV_DBGCTL_LOCK_ICD_CMDWL_J_Field;
        Icd_Cmdwl_Emask  : LW_PRGNLCL_RISCV_DBGCTL_LOCK_ICD_CMDWL_EMASK_Field;
        Icd_Cmdwl_Rreg   : LW_PRGNLCL_RISCV_DBGCTL_LOCK_ICD_CMDWL_RREG_Field;
        Icd_Cmdwl_Wreg   : LW_PRGNLCL_RISCV_DBGCTL_LOCK_ICD_CMDWL_WREG_Field;
        Icd_Cmdwl_Rdm    : LW_PRGNLCL_RISCV_DBGCTL_LOCK_ICD_CMDWL_RDM_Field;
        Icd_Cmdwl_Wdm    : LW_PRGNLCL_RISCV_DBGCTL_LOCK_ICD_CMDWL_WDM_Field;
        Icd_Cmdwl_Rstat  : LW_PRGNLCL_RISCV_DBGCTL_LOCK_ICD_CMDWL_RSTAT_Field;
        Icd_Cmdwl_Ibrkpt : LW_PRGNLCL_RISCV_DBGCTL_LOCK_ICD_CMDWL_IBRKPT_Field;
        Icd_Cmdwl_Rcsr   : LW_PRGNLCL_RISCV_DBGCTL_LOCK_ICD_CMDWL_RCSR_Field;
        Icd_Cmdwl_Wcsr   : LW_PRGNLCL_RISCV_DBGCTL_LOCK_ICD_CMDWL_WCSR_Field;
        Icd_Cmdwl_Rpc    : LW_PRGNLCL_RISCV_DBGCTL_LOCK_ICD_CMDWL_RPC_Field;
        Icd_Cmdwl_Rfreg  : LW_PRGNLCL_RISCV_DBGCTL_LOCK_ICD_CMDWL_RFREG_Field;
        Icd_Cmdwl_Wfreg  : LW_PRGNLCL_RISCV_DBGCTL_LOCK_ICD_CMDWL_WFREG_Field;
        Rsvd             : NvU14;
        Single_Step_Mode : LW_PRGNLCL_RISCV_DBGCTL_LOCK_SINGLE_STEP_MODE_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_DBGCTL_LOCK_Register use record
        Icd_Cmdwl_Stop   at 0 range  0 ..  0;
        Icd_Cmdwl_Run    at 0 range  1 ..  1;
        Rsvd1            at 0 range  2 ..  2;
        Icd_Cmdwl_Step   at 0 range  3 ..  3;
        Icd_Cmdwl_J      at 0 range  4 ..  4;
        Icd_Cmdwl_Emask  at 0 range  5 ..  5;
        Icd_Cmdwl_Rreg   at 0 range  6 ..  6;
        Icd_Cmdwl_Wreg   at 0 range  7 ..  7;
        Icd_Cmdwl_Rdm    at 0 range  8 ..  8;
        Icd_Cmdwl_Wdm    at 0 range  9 ..  9;
        Icd_Cmdwl_Rstat  at 0 range 10 .. 10;
        Icd_Cmdwl_Ibrkpt at 0 range 11 .. 11;
        Icd_Cmdwl_Rcsr   at 0 range 12 .. 12;
        Icd_Cmdwl_Wcsr   at 0 range 13 .. 13;
        Icd_Cmdwl_Rpc    at 0 range 14 .. 14;
        Icd_Cmdwl_Rfreg  at 0 range 15 .. 15;
        Icd_Cmdwl_Wfreg  at 0 range 16 .. 16;
        Rsvd             at 0 range 17 .. 30;
        Single_Step_Mode at 0 range 31 .. 31;
    end record;

    LW_PRGNLCL_RISCV_ICD_CMD_OPC_STOP  : constant NvU5 := 16#0#;
    LW_PRGNLCL_RISCV_ICD_CMD_OPC_RUN   : constant NvU5 := 16#1#;
    LW_PRGNLCL_RISCV_ICD_CMD_OPC_STEP  : constant NvU5 := 16#5#;
    LW_PRGNLCL_RISCV_ICD_CMD_OPC_J     : constant NvU5 := 16#6#;
    LW_PRGNLCL_RISCV_ICD_CMD_OPC_EMASK : constant NvU5 := 16#7#;
    LW_PRGNLCL_RISCV_ICD_CMD_OPC_RREG  : constant NvU5 := 16#8#;
    LW_PRGNLCL_RISCV_ICD_CMD_OPC_WREG  : constant NvU5 := 16#9#;
    LW_PRGNLCL_RISCV_ICD_CMD_OPC_RDM   : constant NvU5 := 16#a#;
    LW_PRGNLCL_RISCV_ICD_CMD_OPC_WDM   : constant NvU5 := 16#b#;
    LW_PRGNLCL_RISCV_ICD_CMD_OPC_RSTAT : constant NvU5 := 16#e#;
    LW_PRGNLCL_RISCV_ICD_CMD_OPC_RCSR  : constant NvU5 := 16#10#;
    LW_PRGNLCL_RISCV_ICD_CMD_OPC_WCSR  : constant NvU5 := 16#11#;
    LW_PRGNLCL_RISCV_ICD_CMD_OPC_RPC   : constant NvU5 := 16#12#;
    LW_PRGNLCL_RISCV_ICD_CMD_OPC_RFREG : constant NvU5 := 16#13#;
    LW_PRGNLCL_RISCV_ICD_CMD_OPC_WFREG : constant NvU5 := 16#14#;
    type LW_PRGNLCL_RISCV_ICD_CMD_SZ_Field is (SZ_B, SZ_HW, SZ_W, SZ_DW) with
        Size => 2;
    for LW_PRGNLCL_RISCV_ICD_CMD_SZ_Field use (SZ_B => 16#0#, SZ_HW => 16#1#, SZ_W => 16#2#, SZ_DW => 16#3#);
    LW_PRGNLCL_RISCV_ICD_CMD_IDX_REG0   : constant NvU5 := 16#0#;
    LW_PRGNLCL_RISCV_ICD_CMD_IDX_REG1   : constant NvU5 := 16#1#;
    LW_PRGNLCL_RISCV_ICD_CMD_IDX_REG2   : constant NvU5 := 16#2#;
    LW_PRGNLCL_RISCV_ICD_CMD_IDX_REG3   : constant NvU5 := 16#3#;
    LW_PRGNLCL_RISCV_ICD_CMD_IDX_REG4   : constant NvU5 := 16#4#;
    LW_PRGNLCL_RISCV_ICD_CMD_IDX_REG5   : constant NvU5 := 16#5#;
    LW_PRGNLCL_RISCV_ICD_CMD_IDX_REG6   : constant NvU5 := 16#6#;
    LW_PRGNLCL_RISCV_ICD_CMD_IDX_REG7   : constant NvU5 := 16#7#;
    LW_PRGNLCL_RISCV_ICD_CMD_IDX_REG8   : constant NvU5 := 16#8#;
    LW_PRGNLCL_RISCV_ICD_CMD_IDX_REG9   : constant NvU5 := 16#9#;
    LW_PRGNLCL_RISCV_ICD_CMD_IDX_REG10  : constant NvU5 := 16#a#;
    LW_PRGNLCL_RISCV_ICD_CMD_IDX_REG11  : constant NvU5 := 16#b#;
    LW_PRGNLCL_RISCV_ICD_CMD_IDX_REG12  : constant NvU5 := 16#c#;
    LW_PRGNLCL_RISCV_ICD_CMD_IDX_REG13  : constant NvU5 := 16#d#;
    LW_PRGNLCL_RISCV_ICD_CMD_IDX_REG14  : constant NvU5 := 16#e#;
    LW_PRGNLCL_RISCV_ICD_CMD_IDX_REG15  : constant NvU5 := 16#f#;
    LW_PRGNLCL_RISCV_ICD_CMD_IDX_REG16  : constant NvU5 := 16#10#;
    LW_PRGNLCL_RISCV_ICD_CMD_IDX_REG17  : constant NvU5 := 16#11#;
    LW_PRGNLCL_RISCV_ICD_CMD_IDX_REG18  : constant NvU5 := 16#12#;
    LW_PRGNLCL_RISCV_ICD_CMD_IDX_REG19  : constant NvU5 := 16#13#;
    LW_PRGNLCL_RISCV_ICD_CMD_IDX_REG20  : constant NvU5 := 16#14#;
    LW_PRGNLCL_RISCV_ICD_CMD_IDX_REG21  : constant NvU5 := 16#15#;
    LW_PRGNLCL_RISCV_ICD_CMD_IDX_REG22  : constant NvU5 := 16#16#;
    LW_PRGNLCL_RISCV_ICD_CMD_IDX_REG23  : constant NvU5 := 16#17#;
    LW_PRGNLCL_RISCV_ICD_CMD_IDX_REG24  : constant NvU5 := 16#18#;
    LW_PRGNLCL_RISCV_ICD_CMD_IDX_REG25  : constant NvU5 := 16#19#;
    LW_PRGNLCL_RISCV_ICD_CMD_IDX_REG26  : constant NvU5 := 16#1a#;
    LW_PRGNLCL_RISCV_ICD_CMD_IDX_REG27  : constant NvU5 := 16#1b#;
    LW_PRGNLCL_RISCV_ICD_CMD_IDX_REG28  : constant NvU5 := 16#1c#;
    LW_PRGNLCL_RISCV_ICD_CMD_IDX_REG29  : constant NvU5 := 16#1e#;
    LW_PRGNLCL_RISCV_ICD_CMD_IDX_REG30  : constant NvU5 := 16#1e#;
    LW_PRGNLCL_RISCV_ICD_CMD_IDX_REG31  : constant NvU5 := 16#1f#;
    LW_PRGNLCL_RISCV_ICD_CMD_IDX_RSTAT3 : constant NvU5 := 16#3#;
    LW_PRGNLCL_RISCV_ICD_CMD_IDX_RSTAT4 : constant NvU5 := 16#4#;
    type LW_PRGNLCL_RISCV_ICD_CMD_ERROR_Field is (ERROR_FALSE, ERROR_TRUE) with
        Size => 1;
    for LW_PRGNLCL_RISCV_ICD_CMD_ERROR_Field use (ERROR_FALSE => 16#0#, ERROR_TRUE => 16#1#);
    type LW_PRGNLCL_RISCV_ICD_CMD_BUSY_Field is (BUSY_FALSE, BUSY_TRUE) with
        Size => 1;
    for LW_PRGNLCL_RISCV_ICD_CMD_BUSY_Field use (BUSY_FALSE => 16#0#, BUSY_TRUE => 16#1#);
    LW_PRGNLCL_RISCV_ICD_CMD_PARM_INIT : constant NvU16 := 16#0#;

    type LW_PRGNLCL_RISCV_ICD_CMD_Register is record
        Opc   : NvU5;
        Sz    : LW_PRGNLCL_RISCV_ICD_CMD_SZ_Field;
        Idx   : NvU5;
        Error : LW_PRGNLCL_RISCV_ICD_CMD_ERROR_Field;
        Busy  : LW_PRGNLCL_RISCV_ICD_CMD_BUSY_Field;
        Parm  : NvU16;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_ICD_CMD_Register use record
        Opc   at 0 range  0 ..  4;
        Sz    at 0 range  6 ..  7;
        Idx   at 0 range  8 .. 12;
        Error at 0 range 14 .. 14;
        Busy  at 0 range 15 .. 15;
        Parm  at 0 range 16 .. 31;
    end record;

    LW_PRGNLCL_RISCV_ICD_ADDR0_ADDR_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_RISCV_ICD_ADDR0_Register is record
        Addr : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_ICD_ADDR0_Register use record
        Addr at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_RISCV_ICD_ADDR1_ADDR_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_RISCV_ICD_ADDR1_Register is record
        Addr : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_ICD_ADDR1_Register use record
        Addr at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_RISCV_ICD_WDATA0_DATA_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_RISCV_ICD_WDATA0_Register is record
        Data : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_ICD_WDATA0_Register use record
        Data at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_RISCV_ICD_WDATA1_DATA_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_RISCV_ICD_WDATA1_Register is record
        Data : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_ICD_WDATA1_Register use record
        Data at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_RISCV_ICD_RDATA0_DATA_RSTAT3_SSINT_ENTER_ICD    : constant NvU32 := 16#1#;
    LW_PRGNLCL_RISCV_ICD_RDATA0_DATA_RSTAT3_SSINT_EXPT         : constant NvU32 := 16#0#;
    LW_PRGNLCL_RISCV_ICD_RDATA0_DATA_RSTAT3_MSINT_ENTER_ICD    : constant NvU32 := 16#1#;
    LW_PRGNLCL_RISCV_ICD_RDATA0_DATA_RSTAT3_MSINT_EXPT         : constant NvU32 := 16#0#;
    LW_PRGNLCL_RISCV_ICD_RDATA0_DATA_RSTAT3_STINT_ENTER_ICD    : constant NvU32 := 16#1#;
    LW_PRGNLCL_RISCV_ICD_RDATA0_DATA_RSTAT3_STINT_EXPT         : constant NvU32 := 16#0#;
    LW_PRGNLCL_RISCV_ICD_RDATA0_DATA_RSTAT3_MTINT_ENTER_ICD    : constant NvU32 := 16#1#;
    LW_PRGNLCL_RISCV_ICD_RDATA0_DATA_RSTAT3_MTINT_EXPT         : constant NvU32 := 16#0#;
    LW_PRGNLCL_RISCV_ICD_RDATA0_DATA_RSTAT3_SEINT_ENTER_ICD    : constant NvU32 := 16#1#;
    LW_PRGNLCL_RISCV_ICD_RDATA0_DATA_RSTAT3_SEINT_EXPT         : constant NvU32 := 16#0#;
    LW_PRGNLCL_RISCV_ICD_RDATA0_DATA_RSTAT3_MEINT_ENTER_ICD    : constant NvU32 := 16#1#;
    LW_PRGNLCL_RISCV_ICD_RDATA0_DATA_RSTAT3_MEINT_EXPT         : constant NvU32 := 16#0#;
    LW_PRGNLCL_RISCV_ICD_RDATA0_DATA_RSTAT4_ICD_STATE_ACTIVE   : constant NvU32 := 16#0#;
    LW_PRGNLCL_RISCV_ICD_RDATA0_DATA_RSTAT4_ICD_STATE_INACTIVE : constant NvU32 := 16#1#;
    LW_PRGNLCL_RISCV_ICD_RDATA0_DATA_RSTAT4_ICD_STATE_ICD      : constant NvU32 := 16#2#;
    LW_PRGNLCL_RISCV_ICD_RDATA0_DATA_RSTAT4_RS0_VALUE          : constant NvU32 := 16#0#;
    LW_PRGNLCL_RISCV_ICD_RDATA0_DATA_RSTAT4_RS1_VALUE          : constant NvU32 := 16#0#;

    type LW_PRGNLCL_RISCV_ICD_RDATA0_Register is record
        Data : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_ICD_RDATA0_Register use record
        Data at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_RISCV_ICD_RDATA1_DATA_RSTAT3_IAMA_ENTER_ICD          : constant NvU32 := 16#1#;
    LW_PRGNLCL_RISCV_ICD_RDATA1_DATA_RSTAT3_IAMA_EXPT               : constant NvU32 := 16#0#;
    LW_PRGNLCL_RISCV_ICD_RDATA1_DATA_RSTAT3_IFAULT_ENTER_ICD        : constant NvU32 := 16#1#;
    LW_PRGNLCL_RISCV_ICD_RDATA1_DATA_RSTAT3_IFAULT_EXPT             : constant NvU32 := 16#0#;
    LW_PRGNLCL_RISCV_ICD_RDATA1_DATA_RSTAT3_ILL_ENTER_ICD           : constant NvU32 := 16#1#;
    LW_PRGNLCL_RISCV_ICD_RDATA1_DATA_RSTAT3_ILL_EXPT                : constant NvU32 := 16#0#;
    LW_PRGNLCL_RISCV_ICD_RDATA1_DATA_RSTAT3_BKPT_ENTER_ICD          : constant NvU32 := 16#1#;
    LW_PRGNLCL_RISCV_ICD_RDATA1_DATA_RSTAT3_BKPT_EXPT               : constant NvU32 := 16#0#;
    LW_PRGNLCL_RISCV_ICD_RDATA1_DATA_RSTAT3_LAMA_ENTER_ICD          : constant NvU32 := 16#1#;
    LW_PRGNLCL_RISCV_ICD_RDATA1_DATA_RSTAT3_LAMA_EXPT               : constant NvU32 := 16#0#;
    LW_PRGNLCL_RISCV_ICD_RDATA1_DATA_RSTAT3_LFAULT_ENTER_ICD        : constant NvU32 := 16#1#;
    LW_PRGNLCL_RISCV_ICD_RDATA1_DATA_RSTAT3_LFAULT_EXPT             : constant NvU32 := 16#0#;
    LW_PRGNLCL_RISCV_ICD_RDATA1_DATA_RSTAT3_SAMA_ENTER_ICD          : constant NvU32 := 16#1#;
    LW_PRGNLCL_RISCV_ICD_RDATA1_DATA_RSTAT3_SAMA_EXPT               : constant NvU32 := 16#0#;
    LW_PRGNLCL_RISCV_ICD_RDATA1_DATA_RSTAT3_SFAULT_ENTER_ICD        : constant NvU32 := 16#1#;
    LW_PRGNLCL_RISCV_ICD_RDATA1_DATA_RSTAT3_SFAULT_EXPT             : constant NvU32 := 16#0#;
    LW_PRGNLCL_RISCV_ICD_RDATA1_DATA_RSTAT3_UCALL_ENTER_ICD         : constant NvU32 := 16#1#;
    LW_PRGNLCL_RISCV_ICD_RDATA1_DATA_RSTAT3_UCALL_EXPT              : constant NvU32 := 16#0#;
    LW_PRGNLCL_RISCV_ICD_RDATA1_DATA_RSTAT3_SCALL_ENTER_ICD         : constant NvU32 := 16#1#;
    LW_PRGNLCL_RISCV_ICD_RDATA1_DATA_RSTAT3_SCALL_EXPT              : constant NvU32 := 16#0#;
    LW_PRGNLCL_RISCV_ICD_RDATA1_DATA_RSTAT3_MCALL_ENTER_ICD         : constant NvU32 := 16#1#;
    LW_PRGNLCL_RISCV_ICD_RDATA1_DATA_RSTAT3_MCALL_EXPT              : constant NvU32 := 16#0#;
    LW_PRGNLCL_RISCV_ICD_RDATA1_DATA_RSTAT3_IPFAULT_ENTER_ICD       : constant NvU32 := 16#1#;
    LW_PRGNLCL_RISCV_ICD_RDATA1_DATA_RSTAT3_IPFAULT_EXPT            : constant NvU32 := 16#0#;
    LW_PRGNLCL_RISCV_ICD_RDATA1_DATA_RSTAT3_LPFAULT_ENTER_ICD       : constant NvU32 := 16#1#;
    LW_PRGNLCL_RISCV_ICD_RDATA1_DATA_RSTAT3_LPFAULT_EXPT            : constant NvU32 := 16#0#;
    LW_PRGNLCL_RISCV_ICD_RDATA1_DATA_RSTAT3_SPFAULT_ENTER_ICD       : constant NvU32 := 16#1#;
    LW_PRGNLCL_RISCV_ICD_RDATA1_DATA_RSTAT3_SPFAULT_EXPT            : constant NvU32 := 16#0#;
    LW_PRGNLCL_RISCV_ICD_RDATA1_DATA_RSTAT3_U_SINGLE_STEP_ENTER_ICD : constant NvU32 := 16#1#;
    LW_PRGNLCL_RISCV_ICD_RDATA1_DATA_RSTAT3_U_SINGLE_STEP_EXPT      : constant NvU32 := 16#0#;
    LW_PRGNLCL_RISCV_ICD_RDATA1_DATA_RSTAT3_S_SINGLE_STEP_ENTER_ICD : constant NvU32 := 16#1#;
    LW_PRGNLCL_RISCV_ICD_RDATA1_DATA_RSTAT3_S_SINGLE_STEP_EXPT      : constant NvU32 := 16#0#;
    LW_PRGNLCL_RISCV_ICD_RDATA1_DATA_RSTAT4_RS_VALUE                : constant NvU32 := 16#0#;

    type LW_PRGNLCL_RISCV_ICD_RDATA1_Register is record
        Data : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_ICD_RDATA1_Register use record
        Data at 0 range 0 .. 31;
    end record;

    type LW_PRGNLCL_RISCV_RPC_Register is record
        Pc_Lo : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_RPC_Register use record
        Pc_Lo at 0 range 0 .. 31;
    end record;

    type LW_PRGNLCL_RISCV_RSTAT0_Register is record
        Rob_Full          : NvU1;
        Ifu_Instbuf_Full  : NvU1;
        Ifu_Linefill_Full : NvU1;
        Lsu_Stb_Full      : NvU1;
        Lsu_Mem_Wack_Full : NvU1;
        Lsu_Io_Wack_Full  : NvU1;
        Lsu_Linefill_Full : NvU1;
        Lsu_Vicbuf_Full   : NvU1;
        Lsu_Cb_Full       : NvU1;
        Alu_Rs_Full       : NvU1;
        Imd_Rs_Full       : NvU1;
        Fpu_Rs_Full       : NvU1;
        Iowr_Inflight     : NvU8;
        Memwr_Inflight    : NvU8;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_RSTAT0_Register use record
        Rob_Full          at 0 range  0 ..  0;
        Ifu_Instbuf_Full  at 0 range  1 ..  1;
        Ifu_Linefill_Full at 0 range  2 ..  2;
        Lsu_Stb_Full      at 0 range  3 ..  3;
        Lsu_Mem_Wack_Full at 0 range  4 ..  4;
        Lsu_Io_Wack_Full  at 0 range  5 ..  5;
        Lsu_Linefill_Full at 0 range  6 ..  6;
        Lsu_Vicbuf_Full   at 0 range  7 ..  7;
        Lsu_Cb_Full       at 0 range  8 ..  8;
        Alu_Rs_Full       at 0 range  9 ..  9;
        Imd_Rs_Full       at 0 range 10 .. 10;
        Fpu_Rs_Full       at 0 range 11 .. 11;
        Iowr_Inflight     at 0 range 16 .. 23;
        Memwr_Inflight    at 0 range 24 .. 31;
    end record;

    LW_PRGNLCL_RISCV_TRACECTL_LOW_THSHD_INIT  : constant NvU8 := 16#0#;
    LW_PRGNLCL_RISCV_TRACECTL_HIGH_THSHD_INIT : constant NvU8 := 16#ff#;
    type LW_PRGNLCL_RISCV_TRACECTL_UMODE_ENABLE_Field is (ENABLE_FALSE, ENABLE_TRUE) with
        Size => 1;
    for LW_PRGNLCL_RISCV_TRACECTL_UMODE_ENABLE_Field use (ENABLE_FALSE => 16#0#, ENABLE_TRUE => 16#1#);
    type LW_PRGNLCL_RISCV_TRACECTL_SMODE_ENABLE_Field is (ENABLE_FALSE, ENABLE_TRUE) with
        Size => 1;
    for LW_PRGNLCL_RISCV_TRACECTL_SMODE_ENABLE_Field use (ENABLE_FALSE => 16#0#, ENABLE_TRUE => 16#1#);
    type LW_PRGNLCL_RISCV_TRACECTL_MMODE_ENABLE_Field is (ENABLE_FALSE, ENABLE_TRUE) with
        Size => 1;
    for LW_PRGNLCL_RISCV_TRACECTL_MMODE_ENABLE_Field use (ENABLE_FALSE => 16#0#, ENABLE_TRUE => 16#1#);
    type LW_PRGNLCL_RISCV_TRACECTL_MODE_Field is (MODE_FULL, MODE_REDUCED, MODE_STACK) with
        Size => 2;
    for LW_PRGNLCL_RISCV_TRACECTL_MODE_Field use (MODE_FULL => 16#0#, MODE_REDUCED => 16#1#, MODE_STACK => 16#2#);
    LW_PRGNLCL_RISCV_TRACECTL_BELOW_LO_INIT : constant NvU1 := 16#0#;
    LW_PRGNLCL_RISCV_TRACECTL_ABOVE_HI_INIT : constant NvU1 := 16#0#;
    type LW_PRGNLCL_RISCV_TRACECTL_INTR_ENABLE_Field is (ENABLE_FALSE, ENABLE_TRUE) with
        Size => 1;
    for LW_PRGNLCL_RISCV_TRACECTL_INTR_ENABLE_Field use (ENABLE_FALSE => 16#0#, ENABLE_TRUE => 16#1#);
    LW_PRGNLCL_RISCV_TRACECTL_FULL_INIT  : constant NvU1 := 16#0#;
    LW_PRGNLCL_RISCV_TRACECTL_EMPTY_INIT : constant NvU1 := 16#0#;

    type LW_PRGNLCL_RISCV_TRACECTL_Register is record
        Low_Thshd    : NvU8;
        High_Thshd   : NvU8;
        Umode_Enable : LW_PRGNLCL_RISCV_TRACECTL_UMODE_ENABLE_Field;
        Smode_Enable : LW_PRGNLCL_RISCV_TRACECTL_SMODE_ENABLE_Field;
        Mmode_Enable : LW_PRGNLCL_RISCV_TRACECTL_MMODE_ENABLE_Field;
        Mode         : LW_PRGNLCL_RISCV_TRACECTL_MODE_Field;
        Below_Lo     : NvU1;
        Above_Hi     : NvU1;
        Intr_Enable  : LW_PRGNLCL_RISCV_TRACECTL_INTR_ENABLE_Field;
        Full         : NvU1;
        Empty        : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_TRACECTL_Register use record
        Low_Thshd    at 0 range  0 ..  7;
        High_Thshd   at 0 range  8 .. 15;
        Umode_Enable at 0 range 20 .. 20;
        Smode_Enable at 0 range 21 .. 21;
        Mmode_Enable at 0 range 23 .. 23;
        Mode         at 0 range 24 .. 25;
        Below_Lo     at 0 range 27 .. 27;
        Above_Hi     at 0 range 28 .. 28;
        Intr_Enable  at 0 range 29 .. 29;
        Full         at 0 range 30 .. 30;
        Empty        at 0 range 31 .. 31;
    end record;

    LW_PRGNLCL_RISCV_TRACE_RDIDX_RDIDX_INIT  : constant NvU8 := 16#0#;
    LW_PRGNLCL_RISCV_TRACE_RDIDX_RSVD0_INIT  : constant NvU8 := 16#0#;
    LW_PRGNLCL_RISCV_TRACE_RDIDX_MAXIDX_INIT : constant NvU8 := 16#3f#;
    LW_PRGNLCL_RISCV_TRACE_RDIDX_RSVD1_INIT  : constant NvU8 := 16#0#;

    type LW_PRGNLCL_RISCV_TRACE_RDIDX_Register is record
        Rdidx  : NvU8;
        Rsvd0  : NvU8;
        Maxidx : NvU8;
        Rsvd1  : NvU8;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_TRACE_RDIDX_Register use record
        Rdidx  at 0 range  0 ..  7;
        Rsvd0  at 0 range  8 .. 15;
        Maxidx at 0 range 16 .. 23;
        Rsvd1  at 0 range 24 .. 31;
    end record;

    LW_PRGNLCL_RISCV_TRACE_WTIDX_WTIDX_INIT : constant NvU8  := 16#0#;
    LW_PRGNLCL_RISCV_TRACE_WTIDX_RSVD1_INIT : constant NvU24 := 16#0#;

    type LW_PRGNLCL_RISCV_TRACE_WTIDX_Register is record
        Wtidx : NvU8;
        Rsvd1 : NvU24;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_TRACE_WTIDX_Register use record
        Wtidx at 0 range 24 .. 31;
        Rsvd1 at 0 range  0 .. 23;
    end record;

    LW_PRGNLCL_RISCV_TRACEPC_HI_PC_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_RISCV_TRACEPC_HI_Register is record
        Pc : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_TRACEPC_HI_Register use record
        Pc at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_RISCV_TRACEPC_LO_PC_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_RISCV_TRACEPC_LO_Register is record
        Pc : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_TRACEPC_LO_Register use record
        Pc at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_RISCV_MTIMECMP_HI_VALUE_INIT : constant NvU32 := 16#ffff_ffff#;

    type LW_PRGNLCL_RISCV_MTIMECMP_HI_Register is record
        Value : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_MTIMECMP_HI_Register use record
        Value at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_RISCV_MTIMECMP_LO_VALUE_INIT : constant NvU32 := 16#ffff_ffff#;

    type LW_PRGNLCL_RISCV_MTIMECMP_LO_Register is record
        Value : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_MTIMECMP_LO_Register use record
        Value at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_RISCV_INTR_STATUS_S_SOFTWARE_INTR_INIT : constant NvU1 := 16#0#;
    LW_PRGNLCL_RISCV_INTR_STATUS_S_EXTERNAL_INTR_INT  : constant NvU1 := 16#0#;
    LW_PRGNLCL_RISCV_INTR_STATUS_S_TIMER_INTR_INIT    : constant NvU1 := 16#0#;
    LW_PRGNLCL_RISCV_INTR_STATUS_SOFTWARE_INTR_INIT   : constant NvU1 := 16#0#;
    LW_PRGNLCL_RISCV_INTR_STATUS_EXTERNAL_INTR_INT    : constant NvU1 := 16#0#;
    LW_PRGNLCL_RISCV_INTR_STATUS_TIMER_INTR_INIT      : constant NvU1 := 16#0#;
    LW_PRGNLCL_RISCV_INTR_STATUS_M_SOFTWARE_INTR_INIT : constant      := 16#0#;
    LW_PRGNLCL_RISCV_INTR_STATUS_M_EXTERNAL_INTR_INT  : constant      := 16#0#;
    LW_PRGNLCL_RISCV_INTR_STATUS_M_TIMER_INTR_INIT    : constant      := 16#0#;

    type LW_PRGNLCL_RISCV_INTR_STATUS_Register is record
        S_Software_Intr : NvU1;
        S_External_Intr : NvU1;
        S_Timer_Intr    : NvU1;
        Software_Intr   : NvU1;
        External_Intr   : NvU1;
        Timer_Intr      : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_INTR_STATUS_Register use record
        S_Software_Intr at 0 range 5 .. 5;
        S_External_Intr at 0 range 4 .. 4;
        S_Timer_Intr    at 0 range 3 .. 3;
        Software_Intr   at 0 range 2 .. 2;
        External_Intr   at 0 range 1 .. 1;
        Timer_Intr      at 0 range 0 .. 0;
    end record;

    type LW_PRGNLCL_RISCV_MSIP_VLD_Field is (VLD_FALSE, VLD_TRUE) with
        Size => 1;
    for LW_PRGNLCL_RISCV_MSIP_VLD_Field use (VLD_FALSE => 16#0#, VLD_TRUE => 16#1#);

    type LW_PRGNLCL_RISCV_MSIP_Register is record
        Vld : LW_PRGNLCL_RISCV_MSIP_VLD_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_MSIP_Register use record
        Vld at 0 range 0 .. 0;
    end record;

    type LW_PRGNLCL_RISCV_PRIV_ERR_STAT_VALID_Field is (VALID_FALSE, VALID_TRUE) with
        Size => 1;
    for LW_PRGNLCL_RISCV_PRIV_ERR_STAT_VALID_Field use (VALID_FALSE => 16#0#, VALID_TRUE => 16#1#);
    LW_PRGNLCL_RISCV_PRIV_ERR_STAT_RESERVED_INIT : constant NvU31 := 16#0#;

    type LW_PRGNLCL_RISCV_PRIV_ERR_STAT_Register is record
        Valid    : LW_PRGNLCL_RISCV_PRIV_ERR_STAT_VALID_Field;
        Reserved : NvU31;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_PRIV_ERR_STAT_Register use record
        Valid    at 0 range 31 .. 31;
        Reserved at 0 range  0 .. 30;
    end record;

    LW_PRGNLCL_RISCV_PRIV_ERR_INFO_ERROR_INFO_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_RISCV_PRIV_ERR_INFO_Register is record
        Error_Info : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_PRIV_ERR_INFO_Register use record
        Error_Info at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_RISCV_PRIV_ERR_ADDR_ADDR_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_RISCV_PRIV_ERR_ADDR_Register is record
        Addr : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_PRIV_ERR_ADDR_Register use record
        Addr at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_RISCV_PRIV_ERR_ADDR_HI_ADDR_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_RISCV_PRIV_ERR_ADDR_HI_Register is record
        Addr : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_PRIV_ERR_ADDR_HI_Register use record
        Addr at 0 range 0 .. 31;
    end record;

    type LW_PRGNLCL_RISCV_HUB_ERR_STAT_VALID_Field is (VALID_FALSE, VALID_TRUE) with
        Size => 1;
    for LW_PRGNLCL_RISCV_HUB_ERR_STAT_VALID_Field use (VALID_FALSE => 16#0#, VALID_TRUE => 16#1#);
    LW_PRGNLCL_RISCV_HUB_ERR_STAT_RESERVED_INIT : constant NvU31 := 16#0#;

    type LW_PRGNLCL_RISCV_HUB_ERR_STAT_Register is record
        Valid    : LW_PRGNLCL_RISCV_HUB_ERR_STAT_VALID_Field;
        Reserved : NvU31;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_HUB_ERR_STAT_Register use record
        Valid    at 0 range 31 .. 31;
        Reserved at 0 range  0 .. 30;
    end record;

    LW_PRGNLCL_RISCV_IROM_PATCH_CAM_INDEX_INDEX_INIT : constant NvU5 := 16#0#;

    type LW_PRGNLCL_RISCV_IROM_PATCH_CAM_INDEX_Register is record
        Index : NvU5;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_IROM_PATCH_CAM_INDEX_Register use record
        Index at 0 range 0 .. 4;
    end record;

    LW_PRGNLCL_RISCV_IROM_PATCH_CAM_ADDR_VALID_ADDR_INIT  : constant NvU18 := 16#0#;
    LW_PRGNLCL_RISCV_IROM_PATCH_CAM_ADDR_VALID_VALID_INIT : constant NvU1  := 16#0#;

    type LW_PRGNLCL_RISCV_IROM_PATCH_CAM_ADDR_VALID_Register is record
        Addr  : NvU18;
        Valid : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_IROM_PATCH_CAM_ADDR_VALID_Register use record
        Addr  at 0 range  0 .. 17;
        Valid at 0 range 31 .. 31;
    end record;

    LW_PRGNLCL_RISCV_IROM_PATCH_CAM_DATA_DATA_INIT : constant NvU16 := 16#0#;

    type LW_PRGNLCL_RISCV_IROM_PATCH_CAM_DATA_Register is record
        Data : NvU16;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_IROM_PATCH_CAM_DATA_Register use record
        Data at 0 range 0 .. 15;
    end record;

    LW_PRGNLCL_RISCV_IROM_PATCH_SECURE_IPATCH_LOCK_INIT : constant NvU1 := 16#1#;

    type LW_PRGNLCL_RISCV_IROM_PATCH_SECURE_Register is record
        Ipatch_Lock : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_IROM_PATCH_SECURE_Register use record
        Ipatch_Lock at 0 range 0 .. 0;
    end record;

    LW_PRGNLCL_RISCV_IOPMP_INDEX_VAL_INIT : constant NvU5 := 16#0#;

    type LW_PRGNLCL_RISCV_IOPMP_INDEX_Register is record
        Val : NvU5;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_IOPMP_INDEX_Register use record
        Val at 0 range 0 .. 4;
    end record;

    type LW_PRGNLCL_RISCV_IOPMP_CFG_READ_Field is (READ_DISABLE, READ_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IOPMP_CFG_READ_Field use (READ_DISABLE => 16#0#, READ_ENABLE => 16#1#);
    type LW_PRGNLCL_RISCV_IOPMP_CFG_WRITE_Field is (WRITE_DISABLE, WRITE_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IOPMP_CFG_WRITE_Field use (WRITE_DISABLE => 16#0#, WRITE_ENABLE => 16#1#);
    LW_PRGNLCL_RISCV_IOPMP_CFG_MASTER_ALL_MASTERS_ENABLED : constant NvU12 := 16#ff7#;
    type LW_PRGNLCL_RISCV_IOPMP_CFG_LOCK_Field is (LOCK_UNLOCKED, LOCK_LOCKED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IOPMP_CFG_LOCK_Field use (LOCK_UNLOCKED => 16#0#, LOCK_LOCKED => 16#1#);
    LW_PRGNLCL_RISCV_IOPMP_CFG_MASTER_FBDMA_ENABLE  : constant := 16#1#;
    LW_PRGNLCL_RISCV_IOPMP_CFG_MASTER_FBDMA_DISABLE : constant := 16#0#;
    LW_PRGNLCL_RISCV_IOPMP_CFG_MASTER_CPDMA_ENABLE  : constant := 16#1#;
    LW_PRGNLCL_RISCV_IOPMP_CFG_MASTER_CPDMA_DISABLE : constant := 16#0#;
    LW_PRGNLCL_RISCV_IOPMP_CFG_MASTER_SHA_ENABLE    : constant := 16#1#;
    LW_PRGNLCL_RISCV_IOPMP_CFG_MASTER_SHA_DISABLE   : constant := 16#0#;
    LW_PRGNLCL_RISCV_IOPMP_CFG_MASTER_PMB_ENABLE    : constant := 16#1#;
    LW_PRGNLCL_RISCV_IOPMP_CFG_MASTER_PMB_DISABLE   : constant := 16#0#;

    type LW_PRGNLCL_RISCV_IOPMP_CFG_Register is record
        Read   : LW_PRGNLCL_RISCV_IOPMP_CFG_READ_Field;
        Write  : LW_PRGNLCL_RISCV_IOPMP_CFG_WRITE_Field;
        Master : NvU12;
        Lock   : LW_PRGNLCL_RISCV_IOPMP_CFG_LOCK_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_IOPMP_CFG_Register use record
        Read   at 0 range  0 ..  0;
        Write  at 0 range  1 ..  1;
        Master at 0 range  4 .. 15;
        Lock   at 0 range 31 .. 31;
    end record;

    LW_PRGNLCL_RISCV_IOPMP_ADDR_HI_VAL_INIT : constant NvU29 := 16#0#;

    type LW_PRGNLCL_RISCV_IOPMP_ADDR_HI_Register is record
        Val : NvU29;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_IOPMP_ADDR_HI_Register use record
        Val at 0 range 0 .. 28;
    end record;

    LW_PRGNLCL_RISCV_IOPMP_ADDR_LO_ABOVE1K_INIT : constant NvU25 := 16#0#;
    LW_PRGNLCL_RISCV_IOPMP_ADDR_LO_LO_1K_INIT   : constant NvU7  := 16#7f#;

    type LW_PRGNLCL_RISCV_IOPMP_ADDR_LO_Register is record
        Above1k : NvU25;
        Lo_1k   : NvU7;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_IOPMP_ADDR_LO_Register use record
        Above1k at 0 range 7 .. 31;
        Lo_1k   at 0 range 0 ..  6;
    end record;

    LW_PRGNLCL_RISCV_IOPMP_MODE_VAL_INIT        : constant NvU32 := 16#0#;
    LW_PRGNLCL_RISCV_IOPMP_MODE_VAL_ENTRY_OFF   : constant       := 16#0#;
    LW_PRGNLCL_RISCV_IOPMP_MODE_VAL_ENTRY_NAPOT : constant       := 16#3#;

    type LW_PRGNLCL_RISCV_IOPMP_MODE_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_IOPMP_MODE_Register use record
        Val at 0 range 0 .. 31;
    end record;

    type LW_PRGNLCL_RISCV_IOPMP_ERR_STAT_VALID_Field is (VALID_FALSE, VALID_TURE) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IOPMP_ERR_STAT_VALID_Field use (VALID_FALSE => 16#0#, VALID_TURE => 16#1#);

    type LW_PRGNLCL_RISCV_IOPMP_ERR_STAT_Register is record
        Valid : LW_PRGNLCL_RISCV_IOPMP_ERR_STAT_VALID_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_IOPMP_ERR_STAT_Register use record
        Valid at 0 range 31 .. 31;
    end record;

    type LW_PRGNLCL_RISCV_IOPMP_ERR_INFO_MASTER_Field is
        (MASTER_FBDMA, MASTER_CPDMA, MASTER_SHA, MASTER_PMB0, MASTER_PMB1, MASTER_PMB2, MASTER_PMB3, MASTER_PMB4, MASTER_PMB5, MASTER_PMB6, MASTER_PMB7) with
        Size => 4;
    for LW_PRGNLCL_RISCV_IOPMP_ERR_INFO_MASTER_Field use (MASTER_FBDMA => 16#0#, MASTER_CPDMA => 16#1#, MASTER_SHA => 16#2#, MASTER_PMB0 => 16#4#, MASTER_PMB1 => 16#5#,
         MASTER_PMB2 => 16#6#, MASTER_PMB3 => 16#7#, MASTER_PMB4 => 16#8#, MASTER_PMB5 => 16#9#, MASTER_PMB6 => 16#a#, MASTER_PMB7 => 16#b#);
    type LW_PRGNLCL_RISCV_IOPMP_ERR_INFO_READ_Field is (READ_FALSE, READ_TRUE) with
        Size => 1;
    for LW_PRGNLCL_RISCV_IOPMP_ERR_INFO_READ_Field use (READ_FALSE => 16#0#, READ_TRUE => 16#1#);
    LW_PRGNLCL_RISCV_IOPMP_ERR_INFO_INFO_ENTRY_INIT : constant NvU6 := 16#0#;

    type LW_PRGNLCL_RISCV_IOPMP_ERR_INFO_Register is record
        Master     : LW_PRGNLCL_RISCV_IOPMP_ERR_INFO_MASTER_Field;
        Read       : LW_PRGNLCL_RISCV_IOPMP_ERR_INFO_READ_Field;
        Info_Entry : NvU6;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_IOPMP_ERR_INFO_Register use record
        Master     at 0 range  0 ..  3;
        Read       at 0 range  4 ..  4;
        Info_Entry at 0 range 16 .. 21;
    end record;

    LW_PRGNLCL_RISCV_IOPMP_ERR_ADDR_HI_ADDR_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_RISCV_IOPMP_ERR_ADDR_HI_Register is record
        Addr : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_IOPMP_ERR_ADDR_HI_Register use record
        Addr at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_RISCV_IOPMP_ERR_ADDR_LO_ADDR_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_RISCV_IOPMP_ERR_ADDR_LO_Register is record
        Addr : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_IOPMP_ERR_ADDR_LO_Register use record
        Addr at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_RISCV_IOPMP_ERR_CAPEN_MASTER_ALL_MASTERS_ENABLED : constant NvU12 := 16#fff#;
    LW_PRGNLCL_RISCV_IOPMP_ERR_CAPEN_MASTER_FBDMA_ENABLE        : constant       := 16#1#;
    LW_PRGNLCL_RISCV_IOPMP_ERR_CAPEN_MASTER_FBDMA_DISABLE       : constant       := 16#0#;
    LW_PRGNLCL_RISCV_IOPMP_ERR_CAPEN_MASTER_CPDMA_ENABLE        : constant       := 16#1#;
    LW_PRGNLCL_RISCV_IOPMP_ERR_CAPEN_MASTER_CPDMA_DISABLE       : constant       := 16#0#;
    LW_PRGNLCL_RISCV_IOPMP_ERR_CAPEN_MASTER_SHA_ENABLE          : constant       := 16#1#;
    LW_PRGNLCL_RISCV_IOPMP_ERR_CAPEN_MASTER_SHA_DISABLE         : constant       := 16#0#;
    LW_PRGNLCL_RISCV_IOPMP_ERR_CAPEN_MASTER_PMB_ENABLE          : constant       := 16#1#;
    LW_PRGNLCL_RISCV_IOPMP_ERR_CAPEN_MASTER_PMB_DISABLE         : constant       := 16#0#;

    type LW_PRGNLCL_RISCV_IOPMP_ERR_CAPEN_Register is record
        Master : NvU12;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_IOPMP_ERR_CAPEN_Register use record
        Master at 0 range 0 .. 11;
    end record;

    LW_PRGNLCL_RISCV_SCPDMATRFMOFFS_OFFS_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_RISCV_SCPDMATRFMOFFS_Register is record
        Offs : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_SCPDMATRFMOFFS_Register use record
        Offs at 0 range 0 .. 31;
    end record;

    type LW_PRGNLCL_RISCV_SCPDMATRFCMD_SUPPRESS_Field is (SUPPRESS_DISABLE, SUPPRESS_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_RISCV_SCPDMATRFCMD_SUPPRESS_Field use (SUPPRESS_DISABLE => 16#0#, SUPPRESS_ENABLE => 16#1#);
    type LW_PRGNLCL_RISCV_SCPDMATRFCMD_SHORTCUT_Field is (SHORTCUT_DISABLE, SHORTCUT_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_RISCV_SCPDMATRFCMD_SHORTCUT_Field use (SHORTCUT_DISABLE => 16#0#, SHORTCUT_ENABLE => 16#1#);
    type LW_PRGNLCL_RISCV_SCPDMATRFCMD_IMEM_Field is (IMEM_FALSE, IMEM_TRUE) with
        Size => 1;
    for LW_PRGNLCL_RISCV_SCPDMATRFCMD_IMEM_Field use (IMEM_FALSE => 16#0#, IMEM_TRUE => 16#1#);
    type LW_PRGNLCL_RISCV_SCPDMATRFCMD_WRITE_Field is (WRITE_FALSE, WRITE_TRUE) with
        Size => 1;
    for LW_PRGNLCL_RISCV_SCPDMATRFCMD_WRITE_Field use (WRITE_FALSE => 16#0#, WRITE_TRUE => 16#1#);
    LW_PRGNLCL_RISCV_SCPDMATRFCMD_GPR_INIT : constant NvU3 := 16#0#;
    type LW_PRGNLCL_RISCV_SCPDMATRFCMD_CCI_EX_Field is (EX_SCPDMA, EX_CCI) with
        Size => 1;
    for LW_PRGNLCL_RISCV_SCPDMATRFCMD_CCI_EX_Field use (EX_SCPDMA => 16#0#, EX_CCI => 16#1#);
    LW_PRGNLCL_RISCV_SCPDMATRFCMD_CCI_CMD_INIT       : constant NvU16 := 16#0#;
    LW_PRGNLCL_RISCV_SCPDMATRFCMD_SIZE_16B           : constant       := 16#2#;
    LW_PRGNLCL_RISCV_SCPDMATRFCMD_SIZE_32B           : constant       := 16#3#;
    LW_PRGNLCL_RISCV_SCPDMATRFCMD_SIZE_64B           : constant       := 16#4#;
    LW_PRGNLCL_RISCV_SCPDMATRFCMD_SIZE_128B          : constant       := 16#5#;
    LW_PRGNLCL_RISCV_SCPDMATRFCMD_SIZE_256B          : constant       := 16#6#;
    LW_PRGNLCL_RISCV_SCPDMATRFCMD_OPCODE_NOP         : constant       := 16#0#;
    LW_PRGNLCL_RISCV_SCPDMATRFCMD_OPCODE_MOV         : constant       := 16#1#;
    LW_PRGNLCL_RISCV_SCPDMATRFCMD_OPCODE_PUSH        : constant       := 16#2#;
    LW_PRGNLCL_RISCV_SCPDMATRFCMD_OPCODE_FETCH       : constant       := 16#3#;
    LW_PRGNLCL_RISCV_SCPDMATRFCMD_OPCODE_RAND        : constant       := 16#4#;
    LW_PRGNLCL_RISCV_SCPDMATRFCMD_OPCODE_LOAD_TRACE0 : constant       := 16#5#;
    LW_PRGNLCL_RISCV_SCPDMATRFCMD_OPCODE_LOOP_TRACE0 : constant       := 16#6#;
    LW_PRGNLCL_RISCV_SCPDMATRFCMD_OPCODE_LOAD_TRACE1 : constant       := 16#7#;
    LW_PRGNLCL_RISCV_SCPDMATRFCMD_OPCODE_LOOP_TRACE1 : constant       := 16#8#;
    LW_PRGNLCL_RISCV_SCPDMATRFCMD_OPCODE_CHMOD       : constant       := 16#a#;
    LW_PRGNLCL_RISCV_SCPDMATRFCMD_OPCODE_XOR         : constant       := 16#b#;
    LW_PRGNLCL_RISCV_SCPDMATRFCMD_OPCODE_ADD         : constant       := 16#c#;
    LW_PRGNLCL_RISCV_SCPDMATRFCMD_OPCODE_AND         : constant       := 16#d#;
    LW_PRGNLCL_RISCV_SCPDMATRFCMD_OPCODE_BSWAP       : constant       := 16#e#;
    LW_PRGNLCL_RISCV_SCPDMATRFCMD_OPCODE_CMAC_SK     : constant       := 16#f#;
    LW_PRGNLCL_RISCV_SCPDMATRFCMD_OPCODE_SECRET      : constant       := 16#10#;
    LW_PRGNLCL_RISCV_SCPDMATRFCMD_OPCODE_KEY         : constant       := 16#11#;
    LW_PRGNLCL_RISCV_SCPDMATRFCMD_OPCODE_RKEY10      : constant       := 16#12#;
    LW_PRGNLCL_RISCV_SCPDMATRFCMD_OPCODE_RKEY1       : constant       := 16#13#;
    LW_PRGNLCL_RISCV_SCPDMATRFCMD_OPCODE_ENCRYPT     : constant       := 16#14#;
    LW_PRGNLCL_RISCV_SCPDMATRFCMD_OPCODE_DECRYPT     : constant       := 16#15#;
    LW_PRGNLCL_RISCV_SCPDMATRFCMD_OPCODE_COMPARE_SIG : constant       := 16#16#;
    LW_PRGNLCL_RISCV_SCPDMATRFCMD_OPCODE_ENCRYPT_SIG : constant       := 16#17#;
    LW_PRGNLCL_RISCV_SCPDMATRFCMD_OPCODE_FORGET_SIG  : constant       := 16#18#;

    type LW_PRGNLCL_RISCV_SCPDMATRFCMD_Register is record
        Suppress : LW_PRGNLCL_RISCV_SCPDMATRFCMD_SUPPRESS_Field;
        Shortcut : LW_PRGNLCL_RISCV_SCPDMATRFCMD_SHORTCUT_Field;
        Imem     : LW_PRGNLCL_RISCV_SCPDMATRFCMD_IMEM_Field;
        Write    : LW_PRGNLCL_RISCV_SCPDMATRFCMD_WRITE_Field;
        Gpr      : NvU3;
        Cci_Ex   : LW_PRGNLCL_RISCV_SCPDMATRFCMD_CCI_EX_Field;
        Cci_Cmd  : NvU16;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_SCPDMATRFCMD_Register use record
        Suppress at 0 range  2 ..  2;
        Shortcut at 0 range  3 ..  3;
        Imem     at 0 range  4 ..  4;
        Write    at 0 range  5 ..  5;
        Gpr      at 0 range  6 ..  8;
        Cci_Ex   at 0 range 15 .. 15;
        Cci_Cmd  at 0 range 16 .. 31;
    end record;

    type LW_PRGNLCL_RISCV_SCPDMAPOLL_DMA_ACTIVE_Field is (ACTIVE_IDLE, ACTIVE_ACTIVE) with
        Size => 1;
    for LW_PRGNLCL_RISCV_SCPDMAPOLL_DMA_ACTIVE_Field use (ACTIVE_IDLE => 16#0#, ACTIVE_ACTIVE => 16#1#);
    type LW_PRGNLCL_RISCV_SCPDMAPOLL_ERROR_CODE_Field is (CODE_NO_ERROR, CODE_NOT_SIZE_ALIGNED, CODE_SECRET_NOT_ALLOWED) with
        Size => 2;
    for LW_PRGNLCL_RISCV_SCPDMAPOLL_ERROR_CODE_Field use (CODE_NO_ERROR => 16#0#, CODE_NOT_SIZE_ALIGNED => 16#1#, CODE_SECRET_NOT_ALLOWED => 16#2#);
    LW_PRGNLCL_RISCV_SCPDMAPOLL_WCOUNT_INIT   : constant NvU4 := 16#0#;
    LW_PRGNLCL_RISCV_SCPDMAPOLL_RCOUNT_INIT   : constant NvU4 := 16#0#;
    LW_PRGNLCL_RISCV_SCPDMAPOLL_REQQ_NUM_INIT : constant NvU4 := 16#0#;

    type LW_PRGNLCL_RISCV_SCPDMAPOLL_Register is record
        Dma_Active : LW_PRGNLCL_RISCV_SCPDMAPOLL_DMA_ACTIVE_Field;
        Error_Clr  : NvU1;
        Error_Code : LW_PRGNLCL_RISCV_SCPDMAPOLL_ERROR_CODE_Field;
        Wcount     : NvU4;
        Rcount     : NvU4;
        Reqq_Num   : NvU4;
        Reqq_Depth : NvU4;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_SCPDMAPOLL_Register use record
        Dma_Active at 0 range  0 ..  0;
        Error_Clr  at 0 range  4 ..  4;
        Error_Code at 0 range  8 ..  9;
        Wcount     at 0 range 16 .. 19;
        Rcount     at 0 range 20 .. 23;
        Reqq_Num   at 0 range 24 .. 27;
        Reqq_Depth at 0 range 28 .. 31;
    end record;

    LW_PRGNLCL_RISCV_SCP_SECRET_MASK_VAL_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_RISCV_SCP_SECRET_MASK_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_SCP_SECRET_MASK_Register use record
        Val at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_RISCV_SCP_SECRET_MASK_LOCK_VAL_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_RISCV_SCP_SECRET_MASK_LOCK_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_SCP_SECRET_MASK_LOCK_Register use record
        Val at 0 range 0 .. 31;
    end record;

    type LW_PRGNLCL_RISCV_BR_VER_Register is record
        Dev   : NvU12;
        Eco   : NvU4;
        Minor : NvU8;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_BR_VER_Register use record
        Dev   at 0 range  0 .. 11;
        Eco   at 0 range 12 .. 15;
        Minor at 0 range 16 .. 23;
    end record;

    type LW_PRGNLCL_RISCV_BR_RETCODE_RESULT_Field is (RESULT_INIT, RESULT_RUNNING, RESULT_FAIL, RESULT_PASS) with
        Size => 2;
    for LW_PRGNLCL_RISCV_BR_RETCODE_RESULT_Field use (RESULT_INIT => 16#0#, RESULT_RUNNING => 16#1#, RESULT_FAIL => 16#2#, RESULT_PASS => 16#3#);
    LW_PRGNLCL_RISCV_BR_RETCODE_PHASE_ENTRY                                  : constant NvU6  := 16#0#;
    LW_PRGNLCL_RISCV_BR_RETCODE_PHASE_INIT_DEVICE                            : constant NvU6  := 16#1#;
    LW_PRGNLCL_RISCV_BR_RETCODE_PHASE_LOAD_PUBLIC_KEY                        : constant NvU6  := 16#2#;
    LW_PRGNLCL_RISCV_BR_RETCODE_PHASE_LOAD_PKC_BOOT_PARAM                    : constant NvU6  := 16#3#;
    LW_PRGNLCL_RISCV_BR_RETCODE_PHASE_SHA_MANIFEST                           : constant NvU6  := 16#4#;
    LW_PRGNLCL_RISCV_BR_RETCODE_PHASE_VERIFY_MANIFEST_SIGNATURE              : constant NvU6  := 16#5#;
    LW_PRGNLCL_RISCV_BR_RETCODE_PHASE_DECRYPT_MANIFEST                       : constant NvU6  := 16#6#;
    LW_PRGNLCL_RISCV_BR_RETCODE_PHASE_SANITIZE_MANIFEST                      : constant NvU6  := 16#7#;
    LW_PRGNLCL_RISCV_BR_RETCODE_PHASE_LOAD_FMC                               : constant NvU6  := 16#8#;
    LW_PRGNLCL_RISCV_BR_RETCODE_PHASE_VERIFY_FMC_DIGEST                      : constant NvU6  := 16#9#;
    LW_PRGNLCL_RISCV_BR_RETCODE_PHASE_DECRYPT_FMC                            : constant NvU6  := 16#a#;
    LW_PRGNLCL_RISCV_BR_RETCODE_PHASE_DECRYPT_FUSEKEY                        : constant NvU6  := 16#b#;
    LW_PRGNLCL_RISCV_BR_RETCODE_PHASE_REVOKE_RESOURCE                        : constant NvU6  := 16#c#;
    LW_PRGNLCL_RISCV_BR_RETCODE_PHASE_CONFIGURE_FMC_ENV                      : constant NvU6  := 16#d#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_INIT                                : constant NvU10 := 16#0#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_DMA_FB_ADDRESS_ERROR                : constant NvU10 := 16#20#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_DMA_NACK_ERROR                      : constant NvU10 := 16#21#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_DMA_LOCK_ERROR                      : constant NvU10 := 16#22#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_DMA_TARGET_ERROR                    : constant NvU10 := 16#23#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_SHA_ACQUIRE_MUTEX_ERROR             : constant NvU10 := 16#40#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_SHA_EXECUTION_ERROR                 : constant NvU10 := 16#41#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_SHA_RESET_ERROR                     : constant NvU10 := 16#42#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_DIO_READ_ERROR                      : constant NvU10 := 16#60#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_DIO_WRITE_ERROR                     : constant NvU10 := 16#61#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_SE_PDI_INVALID_ERROR                : constant NvU10 := 16#80#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_SE_PKEYHASH_INVALID_ERROR           : constant NvU10 := 16#81#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_SW_PKEY_DIGEST_ERROR                : constant NvU10 := 16#82#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_SE_PKA_RETURN_CODE_ERROR            : constant NvU10 := 16#83#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_SE_PKA_RESET_ERROR                  : constant NvU10 := 16#84#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_SE_PKA_DMEM_PARITY_ERROR            : constant NvU10 := 16#85#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_SCP_LOAD_SECRET_ERROR               : constant NvU10 := 16#a0#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_SCP_TRAPPED_DMA_NOT_ALIGNED_ERROR   : constant NvU10 := 16#a1#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_MANIFEST_CODE_SIZE_ERROR            : constant NvU10 := 16#c0#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_MANIFEST_CORE_PMP_RESERVATION_ERROR : constant NvU10 := 16#c1#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_MANIFEST_DATA_SIZE_ERROR            : constant NvU10 := 16#c2#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_MANIFEST_DEVICEMAP_BR_UNLOCK_ERROR  : constant NvU10 := 16#c3#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_MANIFEST_FAMILY_ID_ERROR            : constant NvU10 := 16#c4#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_MANIFEST_MSPM_VALUE_ERROR           : constant NvU10 := 16#c5#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_MANIFEST_PAD_INFO_MASK_ERROR        : constant NvU10 := 16#c6#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_MANIFEST_REG_PAIR_ADDRESS_ERROR     : constant NvU10 := 16#c7#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_MANIFEST_REG_PAIR_ENTRY_NUM_ERROR   : constant NvU10 := 16#c8#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_MANIFEST_SECRET_MASK_ERROR          : constant NvU10 := 16#c9#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_MANIFEST_SECRET_MASK_LOCK_ERROR     : constant NvU10 := 16#ca#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_MANIFEST_SIGNATURE_ERROR            : constant NvU10 := 16#cb#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_MANIFEST_UCODE_ID_ERROR             : constant NvU10 := 16#cc#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_MANIFEST_UCODE_VERSION_ERROR        : constant NvU10 := 16#cd#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_FMC_DIGEST_ERROR                    : constant NvU10 := 16#e0#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_FUSEKEY_BAD_HEADER_ERROR            : constant NvU10 := 16#100#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_FUSEKEY_KEYGLOB_INVALID_ERROR       : constant NvU10 := 16#101#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_FUSEKEY_PROTECT_INFO_ERROR          : constant NvU10 := 16#102#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_FUSEKEY_SIGNATURE_ERROR             : constant NvU10 := 16#103#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_KMEM_DISPOSE_KSLOT_ERROR            : constant NvU10 := 16#120#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_KMEM_KEY_SLOT_K3_ERROR              : constant NvU10 := 16#121#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_KMEM_LOAD_KSLOT2SCP_ERROR           : constant NvU10 := 16#122#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_KMEM_READ_ERROR                     : constant NvU10 := 16#123#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_KMEM_WRITE_ERROR                    : constant NvU10 := 16#124#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_IOPMP_ERROR                         : constant NvU10 := 16#141#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_MMIO_ERROR                          : constant NvU10 := 16#142#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_CRITICAL_ERROR                      : constant NvU10 := 16#3e0#;
    LW_PRGNLCL_RISCV_BR_RETCODE_SYNDROME_OK                                  : constant NvU10 := 16#3ff#;
    LW_PRGNLCL_RISCV_BR_RETCODE_INFO_INIT                                    : constant NvU14 := 16#0#;
    LW_PRGNLCL_RISCV_BR_RETCODE_INFO_DMA_WAIT_FOR_IDLE_HANG                  : constant NvU14 := 16#1#;
    LW_PRGNLCL_RISCV_BR_RETCODE_INFO_SHA_HANG                                : constant NvU14 := 16#2#;
    LW_PRGNLCL_RISCV_BR_RETCODE_INFO_DIO_READ_HANG                           : constant NvU14 := 16#4#;
    LW_PRGNLCL_RISCV_BR_RETCODE_INFO_DIO_WAIT_FREE_ENTRY_HANG                : constant NvU14 := 16#8#;
    LW_PRGNLCL_RISCV_BR_RETCODE_INFO_DIO_WRITE_HANG                          : constant NvU14 := 16#10#;
    LW_PRGNLCL_RISCV_BR_RETCODE_INFO_SE_ACQUIRE_MUTEX_HANG                   : constant NvU14 := 16#20#;
    LW_PRGNLCL_RISCV_BR_RETCODE_INFO_SE_PDI_LOAD_HANG                        : constant NvU14 := 16#40#;
    LW_PRGNLCL_RISCV_BR_RETCODE_INFO_SE_PKEYHASH_LOAD_HANG                   : constant NvU14 := 16#80#;
    LW_PRGNLCL_RISCV_BR_RETCODE_INFO_PKA_POLL_RESULT_HANG                    : constant NvU14 := 16#100#;
    LW_PRGNLCL_RISCV_BR_RETCODE_INFO_SCP_PIPELINE_RESET_HANG                 : constant NvU14 := 16#200#;
    LW_PRGNLCL_RISCV_BR_RETCODE_INFO_TRAPPED_DMA_HANG                        : constant NvU14 := 16#400#;
    LW_PRGNLCL_RISCV_BR_RETCODE_INFO_FUSEKEY_KEYGLOB_LOAD_HANG               : constant NvU14 := 16#800#;
    LW_PRGNLCL_RISCV_BR_RETCODE_INFO_KMEM_CMD_EXECUTE_HANG                   : constant NvU14 := 16#1000#;

    type LW_PRGNLCL_RISCV_BR_RETCODE_Register is record
        Result   : LW_PRGNLCL_RISCV_BR_RETCODE_RESULT_Field;
        Phase    : NvU6;
        Syndrome : NvU10;
        Info     : NvU14;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_BR_RETCODE_Register use record
        Result   at 0 range  0 ..  1;
        Phase    at 0 range  2 ..  7;
        Syndrome at 0 range  8 .. 17;
        Info     at 0 range 18 .. 31;
    end record;

    type LW_PRGNLCL_RISCV_BR_PRIV_LOCKDOWN_LOCK_Field is (LOCK_UNLOCKED, LOCK_LOCKED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_BR_PRIV_LOCKDOWN_LOCK_Field use (LOCK_UNLOCKED => 16#0#, LOCK_LOCKED => 16#1#);

    type LW_PRGNLCL_RISCV_BR_PRIV_LOCKDOWN_Register is record
        Lock : LW_PRGNLCL_RISCV_BR_PRIV_LOCKDOWN_LOCK_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_BR_PRIV_LOCKDOWN_Register use record
        Lock at 0 range 0 .. 0;
    end record;

    type LW_PRGNLCL_RISCV_BCR_CTRL_VALID_Field is (VALID_FALSE, VALID_TRUE) with
        Size => 1;
    for LW_PRGNLCL_RISCV_BCR_CTRL_VALID_Field use (VALID_FALSE => 16#0#, VALID_TRUE => 16#1#);
    type LW_PRGNLCL_RISCV_BCR_CTRL_CORE_SELECT_Field is (SELECT_FALCON, SELECT_RISCV) with
        Size => 1;
    for LW_PRGNLCL_RISCV_BCR_CTRL_CORE_SELECT_Field use (SELECT_FALCON => 16#0#, SELECT_RISCV => 16#1#);
    type LW_PRGNLCL_RISCV_BCR_CTRL_BRFETCH_Field is (BRFETCH_FALSE, BRFETCH_TRUE) with
        Size => 1;
    for LW_PRGNLCL_RISCV_BCR_CTRL_BRFETCH_Field use (BRFETCH_FALSE => 16#0#, BRFETCH_TRUE => 16#1#);

    type LW_PRGNLCL_RISCV_BCR_CTRL_Register is record
        Valid       : LW_PRGNLCL_RISCV_BCR_CTRL_VALID_Field;
        Core_Select : LW_PRGNLCL_RISCV_BCR_CTRL_CORE_SELECT_Field;
        Brfetch     : LW_PRGNLCL_RISCV_BCR_CTRL_BRFETCH_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_BCR_CTRL_Register use record
        Valid       at 0 range 0 .. 0;
        Core_Select at 0 range 4 .. 4;
        Brfetch     at 0 range 8 .. 8;
    end record;

    type LW_PRGNLCL_RISCV_BCR_DMACFG_TARGET_Field is (TARGET_LOCAL_FB, TARGET_COHERENT_SYSMEM, TARGET_NONCOHERENT_SYSMEM) with
        Size => 2;
    for LW_PRGNLCL_RISCV_BCR_DMACFG_TARGET_Field use (TARGET_LOCAL_FB => 16#0#, TARGET_COHERENT_SYSMEM => 16#1#, TARGET_NONCOHERENT_SYSMEM => 16#2#);
    type LW_PRGNLCL_RISCV_BCR_DMACFG_LOCK_Field is (LOCK_UNLOCKED, LOCK_LOCKED) with
        Size => 1;
    for LW_PRGNLCL_RISCV_BCR_DMACFG_LOCK_Field use (LOCK_UNLOCKED => 16#0#, LOCK_LOCKED => 16#1#);

    type LW_PRGNLCL_RISCV_BCR_DMACFG_Register is record
        Target : LW_PRGNLCL_RISCV_BCR_DMACFG_TARGET_Field;
        Lock   : LW_PRGNLCL_RISCV_BCR_DMACFG_LOCK_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_BCR_DMACFG_Register use record
        Target at 0 range  0 ..  1;
        Lock   at 0 range 31 .. 31;
    end record;

    LW_PRGNLCL_RISCV_BCR_DMACFG_SEC_WPRID_INIT : constant NvU2 := 16#0#;
    LW_PRGNLCL_RISCV_BCR_DMACFG_SEC_GSCID_INIT : constant NvU5 := 16#0#;

    type LW_PRGNLCL_RISCV_BCR_DMACFG_SEC_Register is record
        Wprid : NvU2;
        Gscid : NvU5;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_BCR_DMACFG_SEC_Register use record
        Wprid at 0 range  0 ..  1;
        Gscid at 0 range 16 .. 20;
    end record;

    LW_PRGNLCL_RISCV_BCR_DMAADDR_PKCPARAM_LO_VAL_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_RISCV_BCR_DMAADDR_PKCPARAM_LO_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_BCR_DMAADDR_PKCPARAM_LO_Register use record
        Val at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_RISCV_BCR_DMAADDR_PKCPARAM_HI_VAL_INIT : constant NvU7 := 16#0#;

    type LW_PRGNLCL_RISCV_BCR_DMAADDR_PKCPARAM_HI_Register is record
        Val : NvU7;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_BCR_DMAADDR_PKCPARAM_HI_Register use record
        Val at 0 range 0 .. 6;
    end record;

    LW_PRGNLCL_RISCV_BCR_DMAADDR_FMCCODE_LO_VAL_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_RISCV_BCR_DMAADDR_FMCCODE_LO_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_BCR_DMAADDR_FMCCODE_LO_Register use record
        Val at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_RISCV_BCR_DMAADDR_FMCCODE_HI_VAL_INIT : constant NvU7 := 16#0#;

    type LW_PRGNLCL_RISCV_BCR_DMAADDR_FMCCODE_HI_Register is record
        Val : NvU7;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_BCR_DMAADDR_FMCCODE_HI_Register use record
        Val at 0 range 0 .. 6;
    end record;

    LW_PRGNLCL_RISCV_BCR_DMAADDR_FMCDATA_LO_VAL_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_RISCV_BCR_DMAADDR_FMCDATA_LO_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_BCR_DMAADDR_FMCDATA_LO_Register use record
        Val at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_RISCV_BCR_DMAADDR_FMCDATA_HI_VAL_INIT : constant NvU7 := 16#0#;

    type LW_PRGNLCL_RISCV_BCR_DMAADDR_FMCDATA_HI_Register is record
        Val : NvU7;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_BCR_DMAADDR_FMCDATA_HI_Register use record
        Val at 0 range 0 .. 6;
    end record;

    LW_PRGNLCL_RISCV_BCR_DMAADDR_PUBKEY_LO_VAL_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_RISCV_BCR_DMAADDR_PUBKEY_LO_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_BCR_DMAADDR_PUBKEY_LO_Register use record
        Val at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_RISCV_BCR_DMAADDR_PUBKEY_HI_VAL_INIT : constant NvU7 := 16#0#;

    type LW_PRGNLCL_RISCV_BCR_DMAADDR_PUBKEY_HI_Register is record
        Val : NvU7;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_BCR_DMAADDR_PUBKEY_HI_Register use record
        Val at 0 range 0 .. 6;
    end record;

    LW_PRGNLCL_RISCV_DEVICEMAP_RISCVMMODE_VAL_INIT      : constant NvU32 := 16#3333_3333#;
    LW_PRGNLCL_RISCV_DEVICEMAP_RISCVMMODE_READ_ENABLE   : constant       := 16#1#;
    LW_PRGNLCL_RISCV_DEVICEMAP_RISCVMMODE_READ_DISABLE  : constant       := 16#0#;
    LW_PRGNLCL_RISCV_DEVICEMAP_RISCVMMODE_WRITE_ENABLE  : constant       := 16#1#;
    LW_PRGNLCL_RISCV_DEVICEMAP_RISCVMMODE_WRITE_DISABLE : constant       := 16#0#;
    LW_PRGNLCL_RISCV_DEVICEMAP_RISCVMMODE_LOCK_LOCKED   : constant       := 16#1#;
    LW_PRGNLCL_RISCV_DEVICEMAP_RISCVMMODE_LOCK_UNLOCKED : constant       := 16#0#;

    type LW_PRGNLCL_RISCV_DEVICEMAP_RISCVMMODE_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_DEVICEMAP_RISCVMMODE_Register use record
        Val at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_RISCV_DEVICEMAP_RISCVSUBMMODE_VAL_INIT      : constant NvU32 := 16#3333_3333#;
    LW_PRGNLCL_RISCV_DEVICEMAP_RISCVSUBMMODE_READ_ENABLE   : constant       := 16#1#;
    LW_PRGNLCL_RISCV_DEVICEMAP_RISCVSUBMMODE_READ_DISABLE  : constant       := 16#0#;
    LW_PRGNLCL_RISCV_DEVICEMAP_RISCVSUBMMODE_WRITE_ENABLE  : constant       := 16#1#;
    LW_PRGNLCL_RISCV_DEVICEMAP_RISCVSUBMMODE_WRITE_DISABLE : constant       := 16#0#;

    type LW_PRGNLCL_RISCV_DEVICEMAP_RISCVSUBMMODE_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_RISCV_DEVICEMAP_RISCVSUBMMODE_Register use record
        Val at 0 range 0 .. 31;
    end record;

    type LW_PRGNLCL_SCP_CTL0_CTL_EN_Field is (EN_DISABLED, EN_ENABLED) with
        Size => 1;
    for LW_PRGNLCL_SCP_CTL0_CTL_EN_Field use (EN_DISABLED => 16#0#, EN_ENABLED => 16#1#);
    type LW_PRGNLCL_SCP_CTL0_SEQ_EN_Field is (EN_DISABLED, EN_ENABLED) with
        Size => 1;
    for LW_PRGNLCL_SCP_CTL0_SEQ_EN_Field use (EN_DISABLED => 16#0#, EN_ENABLED => 16#1#);
    type LW_PRGNLCL_SCP_CTL0_SF_CMD_IFACE_EN_Field is (EN_DISABLED, EN_ENABLED) with
        Size => 1;
    for LW_PRGNLCL_SCP_CTL0_SF_CMD_IFACE_EN_Field use (EN_DISABLED => 16#0#, EN_ENABLED => 16#1#);
    type LW_PRGNLCL_SCP_CTL0_SF_PUSH_IFACE_EN_Field is (EN_DISABLED, EN_ENABLED) with
        Size => 1;
    for LW_PRGNLCL_SCP_CTL0_SF_PUSH_IFACE_EN_Field use (EN_DISABLED => 16#0#, EN_ENABLED => 16#1#);
    type LW_PRGNLCL_SCP_CTL0_SF_FETCH_IFACE_EN_Field is (EN_DISABLED, EN_ENABLED) with
        Size => 1;
    for LW_PRGNLCL_SCP_CTL0_SF_FETCH_IFACE_EN_Field use (EN_DISABLED => 16#0#, EN_ENABLED => 16#1#);

    type LW_PRGNLCL_SCP_CTL0_Register is record
        Ctl_En            : LW_PRGNLCL_SCP_CTL0_CTL_EN_Field;
        Seq_En            : LW_PRGNLCL_SCP_CTL0_SEQ_EN_Field;
        Sf_Cmd_Iface_En   : LW_PRGNLCL_SCP_CTL0_SF_CMD_IFACE_EN_Field;
        Sf_Push_Iface_En  : LW_PRGNLCL_SCP_CTL0_SF_PUSH_IFACE_EN_Field;
        Sf_Fetch_Iface_En : LW_PRGNLCL_SCP_CTL0_SF_FETCH_IFACE_EN_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SCP_CTL0_Register use record
        Ctl_En            at 0 range 20 .. 20;
        Seq_En            at 0 range 16 .. 16;
        Sf_Cmd_Iface_En   at 0 range 14 .. 14;
        Sf_Push_Iface_En  at 0 range 12 .. 12;
        Sf_Fetch_Iface_En at 0 range 10 .. 10;
    end record;

    type LW_PRGNLCL_SCP_CTL1_SF_PUSH_BYPASS_Field is (BYPASS_DISABLED, BYPASS_ENABLED) with
        Size => 1;
    for LW_PRGNLCL_SCP_CTL1_SF_PUSH_BYPASS_Field use (BYPASS_DISABLED => 16#0#, BYPASS_ENABLED => 16#1#);
    type LW_PRGNLCL_SCP_CTL1_SF_FETCH_BYPASS_Field is (BYPASS_DISABLED, BYPASS_ENABLED) with
        Size => 1;
    for LW_PRGNLCL_SCP_CTL1_SF_FETCH_BYPASS_Field use (BYPASS_DISABLED => 16#0#, BYPASS_ENABLED => 16#1#);
    type LW_PRGNLCL_SCP_CTL1_SF_FETCH_AS_ZERO_Field is (ZERO_DISABLED, ZERO_ENABLED) with
        Size => 1;
    for LW_PRGNLCL_SCP_CTL1_SF_FETCH_AS_ZERO_Field use (ZERO_DISABLED => 16#0#, ZERO_ENABLED => 16#1#);
    type LW_PRGNLCL_SCP_CTL1_RNG_EN_Field is (EN_DISABLED, EN_ENABLED) with
        Size => 1;
    for LW_PRGNLCL_SCP_CTL1_RNG_EN_Field use (EN_DISABLED => 16#0#, EN_ENABLED => 16#1#);
    type LW_PRGNLCL_SCP_CTL1_RNG_FAKE_MODE_Field is (MODE_DISABLED, MODE_ENABLED) with
        Size => 1;
    for LW_PRGNLCL_SCP_CTL1_RNG_FAKE_MODE_Field use (MODE_DISABLED => 16#0#, MODE_ENABLED => 16#1#);
    LW_PRGNLCL_SCP_CTL1_PIPE_RESET_IDLE    : constant NvU1 := 16#0#;
    LW_PRGNLCL_SCP_CTL1_PIPE_RESET_PENDING : constant NvU1 := 16#1#;
    LW_PRGNLCL_SCP_CTL1_PIPE_RESET_TASK    : constant NvU1 := 16#1#;
    LW_PRGNLCL_SCP_CTL1_SEQ_CLEAR_IDLE     : constant NvU1 := 16#0#;
    LW_PRGNLCL_SCP_CTL1_SEQ_CLEAR_PENDING  : constant NvU1 := 16#1#;
    LW_PRGNLCL_SCP_CTL1_SEQ_CLEAR_TASK     : constant NvU1 := 16#1#;

    type LW_PRGNLCL_SCP_CTL1_Register is record
        Sf_Push_Bypass   : LW_PRGNLCL_SCP_CTL1_SF_PUSH_BYPASS_Field;
        Sf_Fetch_Bypass  : LW_PRGNLCL_SCP_CTL1_SF_FETCH_BYPASS_Field;
        Sf_Fetch_As_Zero : LW_PRGNLCL_SCP_CTL1_SF_FETCH_AS_ZERO_Field;
        Rng_En           : LW_PRGNLCL_SCP_CTL1_RNG_EN_Field;
        Rng_Fake_Mode    : LW_PRGNLCL_SCP_CTL1_RNG_FAKE_MODE_Field;
        Pipe_Reset       : NvU1;
        Seq_Clear        : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SCP_CTL1_Register use record
        Sf_Push_Bypass   at 0 range 24 .. 24;
        Sf_Fetch_Bypass  at 0 range 20 .. 20;
        Sf_Fetch_As_Zero at 0 range 16 .. 16;
        Rng_En           at 0 range 12 .. 12;
        Rng_Fake_Mode    at 0 range 11 .. 11;
        Pipe_Reset       at 0 range  8 ..  8;
        Seq_Clear        at 0 range  0 ..  0;
    end record;

    LW_PRGNLCL_SCP_CTL_STAT_DEBUG_MODE_DISABLED : constant NvU1 := 16#0#;
    type LW_PRGNLCL_SCP_CTL_STAT_AES_SCC_DIS_Field is (DIS_FALSE, DIS_TRUE) with
        Size => 1;
    for LW_PRGNLCL_SCP_CTL_STAT_AES_SCC_DIS_Field use (DIS_FALSE => 16#0#, DIS_TRUE => 16#1#);
    type LW_PRGNLCL_SCP_CTL_STAT_HSMODE_Field is (HSMODE_FALSE, HSMODE_TRUE) with
        Size => 1;
    for LW_PRGNLCL_SCP_CTL_STAT_HSMODE_Field use (HSMODE_FALSE => 16#0#, HSMODE_TRUE => 16#1#);
    type LW_PRGNLCL_SCP_CTL_STAT_SBOOT_Field is (SBOOT_FALSE, SBOOT_TRUE) with
        Size => 1;
    for LW_PRGNLCL_SCP_CTL_STAT_SBOOT_Field use (SBOOT_FALSE => 16#0#, SBOOT_TRUE => 16#1#);

    type LW_PRGNLCL_SCP_CTL_STAT_Register is record
        Debug_Mode  : NvU1;
        Aes_Scc_Dis : LW_PRGNLCL_SCP_CTL_STAT_AES_SCC_DIS_Field;
        Hsmode      : LW_PRGNLCL_SCP_CTL_STAT_HSMODE_Field;
        Sboot       : LW_PRGNLCL_SCP_CTL_STAT_SBOOT_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SCP_CTL_STAT_Register use record
        Debug_Mode  at 0 range 20 .. 20;
        Aes_Scc_Dis at 0 range  2 ..  2;
        Hsmode      at 0 range  1 ..  1;
        Sboot       at 0 range  0 ..  0;
    end record;

    type LW_PRGNLCL_SCP_CTL_CFG_LOCKDOWN_Field is (LOCKDOWN_DISABLE, LOCKDOWN_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_SCP_CTL_CFG_LOCKDOWN_Field use (LOCKDOWN_DISABLE => 16#0#, LOCKDOWN_ENABLE => 16#1#);
    type LW_PRGNLCL_SCP_CTL_CFG_LOCKDOWN_CLR_REQ_STAT_Field is (STAT_NOT_PENDING, STAT_PENDING) with
        Size => 1;
    for LW_PRGNLCL_SCP_CTL_CFG_LOCKDOWN_CLR_REQ_STAT_Field use (STAT_NOT_PENDING => 16#0#, STAT_PENDING => 16#1#);
    type LW_PRGNLCL_SCP_CTL_CFG_LOCKDOWN_PRE_Field is (PRE_DISABLED, PRE_ENABLED) with
        Size => 1;
    for LW_PRGNLCL_SCP_CTL_CFG_LOCKDOWN_PRE_Field use (PRE_DISABLED => 16#0#, PRE_ENABLED => 16#1#);
    type LW_PRGNLCL_SCP_CTL_CFG_LOCKDOWN_SCP_Field is (SCP_DISABLE, SCP_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_SCP_CTL_CFG_LOCKDOWN_SCP_Field use (SCP_DISABLE => 16#0#, SCP_ENABLE => 16#1#);
    type LW_PRGNLCL_SCP_CTL_CFG_LOCKDOWN_SCP_PRE_Field is (PRE_DISABLED, PRE_ENABLED) with
        Size => 1;
    for LW_PRGNLCL_SCP_CTL_CFG_LOCKDOWN_SCP_PRE_Field use (PRE_DISABLED => 16#0#, PRE_ENABLED => 16#1#);

    type LW_PRGNLCL_SCP_CTL_CFG_Register is record
        Lockdown              : LW_PRGNLCL_SCP_CTL_CFG_LOCKDOWN_Field;
        Lockdown_Clr_Req_Stat : LW_PRGNLCL_SCP_CTL_CFG_LOCKDOWN_CLR_REQ_STAT_Field;
        Lockdown_Pre          : LW_PRGNLCL_SCP_CTL_CFG_LOCKDOWN_PRE_Field;
        Lockdown_Scp          : LW_PRGNLCL_SCP_CTL_CFG_LOCKDOWN_SCP_Field;
        Lockdown_Scp_Pre      : LW_PRGNLCL_SCP_CTL_CFG_LOCKDOWN_SCP_PRE_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SCP_CTL_CFG_Register use record
        Lockdown              at 0 range 0 .. 0;
        Lockdown_Clr_Req_Stat at 0 range 1 .. 1;
        Lockdown_Pre          at 0 range 2 .. 2;
        Lockdown_Scp          at 0 range 4 .. 4;
        Lockdown_Scp_Pre      at 0 range 6 .. 6;
    end record;

    LW_PRGNLCL_SCP_CFG0_STALL_TIMEOUT_INIT : constant NvU16 := 16#ffff#;
    type LW_PRGNLCL_SCP_CFG0_CARRY_CHAIN_Field is (CHAIN_32, CHAIN_64, CHAIN_96, CHAIN_128) with
        Size => 2;
    for LW_PRGNLCL_SCP_CFG0_CARRY_CHAIN_Field use (CHAIN_32 => 16#0#, CHAIN_64 => 16#1#, CHAIN_96 => 16#2#, CHAIN_128 => 16#3#);
    type LW_PRGNLCL_SCP_CFG0_CMD_FLUSH_Field is (FLUSH_FALSE, FLUSH_TRUE) with
        Size => 1;
    for LW_PRGNLCL_SCP_CFG0_CMD_FLUSH_Field use (FLUSH_FALSE => 16#0#, FLUSH_TRUE => 16#1#);
    type LW_PRGNLCL_SCP_CFG0_AES_ENDIAN_Field is (ENDIAN_LITTLE, ENDIAN_BIG) with
        Size => 1;
    for LW_PRGNLCL_SCP_CFG0_AES_ENDIAN_Field use (ENDIAN_LITTLE => 16#0#, ENDIAN_BIG => 16#1#);
    type LW_PRGNLCL_SCP_CFG0_PUSH_ENDIAN_Field is (ENDIAN_LITTLE, ENDIAN_BIG) with
        Size => 1;
    for LW_PRGNLCL_SCP_CFG0_PUSH_ENDIAN_Field use (ENDIAN_LITTLE => 16#0#, ENDIAN_BIG => 16#1#);
    type LW_PRGNLCL_SCP_CFG0_FETCH_ENDIAN_Field is (ENDIAN_LITTLE, ENDIAN_BIG) with
        Size => 1;
    for LW_PRGNLCL_SCP_CFG0_FETCH_ENDIAN_Field use (ENDIAN_LITTLE => 16#0#, ENDIAN_BIG => 16#1#);
    type LW_PRGNLCL_SCP_CFG0_CMAC_ENDIAN_Field is (ENDIAN_LITTLE, ENDIAN_BIG) with
        Size => 1;
    for LW_PRGNLCL_SCP_CFG0_CMAC_ENDIAN_Field use (ENDIAN_LITTLE => 16#0#, ENDIAN_BIG => 16#1#);
    type LW_PRGNLCL_SCP_CFG0_ADD_ENDIAN_Field is (ENDIAN_LITTLE, ENDIAN_BIG) with
        Size => 1;
    for LW_PRGNLCL_SCP_CFG0_ADD_ENDIAN_Field use (ENDIAN_LITTLE => 16#0#, ENDIAN_BIG => 16#1#);

    type LW_PRGNLCL_SCP_CFG0_Register is record
        Stall_Timeout : NvU16;
        Carry_Chain   : LW_PRGNLCL_SCP_CFG0_CARRY_CHAIN_Field;
        Cmd_Flush     : LW_PRGNLCL_SCP_CFG0_CMD_FLUSH_Field;
        Aes_Endian    : LW_PRGNLCL_SCP_CFG0_AES_ENDIAN_Field;
        Push_Endian   : LW_PRGNLCL_SCP_CFG0_PUSH_ENDIAN_Field;
        Fetch_Endian  : LW_PRGNLCL_SCP_CFG0_FETCH_ENDIAN_Field;
        Cmac_Endian   : LW_PRGNLCL_SCP_CFG0_CMAC_ENDIAN_Field;
        Add_Endian    : LW_PRGNLCL_SCP_CFG0_ADD_ENDIAN_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SCP_CFG0_Register use record
        Stall_Timeout at 0 range 16 .. 31;
        Carry_Chain   at 0 range 12 .. 13;
        Cmd_Flush     at 0 range  8 ..  8;
        Aes_Endian    at 0 range  4 ..  4;
        Push_Endian   at 0 range  3 ..  3;
        Fetch_Endian  at 0 range  2 ..  2;
        Cmac_Endian   at 0 range  1 ..  1;
        Add_Endian    at 0 range  0 ..  0;
    end record;

    type LW_PRGNLCL_SCP_CTL_SCP_TOGGLE_MASTER_Field is (MASTER_IDLE, MASTER_PENDING) with
        Size => 1;
    for LW_PRGNLCL_SCP_CTL_SCP_TOGGLE_MASTER_Field use (MASTER_IDLE => 16#0#, MASTER_PENDING => 16#1#);
    type LW_PRGNLCL_SCP_CTL_SCP_CURRENT_MASTER_Field is (MASTER_FALCON, MASTER_EXT) with
        Size => 1;
    for LW_PRGNLCL_SCP_CTL_SCP_CURRENT_MASTER_Field use (MASTER_FALCON => 16#0#, MASTER_EXT => 16#1#);

    type LW_PRGNLCL_SCP_CTL_SCP_Register is record
        Toggle_Master  : LW_PRGNLCL_SCP_CTL_SCP_TOGGLE_MASTER_Field;
        Current_Master : LW_PRGNLCL_SCP_CTL_SCP_CURRENT_MASTER_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SCP_CTL_SCP_Register use record
        Toggle_Master  at 0 range 0 .. 0;
        Current_Master at 0 range 1 .. 1;
    end record;

    type LW_PRGNLCL_SCP_CTL_DEBUG_LOCKDOWN_CYA_Field is (CYA_DISABLE, CYA_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_SCP_CTL_DEBUG_LOCKDOWN_CYA_Field use (CYA_DISABLE => 16#0#, CYA_ENABLE => 16#1#);
    type LW_PRGNLCL_SCP_CTL_DEBUG_LOCKDOWN_SCP_CYA_Field is (CYA_DISABLE, CYA_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_SCP_CTL_DEBUG_LOCKDOWN_SCP_CYA_Field use (CYA_DISABLE => 16#0#, CYA_ENABLE => 16#1#);

    type LW_PRGNLCL_SCP_CTL_DEBUG_Register is record
        Lockdown_Cya     : LW_PRGNLCL_SCP_CTL_DEBUG_LOCKDOWN_CYA_Field;
        Lockdown_Scp_Cya : LW_PRGNLCL_SCP_CTL_DEBUG_LOCKDOWN_SCP_CYA_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SCP_CTL_DEBUG_Register use record
        Lockdown_Cya     at 0 range 4 .. 4;
        Lockdown_Scp_Cya at 0 range 8 .. 8;
    end record;

    type LW_PRGNLCL_SCP_DEBUG0_PUSH_SECURE_Field is (SECURE_FALSE, SECURE_TRUE) with
        Size => 1;
    for LW_PRGNLCL_SCP_DEBUG0_PUSH_SECURE_Field use (SECURE_FALSE => 16#0#, SECURE_TRUE => 16#1#);
    type LW_PRGNLCL_SCP_DEBUG0_PUSH_VALID_Field is (VALID_FALSE, VALID_TRUE) with
        Size => 1;
    for LW_PRGNLCL_SCP_DEBUG0_PUSH_VALID_Field use (VALID_FALSE => 16#0#, VALID_TRUE => 16#1#);
    LW_PRGNLCL_SCP_DEBUG0_PUSH_CNT_INIT : constant NvU2 := 16#0#;
    type LW_PRGNLCL_SCP_DEBUG0_FETCH_SECURE_Field is (SECURE_FALSE, SECURE_TRUE) with
        Size => 1;
    for LW_PRGNLCL_SCP_DEBUG0_FETCH_SECURE_Field use (SECURE_FALSE => 16#0#, SECURE_TRUE => 16#1#);
    type LW_PRGNLCL_SCP_DEBUG0_FETCH_VALID_Field is (VALID_FALSE, VALID_TRUE) with
        Size => 1;
    for LW_PRGNLCL_SCP_DEBUG0_FETCH_VALID_Field use (VALID_FALSE => 16#0#, VALID_TRUE => 16#1#);
    LW_PRGNLCL_SCP_DEBUG0_FETCH_CNT_INIT : constant NvU4 := 16#0#;
    type LW_PRGNLCL_SCP_DEBUG0_SEQ_SECURE_Field is (SECURE_FALSE, SECURE_TRUE) with
        Size => 1;
    for LW_PRGNLCL_SCP_DEBUG0_SEQ_SECURE_Field use (SECURE_FALSE => 16#0#, SECURE_TRUE => 16#1#);
    type LW_PRGNLCL_SCP_DEBUG0_SEQ_VALID_Field is (VALID_FALSE, VALID_TRUE) with
        Size => 1;
    for LW_PRGNLCL_SCP_DEBUG0_SEQ_VALID_Field use (VALID_FALSE => 16#0#, VALID_TRUE => 16#1#);
    LW_PRGNLCL_SCP_DEBUG0_SEQ_PC_INIT    : constant NvU4 := 16#0#;
    LW_PRGNLCL_SCP_DEBUG0_SEQ_DEPTH_INIT : constant NvU5 := 16#0#;
    type LW_PRGNLCL_SCP_DEBUG0_TARGET_Field is (TARGET_NONE, TARGET_PUSH, TARGET_FETCH, TARGET_SEQ) with
        Size => 2;
    for LW_PRGNLCL_SCP_DEBUG0_TARGET_Field use (TARGET_NONE => 16#0#, TARGET_PUSH => 16#1#, TARGET_FETCH => 16#2#, TARGET_SEQ => 16#3#);
    type LW_PRGNLCL_SCP_DEBUG0_INDEX_AUTOINCREMENT_Field is (AUTOINCREMENT_FALSE, AUTOINCREMENT_TRUE) with
        Size => 1;
    for LW_PRGNLCL_SCP_DEBUG0_INDEX_AUTOINCREMENT_Field use (AUTOINCREMENT_FALSE => 16#0#, AUTOINCREMENT_TRUE => 16#1#);
    LW_PRGNLCL_SCP_DEBUG0_INDEX_INIT : constant NvU4 := 16#0#;

    type LW_PRGNLCL_SCP_DEBUG0_Register is record
        Push_Secure         : LW_PRGNLCL_SCP_DEBUG0_PUSH_SECURE_Field;
        Push_Valid          : LW_PRGNLCL_SCP_DEBUG0_PUSH_VALID_Field;
        Push_Cnt            : NvU2;
        Fetch_Secure        : LW_PRGNLCL_SCP_DEBUG0_FETCH_SECURE_Field;
        Fetch_Valid         : LW_PRGNLCL_SCP_DEBUG0_FETCH_VALID_Field;
        Fetch_Cnt           : NvU4;
        Seq_Secure          : LW_PRGNLCL_SCP_DEBUG0_SEQ_SECURE_Field;
        Seq_Valid           : LW_PRGNLCL_SCP_DEBUG0_SEQ_VALID_Field;
        Seq_Pc              : NvU4;
        Seq_Depth           : NvU5;
        Target              : LW_PRGNLCL_SCP_DEBUG0_TARGET_Field;
        Index_Autoincrement : LW_PRGNLCL_SCP_DEBUG0_INDEX_AUTOINCREMENT_Field;
        Index               : NvU4;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SCP_DEBUG0_Register use record
        Push_Secure         at 0 range 31 .. 31;
        Push_Valid          at 0 range 30 .. 30;
        Push_Cnt            at 0 range 25 .. 26;
        Fetch_Secure        at 0 range 24 .. 24;
        Fetch_Valid         at 0 range 23 .. 23;
        Fetch_Cnt           at 0 range 19 .. 22;
        Seq_Secure          at 0 range 18 .. 18;
        Seq_Valid           at 0 range 17 .. 17;
        Seq_Pc              at 0 range 13 .. 16;
        Seq_Depth           at 0 range  8 .. 12;
        Target              at 0 range  5 ..  6;
        Index_Autoincrement at 0 range  4 ..  4;
        Index               at 0 range  0 ..  3;
    end record;

    LW_PRGNLCL_SCP_DEBUG1_DATA_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_SCP_DEBUG1_Register is record
        Data : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SCP_DEBUG1_Register use record
        Data at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_SCP_DEBUG2_KU_INIT        : constant NvU4 := 16#0#;
    LW_PRGNLCL_SCP_DEBUG2_SEQ_CNT_INIT   : constant NvU6 := 16#0#;
    LW_PRGNLCL_SCP_DEBUG2_SEQ_STATE_INIT : constant NvU2 := 16#0#;
    LW_PRGNLCL_SCP_DEBUG2_SEQ_STATE_IDLE : constant NvU2 := 16#0#;
    LW_PRGNLCL_SCP_DEBUG2_SEQ_STATE_LOAD : constant NvU2 := 16#1#;
    LW_PRGNLCL_SCP_DEBUG2_SEQ_STATE_LOOP : constant NvU2 := 16#2#;

    type LW_PRGNLCL_SCP_DEBUG2_Register is record
        Ku        : NvU4;
        Seq_Cnt   : NvU6;
        Seq_State : NvU2;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SCP_DEBUG2_Register use record
        Ku        at 0 range 12 .. 15;
        Seq_Cnt   at 0 range  4 ..  9;
        Seq_State at 0 range  0 ..  1;
    end record;

    type LW_PRGNLCL_SCP_DEBUG_CMD_SECURE_Field is (SECURE_FALSE, SECURE_TRUE) with
        Size => 1;
    for LW_PRGNLCL_SCP_DEBUG_CMD_SECURE_Field use (SECURE_FALSE => 16#0#, SECURE_TRUE => 16#1#);
    type LW_PRGNLCL_SCP_DEBUG_CMD_VALID_Field is (VALID_FALSE, VALID_TRUE) with
        Size => 1;
    for LW_PRGNLCL_SCP_DEBUG_CMD_VALID_Field use (VALID_FALSE => 16#0#, VALID_TRUE => 16#1#);

    type LW_PRGNLCL_SCP_DEBUG_CMD_Register is record
        Secure : LW_PRGNLCL_SCP_DEBUG_CMD_SECURE_Field;
        Valid  : LW_PRGNLCL_SCP_DEBUG_CMD_VALID_Field;
        Op     : NvU5;
        Rx_Imm : NvU6;
        Ry     : NvU4;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SCP_DEBUG_CMD_Register use record
        Secure at 0 range 31 .. 31;
        Valid  at 0 range 28 .. 28;
        Op     at 0 range 20 .. 24;
        Rx_Imm at 0 range  8 .. 13;
        Ry     at 0 range  0 ..  3;
    end record;

    type LW_PRGNLCL_SCP_ACL_FETCH_Register is record
        Secure   : NvU8;
        Insecure : NvU8;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SCP_ACL_FETCH_Register use record
        Secure   at 0 range 16 .. 23;
        Insecure at 0 range  0 ..  7;
    end record;

    type LW_PRGNLCL_SCP_ACL_KEYABLE_Register is record
        Secure   : NvU8;
        Insecure : NvU8;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SCP_ACL_KEYABLE_Register use record
        Secure   at 0 range 16 .. 23;
        Insecure at 0 range  0 ..  7;
    end record;

    type LW_PRGNLCL_SCP_ACL_WRITE_Register is record
        Insecure : NvU8;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SCP_ACL_WRITE_Register use record
        Insecure at 0 range 0 .. 7;
    end record;

    type LW_PRGNLCL_SCP_STATUS_SCP_ACTIVE_Field is (ACTIVE_FALSE, ACTIVE_TRUE) with
        Size => 1;
    for LW_PRGNLCL_SCP_STATUS_SCP_ACTIVE_Field use (ACTIVE_FALSE => 16#0#, ACTIVE_TRUE => 16#1#);
    type LW_PRGNLCL_SCP_STATUS_CMD_ACTIVE_Field is (ACTIVE_FALSE, ACTIVE_TRUE) with
        Size => 1;
    for LW_PRGNLCL_SCP_STATUS_CMD_ACTIVE_Field use (ACTIVE_FALSE => 16#0#, ACTIVE_TRUE => 16#1#);
    type LW_PRGNLCL_SCP_STATUS_PUSH_ACTIVE_Field is (ACTIVE_FALSE, ACTIVE_TRUE) with
        Size => 1;
    for LW_PRGNLCL_SCP_STATUS_PUSH_ACTIVE_Field use (ACTIVE_FALSE => 16#0#, ACTIVE_TRUE => 16#1#);
    type LW_PRGNLCL_SCP_STATUS_SEQ_ACTIVE_Field is (ACTIVE_FALSE, ACTIVE_TRUE) with
        Size => 1;
    for LW_PRGNLCL_SCP_STATUS_SEQ_ACTIVE_Field use (ACTIVE_FALSE => 16#0#, ACTIVE_TRUE => 16#1#);
    type LW_PRGNLCL_SCP_STATUS_CTL_ACTIVE_Field is (ACTIVE_FALSE, ACTIVE_TRUE) with
        Size => 1;
    for LW_PRGNLCL_SCP_STATUS_CTL_ACTIVE_Field use (ACTIVE_FALSE => 16#0#, ACTIVE_TRUE => 16#1#);
    type LW_PRGNLCL_SCP_STATUS_FETCH_ACTIVE_Field is (ACTIVE_FALSE, ACTIVE_TRUE) with
        Size => 1;
    for LW_PRGNLCL_SCP_STATUS_FETCH_ACTIVE_Field use (ACTIVE_FALSE => 16#0#, ACTIVE_TRUE => 16#1#);
    type LW_PRGNLCL_SCP_STATUS_AES_ACTIVE_Field is (ACTIVE_FALSE, ACTIVE_TRUE) with
        Size => 1;
    for LW_PRGNLCL_SCP_STATUS_AES_ACTIVE_Field use (ACTIVE_FALSE => 16#0#, ACTIVE_TRUE => 16#1#);
    type LW_PRGNLCL_SCP_STATUS_RNG_ACTIVE_Field is (ACTIVE_FALSE, ACTIVE_TRUE) with
        Size => 1;
    for LW_PRGNLCL_SCP_STATUS_RNG_ACTIVE_Field use (ACTIVE_FALSE => 16#0#, ACTIVE_TRUE => 16#1#);
    type LW_PRGNLCL_SCP_STATUS_SFK_LOADING_ACTIVE_Field is (ACTIVE_FALSE, ACTIVE_TRUE) with
        Size => 1;
    for LW_PRGNLCL_SCP_STATUS_SFK_LOADING_ACTIVE_Field use (ACTIVE_FALSE => 16#0#, ACTIVE_TRUE => 16#1#);
    type LW_PRGNLCL_SCP_STATUS_PDI_LOADING_ACTIVE_Field is (ACTIVE_FALSE, ACTIVE_TRUE) with
        Size => 1;
    for LW_PRGNLCL_SCP_STATUS_PDI_LOADING_ACTIVE_Field use (ACTIVE_FALSE => 16#0#, ACTIVE_TRUE => 16#1#);
    type LW_PRGNLCL_SCP_STATUS_SCC_TRNG_ACTIVE_Field is (ACTIVE_FALSE, ACTIVE_TRUE) with
        Size => 1;
    for LW_PRGNLCL_SCP_STATUS_SCC_TRNG_ACTIVE_Field use (ACTIVE_FALSE => 16#0#, ACTIVE_TRUE => 16#1#);
    type LW_PRGNLCL_SCP_STATUS_SCC_PRNG_ACTIVE_Field is (ACTIVE_FALSE, ACTIVE_TRUE) with
        Size => 1;
    for LW_PRGNLCL_SCP_STATUS_SCC_PRNG_ACTIVE_Field use (ACTIVE_FALSE => 16#0#, ACTIVE_TRUE => 16#1#);

    type LW_PRGNLCL_SCP_STATUS_Register is record
        Scp_Active         : LW_PRGNLCL_SCP_STATUS_SCP_ACTIVE_Field;
        Cmd_Active         : LW_PRGNLCL_SCP_STATUS_CMD_ACTIVE_Field;
        Push_Active        : LW_PRGNLCL_SCP_STATUS_PUSH_ACTIVE_Field;
        Seq_Active         : LW_PRGNLCL_SCP_STATUS_SEQ_ACTIVE_Field;
        Ctl_Active         : LW_PRGNLCL_SCP_STATUS_CTL_ACTIVE_Field;
        Fetch_Active       : LW_PRGNLCL_SCP_STATUS_FETCH_ACTIVE_Field;
        Aes_Active         : LW_PRGNLCL_SCP_STATUS_AES_ACTIVE_Field;
        Rng_Active         : LW_PRGNLCL_SCP_STATUS_RNG_ACTIVE_Field;
        Sfk_Loading_Active : LW_PRGNLCL_SCP_STATUS_SFK_LOADING_ACTIVE_Field;
        Pdi_Loading_Active : LW_PRGNLCL_SCP_STATUS_PDI_LOADING_ACTIVE_Field;
        Scc_Trng_Active    : LW_PRGNLCL_SCP_STATUS_SCC_TRNG_ACTIVE_Field;
        Scc_Prng_Active    : LW_PRGNLCL_SCP_STATUS_SCC_PRNG_ACTIVE_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SCP_STATUS_Register use record
        Scp_Active         at 0 range  0 ..  0;
        Cmd_Active         at 0 range  2 ..  2;
        Push_Active        at 0 range  4 ..  4;
        Seq_Active         at 0 range  6 ..  6;
        Ctl_Active         at 0 range  8 ..  8;
        Fetch_Active       at 0 range 10 .. 10;
        Aes_Active         at 0 range 14 .. 14;
        Rng_Active         at 0 range 16 .. 16;
        Sfk_Loading_Active at 0 range 20 .. 20;
        Pdi_Loading_Active at 0 range 24 .. 24;
        Scc_Trng_Active    at 0 range 26 .. 26;
        Scc_Prng_Active    at 0 range 28 .. 28;
    end record;

    type LW_PRGNLCL_SCP_STAT0_SF_CMD_VLD_Field is (VLD_FALSE, VLD_TRUE) with
        Size => 1;
    for LW_PRGNLCL_SCP_STAT0_SF_CMD_VLD_Field use (VLD_FALSE => 16#0#, VLD_TRUE => 16#1#);
    type LW_PRGNLCL_SCP_STAT0_SF_CMD_SECURE_Field is (SECURE_FALSE, SECURE_TRUE) with
        Size => 1;
    for LW_PRGNLCL_SCP_STAT0_SF_CMD_SECURE_Field use (SECURE_FALSE => 16#0#, SECURE_TRUE => 16#1#);
    type LW_PRGNLCL_SCP_STAT0_SF_PUSH_VLD_Field is (VLD_FALSE, VLD_TRUE) with
        Size => 1;
    for LW_PRGNLCL_SCP_STAT0_SF_PUSH_VLD_Field use (VLD_FALSE => 16#0#, VLD_TRUE => 16#1#);
    type LW_PRGNLCL_SCP_STAT0_SF_PUSH_SECURE_Field is (SECURE_FALSE, SECURE_TRUE) with
        Size => 1;
    for LW_PRGNLCL_SCP_STAT0_SF_PUSH_SECURE_Field use (SECURE_FALSE => 16#0#, SECURE_TRUE => 16#1#);
    type LW_PRGNLCL_SCP_STAT0_SF_FETCH_RDY_Field is (RDY_FALSE, RDY_TRUE) with
        Size => 1;
    for LW_PRGNLCL_SCP_STAT0_SF_FETCH_RDY_Field use (RDY_FALSE => 16#0#, RDY_TRUE => 16#1#);
    type LW_PRGNLCL_SCP_STAT0_SF_FETCH_SECURE_Field is (SECURE_FALSE, SECURE_TRUE) with
        Size => 1;
    for LW_PRGNLCL_SCP_STAT0_SF_FETCH_SECURE_Field use (SECURE_FALSE => 16#0#, SECURE_TRUE => 16#1#);
    type LW_PRGNLCL_SCP_STAT0_CMP_Field is (CMP_INIT, CMP_FAIL, CMP_PASS) with
        Size => 2;
    for LW_PRGNLCL_SCP_STAT0_CMP_Field use (CMP_INIT => 16#0#, CMP_FAIL => 16#2#, CMP_PASS => 16#3#);

    type LW_PRGNLCL_SCP_STAT0_Register is record
        Sf_Cmd_Vld      : LW_PRGNLCL_SCP_STAT0_SF_CMD_VLD_Field;
        Sf_Cmd_Secure   : LW_PRGNLCL_SCP_STAT0_SF_CMD_SECURE_Field;
        Sf_Push_Vld     : LW_PRGNLCL_SCP_STAT0_SF_PUSH_VLD_Field;
        Sf_Push_Secure  : LW_PRGNLCL_SCP_STAT0_SF_PUSH_SECURE_Field;
        Sf_Fetch_Rdy    : LW_PRGNLCL_SCP_STAT0_SF_FETCH_RDY_Field;
        Sf_Fetch_Secure : LW_PRGNLCL_SCP_STAT0_SF_FETCH_SECURE_Field;
        Cmp             : LW_PRGNLCL_SCP_STAT0_CMP_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SCP_STAT0_Register use record
        Sf_Cmd_Vld      at 0 range 14 .. 14;
        Sf_Cmd_Secure   at 0 range 12 .. 12;
        Sf_Push_Vld     at 0 range 10 .. 10;
        Sf_Push_Secure  at 0 range  8 ..  8;
        Sf_Fetch_Rdy    at 0 range  6 ..  6;
        Sf_Fetch_Secure at 0 range  4 ..  4;
        Cmp             at 0 range  0 ..  1;
    end record;

    type LW_PRGNLCL_SCP_STAT1_AES_OP_Field is (OP_ENCRYPT, OP_DECRYPT, OP_RKEY, OP_RKEYI) with
        Size => 3;
    for LW_PRGNLCL_SCP_STAT1_AES_OP_Field use (OP_ENCRYPT => 16#0#, OP_DECRYPT => 16#1#, OP_RKEY => 16#2#, OP_RKEYI => 16#3#);
    type LW_PRGNLCL_SCP_STAT1_HAZARD_STALL_Field is (STALL_FALSE, STALL_TRUE) with
        Size => 1;
    for LW_PRGNLCL_SCP_STAT1_HAZARD_STALL_Field use (STALL_FALSE => 16#0#, STALL_TRUE => 16#1#);
    type LW_PRGNLCL_SCP_STAT1_PUSH_STALL_Field is (STALL_FALSE, STALL_TRUE) with
        Size => 1;
    for LW_PRGNLCL_SCP_STAT1_PUSH_STALL_Field use (STALL_FALSE => 16#0#, STALL_TRUE => 16#1#);
    type LW_PRGNLCL_SCP_STAT1_FETCH_STALL_Field is (STALL_FALSE, STALL_TRUE) with
        Size => 1;
    for LW_PRGNLCL_SCP_STAT1_FETCH_STALL_Field use (STALL_FALSE => 16#0#, STALL_TRUE => 16#1#);
    type LW_PRGNLCL_SCP_STAT1_RNG_STALL_Field is (STALL_FALSE, STALL_TRUE) with
        Size => 1;
    for LW_PRGNLCL_SCP_STAT1_RNG_STALL_Field use (STALL_FALSE => 16#0#, STALL_TRUE => 16#1#);
    type LW_PRGNLCL_SCP_STAT1_WB_STALL_Field is (STALL_FALSE, STALL_TRUE) with
        Size => 1;
    for LW_PRGNLCL_SCP_STAT1_WB_STALL_Field use (STALL_FALSE => 16#0#, STALL_TRUE => 16#1#);
    type LW_PRGNLCL_SCP_STAT1_AES_STALL_Field is (STALL_FALSE, STALL_TRUE) with
        Size => 1;
    for LW_PRGNLCL_SCP_STAT1_AES_STALL_Field use (STALL_FALSE => 16#0#, STALL_TRUE => 16#1#);
    type LW_PRGNLCL_SCP_STAT1_SECRET_STALL_Field is (STALL_FALSE, STALL_TRUE) with
        Size => 1;
    for LW_PRGNLCL_SCP_STAT1_SECRET_STALL_Field use (STALL_FALSE => 16#0#, STALL_TRUE => 16#1#);

    type LW_PRGNLCL_SCP_STAT1_Register is record
        Seq_Op       : NvU5;
        Sf_Op        : NvU5;
        Dispatch_Op  : NvU5;
        Aes_Op       : LW_PRGNLCL_SCP_STAT1_AES_OP_Field;
        Hazard_Stall : LW_PRGNLCL_SCP_STAT1_HAZARD_STALL_Field;
        Push_Stall   : LW_PRGNLCL_SCP_STAT1_PUSH_STALL_Field;
        Fetch_Stall  : LW_PRGNLCL_SCP_STAT1_FETCH_STALL_Field;
        Rng_Stall    : LW_PRGNLCL_SCP_STAT1_RNG_STALL_Field;
        Wb_Stall     : LW_PRGNLCL_SCP_STAT1_WB_STALL_Field;
        Aes_Stall    : LW_PRGNLCL_SCP_STAT1_AES_STALL_Field;
        Secret_Stall : LW_PRGNLCL_SCP_STAT1_SECRET_STALL_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SCP_STAT1_Register use record
        Seq_Op       at 0 range  0 ..  4;
        Sf_Op        at 0 range  5 ..  9;
        Dispatch_Op  at 0 range 10 .. 14;
        Aes_Op       at 0 range 15 .. 17;
        Hazard_Stall at 0 range 24 .. 24;
        Push_Stall   at 0 range 25 .. 25;
        Fetch_Stall  at 0 range 26 .. 26;
        Rng_Stall    at 0 range 27 .. 27;
        Wb_Stall     at 0 range 28 .. 28;
        Aes_Stall    at 0 range 29 .. 29;
        Secret_Stall at 0 range 30 .. 30;
    end record;

    type LW_PRGNLCL_SCP_SECRET63_CTL_SEL_Field is (SEL_PKEY, SEL_KMEM) with
        Size => 1;
    for LW_PRGNLCL_SCP_SECRET63_CTL_SEL_Field use (SEL_PKEY => 16#0#, SEL_KMEM => 16#1#);

    type LW_PRGNLCL_SCP_SECRET63_CTL_Register is record
        Sel : LW_PRGNLCL_SCP_SECRET63_CTL_SEL_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SCP_SECRET63_CTL_Register use record
        Sel at 0 range 0 .. 0;
    end record;

    LW_PRGNLCL_SCP_RNG_STAT0_RAW_RAND_READY_READY           : constant NvU1 := 16#0#;
    LW_PRGNLCL_SCP_RNG_STAT0_RAW_RAND_READY_PROCESSING      : constant NvU1 := 16#1#;
    LW_PRGNLCL_SCP_RNG_STAT0_RAW_RAND_READY_RANDBUF_NOTFULL : constant NvU1 := 16#1#;
    LW_PRGNLCL_SCP_RNG_STAT0_AUTOCAL_TAP_A_INIT             : constant NvU4 := 16#f#;
    LW_PRGNLCL_SCP_RNG_STAT0_AUTOCAL_TAP_B_INIT             : constant NvU4 := 16#f#;
    type LW_PRGNLCL_SCP_RNG_STAT0_LFSR_STAT_A_Field is (A_LEGAL, A_ILLEGAL) with
        Size => 1;
    for LW_PRGNLCL_SCP_RNG_STAT0_LFSR_STAT_A_Field use (A_LEGAL => 16#0#, A_ILLEGAL => 16#1#);
    type LW_PRGNLCL_SCP_RNG_STAT0_LFSR_STAT_B_Field is (B_LEGAL, B_ILLEGAL) with
        Size => 1;
    for LW_PRGNLCL_SCP_RNG_STAT0_LFSR_STAT_B_Field use (B_LEGAL => 16#0#, B_ILLEGAL => 16#1#);
    LW_PRGNLCL_SCP_RNG_STAT0_RCTR_SATURATED_A_FALSE : constant NvU1 := 16#0#;
    LW_PRGNLCL_SCP_RNG_STAT0_RCTR_SATURATED_A_TRUE  : constant NvU1 := 16#1#;
    LW_PRGNLCL_SCP_RNG_STAT0_RCTR_SATURATED_A_CLEAR : constant NvU1 := 16#1#;
    LW_PRGNLCL_SCP_RNG_STAT0_RCTR_SATURATED_B_FALSE : constant NvU1 := 16#0#;
    LW_PRGNLCL_SCP_RNG_STAT0_RCTR_SATURATED_B_TRUE  : constant NvU1 := 16#1#;
    LW_PRGNLCL_SCP_RNG_STAT0_RCTR_SATURATED_B_CLEAR : constant NvU1 := 16#1#;

    type LW_PRGNLCL_SCP_RNG_STAT0_Register is record
        Raw_Rand_Ready   : NvU1;
        Autocal_Tap_A    : NvU4;
        Autocal_Tap_B    : NvU4;
        Lfsr_Stat_A      : LW_PRGNLCL_SCP_RNG_STAT0_LFSR_STAT_A_Field;
        Lfsr_Stat_B      : LW_PRGNLCL_SCP_RNG_STAT0_LFSR_STAT_B_Field;
        Rctr_Saturated_A : NvU1;
        Rctr_Saturated_B : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SCP_RNG_STAT0_Register use record
        Raw_Rand_Ready   at 0 range  0 ..  0;
        Autocal_Tap_A    at 0 range  4 ..  7;
        Autocal_Tap_B    at 0 range  8 .. 11;
        Lfsr_Stat_A      at 0 range 12 .. 12;
        Lfsr_Stat_B      at 0 range 13 .. 13;
        Rctr_Saturated_A at 0 range 16 .. 16;
        Rctr_Saturated_B at 0 range 20 .. 20;
    end record;

    LW_PRGNLCL_SCP_RNG_STAT1_AUTOCAL_RCLK_CTR_A_INIT : constant NvU16 := 16#0#;
    LW_PRGNLCL_SCP_RNG_STAT1_AUTOCAL_RCLK_CTR_B_INIT : constant NvU16 := 16#0#;

    type LW_PRGNLCL_SCP_RNG_STAT1_Register is record
        Autocal_Rclk_Ctr_A : NvU16;
        Autocal_Rclk_Ctr_B : NvU16;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SCP_RNG_STAT1_Register use record
        Autocal_Rclk_Ctr_A at 0 range  0 .. 15;
        Autocal_Rclk_Ctr_B at 0 range 16 .. 31;
    end record;

    LW_PRGNLCL_SCP_INTR_RAND_READY_NOT_PENDING           : constant NvU1 := 16#0#;
    LW_PRGNLCL_SCP_INTR_RAND_READY_PENDING               : constant NvU1 := 16#1#;
    LW_PRGNLCL_SCP_INTR_RAND_READY_RESET                 : constant NvU1 := 16#1#;
    LW_PRGNLCL_SCP_INTR_ACL_VIO_NOT_PENDING              : constant NvU1 := 16#0#;
    LW_PRGNLCL_SCP_INTR_ACL_VIO_PENDING                  : constant NvU1 := 16#1#;
    LW_PRGNLCL_SCP_INTR_ACL_VIO_RESET                    : constant NvU1 := 16#1#;
    LW_PRGNLCL_SCP_INTR_SECURITY_VIO_NOT_PENDING         : constant NvU1 := 16#0#;
    LW_PRGNLCL_SCP_INTR_SECURITY_VIO_PENDING             : constant NvU1 := 16#1#;
    LW_PRGNLCL_SCP_INTR_SECURITY_VIO_RESET               : constant NvU1 := 16#1#;
    LW_PRGNLCL_SCP_INTR_CMD_ERROR_NOT_PENDING            : constant NvU1 := 16#0#;
    LW_PRGNLCL_SCP_INTR_CMD_ERROR_PENDING                : constant NvU1 := 16#1#;
    LW_PRGNLCL_SCP_INTR_CMD_ERROR_RESET                  : constant NvU1 := 16#1#;
    LW_PRGNLCL_SCP_INTR_STEP_NOT_PENDING                 : constant NvU1 := 16#0#;
    LW_PRGNLCL_SCP_INTR_STEP_PENDING                     : constant NvU1 := 16#1#;
    LW_PRGNLCL_SCP_INTR_STEP_RESET                       : constant NvU1 := 16#1#;
    LW_PRGNLCL_SCP_INTR_RNDHOLDOFF_REQUESTED_NOT_PENDING : constant NvU1 := 16#0#;
    LW_PRGNLCL_SCP_INTR_RNDHOLDOFF_REQUESTED_PENDING     : constant NvU1 := 16#1#;
    LW_PRGNLCL_SCP_INTR_RNDHOLDOFF_REQUESTED_RESET       : constant NvU1 := 16#1#;
    LW_PRGNLCL_SCP_INTR_STALL_TIMEOUT_NOT_PENDING        : constant NvU1 := 16#0#;
    LW_PRGNLCL_SCP_INTR_STALL_TIMEOUT_PENDING            : constant NvU1 := 16#1#;
    LW_PRGNLCL_SCP_INTR_STALL_TIMEOUT_RESET              : constant NvU1 := 16#1#;

    type LW_PRGNLCL_SCP_INTR_Register is record
        Rand_Ready           : NvU1;
        Acl_Vio              : NvU1;
        Security_Vio         : NvU1;
        Cmd_Error            : NvU1;
        Step                 : NvU1;
        Rndholdoff_Requested : NvU1;
        Stall_Timeout        : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SCP_INTR_Register use record
        Rand_Ready           at 0 range  0 ..  0;
        Acl_Vio              at 0 range  8 ..  8;
        Security_Vio         at 0 range 12 .. 12;
        Cmd_Error            at 0 range 16 .. 16;
        Step                 at 0 range 20 .. 20;
        Rndholdoff_Requested at 0 range 24 .. 24;
        Stall_Timeout        at 0 range 28 .. 28;
    end record;

    type LW_PRGNLCL_SCP_INTR_EN_RAND_READY_Field is (READY_DISABLED, READY_ENABLED) with
        Size => 1;
    for LW_PRGNLCL_SCP_INTR_EN_RAND_READY_Field use (READY_DISABLED => 16#0#, READY_ENABLED => 16#1#);
    type LW_PRGNLCL_SCP_INTR_EN_ACL_VIO_Field is (VIO_DISABLED, VIO_ENABLED) with
        Size => 1;
    for LW_PRGNLCL_SCP_INTR_EN_ACL_VIO_Field use (VIO_DISABLED => 16#0#, VIO_ENABLED => 16#1#);
    type LW_PRGNLCL_SCP_INTR_EN_SECURITY_VIO_Field is (VIO_DISABLED, VIO_ENABLED) with
        Size => 1;
    for LW_PRGNLCL_SCP_INTR_EN_SECURITY_VIO_Field use (VIO_DISABLED => 16#0#, VIO_ENABLED => 16#1#);
    type LW_PRGNLCL_SCP_INTR_EN_CMD_ERROR_Field is (ERROR_DISABLED, ERROR_ENABLED) with
        Size => 1;
    for LW_PRGNLCL_SCP_INTR_EN_CMD_ERROR_Field use (ERROR_DISABLED => 16#0#, ERROR_ENABLED => 16#1#);
    type LW_PRGNLCL_SCP_INTR_EN_STEP_Field is (STEP_DISABLED, STEP_ENABLED) with
        Size => 1;
    for LW_PRGNLCL_SCP_INTR_EN_STEP_Field use (STEP_DISABLED => 16#0#, STEP_ENABLED => 16#1#);
    type LW_PRGNLCL_SCP_INTR_EN_RNDHOLDOFF_REQUESTED_Field is (REQUESTED_DISABLED, REQUESTED_ENABLED) with
        Size => 1;
    for LW_PRGNLCL_SCP_INTR_EN_RNDHOLDOFF_REQUESTED_Field use (REQUESTED_DISABLED => 16#0#, REQUESTED_ENABLED => 16#1#);
    type LW_PRGNLCL_SCP_INTR_EN_STALL_TIMEOUT_Field is (TIMEOUT_DISABLED, TIMEOUT_ENABLED) with
        Size => 1;
    for LW_PRGNLCL_SCP_INTR_EN_STALL_TIMEOUT_Field use (TIMEOUT_DISABLED => 16#0#, TIMEOUT_ENABLED => 16#1#);

    type LW_PRGNLCL_SCP_INTR_EN_Register is record
        Rand_Ready           : LW_PRGNLCL_SCP_INTR_EN_RAND_READY_Field;
        Acl_Vio              : LW_PRGNLCL_SCP_INTR_EN_ACL_VIO_Field;
        Security_Vio         : LW_PRGNLCL_SCP_INTR_EN_SECURITY_VIO_Field;
        Cmd_Error            : LW_PRGNLCL_SCP_INTR_EN_CMD_ERROR_Field;
        Step                 : LW_PRGNLCL_SCP_INTR_EN_STEP_Field;
        Rndholdoff_Requested : LW_PRGNLCL_SCP_INTR_EN_RNDHOLDOFF_REQUESTED_Field;
        Stall_Timeout        : LW_PRGNLCL_SCP_INTR_EN_STALL_TIMEOUT_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SCP_INTR_EN_Register use record
        Rand_Ready           at 0 range  0 ..  0;
        Acl_Vio              at 0 range  8 ..  8;
        Security_Vio         at 0 range 12 .. 12;
        Cmd_Error            at 0 range 16 .. 16;
        Step                 at 0 range 20 .. 20;
        Rndholdoff_Requested at 0 range 24 .. 24;
        Stall_Timeout        at 0 range 28 .. 28;
    end record;

    type LW_PRGNLCL_SCP_ACL_VIO_VIOLATION_Field is (VIOLATION_NOT_PENDING, VIOLATION_PENDING) with
        Size => 1;
    for LW_PRGNLCL_SCP_ACL_VIO_VIOLATION_Field use (VIOLATION_NOT_PENDING => 16#0#, VIOLATION_PENDING => 16#1#);
    LW_PRGNLCL_SCP_ACL_VIO_CHMOD_RELAX_VIO_NOT_PENDING : constant NvU1 := 16#0#;
    LW_PRGNLCL_SCP_ACL_VIO_CHMOD_RELAX_VIO_PENDING     : constant NvU1 := 16#1#;
    LW_PRGNLCL_SCP_ACL_VIO_CHMOD_RELAX_VIO_CLEAR       : constant NvU1 := 16#1#;
    LW_PRGNLCL_SCP_ACL_VIO_FETCH_VIO_NOT_PENDING       : constant NvU1 := 16#0#;
    LW_PRGNLCL_SCP_ACL_VIO_FETCH_VIO_PENDING           : constant NvU1 := 16#1#;
    LW_PRGNLCL_SCP_ACL_VIO_FETCH_VIO_CLEAR             : constant NvU1 := 16#1#;
    LW_PRGNLCL_SCP_ACL_VIO_WR_VIO_NOT_PENDING          : constant NvU1 := 16#0#;
    LW_PRGNLCL_SCP_ACL_VIO_WR_VIO_PENDING              : constant NvU1 := 16#1#;
    LW_PRGNLCL_SCP_ACL_VIO_WR_VIO_CLEAR                : constant NvU1 := 16#1#;

    type LW_PRGNLCL_SCP_ACL_VIO_Register is record
        Violation       : LW_PRGNLCL_SCP_ACL_VIO_VIOLATION_Field;
        Chmod_Relax_Vio : NvU1;
        Fetch_Vio       : NvU1;
        Wr_Vio          : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SCP_ACL_VIO_Register use record
        Violation       at 0 range 31 .. 31;
        Chmod_Relax_Vio at 0 range  8 ..  8;
        Fetch_Vio       at 0 range  4 ..  4;
        Wr_Vio          at 0 range  0 ..  0;
    end record;

    type LW_PRGNLCL_SCP_SECURITY_VIO_VIOLATION_Field is (VIOLATION_NOT_PENDING, VIOLATION_PENDING) with
        Size => 1;
    for LW_PRGNLCL_SCP_SECURITY_VIO_VIOLATION_Field use (VIOLATION_NOT_PENDING => 16#0#, VIOLATION_PENDING => 16#1#);
    LW_PRGNLCL_SCP_SECURITY_VIO_PUSH_VIO_SC_INIT : constant NvU2 := 16#0#;
    type LW_PRGNLCL_SCP_SECURITY_VIO_PUSH_VIO_Field is (VIO_NOT_PENDING, VIO_PENDING) with
        Size => 1;
    for LW_PRGNLCL_SCP_SECURITY_VIO_PUSH_VIO_Field use (VIO_NOT_PENDING => 16#0#, VIO_PENDING => 16#1#);
    LW_PRGNLCL_SCP_SECURITY_VIO_PUSH_CHANGE_VIO_SC_INIT : constant NvU2 := 16#0#;
    type LW_PRGNLCL_SCP_SECURITY_VIO_PUSH_CHANGE_VIO_Field is (VIO_NOT_PENDING, VIO_PENDING) with
        Size => 1;
    for LW_PRGNLCL_SCP_SECURITY_VIO_PUSH_CHANGE_VIO_Field use (VIO_NOT_PENDING => 16#0#, VIO_PENDING => 16#1#);
    LW_PRGNLCL_SCP_SECURITY_VIO_FETCH_VIO_SC_INIT : constant NvU2 := 16#0#;
    type LW_PRGNLCL_SCP_SECURITY_VIO_FETCH_VIO_Field is (VIO_NOT_PENDING, VIO_PENDING) with
        Size => 1;
    for LW_PRGNLCL_SCP_SECURITY_VIO_FETCH_VIO_Field use (VIO_NOT_PENDING => 16#0#, VIO_PENDING => 16#1#);
    LW_PRGNLCL_SCP_SECURITY_VIO_LOAD_TRACE_VIO_SC_INIT : constant NvU2 := 16#0#;
    type LW_PRGNLCL_SCP_SECURITY_VIO_LOAD_TRACE_VIO_Field is (VIO_NOT_PENDING, VIO_PENDING) with
        Size => 1;
    for LW_PRGNLCL_SCP_SECURITY_VIO_LOAD_TRACE_VIO_Field use (VIO_NOT_PENDING => 16#0#, VIO_PENDING => 16#1#);
    LW_PRGNLCL_SCP_SECURITY_VIO_LOOP_TRACE_VIO_SC_INIT : constant NvU2 := 16#0#;
    type LW_PRGNLCL_SCP_SECURITY_VIO_LOOP_TRACE_VIO_Field is (VIO_NOT_PENDING, VIO_PENDING) with
        Size => 1;
    for LW_PRGNLCL_SCP_SECURITY_VIO_LOOP_TRACE_VIO_Field use (VIO_NOT_PENDING => 16#0#, VIO_PENDING => 16#1#);

    type LW_PRGNLCL_SCP_SECURITY_VIO_Register is record
        Violation          : LW_PRGNLCL_SCP_SECURITY_VIO_VIOLATION_Field;
        Push_Vio_Sc        : NvU2;
        Push_Vio           : LW_PRGNLCL_SCP_SECURITY_VIO_PUSH_VIO_Field;
        Push_Change_Vio_Sc : NvU2;
        Push_Change_Vio    : LW_PRGNLCL_SCP_SECURITY_VIO_PUSH_CHANGE_VIO_Field;
        Fetch_Vio_Sc       : NvU2;
        Fetch_Vio          : LW_PRGNLCL_SCP_SECURITY_VIO_FETCH_VIO_Field;
        Load_Trace_Vio_Sc  : NvU2;
        Load_Trace_Vio     : LW_PRGNLCL_SCP_SECURITY_VIO_LOAD_TRACE_VIO_Field;
        Loop_Trace_Vio_Sc  : NvU2;
        Loop_Trace_Vio     : LW_PRGNLCL_SCP_SECURITY_VIO_LOOP_TRACE_VIO_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SCP_SECURITY_VIO_Register use record
        Violation          at 0 range 31 .. 31;
        Push_Vio_Sc        at 0 range 25 .. 26;
        Push_Vio           at 0 range 24 .. 24;
        Push_Change_Vio_Sc at 0 range 21 .. 22;
        Push_Change_Vio    at 0 range 20 .. 20;
        Fetch_Vio_Sc       at 0 range 17 .. 18;
        Fetch_Vio          at 0 range 16 .. 16;
        Load_Trace_Vio_Sc  at 0 range  5 ..  6;
        Load_Trace_Vio     at 0 range  4 ..  4;
        Loop_Trace_Vio_Sc  at 0 range  1 ..  2;
        Loop_Trace_Vio     at 0 range  0 ..  0;
    end record;

    LW_PRGNLCL_SCP_CMD_ERROR_UNDEFINED_FALSE              : constant NvU1 := 16#0#;
    LW_PRGNLCL_SCP_CMD_ERROR_UNDEFINED_TRUE               : constant NvU1 := 16#1#;
    LW_PRGNLCL_SCP_CMD_ERROR_UNDEFINED_CLEAR              : constant NvU1 := 16#1#;
    LW_PRGNLCL_SCP_CMD_ERROR_SEQ_EMPTY_FALSE              : constant NvU1 := 16#0#;
    LW_PRGNLCL_SCP_CMD_ERROR_SEQ_EMPTY_TRUE               : constant NvU1 := 16#1#;
    LW_PRGNLCL_SCP_CMD_ERROR_SEQ_EMPTY_CLEAR              : constant NvU1 := 16#1#;
    LW_PRGNLCL_SCP_CMD_ERROR_SEQ_OVERFLOW_FALSE           : constant NvU1 := 16#0#;
    LW_PRGNLCL_SCP_CMD_ERROR_SEQ_OVERFLOW_TRUE            : constant NvU1 := 16#1#;
    LW_PRGNLCL_SCP_CMD_ERROR_SEQ_OVERFLOW_CLEAR           : constant NvU1 := 16#1#;
    LW_PRGNLCL_SCP_CMD_ERROR_SEQ_INST_WHILE_LOADING_FALSE : constant NvU1 := 16#0#;
    LW_PRGNLCL_SCP_CMD_ERROR_SEQ_INST_WHILE_LOADING_TRUE  : constant NvU1 := 16#1#;
    LW_PRGNLCL_SCP_CMD_ERROR_SEQ_INST_WHILE_LOADING_CLEAR : constant NvU1 := 16#1#;
    LW_PRGNLCL_SCP_CMD_ERROR_SIG_INSECURE_FALSE           : constant NvU1 := 16#0#;
    LW_PRGNLCL_SCP_CMD_ERROR_SIG_INSECURE_TRUE            : constant NvU1 := 16#1#;
    LW_PRGNLCL_SCP_CMD_ERROR_SIG_INSECURE_CLEAR           : constant NvU1 := 16#1#;
    LW_PRGNLCL_SCP_CMD_ERROR_SIG_INVALID_FALSE            : constant NvU1 := 16#0#;
    LW_PRGNLCL_SCP_CMD_ERROR_SIG_INVALID_TRUE             : constant NvU1 := 16#1#;
    LW_PRGNLCL_SCP_CMD_ERROR_SIG_INVALID_CLEAR            : constant NvU1 := 16#1#;
    LW_PRGNLCL_SCP_CMD_ERROR_CHMOD_INSECURE_FALSE         : constant NvU1 := 16#0#;
    LW_PRGNLCL_SCP_CMD_ERROR_CHMOD_INSECURE_TRUE          : constant NvU1 := 16#1#;
    LW_PRGNLCL_SCP_CMD_ERROR_CHMOD_INSECURE_CLEAR         : constant NvU1 := 16#1#;
    LW_PRGNLCL_SCP_CMD_ERROR_SECRET_INSECURE_FALSE        : constant NvU1 := 16#0#;
    LW_PRGNLCL_SCP_CMD_ERROR_SECRET_INSECURE_TRUE         : constant NvU1 := 16#1#;
    LW_PRGNLCL_SCP_CMD_ERROR_SECRET_INSECURE_CLEAR        : constant NvU1 := 16#1#;

    type LW_PRGNLCL_SCP_CMD_ERROR_Register is record
        Undefined              : NvU1;
        Seq_Empty              : NvU1;
        Seq_Overflow           : NvU1;
        Seq_Inst_While_Loading : NvU1;
        Sig_Insecure           : NvU1;
        Sig_Invalid            : NvU1;
        Chmod_Insecure         : NvU1;
        Secret_Insecure        : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SCP_CMD_ERROR_Register use record
        Undefined              at 0 range  0 ..  0;
        Seq_Empty              at 0 range  4 ..  4;
        Seq_Overflow           at 0 range  8 ..  8;
        Seq_Inst_While_Loading at 0 range 12 .. 12;
        Sig_Insecure           at 0 range 16 .. 16;
        Sig_Invalid            at 0 range 20 .. 20;
        Chmod_Insecure         at 0 range 24 .. 24;
        Secret_Insecure        at 0 range 28 .. 28;
    end record;

    LW_PRGNLCL_SCP_RNDCTL0_HOLDOFF_INIT_LOWER_INIT : constant NvU32 := 16#1c9_c380#;

    type LW_PRGNLCL_SCP_RNDCTL0_Register is record
        Holdoff_Init_Lower : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SCP_RNDCTL0_Register use record
        Holdoff_Init_Lower at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_SCP_RNDCTL1_HOLDOFF_INIT_UPPER_ZERO : constant NvU16 := 16#0#;
    LW_PRGNLCL_SCP_RNDCTL1_HOLDOFF_INTRA_MASK_INIT : constant NvU16 := 16#ffff#;

    type LW_PRGNLCL_SCP_RNDCTL1_Register is record
        Holdoff_Init_Upper : NvU16;
        Holdoff_Intra_Mask : NvU16;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SCP_RNDCTL1_Register use record
        Holdoff_Init_Upper at 0 range  0 .. 15;
        Holdoff_Intra_Mask at 0 range 16 .. 31;
    end record;

    LW_PRGNLCL_SCP_RNDCTL2_COMPRESS_CNT_INIT : constant NvU16 := 16#0#;

    type LW_PRGNLCL_SCP_RNDCTL2_Register is record
        Compress_Cnt : NvU16;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SCP_RNDCTL2_Register use record
        Compress_Cnt at 0 range 0 .. 15;
    end record;

    type LW_PRGNLCL_SCP_RNDCTL3_TRIG_LFSR_RELOAD_A_Field is (A_INIT, A_TRIGGER) with
        Size => 1;
    for LW_PRGNLCL_SCP_RNDCTL3_TRIG_LFSR_RELOAD_A_Field use (A_INIT => 16#0#, A_TRIGGER => 16#1#);
    type LW_PRGNLCL_SCP_RNDCTL3_TRIG_LFSR_RELOAD_B_Field is (B_INIT, B_TRIGGER) with
        Size => 1;
    for LW_PRGNLCL_SCP_RNDCTL3_TRIG_LFSR_RELOAD_B_Field use (B_INIT => 16#0#, B_TRIGGER => 16#1#);

    type LW_PRGNLCL_SCP_RNDCTL3_Register is record
        Trig_Lfsr_Reload_A : LW_PRGNLCL_SCP_RNDCTL3_TRIG_LFSR_RELOAD_A_Field;
        Trig_Lfsr_Reload_B : LW_PRGNLCL_SCP_RNDCTL3_TRIG_LFSR_RELOAD_B_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SCP_RNDCTL3_Register use record
        Trig_Lfsr_Reload_A at 0 range 12 .. 12;
        Trig_Lfsr_Reload_B at 0 range 16 .. 16;
    end record;

    LW_PRGNLCL_SCP_RNDCTL4_POLYNOMIAL_A_INIT : constant NvU32 := 16#8020_0003#;

    type LW_PRGNLCL_SCP_RNDCTL4_Register is record
        Polynomial_A : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SCP_RNDCTL4_Register use record
        Polynomial_A at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_SCP_RNDCTL5_LFSR_INIT_A_INIT : constant NvU32 := 16#dead_beef#;

    type LW_PRGNLCL_SCP_RNDCTL5_Register is record
        Lfsr_Init_A : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SCP_RNDCTL5_Register use record
        Lfsr_Init_A at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_SCP_RNDCTL6_POLYNOMIAL_B_INIT : constant NvU32 := 16#8020_0003#;

    type LW_PRGNLCL_SCP_RNDCTL6_Register is record
        Polynomial_B : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SCP_RNDCTL6_Register use record
        Polynomial_B at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_SCP_RNDCTL7_LFSR_INIT_B_INIT : constant NvU32 := 16#beef_dead#;

    type LW_PRGNLCL_SCP_RNDCTL7_Register is record
        Lfsr_Init_B : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SCP_RNDCTL7_Register use record
        Lfsr_Init_B at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_SCP_RNDCTL8_AUTOCAL_LOW_TARGET_A_INIT : constant NvU16 := 16#0#;
    LW_PRGNLCL_SCP_RNDCTL8_AUTOCAL_LOW_TARGET_B_INIT : constant NvU16 := 16#0#;

    type LW_PRGNLCL_SCP_RNDCTL8_Register is record
        Autocal_Low_Target_A : NvU16;
        Autocal_Low_Target_B : NvU16;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SCP_RNDCTL8_Register use record
        Autocal_Low_Target_A at 0 range  0 .. 15;
        Autocal_Low_Target_B at 0 range 16 .. 31;
    end record;

    LW_PRGNLCL_SCP_RNDCTL9_AUTOCAL_HIGH_TARGET_A_INIT : constant NvU16 := 16#0#;
    LW_PRGNLCL_SCP_RNDCTL9_AUTOCAL_HIGH_TARGET_B_INIT : constant NvU16 := 16#0#;

    type LW_PRGNLCL_SCP_RNDCTL9_Register is record
        Autocal_High_Target_A : NvU16;
        Autocal_High_Target_B : NvU16;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SCP_RNDCTL9_Register use record
        Autocal_High_Target_A at 0 range  0 .. 15;
        Autocal_High_Target_B at 0 range 16 .. 31;
    end record;

    LW_PRGNLCL_SCP_RNDCTL10_AUTOCAL_SAMPLE_PERIOD_A_INIT : constant NvU16 := 16#f#;
    LW_PRGNLCL_SCP_RNDCTL10_AUTOCAL_SAMPLE_PERIOD_B_INIT : constant NvU16 := 16#f#;

    type LW_PRGNLCL_SCP_RNDCTL10_Register is record
        Autocal_Sample_Period_A : NvU16;
        Autocal_Sample_Period_B : NvU16;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SCP_RNDCTL10_Register use record
        Autocal_Sample_Period_A at 0 range  0 .. 15;
        Autocal_Sample_Period_B at 0 range 16 .. 31;
    end record;

    LW_PRGNLCL_SCP_RNDCTL11_AUTOCAL_ENABLE_INIT       : constant NvU1 := 16#0#;
    LW_PRGNLCL_SCP_RNDCTL11_AUTOCAL_ENABLE_TRUE       : constant NvU1 := 16#1#;
    LW_PRGNLCL_SCP_RNDCTL11_AUTOCAL_ENABLE_FALSE      : constant NvU1 := 16#0#;
    LW_PRGNLCL_SCP_RNDCTL11_AUTOCAL_MASTERSLAVE_INIT  : constant NvU1 := 16#0#;
    LW_PRGNLCL_SCP_RNDCTL11_AUTOCAL_MASTERSLAVE_TRUE  : constant NvU1 := 16#1#;
    LW_PRGNLCL_SCP_RNDCTL11_AUTOCAL_MASTERSLAVE_FALSE : constant NvU1 := 16#0#;
    LW_PRGNLCL_SCP_RNDCTL11_SYNCH_RAND_A_INIT         : constant NvU1 := 16#0#;
    LW_PRGNLCL_SCP_RNDCTL11_SYNCH_RAND_A_TRUE         : constant NvU1 := 16#1#;
    LW_PRGNLCL_SCP_RNDCTL11_SYNCH_RAND_A_FALSE        : constant NvU1 := 16#0#;
    LW_PRGNLCL_SCP_RNDCTL11_SYNCH_RAND_B_INIT         : constant NvU1 := 16#0#;
    LW_PRGNLCL_SCP_RNDCTL11_SYNCH_RAND_B_TRUE         : constant NvU1 := 16#1#;
    LW_PRGNLCL_SCP_RNDCTL11_SYNCH_RAND_B_FALSE        : constant NvU1 := 16#0#;
    type LW_PRGNLCL_SCP_RNDCTL11_RAND_SAMPLE_SELECT_A_Field is (A_OSC, A_AUTOCAL, A_LFSR, A_ZERO) with
        Size => 2;
    for LW_PRGNLCL_SCP_RNDCTL11_RAND_SAMPLE_SELECT_A_Field use (A_OSC => 16#0#, A_AUTOCAL => 16#1#, A_LFSR => 16#2#, A_ZERO => 16#3#);
    type LW_PRGNLCL_SCP_RNDCTL11_RAND_SAMPLE_SELECT_B_Field is (B_OSC, B_AUTOCAL, B_LFSR, B_ZERO) with
        Size => 2;
    for LW_PRGNLCL_SCP_RNDCTL11_RAND_SAMPLE_SELECT_B_Field use (B_OSC => 16#0#, B_AUTOCAL => 16#1#, B_LFSR => 16#2#, B_ZERO => 16#3#);
    LW_PRGNLCL_SCP_RNDCTL11_AUTOCAL_STATIC_TAP_A_INIT      : constant NvU4 := 16#f#;
    LW_PRGNLCL_SCP_RNDCTL11_AUTOCAL_STATIC_TAP_B_INIT      : constant NvU4 := 16#f#;
    LW_PRGNLCL_SCP_RNDCTL11_MIN_AUTO_TAP_INIT              : constant NvU4 := 16#0#;
    LW_PRGNLCL_SCP_RNDCTL11_AUTOCAL_HOLDOFF_DELAY_INIT     : constant NvU4 := 16#1#;
    LW_PRGNLCL_SCP_RNDCTL11_AUTOCAL_ASYNCH_HOLD_DELAY_INIT : constant NvU7 := 16#0#;
    type LW_PRGNLCL_SCP_RNDCTL11_AUTOCAL_SAFE_MODE_Field is (MODE_DISABLE, MODE_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_SCP_RNDCTL11_AUTOCAL_SAFE_MODE_Field use (MODE_DISABLE => 16#0#, MODE_ENABLE => 16#1#);

    type LW_PRGNLCL_SCP_RNDCTL11_Register is record
        Autocal_Enable            : NvU1;
        Autocal_Masterslave       : NvU1;
        Synch_Rand_A              : NvU1;
        Synch_Rand_B              : NvU1;
        Rand_Sample_Select_A      : LW_PRGNLCL_SCP_RNDCTL11_RAND_SAMPLE_SELECT_A_Field;
        Rand_Sample_Select_B      : LW_PRGNLCL_SCP_RNDCTL11_RAND_SAMPLE_SELECT_B_Field;
        Autocal_Static_Tap_A      : NvU4;
        Autocal_Static_Tap_B      : NvU4;
        Min_Auto_Tap              : NvU4;
        Autocal_Holdoff_Delay     : NvU4;
        Autocal_Asynch_Hold_Delay : NvU7;
        Autocal_Safe_Mode         : LW_PRGNLCL_SCP_RNDCTL11_AUTOCAL_SAFE_MODE_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SCP_RNDCTL11_Register use record
        Autocal_Enable            at 0 range  0 ..  0;
        Autocal_Masterslave       at 0 range  1 ..  1;
        Synch_Rand_A              at 0 range  2 ..  2;
        Synch_Rand_B              at 0 range  3 ..  3;
        Rand_Sample_Select_A      at 0 range  4 ..  5;
        Rand_Sample_Select_B      at 0 range  6 ..  7;
        Autocal_Static_Tap_A      at 0 range  8 .. 11;
        Autocal_Static_Tap_B      at 0 range 12 .. 15;
        Min_Auto_Tap              at 0 range 16 .. 19;
        Autocal_Holdoff_Delay     at 0 range 20 .. 23;
        Autocal_Asynch_Hold_Delay at 0 range 24 .. 30;
        Autocal_Safe_Mode         at 0 range 31 .. 31;
    end record;

    type LW_PRGNLCL_SCP_CTL_P2PRX_SFK_FALLBACK_MODE_Field is (MODE_FALSE, MODE_TRUE) with
        Size => 1;
    for LW_PRGNLCL_SCP_CTL_P2PRX_SFK_FALLBACK_MODE_Field use (MODE_FALSE => 16#0#, MODE_TRUE => 16#1#);
    LW_PRGNLCL_SCP_CTL_P2PRX_SFK_REQUEST_RELOAD_IDLE    : constant NvU1 := 16#0#;
    LW_PRGNLCL_SCP_CTL_P2PRX_SFK_REQUEST_RELOAD_PENDING : constant NvU1 := 16#1#;
    LW_PRGNLCL_SCP_CTL_P2PRX_SFK_REQUEST_RELOAD_TASK    : constant NvU1 := 16#1#;
    type LW_PRGNLCL_SCP_CTL_P2PRX_SFK_LOADED_Field is (LOADED_FALSE, LOADED_TRUE) with
        Size => 1;
    for LW_PRGNLCL_SCP_CTL_P2PRX_SFK_LOADED_Field use (LOADED_FALSE => 16#0#, LOADED_TRUE => 16#1#);
    LW_PRGNLCL_SCP_CTL_P2PRX_PDI_REQUEST_RELOAD_IDLE    : constant NvU1 := 16#0#;
    LW_PRGNLCL_SCP_CTL_P2PRX_PDI_REQUEST_RELOAD_PENDING : constant NvU1 := 16#1#;
    LW_PRGNLCL_SCP_CTL_P2PRX_PDI_REQUEST_RELOAD_TASK    : constant NvU1 := 16#1#;
    type LW_PRGNLCL_SCP_CTL_P2PRX_PDI_LOADED_Field is (LOADED_FALSE, LOADED_TRUE) with
        Size => 1;
    for LW_PRGNLCL_SCP_CTL_P2PRX_PDI_LOADED_Field use (LOADED_FALSE => 16#0#, LOADED_TRUE => 16#1#);

    type LW_PRGNLCL_SCP_CTL_P2PRX_Register is record
        Sfk_Fallback_Mode  : LW_PRGNLCL_SCP_CTL_P2PRX_SFK_FALLBACK_MODE_Field;
        Sfk_Request_Reload : NvU1;
        Sfk_Loaded         : LW_PRGNLCL_SCP_CTL_P2PRX_SFK_LOADED_Field;
        Pdi_Request_Reload : NvU1;
        Pdi_Loaded         : LW_PRGNLCL_SCP_CTL_P2PRX_PDI_LOADED_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SCP_CTL_P2PRX_Register use record
        Sfk_Fallback_Mode  at 0 range 0 .. 0;
        Sfk_Request_Reload at 0 range 2 .. 2;
        Sfk_Loaded         at 0 range 3 .. 3;
        Pdi_Request_Reload at 0 range 6 .. 6;
        Pdi_Loaded         at 0 range 7 .. 7;
    end record;

    LW_PRGNLCL_SCP_PDI_LO_DATA_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_SCP_PDI_LO_Register is record
        Data : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SCP_PDI_LO_Register use record
        Data at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_SCP_PDI_HI_DATA_INIT : constant NvU32 := 16#0#;

    type LW_PRGNLCL_SCP_PDI_HI_Register is record
        Data : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SCP_PDI_HI_Register use record
        Data at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_SCP_SCC_DEBUG_HWCFG0_RSEED_HOLDOFF_INIT_INIT  : constant NvU16 := 16#20#;
    LW_PRGNLCL_SCP_SCC_DEBUG_HWCFG0_RSEED_HOLDOFF_INTRA_INIT : constant NvU16 := 16#f#;

    type LW_PRGNLCL_SCP_SCC_DEBUG_HWCFG0_Register is record
        Rseed_Holdoff_Init  : NvU16;
        Rseed_Holdoff_Intra : NvU16;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SCP_SCC_DEBUG_HWCFG0_Register use record
        Rseed_Holdoff_Init  at 0 range  0 .. 15;
        Rseed_Holdoff_Intra at 0 range 16 .. 31;
    end record;

    LW_PRGNLCL_SCP_SCC_DEBUG_HWCFG1_RSEED_TMOUT_MAX_INIT : constant NvU32 := 16#fff#;

    type LW_PRGNLCL_SCP_SCC_DEBUG_HWCFG1_Register is record
        Rseed_Tmout_Max : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SCP_SCC_DEBUG_HWCFG1_Register use record
        Rseed_Tmout_Max at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_SCP_SCC_DEBUG_HWCFG2_PRNG_RESEED_PERIOD_INIT : constant NvU32 := 16#7fff_ffff#;

    type LW_PRGNLCL_SCP_SCC_DEBUG_HWCFG2_Register is record
        Prng_Reseed_Period : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SCP_SCC_DEBUG_HWCFG2_Register use record
        Prng_Reseed_Period at 0 range 0 .. 31;
    end record;

    type LW_PRGNLCL_SCP_SCC_DEBUG_STAT0_Register is record
        Rseed_Tmout_Cnt : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SCP_SCC_DEBUG_STAT0_Register use record
        Rseed_Tmout_Cnt at 0 range 0 .. 31;
    end record;

    type LW_PRGNLCL_SCP_SCC_DEBUG_STAT1_Register is record
        Rseed_Bit_Cnt : NvU6;
        Rseed_Valid   : NvU1;
        Rseed_Tmout   : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SCP_SCC_DEBUG_STAT1_Register use record
        Rseed_Bit_Cnt at 0 range 0 .. 5;
        Rseed_Valid   at 0 range 8 .. 8;
        Rseed_Tmout   at 0 range 9 .. 9;
    end record;

    LW_PRGNLCL_SCP_PUBKEYC_OFFS_INIT   : constant NvU8 := 16#0#;
    LW_PRGNLCL_SCP_PUBKEYC_AINCR_INIT  : constant NvU1 := 16#0#;
    LW_PRGNLCL_SCP_PUBKEYC_AINCR_TRUE  : constant NvU1 := 16#1#;
    LW_PRGNLCL_SCP_PUBKEYC_AINCR_FALSE : constant NvU1 := 16#0#;
    LW_PRGNLCL_SCP_PUBKEYC_RSA1_N_OFFS : constant      := 16#0#;
    LW_PRGNLCL_SCP_PUBKEYC_RSA1_N_SIZE : constant      := 16#180#;
    LW_PRGNLCL_SCP_PUBKEYC_RSA1_E_OFFS : constant      := 16#180#;
    LW_PRGNLCL_SCP_PUBKEYC_RSA1_E_SIZE : constant      := 16#20#;
    LW_PRGNLCL_SCP_PUBKEYC_ECC1_X_OFFS : constant      := 16#1a0#;
    LW_PRGNLCL_SCP_PUBKEYC_ECC1_X_SIZE : constant      := 16#20#;
    LW_PRGNLCL_SCP_PUBKEYC_ECC1_Y_OFFS : constant      := 16#1c0#;
    LW_PRGNLCL_SCP_PUBKEYC_ECC1_Y_SIZE : constant      := 16#20#;

    type LW_PRGNLCL_SCP_PUBKEYC_Register is record
        Offs  : NvU8;
        Aincr : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SCP_PUBKEYC_Register use record
        Offs  at 0 range  2 ..  9;
        Aincr at 0 range 31 .. 31;
    end record;

    type LW_PRGNLCL_SCP_PUBKEYD_Register is record
        Data : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SCP_PUBKEYD_Register use record
        Data at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_SCP_PK_ADDR_OFFSET_DEFT : constant NvU12 := 16#0#;
    type LW_PRGNLCL_SCP_PK_ADDR_AINCR_Field is (AINCR_DISABLE, AINCR_ENABLE) with
        Size => 1;
    for LW_PRGNLCL_SCP_PK_ADDR_AINCR_Field use (AINCR_DISABLE => 16#0#, AINCR_ENABLE => 16#1#);

    type LW_PRGNLCL_SCP_PK_ADDR_Register is record
        Offset : NvU12;
        Aincr  : LW_PRGNLCL_SCP_PK_ADDR_AINCR_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SCP_PK_ADDR_Register use record
        Offset at 0 range  0 .. 11;
        Aincr  at 0 range 31 .. 31;
    end record;

    type LW_PRGNLCL_SCP_PK_DATA_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_SCP_PK_DATA_Register use record
        Val at 0 range 0 .. 31;
    end record;

    type LW_PRGNLCL_TFBIF_CTL_CLR_BWCOUNT_Field is (BWCOUNT_CLEAR, BWCOUNT_SET) with
        Size => 1;
    for LW_PRGNLCL_TFBIF_CTL_CLR_BWCOUNT_Field use (BWCOUNT_CLEAR => 16#0#, BWCOUNT_SET => 16#1#);
    LW_PRGNLCL_TFBIF_CTL_ENABLE_INIT  : constant NvU1 := 16#1#;
    LW_PRGNLCL_TFBIF_CTL_ENABLE_TRUE  : constant NvU1 := 16#1#;
    LW_PRGNLCL_TFBIF_CTL_ENABLE_FALSE : constant NvU1 := 16#0#;
    type LW_PRGNLCL_TFBIF_CTL_CLR_IDLEWDERR_Field is (IDLEWDERR_CLEAR, IDLEWDERR_SET) with
        Size => 1;
    for LW_PRGNLCL_TFBIF_CTL_CLR_IDLEWDERR_Field use (IDLEWDERR_CLEAR => 16#0#, IDLEWDERR_SET => 16#1#);
    type LW_PRGNLCL_TFBIF_CTL_RESET_Field is (RESET_CLEAR, RESET_SET) with
        Size => 1;
    for LW_PRGNLCL_TFBIF_CTL_RESET_Field use (RESET_CLEAR => 16#0#, RESET_SET => 16#1#);
    type LW_PRGNLCL_TFBIF_CTL_IDLE_Field is (IDLE_FALSE, IDLE_TRUE) with
        Size => 1;
    for LW_PRGNLCL_TFBIF_CTL_IDLE_Field use (IDLE_FALSE => 16#0#, IDLE_TRUE => 16#1#);
    type LW_PRGNLCL_TFBIF_CTL_IDLEWDERR_Field is (IDLEWDERR_FALSE, IDLEWDERR_TRUE) with
        Size => 1;
    for LW_PRGNLCL_TFBIF_CTL_IDLEWDERR_Field use (IDLEWDERR_FALSE => 16#0#, IDLEWDERR_TRUE => 16#1#);
    type LW_PRGNLCL_TFBIF_CTL_SRTOUT_Field is (SRTOUT_FALSE, SRTOUT_TRUE) with
        Size => 1;
    for LW_PRGNLCL_TFBIF_CTL_SRTOUT_Field use (SRTOUT_FALSE => 16#0#, SRTOUT_TRUE => 16#1#);
    type LW_PRGNLCL_TFBIF_CTL_CLR_SRTOUT_Field is (SRTOUT_CLEAR, SRTOUT_SET) with
        Size => 1;
    for LW_PRGNLCL_TFBIF_CTL_CLR_SRTOUT_Field use (SRTOUT_CLEAR => 16#0#, SRTOUT_SET => 16#1#);
    LW_PRGNLCL_TFBIF_CTL_SRTOVAL_INIT : constant NvU4 := 16#0#;
    type LW_PRGNLCL_TFBIF_CTL_VPR_Field is (VPR_FALSE, VPR_TRUE) with
        Size => 1;
    for LW_PRGNLCL_TFBIF_CTL_VPR_Field use (VPR_FALSE => 16#0#, VPR_TRUE => 16#1#);

    type LW_PRGNLCL_TFBIF_CTL_Register is record
        Clr_Bwcount   : LW_PRGNLCL_TFBIF_CTL_CLR_BWCOUNT_Field;
        Enable        : NvU1;
        Clr_Idlewderr : LW_PRGNLCL_TFBIF_CTL_CLR_IDLEWDERR_Field;
        Reset         : LW_PRGNLCL_TFBIF_CTL_RESET_Field;
        Idle          : LW_PRGNLCL_TFBIF_CTL_IDLE_Field;
        Idlewderr     : LW_PRGNLCL_TFBIF_CTL_IDLEWDERR_Field;
        Srtout        : LW_PRGNLCL_TFBIF_CTL_SRTOUT_Field;
        Clr_Srtout    : LW_PRGNLCL_TFBIF_CTL_CLR_SRTOUT_Field;
        Srtoval       : NvU4;
        Vpr           : LW_PRGNLCL_TFBIF_CTL_VPR_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_TFBIF_CTL_Register use record
        Clr_Bwcount   at 0 range  0 ..  0;
        Enable        at 0 range  1 ..  1;
        Clr_Idlewderr at 0 range  2 ..  2;
        Reset         at 0 range  3 ..  3;
        Idle          at 0 range  4 ..  4;
        Idlewderr     at 0 range  5 ..  5;
        Srtout        at 0 range  6 ..  6;
        Clr_Srtout    at 0 range  7 ..  7;
        Srtoval       at 0 range  8 .. 11;
        Vpr           at 0 range 12 .. 12;
    end record;

    LW_PRGNLCL_TFBIF_WRR_RDP_EXT_WEIGHT_INIT : constant NvU16 := 16#0#;
    LW_PRGNLCL_TFBIF_WRR_RDP_INT_WEIGHT_INIT : constant NvU16 := 16#0#;

    type LW_PRGNLCL_TFBIF_WRR_RDP_Register is record
        Ext_Weight : NvU16;
        Int_Weight : NvU16;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_TFBIF_WRR_RDP_Register use record
        Ext_Weight at 0 range  0 .. 15;
        Int_Weight at 0 range 16 .. 31;
    end record;

    LW_PRGNLCL_TFBIF_ATT_PRIV_LEVEL_MASK_READ_PROTECTION_DEFAULT_PRIV_LEVEL   : constant NvU4 := 16#f#;
    LW_PRGNLCL_TFBIF_ATT_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_ENABLED   : constant NvU4 := 16#f#;
    LW_PRGNLCL_TFBIF_ATT_PRIV_LEVEL_MASK_READ_PROTECTION_ALL_LEVELS_DISABLED  : constant NvU4 := 16#0#;
    LW_PRGNLCL_TFBIF_ATT_PRIV_LEVEL_MASK_READ_PROTECTION_ONLY_LEVEL3_ENABLED  : constant NvU4 := 16#8#;
    LW_PRGNLCL_TFBIF_ATT_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_ENABLED  : constant NvU4 := 16#f#;
    LW_PRGNLCL_TFBIF_ATT_PRIV_LEVEL_MASK_WRITE_PROTECTION_ALL_LEVELS_DISABLED : constant NvU4 := 16#0#;
    LW_PRGNLCL_TFBIF_ATT_PRIV_LEVEL_MASK_WRITE_PROTECTION_ONLY_LEVEL3_ENABLED : constant NvU4 := 16#8#;
    type LW_PRGNLCL_TFBIF_ATT_PRIV_LEVEL_MASK_READ_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_TFBIF_ATT_PRIV_LEVEL_MASK_READ_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_TFBIF_ATT_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field is (VIOLATION_SOLDIER_ON, VIOLATION_REPORT_ERROR) with
        Size => 1;
    for LW_PRGNLCL_TFBIF_ATT_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field use (VIOLATION_SOLDIER_ON => 16#0#, VIOLATION_REPORT_ERROR => 16#1#);
    type LW_PRGNLCL_TFBIF_ATT_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_TFBIF_ATT_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    type LW_PRGNLCL_TFBIF_ATT_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field is (CONTROL_LOWERED, CONTROL_BLOCKED) with
        Size => 1;
    for LW_PRGNLCL_TFBIF_ATT_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field use (CONTROL_LOWERED => 16#0#, CONTROL_BLOCKED => 16#1#);
    LW_PRGNLCL_TFBIF_ATT_PRIV_LEVEL_MASK_SOURCE_ENABLE_ALL_SOURCES_ENABLED : constant NvU20 := 16#f_ffff#;
    LW_PRGNLCL_TFBIF_ATT_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_TFBIF_ATT_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL0_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_TFBIF_ATT_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_TFBIF_ATT_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL1_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_TFBIF_ATT_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_TFBIF_ATT_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL2_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_TFBIF_ATT_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_ENABLE     : constant       := 16#1#;
    LW_PRGNLCL_TFBIF_ATT_PRIV_LEVEL_MASK_READ_PROTECTION_LEVEL3_DISABLE    : constant       := 16#0#;
    LW_PRGNLCL_TFBIF_ATT_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_TFBIF_ATT_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL0_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_TFBIF_ATT_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_TFBIF_ATT_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL1_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_TFBIF_ATT_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_TFBIF_ATT_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL2_DISABLE   : constant       := 16#0#;
    LW_PRGNLCL_TFBIF_ATT_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_ENABLE    : constant       := 16#1#;
    LW_PRGNLCL_TFBIF_ATT_PRIV_LEVEL_MASK_WRITE_PROTECTION_LEVEL3_DISABLE   : constant       := 16#0#;

    type LW_PRGNLCL_TFBIF_ATT_PRIV_LEVEL_MASK_Register is record
        Read_Protection      : NvU4;
        Write_Protection     : NvU4;
        Read_Violation       : LW_PRGNLCL_TFBIF_ATT_PRIV_LEVEL_MASK_READ_VIOLATION_Field;
        Write_Violation      : LW_PRGNLCL_TFBIF_ATT_PRIV_LEVEL_MASK_WRITE_VIOLATION_Field;
        Source_Read_Control  : LW_PRGNLCL_TFBIF_ATT_PRIV_LEVEL_MASK_SOURCE_READ_CONTROL_Field;
        Source_Write_Control : LW_PRGNLCL_TFBIF_ATT_PRIV_LEVEL_MASK_SOURCE_WRITE_CONTROL_Field;
        Source_Enable        : NvU20;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_TFBIF_ATT_PRIV_LEVEL_MASK_Register use record
        Read_Protection      at 0 range  0 ..  3;
        Write_Protection     at 0 range  4 ..  7;
        Read_Violation       at 0 range  8 ..  8;
        Write_Violation      at 0 range  9 ..  9;
        Source_Read_Control  at 0 range 10 .. 10;
        Source_Write_Control at 0 range 11 .. 11;
        Source_Enable        at 0 range 12 .. 31;
    end record;

    LW_PRGNLCL_TFBIF_TRANSCFG_ATT0_SWID_INIT : constant NvU2 := 16#0#;
    LW_PRGNLCL_TFBIF_TRANSCFG_ATT1_SWID_INIT : constant NvU2 := 16#0#;
    LW_PRGNLCL_TFBIF_TRANSCFG_ATT2_SWID_INIT : constant NvU2 := 16#0#;
    LW_PRGNLCL_TFBIF_TRANSCFG_ATT3_SWID_INIT : constant NvU2 := 16#0#;
    LW_PRGNLCL_TFBIF_TRANSCFG_ATT4_SWID_INIT : constant NvU2 := 16#0#;
    LW_PRGNLCL_TFBIF_TRANSCFG_ATT5_SWID_INIT : constant NvU2 := 16#0#;
    LW_PRGNLCL_TFBIF_TRANSCFG_ATT6_SWID_INIT : constant NvU2 := 16#0#;
    LW_PRGNLCL_TFBIF_TRANSCFG_ATT7_SWID_INIT : constant NvU2 := 16#0#;
    LW_PRGNLCL_TFBIF_TRANSCFG_HW_SWID        : constant      := 16#0#;
    LW_PRGNLCL_TFBIF_TRANSCFG_FALC_SWID      : constant      := 16#2#;
    LW_PRGNLCL_TFBIF_TRANSCFG_PHY_SWID       : constant      := 16#1#;
    LW_PRGNLCL_TFBIF_TRANSCFG_PHY_STREAMID   : constant      := 16#7f#;

    type LW_PRGNLCL_TFBIF_TRANSCFG_Register is record
        Att0_Swid : NvU2;
        Att1_Swid : NvU2;
        Att2_Swid : NvU2;
        Att3_Swid : NvU2;
        Att4_Swid : NvU2;
        Att5_Swid : NvU2;
        Att6_Swid : NvU2;
        Att7_Swid : NvU2;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_TFBIF_TRANSCFG_Register use record
        Att0_Swid at 0 range  0 ..  1;
        Att1_Swid at 0 range  4 ..  5;
        Att2_Swid at 0 range  8 ..  9;
        Att3_Swid at 0 range 12 .. 13;
        Att4_Swid at 0 range 16 .. 17;
        Att5_Swid at 0 range 20 .. 21;
        Att6_Swid at 0 range 24 .. 25;
        Att7_Swid at 0 range 28 .. 29;
    end record;

    LW_PRGNLCL_TFBIF_REGIONCFG_T0_VPR_INIT : constant NvU1 := 16#0#;
    LW_PRGNLCL_TFBIF_REGIONCFG_T1_VPR_INIT : constant NvU1 := 16#0#;
    LW_PRGNLCL_TFBIF_REGIONCFG_T2_VPR_INIT : constant NvU1 := 16#0#;
    LW_PRGNLCL_TFBIF_REGIONCFG_T3_VPR_INIT : constant NvU1 := 16#0#;
    LW_PRGNLCL_TFBIF_REGIONCFG_T4_VPR_INIT : constant NvU1 := 16#0#;
    LW_PRGNLCL_TFBIF_REGIONCFG_T5_VPR_INIT : constant NvU1 := 16#0#;
    LW_PRGNLCL_TFBIF_REGIONCFG_T6_VPR_INIT : constant NvU1 := 16#0#;
    LW_PRGNLCL_TFBIF_REGIONCFG_T7_VPR_INIT : constant NvU1 := 16#0#;

    type LW_PRGNLCL_TFBIF_REGIONCFG_Register is record
        T0_Vpr : NvU1;
        T1_Vpr : NvU1;
        T2_Vpr : NvU1;
        T3_Vpr : NvU1;
        T4_Vpr : NvU1;
        T5_Vpr : NvU1;
        T6_Vpr : NvU1;
        T7_Vpr : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_TFBIF_REGIONCFG_Register use record
        T0_Vpr at 0 range  3 ..  3;
        T1_Vpr at 0 range  7 ..  7;
        T2_Vpr at 0 range 11 .. 11;
        T3_Vpr at 0 range 15 .. 15;
        T4_Vpr at 0 range 19 .. 19;
        T5_Vpr at 0 range 23 .. 23;
        T6_Vpr at 0 range 27 .. 27;
        T7_Vpr at 0 range 31 .. 31;
    end record;

    LW_PRGNLCL_TFBIF_REGIONCFG1_T0_APERT_ID_INIT : constant NvU5 := 16#0#;
    LW_PRGNLCL_TFBIF_REGIONCFG1_T1_APERT_ID_INIT : constant NvU5 := 16#0#;
    LW_PRGNLCL_TFBIF_REGIONCFG1_T2_APERT_ID_INIT : constant NvU5 := 16#0#;
    LW_PRGNLCL_TFBIF_REGIONCFG1_T3_APERT_ID_INIT : constant NvU5 := 16#0#;

    type LW_PRGNLCL_TFBIF_REGIONCFG1_Register is record
        T0_Apert_Id : NvU5;
        T1_Apert_Id : NvU5;
        T2_Apert_Id : NvU5;
        T3_Apert_Id : NvU5;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_TFBIF_REGIONCFG1_Register use record
        T0_Apert_Id at 0 range  0 ..  4;
        T1_Apert_Id at 0 range  8 .. 12;
        T2_Apert_Id at 0 range 16 .. 20;
        T3_Apert_Id at 0 range 24 .. 28;
    end record;

    LW_PRGNLCL_TFBIF_REGIONCFG2_T4_APERT_ID_INIT : constant NvU5 := 16#0#;
    LW_PRGNLCL_TFBIF_REGIONCFG2_T5_APERT_ID_INIT : constant NvU5 := 16#0#;
    LW_PRGNLCL_TFBIF_REGIONCFG2_T6_APERT_ID_INIT : constant NvU5 := 16#0#;
    LW_PRGNLCL_TFBIF_REGIONCFG2_T7_APERT_ID_INIT : constant NvU5 := 16#0#;

    type LW_PRGNLCL_TFBIF_REGIONCFG2_Register is record
        T4_Apert_Id : NvU5;
        T5_Apert_Id : NvU5;
        T6_Apert_Id : NvU5;
        T7_Apert_Id : NvU5;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_TFBIF_REGIONCFG2_Register use record
        T4_Apert_Id at 0 range  0 ..  4;
        T5_Apert_Id at 0 range  8 .. 12;
        T6_Apert_Id at 0 range 16 .. 20;
        T7_Apert_Id at 0 range 24 .. 28;
    end record;

    LW_PRGNLCL_TFBIF_ACTMON_ACTIVE_MASK_STARVED_MC_INIT  : constant NvU1 := 16#0#;
    LW_PRGNLCL_TFBIF_ACTMON_ACTIVE_MASK_STARVED_MC_TRUE  : constant NvU1 := 16#1#;
    LW_PRGNLCL_TFBIF_ACTMON_ACTIVE_MASK_STARVED_MC_FALSE : constant NvU1 := 16#0#;
    LW_PRGNLCL_TFBIF_ACTMON_ACTIVE_MASK_STALLED_MC_INIT  : constant NvU1 := 16#1#;
    LW_PRGNLCL_TFBIF_ACTMON_ACTIVE_MASK_STALLED_MC_TRUE  : constant NvU1 := 16#1#;
    LW_PRGNLCL_TFBIF_ACTMON_ACTIVE_MASK_STALLED_MC_FALSE : constant NvU1 := 16#0#;
    LW_PRGNLCL_TFBIF_ACTMON_ACTIVE_MASK_DELAYED_MC_INIT  : constant NvU1 := 16#1#;
    LW_PRGNLCL_TFBIF_ACTMON_ACTIVE_MASK_DELAYED_MC_TRUE  : constant NvU1 := 16#1#;
    LW_PRGNLCL_TFBIF_ACTMON_ACTIVE_MASK_DELAYED_MC_FALSE : constant NvU1 := 16#0#;
    LW_PRGNLCL_TFBIF_ACTMON_ACTIVE_MASK_ACTIVE_INIT      : constant NvU1 := 16#0#;
    LW_PRGNLCL_TFBIF_ACTMON_ACTIVE_MASK_ACTIVE_TRUE      : constant NvU1 := 16#1#;
    LW_PRGNLCL_TFBIF_ACTMON_ACTIVE_MASK_ACTIVE_FALSE     : constant NvU1 := 16#0#;

    type LW_PRGNLCL_TFBIF_ACTMON_ACTIVE_MASK_Register is record
        Starved_Mc : NvU1;
        Stalled_Mc : NvU1;
        Delayed_Mc : NvU1;
        Active     : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_TFBIF_ACTMON_ACTIVE_MASK_Register use record
        Starved_Mc at 0 range 0 .. 0;
        Stalled_Mc at 0 range 1 .. 1;
        Delayed_Mc at 0 range 2 .. 2;
        Active     at 0 range 3 .. 3;
    end record;

    LW_PRGNLCL_TFBIF_ACTMON_ACTIVE_BORPS_STARVED_MC_POLARITY_INIT     : constant NvU1 := 16#1#;
    LW_PRGNLCL_TFBIF_ACTMON_ACTIVE_BORPS_STARVED_MC_POLARITY_POSITIVE : constant NvU1 := 16#0#;
    LW_PRGNLCL_TFBIF_ACTMON_ACTIVE_BORPS_STARVED_MC_POLARITY_NEGATIVE : constant NvU1 := 16#1#;
    LW_PRGNLCL_TFBIF_ACTMON_ACTIVE_BORPS_STARVED_MC_OPERATION_INIT    : constant NvU1 := 16#1#;
    LW_PRGNLCL_TFBIF_ACTMON_ACTIVE_BORPS_STARVED_MC_OPERATION_OR      : constant NvU1 := 16#0#;
    LW_PRGNLCL_TFBIF_ACTMON_ACTIVE_BORPS_STARVED_MC_OPERATION_AND     : constant NvU1 := 16#1#;
    LW_PRGNLCL_TFBIF_ACTMON_ACTIVE_BORPS_STALLED_MC_POLARITY_INIT     : constant NvU1 := 16#0#;
    LW_PRGNLCL_TFBIF_ACTMON_ACTIVE_BORPS_STALLED_MC_POLARITY_POSITIVE : constant NvU1 := 16#0#;
    LW_PRGNLCL_TFBIF_ACTMON_ACTIVE_BORPS_STALLED_MC_POLARITY_NEGATIVE : constant NvU1 := 16#1#;
    LW_PRGNLCL_TFBIF_ACTMON_ACTIVE_BORPS_STALLED_MC_OPERATION_INIT    : constant NvU1 := 16#0#;
    LW_PRGNLCL_TFBIF_ACTMON_ACTIVE_BORPS_STALLED_MC_OPERATION_OR      : constant NvU1 := 16#0#;
    LW_PRGNLCL_TFBIF_ACTMON_ACTIVE_BORPS_STALLED_MC_OPERATION_AND     : constant NvU1 := 16#1#;
    LW_PRGNLCL_TFBIF_ACTMON_ACTIVE_BORPS_DELAYED_MC_POLARITY_INIT     : constant NvU1 := 16#0#;
    LW_PRGNLCL_TFBIF_ACTMON_ACTIVE_BORPS_DELAYED_MC_POLARITY_POSITIVE : constant NvU1 := 16#0#;
    LW_PRGNLCL_TFBIF_ACTMON_ACTIVE_BORPS_DELAYED_MC_POLARITY_NEGATIVE : constant NvU1 := 16#1#;
    LW_PRGNLCL_TFBIF_ACTMON_ACTIVE_BORPS_DELAYED_MC_OPERATION_INIT    : constant NvU1 := 16#0#;
    LW_PRGNLCL_TFBIF_ACTMON_ACTIVE_BORPS_DELAYED_MC_OPERATION_OR      : constant NvU1 := 16#0#;
    LW_PRGNLCL_TFBIF_ACTMON_ACTIVE_BORPS_DELAYED_MC_OPERATION_AND     : constant NvU1 := 16#1#;
    LW_PRGNLCL_TFBIF_ACTMON_ACTIVE_BORPS_ACTIVE_POLARITY_INIT         : constant NvU1 := 16#0#;
    LW_PRGNLCL_TFBIF_ACTMON_ACTIVE_BORPS_ACTIVE_POLARITY_POSITIVE     : constant NvU1 := 16#0#;
    LW_PRGNLCL_TFBIF_ACTMON_ACTIVE_BORPS_ACTIVE_POLARITY_NEGATIVE     : constant NvU1 := 16#1#;
    LW_PRGNLCL_TFBIF_ACTMON_ACTIVE_BORPS_ACTIVE_OPERATION_INIT        : constant NvU1 := 16#1#;
    LW_PRGNLCL_TFBIF_ACTMON_ACTIVE_BORPS_ACTIVE_OPERATION_OR          : constant NvU1 := 16#0#;
    LW_PRGNLCL_TFBIF_ACTMON_ACTIVE_BORPS_ACTIVE_OPERATION_AND         : constant NvU1 := 16#1#;

    type LW_PRGNLCL_TFBIF_ACTMON_ACTIVE_BORPS_Register is record
        Starved_Mc_Polarity  : NvU1;
        Starved_Mc_Operation : NvU1;
        Stalled_Mc_Polarity  : NvU1;
        Stalled_Mc_Operation : NvU1;
        Delayed_Mc_Polarity  : NvU1;
        Delayed_Mc_Operation : NvU1;
        Active_Polarity      : NvU1;
        Active_Operation     : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_TFBIF_ACTMON_ACTIVE_BORPS_Register use record
        Starved_Mc_Polarity  at 0 range 0 .. 0;
        Starved_Mc_Operation at 0 range 1 .. 1;
        Stalled_Mc_Polarity  at 0 range 2 .. 2;
        Stalled_Mc_Operation at 0 range 3 .. 3;
        Delayed_Mc_Polarity  at 0 range 4 .. 4;
        Delayed_Mc_Operation at 0 range 5 .. 5;
        Active_Polarity      at 0 range 6 .. 6;
        Active_Operation     at 0 range 7 .. 7;
    end record;

    LW_PRGNLCL_TFBIF_ACTMON_ACTIVE_WEIGHT_VAL_INIT : constant NvU32 := 16#1#;

    type LW_PRGNLCL_TFBIF_ACTMON_ACTIVE_WEIGHT_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_TFBIF_ACTMON_ACTIVE_WEIGHT_Register use record
        Val at 0 range 0 .. 31;
    end record;

    LW_PRGNLCL_TFBIF_ACTMON_MCB_MASK_STARVED_MC_INIT  : constant NvU1 := 16#0#;
    LW_PRGNLCL_TFBIF_ACTMON_MCB_MASK_STARVED_MC_TRUE  : constant NvU1 := 16#1#;
    LW_PRGNLCL_TFBIF_ACTMON_MCB_MASK_STARVED_MC_FALSE : constant NvU1 := 16#0#;
    LW_PRGNLCL_TFBIF_ACTMON_MCB_MASK_STALLED_MC_INIT  : constant NvU1 := 16#1#;
    LW_PRGNLCL_TFBIF_ACTMON_MCB_MASK_STALLED_MC_TRUE  : constant NvU1 := 16#1#;
    LW_PRGNLCL_TFBIF_ACTMON_MCB_MASK_STALLED_MC_FALSE : constant NvU1 := 16#0#;
    LW_PRGNLCL_TFBIF_ACTMON_MCB_MASK_DELAYED_MC_INIT  : constant NvU1 := 16#1#;
    LW_PRGNLCL_TFBIF_ACTMON_MCB_MASK_DELAYED_MC_TRUE  : constant NvU1 := 16#1#;
    LW_PRGNLCL_TFBIF_ACTMON_MCB_MASK_DELAYED_MC_FALSE : constant NvU1 := 16#0#;
    LW_PRGNLCL_TFBIF_ACTMON_MCB_MASK_ACTIVE_INIT      : constant NvU1 := 16#0#;
    LW_PRGNLCL_TFBIF_ACTMON_MCB_MASK_ACTIVE_TRUE      : constant NvU1 := 16#1#;
    LW_PRGNLCL_TFBIF_ACTMON_MCB_MASK_ACTIVE_FALSE     : constant NvU1 := 16#0#;

    type LW_PRGNLCL_TFBIF_ACTMON_MCB_MASK_Register is record
        Starved_Mc : NvU1;
        Stalled_Mc : NvU1;
        Delayed_Mc : NvU1;
        Active     : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_TFBIF_ACTMON_MCB_MASK_Register use record
        Starved_Mc at 0 range 0 .. 0;
        Stalled_Mc at 0 range 1 .. 1;
        Delayed_Mc at 0 range 2 .. 2;
        Active     at 0 range 3 .. 3;
    end record;

    LW_PRGNLCL_TFBIF_ACTMON_MCB_BORPS_STARVED_MC_POLARITY_INIT     : constant NvU1 := 16#0#;
    LW_PRGNLCL_TFBIF_ACTMON_MCB_BORPS_STARVED_MC_POLARITY_POSITIVE : constant NvU1 := 16#0#;
    LW_PRGNLCL_TFBIF_ACTMON_MCB_BORPS_STARVED_MC_POLARITY_NEGATIVE : constant NvU1 := 16#1#;
    LW_PRGNLCL_TFBIF_ACTMON_MCB_BORPS_STARVED_MC_OPERATION_INIT    : constant NvU1 := 16#1#;
    LW_PRGNLCL_TFBIF_ACTMON_MCB_BORPS_STARVED_MC_OPERATION_OR      : constant NvU1 := 16#0#;
    LW_PRGNLCL_TFBIF_ACTMON_MCB_BORPS_STARVED_MC_OPERATION_AND     : constant NvU1 := 16#1#;
    LW_PRGNLCL_TFBIF_ACTMON_MCB_BORPS_STALLED_MC_POLARITY_INIT     : constant NvU1 := 16#0#;
    LW_PRGNLCL_TFBIF_ACTMON_MCB_BORPS_STALLED_MC_POLARITY_POSITIVE : constant NvU1 := 16#0#;
    LW_PRGNLCL_TFBIF_ACTMON_MCB_BORPS_STALLED_MC_POLARITY_NEGATIVE : constant NvU1 := 16#1#;
    LW_PRGNLCL_TFBIF_ACTMON_MCB_BORPS_STALLED_MC_OPERATION_INIT    : constant NvU1 := 16#0#;
    LW_PRGNLCL_TFBIF_ACTMON_MCB_BORPS_STALLED_MC_OPERATION_OR      : constant NvU1 := 16#0#;
    LW_PRGNLCL_TFBIF_ACTMON_MCB_BORPS_STALLED_MC_OPERATION_AND     : constant NvU1 := 16#1#;
    LW_PRGNLCL_TFBIF_ACTMON_MCB_BORPS_DELAYED_MC_POLARITY_INIT     : constant NvU1 := 16#0#;
    LW_PRGNLCL_TFBIF_ACTMON_MCB_BORPS_DELAYED_MC_POLARITY_POSITIVE : constant NvU1 := 16#0#;
    LW_PRGNLCL_TFBIF_ACTMON_MCB_BORPS_DELAYED_MC_POLARITY_NEGATIVE : constant NvU1 := 16#1#;
    LW_PRGNLCL_TFBIF_ACTMON_MCB_BORPS_DELAYED_MC_OPERATION_INIT    : constant NvU1 := 16#0#;
    LW_PRGNLCL_TFBIF_ACTMON_MCB_BORPS_DELAYED_MC_OPERATION_OR      : constant NvU1 := 16#0#;
    LW_PRGNLCL_TFBIF_ACTMON_MCB_BORPS_DELAYED_MC_OPERATION_AND     : constant NvU1 := 16#1#;
    LW_PRGNLCL_TFBIF_ACTMON_MCB_BORPS_ACTIVE_POLARITY_INIT         : constant NvU1 := 16#0#;
    LW_PRGNLCL_TFBIF_ACTMON_MCB_BORPS_ACTIVE_POLARITY_POSITIVE     : constant NvU1 := 16#0#;
    LW_PRGNLCL_TFBIF_ACTMON_MCB_BORPS_ACTIVE_POLARITY_NEGATIVE     : constant NvU1 := 16#1#;
    LW_PRGNLCL_TFBIF_ACTMON_MCB_BORPS_ACTIVE_OPERATION_INIT        : constant NvU1 := 16#1#;
    LW_PRGNLCL_TFBIF_ACTMON_MCB_BORPS_ACTIVE_OPERATION_OR          : constant NvU1 := 16#0#;
    LW_PRGNLCL_TFBIF_ACTMON_MCB_BORPS_ACTIVE_OPERATION_AND         : constant NvU1 := 16#1#;

    type LW_PRGNLCL_TFBIF_ACTMON_MCB_BORPS_Register is record
        Starved_Mc_Polarity  : NvU1;
        Starved_Mc_Operation : NvU1;
        Stalled_Mc_Polarity  : NvU1;
        Stalled_Mc_Operation : NvU1;
        Delayed_Mc_Polarity  : NvU1;
        Delayed_Mc_Operation : NvU1;
        Active_Polarity      : NvU1;
        Active_Operation     : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_TFBIF_ACTMON_MCB_BORPS_Register use record
        Starved_Mc_Polarity  at 0 range 0 .. 0;
        Starved_Mc_Operation at 0 range 1 .. 1;
        Stalled_Mc_Polarity  at 0 range 2 .. 2;
        Stalled_Mc_Operation at 0 range 3 .. 3;
        Delayed_Mc_Polarity  at 0 range 4 .. 4;
        Delayed_Mc_Operation at 0 range 5 .. 5;
        Active_Polarity      at 0 range 6 .. 6;
        Active_Operation     at 0 range 7 .. 7;
    end record;

    LW_PRGNLCL_TFBIF_ACTMON_MCB_WEIGHT_VAL_INIT : constant NvU32 := 16#1#;

    type LW_PRGNLCL_TFBIF_ACTMON_MCB_WEIGHT_Register is record
        Val : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_TFBIF_ACTMON_MCB_WEIGHT_Register use record
        Val at 0 range 0 .. 31;
    end record;

    type LW_PRGNLCL_TFBIF_THI_TRANSPROP_Register is record
        Streamid0 : NvU7;
        Streamid1 : NvU7;
        Tz_Auth   : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_TFBIF_THI_TRANSPROP_Register use record
        Streamid0 at 0 range  0 ..  6;
        Streamid1 at 0 range  8 .. 14;
        Tz_Auth   at 0 range 16 .. 16;
    end record;

    LW_PRGNLCL_TFBIF_MCCIF_FIFOCTRL_RCLK_OVERRIDE_INIT    : constant NvU1 := 16#0#;
    LW_PRGNLCL_TFBIF_MCCIF_FIFOCTRL_RCLK_OVERRIDE_DISABLE : constant NvU1 := 16#0#;
    LW_PRGNLCL_TFBIF_MCCIF_FIFOCTRL_RCLK_OVERRIDE_ENABLE  : constant NvU1 := 16#1#;
    LW_PRGNLCL_TFBIF_MCCIF_FIFOCTRL_WCLK_OVERRIDE_INIT    : constant NvU1 := 16#0#;
    LW_PRGNLCL_TFBIF_MCCIF_FIFOCTRL_WCLK_OVERRIDE_DISABLE : constant NvU1 := 16#0#;
    LW_PRGNLCL_TFBIF_MCCIF_FIFOCTRL_WCLK_OVERRIDE_ENABLE  : constant NvU1 := 16#1#;
    LW_PRGNLCL_TFBIF_MCCIF_FIFOCTRL_WRCL_MCLE2X_INIT      : constant NvU1 := 16#0#;
    LW_PRGNLCL_TFBIF_MCCIF_FIFOCTRL_WRCL_MCLE2X_DISABLE   : constant NvU1 := 16#0#;
    LW_PRGNLCL_TFBIF_MCCIF_FIFOCTRL_WRCL_MCLE2X_ENABLE    : constant NvU1 := 16#1#;
    LW_PRGNLCL_TFBIF_MCCIF_FIFOCTRL_RDMC_RDFAST_INIT      : constant NvU1 := 16#0#;
    LW_PRGNLCL_TFBIF_MCCIF_FIFOCTRL_RDMC_RDFAST_DISABLE   : constant NvU1 := 16#0#;
    LW_PRGNLCL_TFBIF_MCCIF_FIFOCTRL_RDMC_RDFAST_ENABLE    : constant NvU1 := 16#1#;
    LW_PRGNLCL_TFBIF_MCCIF_FIFOCTRL_WRMC_CLLE2X_INIT      : constant NvU1 := 16#0#;
    LW_PRGNLCL_TFBIF_MCCIF_FIFOCTRL_WRMC_CLLE2X_DISABLE   : constant NvU1 := 16#0#;
    LW_PRGNLCL_TFBIF_MCCIF_FIFOCTRL_WRMC_CLLE2X_ENABLE    : constant NvU1 := 16#1#;
    LW_PRGNLCL_TFBIF_MCCIF_FIFOCTRL_RDCL_RDFAST_INIT      : constant NvU1 := 16#0#;
    LW_PRGNLCL_TFBIF_MCCIF_FIFOCTRL_RDCL_RDFAST_DISABLE   : constant NvU1 := 16#0#;
    LW_PRGNLCL_TFBIF_MCCIF_FIFOCTRL_RDCL_RDFAST_ENABLE    : constant NvU1 := 16#1#;
    LW_PRGNLCL_TFBIF_MCCIF_FIFOCTRL_CCLK_OVERRIDE_INIT    : constant NvU1 := 16#0#;
    LW_PRGNLCL_TFBIF_MCCIF_FIFOCTRL_CCLK_OVERRIDE_DISABLE : constant NvU1 := 16#0#;
    LW_PRGNLCL_TFBIF_MCCIF_FIFOCTRL_CCLK_OVERRIDE_ENABLE  : constant NvU1 := 16#1#;
    LW_PRGNLCL_TFBIF_MCCIF_FIFOCTRL_RCLK_OVR_MODE_INIT    : constant NvU1 := 16#0#;
    LW_PRGNLCL_TFBIF_MCCIF_FIFOCTRL_RCLK_OVR_MODE_DISABLE : constant NvU1 := 16#0#;
    LW_PRGNLCL_TFBIF_MCCIF_FIFOCTRL_RCLK_OVR_MODE_ENABLE  : constant NvU1 := 16#1#;
    LW_PRGNLCL_TFBIF_MCCIF_FIFOCTRL_WCLK_OVR_MODE_INIT    : constant NvU1 := 16#0#;
    LW_PRGNLCL_TFBIF_MCCIF_FIFOCTRL_WCLK_OVR_MODE_DISABLE : constant NvU1 := 16#0#;
    LW_PRGNLCL_TFBIF_MCCIF_FIFOCTRL_WCLK_OVR_MODE_ENABLE  : constant NvU1 := 16#1#;

    type LW_PRGNLCL_TFBIF_MCCIF_FIFOCTRL_Register is record
        Rclk_Override : NvU1;
        Wclk_Override : NvU1;
        Wrcl_Mcle2x   : NvU1;
        Rdmc_Rdfast   : NvU1;
        Wrmc_Clle2x   : NvU1;
        Rdcl_Rdfast   : NvU1;
        Cclk_Override : NvU1;
        Rclk_Ovr_Mode : NvU1;
        Wclk_Ovr_Mode : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_TFBIF_MCCIF_FIFOCTRL_Register use record
        Rclk_Override at 0 range 0 .. 0;
        Wclk_Override at 0 range 1 .. 1;
        Wrcl_Mcle2x   at 0 range 2 .. 2;
        Rdmc_Rdfast   at 0 range 3 .. 3;
        Wrmc_Clle2x   at 0 range 4 .. 4;
        Rdcl_Rdfast   at 0 range 5 .. 5;
        Cclk_Override at 0 range 6 .. 6;
        Rclk_Ovr_Mode at 0 range 7 .. 7;
        Wclk_Ovr_Mode at 0 range 8 .. 8;
    end record;

    LW_PRGNLCL_TFBIF_MCCIF_FIFOCTRL1_SRD2MC_REORDER_DEPTH_LIMIT_INIT : constant NvU16 := 16#0#;
    LW_PRGNLCL_TFBIF_MCCIF_FIFOCTRL1_SWR2MC_REORDER_DEPTH_LIMIT_INIT : constant NvU16 := 16#0#;

    type LW_PRGNLCL_TFBIF_MCCIF_FIFOCTRL1_Register is record
        Srd2mc_Reorder_Depth_Limit : NvU16;
        Swr2mc_Reorder_Depth_Limit : NvU16;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_TFBIF_MCCIF_FIFOCTRL1_Register use record
        Srd2mc_Reorder_Depth_Limit at 0 range  0 .. 15;
        Swr2mc_Reorder_Depth_Limit at 0 range 16 .. 31;
    end record;

    LW_PRGNLCL_TFBIF_THROTTLE_BUCKET_SIZE_INIT   : constant NvU12 := 16#64#;
    LW_PRGNLCL_TFBIF_THROTTLE_LEAK_COUNT_DISABLE : constant NvU12 := 16#0#;
    type LW_PRGNLCL_TFBIF_THROTTLE_LEAK_SIZE_Field is (SIZE_16B, SIZE_32B, SIZE_64B, SIZE_128B) with
        Size => 2;
    for LW_PRGNLCL_TFBIF_THROTTLE_LEAK_SIZE_Field use (SIZE_16B => 16#0#, SIZE_32B => 16#1#, SIZE_64B => 16#2#, SIZE_128B => 16#3#);

    type LW_PRGNLCL_TFBIF_THROTTLE_Register is record
        Bucket_Size : NvU12;
        Leak_Count  : NvU12;
        Leak_Size   : LW_PRGNLCL_TFBIF_THROTTLE_LEAK_SIZE_Field;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_TFBIF_THROTTLE_Register use record
        Bucket_Size at 0 range  0 .. 11;
        Leak_Count  at 0 range 16 .. 27;
        Leak_Size   at 0 range 30 .. 31;
    end record;

    type LW_PRGNLCL_TFBIF_DBG_STAT0_Register is record
        Stat0_1k_Transfer      : NvU1;
        Rreq_Issued            : NvU1;
        Wreq_Issued            : NvU1;
        Tagq_Issued            : NvU1;
        Stall_Rdatq            : NvU1;
        Stall_Rackq            : NvU1;
        Stall_Wreqq            : NvU1;
        Stall_Wdatq            : NvU1;
        Stall_Wackq            : NvU1;
        Stall_Rreq_Pending     : NvU1;
        Stall_Wreq_Pending     : NvU1;
        Stall_Mreq             : NvU1;
        Engine_Idle            : NvU1;
        Rmccif_Idle            : NvU1;
        Wmccif_Idle            : NvU1;
        Csb_Idle               : NvU1;
        Ru_Idle                : NvU1;
        Wu_Idle                : NvU1;
        Unweight_Actmon_Active : NvU1;
        Unweight_Actmon_Mcb    : NvU1;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_TFBIF_DBG_STAT0_Register use record
        Stat0_1k_Transfer      at 0 range  0 ..  0;
        Rreq_Issued            at 0 range  1 ..  1;
        Wreq_Issued            at 0 range  2 ..  2;
        Tagq_Issued            at 0 range  3 ..  3;
        Stall_Rdatq            at 0 range  4 ..  4;
        Stall_Rackq            at 0 range  5 ..  5;
        Stall_Wreqq            at 0 range  6 ..  6;
        Stall_Wdatq            at 0 range  7 ..  7;
        Stall_Wackq            at 0 range  8 ..  8;
        Stall_Rreq_Pending     at 0 range  9 ..  9;
        Stall_Wreq_Pending     at 0 range 10 .. 10;
        Stall_Mreq             at 0 range 11 .. 11;
        Engine_Idle            at 0 range 12 .. 12;
        Rmccif_Idle            at 0 range 13 .. 13;
        Wmccif_Idle            at 0 range 14 .. 14;
        Csb_Idle               at 0 range 15 .. 15;
        Ru_Idle                at 0 range 16 .. 16;
        Wu_Idle                at 0 range 17 .. 17;
        Unweight_Actmon_Active at 0 range 19 .. 19;
        Unweight_Actmon_Mcb    at 0 range 20 .. 20;
    end record;

    type LW_PRGNLCL_TFBIF_DBG_STAT1_Register is record
        Data : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_TFBIF_DBG_STAT1_Register use record
        Data at 0 range 0 .. 31;
    end record;

    type LW_PRGNLCL_TFBIF_DBG_RDCOUNT_LO_Register is record
        Data : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_TFBIF_DBG_RDCOUNT_LO_Register use record
        Data at 0 range 0 .. 31;
    end record;

    type LW_PRGNLCL_TFBIF_DBG_RDCOUNT_HI_Register is record
        Data : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_TFBIF_DBG_RDCOUNT_HI_Register use record
        Data at 0 range 0 .. 31;
    end record;

    type LW_PRGNLCL_TFBIF_DBG_WRCOUNT_LO_Register is record
        Data : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_TFBIF_DBG_WRCOUNT_LO_Register use record
        Data at 0 range 0 .. 31;
    end record;

    type LW_PRGNLCL_TFBIF_DBG_WRCOUNT_HI_Register is record
        Data : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_TFBIF_DBG_WRCOUNT_HI_Register use record
        Data at 0 range 0 .. 31;
    end record;

    type LW_PRGNLCL_TFBIF_DBG_R32COUNT_Register is record
        Data : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_TFBIF_DBG_R32COUNT_Register use record
        Data at 0 range 0 .. 31;
    end record;

    type LW_PRGNLCL_TFBIF_DBG_R64COUNT_Register is record
        Data : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_TFBIF_DBG_R64COUNT_Register use record
        Data at 0 range 0 .. 31;
    end record;

    type LW_PRGNLCL_TFBIF_DBG_R128COUNT_Register is record
        Data : NvU32;
    end record with
        Size        => 32,
        Object_Size => 32;

    for LW_PRGNLCL_TFBIF_DBG_R128COUNT_Register use record
        Data at 0 range 0 .. 31;
    end record;

    -- offsets of registers --
    LW_PRGNLCL_FALCON_IMEM_PRIV_LEVEL_MASK_Address                   : constant := 16#140_a000#;
    LW_PRGNLCL_FALCON_DMEM_PRIV_LEVEL_MASK_Address                   : constant := 16#140_a100#;
    LW_PRGNLCL_FALCON_CPUCTL_PRIV_LEVEL_MASK_Address                 : constant := 16#140_a200#;
    LW_PRGNLCL_FALCON_EXE_PRIV_LEVEL_MASK_Address                    : constant := 16#140_a300#;
    LW_PRGNLCL_FALCON_IRQTMR_PRIV_LEVEL_MASK_Address                 : constant := 16#140_a400#;
    LW_PRGNLCL_FALCON_MTHDCTX_PRIV_LEVEL_MASK_Address                : constant := 16#140_a500#;
    LW_PRGNLCL_FALCON_HSCTL_PRIV_LEVEL_MASK_Address                  : constant := 16#140_3a00#;
    LW_PRGNLCL_FALCON_DIODT_PRIV_LEVEL_MASK_Address                  : constant := 16#140_3b00#;
    LW_PRGNLCL_FALCON_DIODTA_PRIV_LEVEL_MASK_Address                 : constant := 16#140_3c00#;
    LW_PRGNLCL_FALCON_SCTL_PRIV_LEVEL_MASK_Address                   : constant := 16#140_a600#;
    LW_PRGNLCL_FALCON_WDTMR_PRIV_LEVEL_MASK_Address                  : constant := 16#140_a700#;
    LW_PRGNLCL_FALCON_PRIVSTATE_PRIV_LEVEL_MASK_Address              : constant := 16#140_f400#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_0_PRIV_LEVEL_MASK_Address : constant := 16#140_fc00#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_1_PRIV_LEVEL_MASK_Address : constant := 16#140_fd00#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_2_PRIV_LEVEL_MASK_Address : constant := 16#140_fe00#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_3_PRIV_LEVEL_MASK_Address : constant := 16#140_ff00#;
    LW_PRGNLCL_FALCON_PMB_IMEM_PRIV_LEVEL_MASK_0_Address             : constant := 16#140_6300#;
    LW_PRGNLCL_FALCON_PMB_DMEM_PRIV_LEVEL_MASK_0_Address             : constant := 16#140_ac00#;
    LW_PRGNLCL_FALCON_PMB_DMEM_PRIV_LEVEL_MASK_1_Address             : constant := 16#140_ad00#;
    LW_PRGNLCL_FALCON_PMB_DMEM_PRIV_LEVEL_MASK_2_Address             : constant := 16#140_ae00#;
    LW_PRGNLCL_FALCON_PMB_DMEM_PRIV_LEVEL_MASK_3_Address             : constant := 16#140_af00#;
    LW_PRGNLCL_FALCON_DMA_PRIV_LEVEL_MASK_Address                    : constant := 16#140_6400#;
    LW_PRGNLCL_FALCON_BOOTVEC_PRIV_LEVEL_MASK_Address                : constant := 16#140_6500#;
    LW_PRGNLCL_FALCON_AMAP_PRIV_LEVEL_MASK_Address                   : constant := 16#140_6600#;
    LW_PRGNLCL_FALCON_TRACEBUF_PRIV_LEVEL_MASK_Address               : constant := 16#140_6700#;
    LW_PRGNLCL_FALCON_TMR_PRIV_LEVEL_MASK_Address                    : constant := 16#140_6800#;
    LW_PRGNLCL_FALCON_IRQSCMASK_PRIV_LEVEL_MASK_Address              : constant := 16#140_6900#;
    LW_PRGNLCL_FALCON_DBGCTL_PRIV_LEVEL_MASK_Address                 : constant := 16#140_6a00#;
    LW_PRGNLCL_FALCON_NO_ACCESS_PRIV_LEVEL_MASK_Address              : constant := 16#140_6e00#;
    LW_PRGNLCL_FALCON_PTIMER_PRIV_LEVEL_MASK_Address                 : constant := 16#140_6f00#;
    LW_PRGNLCL_FALCON_IDLESTATE_PRIV_LEVEL_MASK_Address              : constant := 16#140_7800#;
    LW_PRGNLCL_FALCON_ENG_STATE_PRIV_LEVEL_MASK_Address              : constant := 16#140_7900#;
    LW_PRGNLCL_FALCON_CG2_PRIV_LEVEL_MASK_Address                    : constant := 16#140_7a00#;
    LW_PRGNLCL_FALCON_PM_PRIV_LEVEL_MASK_Address                     : constant := 16#140_7b00#;
    LW_PRGNLCL_FALCON_SP_MIN_PRIV_LEVEL_MASK_Address                 : constant := 16#140_7c00#;
    LW_PRGNLCL_FALCON_EXCI_PRIV_LEVEL_MASK_Address                   : constant := 16#140_7d00#;
    LW_PRGNLCL_FALCON_SVEC_SPR_PRIV_LEVEL_MASK_Address               : constant := 16#140_7e00#;
    LW_PRGNLCL_FALCON_BRKPT_PRIV_LEVEL_MASK_Address                  : constant := 16#140_7f00#;
    LW_PRGNLCL_FALCON_ICD_PRIV_LEVEL_MASK_Address                    : constant := 16#140_8800#;
    LW_PRGNLCL_FALCON_RSTAT0_PRIV_LEVEL_MASK_Address                 : constant := 16#140_8900#;
    LW_PRGNLCL_FALCON_EXTERR_PRIV_LEVEL_MASK_Address                 : constant := 16#140_8a00#;
    LW_PRGNLCL_FALCON_CSBERR_PRIV_LEVEL_MASK_Address                 : constant := 16#140_8b00#;
    LW_PRGNLCL_FALCON_IRQSSET_Address                                : constant := 16#140_0000#;
    LW_PRGNLCL_FALCON_IRQSCLR_Address                                : constant := 16#140_0100#;
    LW_PRGNLCL_FALCON_IRQSTAT_Address                                : constant := 16#140_0200#;
    LW_PRGNLCL_FALCON_IRQMODE_Address                                : constant := 16#140_0300#;
    LW_PRGNLCL_FALCON_IRQSCMASK_Address                              : constant := 16#140_3800#;
    LW_PRGNLCL_FALCON_IRQMSET_Address                                : constant := 16#140_0400#;
    LW_PRGNLCL_FALCON_IRQMCLR_Address                                : constant := 16#140_0500#;
    LW_PRGNLCL_FALCON_IRQMASK_Address                                : constant := 16#140_0600#;
    LW_PRGNLCL_FALCON_IRQDEST_Address                                : constant := 16#140_0700#;
    LW_PRGNLCL_FALCON_IRQDEST2_Address                               : constant := 16#140_0f00#;
    LW_PRGNLCL_FALCON_GPTMRINT_Address                               : constant := 16#140_0800#;
    LW_PRGNLCL_FALCON_GPTMRVAL_Address                               : constant := 16#140_0900#;
    LW_PRGNLCL_FALCON_GPTMRCTL_Address                               : constant := 16#140_0a00#;
    LW_PRGNLCL_FALCON_PTIMER0_Address                                : constant := 16#140_0b00#;
    LW_PRGNLCL_FALCON_PTIMER1_Address                                : constant := 16#140_0c00#;
    LW_PRGNLCL_FALCON_WDTMRVAL_Address                               : constant := 16#140_0d00#;
    LW_PRGNLCL_FALCON_WDTMRCTL_Address                               : constant := 16#140_0e00#;
    LW_PRGNLCL_FALCON_MTHDDATA_Address                               : constant := 16#140_1900#;
    LW_PRGNLCL_FALCON_MTHDID_Address                                 : constant := 16#140_1a00#;
    LW_PRGNLCL_FALCON_MTHDWDAT_Address                               : constant := 16#140_1b00#;
    LW_PRGNLCL_FALCON_MTHDCOUNT_Address                              : constant := 16#140_1c00#;
    LW_PRGNLCL_FALCON_MTHDPOP_Address                                : constant := 16#140_1d00#;
    LW_PRGNLCL_FALCON_MTHDRAMSZ_Address                              : constant := 16#140_1e00#;
    LW_PRGNLCL_FALCON_CURCTX_Address                                 : constant := 16#140_1400#;
    LW_PRGNLCL_FALCON_NXTCTX_Address                                 : constant := 16#140_1500#;
    LW_PRGNLCL_FALCON_CTXACK_Address                                 : constant := 16#140_1600#;
    LW_PRGNLCL_FALCON_MAILBOX0_Address                               : constant := 16#140_1000#;
    LW_PRGNLCL_FALCON_MAILBOX1_Address                               : constant := 16#140_1100#;
    LW_PRGNLCL_FALCON_ITFEN_Address                                  : constant := 16#140_1200#;
    LW_PRGNLCL_FALCON_IDLESTATE_Address                              : constant := 16#140_1300#;
    LW_PRGNLCL_FALCON_FHSTATE_Address                                : constant := 16#140_1700#;
    LW_PRGNLCL_FALCON_PRIVSTATE_Address                              : constant := 16#140_1800#;
    LW_PRGNLCL_FALCON_SFTRESET_Address                               : constant := 16#140_1f00#;
    LW_PRGNLCL_FALCON_ENGCTL_Address                                 : constant := 16#140_2900#;
    LW_PRGNLCL_FALCON_ADDR_Address                                   : constant := 16#140_2b00#;
    LW_PRGNLCL_FALCON_PRICFG_Address                                 : constant := 16#140_3e00#;
    LW_PRGNLCL_FALCON_DMACTL_Address                                 : constant := 16#140_4300#;
    LW_PRGNLCL_FALCON_DMATRFBASE_Address                             : constant := 16#140_4400#;
    LW_PRGNLCL_FALCON_DMATRFMOFFS_Address                            : constant := 16#140_4500#;
    LW_PRGNLCL_FALCON_DMATRFCMD_Address                              : constant := 16#140_4600#;
    LW_PRGNLCL_FALCON_DMATRFFBOFFS_Address                           : constant := 16#140_4700#;
    LW_PRGNLCL_FALCON_DMAPOLL_FB_Address                             : constant := 16#140_4800#;
    LW_PRGNLCL_FALCON_DMAPOLL_CP_Address                             : constant := 16#140_4900#;
    LW_PRGNLCL_FALCON_DMAINFO_FINISHED_FBRD_LOW_Address              : constant := 16#140_b000#;
    LW_PRGNLCL_FALCON_DMAINFO_FINISHED_FBRD_HIGH_Address             : constant := 16#140_b100#;
    LW_PRGNLCL_FALCON_DMAINFO_FINISHED_FBWR_LOW_Address              : constant := 16#140_b200#;
    LW_PRGNLCL_FALCON_DMAINFO_FINISHED_FBWR_HIGH_Address             : constant := 16#140_b300#;
    LW_PRGNLCL_FALCON_DMAINFO_CURRENT_FBRD_LOW_Address               : constant := 16#140_b400#;
    LW_PRGNLCL_FALCON_DMAINFO_CURRENT_FBRD_HIGH_Address              : constant := 16#140_b500#;
    LW_PRGNLCL_FALCON_DMAINFO_CURRENT_FBWR_LOW_Address               : constant := 16#140_b600#;
    LW_PRGNLCL_FALCON_DMAINFO_CURRENT_FBWR_HIGH_Address              : constant := 16#140_b700#;
    LW_PRGNLCL_FALCON_DMAINFO_CTL_Address                            : constant := 16#140_b800#;
    LW_PRGNLCL_FALCON_DMAINFO_ERR_TAG_HIGH_Address                   : constant := 16#140_b900#;
    LW_PRGNLCL_FALCON_DMAINFO_ERR_TAG_LOW_Address                    : constant := 16#140_ba00#;
    LW_PRGNLCL_FALCON_IMEMC_0_Address                                : constant := 16#140_6000#;
    LW_PRGNLCL_FALCON_IMEMD_0_Address                                : constant := 16#140_6100#;
    LW_PRGNLCL_FALCON_IMEMT_0_Address                                : constant := 16#140_6200#;
    LW_PRGNLCL_FALCON_DMEMC_0_Address                                : constant := 16#140_7000#;
    LW_PRGNLCL_FALCON_DMEMC_1_Address                                : constant := 16#140_7200#;
    LW_PRGNLCL_FALCON_DMEMC_2_Address                                : constant := 16#140_7400#;
    LW_PRGNLCL_FALCON_DMEMC_3_Address                                : constant := 16#140_7600#;
    LW_PRGNLCL_FALCON_DMEMD_0_Address                                : constant := 16#140_7100#;
    LW_PRGNLCL_FALCON_DMEMD_1_Address                                : constant := 16#140_7300#;
    LW_PRGNLCL_FALCON_DMEMD_2_Address                                : constant := 16#140_7500#;
    LW_PRGNLCL_FALCON_DMEMD_3_Address                                : constant := 16#140_7700#;
    LW_PRGNLCL_FALCON_DMEMT_0_Address                                : constant := 16#140_8400#;
    LW_PRGNLCL_FALCON_DMEMT_1_Address                                : constant := 16#140_8500#;
    LW_PRGNLCL_FALCON_DMEMT_2_Address                                : constant := 16#140_8600#;
    LW_PRGNLCL_FALCON_DMEMT_3_Address                                : constant := 16#140_8700#;
    LW_PRGNLCL_FALCON_DMEML_0_Address                                : constant := 16#140_a800#;
    LW_PRGNLCL_FALCON_DMEML_1_Address                                : constant := 16#140_a900#;
    LW_PRGNLCL_FALCON_DMEML_2_Address                                : constant := 16#140_aa00#;
    LW_PRGNLCL_FALCON_DMEML_3_Address                                : constant := 16#140_ab00#;
    LW_PRGNLCL_FALCON_LOCKPMB_Address                                : constant := 16#140_5c00#;
    LW_PRGNLCL_FALCON_DMEM_DUMMY_Address                             : constant := 16#140_9600#;
    LW_PRGNLCL_FALCON_IMEM_DUMMY_Address                             : constant := 16#140_6d00#;
    LW_PRGNLCL_FALCON_DIO_RESET_DELAY_Address                        : constant := 16#140_9d00#;
    LW_PRGNLCL_FALCON_DOC_CTRL_Address                               : constant := 16#140_d000#;
    LW_PRGNLCL_FALCON_DOC_D0_Address                                 : constant := 16#140_d100#;
    LW_PRGNLCL_FALCON_DOC_D1_Address                                 : constant := 16#140_d200#;
    LW_PRGNLCL_FALCON_DOC_D2_Address                                 : constant := 16#140_d300#;
    LW_PRGNLCL_FALCON_DIC_CTRL_Address                               : constant := 16#140_d400#;
    LW_PRGNLCL_FALCON_DIC_D0_Address                                 : constant := 16#140_d500#;
    LW_PRGNLCL_FALCON_DIC_D1_Address                                 : constant := 16#140_d600#;
    LW_PRGNLCL_FALCON_DIC_D2_Address                                 : constant := 16#140_d700#;
    LW_PRGNLCL_FALCON_DIO_ERR_Address                                : constant := 16#140_d800#;
    LW_PRGNLCL_FALCON_DIO_DOC_CTRL_0_Address                         : constant := 16#140_dc00#;
    LW_PRGNLCL_FALCON_DIO_DOC_D0_0_Address                           : constant := 16#140_dd00#;
    LW_PRGNLCL_FALCON_DIO_DOC_D1_0_Address                           : constant := 16#140_de00#;
    LW_PRGNLCL_FALCON_DIO_DOC_D2_0_Address                           : constant := 16#140_df00#;
    LW_PRGNLCL_FALCON_DIO_DIC_CTRL_0_Address                         : constant := 16#140_e000#;
    LW_PRGNLCL_FALCON_DIO_DIC_D0_0_Address                           : constant := 16#140_e100#;
    LW_PRGNLCL_FALCON_DIO_DIC_D1_0_Address                           : constant := 16#140_e200#;
    LW_PRGNLCL_FALCON_DIO_DIC_D2_0_Address                           : constant := 16#140_e300#;
    LW_PRGNLCL_FALCON_DIO_DIO_ERR_0_Address                          : constant := 16#140_e400#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_0_0_Address               : constant := 16#140_c000#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_0_1_Address               : constant := 16#140_c100#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_0_2_Address               : constant := 16#140_c200#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_0_3_Address               : constant := 16#140_c300#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_1_0_Address               : constant := 16#140_c400#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_1_1_Address               : constant := 16#140_c500#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_1_2_Address               : constant := 16#140_c600#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_1_3_Address               : constant := 16#140_c700#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_2_0_Address               : constant := 16#140_c800#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_2_1_Address               : constant := 16#140_c900#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_2_2_Address               : constant := 16#140_ca00#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_2_3_Address               : constant := 16#140_cb00#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_3_0_Address               : constant := 16#140_cc00#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_3_1_Address               : constant := 16#140_cd00#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_3_2_Address               : constant := 16#140_ce00#;
    LW_PRGNLCL_FALCON_COMMON_SCRATCH_GROUP_3_3_Address               : constant := 16#140_cf00#;
    LW_PRGNLCL_FALCON_PRGNVER_Address                                : constant := 16#140_f500#;
    LW_PRGNLCL_FALCON_HWCFG_Address                                  : constant := 16#140_4200#;
    LW_PRGNLCL_FALCON_HWCFG1_Address                                 : constant := 16#140_4b00#;
    LW_PRGNLCL_FALCON_HWCFG2_Address                                 : constant := 16#140_3d00#;
    LW_PRGNLCL_FALCON_HWCFG3_Address                                 : constant := 16#140_9e00#;
    LW_PRGNLCL_FALCON_CGCTL_Address                                  : constant := 16#140_2800#;
    LW_PRGNLCL_FALCON_CG2_Address                                    : constant := 16#140_4d00#;
    LW_PRGNLCL_FALCON_ENGID_Address                                  : constant := 16#140_4f00#;
    LW_PRGNLCL_FALCON_SCTL_Address                                   : constant := 16#140_9000#;
    LW_PRGNLCL_FALCON_SCTL1_Address                                  : constant := 16#140_9400#;
    LW_PRGNLCL_FALCON_HSCTL_Address                                  : constant := 16#140_3900#;
    LW_PRGNLCL_FALCON_OS_Address                                     : constant := 16#140_2000#;
    LW_PRGNLCL_FALCON_RM_Address                                     : constant := 16#140_2100#;
    LW_PRGNLCL_FALCON_SOFT_PM_Address                                : constant := 16#140_2200#;
    LW_PRGNLCL_FALCON_SOFT_MODE_Address                              : constant := 16#140_2300#;
    LW_PRGNLCL_FALCON_PMM_Address                                    : constant := 16#140_2a00#;
    LW_PRGNLCL_FALCON_DEBUG1_Address                                 : constant := 16#140_2400#;
    LW_PRGNLCL_FALCON_DEBUGINFO_Address                              : constant := 16#140_2500#;
    LW_PRGNLCL_FALCON_SP_MIN_Address                                 : constant := 16#140_9c00#;
    LW_PRGNLCL_FALCON_EXCI_Address                                   : constant := 16#140_3400#;
    LW_PRGNLCL_FALCON_EXCI2_Address                                  : constant := 16#140_2f00#;
    LW_PRGNLCL_FALCON_SVEC_SPR_Address                               : constant := 16#140_3500#;
    LW_PRGNLCL_FALCON_CPUCTL_Address                                 : constant := 16#140_4000#;
    LW_PRGNLCL_FALCON_CPUCTL_ALIAS_Address                           : constant := 16#140_4c00#;
    LW_PRGNLCL_FALCON_STACKCFG_Address                               : constant := 16#140_4e00#;
    LW_PRGNLCL_FALCON_BOOTVEC_Address                                : constant := 16#140_4100#;
    LW_PRGNLCL_FALCON_DBGCTL_Address                                 : constant := 16#140_9500#;
    LW_PRGNLCL_FALCON_IBRKPT1_Address                                : constant := 16#140_2600#;
    LW_PRGNLCL_FALCON_IBRKPT2_Address                                : constant := 16#140_2700#;
    LW_PRGNLCL_FALCON_IBRKPT3_Address                                : constant := 16#140_2c00#;
    LW_PRGNLCL_FALCON_IBRKPT4_Address                                : constant := 16#140_2d00#;
    LW_PRGNLCL_FALCON_IBRKPT5_Address                                : constant := 16#140_2e00#;
    LW_PRGNLCL_FALCON_ICD_CMD_Address                                : constant := 16#140_8000#;
    LW_PRGNLCL_FALCON_ICD_ADDR_Address                               : constant := 16#140_8100#;
    LW_PRGNLCL_FALCON_ICD_WDATA_Address                              : constant := 16#140_8200#;
    LW_PRGNLCL_FALCON_ICD_RDATA_Address                              : constant := 16#140_8300#;
    LW_PRGNLCL_FALCON_RSTAT0_Address                                 : constant := 16#140_3600#;
    LW_PRGNLCL_FALCON_RSTAT3_Address                                 : constant := 16#140_3700#;
    LW_PRGNLCL_FALCON_TRACEIDX_Address                               : constant := 16#140_5200#;
    LW_PRGNLCL_FALCON_TRACEPC_Address                                : constant := 16#140_5300#;
    LW_PRGNLCL_FALCON_TRACEINFO_Address                              : constant := 16#140_5f00#;
    LW_PRGNLCL_FALCON_IMCTL_Address                                  : constant := 16#140_5000#;
    LW_PRGNLCL_FALCON_IMCTL_DEBUG_Address                            : constant := 16#140_5700#;
    LW_PRGNLCL_FALCON_IMSTAT_Address                                 : constant := 16#140_5100#;
    LW_PRGNLCL_FALCON_IMFILLRNG0_Address                             : constant := 16#140_5400#;
    LW_PRGNLCL_FALCON_IMFILLRNG1_Address                             : constant := 16#140_5500#;
    LW_PRGNLCL_FALCON_IMFILLCTL_Address                              : constant := 16#140_5600#;
    LW_PRGNLCL_FALCON_DMCTL_Address                                  : constant := 16#140_9800#;
    LW_PRGNLCL_FALCON_DMSTAT_Address                                 : constant := 16#140_9900#;
    LW_PRGNLCL_FALCON_DMVACTL_Address                                : constant := 16#140_9a00#;
    LW_PRGNLCL_FALCON_DMCYA_Address                                  : constant := 16#140_9b00#;
    LW_PRGNLCL_FALCON_CMEMBASE_Address                               : constant := 16#140_5800#;
    LW_PRGNLCL_FALCON_DMEMAPERT_Address                              : constant := 16#140_5900#;
    LW_PRGNLCL_FALCON_EXTERRSTAT_Address                             : constant := 16#140_5b00#;
    LW_PRGNLCL_FALCON_EXTERRADDR_Address                             : constant := 16#140_5a00#;
    LW_PRGNLCL_FALCON_EXTERR_INFO_Address                            : constant := 16#140_9700#;
    LW_PRGNLCL_FALCON_CSBERRSTAT_Address                             : constant := 16#140_9100#;
    LW_PRGNLCL_FALCON_CSBERR_ADDR_Address                            : constant := 16#140_9300#;
    LW_PRGNLCL_FALCON_CSBERR_INFO_Address                            : constant := 16#140_9200#;
    LW_PRGNLCL_FALCON_BR_PARAMS_PRIV_LEVEL_MASK_Address              : constant := 16#14c_9400#;
    LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_PRIV_LEVEL_MASK_Address         : constant := 16#14c_9700#;
    LW_PRGNLCL_FALCON_KMEM_PRIV_LEVEL_MASK_Address                   : constant := 16#14c_9500#;
    LW_PRGNLCL_FALCON_SHA_RAL_PRIV_LEVEL_MASK_Address                : constant := 16#14c_4a00#;
    LW_PRGNLCL_FALCON_SHA_CONFIG_Address                             : constant := 16#14c_0100#;
    LW_PRGNLCL_FALCON_SHA_TASK_CONFIG_Address                        : constant := 16#14c_0200#;
    LW_PRGNLCL_FALCON_SHA_IN_ADDR_Address                            : constant := 16#14c_0300#;
    LW_PRGNLCL_FALCON_SHA_IN_ADDR_HI_Address                         : constant := 16#14c_0400#;
    LW_PRGNLCL_FALCON_SHA_MSG_LENGTH_0_Address                       : constant := 16#14c_0700#;
    LW_PRGNLCL_FALCON_SHA_MSG_LENGTH_1_Address                       : constant := 16#14c_0800#;
    LW_PRGNLCL_FALCON_SHA_MSG_LENGTH_2_Address                       : constant := 16#14c_0900#;
    LW_PRGNLCL_FALCON_SHA_MSG_LENGTH_3_Address                       : constant := 16#14c_0a00#;
    LW_PRGNLCL_FALCON_SHA_MSG_LEFT_0_Address                         : constant := 16#14c_0b00#;
    LW_PRGNLCL_FALCON_SHA_MSG_LEFT_1_Address                         : constant := 16#14c_0c00#;
    LW_PRGNLCL_FALCON_SHA_MSG_LEFT_2_Address                         : constant := 16#14c_0d00#;
    LW_PRGNLCL_FALCON_SHA_MSG_LEFT_3_Address                         : constant := 16#14c_0e00#;
    LW_PRGNLCL_FALCON_SHA_HASH_RESULT_0_Address                      : constant := 16#14c_0f00#;
    LW_PRGNLCL_FALCON_SHA_HASH_RESULT_1_Address                      : constant := 16#14c_1000#;
    LW_PRGNLCL_FALCON_SHA_HASH_RESULT_2_Address                      : constant := 16#14c_1100#;
    LW_PRGNLCL_FALCON_SHA_HASH_RESULT_3_Address                      : constant := 16#14c_1200#;
    LW_PRGNLCL_FALCON_SHA_HASH_RESULT_4_Address                      : constant := 16#14c_1300#;
    LW_PRGNLCL_FALCON_SHA_HASH_RESULT_5_Address                      : constant := 16#14c_1400#;
    LW_PRGNLCL_FALCON_SHA_HASH_RESULT_6_Address                      : constant := 16#14c_1500#;
    LW_PRGNLCL_FALCON_SHA_HASH_RESULT_7_Address                      : constant := 16#14c_1600#;
    LW_PRGNLCL_FALCON_SHA_HASH_RESULT_8_Address                      : constant := 16#14c_1700#;
    LW_PRGNLCL_FALCON_SHA_HASH_RESULT_9_Address                      : constant := 16#14c_1800#;
    LW_PRGNLCL_FALCON_SHA_HASH_RESULT_10_Address                     : constant := 16#14c_1900#;
    LW_PRGNLCL_FALCON_SHA_HASH_RESULT_11_Address                     : constant := 16#14c_1a00#;
    LW_PRGNLCL_FALCON_SHA_HASH_RESULT_12_Address                     : constant := 16#14c_1b00#;
    LW_PRGNLCL_FALCON_SHA_HASH_RESULT_13_Address                     : constant := 16#14c_1c00#;
    LW_PRGNLCL_FALCON_SHA_HASH_RESULT_14_Address                     : constant := 16#14c_1d00#;
    LW_PRGNLCL_FALCON_SHA_HASH_RESULT_15_Address                     : constant := 16#14c_1e00#;
    LW_PRGNLCL_FALCON_SHA_OPERATION_Address                          : constant := 16#14c_1f00#;
    LW_PRGNLCL_FALCON_SHA_STATUS_Address                             : constant := 16#14c_2000#;
    LW_PRGNLCL_FALCON_SHA_IN_REQ_CUR_BYTE_ADDR_Address               : constant := 16#14c_2100#;
    LW_PRGNLCL_FALCON_SHA_IN_REQ_CUR_BYTE_ADDR_HI_Address            : constant := 16#14c_2200#;
    LW_PRGNLCL_FALCON_SHA_PRIV_LOCKDOWN_Address                      : constant := 16#14c_2300#;
    LW_PRGNLCL_FALCON_SHA_IN_RESP_CUR_BYTE_ADDR_Address              : constant := 16#14c_2400#;
    LW_PRGNLCL_FALCON_SHA_IN_RESP_CUR_BYTE_ADDR_HI_Address           : constant := 16#14c_2500#;
    LW_PRGNLCL_FALCON_SHA_ERR_STATUS_Address                         : constant := 16#14c_4c00#;
    LW_PRGNLCL_FALCON_SHA_ERR_ADDR_Address                           : constant := 16#14c_4800#;
    LW_PRGNLCL_FALCON_SHA_ERR_ADDR_HI_Address                        : constant := 16#14c_4900#;
    LW_PRGNLCL_FALCON_SHA_INT_STATUS_Address                         : constant := 16#14c_4d00#;
    LW_PRGNLCL_FALCON_SHA_INT_ENABLE_Address                         : constant := 16#14c_4e00#;
    LW_PRGNLCL_FALCON_SHA_MUTEX_Address                              : constant := 16#14c_4000#;
    LW_PRGNLCL_FALCON_SHA_MUTEX_RELEASE_Address                      : constant := 16#14c_4100#;
    LW_PRGNLCL_FALCON_SHA_MUTEX_STATUS_Address                       : constant := 16#14c_4200#;
    LW_PRGNLCL_FALCON_SHA_SRC_CONFIG_Address                         : constant := 16#14c_4400#;
    LW_PRGNLCL_FALCON_SHA_REQ_CTRL_Address                           : constant := 16#14c_4500#;
    LW_PRGNLCL_FALCON_SHA_CTRL_Address                               : constant := 16#14c_2600#;
    LW_PRGNLCL_FALCON_SHA_CYA_Address                                : constant := 16#14c_4600#;
    LW_PRGNLCL_FALCON_SHA_DBG_INFO_Address                           : constant := 16#14c_4700#;
    LW_PRGNLCL_FALCON_SHA_DBG_REG_0_Address                          : constant := 16#14c_5000#;
    LW_PRGNLCL_FALCON_SHA_DBG_REG_1_Address                          : constant := 16#14c_5100#;
    LW_PRGNLCL_FALCON_SHA_DBG_REG_2_Address                          : constant := 16#14c_5200#;
    LW_PRGNLCL_FALCON_SHA_DBG_REG_3_Address                          : constant := 16#14c_5300#;
    LW_PRGNLCL_FALCON_SHA_DBG_REG_4_Address                          : constant := 16#14c_5400#;
    LW_PRGNLCL_FALCON_SHA_DBG_REG_5_Address                          : constant := 16#14c_5500#;
    LW_PRGNLCL_FALCON_SHA_DBG_REG_6_Address                          : constant := 16#14c_5600#;
    LW_PRGNLCL_FALCON_SHA_DBG_REG_7_Address                          : constant := 16#14c_5700#;
    LW_PRGNLCL_FALCON_VER_Address                                    : constant := 16#14c_6200#;
    LW_PRGNLCL_FALCON_MOD_SEL_Address                                : constant := 16#14c_6000#;
    LW_PRGNLCL_FALCON_MOD_EN_Address                                 : constant := 16#14c_6100#;
    LW_PRGNLCL_FALCON_PKCBROM_VER_Address                            : constant := 16#14c_6300#;
    LW_PRGNLCL_FALCON_VHRCFG_BASE_Address                            : constant := 16#14c_6400#;
    LW_PRGNLCL_FALCON_VHRCFG_ENTNUM_Address                          : constant := 16#14c_7a00#;
    LW_PRGNLCL_FALCON_BMEMBASE_Address                               : constant := 16#14c_6500#;
    LW_PRGNLCL_FALCON_BROM_CURR_UCODE_ID_Address                     : constant := 16#14c_6600#;
    LW_PRGNLCL_FALCON_UCODE_VERSION_0_Address                        : constant := 16#14c_6a00#;
    LW_PRGNLCL_FALCON_UCODE_VERSION_1_Address                        : constant := 16#14c_6b00#;
    LW_PRGNLCL_FALCON_UCODE_VERSION_2_Address                        : constant := 16#14c_6c00#;
    LW_PRGNLCL_FALCON_UCODE_VERSION_3_Address                        : constant := 16#14c_6d00#;
    LW_PRGNLCL_FALCON_UCODE_VERSION_4_Address                        : constant := 16#14c_6e00#;
    LW_PRGNLCL_FALCON_UCODE_VERSION_5_Address                        : constant := 16#14c_6f00#;
    LW_PRGNLCL_FALCON_UCODE_VERSION_6_Address                        : constant := 16#14c_7000#;
    LW_PRGNLCL_FALCON_UCODE_VERSION_7_Address                        : constant := 16#14c_7100#;
    LW_PRGNLCL_FALCON_UCODE_VERSION_8_Address                        : constant := 16#14c_7200#;
    LW_PRGNLCL_FALCON_UCODE_VERSION_9_Address                        : constant := 16#14c_7300#;
    LW_PRGNLCL_FALCON_UCODE_VERSION_10_Address                       : constant := 16#14c_7400#;
    LW_PRGNLCL_FALCON_UCODE_VERSION_11_Address                       : constant := 16#14c_7500#;
    LW_PRGNLCL_FALCON_UCODE_VERSION_12_Address                       : constant := 16#14c_7600#;
    LW_PRGNLCL_FALCON_UCODE_VERSION_13_Address                       : constant := 16#14c_7700#;
    LW_PRGNLCL_FALCON_UCODE_VERSION_14_Address                       : constant := 16#14c_7800#;
    LW_PRGNLCL_FALCON_UCODE_VERSION_15_Address                       : constant := 16#14c_7900#;
    LW_PRGNLCL_FALCON_BROM_ENGIDMASK_Address                         : constant := 16#14c_6700#;
    LW_PRGNLCL_FALCON_KFUSE_LOAD_CTL_Address                         : constant := 16#14c_7b00#;
    LW_PRGNLCL_FALCON_PR_CTKID_Address                               : constant := 16#14c_7c00#;
    LW_PRGNLCL_FALCON_BROM_FUNID_Address                             : constant := 16#14c_6800#;
    LW_PRGNLCL_FALCON_BROM_PARAADDR_0_Address                        : constant := 16#14c_8400#;
    LW_PRGNLCL_FALCON_BROM_RETCODE_Address                           : constant := 16#14c_6900#;
    LW_PRGNLCL_FALCON_KMEMBASE_Address                               : constant := 16#14c_7d00#;
    LW_PRGNLCL_FALCON_KMEMC_0_Address                                : constant := 16#14c_7e00#;
    LW_PRGNLCL_FALCON_KMEMC_1_Address                                : constant := 16#14c_7f00#;
    LW_PRGNLCL_FALCON_KMEMD_0_Address                                : constant := 16#14c_8000#;
    LW_PRGNLCL_FALCON_KMEMD_1_Address                                : constant := 16#14c_8100#;
    LW_PRGNLCL_FALCON_KMEM_CTL_Address                               : constant := 16#14c_8200#;
    LW_PRGNLCL_FALCON_KMEMCFG_Address                                : constant := 16#14c_8300#;
    LW_PRGNLCL_FALCON_KMEM_VALID_0_Address                           : constant := 16#14c_8600#;
    LW_PRGNLCL_FALCON_KMEM_VALID_1_Address                           : constant := 16#14c_8700#;
    LW_PRGNLCL_FALCON_KMEM_VALID_2_Address                           : constant := 16#14c_8800#;
    LW_PRGNLCL_FALCON_KMEM_VALID_3_Address                           : constant := 16#14c_8900#;
    LW_PRGNLCL_FALCON_KMEM_VALID_4_Address                           : constant := 16#14c_8a00#;
    LW_PRGNLCL_FALCON_KMEM_VALID_5_Address                           : constant := 16#14c_8b00#;
    LW_PRGNLCL_FALCON_KMEM_VALID_6_Address                           : constant := 16#14c_8c00#;
    LW_PRGNLCL_FALCON_KMEM_VALID_7_Address                           : constant := 16#14c_8d00#;
    LW_PRGNLCL_FALCON_KMEM_VIOLATION_CTL_Address                     : constant := 16#14c_8e00#;
    LW_PRGNLCL_FALCON_EXCI_KMEM_VIOLATION_DBGINF_Address             : constant := 16#14c_8f00#;
    LW_PRGNLCL_FALCON_KMEM_SLOT_MASK_Address                         : constant := 16#14c_9000#;
    LW_PRGNLCL_FALCON_KEYGLOB_CTRL_Address                           : constant := 16#14c_9200#;
    LW_PRGNLCL_FALCON_KEYGLOB_DATA_Address                           : constant := 16#14c_9300#;
    LW_PRGNLCL_RISCV_EXE_PRIV_LEVEL_MASK_Address                     : constant := 16#14c_c100#;
    LW_PRGNLCL_RISCV_CPUCTL_PRIV_LEVEL_MASK_Address                  : constant := 16#14c_c200#;
    LW_PRGNLCL_RISCV_IRQ_PRIV_LEVEL_MASK_Address                     : constant := 16#14c_c000#;
    LW_PRGNLCL_RISCV_DBGCTL_PRIV_LEVEL_MASK_Address                  : constant := 16#14c_c500#;
    LW_PRGNLCL_RISCV_BOOTVEC_PRIV_LEVEL_MASK_Address                 : constant := 16#14c_c400#;
    LW_PRGNLCL_RISCV_BCR_PRIV_LEVEL_MASK_Address                     : constant := 16#14d_9900#;
    LW_PRGNLCL_RISCV_BCR_DMACFG_SEC_PRIV_LEVEL_MASK_Address          : constant := 16#14d_a400#;
    LW_PRGNLCL_RISCV_LWCONFIG_PRIV_LEVEL_MASK_Address                : constant := 16#14c_c300#;
    LW_PRGNLCL_RISCV_TRACEBUF_PRIV_LEVEL_MASK_Address                : constant := 16#14c_c600#;
    LW_PRGNLCL_RISCV_MSIP_PRIV_LEVEL_MASK_Address                    : constant := 16#14c_c700#;
    LW_PRGNLCL_RISCV_MSPM_PRIV_LEVEL_MASK_Address                    : constant := 16#14c_c800#;
    LW_PRGNLCL_RISCV_PIC_PRIV_LEVEL_MASK_Address                     : constant := 16#14d_4500#;
    LW_PRGNLCL_RISCV_PICSCMASK_PRIV_LEVEL_MASK_Address               : constant := 16#14d_4600#;
    LW_PRGNLCL_RISCV_ERR_PRIV_LEVEL_MASK_Address                     : constant := 16#14d_4700#;
    LW_PRGNLCL_RISCV_NO_ACCESS_PRIV_LEVEL_MASK_Address               : constant := 16#14d_4e00#;
    LW_PRGNLCL_RISCV_IRQMSET_Address                                 : constant := 16#14d_4800#;
    LW_PRGNLCL_RISCV_IRQMCLR_Address                                 : constant := 16#14d_4900#;
    LW_PRGNLCL_RISCV_IRQMASK_Address                                 : constant := 16#14d_4a00#;
    LW_PRGNLCL_RISCV_IRQDEST_Address                                 : constant := 16#14d_4b00#;
    LW_PRGNLCL_RISCV_IRQTYPE_Address                                 : constant := 16#14d_4c00#;
    LW_PRGNLCL_RISCV_IRQDELEG_Address                                : constant := 16#14d_4d00#;
    LW_PRGNLCL_RISCV_EXTIRQSSET_Address                              : constant := 16#14d_5000#;
    LW_PRGNLCL_RISCV_EXTIRQSCLR_Address                              : constant := 16#14d_5100#;
    LW_PRGNLCL_RISCV_EXTIRQSTAT_Address                              : constant := 16#14d_5200#;
    LW_PRGNLCL_RISCV_EXTIRQMODE_Address                              : constant := 16#14d_5300#;
    LW_PRGNLCL_RISCV_EXTIRQSCMASK_Address                            : constant := 16#14d_5400#;
    LW_PRGNLCL_RISCV_EXTIRQMSET_Address                              : constant := 16#14d_5500#;
    LW_PRGNLCL_RISCV_EXTIRQMCLR_Address                              : constant := 16#14d_5600#;
    LW_PRGNLCL_RISCV_EXTIRQMASK_Address                              : constant := 16#14d_5700#;
    LW_PRGNLCL_RISCV_EXTIRQDEST_Address                              : constant := 16#14d_5800#;
    LW_PRGNLCL_RISCV_EXTIRQTYPE_Address                              : constant := 16#14d_5900#;
    LW_PRGNLCL_RISCV_EXTIRQDELEG_Address                             : constant := 16#14d_5a00#;
    LW_PRGNLCL_RISCV_BOOT_VECTOR_HI_Address                          : constant := 16#14c_e100#;
    LW_PRGNLCL_RISCV_BOOT_VECTOR_LO_Address                          : constant := 16#14c_e000#;
    LW_PRGNLCL_RISCV_CPUCTL_Address                                  : constant := 16#14c_e200#;
    LW_PRGNLCL_RISCV_LWCONFIG_Address                                : constant := 16#14c_e400#;
    LW_PRGNLCL_RISCV_CG_Address                                      : constant := 16#14c_e600#;
    LW_PRGNLCL_RISCV_CYA_Address                                     : constant := 16#14c_e700#;
    LW_PRGNLCL_RISCV_MSPM_Address                                    : constant := 16#14c_e800#;
    LW_PRGNLCL_RISCV_DBGCTL_Address                                  : constant := 16#14c_f200#;
    LW_PRGNLCL_RISCV_DBGCTL_LOCK_Address                             : constant := 16#14c_f300#;
    LW_PRGNLCL_RISCV_ICD_CMD_Address                                 : constant := 16#14c_f400#;
    LW_PRGNLCL_RISCV_ICD_ADDR0_Address                               : constant := 16#14c_f500#;
    LW_PRGNLCL_RISCV_ICD_ADDR1_Address                               : constant := 16#14c_f600#;
    LW_PRGNLCL_RISCV_ICD_WDATA0_Address                              : constant := 16#14c_f700#;
    LW_PRGNLCL_RISCV_ICD_WDATA1_Address                              : constant := 16#14c_f800#;
    LW_PRGNLCL_RISCV_ICD_RDATA0_Address                              : constant := 16#14c_f900#;
    LW_PRGNLCL_RISCV_ICD_RDATA1_Address                              : constant := 16#14c_fa00#;
    LW_PRGNLCL_RISCV_RPC_Address                                     : constant := 16#14c_fb00#;
    LW_PRGNLCL_RISCV_RSTAT0_Address                                  : constant := 16#14c_fc00#;
    LW_PRGNLCL_RISCV_TRACECTL_Address                                : constant := 16#14d_0000#;
    LW_PRGNLCL_RISCV_TRACE_RDIDX_Address                             : constant := 16#14d_0100#;
    LW_PRGNLCL_RISCV_TRACE_WTIDX_Address                             : constant := 16#14d_0200#;
    LW_PRGNLCL_RISCV_TRACEPC_HI_Address                              : constant := 16#14d_0400#;
    LW_PRGNLCL_RISCV_TRACEPC_LO_Address                              : constant := 16#14d_0300#;
    LW_PRGNLCL_RISCV_MTIMECMP_HI_Address                             : constant := 16#14c_f100#;
    LW_PRGNLCL_RISCV_MTIMECMP_LO_Address                             : constant := 16#14c_f000#;
    LW_PRGNLCL_RISCV_INTR_STATUS_Address                             : constant := 16#14c_e500#;
    LW_PRGNLCL_RISCV_MSIP_Address                                    : constant := 16#14c_e300#;
    LW_PRGNLCL_RISCV_PRIV_ERR_STAT_Address                           : constant := 16#14d_4000#;
    LW_PRGNLCL_RISCV_PRIV_ERR_INFO_Address                           : constant := 16#14d_4100#;
    LW_PRGNLCL_RISCV_PRIV_ERR_ADDR_Address                           : constant := 16#14d_4200#;
    LW_PRGNLCL_RISCV_PRIV_ERR_ADDR_HI_Address                        : constant := 16#14d_4300#;
    LW_PRGNLCL_RISCV_HUB_ERR_STAT_Address                            : constant := 16#14d_4400#;
    LW_PRGNLCL_RISCV_IROM_PATCH_CAM_INDEX_Address                    : constant := 16#14d_6400#;
    LW_PRGNLCL_RISCV_IROM_PATCH_CAM_ADDR_VALID_Address               : constant := 16#14d_6500#;
    LW_PRGNLCL_RISCV_IROM_PATCH_CAM_DATA_Address                     : constant := 16#14d_6600#;
    LW_PRGNLCL_RISCV_IROM_PATCH_SECURE_Address                       : constant := 16#14d_6700#;
    LW_PRGNLCL_RISCV_IOPMP_INDEX_Address                             : constant := 16#14d_6c00#;
    LW_PRGNLCL_RISCV_IOPMP_CFG_Address                               : constant := 16#14d_6d00#;
    LW_PRGNLCL_RISCV_IOPMP_ADDR_HI_Address                           : constant := 16#14d_6f00#;
    LW_PRGNLCL_RISCV_IOPMP_ADDR_LO_Address                           : constant := 16#14d_6e00#;
    LW_PRGNLCL_RISCV_IOPMP_MODE_0_Address                            : constant := 16#14d_7000#;
    LW_PRGNLCL_RISCV_IOPMP_MODE_1_Address                            : constant := 16#14d_7100#;
    LW_PRGNLCL_RISCV_IOPMP_ERR_STAT_Address                          : constant := 16#14d_7800#;
    LW_PRGNLCL_RISCV_IOPMP_ERR_INFO_Address                          : constant := 16#14d_7900#;
    LW_PRGNLCL_RISCV_IOPMP_ERR_ADDR_HI_Address                       : constant := 16#14d_7b00#;
    LW_PRGNLCL_RISCV_IOPMP_ERR_ADDR_LO_Address                       : constant := 16#14d_7a00#;
    LW_PRGNLCL_RISCV_IOPMP_ERR_CAPEN_Address                         : constant := 16#14d_7c00#;
    LW_PRGNLCL_RISCV_SCPDMATRFMOFFS_Address                          : constant := 16#14d_5c00#;
    LW_PRGNLCL_RISCV_SCPDMATRFCMD_Address                            : constant := 16#14d_5d00#;
    LW_PRGNLCL_RISCV_SCPDMAPOLL_Address                              : constant := 16#14d_5e00#;
    LW_PRGNLCL_RISCV_SCP_SECRET_MASK_0_Address                       : constant := 16#14d_6000#;
    LW_PRGNLCL_RISCV_SCP_SECRET_MASK_1_Address                       : constant := 16#14d_6100#;
    LW_PRGNLCL_RISCV_SCP_SECRET_MASK_LOCK_0_Address                  : constant := 16#14d_6200#;
    LW_PRGNLCL_RISCV_SCP_SECRET_MASK_LOCK_1_Address                  : constant := 16#14d_6300#;
    LW_PRGNLCL_RISCV_BR_VER_Address                                  : constant := 16#14d_9600#;
    LW_PRGNLCL_RISCV_BR_RETCODE_Address                              : constant := 16#14d_9700#;
    LW_PRGNLCL_RISCV_BR_PRIV_LOCKDOWN_Address                        : constant := 16#14d_9800#;
    LW_PRGNLCL_RISCV_BCR_CTRL_Address                                : constant := 16#14d_9a00#;
    LW_PRGNLCL_RISCV_BCR_DMACFG_Address                              : constant := 16#14d_9b00#;
    LW_PRGNLCL_RISCV_BCR_DMACFG_SEC_Address                          : constant := 16#14d_a500#;
    LW_PRGNLCL_RISCV_BCR_DMAADDR_PKCPARAM_LO_Address                 : constant := 16#14d_9c00#;
    LW_PRGNLCL_RISCV_BCR_DMAADDR_PKCPARAM_HI_Address                 : constant := 16#14d_9d00#;
    LW_PRGNLCL_RISCV_BCR_DMAADDR_FMCCODE_LO_Address                  : constant := 16#14d_9e00#;
    LW_PRGNLCL_RISCV_BCR_DMAADDR_FMCCODE_HI_Address                  : constant := 16#14d_9f00#;
    LW_PRGNLCL_RISCV_BCR_DMAADDR_FMCDATA_LO_Address                  : constant := 16#14d_a000#;
    LW_PRGNLCL_RISCV_BCR_DMAADDR_FMCDATA_HI_Address                  : constant := 16#14d_a100#;
    LW_PRGNLCL_RISCV_BCR_DMAADDR_PUBKEY_LO_Address                   : constant := 16#14d_a200#;
    LW_PRGNLCL_RISCV_BCR_DMAADDR_PUBKEY_HI_Address                   : constant := 16#14d_a300#;
    LW_PRGNLCL_RISCV_DEVICEMAP_RISCVMMODE_0_Address                  : constant := 16#14d_8400#;
    LW_PRGNLCL_RISCV_DEVICEMAP_RISCVMMODE_1_Address                  : constant := 16#14d_8600#;
    LW_PRGNLCL_RISCV_DEVICEMAP_RISCVMMODE_2_Address                  : constant := 16#14d_8800#;
    LW_PRGNLCL_RISCV_DEVICEMAP_RISCVMMODE_3_Address                  : constant := 16#14d_8a00#;
    LW_PRGNLCL_RISCV_DEVICEMAP_RISCVSUBMMODE_0_Address               : constant := 16#14d_8500#;
    LW_PRGNLCL_RISCV_DEVICEMAP_RISCVSUBMMODE_1_Address               : constant := 16#14d_8700#;
    LW_PRGNLCL_RISCV_DEVICEMAP_RISCVSUBMMODE_2_Address               : constant := 16#14d_8900#;
    LW_PRGNLCL_RISCV_DEVICEMAP_RISCVSUBMMODE_3_Address               : constant := 16#14d_8b00#;
    LW_PRGNLCL_SCP_CTL0_Address                                      : constant := 16#142_0000#;
    LW_PRGNLCL_SCP_CTL1_Address                                      : constant := 16#142_0100#;
    LW_PRGNLCL_SCP_CTL_STAT_Address                                  : constant := 16#142_0200#;
    LW_PRGNLCL_SCP_CTL_CFG_Address                                   : constant := 16#142_0300#;
    LW_PRGNLCL_SCP_CFG0_Address                                      : constant := 16#142_0400#;
    LW_PRGNLCL_SCP_CTL_SCP_Address                                   : constant := 16#142_0500#;
    LW_PRGNLCL_SCP_CTL_DEBUG_Address                                 : constant := 16#142_0700#;
    LW_PRGNLCL_SCP_DEBUG0_Address                                    : constant := 16#142_0800#;
    LW_PRGNLCL_SCP_DEBUG1_Address                                    : constant := 16#142_0900#;
    LW_PRGNLCL_SCP_DEBUG2_Address                                    : constant := 16#142_0a00#;
    LW_PRGNLCL_SCP_DEBUG_CMD_Address                                 : constant := 16#142_0c00#;
    LW_PRGNLCL_SCP_ACL_FETCH_Address                                 : constant := 16#142_1000#;
    LW_PRGNLCL_SCP_ACL_KEYABLE_Address                               : constant := 16#142_1100#;
    LW_PRGNLCL_SCP_ACL_WRITE_Address                                 : constant := 16#142_1200#;
    LW_PRGNLCL_SCP_STATUS_Address                                    : constant := 16#142_1400#;
    LW_PRGNLCL_SCP_STAT0_Address                                     : constant := 16#142_1500#;
    LW_PRGNLCL_SCP_STAT1_Address                                     : constant := 16#142_1600#;
    LW_PRGNLCL_SCP_SECRET63_CTL_Address                              : constant := 16#142_1800#;
    LW_PRGNLCL_SCP_RNG_STAT0_Address                                 : constant := 16#142_1c00#;
    LW_PRGNLCL_SCP_RNG_STAT1_Address                                 : constant := 16#142_1d00#;
    LW_PRGNLCL_SCP_INTR_Address                                      : constant := 16#142_2000#;
    LW_PRGNLCL_SCP_INTR_EN_Address                                   : constant := 16#142_2100#;
    LW_PRGNLCL_SCP_ACL_VIO_Address                                   : constant := 16#142_2400#;
    LW_PRGNLCL_SCP_SECURITY_VIO_Address                              : constant := 16#142_2500#;
    LW_PRGNLCL_SCP_CMD_ERROR_Address                                 : constant := 16#142_2600#;
    LW_PRGNLCL_SCP_RNDCTL0_Address                                   : constant := 16#142_4000#;
    LW_PRGNLCL_SCP_RNDCTL1_Address                                   : constant := 16#142_4100#;
    LW_PRGNLCL_SCP_RNDCTL2_Address                                   : constant := 16#142_4200#;
    LW_PRGNLCL_SCP_RNDCTL3_Address                                   : constant := 16#142_4300#;
    LW_PRGNLCL_SCP_RNDCTL4_Address                                   : constant := 16#142_4400#;
    LW_PRGNLCL_SCP_RNDCTL5_Address                                   : constant := 16#142_4500#;
    LW_PRGNLCL_SCP_RNDCTL6_Address                                   : constant := 16#142_4600#;
    LW_PRGNLCL_SCP_RNDCTL7_Address                                   : constant := 16#142_4700#;
    LW_PRGNLCL_SCP_RNDCTL8_Address                                   : constant := 16#142_4800#;
    LW_PRGNLCL_SCP_RNDCTL9_Address                                   : constant := 16#142_4900#;
    LW_PRGNLCL_SCP_RNDCTL10_Address                                  : constant := 16#142_4a00#;
    LW_PRGNLCL_SCP_RNDCTL11_Address                                  : constant := 16#142_4b00#;
    LW_PRGNLCL_SCP_CTL_P2PRX_Address                                 : constant := 16#142_4c00#;
    LW_PRGNLCL_SCP_PDI_LO_Address                                    : constant := 16#142_4e00#;
    LW_PRGNLCL_SCP_PDI_HI_Address                                    : constant := 16#142_4f00#;
    LW_PRGNLCL_SCP_SCC_DEBUG_HWCFG0_Address                          : constant := 16#142_5000#;
    LW_PRGNLCL_SCP_SCC_DEBUG_HWCFG1_Address                          : constant := 16#142_5100#;
    LW_PRGNLCL_SCP_SCC_DEBUG_HWCFG2_Address                          : constant := 16#142_5200#;
    LW_PRGNLCL_SCP_SCC_DEBUG_STAT0_Address                           : constant := 16#142_5300#;
    LW_PRGNLCL_SCP_SCC_DEBUG_STAT1_Address                           : constant := 16#142_5400#;
    LW_PRGNLCL_SCP_PUBKEYC_Address                                   : constant := 16#142_5800#;
    LW_PRGNLCL_SCP_PUBKEYD_Address                                   : constant := 16#142_5900#;
    LW_PRGNLCL_SCP_PK_ADDR_Address                                   : constant := 16#142_5c00#;
    LW_PRGNLCL_SCP_PK_DATA_Address                                   : constant := 16#142_5d00#;
    LW_PRGNLCL_TFBIF_CTL_Address                                     : constant := 16#14f_8000#;
    LW_PRGNLCL_TFBIF_WRR_RDP_Address                                 : constant := 16#14f_8e00#;
    LW_PRGNLCL_TFBIF_ATT_PRIV_LEVEL_MASK_Address                     : constant := 16#14f_9000#;
    LW_PRGNLCL_TFBIF_TRANSCFG_Address                                : constant := 16#14f_9100#;
    LW_PRGNLCL_TFBIF_REGIONCFG_Address                               : constant := 16#14f_9200#;
    LW_PRGNLCL_TFBIF_REGIONCFG1_Address                              : constant := 16#14f_9600#;
    LW_PRGNLCL_TFBIF_REGIONCFG2_Address                              : constant := 16#14f_9700#;
    LW_PRGNLCL_TFBIF_ACTMON_ACTIVE_MASK_Address                      : constant := 16#14f_9300#;
    LW_PRGNLCL_TFBIF_ACTMON_ACTIVE_BORPS_Address                     : constant := 16#14f_9400#;
    LW_PRGNLCL_TFBIF_ACTMON_ACTIVE_WEIGHT_Address                    : constant := 16#14f_9500#;
    LW_PRGNLCL_TFBIF_ACTMON_MCB_MASK_Address                         : constant := 16#14f_9800#;
    LW_PRGNLCL_TFBIF_ACTMON_MCB_BORPS_Address                        : constant := 16#14f_9900#;
    LW_PRGNLCL_TFBIF_ACTMON_MCB_WEIGHT_Address                       : constant := 16#14f_9a00#;
    LW_PRGNLCL_TFBIF_THI_TRANSPROP_Address                           : constant := 16#14f_9c00#;
    LW_PRGNLCL_TFBIF_MCCIF_FIFOCTRL_Address                          : constant := 16#14f_8100#;
    LW_PRGNLCL_TFBIF_MCCIF_FIFOCTRL1_Address                         : constant := 16#14f_8d00#;
    LW_PRGNLCL_TFBIF_THROTTLE_Address                                : constant := 16#14f_8200#;
    LW_PRGNLCL_TFBIF_DBG_STAT0_Address                               : constant := 16#14f_8300#;
    LW_PRGNLCL_TFBIF_DBG_STAT1_Address                               : constant := 16#14f_8400#;
    LW_PRGNLCL_TFBIF_DBG_RDCOUNT_LO_Address                          : constant := 16#14f_8500#;
    LW_PRGNLCL_TFBIF_DBG_RDCOUNT_HI_Address                          : constant := 16#14f_8600#;
    LW_PRGNLCL_TFBIF_DBG_WRCOUNT_LO_Address                          : constant := 16#14f_8700#;
    LW_PRGNLCL_TFBIF_DBG_WRCOUNT_HI_Address                          : constant := 16#14f_8800#;
    LW_PRGNLCL_TFBIF_DBG_R32COUNT_Address                            : constant := 16#14f_8900#;
    LW_PRGNLCL_TFBIF_DBG_R64COUNT_Address                            : constant := 16#14f_8a00#;
    LW_PRGNLCL_TFBIF_DBG_R128COUNT_Address                           : constant := 16#14f_8b00#;
end Dev_Prgnlcl;
