#
# _LWRM_COPYRIGHT_BEGIN_
#
# Copyright 2014-2020 by LWPU Corporation.  All rights reserved.  All
# information contained herein is proprietary and confidential to LWPU
# Corporation.  Any use, reproduction, or disclosure without the written
# permission of LWPU Corporation is prohibited.
#
# _LWRM_COPYRIGHT_END_
#

###############################################################################
# Default build options
###############################################################################

NO_COMPRESS         ?= false
NO_CHECK_BUILD      ?= false
NO_RELEASE          ?= false
INCLUDE_DT          ?= false

###############################################################################
# Target inspecific paths: these are paths used by the build but not dependent
# upon the build.
###############################################################################

LWUPROC        = $(LW_SOURCE)/uproc
BUILD_SCRIPTS  = $(LWUPROC)/build/scripts
LWRISCV        = $(LWUPROC)/lwriscv
APP_COMMON_SW  = $(LWRISCV)/bootloader_tests/common
APP_SW         = $(LWRISCV)/bootloader_tests/$(TEST_NAME)
RESMAN_ROOT    = $(LW_SOURCE)/drivers/resman
SCP_PARSER     = $(LWUPROC)/utilities/cci_pp.pl
SEC_ENUM_H     = $(LWUPROC)/utilities/sec_enum_types.h
RVBL_NAME      = $(subst riscv,rvbl,$(CFG_PROFILE))
LDR_BIN        = $(LWRISCV)/bootloader/src/_out/$(RVBL_NAME)/g_$(RVBL_NAME).bin
PARAMGEN       = $(APP_COMMON_SW)/gen_params.pl
# TODO: Move this to lwRiscvHost.lwmk
STRIP          = $(LWRISCV_TOOLS)/bin/$(LWRISCV_PREFIX)strip

###############################################################################
# Set profile-specific make vars. This includes things like the target RISC-V
# architecture (ex. lwriscv), the linker-script to use, the manual directory,
# etc ...).
###############################################################################

CFG_PROFILE ?= gsp_riscv_tu10x
CFG_PROFILE  = $(CFG_PROFILE)
include $(APP_SW)/config/profiles.mk

###############################################################################
# Load common RISC-V make vars and host command definitions (ie. MKDIR, P4,
# COPY, etc...).
###############################################################################

include $(LWUPROC)/build/common/lwRiscvArch.lwmk
override LW_TARGET_ARCH = $(RISCV_TOOLS_BUILD)
override LW_TARGET_OS   = riscv
include $(LW_SOURCE)/drivers/common/build/lwCommon.lwmk

###############################################################################
# Define the output directory paths for the build and all sub-make builds.
###############################################################################

OUTPUTDIR := _out/$(CFG_PROFILE)

###############################################################################
# Export variables used by sub-makefiles ilwoked by this makefile
###############################################################################

export LW_TARGET_ARCH
export MANUAL_PATHS

###############################################################################
# Define macros based on profile
###############################################################################

ENGINE_NAME = ""

CFLAGS   += -DIMEM_SIZE=$(IMEM_SIZE) -DDMEM_SIZE=$(DMEM_SIZE)
ASMFLAGS += -DIMEM_SIZE=$(IMEM_SIZE) -DDMEM_SIZE=$(DMEM_SIZE)
# AM-TODO: This needs to go somewhere else
ASMFLAGS += $(addprefix -I,$(LW_INCLUDES))

###############################################################################
# Submake Configuration
#
# This makefile builds libraries and tools that are shared with other projects.
# Many of these builds may be lwstomized based on the needs of the project
# building it. It is therefore necessary to ensure isolation between the
# projects. Isolation is also required to allow for parallelization of project
# builds.
#
# Isolation is achieved by ensuring that all build output is kept separate
# between the projects. Ideally, output could all be redirected to a path
# defined within the app's/project's output directory. However, the common
# lwmake rules require that each submake target's output directory be contained
# within that target's source directory. As a result, the only way to ensure
# isolation is by establishing proper namespacing within each submake target's
# local output directory.
###############################################################################

SUBMAKE_NAMESPACE := riscv
SUBMAKE_OUTPUTDIR := \
  _out/$(SUBMAKE_NAMESPACE)/$(RISCV_ARCH)_$(LW_BUILD_TYPE)

##############################################################################
# Additional include paths required
##############################################################################

LW_INCLUDES += $(APP_COMMON_SW)/inc
LW_INCLUDES += $(APP_SW)/inc
LW_INCLUDES += $(LWRISCV)/inc
LW_INCLUDES += $(LW_SOURCE)/drivers/common/inc/swref
LW_INCLUDES += $(LW_SOURCE)/drivers/common/inc/hwref
LW_INCLUDES += $(RESMAN_ROOT)/kernel/inc
LW_INCLUDES += $(RESMAN_ROOT)/arch/lwalloc/common/inc
LW_INCLUDES += $(LWRISCV_TOOLS)/include
LW_INCLUDES += $(MANUAL_PATHS)
LW_INCLUDES += $(OUTPUTDIR)

###############################################################################
# Define the names and locations for the various images that are generated
# during the build-process (IMG_*). Also create the list of files that need
# updated with those images when the install-mode is enabled.
###############################################################################

IMG_TARGET  := $(OUTPUTDIR)/$(TEST_NAME)
IMG_ELF     := $(IMG_TARGET).elf
IMG_READELF := $(IMG_TARGET).readelf
IMG_H       := $(IMG_TARGET).h
IMG_OBJDUMP := $(IMG_TARGET).objdump
IMG_NM      := $(IMG_TARGET).nm
IMG_DT      := $(IMG_TARGET).dt
IMG_DBGLINE := $(IMG_TARGET).dbgline
IMG_BIN     := $(IMG_TARGET)_image.bin

RELEASE_FILES            = $(IMG_H) $(IMG_NM) $(IMG_OBJDUMP) $(IMG_READELF)
RESTRICTED_RELEASE_FILES =

# Don't delete the ELF or BIN
.PRECIOUS: $(IMG_ELF) $(IMG_BIN)

###############################################################################
# Application-specific compiler/linker flags
###############################################################################

CFLAGS += -ffreestanding -fno-common -Os -fpie
LDFLAGS += -nostdlib -nostartfiles
LDFLAGS += -T $(LDSCRIPT)

###############################################################################
# Set the [GENERATED_]SOURCES that need to be picked-up by the build
###############################################################################

GENERATED_SOURCES := $(SRC_PARSED)
SOURCES += $(SRC)

###############################################################################
# Make variable used to tell mkimage which changelist number to include in the
# descriptor for the c-file image.
###############################################################################

ifneq ($(LW_DVS_BLD),1)
  APP_P4_CL = $(word 2, $(shell $(PERL) -e 'chdir(qw(.)); delete $$ELW{PWD}; \
                  print `$(P4) changes -m1 "$(LW_SOURCE)/..."`;'))
else
  APP_P4_CL = $(CHANGELIST)
endif

###############################################################################
# Define a string describing the project being built.  This string is used as
# a prefix for the majority of the output from the build for tracking progress
# and sanity-checking.
###############################################################################

BUILD_PROJECT_NAME = "[$(CFG_PROFILE)]"

###############################################################################
# Rules for building the ELF image and binary files
###############################################################################

build: $(addsuffix .build,$(SUBDIRS)) all

all: $(IMG_ELF)

###############################################################################
# Rule to produce the ELF image. Building all object-files and preprocessing
# linker script is the prerequisite for this rule.
###############################################################################
$(IMG_ELF): $(OBJECTS) $(LDSCRIPT)
	$(ECHO) $(BUILD_PROJECT_NAME) generating $(notdir $@)
	$(CC) $(CFLAGS) $(OBJECTS) -o $(IMG_ELF) $(LDFLAGS)
	$(ECHO) "AppVersion: $(APP_P4_CL)" > $(IMG_OBJDUMP)
	$(ECHO) "AppVersion: $(APP_P4_CL)" > $(IMG_OBJDUMP).source
	$(ECHO) "AppVersion: $(APP_P4_CL)" > $(IMG_NM)
	$(ECHO) "AppVersion: $(APP_P4_CL)" > $(IMG_READELF)
	$(OBJDUMP) -x    $(IMG_ELF) >> $(IMG_OBJDUMP)
	$(OBJDUMP) -D    $(IMG_ELF) >> $(IMG_OBJDUMP)
	$(OBJDUMP) -S -d $(IMG_ELF) >> $(IMG_OBJDUMP).source
	$(NM)      -S -n $(IMG_ELF) >> $(IMG_NM)
	$(ECHO) $(BUILD_PROJECT_NAME) generating $(notdir $(IMG_READELF))
	$(READELF) --all $(IMG_ELF) >> $(IMG_READELF)
	$(ECHO) $(BUILD_PROJECT_NAME) generating $(notdir $(IMG_DBGLINE))
	$(READELF) --debug-dump=decodedline $(IMG_ELF) >> $(IMG_DBGLINE)
	$(STRIP) $(IMG_ELF)
	$(ECHO) $(BUILD_PROJECT_NAME) The ELF name is $(IMG_ELF)

###############################################################################
# Rule to parse the source with CCI tool
###############################################################################

$(SRC_PARSED): $(SRC_ORIGINAL)
	$(ECHO) $(BUILD_PROJECT_NAME) CCI parsing $(notdir $@)
	$(PERL) $(SCP_PARSER) $(SEC_ENUM_H) $(SRC_ORIGINAL) $(SRC_PARSED)

###############################################################################
# Rule to preprocess the linker script for current profile
###############################################################################

$(LDSCRIPT): $(LDSCRIPT_IN)
	$(ECHO) $(BUILD_PROJECT_NAME) preprocessing $(notdir $@)
	$(CPP) -x c -P -o $(LDSCRIPT) $(LD_DEFINES) $(LDSCRIPT_IN)

#
# When not building for DVS, the output image files need copied over to the RM
# so that they get picked up by the driver/mods build. Trigger the process by
# adding a phony prerequisite to 'all' called 'install'. The rule to rebuild
# that target will perform the install process and will copy the files to the
# RM if necessary.  Skip this process if the user has requested that files NOT
# be installed via NO_INSTALL=true.
#
ifneq ($(LW_DVS_BLD),1)
  ifneq ("$(NO_RELEASE)","true")
    .PHONY: install
    all: install
  endif
endif

###############################################################################
# Rule for generating .dt/symdump file
###############################################################################

SYMDUMP_SCRIPT = $(LW_SOURCE)/pmu_sw/build/symdump/symdump.pl

SYMDUMP_ARGS  += $(IMG_ELF) $(IMG_DT)
SYMDUMP_ARGS  += --acl          $(APP_P4_CL)

$(IMG_DT):
	-$(PERL) $(SYMDUMP_SCRIPT) $(SYMDUMP_ARGS)

ifeq ("$(INCLUDE_DT)","true")
  all: $(IMG_DT)
endif

###############################################################################
# Common/Shared Rules
###############################################################################

include $(LW_SOURCE)/drivers/common/build/lwCommonRules.lwmk

#
# The common rule for cleaning (provided by lwCommonRules.lwmk) only supports
# flat output-directory structures and also expect object-files to be suffixed
# with .obj instead of .o. Until the rule is improved, be safe and mimic the
# behavior of clobber by simply deleting the output-directory. For riscv
# builds, there is actually very little different between 'clean' and 'clobber'
# anyway.
#
clean_ucode:
	-$(RMDIR) -rf $(OUTPUTDIR)

.PHONY: clean_ucode
clean: clean_ucode
