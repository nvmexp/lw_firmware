#
# _LWRM_COPYRIGHT_BEGIN_
#
# Copyright 2019 by LWPU Corporation.  All rights reserved.  All
# information contained herein is proprietary and confidential to LWPU
# Corporation.  Any use, reproduction, or disclosure without the written
# permission of LWPU Corporation is prohibited.
#
# _LWRM_COPYRIGHT_END_
#

###############################################################################
# Default build options
###############################################################################

NO_CHECK_BUILD      ?= false
NO_RELEASE          ?= false
INCLUDE_DT          ?= false
PEDANTIC_BUILD      ?= false

###############################################################################
# Target inspecific paths: these are paths used by the build but not dependent
# upon the build.
###############################################################################

LWUPROC        = $(LW_SOURCE)/uproc
AWS            = $(LWUPROC)/aws
RESMAN_ROOT    = $(LW_SOURCE)/drivers/resman
GEN_CLASS_OS   = $(AWS)/build/gen_class_os.pl

###############################################################################
# Set profile-specific make vars. This includes things like the target falcon
# architecture (ex. falcon4), the linker-script to use, the manual directory,
# etc ...).
###############################################################################

AWSCFG_PROFILE ?= aws_ucode_tu102
AWSCFG_PROFILE  = $(AWSCFG_PROFILE)
include $(AWS)/config/aws-profiles.mk

###############################################################################
# Load common falcon make vars and host command definitions (ie. MKDIR, P4,
# COPY, etc...).
###############################################################################

include $(LWUPROC)/build/common/lwFalconArch.lwmk
override LW_TARGET_ARCH = $(FALCON_TOOLS_BUILD)
override LW_TARGET_OS   = falcon
include $(LW_SOURCE)/drivers/common/build/lwCommon.lwmk

###############################################################################
# Define the output directory paths for the AWS build and all sub-make builds.
###############################################################################

OUTPUTDIR := _out/$(subst aws-,,$(AWSCFG_PROFILE))

###############################################################################
# Export variables used by sub-makefiles ilwoked by this makefile
###############################################################################

export LW_TARGET_ARCH

###############################################################################
# Define macros based on profile
###############################################################################


ifeq ($(PEDANTIC_BUILD),true)
    CFLAGS += -pedantic -msafety
endif

###############################################################################
# Submake Configuration
#
# This makefile builds libraries and tools that are shared with other projects.
# Many of these builds may be lwstomized based on the needs of the project
# building it. It is therefore necessary to ensure isolation between the
# projects. Isolation is also required to allow for parallelization of project
# builds.
#
# Isolation is achieved by ensuring that all build output is kept separate
# between the projects. Ideally, output could all be redirected to a path
# defined within the AWS's/project's output directory. However, the common
# lwmake rules require that each submake target's output directory be contained
# within that target's source directory. As a result, the only way to ensure
# isolation is by establishing proper namespacing within each submake target's
# local output directory.
###############################################################################

SUBMAKE_NAMESPACE := aws 
SUBMAKE_OUTPUTDIR := \
  _out/$(SUBMAKE_NAMESPACE)/$(FALCON_ARCH)_$(LW_BUILD_TYPE)


##############################################################################
# Additional include paths required
##############################################################################

LW_INCLUDES += $(AWS)/inc
LW_INCLUDES += $(LW_SOURCE)/drivers/common/inc/swref
LW_INCLUDES += $(LW_SOURCE)/drivers/common/inc/hwref
LW_INCLUDES += $(RESMAN_ROOT)/kernel/inc
LW_INCLUDES += $(RESMAN_ROOT)/arch/lwalloc/common/inc
LW_INCLUDES += $(FALCON_TOOLS)/include
LW_INCLUDES += $(OUTPUTDIR)

###############################################################################
# Define the names and locations for the various images that are generated
# during the build-process (IMG_*). Also create the list of files that need
# updated with those images when the install-mode is enabled.
###############################################################################

IMG_TARGET  := $(OUTPUTDIR)/g_$(AWSCFG_PROFILE)
IMG_ELF     := $(IMG_TARGET).out
IMG_READELF := $(IMG_TARGET).readelf
IMG_H       := $(IMG_TARGET).h
IMG_BIN     := $(IMG_TARGET).bin
IMG_OBJDUMP := $(IMG_TARGET).objdump
IMG_NM      := $(IMG_TARGET).nm
IMG_DT      := $(IMG_TARGET).dt
IMG_DBGLINE := $(IMG_TARGET).dbgline

RELEASE_FILES            = $(IMG_H) $(IMG_NM) $(IMG_OBJDUMP) $(IMG_READELF)
RESTRICTED_RELEASE_FILES =

###############################################################################
# Application-specific compiler/linker flags
###############################################################################

LDFLAGS += -T $(LDSCRIPT) -lfalcon

###############################################################################
## Set the SOURCES that need to be picked-up by the build
################################################################################

SOURCES := $(AWSSRC)

###############################################################################
# Make variable used to tell mkimage which changelist number to include in the
# descriptor for the c-file image.
###############################################################################

ifneq ($(LW_DVS_BLD),1)
  APP_P4_CL = $(word 2, $(shell $(PERL) -e 'chdir(qw(.)); delete $$ELW{PWD}; \
		  print `$(P4) changes -m1 "$(LW_SOURCE)/..."`;'))
else
  APP_P4_CL = $(CHANGELIST)
endif

###############################################################################
# Define a string describing the project being built.  This string is used as
# a prefix for the majority of the output from the build for tracking progress
# and sanity-checking.
###############################################################################

BUILD_PROJECT_NAME = "[$(AWSCFG_PROFILE)]"

###############################################################################
# Rules for building the ELF image and binary files
###############################################################################

build: $(addsuffix .build,$(SUBDIRS)) all

all: $(IMG_H)

###############################################################################
# Rule to produce the ELF image. Building all object-files and preprocessing
# linker script is the prerequisite for this rule.
###############################################################################
$(IMG_ELF): $(OBJECTS) $(LDSCRIPT)
	$(ECHO) $(BUILD_PROJECT_NAME) generating $(notdir $@)
	$(CC) $(CFLAGS) $(OBJECTS) -o $(IMG_ELF) $(LDFLAGS)
	$(ECHO) "AppVersion: $(APP_P4_CL)" > $(IMG_OBJDUMP)
	$(ECHO) "AppVersion: $(APP_P4_CL)" > $(IMG_OBJDUMP).source
	$(ECHO) "AppVersion: $(APP_P4_CL)" > $(IMG_NM)
	$(ECHO) "AppVersion: $(APP_P4_CL)" > $(IMG_READELF)
	$(OBJDUMP) -d    $(IMG_ELF) >> $(IMG_OBJDUMP)
	$(OBJDUMP) -S -d $(IMG_ELF) >> $(IMG_OBJDUMP).source
	$(NM)      -S -n $(IMG_ELF) >> $(IMG_NM)
	$(DUMPEXEC) -img $(OUTPUTDIR)/loader -b $(IMG_ELF)
	$(COPY) $(OUTPUTDIR)/loader.0x00000000 $(OUTPUTDIR)/loader.0x00000000.bin
	$(COPY) $(OUTPUTDIR)/loader.0x10000000 $(OUTPUTDIR)/loader.0x10000000.bin
	$(ECHO) $(BUILD_PROJECT_NAME) generating $(notdir $(IMG_READELF))
	$(READELF) --all $(IMG_ELF) >> $(IMG_READELF)
	$(ECHO) $(BUILD_PROJECT_NAME) generating $(notdir $(IMG_DBGLINE))
	$(READELF) --debug-dump=decodedline $(IMG_ELF) >> $(IMG_DBGLINE)
	$(ECHO) $(BUILD_PROJECT_NAME) The ELF name is $(IMG_ELF)


###############################################################################
# Rule to generate header file from binary
###############################################################################

$(IMG_H): $(IMG_ELF)
	$(ECHO) $(BUILD_PROJECT_NAME) generating header $(notdir $@)
	$(PERL) $(GEN_CLASS_OS) -vppath $(FALCON_TOOLS)/bin -dump $(IMG_ELF).dump -hdr $(IMG_H) -bin $(IMG_ELF) -base $(IMAGE_BASE) -array $(AWSCFG_PROFILE)

###############################################################################
# Rule to preprocess the linker script for current profile
###############################################################################

$(LDSCRIPT): $(LDSCRIPT_IN)
	$(ECHO) $(BUILD_PROJECT_NAME) preprocessing $(notdir $@)
	$(CPP) -x c -P -o $(LDSCRIPT) $(LD_DEFINES) $(LDSCRIPT_IN)

#
# When not building for DVS, the output image files need copied over to the RM
# so that they get picked up by the driver/mods build. Trigger the process by
# adding a phony prerequisite to 'all' called 'install'. The rule to rebuild
# that target will perform the install process and will copy the files to the
# RM if necessary.  Skip this process if the user has requested that files NOT
# be installed via NO_INSTALL=true.
#
ifneq ($(LW_DVS_BLD),1)
  ifneq ("$(NO_RELEASE)","true")
    .PHONY: install
    all: install
  endif
endif

install : $(IMG_H)

###############################################################################
# 'forcesync' is the same as the 'install' target except that we force the
# files to be installed (ie. regardless of whether or not the c-file differs
# from the RM version).
###############################################################################

forcesync: install
forcesync: RELEASE_IMG_ARGS += --force

###############################################################################
# Rule for generating .dt/symdump file
###############################################################################

SYMDUMP_SCRIPT = $(LW_SOURCE)/pmu_sw/build/symdump/symdump.pl

SYMDUMP_ARGS  += $(IMG_ELF) $(IMG_DT)
SYMDUMP_ARGS  += --falcon-tools $(FALCON_TOOLS)
SYMDUMP_ARGS  += --acl          $(APP_P4_CL)

$(IMG_DT):
	-$(PERL) $(SYMDUMP_SCRIPT) $(SYMDUMP_ARGS)

ifeq ("$(INCLUDE_DT)","true")
  all: $(IMG_DT)
endif

###############################################################################
# Common/Shared Rules
###############################################################################

include $(LW_SOURCE)/drivers/common/build/lwCommonRules.lwmk

#
# The common rule for cleaning (provided by lwCommonRules.lwmk) only supports
# flat output-directory structures and also expect object-files to be suffixed
# with .obj instead of .o. Until the rule is improved, be safe and mimic the
# behavior of clobber by simply deleting the output-directory. For falcon
# builds, there is actually very little different between 'clean' and 'clobber'
# anyway.
#
clean_ucode:
	-$(RMDIR) -rf $(OUTPUTDIR)

.PHONY: clean_ucode
clean: clean_ucode
