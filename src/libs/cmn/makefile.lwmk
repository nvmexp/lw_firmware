#
# Copyright 2017-2021 by LWPU Corporation.  All rights reserved.  All
# information contained herein is proprietary and confidential to LWPU
# Corporation.  Any use, reproduction, or disclosure without the written
# permission of LWPU Corporation is prohibited.
#

#
# The primary usage of this makefile is as a sub-makefile for a larger falcon
# build (such as the PMU/DPU/SEC2/SOE builds). It relies on the user (or top-level
# makefile) to establish the following make-vars before it is ilwoked:
#     * FALCON_ARCH
#     * LW_PROJ
#     * MANUAL_PATHS
#
# If building directly, it is highly recommended that you explicitly state (on
# the build command-line) which falcon architecture and chip project you're
# targeting. If unspecified, falcon5 and gm20x is assumed. The target
# architecture may be specified by setting FALCON_ARCH on the command-line.
# At this time, the available architectures are "falcon3", "falcon4" and "falcon5".
#
# LW_PROJ is only used to uniquely name the output directory where the built libraries
# will be located. This facilitates parallel building of falcon ucode for multiple
# projects.
#
# Example:
#
# % make FALCON_ARCH=falcon5 LW_PROJ=gm20x
#
# Additionally, based on the target arch, you need to also specify where the
# falcon manuals are for the architecture.  This is specified using
# MANUAL_PATHS.
#
# Additionally, based on the target arch, you need to also specify where the
# falcon manuals are for the architecture.  This is specified using
# MANUAL_PATHS.
#
# Examples:
#
# % make FALCON_ARCH=falcon5 MANUAL_PATHS=$LW_SOURCE/drivers/common/inc/hwref/maxwell/gm200

RESMAN_ROOT    ?= ../../../../../../drivers/resman
MANUAL_PATHS   ?= "$(LW_SOURCE)/drivers/common/inc/swref/fermi/gf119 $(LW_SOURCE)/drivers/common/inc/hwref/fermi/gf119 $(RESMAN_ROOT)/kernel/inc/fermi/gf119"
EXTRA_CFLAGS   ?=
PEDANTIC_BUILD ?= false

include $(LW_SOURCE)/drivers/common/build/lwCommon.lwmk
include $(LW_SOURCE)/uproc/build/common/lwRtosVersion.lwmk

build: all

##############################################################################
# Additional configuration flags for compiler
##############################################################################

CFLAGS += $(EXTRA_CFLAGS)

ifdef BASEADDR_NEEDED_FOR_CSB_ACCESS
CFLAGS += -DBASEADDR_NEEDED=$(BASEADDR_NEEDED_FOR_CSB_ACCESS)
endif

ifeq ($(LW_TARGET_OS),falcon)
CFLAGS += -DUPROC_FALCON
else ifeq ($(LW_TARGET_OS),riscv)
CFLAGS += -DUPROC_RISCV
endif

##############################################################################
# Additional include paths required
##############################################################################

LW_INCLUDES += ./inc
LW_INCLUDES += $(MANUAL_PATHS)
LW_INCLUDES += $(LW_SOURCE)/drivers/resman/arch/lwalloc/common/inc
ifeq ($(LW_TARGET_OS),riscv)
  LW_INCLUDES += $(LW_SOURCE)/uproc/lwriscv/inc
  LW_INCLUDES += $(LWRISCV_TOOLS)/include/spike/
  LW_INCLUDES += $(LW_SOURCE)/uproc/lwriscv/syslib/inc
  LW_INCLUDES += $(LW_SOURCE)/uproc/lwriscv/shlib/inc
  LW_INCLUDES += $(MEMMAP_PATH)
  ifdef LWRISCV_SDK
    LW_INCLUDES += $(LWRISCV_SDK)/inc
    LW_INCLUDES += $(LWRISCV_SDK_PROFILE)/inc
  endif
  ifdef PMU_RTOS
    LW_INCLUDES += $(LW_SOURCE)/pmu_sw/inc/
  endif
else
  ifdef GSPLITE_RTOS
    LW_INCLUDES += $(LW_SOURCE)/uproc/disp/dpu/inc
  endif
endif

ifdef GSP_RTOS
  LW_INCLUDES += $(LW_SOURCE)/uproc/gsp/inc
endif

ifdef SEC2_RTOS
  ifeq ($(LW_TARGET_OS),riscv)
    LW_INCLUDES += $(LW_SOURCE)/uproc/sec2_riscv/inc
  else ifeq ($(LW_TARGET_OS),falcon)
    LW_INCLUDES += $(LW_SOURCE)/uproc/sec2/inc
  endif
endif

ifdef SOE_RTOS
  ifeq ($(LW_TARGET_OS),riscv)
    LW_INCLUDES += $(LW_SOURCE)/uproc/soe_riscv/inc
  endif
endif
###############################################################################
# The falcon which is building the UprocCmn library with it will set a variable
# (SEC2_RTOS/PMU_RTOS, etc.), based on which the register access bus is be decided.
###############################################################################

ifdef SEC2_RTOS
  CFLAGS += -DSEC2_RTOS
endif
ifdef SOE_RTOS
  CFLAGS += -DSOE_RTOS
endif
ifdef DPU_RTOS
  CFLAGS += -DDPU_RTOS
endif
ifdef PMU_RTOS
  CFLAGS += -DLW_MISRA_COMPLIANCE_REQUIRED

  ifeq ($(LW_TARGET_OS),riscv)
    CFLAGS += -fno-jump-tables
  endif
endif
ifdef GSPLITE_RTOS
  CFLAGS += -DGSPLITE_RTOS
  CFLAGS += -DGSPLITE_CSB_ACCESS
endif
ifdef FBFLCN_BUILD
  CFLAGS += -DFBFLCN_BUILD
endif
ifdef GSP_RTOS
  ifeq ($(RUN_ON_SEC), true)
    CFLAGS += -DRUN_ON_SEC
  endif
endif
ifeq ($(PEDANTIC_BUILD),true)
  CFLAGS += -pedantic -msafety
endif

ifdef SUBMAKE_CFLAGS
  CFLAGS += $(SUBMAKE_CFLAGS)
endif

###############################################################################
# Set the SOURCES that need picked-up by the build
###############################################################################

ifeq ($(LW_TARGET_OS),riscv)
  SOURCES += src/osptimer_riscv.c
else #LW_TARGET_OS
  SOURCES += src/osptimer.c
endif #LW_TARGET_OS

TGT       = $(OUTPUTDIR)/libUprocCmn.a

###############################################################################
# Define a string describing the project being built.  This string is used as
# a prefix for the majority of the output from the build for tracking progress
# and sanity-checking.
###############################################################################

BUILD_PROJECT_NAME = "[uproc-cmn-$(LW_PROJ)-$(UPROC_ARCH)]"

all: $(TGT)
$(TGT): $(OBJECTS)
	$(MKDIR) ${dir $@}
	$(ECHO) $(BUILD_PROJECT_NAME) generating $(notdir $@)
	$(AR) -r -c $(TGT) $(OBJECTS)

include $(LW_SOURCE)/drivers/common/build/lwCommonRules.lwmk

