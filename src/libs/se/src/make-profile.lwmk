#
# _LWRM_COPYRIGHT_BEGIN_
#
# Copyright 2014-2021 by LWPU Corporation.  All rights reserved.  All
# information contained herein is proprietary and confidential to LWPU
# Corporation.  Any use, reproduction, or disclosure without the written
# permission of LWPU Corporation is prohibited.
#
# _LWRM_COPYRIGHT_END_
#

###############################################################################
# Default build options
###############################################################################

NO_CHECK_BUILD ?= false
NO_RELEASE     ?= false
INCLUDE_DT     ?= false
SAVE_TEMPS     ?= false

###############################################################################
# Target inspecific paths: these are paths used by the build but not dependent
# upon the build.
###############################################################################

SE_SW              = $(LW_SOURCE)/uproc/libs/se
LWUPROC            = $(LW_SOURCE)/uproc
RESMAN_ROOT        = $(LW_SOURCE)/drivers/resman
LIB_UPROC_LWOS_SRC = $(LWUPROC)/libs/lwos/$(LWOS_VERSION)

###############################################################################
# Set profile-specific make vars. This includes things like the target falcon
# architecture (ex. falcon4), the linker-script to use, the manual directory,
# etc ...).
###############################################################################

SECFG_PROFILE ?= se-gp10x
SECFG_PROFILE  = $(SECFG_PROFILE)
include $(SE_SW)/config/se-profiles.mk

###############################################################################
# Load common falcon make vars and host command definitions (ie. MKDIR, P4,
# COPY, etc...).
###############################################################################

include $(LW_SOURCE)/drivers/common/build/lwCommon.lwmk

###############################################################################
# Define the output directory paths for the SE build and all sub-make builds.
###############################################################################

OUTPUTDIR := $(SE_SW)/_out/$(subst se-,,$(SECFG_PROFILE))

###############################################################################
# Setup se-config make vars and ilwoke se-config. Use se-config's
# makefile.mk to do all the work. The makefile will generate se-config.mk in
# the output directory and then include it.
###############################################################################

SESRC_ALL          :=
SECFG_OPTIONS      :=
SECFG_OUTPUTDIR    ?= $(OUTPUTDIR)/config
SECFG_RESMAN_ROOT  := $(RESMAN_ROOT)
SECFG_SESW_ROOT    := $(SE_SW)/src

include $(SE_SW)/config/makefile.mk

# include the generated list of source files
ifdef SECFG_INITIALIZED
  include $(SECFG_OUTPUTDIR)/g_sources.mk
endif

###############################################################################
# Include profile-specific make settings to account for profile-specific build
# options/requirements.
###############################################################################

-include $(SE_SW)/config/$(SECFG_PROFILE).mk

###############################################################################
# Additional files to remove for 'clean' and 'clobber' targets.
###############################################################################

ifeq ("$(SAVE_TEMPS)","true")
    OTHER_FILES_TO_REMOVE += $(LW_SOURCE)/uproc/libs/se/src/*.s
    OTHER_FILES_TO_REMOVE += $(LW_SOURCE)/uproc/libs/se/src/*.i
endif

###############################################################################
# Export variables used by sub-makefiles ilwoked by this makefile
###############################################################################

export LW_TARGET_ARCH
export MANUAL_PATHS

###############################################################################
# RTOS Configuration
###############################################################################

include $(LWUPROC)/build/common/lwRtosVersion.lwmk

RTOS_SRC  = $(LW_RTOS_SRC)

##############################################################################
# Additional include paths required
##############################################################################

LW_INCLUDES += $(LIB_UPROC_LWOS_SRC)/inc
LW_INCLUDES += $(LW_SOURCE)/uproc/libs/cmn/inc
LW_INCLUDES += $(SE_SW)/inc
LW_INCLUDES += $(LW_SOURCE)/drivers/common/inc/swref
LW_INCLUDES += $(LW_SOURCE)/drivers/common/inc/hwref
LW_INCLUDES += $(RESMAN_ROOT)/kernel/inc
LW_INCLUDES += $(RESMAN_ROOT)/arch/lwalloc/common/inc
ifeq ($(LW_TARGET_OS), riscv)
  LW_INCLUDES += $(LW_SOURCE)/uproc/lwriscv/inc
  LW_INCLUDES += $(LWRISCV_TOOLS)/include/spike/
  LW_INCLUDES += $(MEMMAP_PATH)
  ifdef GSPLITE_RTOS
    LW_INCLUDES += $(LW_SOURCE)/uproc/gsp/inc
  endif
else
  LW_INCLUDES += $(FALCON_TOOLS)/include
  ifdef GSPLITE_RTOS
    LW_INCLUDES += $(LW_SOURCE)/uproc/disp/dpu/inc
  endif
endif
LW_INCLUDES += $(MANUAL_PATHS)
LW_INCLUDES += $(OUTPUTDIR)

###############################################################################
# Application-specific compiler/linker flags
###############################################################################

ifeq ("$(SAVE_TEMPS)","true")
  CFLAGS += -save-temps
endif

ifeq ($(LW_TARGET_OS),falcon)
  CFLAGS += -DUPROC_FALCON
else ifeq ($(LW_TARGET_OS),riscv)
  CFLAGS += -DUPROC_RISCV
endif

###############################################################################
# Set the SOURCES that need picked-up by the build
###############################################################################

SOURCES := $(SESRC_ALL)

TGT       = $(OUTPUTDIR)/libSE.a

###############################################################################
# The falcon which is building SE with it will set a variable. Based on that,
#.the secure bus registers will be mapped.
###############################################################################

ifdef LWDEC_BUILDING_SE
  CFLAGS += -DLWDEC_RTOS -I$(LWDEC_INC)
endif

ifdef PMU_RTOS
  CFLAGS += -DPMU_RTOS=$(PMU_RTOS)
endif

ifdef SEC2_RTOS
  CFLAGS += -DSEC2_RTOS=$(SEC2_RTOS)
endif

ifdef GSPLITE_RTOS
  CFLAGS += -DGSPLITE_RTOS=$(GSPLITE_RTOS)
  CFLAGS += -DGSPLITE_CSB_ACCESS=$(GSPLITE_RTOS)
endif

ifdef GSP_RTOS
  CFLAGS += -DGSP_RTOS=$(GSP_RTOS)
endif

ifdef DPU_RTOS
  CFLAGS += -DDPU_RTOS=$(DPU_RTOS)
endif

ifdef BASEADDR_NEEDED_FOR_CSB_ACCESS
  CFLAGS += -DBASEADDR_NEEDED=$(BASEADDR_NEEDED_FOR_CSB_ACCESS)
endif

ifeq ("$(SELWRE_BUS_ONLY_SUPPORTED)","true")
    CFLAGS += -DSELWRE_BUS_ONLY_SUPPORTED
endif

#LARGE_OBJ_FILES = $(addprefix $(OUTPUTDIR)/,$(LARGE_SRC_FILES:.c=.o))
_out/dpu/0200_falcon4_debug/se/lw/se_testse.o : CFLAGS += -mlarge-code

CFLAGS += -fno-jump-tables

###############################################################################
# Define a string describing the project being built.  This string is used as
# a prefix for the majority of the output from the build for tracking progress
# and sanity-checking.
###############################################################################

BUILD_PROJECT_NAME = "[$(SECFG_PROFILE)]"

#
# When not building for DVS, the output image files need copied over to the RM
# so that they get picked up by the driver/mods build. Trigger the process by
# adding a phony prerequisite to 'all' called 'install'. The rule to rebuild
# that target will perform the install process and will copy the files to the
# RM if necessary.  Skip this process if the user has requested that files NOT
# be installed via NO_INSTALL=true.
#
ifneq ($(LW_DVS_BLD),1)
  ifneq ("$(NO_RELEASE)","true")
    .PHONY: install
    all: install
  endif
endif

build: all

###############################################################################
# Rule for running a script that checks select files and directories in the
# environment and checks w/perforce that they are up-to-date (ie. TOT).
###############################################################################

CHECK_ELW_SCRIPT = $(BUILD_SCRIPTS)/check-build-elw.pl

# files/directories added to this list will be checked
CHECK_ELW_FILES += $(LW_SOURCE)/uproc/libs/se
CHECK_ELW_FILES += $(LW_SOURCE)/uproc/build
CHECK_ELW_FILES += $(LIB_UPROC_LWOS_SRC)
CHECK_ELW_FILES += $(RTOS_SRC)

CHECK_ELW_ARGS  += --check-list $(subst $(SPACE),$(COMMA),$(CHECK_ELW_FILES))
CHECK_ELW_ARGS  += --p4 $(P4)

checkbuild:
	-$(PERL) $(CHECK_ELW_SCRIPT) $(CHECK_ELW_ARGS)

all: $(TGT)
$(TGT): $(OBJECTS)
	$(MKDIR) ${dir $@}
	$(ECHO) $(BUILD_PROJECT_NAME) generating $(notdir $@)
	$(AR) -r -c $(TGT) $(OBJECTS)

###############################################################################
# Common/Shared Rules
###############################################################################

include $(LW_SOURCE)/drivers/common/build/lwCommonRules.lwmk

#
# The common rule for cleaning (provided by lwCommonRules.lwmk) only supports
# flat output-directory structures and also expect object-files to be suffixed
# with .obj instead of .o. Until the rule is improved, be safe and mimic the
# behavior of clobber by simply deleting the output-directory. For falcon
# builds, there is actually very little different between 'clean' and 'clobber'
# anyway.
#
clean_ucode:
	-$(RMDIR) -rf $(OUTPUTDIR)
#	-$(RM) -f $(GEN_TMP_SE_DEF)

.PHONY: clean_ucode
clean: clean_ucode

clobber_ucode:
	-$(RMDIR) -rf $(OUTPUTDIR)
#	-$(RM) -f $(GEN_TMP_SE_DEF)

.PHONY: clobber_ucode
clobber: clobber_ucode
