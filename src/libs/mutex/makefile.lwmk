#
# Copyright 2016-2021 by LWPU Corporation.  All rights reserved.  All
# information contained herein is proprietary and confidential to LWPU
# Corporation.  Any use, reproduction, or disclosure without the written
# permission of LWPU Corporation is prohibited.
#

#
# The primary usage of this makefile is as a sub-makefile for a larger falcon
# build (such as the PMU/DPU/SEC2 builds). It relies on the user (or top-level
# makefile) to establish the following make-vars before it is ilwoked:
#     * FALCON_ARCH
#     * LW_PROJ
#     * MANUAL_PATHS
#
# If building directly, it is highly recommended that you explicitly state (on
# the build command-line) which falcon architecture and chip project you're
# targeting. If unspecified, falcon5 and gm20x is assumed. The target
# architecture may be specified by setting FALCON_ARCH on the command-line.
# At this time, the available architectures are "falcon3", "falcon4" and "falcon5".
#
# LW_PROJ is only used to uniquely name the output directory where the built libraries
# will be located. This facilitates parallel building of falcon ucode for multiple
# projects.
#
# Example:
#
# % make FALCON_ARCH=falcon5 LW_PROJ=gm20x
#
# Additionally, based on the target arch, you need to also specify where the
# falcon manuals are for the architecture.  This is specified using
# MANUAL_PATHS.
#
# Additionally, based on the target arch, you need to also specify where the
# falcon manuals are for the architecture.  This is specified using
# MANUAL_PATHS.
#
# Examples:
#
# % make FALCON_ARCH=falcon5 MANUAL_PATHS=$LW_SOURCE/drivers/common/inc/hwref/maxwell/gm200

LW_PROJ                  ?= gm20x
FPGA_BUILD               ?= false
PEDANTIC_BUILD           ?= false
LIB_MUTEX_SEMAPHORE_ONLY ?= false

include $(LW_SOURCE)/drivers/common/build/lwCommon.lwmk
include $(LW_SOURCE)/uproc/build/common/lwRtosVersion.lwmk

build: all

##############################################################################
# Additional include paths required
##############################################################################

LW_INCLUDES += ./inc
LW_INCLUDES += $(LW_SOURCE)/drivers/resman/arch/lwalloc/common/inc
LW_INCLUDES += $(LW_SOURCE)/drivers/common/inc
LW_INCLUDES += $(LW_SOURCE)/uproc/libs/cmn/inc
LW_INCLUDES += $(LW_SOURCE)/uproc/libs/lwos/$(LWOS_VERSION)/inc
LW_INCLUDES += $(LW_RTOS_INCLUDES)
LW_INCLUDES += $(MANUAL_PATHS)
ifeq ($(LW_TARGET_OS), riscv)
  LW_INCLUDES += $(LW_SOURCE)/uproc/lwriscv/inc
  LW_INCLUDES += $(LWRISCV_TOOLS)/include/spike/
  LW_INCLUDES += $(LW_SOURCE)/uproc/lwriscv/syslib/inc
  LW_INCLUDES += $(MEMMAP_PATH)
  ifeq ($(IS_SSP_ENABLED), true)
    LW_INCLUDES += $(LW_SOURCE)/uproc/lwriscv/shlib/inc
  endif
  ifdef LWRISCV_SDK
    LW_INCLUDES += $(LWRISCV_SDK)/inc
    LW_INCLUDES += $(LWRISCV_SDK_PROFILE)/inc
  endif
  ifdef GSP_RTOS
    LW_INCLUDES += $(LW_SOURCE)/uproc/gsp/src/$(GSP_OUTPUTDIR)
  endif
  ifdef PMU_RTOS
    LW_INCLUDES += $(LW_SOURCE)/pmu_sw/prod_app/$(PMU_OUTPUTDIR)
  endif
else
  ifdef GSPLITE_RTOS
    LW_INCLUDES += $(LW_SOURCE)/uproc/disp/dpu/inc
  endif
endif

ifdef PMU_RTOS
  LW_INCLUDES += $(LW_SOURCE)/pmu_sw/inc
endif

ifdef GSP_RTOS
  LW_INCLUDES += $(LW_SOURCE)/uproc/gsp/inc
endif

###############################################################################
# Application-specific compiler/linker flags
###############################################################################

ifeq ("$(FPGA_BUILD)","true")
  CFLAGS += -DFPGA_BUILD
endif

ifeq ($(LW_TARGET_OS),falcon)
  CFLAGS += -DUPROC_FALCON
else ifeq ($(LW_TARGET_OS),riscv)
  CFLAGS += -DUPROC_RISCV
endif

ifdef GSPLITE_RTOS
  CFLAGS += -DGSPLITE_RTOS
  CFLAGS += -DGSPLITE_CSB_ACCESS
endif

ifdef GSP_RTOS
  ifeq ($(RUN_ON_SEC), true)
    CFLAGS += -DRUN_ON_SEC
  endif
endif

ifdef SOE_RTOS
  CFLAGS += -DSOE_RTOS
  CFLAGS += -DSOE_CSB_ACCESS
endif

ifdef PMU_RTOS
  CFLAGS += -DPMU_RTOS=$(PMU_RTOS)
  CFLAGS += -DLW_MISRA_COMPLIANCE_REQUIRED

  ifeq ($(LW_TARGET_OS),riscv)
    CFLAGS += -fno-jump-tables
  endif
endif

ifdef BASEADDR_NEEDED_FOR_CSB_ACCESS
  CFLAGS += -DBASEADDR_NEEDED=$(BASEADDR_NEEDED_FOR_CSB_ACCESS)
endif

ifeq ($(PEDANTIC_BUILD),true)
  CFLAGS += -pedantic -msafety
endif

ifdef SUBMAKE_CFLAGS
  CFLAGS += $(SUBMAKE_CFLAGS)
endif

###############################################################################
# Set the SOURCES that need picked-up by the build
###############################################################################

ifneq ($(LIB_MUTEX_SEMAPHORE_ONLY),true)
  SOURCES  += src/lib_mutex.c
endif
SOURCES  += src/lib_semaphore.c

TGT       = $(OUTPUTDIR)/libMutex.a

###############################################################################
# Define a string describing the project being built.  This string is used as
# a prefix for the majority of the output from the build for tracking progress
# and sanity-checking.
###############################################################################

BUILD_PROJECT_NAME = "[mutex-$(LW_PROJ)-$(UPROC_ARCH)]"

all: $(TGT)

ifdef VCAST_INSTRUMENT
ifeq (pmu-tu10a, $(PMUCFG_PROFILE))
  include $(LW_SOURCE)/uproc/vcast/vcast.mk
  VCAST_EXCLUDE_FILES :=
  FILTERED_SOURCES    := $(filter-out $(VCAST_EXCLUDE_FILES), $(SOURCES))

  ifneq (,$(filter $(VCAST_INSTRUMENT), add_source))
    $(OBJECTS): LIBMUTEXVC_ADD_FILES
  else ifneq (,$(filter $(VCAST_INSTRUMENT), instrument))
    $(OBJECTS): LIBMUTEXVC_INSTRUMENT
  endif

  LIBMUTEXVC_ADD_FILES:
	  $(P4) edit $(addprefix $(LW_SOURCE)/uproc/libs/mutex/, $(FILTERED_SOURCES))
	  $(VCAST_ADD_SOURCE_CMD)                                                    \
      $(addprefix $(LW_SOURCE)/uproc/libs/mutex/, $(FILTERED_SOURCES))

  LIBMUTEXVC_INSTRUMENT: LIBMUTEXVC_ADD_FILES
	  $(VCAST_INSTRUMENT_CMD)                                                    \
      "$(addprefix $(LW_SOURCE)/uproc/libs/mutex/, $(FILTERED_SOURCES))"

endif
endif

$(TGT): $(OBJECTS)
	$(MKDIR) ${dir $@}
	$(ECHO) $(BUILD_PROJECT_NAME) generating $(notdir $@)
	$(AR) -r -c $(TGT) $(OBJECTS)

include $(LW_SOURCE)/drivers/common/build/lwCommonRules.lwmk


