// Do NOT edit this file!!!
// Configuration for MISRA C-2012 Advisory Rules Suppression
//
// Advisory rules are lwrrently excepted from the scans as teams focus on
// fixing rules classified as "mandatory" and "required". Once compliance
// with mandatory and required rules are managed to the acceptable level,
// the advisory rules will be re-enabled.
//
// Deviations from Advisory rules, while not requiring a formal request for
// deviation, will still need to be dolwmented as part of each element's safety
// dolwmention.

// PIC: jbernia@lwpu.com, myoung@lwpu.com, mpitale@lwpu.com

{
    version : "2.0",
    standard : "c2012",
    title: "Lwpu Advisory Waivers",
    deviations : [
        // Directive 4.2: All usage of assembly language should be dolwmented.
        { deviation: "Directive 4.2", reason: "Temporary deviation based on safety team prioritization of Mandatory and Required rules." },

		// Directive 4.4: Sections of code should not be commented out.
		{ deviation: "Directive 4.4", reason: "Temporary deviation based on safety team prioritization of Mandatory and Required rules." },

		// Directive 4.5: Identifiers in the same name space with overlapping visibility should be typographically unambiguous.
		{ deviation: "Directive 4.5", reason: "Temporary deviation based on safety team prioritization of Mandatory and Required rules." },

		// Directive 4.6: "typedefs that indicate size and signedness should be used in place of the basic numerical types.
		{ deviation: "Directive 4.6", reason: "Temporary deviation based on safety team prioritization of Mandatory and Required rules." },

		// Directive 4.8: If a pointer to a structure or union is never dereferenced within a translation unit, then the implementation of the object should be hidden.
		{ deviation: "Directive 4.8", reason: "Temporary deviation based on safety team prioritization of Mandatory and Required rules." },

		// Directive 4.9: "A function should be used in preference to a function-like macro where they are interchangeable.
		{ deviation: "Directive 4.9", reason: "Temporary deviation based on safety team prioritization of Mandatory and Required rules." },

		// Directive 4.13: Functions which are designed to provide operations on a resource should be called in an appropriate sequence.
		{ deviation: "Directive 4.13", reason: "Temporary deviation based on safety team prioritization of Mandatory and Required rules." },

		// Rule 1.2 Language extensions should not be used.
		{ deviation: "Rule 1.2", reason: "Temporary deviation based on safety team prioritization of Mandatory and Required rules." },

		// Rule 2.3: A project should not contain unused type declarations.
		{ deviation: "Rule 2.3", reason: "Temporary deviation based on safety team prioritization of Mandatory and Required rules." },

		// Rule 2.4: A project should not contain unused tag declarations.
		{ deviation: "Rule 2.4", reason: "Temporary deviation based on safety team prioritization of Mandatory and Required rules." },

		// Rule 2.5: A project should not contain unused macro declarations.
		{ deviation: "Rule 2.5", reason: "Temporary deviation based on safety team prioritization of Mandatory and Required rules." },

		// Rule 2.6: A function should not contain unused label declarations.
		{ deviation: "Rule 2.6", reason: "Temporary deviation based on safety team prioritization of Mandatory and Required rules." },

		// Rule 2.7: There should be no unused parameters in functions.
		{ deviation: "Rule 2.7", reason: "Temporary deviation based on safety team prioritization of Mandatory and Required rules." },

		// Rule 4.2: Trigraphs should not be used.
		{ deviation: "Rule 4.2", reason: "Temporary deviation based on safety team prioritization of Mandatory and Required rules." },

		// Rule 5.9: Identifiers that define objects or functions with internal linkage should be unique.
		{ deviation: "Rule 5.9", reason: "Temporary deviation based on safety team prioritization of Mandatory and Required rules." },

		// Rule 8.7: Functions and objects should not be defined with external linkage if they are referenced in only one translation unit.
		{ deviation: "Rule 8.7", reason: "Temporary deviation based on safety team prioritization of Mandatory and Required rules." },

		// Rule 8.9: An object should be defined at block scope if its identifier only appears in a single function.
		{ deviation: "Rule 8.9", reason: "Temporary deviation based on safety team prioritization of Mandatory and Required rules." },

		// Rule 8.11: When an array with external linkage is declared, its size should be explicitly specifi ed.
		{ deviation: "Rule 8.11", reason: "Temporary deviation based on safety team prioritization of Mandatory and Required rules." },

		// Rule 8.13: A pointer should point to a const-qualifi ed type whenever possible.
		{ deviation: "Rule 8.13", reason: "Temporary deviation based on safety team prioritization of Mandatory and Required rules." },

		// Rule 10.5: The value of an expression should not be cast to an inappropriate essential type.
		{ deviation: "Rule 10.5", reason: "Temporary deviation based on safety team prioritization of Mandatory and Required rules." },

		// Rule 11.4: A colwersion should not be performed between a pointer to object and an integer type.
		{ deviation: "Rule 11.4", reason: "Temporary deviation based on safety team prioritization of Mandatory and Required rules." },

		// Rule 11.5: A colwersion should not be performed from pointer to void into pointer to object.
		{ deviation: "Rule 11.5", reason: "Temporary deviation based on safety team prioritization of Mandatory and Required rules." },

		// Rule 12.1: The precedence of operators within expressions should be made explicit.
         	{ deviation: "Rule 12.1", reason: "Temporary deviation based on safety team prioritization of Mandatory and Required rules." },

		// Rule 12.3: The comma operator should not be used.
		{ deviation: "Rule 12.3", reason: "Temporary deviation based on safety team prioritization of Mandatory and Required rules." },

		// Rule 12.4: Evaluation of constant expressions should not lead to unsigned integer wrap-around.
		{ deviation: "Rule 12.4", reason: "Temporary deviation based on safety team prioritization of Mandatory and Required rules." },

		// Rule 13.3: A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects other than that caused by the increment or decrement operator.
		{ deviation: "Rule 13.3", reason: "Temporary deviation based on safety team prioritization of Mandatory and Required rules." },

		// Rule 13.4: The result of an assignment operator should not be used.
		{ deviation: "Rule 13.4", reason: "Temporary deviation based on safety team prioritization of Mandatory and Required rules." },

		// Rule 15.1: The goto statement should not be used.
		{ deviation: "Rule 15.1", reason: "Temporary deviation based on safety team prioritization of Mandatory and Required rules." },

		// Rule 15.4: There should be no more than one break or goto statement used to terminate any iteration statement.
		{ deviation: "Rule 15.4", reason: "Temporary deviation based on safety team prioritization of Mandatory and Required rules." },

		// Rule 15.5: A function should have a single point of exit at the end.
		{ deviation: "Rule 15.5", reason: "Temporary deviation based on safety team prioritization of Mandatory and Required rules." },

		// Rule 17.5 The function argument corresponding to a parameter declared to have an array type shall have an appropriate number of elements.
		{ deviation: "Rule 17.5", reason: "Temporary deviation based on safety team prioritization of Mandatory and Required rules." },

		// Rule 17.8: A function parameter should not be modifi ed.
		{ deviation: "Rule 17.8", reason: "A function parameter should not be modified" },

		// Rule 18.4: The +, -, += and -= operators should not be applied to an expression of pointer type.
		{ deviation: "Rule 18.4", reason: "Temporary deviation based on safety team prioritization of Mandatory and Required rules." },

		// Rule 18.5: Declarations should contain no more than two levels of pointer nesting.
		{ deviation: "Rule 18.5", reason: "Temporary deviation based on safety team prioritization of Mandatory and Required rules." },

		// Rule 19.2: The union keyword should not be used.
		{ deviation: "Rule 19.2", reason: "Temporary deviation based on safety team prioritization of Mandatory and Required rules." },

		// Rule 20.1: #include directives should only be preceded by preprocessor directives or comments.
		{ deviation: "Rule 20.1", reason: "Temporary deviation based on safety team prioritization of Mandatory and Required rules." },

		// Rule 20.5: #undef should not be used.
		{ deviation: "Rule 20.5", reason: "Temporary deviation based on safety team prioritization of Mandatory and Required rules." },

		// Rule 20.10: The # and ## preprocessor operators should not be used.
		{ deviation: "Rule 20.10", reason: "Temporary deviation based on safety team prioritization of Mandatory and Required rules." },

		// Rule 21.12: The exception handling features of <felw.h> should not be used.
		{ deviation: "Rule 21.12", reason: "Temporary deviation based on safety team prioritization of Mandatory and Required rules." },

        // Rule 5.1:  Required: External identifiers shall be distinct.
        { deviation: "Rule 5.1", reason: "Modern compilers can distinguish identifiers longer than 31 or 63 characters. Onus on individual compilers to prove safe compilation of long identifiers." },

        // Rule 5.2:  Required: Identifiers declared in the same scope and name space shall be distinct.
        { deviation: "Rule 5.2", reason: "Modern compilers can distinguish identifiers longer than 31 or 63 characters. Onus on individual compilers to prove safe compilation of long identifiers." },

        // Rule 5.4:  Required: Macro identifiers shall be distinct.
        { deviation: "Rule 5.4", reason: "Modern compilers can distinguish macros longer than 31 or 63 characters. Onus on individual compilers to prove safe compilation of long macros." }
    ]
}
