#
# _LWRM_COPYRIGHT_BEGIN_
#
# Copyright 2021-2022 by LWPU Corporation.  All rights reserved.  All
# information contained herein is proprietary and confidential to LWPU
# Corporation.  Any use, reproduction, or disclosure without the written
# permission of LWPU Corporation is prohibited.
#
# _LWRM_COPYRIGHT_END_
#

CC_ROOT ?= $(LW_SOURCE)/uproc/conf_compute

override LW_TARGET_OS := riscv
include $(LW_SOURCE)/drivers/common/build/lwCommon.lwmk

include $(CC_ROOT)/config/profiles.mk
include  $(CC_ROOT)/build/memory_layout.mk

LW_ENGINE_MANUALS := $(MANUAL_PATHS)
BUILD_SCRIPTS     := $(LW_SOURCE)/uproc/build/scripts

LWRISCVX_SDK_ROOT     ?= $(LW_SOURCE)/uproc/lwriscv/sdk/$(LWRISCV_SDK_VERSION)
LWRISCVX_SDK_PREBUILT :=$(LWRISCVX_SDK_ROOT)/prebuilt/$(LWRISCV_SDK_PROFILE)

CC_PROFILE_NAME       := $(ENGINE)_$(PROJ)

# it must be built at this time
BUILD_DIR := $(CC_ROOT)/_out/$(CC_PROFILE_NAME)/proxy
# This is temporary, later it'll be separate image
INSTALL_DIR := $(CC_ROOT)/_out/$(CC_PROFILE_NAME)/staging

BUILD_DIR_PART := $(BUILD_DIR)
INSTALL_DIR_PART := $(INSTALL_DIR)

# LIBLWRISCV/libCCC configuration
LWRISCVX_PREBUILT_INC_DIR :=$(LWRISCVX_SDK_PREBUILT)/inc
LWRISCVX_PREBUILT_LIB_DIR :=$(LWRISCVX_SDK_PREBUILT)/lib
LIBLWRISCV_CONFIG_H     :=$(LWRISCVX_PREBUILT_INC_DIR)/liblwriscv/g_lwriscv_config.h
LIBLWRISCV_CONFIG_MK    :=$(LWRISCVX_SDK_PREBUILT)/g_lwriscv_config.mk

TARGET_NAME_BASE := g_rmproxy_$(ENGINE)_$(PROJ)_riscv
TARGET_PREFIX := $(INSTALL_DIR)/$(TARGET_NAME_BASE)

TARGET_IMAGE_ELF     := $(TARGET_PREFIX).elf
TARGET_IMAGE_OBJDUMP := $(TARGET_PREFIX).objdump
TARGET_IMAGE_READELF := $(TARGET_PREFIX).readelf
TARGET_IMAGE_TEXT    := $(TARGET_PREFIX).text
TARGET_IMAGE_DATA    := $(TARGET_PREFIX).data
TARGET_IMAGE_BIN     := $(TARGET_PREFIX).bin
TARGET_IMAGE         := $(TARGET_PREFIX)_image.bin
TARGET_DESC          := $(TARGET_PREFIX)_desc.bin
TARGET_SIGNATURE     := $(TARGET_PREFIX).pkc_ls_sig.h

TARGET_IMAGES := $(TARGET_IMAGE_ELF) $(TARGET_IMAGE_OBJDUMP) $(TARGET_IMAGE_READELF)
TARGET_IMAGES += $(TARGET_IMAGE) $(TARGET_DESC) $(TARGET_SIGNATURE)

export ARCH
export BUILD_DIR_PART
export CC_ROOT
export INSTALL_DIR_PART
export LIBLWRISCV_CONFIG_H
export LIBLWRISCV_CONFIG_MK
export LWRISCVX_PREBUILT_INC_DIR
export LWRISCVX_PREBUILT_LIB_DIR
export LWRISCVX_SDK_PREBUILT
export LWRISCVX_SDK_ROOT
export LWRISCV_SDK_VERSION
export LW_ENGINE_MANUALS
export PROFILE
export PROJ

release: build $(TARGET_IMAGES)
build: $(TARGET_IMAGES)

# some unneeded rules to satisfy lwCommon.lwmk
show_config: 

default: build.proxy
.PHONY: default release build clean clobber build.proxy clear.proxy

build.proxy: | $(BUILD_DIR)
	$(MAKE) -f make-partition.lwmk PART_DIR=rm_proxy build

clear.proxy: 
	$(MAKE) -f make-partition.lwmk PART_DIR=rm_proxy clean

##################### linking

# Preconfigure chip (mini chip-config)
include $(LIBLWRISCV_CONFIG_MK)

# It relies on (given) variables and prebuilt liblwriscv
include $(LWRISCVX_SDK_ROOT)/build/build_flags.mk

LIBS := -L$(LWRISCVX_PREBUILT_LIB_DIR) -L$(BUILD_DIR) 
LIBS +=  -lpart_rm_proxy -llwriscv

LDSCRIPT_IN := $(CC_ROOT)/build/ldscript_proxy.ld.in
LDSCRIPT    := $(BUILD_DIR)/ldscript.ld

### Those flags and includes are for manifest processing only

# Add liblwriscv to include path
INCLUDES += $(LWRISCVX_PREBUILT_INC_DIR)
# Add LWRISCV SDK to include path
INCLUDES += $(LWRISCVX_SDK_ROOT)/inc
# Add chip cheaders to include path
INCLUDES += $(LWRISCVX_SDK_ROOT)/inc/lwpu-sdk
INCLUDES := $(addprefix -I,$(INCLUDES))

CFLAGS += -Og
CFLAGS += $(INCLUDES)
CFLAGS += -fno-common 
CFLAGS += -D'PARTITION_NAME=rm_proxy'

LDFLAGS += -Wl,-melf64lriscv
LDFLAGS += -Wl,--gc-sections
LDFLAGS += -Wl,--print-gc-sections
LDFLAGS += -Wl,--print-memory-usage
LDFLAGS += -Wl,-Map=$(INSTALL_DIR)/rmproxy-link.log
LDFLAGS += -Wl,--sort-common=descending
LDFLAGS += -Wl,--sort-section=alignment
LDFLAGS += -Wl,--start-group $(LIBS) -Wl,--end-group
LDFLAGS += -nostdlib -nostartfiles -T$(LDSCRIPT)
LDFLAGS += $(EXTRA_LDFLAGS)
LD_INCLUDES += $(INCLUDES)
LD_DEPS += $(LDSCRIPT_IN)

$(LDSCRIPT): $(LD_DEPS)
	$(CPP) -x c -P -o $@ $(DEFINES) $(INCLUDES) $(addprefix -D,$(CC_PARTITION_MEMORY_SIZES)) -include $(LIBLWRISCV_CONFIG_H) $(LDSCRIPT_IN)

$(TARGET_IMAGE_ELF): build.proxy $(LDSCRIPT) | $(INSTALL_DIR)
	$(CC) $(CFLAGS) $(LDFLAGS) -o $(TARGET_IMAGE_ELF)

# Generic objdump etc rules
%.readelf: %.elf
	$(READELF) --all $^ > $@

%.objdump: %.elf
	$(OBJDUMP) -S $^ > $@

$(TARGET_IMAGE_TEXT) : $(TARGET_IMAGE_ELF)
	$(OBJCOPY) -O binary -j '.text' $^ $@

$(TARGET_IMAGE_DATA) : $(TARGET_IMAGE_ELF)
	$(OBJCOPY) -O binary -j '.data' $^ $@

$(TARGET_IMAGE_BIN) : $(TARGET_IMAGE_TEXT) $(TARGET_IMAGE_DATA)
	# To keep order
	$(CAT) $(TARGET_IMAGE_LOADER) $(TARGET_IMAGE_TEXT) $(TARGET_IMAGE_DATA) > $@

$(BUILD_DIR) $(INSTALL_DIR): 
	$(MKDIR) -p $@

ifneq ($(LW_DVS_BLD),1)
  APP_P4_CL = $(word 2, $(shell $(PERL) -e 'chdir(qw(..)); delete $$ELW{PWD}; \
                  print `$(P4) changes -m1 "$(LW_SOURCE)/..."`;'))
else
  APP_P4_CL = $(CHANGELIST)
endif

# Package into image
$(TARGET_IMAGE) $(TARGET_DESC) &:  $(TARGET_IMAGE_TEXT) $(TARGET_IMAGE_DATA)
	$(PERL) $(BUILD_SCRIPTS)/mkimage/rvmkimg.pl  \
	    --outFilePrefix     $(TARGET_NAME_BASE)  \
	    --outDir            $(INSTALL_DIR)       \
	    --appVersion        $(APP_P4_CL) \
	    --partitionCode=$(TARGET_IMAGE_TEXT)        \
	    --partitionData=$(TARGET_IMAGE_DATA)        \
	    --fmcCodeFirst

# New signing
FWSCLIENT := $(LW_TOOLS)/codesigning/fwsclient/fwsclient.pl
FWSARGS := 
FWSARGS += --major_version 1 --minor_version 0
FWSARGS += --image_file $(TARGET_IMAGE)
FWSARGS += --output_dir $(INSTALL_DIR)
FWSARGS += --chip gh100
FWSARGS += --ls_ucode_version 1 --ls_ucode_id 1
FWSARGS += --ls_engine_id 12
FWSARGS += --file_prefix=$(TARGET_NAME_BASE).
FWSARGS += --no-prod_signing
FWSARGS += --skip_clearing_output_dir
FWSARGS += --no-generate_binary_sig
FWSARGS += --hash_algo SHA384
# MK TODO: temp
FWSARGS += --debug_signing
$(TARGET_SIGNATURE): $(TARGET_IMAGE) $(TARGET_IMAGE_TEXT) $(TARGET_IMAGE_DATA)
	$(eval CODE_SIZE   := $(shell /usr/bin/stat -c %s $(TARGET_IMAGE_TEXT) ))
	$(eval IMAGE_SIZE   := $(shell /usr/bin/stat -c %s $(TARGET_IMAGE) ))
	$(PERL) $(FWSCLIENT) $(FWSARGS)  --code_range 0,$(CODE_SIZE) --data_range $(CODE_SIZE),$(IMAGE_SIZE)

# Release
RELEASE_SCRIPT = $(BUILD_SCRIPTS)/release-imgs-if-changed.pl

COMMA := ,
EMPTY :=
SPACE := $(EMPTY) $(EMPTY)

RELEASE_IMG_ARGS += --output-prefix $(TARGET_NAME_BASE)
RELEASE_IMG_ARGS += --image         $(TARGET_IMAGE)
RELEASE_IMG_ARGS += --p4            $(P4)
# Force installation always
RELEASE_IMG_ARGS += --force

RELEASE_PATH = ../../drivers/resman/kernel/inc/gspcc/bin

RELEASE_IMG_ARGS += --release-path $(RELEASE_PATH)

RELEASE_IMG_ARGS += --release-files            \
  $(subst $(SPACE),$(COMMA),$(TARGET_IMAGES))

release: $(TARGET_IMAGES)
	$(ECHO) $(PERL) $(RELEASE_SCRIPT) $(RELEASE_IMG_ARGS)
	$(PERL) $(RELEASE_SCRIPT) $(RELEASE_IMG_ARGS)
