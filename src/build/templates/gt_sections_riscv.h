// This file is automatically generated by {{$name}} - DO NOT EDIT!
//
// Profile:  {{$PROFILE}}
// Template: {{$TEMPLATE_FILE}}
//

#ifndef _G_SECTIONS_RISCV_H_
#define _G_SECTIONS_RISCV_H_

#if !__ASSEMBLER__
# include <lwtypes.h>
#endif // !__ASSEMBLER__
#include <portmpumacros.h>

///////////////////////////////////////////////////////////////////////////////
// Interface

#define UPROC_SECTION_PERMISSION_KERNEL_R    portmpuREGION_KERNEL_MODE_READ_ONLY
#define UPROC_SECTION_PERMISSION_KERNEL_W    (portmpuREGION_KERNEL_MODE_READ_WRITE ^ portmpuREGION_KERNEL_MODE_READ_ONLY)
#define UPROC_SECTION_PERMISSION_KERNEL_X    (portmpuREGION_KERNEL_MODE_READ_EXELWTE ^ portmpuREGION_KERNEL_MODE_READ_ONLY)
#define UPROC_SECTION_PERMISSION_USER_R      portmpuREGION_READ_ONLY
#define UPROC_SECTION_PERMISSION_USER_W      (portmpuREGION_READ_WRITE ^ portmpuREGION_READ_ONLY)
#define UPROC_SECTION_PERMISSION_USER_X      (portmpuREGION_READ_EXELWTE ^ portmpuREGION_READ_ONLY)

#define UPROC_SECTION_LOCATION_DMEM_ODP     (0)
#define UPROC_SECTION_LOCATION_IMEM_ODP     (1)
#define UPROC_SECTION_LOCATION_DMEM_RES     (2)
#define UPROC_SECTION_LOCATION_IMEM_RES     (3)
#define UPROC_SECTION_LOCATION_EMEM         (4)
#define UPROC_SECTION_LOCATION_FB           (5)
#define UPROC_SECTION_LOCATION_ELF          (6)

// REF increments sequentially, and is used to refer to each section by number.
// By policy, data sections are first, then code sections.
#define UPROC_SECTION_REF(name)             UPROC_SECTION_##name##_REF

// Location of the section when loaded.
#define UPROC_SECTION_LOCATION(name)        UPROC_SECTION_##name##_LOCATION

// Access permissions to the section.
#define UPROC_SECTION_PERMISSION(name)      UPROC_SECTION_##name##_PERMISSION

#if !__ASSEMBLER__
// Virtual address of the first byte of the section.
#define UPROC_SECTION_VIRT_OFFSET(name)     ((LwUPtr)&__section_##name##_start)

// Physical address of the first byte of the section.
// For paged sections, this is the first byte of the backing storage.
#define UPROC_SECTION_PHYS_OFFSET(name)     ((LwUPtr)&__section_##name##_physaddr)

// Offset of data section in ELF file, filled later. This is used for ELF-in-place ODP COW
#define UPROC_SECTION_ELF_OFFSET(name)      (0U)

// Initial size of the section. Only defined for data sections.
#define UPROC_SECTION_INITIAL_SIZE(name)    ((LwLength)(LwUPtr)&__section_##name##_initial_size)

// Maximum size of the section. (initial size + section heap if present)
#define UPROC_SECTION_MAX_SIZE(name)        ((LwLength)(LwUPtr)&__section_##name##_max_size)

// Declare prototypes for the section.
#define UPROC_SECTION_PROTOTYPES(name) \
    extern char __section_##name##_start; \
    extern char __section_##name##_physaddr; \
    extern char __section_##name##_max_size; \
    extern char __section_##name##_index;

#define UPROC_SECTION_CODE_PROTOTYPES(name) \
    UPROC_SECTION_PROTOTYPES(name)

#define UPROC_SECTION_DATA_PROTOTYPES(name) \
    UPROC_SECTION_PROTOTYPES(name) \
    extern char __section_##name##_initial_size;

#endif // !__ASSEMBLER__

#define UPROC_SECTION_LOCATION_IS_ODP(loc) \
    ((loc) <= UPROC_SECTION_LOCATION_IMEM_ODP)

#define UPROC_SECTION_IS_ODP(name) \
    UPROC_SECTION_LOCATION_IS_ODP(UPROC_SECTION_LOCATION(name))

#define UPROC_SECTION_MPUCFG_REGION(name) \
    MPU_RGN \
        __section_##name##_start + 1, \
        __section_##name##_physaddr, \
        __section_##name##_max_size, \
        UPROC_SECTION_PERMISSION(name)

///////////////////////////////////////////////////////////////////////////////
// Sections

// Invalid sections data placeholder prototype declarations
#if !__ASSEMBLER__
{{ EMIT_ILWALID_SYMBOL_DECLS() }}
#endif // !__ASSEMBLER__

// DATA SECTIONS
{{ EMIT_DATA_SECTIONS() }}

// CODE SECTIONS
{{ EMIT_CODE_SECTIONS() }}

#define UPROC_DATA_SECTION_COUNT       ({{ EMIT_FIELD('DATA_COUNT') }})
#define UPROC_CODE_SECTION_COUNT       ({{ EMIT_FIELD('CODE_COUNT') }})
#define UPROC_SECTION_COUNT            ({{ EMIT_FIELD('SECTION_COUNT') }})

#define UPROC_DATA_SECTION_FIRST       ({{ EMIT_FIELD('DATA_FIRST') }})
#define UPROC_CODE_SECTION_FIRST       ({{ EMIT_FIELD('CODE_FIRST') }})
#define UPROC_SECTION_ILWALID          UPROC_SECTION_COUNT

#define UPROC_SECTION_IDX_VALID(IDX) \
    (((IDX) >= 0) && \
     ((IDX) < UPROC_SECTION_COUNT))

#define UPROC_DATA_SECTION_IDX_VALID(IDX) \
    (((IDX) >= UPROC_DATA_SECTION_FIRST) && \
     ((IDX) < (UPROC_DATA_SECTION_FIRST + UPROC_DATA_SECTION_COUNT)))

#define UPROC_CODE_SECTION_IDX_VALID(IDX) \
    (((IDX) >= UPROC_CODE_SECTION_FIRST) && \
     ((IDX) < (UPROC_CODE_SECTION_FIRST + UPROC_CODE_SECTION_COUNT)))

#if __ASSEMBLER__
  .macro UPROC_SECTION_MPUCFG_ALL
{{ EMIT_INITIAL_MPU_DATA();
   EMIT_INITIAL_MPU_CODE() }}
  .endm
#else
extern LwUPtr SectionDescStartPhysical[UPROC_SECTION_COUNT];
extern LwUPtr SectionDescStartVirtual[UPROC_SECTION_COUNT];
extern LwLength SectionDescHeapSize[UPROC_DATA_SECTION_COUNT];
extern LwLength SectionDescMaxSize[UPROC_SECTION_COUNT];
extern LwU8 SectionDescLocation[UPROC_SECTION_COUNT];
extern LwU32 SectionDescPermission[UPROC_SECTION_COUNT];
# if ELF_IN_PLACE_FULL_ODP_COW
extern LwUPtr SectionDescStartDataInElf[UPROC_DATA_SECTION_COUNT];
# endif // ELF_IN_PLACE_FULL_ODP_COW

extern const char __imem_physical_base[];
extern const char __dmem_physical_base[];
extern const char __emem_physical_base[];
extern const char __imem_physical_size[];
extern const char __dmem_physical_size[];
extern const char __emem_physical_size[];

extern const LwUPtr DtcmRegionStart;
extern const LwUPtr ItcmRegionStart;
extern const LwUPtr EmemRegionStart;

extern const LwUPtr DtcmRegionSize;
extern const LwUPtr ItcmRegionSize;
extern const LwUPtr EmemRegionSize;
#endif // __ASSEMBLER__

#define UPROC_SECTION_MPU_INIT_COUNT   ({{ EMIT_FIELD('MPU_COUNT') }})

// Name of resident DMEM output-section shared between CPU and Uproc
#define UPROC_SHARED_DMEM_SECTION_NAME {{ EMIT_FIELD('SHARED_DMEM_SECTION_NAME', '%s') }}

#endif //_G_SECTIONS_RISCV_H_
