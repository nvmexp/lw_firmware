#
# Copyright 2016 by LWPU Corporation.  All rights reserved.  All
# information contained herein is proprietary and confidential to LWPU
# Corporation.  Any use, reproduction, or disclosure without the written
# permission of LWPU Corporation is prohibited.
#
#
# Script to generate the manifest files used with lwArchive.
#
# Should be run at the end of ucode builds (after all relevant
# profiles have been built).
#
# Takes in a child directory of the bindata/ folder, then creates
# a manifest (plain text) file listing the contents of all child
# directories and of all its subdirectories.
# That is, one manifest file will be generated per directory
# of the form '/bindata/<domain>/<chip>/'.
#
# Also generates a makefile in /bindata/<domain>/ to be used as an
# indication of whether or not chip-config should be re-run (since
# lwarchive is run from within chip-conifg.
#
use strict;
use warnings 'all';

use Carp;
use File::Basename;
use Cwd;
use Getopt::Long;

BEGIN
{
    if(__FILE__ && -f __FILE__)
    {
        my $scriptDir = dirname __FILE__;
        unshift @INC, $scriptDir if (! grep {$_ eq $scriptDir} @INC);
    }
}
use util::P4Helper;

my $p4 = "p4";
my $dir = "";
my $bHelp = 0;

MAIN:
{
    GetOptions("p4=s"           => \$p4,
               "manifest-dir=s" => \$dir,
               "help"           => \$bHelp,
               );

    print_options() if $bHelp;

    # Ensure the directory is a child of bindata
    $dir = Cwd::realpath($dir);
    die "Directory must be a child of bindata!" unless $dir =~ /bindata\/[^\/]*$/;
    
    p4Helper::p4SetPath("p4");
    print "Generating manifests for directory: $dir\n...n";
    makeManifest($dir);
    print "Successfully generated manifests\n";
}

sub print_options
{
    print <<__USAGE_MSG__;

Usage:

    perl __FILE__ [ options ]

Options:
    
    --help                Help message

    --p4 <p4Path>         The perforce command path (defaults to 'p4')

    --manifest-dir <dir>  The top-level directory, with which to generate the manifest files

__USAGE_MSG__

    exit;
}

#
# The function that does the heavy lifting for this script.
#
# Given a directory /bindata/$domain/, will create a manifest
# file for every directory of the form /bindata/$domain/<chip>.
# Also creates a makefile in /bindata/$domain to be used to determine
# if chip-config should be re-run.
#
sub makeManifest
{
    my ($dir) = @_;
    my @dirs;
    my @allFiles;

    opendir(DIR, $dir) or die $!;

    # Get all the subdirs (<chip> directories) of the given folder
    while(my $subDir = readdir(DIR))
    {
        next unless (-d "$dir/$subDir");
        push(@dirs, $subDir);
    }
    closedir(DIR);

    # Create the manifest file for each <chip> directory
    foreach my $lwrr (@dirs)
    {
        next if $lwrr =~ /^[.]+$/; # Ignore '.' and '..' directories (unix)
        my @files;

        # Get every file in every subdirectory
        my $prevLen;
        my $i = 0;
        do {
            $prevLen = scalar @files;
            push(@files, glob "$dir/$lwrr/" . ("*/" x $i) . "*");
            $i++;
        } while(scalar @files > $prevLen);

        # Write this subdirectory's manifest
        my $fileName = "$dir/$lwrr/g_manifest.txt";
        open(FILE, '>', $fileName) or die "$fileName: $!";
        p4Helper::p4AddOrEdit($fileName) or die "Perforce failed to add or edit: $fileName\n";
        foreach (@files)
        {
            next if $_ =~ /g_manifest\.txt/; # Don't include the manifest file itself
            next unless (-f $_); # Only include files
            $_ =~ s/.*\/(bindata\/.*)/$1/;   # Remove everything before "bindata" in the path
            push(@allFiles, $_);
            print FILE $_, "\n";
        }
        close(FILE);
    }

    # Output makefile
    my $makefileName = "$dir/g_archive.mk";
    p4Helper::p4AddOrEdit($makefileName) or die "Perforce failed to add or edit: $makefileName\n";
    open(FILE, '>', $makefileName) or die "$makefileName: $!";
    print FILE "# Contains a list of files to retrigger chip-config if changed.\n";
    print FILE "# THIS FILE IS AUTOMATICALLY GENERATED!\n";
    print FILE "# DO NOT MODIFY!\n\n\n";
    print FILE "# In case this is already defined\n";
    print FILE "ARCHIVE_FILES    ?=\n\n";
    foreach (@allFiles)
    {
        print FILE "ARCHIVE_FILES    += $_\n";
    }

    print FILE "\n";
    close(FILE);
}

