####################################################################
#
# Config file for Booter profiles
#
####################################################################

no warnings qw(bareword);
no strict qw(subs);

# Profile definitions.
# Each profile is made up of one or more categories which are exelwted
# in the order the category *definition* appears below.

#
# Define profiles for each supported chip-family.  Each profile specifies the
# features that are supported in that family which in turn dictacts the source
# files which must be built and included in the image.
#

# TU10X profiles
DEFINE_PROFILE "booter-load-tu10x" , qw(default booter-load-tu10x  wrap);
DEFINE_PROFILE "booter-reload-tu10x" , qw(default booter-reload-tu10x  wrap);
DEFINE_PROFILE "booter-unload-tu10x" , qw(default booter-unload-tu10x  wrap);

# TU11X profiles
DEFINE_PROFILE "booter-load-tu11x" , qw(default booter-load-tu11x  wrap);
DEFINE_PROFILE "booter-reload-tu11x" , qw(default booter-reload-tu11x  wrap);
DEFINE_PROFILE "booter-unload-tu11x" , qw(default booter-unload-tu11x  wrap);

# GA100 profiles
DEFINE_PROFILE "booter-load-ga100" , qw(default booter-load-ga100  wrap);
DEFINE_PROFILE "booter-reload-ga100" , qw(default booter-reload-ga100  wrap);
DEFINE_PROFILE "booter-unload-ga100" , qw(default booter-unload-ga100  wrap);

# GA10X profiles
DEFINE_PROFILE "booter-load-ga10x" , qw(default booter-load-ga10x  wrap);
DEFINE_PROFILE "booter-reload-ga10x" , qw(default booter-reload-ga10x  wrap);
DEFINE_PROFILE "booter-unload-ga10x" , qw(default booter-unload-ga10x  wrap);

#Default profile if not specified on command line with --profile.
DEFAULT_PROFILE "booter-load-tu10x";

# XXX - not used
CATEGORY "minimal";
{
    # omit features, classes, engines, apis that require unavailable gpu's
    MINIMAL_MODE      ON;
}

CATEGORY "default";
{
    # All default enabled features, engines, classes, apis
    ENABLE_FEATURES   ALL_DEFAULT_ENABLED;
    ENABLE_ENGINES    ALL_DEFAULT_ENABLED;
    ENABLE_CLASSES    ALL_DEFAULT_ENABLED;
    ENABLE_APIS       ALL_DEFAULT_ENABLED;

    # set platform, arch.   for now just always use these.
    ENABLE_FEATURES   PLATFORM_BOOTER;
    ENABLE_FEATURES   ARCH_FALCON;

    # Disable all GPUS preparatory to having a specific set enabled
    DISABLE_CHIPS       ( ALL );
}

CATEGORY "booter-load-tu10x";
{
    # If elwvar BOOTERCFG_GPUS is set, then use that, else default
    if ($ELW{BOOTERCFG_GPUS}) {
        ENABLE_CHIPS    $ELW{BOOTERCFG_GPUS};
    } else {
        ENABLE_CHIPS    (TU102);
    }

    ENABLE_FEATURES(
        BOOTER_COMMON_TU10X,
        BOOTER_LOAD_COMMON,
        BOOTER_LOAD_TU10X,
    );

    DISABLE_FEATURES(
    );

    ENABLE_ENGINES(
        SE,
        SHA,
    );
}

CATEGORY "booter-reload-tu10x";
{
    # If elwvar BOOTERCFG_GPUS is set, then use that, else default
    if ($ELW{BOOTERCFG_GPUS}) {
        ENABLE_CHIPS    $ELW{BOOTERCFG_GPUS};
    } else {
        ENABLE_CHIPS    (TU102);
    }

    ENABLE_FEATURES(
        BOOTER_COMMON_TU10X,
        BOOTER_RELOAD_COMMON,
        BOOTER_RELOAD_TU10X,
    );

    DISABLE_FEATURES(
    );
}

CATEGORY "booter-unload-tu10x";
{
    # If elwvar BOOTERCFG_GPUS is set, then use that, else default
    if ($ELW{BOOTERCFG_GPUS}) {
        ENABLE_CHIPS    $ELW{BOOTERCFG_GPUS};
    } else {
        ENABLE_CHIPS    (TU102);
    }

    ENABLE_FEATURES(
        BOOTER_COMMON_TU10X,
        BOOTER_UNLOAD_COMMON,
        BOOTER_UNLOAD_TU10X,
    );

    DISABLE_FEATURES(
    );
}

CATEGORY "booter-load-tu11x";
{
    # If elwvar BOOTERCFG_GPUS is set, then use that, else default
    if ($ELW{BOOTERCFG_GPUS}) {
        ENABLE_CHIPS    $ELW{BOOTERCFG_GPUS};
    } else {
        ENABLE_CHIPS    (TU116);
    }

    ENABLE_FEATURES(
        BOOTER_COMMON_TU11X,
        BOOTER_LOAD_COMMON,
        BOOTER_LOAD_TU11X,
    );

    DISABLE_FEATURES(
    );

    ENABLE_ENGINES(
        SE,
        SHA,
    );
}

CATEGORY "booter-reload-tu11x";
{
    # If elwvar BOOTERCFG_GPUS is set, then use that, else default
    if ($ELW{BOOTERCFG_GPUS}) {
        ENABLE_CHIPS    $ELW{BOOTERCFG_GPUS};
    } else {
        ENABLE_CHIPS    (TU116);
    }

    ENABLE_FEATURES(
        BOOTER_COMMON_TU11X,
        BOOTER_RELOAD_COMMON,
        BOOTER_RELOAD_TU11X,
    );

    DISABLE_FEATURES(
    );
}

CATEGORY "booter-unload-tu11x";
{
    # If elwvar BOOTERCFG_GPUS is set, then use that, else default
    if ($ELW{BOOTERCFG_GPUS}) {
        ENABLE_CHIPS    $ELW{BOOTERCFG_GPUS};
    } else {
        ENABLE_CHIPS    (TU116);
    }

    ENABLE_FEATURES(
        BOOTER_COMMON_TU11X,
        BOOTER_UNLOAD_COMMON,
        BOOTER_UNLOAD_TU11X,
    );

    DISABLE_FEATURES(
    );
}

CATEGORY "booter-load-ga100";
{
    # If elwvar BOOTERCFG_GPUS is set, then use that, else default
    if ($ELW{BOOTERCFG_GPUS}) {
        ENABLE_CHIPS    $ELW{BOOTERCFG_GPUS};
    } else {
        ENABLE_CHIPS    (GA100);
    }

    ENABLE_FEATURES(
        BOOTER_COMMON_GA100,
        BOOTER_LOAD_COMMON,
        BOOTER_LOAD_GA100,
    );

    DISABLE_FEATURES(
    );

    ENABLE_ENGINES(
        SE,
        SHA,
    );
}

CATEGORY "booter-reload-ga100";
{
    # If elwvar BOOTERCFG_GPUS is set, then use that, else default
    if ($ELW{BOOTERCFG_GPUS}) {
        ENABLE_CHIPS    $ELW{BOOTERCFG_GPUS};
    } else {
        ENABLE_CHIPS    (GA100);
    }

    ENABLE_FEATURES(
        BOOTER_COMMON_GA100,
        BOOTER_RELOAD_COMMON,
        BOOTER_RELOAD_GA100,
    );

    DISABLE_FEATURES(
    );
}

CATEGORY "booter-unload-ga100";
{
    # If elwvar BOOTERCFG_GPUS is set, then use that, else default
    if ($ELW{BOOTERCFG_GPUS}) {
        ENABLE_CHIPS    $ELW{BOOTERCFG_GPUS};
    } else {
        ENABLE_CHIPS    (GA100);
    }

    ENABLE_FEATURES(
        BOOTER_COMMON_GA100,
        BOOTER_UNLOAD_COMMON,
        BOOTER_UNLOAD_GA100,
    );

    DISABLE_FEATURES(
    );
}

CATEGORY "booter-load-ga10x";
{
    # If elwvar BOOTERCFG_GPUS is set, then use that, else default
    if ($ELW{BOOTERCFG_GPUS}) {
        ENABLE_CHIPS    $ELW{BOOTERCFG_GPUS};
    } else {
        ENABLE_CHIPS    (GA102);
    }

    ENABLE_FEATURES(
        BOOTER_COMMON_GA10X,
        BOOTER_LOAD_COMMON,
        BOOTER_LOAD_GA10X,
        BOOTER_BOOT_FROM_HS,
    );

    DISABLE_FEATURES(
    );

    ENABLE_ENGINES(
        SE,
        SHA,
    );
}

CATEGORY "booter-reload-ga10x";
{
    # If elwvar BOOTERCFG_GPUS is set, then use that, else default
    if ($ELW{BOOTERCFG_GPUS}) {
        ENABLE_CHIPS    $ELW{BOOTERCFG_GPUS};
    } else {
        ENABLE_CHIPS    (GA102);
    }

    ENABLE_FEATURES(
        BOOTER_COMMON_GA10X,
        BOOTER_RELOAD_COMMON,
        BOOTER_RELOAD_GA10X,
        BOOTER_BOOT_FROM_HS,
    );

    DISABLE_FEATURES(
    );
}

CATEGORY "booter-unload-ga10x";
{
    # If elwvar BOOTERCFG_GPUS is set, then use that, else default
    if ($ELW{BOOTERCFG_GPUS}) {
        ENABLE_CHIPS    $ELW{BOOTERCFG_GPUS};
    } else {
        ENABLE_CHIPS    (GA102);
    }

    ENABLE_FEATURES(
        BOOTER_COMMON_GA10X,
        BOOTER_UNLOAD_COMMON,
        BOOTER_UNLOAD_GA10X,
        BOOTER_BOOT_FROM_HS,
    );

    DISABLE_FEATURES(
    );
}

# Look in the environment and our -D args for any special cases.
CATEGORY "wrap";
{
    1;        # must not be empty block
}

1;
