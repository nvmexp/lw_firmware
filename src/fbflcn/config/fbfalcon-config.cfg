####################################################################
#
# Config file for fbfalcon-config.
#

no warnings qw(bareword);
no strict qw(subs);

#
# Profile definitions.
# Each profile is made up of one or more categories which are exelwted
# in the order the category *definition* appears below.
#

#
# Define profiles for each supported chip-family.  Each profile specifies the
# features that are supported in that family which in turn dictacts the source
# files which must be built and included in the image.
#

DEFINE_PROFILE "fbfalcon-v0101"                    , qw(default fbfalcon-v0101 wrap);
DEFINE_PROFILE "fbfalcon-tu10x-gddr"               , qw(default fbfalcon-tu10x-gddr  wrap);
DEFINE_PROFILE "fbfalcon-tu10x-gddr-rom"           , qw(default fbfalcon-tu10x-gddr-rom  wrap);
DEFINE_PROFILE "fbfalcon-tu10x-hbm"                , qw(default fbfalcon-tu10x-hbm  wrap);
DEFINE_PROFILE "fbfalcon-tu10x-hbm-rom"            , qw(default fbfalcon-tu10x-hbm-rom  wrap);
#DEFINE_PROFILE "fbfalcon-ga100-hbm"                , qw(default fbfalcon-ga100-hbm  wrap);
DEFINE_PROFILE "fbfalcon-tu10x-automotive-gddr-rom", qw(default fbfalcon-tu10x-automotive-gddr-rom  wrap);
DEFINE_PROFILE "fbfalcon-ga10x_pafalcon"           , qw(default fbfalcon-ga10x_pafalcon  wrap);
DEFINE_PROFILE "fbfalcon-ga10x_pafalcon-verif"     , qw(default fbfalcon-ga10x_pafalcon-verif  wrap);
DEFINE_PROFILE "fbfalcon-ga10x-gddr"               , qw(default fbfalcon-ga10x-gddr  wrap);
DEFINE_PROFILE "fbfalcon-ga10x-gddr-rom"           , qw(default fbfalcon-ga10x-gddr-rom  wrap);
DEFINE_PROFILE "fbfalcon-ad10x_pafalcon"           , qw(default fbfalcon-ad10x_pafalcon  wrap);
DEFINE_PROFILE "fbfalcon-ad10x-gddr"               , qw(default fbfalcon-ad10x-gddr  wrap);
DEFINE_PROFILE "fbfalcon-ad10x-gddr-rom"           , qw(default fbfalcon-ad10x-gddr-rom  wrap);
DEFINE_PROFILE "fbfalcon-gh100-hbm"                , qw(default fbfalcon-gh100-hbm  wrap);
DEFINE_PROFILE "fbfalcon-gh100-hbm-rom"            , qw(default fbfalcon-gh100-hbm-rom wrap);
DEFINE_PROFILE "fbfalcon-gh100-ate-hbm"            , qw(default fbfalcon-gh100-ate-hbm wrap);
DEFINE_PROFILE "fbfalcon-gh100-ate-hbm-rom"        , qw(default fbfalcon-gh100-ate-hbm-rom wrap);
DEFINE_PROFILE "fbfalcon-gh20x_pafalcon"           , qw(default fbfalcon-gh20x_pafalcon  wrap);
DEFINE_PROFILE "fbfalcon-gh20x_pafalcon-verif"     , qw(default fbfalcon-gh20x_pafalcon-verif  wrap);
DEFINE_PROFILE "fbfalcon-gh20x-gddr"               , qw(default fbfalcon-gh20x-gddr  wrap);
DEFINE_PROFILE "fbfalcon-gh20x-gddr-rom"           , qw(default fbfalcon-gh20x-gddr-rom  wrap);

# Default profile if not specified on command line with --profile.
DEFAULT_PROFILE "fbfalcon-v0101";

# XXX - not used
CATEGORY "minimal";
{
    # omit features, classes, engines, apis that require unavailable gpu's
    MINIMAL_MODE      ON;
}

CATEGORY "default";
{
    # All default enabled features, engines, classes, apis
    ENABLE_FEATURES   ALL_DEFAULT_ENABLED;
    ENABLE_ENGINES    ALL_DEFAULT_ENABLED;
    ENABLE_CLASSES    ALL_DEFAULT_ENABLED;
    ENABLE_APIS       ALL_DEFAULT_ENABLED;

    # set platform, arch.   for now just always use these.
    ENABLE_FEATURES   PLATFORM_FBFALCON;
    ENABLE_FEATURES   ARCH_FALCON;

    # Disable all GPUS preparatory to having a specific set enabled
    DISABLE_CHIPS       ( ALL );
}

CATEGORY "fbfalcon-v0101";
{
    # If elwvar FBFALCONCFG_GPUS is set, then use that, else default
    if ($ELW{FBFALCONCFG_GPUS}) {
        ENABLE_CHIPS     $ELW{FBFALCONCFG_GPUS};
    } else {
        ENABLE_CHIPS     (GV100);
    }

    ENABLE_FEATURES(
        FBFALCONCORE_FBFLCN_BASE,
        FBFALCON_CORE_RUNTIME,
        FBFALCON_JOB_MCLK_HBM2,
        FBFALCON_JOB_TREFI_HBM,
        FBFALCON_JOB_CMDQUEUE_SUPPORT,
        SUPPORT_HBM,
    );
    ENABLE_ENGINES(
        MEMORY,
    );
}

CATEGORY "fbfalcon-tu10x-gddr";
{
    # If elwvar FBFALCONCFG_GPUS is set, then use that, else default
    if ($ELW{FBFALCONCFG_GPUS}) {
        ENABLE_CHIPS     $ELW{FBFALCONCFG_GPUS};
    } else {
        ENABLE_CHIPS     (TU102);
    }

    ENABLE_FEATURES(
        FBFALCONCORE_FBFLCN_BASE,
        FBFALCON_CORE_RUNTIME,
        FBFALCON_JOB_TRAINING_DATA_SUPPORT,
        FBFALCON_JOB_CMDQUEUE_SUPPORT,
        FBFALCON_JOB_PRIV_PROFILING,
        SUPPORT_GDDR,
        FBFALCON_JOB_MCLK_GDDR,
        VBIOS_TABLE_SUPPORT_PERFORMANCE_TABLE,
        VBIOS_TABLE_SUPPORT_TRAINING_TABLE,
        REGISTER_ACCESS_RETRY,
    );
    ENABLE_ENGINES(
        MEMORY,
    );
}

CATEGORY "fbfalcon-tu10x-gddr-rom";
{
    # If elwvar FBFALCONCFG_GPUS is set, then use that, else default
    if ($ELW{FBFALCONCFG_GPUS}) {
        ENABLE_CHIPS     $ELW{FBFALCONCFG_GPUS};
    } else {
        ENABLE_CHIPS     (TU102);
    }
    
    ENABLE_FEATURES(
        FBFALCONCORE_FBFLCN_BASE,
        FBFALCON_CORE_BOOT,
        FBFALCON_JOB_BOOT_TRAINING,
        FBFALCON_JOB_TRAINING_DATA_SUPPORT,
        SUPPORT_GDDR,
        FBFALCON_JOB_MCLK_GDDR,
        VBIOS_TABLE_SUPPORT_PERFORMANCE_TABLE,
        VBIOS_TABLE_SUPPORT_TRAINING_TABLE,
    );
    ENABLE_ENGINES(
        MEMORY,
        FBFALCON,
    );
}

CATEGORY "fbfalcon-tu10x-hbm";
{
    # If elwvar FBFALCONCFG_GPUS is set, then use that, else default
    if ($ELW{FBFALCONCFG_GPUS}) {
        ENABLE_CHIPS     $ELW{FBFALCONCFG_GPUS};
    }

    ENABLE_FEATURES(
        FBFALCONCORE_FBFLCN_BASE,
        FBFALCON_CORE_RUNTIME,
        FBFALCON_JOB_TRAINING_DATA_SUPPORT,
        FBFALCON_JOB_MCLK_HBM2,
        FBFALCON_JOB_TREFI_HBM,
        FBFALCON_JOB_CMDQUEUE_SUPPORT,
        FBFALCON_JOB_PRIV_PROFILING,
        SUPPORT_HBM,
        VBIOS_TABLE_SUPPORT_PERFORMANCE_TABLE,
    );
    ENABLE_ENGINES(
        MEMORY,
    );
}

CATEGORY "fbfalcon-tu10x-hbm-rom";
{
    # If elwvar FBFALCONCFG_GPUS is set, then use that, else default
    if ($ELW{FBFALCONCFG_GPUS}) {
        ENABLE_CHIPS     $ELW{FBFALCONCFG_GPUS};
    }

    ENABLE_FEATURES(
        FBFALCONCORE_FBFLCN_BASE,
        FBFALCON_CORE_BOOT,
        FBFALCON_JOB_TRAINING_DATA_SUPPORT,
        FBFALCON_JOB_MCLK_HBM2,
        FBFALCON_JOB_TREFI_HBM,
        FBFALCON_JOB_BOOT_TRAINING,
        FBFALCON_JOB_PRIV_PROFILING,                             
        SUPPORT_HBM,
        VBIOS_TABLE_SUPPORT_PERFORMANCE_TABLE,
        VBIOS_TABLE_SUPPORT_TRAINING_TABLE,
    );
    ENABLE_ENGINES(
        MEMORY,
    );
}

CATEGORY "fbfalcon-tu10x-automotive-gddr-rom";
{
    # If elwvar FBFALCONCFG_GPUS is set, then use that, else default
    if ($ELW{FBFALCONCFG_GPUS}) {
        ENABLE_CHIPS     $ELW{FBFALCONCFG_GPUS};
    } else {
        ENABLE_CHIPS     (TU102);
    }
    
    ENABLE_FEATURES(
        FBFALCONCORE_FBFLCN_BASE,
        FBFALCON_CORE_AUTOMOTIVE_BOOT,
        SUPPORT_GDDR,
        FBFALCON_JOB_MCLK_GDDR,
        VBIOS_TABLE_SUPPORT_PERFORMANCE_TABLE,
        VBIOS_TABLE_SUPPORT_TRAINING_TABLE,
        FBFALCON_JOB_BOOT_TRAINING,
        FBFALCON_JOB_PRIV_PROFILING,
    );
    ENABLE_ENGINES(
        MEMORY,
    );
}

CATEGORY "fbfalcon-ga10x-gddr";
{
    # If elwvar FBFALCONCFG_GPUS is set, then use that, else default
    if ($ELW{FBFALCONCFG_GPUS}) {
        ENABLE_CHIPS     $ELW{FBFALCONCFG_GPUS};
    } else {
        ENABLE_CHIPS     (GA102);
    }

    ENABLE_FEATURES(
        FBFALCONCORE_ADDITIONS_GA10X,
        FBFALCONCORE_FBFLCN_BASE,
        FBFALCON_CORE_RUNTIME,
        FBFALCON_JOB_TRAINING_DATA_SUPPORT,
        FBFALCON_JOB_CMDQUEUE_SUPPORT,
        FBFALCON_JOB_TEMP_TRACKING,
        PAFALCON_STORAGE,
        SUPPORT_GDDR,
        FBFALCON_JOB_MCLK_GDDR,
        DEBUG_OUTPUT,
        VBIOS_TABLE_SUPPORT_PERFORMANCE_TABLE,
        VBIOS_TABLE_SUPPORT_TRAINING_TABLE,
        FBFALCON_HW_BAR0_MASTER,
        PAFALCON_SEQUENCER,
        TRAINING_DATA_IN_SYSMEM,
        VBIOS_TABLE_PREPARSING_VDPA,
        FBFALCON_BUG_3088142_DRAM_BW_55PCT,
        MINING_LOCK_SUPPORT,
    );
    ENABLE_ENGINES(
        MEMORY,
    );
}

CATEGORY "fbfalcon-ga10x-gddr-rom";
{
    # If elwvar FBFALCONCFG_GPUS is set, then use that, else default
    if ($ELW{FBFALCONCFG_GPUS}) {
        ENABLE_CHIPS     $ELW{FBFALCONCFG_GPUS};
    } else {
        ENABLE_CHIPS     (GA102);
    }
    
    ENABLE_FEATURES(
        FBFALCONCORE_FBFLCN_BASE,
        FBFALCON_CORE_BOOT,
        FBFALCONCORE_ADDITIONS_GA10X,
        FBFALCON_JOB_BOOT_TRAINING,
        FBFALCON_JOB_TRAINING_DATA_SUPPORT,
        PAFALCON_STORAGE,
        SUPPORT_GDDR,
        FBFALCON_JOB_MCLK_GDDR,
        VBIOS_TABLE_SUPPORT_PERFORMANCE_TABLE,
        VBIOS_TABLE_SUPPORT_TRAINING_TABLE,
        DEBUG_OUTPUT,
        FBFALCON_HW_BAR0_MASTER,
        VBIOS_TABLE_PREPARSING_VDPA,
    );
    ENABLE_ENGINES(
        MEMORY,
        FBFALCON,
    );
}

CATEGORY "fbfalcon-ad10x-gddr";
{
    # If elwvar FBFALCONCFG_GPUS is set, then use that, else default
    if ($ELW{FBFALCONCFG_GPUS}) {
        ENABLE_CHIPS     $ELW{FBFALCONCFG_GPUS};
    } else {
        ENABLE_CHIPS     (AD102);
    }

    ENABLE_FEATURES(
        FBFALCONCORE_ADDITIONS_GA10X,
        FBFALCONCORE_ADDITIONS_AD10X,
        FBFALCONCORE_FBFLCN_BASE,
        FBFALCON_CORE_RUNTIME,
        FBFALCON_JOB_TRAINING_DATA_SUPPORT,
        FBFALCON_JOB_CMDQUEUE_SUPPORT,
        FBFALCON_JOB_TEMP_TRACKING,
        PAFALCON_STORAGE,
        SUPPORT_GDDR,
        FBFALCON_JOB_MCLK_GDDR,
        DEBUG_OUTPUT,
        VBIOS_TABLE_SUPPORT_PERFORMANCE_TABLE,
        VBIOS_TABLE_SUPPORT_TRAINING_TABLE,
        FBFALCON_HW_BAR0_MASTER,
        PAFALCON_SEQUENCER,
        TRAINING_DATA_IN_SYSMEM,
        VBIOS_TABLE_PREPARSING_VDPA,
        FBFALCON_BUG_3088142_DRAM_BW_55PCT,
        MINING_LOCK_SUPPORT,
    );
    ENABLE_ENGINES(
        MEMORY,
    );
}

CATEGORY "fbfalcon-ad10x-gddr-rom";
{
    # If elwvar FBFALCONCFG_GPUS is set, then use that, else default
    if ($ELW{FBFALCONCFG_GPUS}) {
        ENABLE_CHIPS     $ELW{FBFALCONCFG_GPUS};
    } else {
        ENABLE_CHIPS     (AD102);
    }
    
    ENABLE_FEATURES(
        FBFALCONCORE_FBFLCN_BASE,
        FBFALCON_CORE_BOOT,
        FBFALCONCORE_ADDITIONS_GA10X,
        FBFALCONCORE_ADDITIONS_AD10X,
        FBFALCON_JOB_BOOT_TRAINING,
        FBFALCON_JOB_TRAINING_DATA_SUPPORT,
        PAFALCON_STORAGE,
        SUPPORT_GDDR,
        FBFALCON_JOB_MCLK_GDDR,
        VBIOS_TABLE_SUPPORT_PERFORMANCE_TABLE,
        VBIOS_TABLE_SUPPORT_TRAINING_TABLE,
        DEBUG_OUTPUT,
        FBFALCON_HW_BAR0_MASTER,
        VBIOS_TABLE_PREPARSING_VDPA,
    );
    ENABLE_ENGINES(
        MEMORY,
        FBFALCON,
    );
}

CATEGORY "fbfalcon-ga10x_pafalcon";
{
    # If elwvar FBFALCONCFG_GPUS is set, then use that, else default
    if ($ELW{FBFALCONCFG_GPUS}) {
        ENABLE_CHIPS     $ELW{FBFALCONCFG_GPUS};
    } else {
        ENABLE_CHIPS     (GA102);
    }

    ENABLE_FEATURES(
       FBFALCONCORE_ADDITIONS_GA10X,
       PAFALCON_CORE,
       PAFALCON_INTERRUPT,
       DEBUG_OUTPUT,        
       VBIOS_TABLE_PREPARSING_VDPA,
    );
    ENABLE_ENGINES(
            MEMORY,
    );
}

CATEGORY "fbfalcon-ad10x_pafalcon";
{
    # If elwvar FBFALCONCFG_GPUS is set, then use that, else default
    if ($ELW{FBFALCONCFG_GPUS}) {
        ENABLE_CHIPS     $ELW{FBFALCONCFG_GPUS};
    } else {
        ENABLE_CHIPS     (AD102);
    }

    ENABLE_FEATURES(
       FBFALCONCORE_ADDITIONS_GA10X,
       FBFALCONCORE_ADDITIONS_AD10X,
       PAFALCON_CORE,
       PAFALCON_INTERRUPT,
       DEBUG_OUTPUT,        
       VBIOS_TABLE_PREPARSING_VDPA,
    );
    ENABLE_ENGINES(
            MEMORY,
    );
}

CATEGORY "fbfalcon-ga10x_pafalcon-verif";
{
    # If elwvar FBFALCONCFG_GPUS is set, then use that, else default
    if ($ELW{FBFALCONCFG_GPUS}) {
        ENABLE_CHIPS     $ELW{FBFALCONCFG_GPUS};
    } else {
        ENABLE_CHIPS     (GA102);
    }

    ENABLE_FEATURES(
       FBFALCONCORE_ADDITIONS_GA10X,
       FBFALCONCORE_ADDITIONS_AD10X,
       PAFALCON_VERIF,
       DEBUG_OUTPUT,
       VBIOS_TABLE_PREPARSING_VDPA,
    );
    ENABLE_ENGINES(
            MEMORY,
    );
}


#
# Hopper HBM
#

CATEGORY "fbfalcon-gh100-hbm";
{
    # If elwvar FBFALCONCFG_GPUS is set, then use that, else default
    if ($ELW{FBFALCONCFG_GPUS}) {
        ENABLE_CHIPS     $ELW{FBFALCONCFG_GPUS};
    } else {
        ENABLE_CHIPS     (GH100);
    }

    ENABLE_FEATURES(
        FBFALCONCORE_ADDITIONS_GA10X,
        FBFALCONCORE_ADDITIONS_AD10X,
        FBFALCONCORE_ADDITIONS_GH10X,
        FBFALCONCORE_FBFLCN_BASE,
        FBFALCON_CORE_RUNTIME,
        FBFALCON_JOB_MCLK_HBM_GH100,
        VBIOS_TABLE_SUPPORT_TRAINING_TABLE,
        FBFALCON_JOB_HBM_PERIODIC_TR,
        FBFALCON_JOB_CMDQUEUE_SUPPORT,
        SUPPORT_HBM,
        VBIOS_TABLE_PREPARSING_VDPA,
        VBIOS_TABLE_SUPPORT_PERFORMANCE_TABLE,
        VBIOS_TABLE_SUPPORT_GPIO_TABLE,
        FBFALCON_HW_BAR0_MASTER,
        FBFALCON_SW_BAR0_MASTER_ENFORCED,
    );
    ENABLE_ENGINES(
        MEMORY,
    );
}

CATEGORY "fbfalcon-gh100-hbm-rom";
{
    # If elwvar FBFALCONCFG_GPUS is set, then use that, else default
    if ($ELW{FBFALCONCFG_GPUS}) {
        ENABLE_CHIPS     $ELW{FBFALCONCFG_GPUS};
    } else {
        ENABLE_CHIPS     (GH100);
    }
    
    ENABLE_FEATURES(
        FBFALCONCORE_ADDITIONS_GA10X,
        FBFALCONCORE_ADDITIONS_AD10X,
        FBFALCONCORE_ADDITIONS_GH10X,
        FBFALCONCORE_FBFLCN_BASE,
        FBFALCON_CORE_RUNTIME,
        FBFALCON_JOB_CMDQUEUE_SUPPORT,
        FBFALCON_JOB_BOOT_TRAINING,
        VBIOS_TABLE_SUPPORT_PERFORMANCE_TABLE,
        VBIOS_TABLE_SUPPORT_GPIO_TABLE,
        VBIOS_TABLE_SUPPORT_TRAINING_TABLE,
        DEBUG_OUTPUT,
        FBFALCON_HW_BAR0_MASTER,
        FBFALCON_SW_BAR0_MASTER_ENFORCED,
        VBIOS_TABLE_PREPARSING_VDPA,
        FBFALCON_JOB_MCLK_HBM_GH100,
        FBFALCON_JOB_HBM_PERIODIC_TR,
        SUPPORT_HBM,
    );
    ENABLE_ENGINES(
        MEMORY,
        FBFALCON,
    );
}


CATEGORY "fbfalcon-gh100-ate-hbm";
{
    # If elwvar FBFALCONCFG_GPUS is set, then use that, else default
    if ($ELW{FBFALCONCFG_GPUS}) {
        ENABLE_CHIPS     $ELW{FBFALCONCFG_GPUS};
    } else {
        ENABLE_CHIPS     (GH100);
    }

    ENABLE_FEATURES(
        FBFALCONCORE_ADDITIONS_GA10X,
        FBFALCONCORE_ADDITIONS_AD10X,
        FBFALCONCORE_ADDITIONS_GH10X,
        FBFALCONCORE_FBFLCN_BASE,
        FBFALCON_CORE_RUNTIME,
        FBFALCON_JOB_MCLK_HBM_GH100,
        FBFALCON_JOB_CMDQUEUE_SUPPORT,
        SUPPORT_HBM,
        VBIOS_TABLE_PREPARSING_VDPA,
        VBIOS_TABLE_SUPPORT_PERFORMANCE_TABLE,
        VBIOS_TABLE_SUPPORT_GPIO_TABLE,
        FBFALCON_HW_BAR0_MASTER,
        FBFALCON_SW_BAR0_MASTER_ENFORCED,
        VBIOS_INCLUDED_IN_BINARY,
        DECODE_HBM_MEMORY_DEVICE_ID,
    );
    ENABLE_ENGINES(
        MEMORY,
    );
}

CATEGORY "fbfalcon-gh100-ate-hbm-rom";
{
    # If elwvar FBFALCONCFG_GPUS is set, then use that, else default
    if ($ELW{FBFALCONCFG_GPUS}) {
        ENABLE_CHIPS     $ELW{FBFALCONCFG_GPUS};
    } else {
        ENABLE_CHIPS     (GH100);
    }
    
    ENABLE_FEATURES(
        FBFALCONCORE_ADDITIONS_GA10X,
        FBFALCONCORE_ADDITIONS_AD10X,
        FBFALCONCORE_ADDITIONS_GH10X,
        FBFALCONCORE_FBFLCN_BASE,
        FBFALCON_CORE_RUNTIME,
        FBFALCON_JOB_CMDQUEUE_SUPPORT,
        FBFALCON_JOB_BOOT_TRAINING,
        VBIOS_TABLE_SUPPORT_PERFORMANCE_TABLE,
        VBIOS_TABLE_SUPPORT_GPIO_TABLE,
        VBIOS_TABLE_SUPPORT_TRAINING_TABLE,
        DEBUG_OUTPUT,
        FBFALCON_HW_BAR0_MASTER,
        FBFALCON_SW_BAR0_MASTER_ENFORCED,
        VBIOS_TABLE_PREPARSING_VDPA,
        FBFALCON_JOB_MCLK_HBM_GH100,
        FBFALCON_JOB_HBM_PERIODIC_TR,
        SUPPORT_HBM,
        VBIOS_INCLUDED_IN_BINARY,
        DECODE_HBM_MEMORY_DEVICE_ID,
    );
    ENABLE_ENGINES(
        MEMORY,
        FBFALCON,
    );
}


#
# Hopper GDDR
#
CATEGORY "fbfalcon-gh20x-gddr";
{
    # If elwvar FBFALCONCFG_GPUS is set, then use that, else default
    if ($ELW{FBFALCONCFG_GPUS}) {
        ENABLE_CHIPS     $ELW{FBFALCONCFG_GPUS};
    } else {
        ENABLE_CHIPS     (GH202);
    }

    ENABLE_FEATURES(
        FBFALCONCORE_ADDITIONS_GH20X,
        FBFALCONCORE_ADDITIONS_GA10X,
        FBFALCONCORE_ADDITIONS_AD10X,
        FBFALCONCORE_FBFLCN_BASE,
        FBFALCON_CORE_RUNTIME,
        FBFALCON_JOB_TRAINING_DATA_SUPPORT,
        FBFALCON_JOB_CMDQUEUE_SUPPORT,
        FBFALCON_JOB_TEMP_TRACKING,
        PAFALCON_STORAGE,
        SUPPORT_GDDR,
        FBFALCON_JOB_MCLK_GDDR,
        DEBUG_OUTPUT,
        VBIOS_TABLE_SUPPORT_PERFORMANCE_TABLE,
        VBIOS_TABLE_SUPPORT_GPIO_TABLE,
        VBIOS_TABLE_SUPPORT_TRAINING_TABLE,
        FBFALCON_HW_BAR0_MASTER,
        PAFALCON_SEQUENCER,
        TRAINING_DATA_IN_SYSMEM,
        VBIOS_TABLE_PREPARSING_VDPA,
        MINING_LOCK_SUPPORT,
    );
    ENABLE_ENGINES(
        MEMORY,
    );
}

CATEGORY "fbfalcon-gh20x-gddr-rom";
{
    # If elwvar FBFALCONCFG_GPUS is set, then use that, else default
    if ($ELW{FBFALCONCFG_GPUS}) {
        ENABLE_CHIPS     $ELW{FBFALCONCFG_GPUS};
    } else {
        ENABLE_CHIPS     (GH202);
    }
    
    ENABLE_FEATURES(
        FBFALCONCORE_ADDITIONS_GA10X,
        FBFALCONCORE_ADDITIONS_AD10X,
        FBFALCONCORE_ADDITIONS_GH20X,
        FBFALCONCORE_FBFLCN_BASE,
        FBFALCON_CORE_BOOT,
        FBFALCON_JOB_TRAINING_DATA_SUPPORT,
        PAFALCON_STORAGE,
        SUPPORT_GDDR,
        FBFALCON_JOB_MCLK_GDDR,
        FBFALCON_JOB_BOOT_TRAINING,
        VBIOS_TABLE_SUPPORT_PERFORMANCE_TABLE,
        VBIOS_TABLE_SUPPORT_GPIO_TABLE,
        VBIOS_TABLE_SUPPORT_TRAINING_TABLE,
        DEBUG_OUTPUT,
        FBFALCON_HW_BAR0_MASTER,
        VBIOS_TABLE_PREPARSING_VDPA,
    );
    ENABLE_ENGINES(
        MEMORY,
        FBFALCON,
    );
}

CATEGORY "fbfalcon-gh20x_pafalcon";
{
    # If elwvar FBFALCONCFG_GPUS is set, then use that, else default
    if ($ELW{FBFALCONCFG_GPUS}) {
        ENABLE_CHIPS     $ELW{FBFALCONCFG_GPUS};
    } else {
        ENABLE_CHIPS     (GH202);
    }

    ENABLE_FEATURES(
       FBFALCONCORE_ADDITIONS_GA10X,
       FBFALCONCORE_ADDITIONS_AD10X,
       FBFALCONCORE_ADDITIONS_GH20X,
       PAFALCON_CORE,
       PAFALCON_INTERRUPT,
       DEBUG_OUTPUT,        
       VBIOS_TABLE_PREPARSING_VDPA,
       VBIOS_TABLE_SUPPORT_PERFORMANCE_TABLE,
       VBIOS_TABLE_SUPPORT_GPIO_TABLE,
    );
    ENABLE_ENGINES(
       MEMORY,
    );
}


CATEGORY "fbfalcon-gh20x_pafalcon-verif";
{
    # If elwvar FBFALCONCFG_GPUS is set, then use that, else default
    if ($ELW{FBFALCONCFG_GPUS}) {
        ENABLE_CHIPS     $ELW{FBFALCONCFG_GPUS};
    } else {
        ENABLE_CHIPS     (GH202);
    }

    ENABLE_FEATURES(
       FBFALCONCORE_ADDITIONS_GA10X,
       FBFALCONCORE_ADDITIONS_AD10X,
       FBFALCONCORE_ADDITIONS_GH20X,
       PAFALCON_VERIF,
       DEBUG_OUTPUT,
       VBIOS_TABLE_PREPARSING_VDPA,
       VBIOS_TABLE_SUPPORT_PERFORMANCE_TABLE,
       VBIOS_TABLE_SUPPORT_GPIO_TABLE,
    );
    ENABLE_ENGINES(
       MEMORY,
    );
}

# Look in the environment and our -D args for any special cases.
CATEGORY "wrap";
{
    1;        # must not be empty block
}

1;
