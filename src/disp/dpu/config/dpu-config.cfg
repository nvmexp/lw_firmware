####################################################################
#
# Config file for dpu-config.
#

no warnings qw(bareword);
no strict qw(subs);

#
# Profile definitions.
# Each profile is made up of one or more categories which are exelwted
# in the order the category *definition* appears below.
#

#
# Define profiles for each supported chip-family.  Each profile specifies the
# features that are supported in that family which in turn dictacts the source
# files which must be built and included in the image.
#
DEFINE_PROFILE "dpu-v0201" , qw(default dpu-v0201  wrap);
DEFINE_PROFILE "dpu-v0205" , qw(default dpu-v0205  wrap);
DEFINE_PROFILE "dpu-v0207" , qw(default dpu-v0207  wrap);
DEFINE_PROFILE "dpu-gv100" , qw(default dpu-gv100  wrap);
DEFINE_PROFILE "dpu-tu10x" , qw(default dpu-tu10x  wrap);
DEFINE_PROFILE "dpu-tu116" , qw(default dpu-tu116  wrap);
DEFINE_PROFILE "dpu-ga10x" , qw(default dpu-ga10x  wrap);
DEFINE_PROFILE "dpu-ga10x_boot_from_hs" , qw(default dpu-ga10x_boot_from_hs  wrap);
DEFINE_PROFILE "dpu-ad10x" , qw(default dpu-ad10x  wrap);
DEFINE_PROFILE "dpu-ad10x_boot_from_hs" , qw(default dpu-ad10x_boot_from_hs  wrap);

# Default profile if not specified on command line with --profile.
DEFAULT_PROFILE "dpu-v0201";

# XXX - not used
CATEGORY "minimal";
{
    # omit features, classes, engines, apis that require unavailable gpu's
    MINIMAL_MODE      ON;
}

CATEGORY "default";
{
    # All default enabled features, engines, classes, apis
    ENABLE_FEATURES   ALL_DEFAULT_ENABLED;
    ENABLE_ENGINES    ALL_DEFAULT_ENABLED;
    ENABLE_CLASSES    ALL_DEFAULT_ENABLED;
    ENABLE_APIS       ALL_DEFAULT_ENABLED;

    # set platform, arch.   for now just always use these.
    ENABLE_FEATURES   PLATFORM_DPU;
    ENABLE_FEATURES   ARCH_FALCON;

    # Disable all GPUS preparatory to having a specific set enabled
    DISABLE_CHIPS       ( ALL );
}

CATEGORY "dpu-v0201";
{
    # If elwvar DPUCFG_GPUS is set, then use that, else default
    if ($ELW{DPUCFG_GPUS}) {
        ENABLE_CHIPS     $ELW{DPUCFG_GPUS};
    } else {
        # GK104 was the enabled chip at first. Due to that Kepler is not supported 
        # anymore while v0201...v0204 still share the same ucode entry in RM, we change
        # the enable chip to GM107.
        ENABLE_CHIPS     (GM107);
    }
    ENABLE_FEATURES(
        DPUTASK_SCANOUTLOGGING,
    );
    DISABLE_FEATURES(
        DPUTASK_WKRTHD,
    );
    DISABLE_ENGINES(
        ISOHUB
    );
}

CATEGORY "dpu-v0205";
{
    # If elwvar DPUCFG_GPUS is set, then use that, else default
    if ($ELW{DPUCFG_GPUS}) {
        ENABLE_CHIPS     $ELW{DPUCFG_GPUS};
    } else {
        ENABLE_CHIPS     (GM200);
    }

    ENABLE_FEATURES(
        LIGHT_SELWRE_FALCON,
        DYNAMIC_FLCN_PRIV_LEVEL,
        DPU_I2C,
        DPUTASK_HDCP,
        DPUTASK_HDCP22WIRED,
        DPUTASK_SCANOUTLOGGING,
        DPUTASK_MSCGWITHFRL,
        DPUTIMER0_FOR_OS_TICKS,
    );
    ENABLE_ENGINES(
        LSF,
    );
    DISABLE_FEATURES(
        DPUTASK_WKRTHD,
    );
    DISABLE_ENGINES(
    );
}

CATEGORY "dpu-v0207";
{
    # If elwvar DPUCFG_GPUS is set, then use that, else default
    if ($ELW{DPUCFG_GPUS}) {
        ENABLE_CHIPS     $ELW{DPUCFG_GPUS};
    } else {
        ENABLE_CHIPS     (GP100);
    }

    ENABLE_FEATURES(
        LIGHT_SELWRE_FALCON,
        DYNAMIC_FLCN_PRIV_LEVEL,
        DPU_I2C,
        DPUTASK_HDCP,
        DPUTASK_HDCP22WIRED,
        DPUTASK_SCANOUTLOGGING,
        DPUTASK_MSCGWITHFRL,
        DPUTASK_VRR,
        DPUTIMER0_FOR_OS_TICKS,
    );
    ENABLE_ENGINES(
        LSF,
        VRR,
    );
    DISABLE_FEATURES(
        DPUTASK_WKRTHD,
    );
}

CATEGORY "dpu-gv100";
{
    # If elwvar DPUCFG_GPUS is set, then use that, else default
    if ($ELW{DPUCFG_GPUS}) {
        ENABLE_CHIPS     $ELW{DPUCFG_GPUS};
    } else {
        ENABLE_CHIPS     (GV100);
    }

    ENABLE_FEATURES(
        LIGHT_SELWRE_FALCON,
        DYNAMIC_FLCN_PRIV_LEVEL,
        DPUTASK_HDCP,
        DPUTASK_HDCP22WIRED,
        DPU_I2C,
        DPU_OS_CALLBACK_CENTRALISED,
        DPUJOB_HS_SWITCH_TEST,
    );
    ENABLE_ENGINES(
        LSF,
    );
    DISABLE_ENGINES(
        ISOHUB,
    );
    DISABLE_FEATURES(
        DPUTASK_SCANOUTLOGGING,
        DPUTASK_MSCGWITHFRL,
    );
}

CATEGORY "dpu-tu10x";
{
    # If elwvar DPUCFG_GPUS is set, then use that, else default
    if ($ELW{DPUCFG_GPUS}) {
        ENABLE_CHIPS     $ELW{DPUCFG_GPUS};
    } else {
        ENABLE_CHIPS     (TU102);
    }

    # Please update //sw/dev/gpu_drv/<branch>/drivers/resman/kernel/gsp/lw/gspctrl.c
    # when enabling/disabling any test feature.
    ENABLE_FEATURES(
        LIGHT_SELWRE_FALCON,
        DYNAMIC_FLCN_PRIV_LEVEL,
        DPUTASK_HDCP,
        DPUTASK_HDCP22WIRED,
        DPU_I2C,
        DPU_OS_CALLBACK_CENTRALISED,
        DPURTTIMER_FOR_OS_TICKS,
        DPUJOB_HS_SWITCH_TEST,
        DPUJOB_MSCG_TEST,
    );
    ENABLE_ENGINES(
        LSF,
    );
    DISABLE_ENGINES(
        ISOHUB,
    );
    DISABLE_FEATURES(
        DPUTASK_SCANOUTLOGGING,
        DPUTASK_MSCGWITHFRL,
    );
}

CATEGORY "dpu-tu116";
{
    # If elwvar DPUCFG_GPUS is set, then use that, else default
    if ($ELW{DPUCFG_GPUS}) {
        ENABLE_CHIPS     $ELW{DPUCFG_GPUS};
    } else {
        ENABLE_CHIPS     (TU116);
    }

    ENABLE_FEATURES(
        LIGHT_SELWRE_FALCON,
        DYNAMIC_FLCN_PRIV_LEVEL,
        DPUTASK_HDCP,
        DPUTASK_HDCP22WIRED,
        DPU_I2C,
        DPU_OS_CALLBACK_CENTRALISED,
        DPURTTIMER_FOR_OS_TICKS,
        DPUJOB_HS_SWITCH_TEST,
        DPUJOB_MSCG_TEST,
    );
    ENABLE_ENGINES(
        LSF,
    );
    DISABLE_ENGINES(
        ISOHUB,
    );
    DISABLE_FEATURES(
        DPUTASK_SCANOUTLOGGING,
        DPUTASK_MSCGWITHFRL,
    );
}

CATEGORY "dpu-ga10x_boot_from_hs";
{
    # If elwvar DPUCFG_GPUS is set, then use that, else default
    if ($ELW{DPUCFG_GPUS}) {
        ENABLE_CHIPS     $ELW{DPUCFG_GPUS};
    } else {
        ENABLE_CHIPS     (GA102);
    }

    ENABLE_FEATURES(
        LIGHT_SELWRE_FALCON,
        DYNAMIC_FLCN_PRIV_LEVEL,
        DPUTASK_HDCP,
        DPUTASK_HDCP22WIRED,
        DPU_I2C,
        DPU_OS_CALLBACK_CENTRALISED,
        DPURTTIMER_FOR_OS_TICKS,
        DPUJOB_HS_SWITCH_TEST,
        DPUJOB_MSCG_TEST,
    );
    ENABLE_ENGINES(
        LSF,
    );
    DISABLE_ENGINES(
        ISOHUB,
    );
    DISABLE_FEATURES(
        DPUTASK_SCANOUTLOGGING,
        DPUTASK_MSCGWITHFRL,
    );
}

CATEGORY "dpu-ga10x";
{
    # If elwvar DPUCFG_GPUS is set, then use that, else default
    if ($ELW{DPUCFG_GPUS}) {
        ENABLE_CHIPS     $ELW{DPUCFG_GPUS};
    } else {
        ENABLE_CHIPS     (GA102);
    }

    ENABLE_FEATURES(
        LIGHT_SELWRE_FALCON,
        DYNAMIC_FLCN_PRIV_LEVEL,
        DPUTASK_HDCP,
        DPUTASK_HDCP22WIRED,
        DPU_I2C,
        DPU_OS_CALLBACK_CENTRALISED,
        DPURTTIMER_FOR_OS_TICKS,
        DPUJOB_HS_SWITCH_TEST,
        DPUJOB_MSCG_TEST,
    );
    ENABLE_ENGINES(
        LSF,
    );
    DISABLE_ENGINES(
        ISOHUB,
    );
    DISABLE_FEATURES(
        DPUTASK_SCANOUTLOGGING,
        DPUTASK_MSCGWITHFRL,
    );
}

CATEGORY "dpu-ad10x";
{
    # If elwvar DPUCFG_GPUS is set, then use that, else default
    if ($ELW{DPUCFG_GPUS}) {
        ENABLE_CHIPS     $ELW{DPUCFG_GPUS};
    } else {
        ENABLE_CHIPS     (AD102);
    }

    ENABLE_FEATURES(
        LIGHT_SELWRE_FALCON,
        DYNAMIC_FLCN_PRIV_LEVEL,
        DPUTASK_HDCP,
        DPUTASK_HDCP22WIRED,
        DPU_I2C,
        DPU_OS_CALLBACK_CENTRALISED,
        DPURTTIMER_FOR_OS_TICKS,
        DPUJOB_HS_SWITCH_TEST,
        DPUJOB_MSCG_TEST,
    );
    ENABLE_ENGINES(
        LSF,
    );
    DISABLE_ENGINES(
        ISOHUB,
    );
    DISABLE_FEATURES(
        DPUTASK_SCANOUTLOGGING,
        DPUTASK_MSCGWITHFRL,
    );
}

CATEGORY "dpu-ad10x_boot_from_hs";
{
    # If elwvar DPUCFG_GPUS is set, then use that, else default
    if ($ELW{DPUCFG_GPUS}) {
        ENABLE_CHIPS     $ELW{DPUCFG_GPUS};
    } else {
        ENABLE_CHIPS     (AD102);
    }

    ENABLE_FEATURES(
        LIGHT_SELWRE_FALCON,
        DYNAMIC_FLCN_PRIV_LEVEL,
        DPUTASK_HDCP,
        DPUTASK_HDCP22WIRED,
        DPU_I2C,
        DPU_OS_CALLBACK_CENTRALISED,
        DPURTTIMER_FOR_OS_TICKS,
        DPUJOB_HS_SWITCH_TEST,
        DPUJOB_MSCG_TEST,
    );
    ENABLE_ENGINES(
        LSF,
    );
    DISABLE_ENGINES(
        ISOHUB,
    );
    DISABLE_FEATURES(
        DPUTASK_SCANOUTLOGGING,
        DPUTASK_MSCGWITHFRL,
    );
}

# Look in the environment and our -D args for any special cases.
CATEGORY "wrap";
{
    1;        # must not be empty block
}

1;
